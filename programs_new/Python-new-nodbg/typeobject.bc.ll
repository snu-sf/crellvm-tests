; ModuleID = './typeobject.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.method_cache_entry = type { i32, %struct._object*, %struct._object* }
%union._gc_head = type { %struct.anon }
%struct.anon = type { %union._gc_head*, %union._gc_head*, i64 }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct._Py_atomic_address = type { i8* }
%struct.wrapperbase = type { i8*, i32, i8*, %struct._object* (%struct._object*, %struct._object*, i8*)*, i8*, i32, %struct._object* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct._PyWeakReference = type { %struct._object, %struct._object*, %struct._object*, i64, %struct._PyWeakReference*, %struct._PyWeakReference* }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyType_Spec = type { i8*, i32, i32, i32, %struct.PyType_Slot* }
%struct.PyType_Slot = type { i32, i8* }
%struct._heaptypeobject = type { %struct._typeobject, %struct.PyNumberMethods, %struct.PyMappingMethods, %struct.PySequenceMethods, %struct.PyBufferProcs, %struct._object*, %struct._object*, %struct._object*, %struct._dictkeysobject* }
%struct._dictkeysobject = type opaque
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type { %struct.PyVarObject, %struct._frame*, %struct.PyCodeObject*, %struct._object*, %struct._object*, %struct._object*, %struct._object**, %struct._object**, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, i8, [20 x %struct.PyTryBlock], [1 x %struct._object*] }
%struct.PyCodeObject = type { %struct._object, i32, i32, i32, i32, i32, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i8*, %struct._object*, %struct._object*, i32, %struct._object*, i8*, %struct._object* }
%struct.PyTryBlock = type { i32, i32, i32 }
%struct.PyASCIIObject = type { %struct._object, i64, i64, %struct.anon.0, i32* }
%struct.anon.0 = type { i32 }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.superobject = type { %struct._object, %struct._typeobject*, %struct._object*, %struct._typeobject* }
%struct.PyCellObject = type { %struct._object, %struct._object* }
%struct.PyWrapperDescrObject = type { %struct.PyDescrObject, %struct.wrapperbase*, i8* }
%struct.PyDescrObject = type { %struct._object, %struct._typeobject*, %struct._object*, %struct._object* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.PyCFunctionObject = type { %struct._object, %struct.PyMethodDef*, %struct._object*, %struct._object* }

@_Py_NoneStruct = external global %struct._object, align 8
@next_version_tag = internal global i32 0, align 4
@method_cache = internal global [512 x %struct.method_cache_entry] zeroinitializer, align 16
@PyBaseObject_Type = global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* @PyType_Type }, i64 0 }, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i64 16, i64 0, void (%struct._object*)* @object_dealloc, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* @object_repr, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* bitcast (i64 (i8*)* @_Py_HashPointer to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* @object_str, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* @PyObject_GenericSetAttr, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @object_richcompare, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([7 x %struct.PyMethodDef], [7 x %struct.PyMethodDef]* @object_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([2 x %struct.PyGetSetDef], [2 x %struct.PyGetSetDef]* @object_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @object_init, %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @object_new, void (i8*)* @PyObject_Free, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str = private unnamed_addr constant [26 x i8] c"GC object already tracked\00", align 1
@_PyGC_generation0 = external global %union._gc_head*, align 8
@PyExc_TypeError = external global %struct._object*, align 8
@.str.1 = private unnamed_addr constant [121 x i8] c"metaclass conflict: the metaclass of a derived class must be a (non-strict) subclass of the metaclasses of all its bases\00", align 1
@PyType_Type = global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* @PyType_Type }, i64 0 }, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i64 824, i64 40, void (%struct._object*)* bitcast (void (%struct._typeobject*)* @type_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct._typeobject*)* @type_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @type_call to %struct._object* (%struct._object*, %struct._object*, %struct._object*)*), %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._typeobject*, %struct._object*)* @type_getattro to %struct._object* (%struct._object*, %struct._object*)*), i32 (%struct._object*, %struct._object*, %struct._object*)* bitcast (i32 (%struct._typeobject*, %struct._object*, %struct._object*)* @type_setattro to i32 (%struct._object*, %struct._object*, %struct._object*)*), %struct.PyBufferProcs* null, i64 2147763200, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @type_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct._typeobject*, i32 (%struct._object*, i8*)*, i8*)* @type_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct._typeobject*)* @type_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 368, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([8 x %struct.PyMethodDef], [8 x %struct.PyMethodDef]* @type_methods, i32 0, i32 0), %struct.PyMemberDef* getelementptr inbounds ([8 x %struct.PyMemberDef], [8 x %struct.PyMemberDef]* @type_members, i32 0, i32 0), %struct.PyGetSetDef* getelementptr inbounds ([9 x %struct.PyGetSetDef], [9 x %struct.PyGetSetDef]* @type_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 264, i32 (%struct._object*, %struct._object*, %struct._object*)* @type_init, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @type_new, void (i8*)* @PyObject_GC_Del, i32 (%struct._object*)* bitcast (i32 (%struct._typeobject*)* @type_is_gc to i32 (%struct._object*)*), %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.2 = private unnamed_addr constant [45 x i8] c"type '%.100s' is not an acceptable base type\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.3 = private unnamed_addr constant [20 x i8] c"invalid slot offset\00", align 1
@slotoffsets = internal global [75 x i16] [i16 -1, i16 0, i16 0, i16 688, i16 672, i16 680, i16 464, i16 400, i16 504, i16 472, i16 432, i16 544, i16 632, i16 664, i16 552, i16 608, i16 648, i16 592, i16 568, i16 624, i16 584, i16 576, i16 600, i16 560, i16 656, i16 616, i16 528, i16 480, i16 488, i16 416, i16 448, i16 520, i16 456, i16 440, i16 424, i16 496, i16 408, i16 640, i16 512, i16 736, i16 704, i16 752, i16 760, i16 768, i16 720, i16 696, i16 712, i16 304, i16 256, i16 336, i16 128, i16 192, i16 48, i16 376, i16 272, i16 280, i16 176, i16 64, i16 144, i16 120, i16 296, i16 328, i16 216, i16 224, i16 232, i16 312, i16 88, i16 200, i16 72, i16 152, i16 136, i16 184, i16 240, i16 248, i16 320], align 16
@PyId___module__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), %struct._object* null }, align 8
@.str.4 = private unnamed_addr constant [21 x i8] c"Objects/typeobject.c\00", align 1
@PyUnicode_Type = external global %struct._typeobject, align 8
@.str.5 = private unnamed_addr constant [5 x i8] c"type\00", align 1
@type_doc = internal global [106 x i8] c"type(object_or_name, bases, dict)\0Atype(object) -> the object's type\0Atype(name, bases, dict) -> a new type\00", align 16
@type_methods = internal global [8 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.194, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @mro_external to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.195, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.196, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._typeobject*, %struct._object*)* @type_subclasses to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.197, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.198, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @type_prepare to %struct._object* (%struct._object*, %struct._object*)*), i32 19, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.199, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.200, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @type___instancecheck__, i32 8, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.201, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.202, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @type___subclasscheck__, i32 8, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.203, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.204, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @type_dir, i32 4, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.205, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.206, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @type_sizeof, i32 4, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.207, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@type_members = internal global [8 x %struct.PyMemberDef] [%struct.PyMemberDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.216, i32 0, i32 0), i32 19, i64 32, i32 1, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.217, i32 0, i32 0), i32 19, i64 40, i32 1, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.218, i32 0, i32 0), i32 2, i64 168, i32 1, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.219, i32 0, i32 0), i32 2, i64 208, i32 1, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.220, i32 0, i32 0), i32 6, i64 256, i32 1, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.221, i32 0, i32 0), i32 2, i64 288, i32 1, i8* null }, %struct.PyMemberDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.222, i32 0, i32 0), i32 6, i64 344, i32 1, i8* null }, %struct.PyMemberDef zeroinitializer], align 16
@type_getsets = internal global [9 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.211, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_name to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct._typeobject*, %struct._object*, i8*)* @type_set_name to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.223, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_qualname to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct._typeobject*, %struct._object*, i8*)* @type_set_qualname to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.214, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_get_bases to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct._typeobject*, %struct._object*, i8*)* @type_set_bases to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_module to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct._typeobject*, %struct._object*, i8*)* @type_set_module to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.224, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_abstractmethods to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct._typeobject*, %struct._object*, i8*)* @type_set_abstractmethods to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.215, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_dict to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.225, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_get_doc to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct._typeobject*, %struct._object*, i8*)* @type_set_doc to i32 (%struct._object*, %struct._object*, i8*)*), i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.226, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct._typeobject*, i8*)* @type_get_text_signature to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.6 = private unnamed_addr constant [7 x i8] c"object\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"object()\0A--\0A\0AThe most base type\00", align 1
@object_methods = internal global [7 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.262, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @object_reduce_ex, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.263, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.264, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @object_reduce, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.263, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.265, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @object_subclasshook, i32 17, i8* getelementptr inbounds ([309 x i8], [309 x i8]* @object_subclasshook_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.266, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @object_format, i32 1, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.267, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.206, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @object_sizeof, i32 4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.268, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.204, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @object_dir, i32 4, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.269, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@object_getsets = internal global [2 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.294, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @object_get_class, i32 (%struct._object*, %struct._object*, i8*)* @object_set_class, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.295, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.8 = private unnamed_addr constant [87 x i8] c"type '%.100s' participates in gc and is a base type but has inappropriate tp_free slot\00", align 1
@PyId___doc__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.225, i32 0, i32 0), %struct._object* null }, align 8
@PyId___hash__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), %struct._object* null }, align 8
@.str.9 = private unnamed_addr constant [118 x i8] c"Type %.100s defines tp_reserved (formerly tp_compare) but not tp_richcompare. Comparisons may not behave as intended.\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"super\00", align 1
@super_doc = internal global [468 x i8] c"super() -> same as super(__class__, <first argument>)\0Asuper(type) -> unbound super object\0Asuper(type, obj) -> bound super object; requires isinstance(obj, type)\0Asuper(type, type2) -> bound super object; requires issubclass(type2, type)\0ATypical use to call a cooperative superclass method:\0Aclass C(B):\0A    def meth(self, arg):\0A        super().meth(arg)\0AThis works for class methods too:\0Aclass C(B):\0A    @classmethod\0A    def cmeth(cls, arg):\0A        super().cmeth(arg)\0A\00", align 16
@super_members = internal global [4 x %struct.PyMemberDef] [%struct.PyMemberDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.311, i32 0, i32 0), i32 6, i64 16, i32 1, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.312, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.313, i32 0, i32 0), i32 6, i64 24, i32 1, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.314, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.315, i32 0, i32 0), i32 6, i64 32, i32 1, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.316, i32 0, i32 0) }, %struct.PyMemberDef zeroinitializer], align 16
@PySuper_Type = global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* @PyType_Type }, i64 0 }, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), i64 40, i64 0, void (%struct._object*)* @super_dealloc, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* @super_repr, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @super_getattro, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([468 x i8], [468 x i8]* @super_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* @super_traverse, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* getelementptr inbounds ([4 x %struct.PyMemberDef], [4 x %struct.PyMemberDef]* @super_members, i32 0, i32 0), %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @super_descr_get, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @super_init, %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyType_GenericNew, void (i8*)* @PyObject_GC_Del, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.11 = private unnamed_addr constant [7 x i8] c")\0A--\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"bases must be types\00", align 1
@.str.13 = private unnamed_addr constant [46 x i8] c"multiple bases have instance lay-out conflict\00", align 1
@_PyThreadState_Current = external global %struct._Py_atomic_address, align 8
@_PyTrash_delete_nesting = external global i32, align 4
@.str.14 = private unnamed_addr constant [11 x i8] c"__module__\00", align 1
@PyId_builtins = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i32 0, i32 0), %struct._object* null }, align 8
@.str.15 = private unnamed_addr constant [16 x i8] c"<class '%U.%U'>\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c"<class '%s'>\00", align 1
@PyExc_AttributeError = external global %struct._object*, align 8
@.str.17 = private unnamed_addr constant [9 x i8] c"builtins\00", align 1
@.str.18 = private unnamed_addr constant [33 x i8] c"cannot create '%.100s' instances\00", align 1
@.str.19 = private unnamed_addr constant [44 x i8] c"attribute name must be string, not '%.200s'\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"type object '%.50s' has no attribute '%U'\00", align 1
@.str.21 = private unnamed_addr constant [53 x i8] c"can't set attributes of built-in/extension type '%s'\00", align 1
@slotdefs = internal global [87 x %struct.wrapperbase] [%struct.wrapperbase { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i32 0, i32 0), i32 64, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i32 64, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i32 72, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i32 72, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), i32 88, i8* bitcast (%struct._object* (%struct._object*)* @slot_tp_repr to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.29, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i32 120, i8* bitcast (i64 (%struct._object*)* @slot_tp_hash to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_hashfunc, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.31, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), i32 128, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @slot_tp_call to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* bitcast (%struct._object* (%struct._object*, %struct._object*, i8*, %struct._object*)* @wrap_call to %struct._object* (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.33, i32 0, i32 0), i32 1, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), i32 136, i8* bitcast (%struct._object* (%struct._object*)* @slot_tp_str to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.35, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i32 0, i32 0), i32 144, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_tp_getattr_hook to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.36, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), i32 144, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_tp_getattr_hook to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), i32 152, i8* bitcast (i32 (%struct._object*, %struct._object*, %struct._object*)* @slot_tp_setattro to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_setattr, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.37, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), i32 152, i8* bitcast (i32 (%struct._object*, %struct._object*, %struct._object*)* @slot_tp_setattro to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_delattr, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.38, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.39, i32 0, i32 0), i32 200, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, i32)* @slot_tp_richcompare to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @richcmp_lt, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.40, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), i32 200, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, i32)* @slot_tp_richcompare to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @richcmp_le, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.42, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i32 0, i32 0), i32 200, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, i32)* @slot_tp_richcompare to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @richcmp_eq, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.44, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0), i32 200, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, i32)* @slot_tp_richcompare to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @richcmp_ne, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.46, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), i32 200, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, i32)* @slot_tp_richcompare to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @richcmp_gt, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.48, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i32 0, i32 0), i32 200, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, i32)* @slot_tp_richcompare to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @richcmp_ge, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.50, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.51, i32 0, i32 0), i32 216, i8* bitcast (%struct._object* (%struct._object*)* @slot_tp_iter to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.52, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i32 224, i8* bitcast (%struct._object* (%struct._object*)* @slot_tp_iternext to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_next, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.54, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55, i32 0, i32 0), i32 272, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @slot_tp_descr_get to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_descr_get, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.56, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), i32 280, i8* bitcast (i32 (%struct._object*, %struct._object*, %struct._object*)* @slot_tp_descr_set to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_descr_set, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.58, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.59, i32 0, i32 0), i32 280, i8* bitcast (i32 (%struct._object*, %struct._object*, %struct._object*)* @slot_tp_descr_set to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_descr_delete, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.60, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.61, i32 0, i32 0), i32 296, i8* bitcast (i32 (%struct._object*, %struct._object*, %struct._object*)* @slot_tp_init to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* bitcast (%struct._object* (%struct._object*, %struct._object*, i8*, %struct._object*)* @wrap_init to %struct._object* (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.62, i32 0, i32 0), i32 1, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), i32 312, i8* bitcast (%struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @slot_tp_new to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.64, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), i32 392, i8* bitcast (void (%struct._object*)* @slot_tp_finalize to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_del, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.66, i32 0, i32 0), i32 400, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_add to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.67, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i32 0, i32 0), i32 400, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_add to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.69, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i32 0, i32 0), i32 408, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_subtract to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.71, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), i32 408, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_subtract to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.73, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.74, i32 0, i32 0), i32 416, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_multiply to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.75, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i32 0, i32 0), i32 416, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_multiply to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.77, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.78, i32 0, i32 0), i32 424, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_remainder to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.79, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.80, i32 0, i32 0), i32 424, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_remainder to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.81, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0), i32 432, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_divmod to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.83, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.84, i32 0, i32 0), i32 432, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_divmod to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.85, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0), i32 440, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @slot_nb_power to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_ternaryfunc, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.87, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), i32 440, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @slot_nb_power to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_ternaryfunc_r, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.89, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), i32 448, i8* bitcast (%struct._object* (%struct._object*)* @slot_nb_negative to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.91, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i32 0, i32 0), i32 456, i8* bitcast (%struct._object* (%struct._object*)* @slot_nb_positive to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.93, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.94, i32 0, i32 0), i32 464, i8* bitcast (%struct._object* (%struct._object*)* @slot_nb_absolute to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.95, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i32 0, i32 0), i32 472, i8* bitcast (i32 (%struct._object*)* @slot_nb_bool to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_inquirypred, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.97, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i32 0, i32 0), i32 480, i8* bitcast (%struct._object* (%struct._object*)* @slot_nb_invert to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.99, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.100, i32 0, i32 0), i32 488, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_lshift to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.101, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i32 0, i32 0), i32 488, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_lshift to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.103, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.104, i32 0, i32 0), i32 496, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_rshift to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.105, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i32 0, i32 0), i32 496, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_rshift to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.107, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), i32 504, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_and to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.109, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), i32 504, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_and to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.111, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i32 512, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_xor to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.113, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114, i32 0, i32 0), i32 512, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_xor to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.115, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116, i32 0, i32 0), i32 520, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_or to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.117, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i32 0, i32 0), i32 520, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_or to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.119, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i32 0, i32 0), i32 528, i8* bitcast (%struct._object* (%struct._object*)* @slot_nb_int to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.121, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i32 544, i8* bitcast (%struct._object* (%struct._object*)* @slot_nb_float to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.123, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.124, i32 0, i32 0), i32 552, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_add to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.125, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.126, i32 0, i32 0), i32 560, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_subtract to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.127, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.128, i32 0, i32 0), i32 568, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_multiply to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.129, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130, i32 0, i32 0), i32 576, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_remainder to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.131, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132, i32 0, i32 0), i32 584, i8* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @slot_nb_inplace_power to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.133, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.134, i32 0, i32 0), i32 592, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_lshift to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.135, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.136, i32 0, i32 0), i32 600, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_rshift to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.137, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.138, i32 0, i32 0), i32 608, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_and to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.139, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.140, i32 0, i32 0), i32 616, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_xor to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.141, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.142, i32 0, i32 0), i32 624, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_or to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.143, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144, i32 0, i32 0), i32 632, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_floor_divide to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.145, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.146, i32 0, i32 0), i32 632, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_floor_divide to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.147, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.148, i32 0, i32 0), i32 640, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_true_divide to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_l, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.149, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.150, i32 0, i32 0), i32 640, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_true_divide to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc_r, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.151, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.152, i32 0, i32 0), i32 648, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_floor_divide to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.153, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.154, i32 0, i32 0), i32 656, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_nb_inplace_true_divide to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.155, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.156, i32 0, i32 0), i32 664, i8* bitcast (%struct._object* (%struct._object*)* @slot_nb_index to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_unaryfunc, i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.157, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.158, i32 0, i32 0), i32 672, i8* bitcast (i64 (%struct._object*)* @slot_sq_length to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_lenfunc, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.159, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.160, i32 0, i32 0), i32 680, i8* bitcast (%struct._object* (%struct._object*, %struct._object*)* @slot_mp_subscript to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.161, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.162, i32 0, i32 0), i32 688, i8* bitcast (i32 (%struct._object*, %struct._object*, %struct._object*)* @slot_mp_ass_subscript to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_objobjargproc, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.163, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.164, i32 0, i32 0), i32 688, i8* bitcast (i32 (%struct._object*, %struct._object*, %struct._object*)* @slot_mp_ass_subscript to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_delitem, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.165, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.158, i32 0, i32 0), i32 696, i8* bitcast (i64 (%struct._object*)* @slot_sq_length to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_lenfunc, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.159, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.66, i32 0, i32 0), i32 704, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.67, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.74, i32 0, i32 0), i32 712, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_indexargfunc, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.166, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i32 0, i32 0), i32 712, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_indexargfunc, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.167, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.160, i32 0, i32 0), i32 720, i8* bitcast (%struct._object* (%struct._object*, i64)* @slot_sq_item to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_sq_item, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.161, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.162, i32 0, i32 0), i32 736, i8* bitcast (i32 (%struct._object*, i64, %struct._object*)* @slot_sq_ass_item to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_sq_setitem, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.163, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.164, i32 0, i32 0), i32 736, i8* bitcast (i32 (%struct._object*, i64, %struct._object*)* @slot_sq_ass_item to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_sq_delitem, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.165, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.168, i32 0, i32 0), i32 752, i8* bitcast (i32 (%struct._object*, %struct._object*)* @slot_sq_contains to i8*), %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_objobjproc, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.169, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.124, i32 0, i32 0), i32 760, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_binaryfunc, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.170, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.128, i32 0, i32 0), i32 768, i8* null, %struct._object* (%struct._object*, %struct._object*, i8*)* @wrap_indexargfunc, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.171, i32 0, i32 0), i32 0, %struct._object* null }, %struct.wrapperbase zeroinitializer], align 16
@init_slotdefs.initialized = internal global i32 0, align 4
@.str.22 = private unnamed_addr constant [38 x i8] c"Out of memory interning slotdef names\00", align 1
@.str.23 = private unnamed_addr constant [17 x i8] c"__getattribute__\00", align 1
@.str.24 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"__getattr__\00", align 1
@.str.26 = private unnamed_addr constant [12 x i8] c"__setattr__\00", align 1
@.str.27 = private unnamed_addr constant [12 x i8] c"__delattr__\00", align 1
@.str.28 = private unnamed_addr constant [9 x i8] c"__repr__\00", align 1
@.str.29 = private unnamed_addr constant [42 x i8] c"__repr__($self, /)\0A--\0A\0AReturn repr(self).\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"__hash__\00", align 1
@.str.31 = private unnamed_addr constant [42 x i8] c"__hash__($self, /)\0A--\0A\0AReturn hash(self).\00", align 1
@.str.32 = private unnamed_addr constant [9 x i8] c"__call__\00", align 1
@.str.33 = private unnamed_addr constant [65 x i8] c"__call__($self, /, *args, **kwargs)\0A--\0A\0ACall self as a function.\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"__str__\00", align 1
@.str.35 = private unnamed_addr constant [40 x i8] c"__str__($self, /)\0A--\0A\0AReturn str(self).\00", align 1
@.str.36 = private unnamed_addr constant [65 x i8] c"__getattribute__($self, name, /)\0A--\0A\0AReturn getattr(self, name).\00", align 1
@.str.37 = private unnamed_addr constant [77 x i8] c"__setattr__($self, name, value, /)\0A--\0A\0AImplement setattr(self, name, value).\00", align 1
@.str.38 = private unnamed_addr constant [63 x i8] c"__delattr__($self, name, /)\0A--\0A\0AImplement delattr(self, name).\00", align 1
@.str.39 = private unnamed_addr constant [7 x i8] c"__lt__\00", align 1
@.str.40 = private unnamed_addr constant [47 x i8] c"__lt__($self, value, /)\0A--\0A\0AReturn self<value.\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"__le__\00", align 1
@.str.42 = private unnamed_addr constant [48 x i8] c"__le__($self, value, /)\0A--\0A\0AReturn self<=value.\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"__eq__\00", align 1
@.str.44 = private unnamed_addr constant [48 x i8] c"__eq__($self, value, /)\0A--\0A\0AReturn self==value.\00", align 1
@.str.45 = private unnamed_addr constant [7 x i8] c"__ne__\00", align 1
@.str.46 = private unnamed_addr constant [48 x i8] c"__ne__($self, value, /)\0A--\0A\0AReturn self!=value.\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"__gt__\00", align 1
@.str.48 = private unnamed_addr constant [47 x i8] c"__gt__($self, value, /)\0A--\0A\0AReturn self>value.\00", align 1
@.str.49 = private unnamed_addr constant [7 x i8] c"__ge__\00", align 1
@.str.50 = private unnamed_addr constant [48 x i8] c"__ge__($self, value, /)\0A--\0A\0AReturn self>=value.\00", align 1
@.str.51 = private unnamed_addr constant [9 x i8] c"__iter__\00", align 1
@.str.52 = private unnamed_addr constant [45 x i8] c"__iter__($self, /)\0A--\0A\0AImplement iter(self).\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"__next__\00", align 1
@.str.54 = private unnamed_addr constant [45 x i8] c"__next__($self, /)\0A--\0A\0AImplement next(self).\00", align 1
@.str.55 = private unnamed_addr constant [8 x i8] c"__get__\00", align 1
@.str.56 = private unnamed_addr constant [96 x i8] c"__get__($self, instance, owner, /)\0A--\0A\0AReturn an attribute of instance, which is of type owner.\00", align 1
@.str.57 = private unnamed_addr constant [8 x i8] c"__set__\00", align 1
@.str.58 = private unnamed_addr constant [78 x i8] c"__set__($self, instance, value, /)\0A--\0A\0ASet an attribute of instance to value.\00", align 1
@.str.59 = private unnamed_addr constant [11 x i8] c"__delete__\00", align 1
@.str.60 = private unnamed_addr constant [68 x i8] c"__delete__($self, instance, /)\0A--\0A\0ADelete an attribute of instance.\00", align 1
@.str.61 = private unnamed_addr constant [9 x i8] c"__init__\00", align 1
@.str.62 = private unnamed_addr constant [103 x i8] c"__init__($self, /, *args, **kwargs)\0A--\0A\0AInitialize self.  See help(type(self)) for accurate signature.\00", align 1
@.str.63 = private unnamed_addr constant [8 x i8] c"__new__\00", align 1
@.str.64 = private unnamed_addr constant [108 x i8] c"__new__(type, /, *args, **kwargs)\0A--\0A\0ACreate and return new object.  See help(type) for accurate signature.\00", align 1
@.str.65 = private unnamed_addr constant [8 x i8] c"__del__\00", align 1
@.str.66 = private unnamed_addr constant [8 x i8] c"__add__\00", align 1
@.str.67 = private unnamed_addr constant [48 x i8] c"__add__($self, value, /)\0A--\0A\0AReturn self+value.\00", align 1
@.str.68 = private unnamed_addr constant [9 x i8] c"__radd__\00", align 1
@.str.69 = private unnamed_addr constant [49 x i8] c"__radd__($self, value, /)\0A--\0A\0AReturn value+self.\00", align 1
@.str.70 = private unnamed_addr constant [8 x i8] c"__sub__\00", align 1
@.str.71 = private unnamed_addr constant [48 x i8] c"__sub__($self, value, /)\0A--\0A\0AReturn self-value.\00", align 1
@.str.72 = private unnamed_addr constant [9 x i8] c"__rsub__\00", align 1
@.str.73 = private unnamed_addr constant [49 x i8] c"__rsub__($self, value, /)\0A--\0A\0AReturn value-self.\00", align 1
@.str.74 = private unnamed_addr constant [8 x i8] c"__mul__\00", align 1
@.str.75 = private unnamed_addr constant [48 x i8] c"__mul__($self, value, /)\0A--\0A\0AReturn self*value.\00", align 1
@.str.76 = private unnamed_addr constant [9 x i8] c"__rmul__\00", align 1
@.str.77 = private unnamed_addr constant [49 x i8] c"__rmul__($self, value, /)\0A--\0A\0AReturn value*self.\00", align 1
@.str.78 = private unnamed_addr constant [8 x i8] c"__mod__\00", align 1
@.str.79 = private unnamed_addr constant [48 x i8] c"__mod__($self, value, /)\0A--\0A\0AReturn self%value.\00", align 1
@.str.80 = private unnamed_addr constant [9 x i8] c"__rmod__\00", align 1
@.str.81 = private unnamed_addr constant [49 x i8] c"__rmod__($self, value, /)\0A--\0A\0AReturn value%self.\00", align 1
@.str.82 = private unnamed_addr constant [11 x i8] c"__divmod__\00", align 1
@.str.83 = private unnamed_addr constant [60 x i8] c"__divmod__($self, value, /)\0A--\0A\0AReturn divmod(self, value).\00", align 1
@.str.84 = private unnamed_addr constant [12 x i8] c"__rdivmod__\00", align 1
@.str.85 = private unnamed_addr constant [61 x i8] c"__rdivmod__($self, value, /)\0A--\0A\0AReturn divmod(value, self).\00", align 1
@.str.86 = private unnamed_addr constant [8 x i8] c"__pow__\00", align 1
@.str.87 = private unnamed_addr constant [69 x i8] c"__pow__($self, value, mod=None, /)\0A--\0A\0AReturn pow(self, value, mod).\00", align 1
@.str.88 = private unnamed_addr constant [9 x i8] c"__rpow__\00", align 1
@.str.89 = private unnamed_addr constant [70 x i8] c"__rpow__($self, value, mod=None, /)\0A--\0A\0AReturn pow(value, self, mod).\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"__neg__\00", align 1
@.str.91 = private unnamed_addr constant [28 x i8] c"__neg__($self, /)\0A--\0A\0A-self\00", align 1
@.str.92 = private unnamed_addr constant [8 x i8] c"__pos__\00", align 1
@.str.93 = private unnamed_addr constant [28 x i8] c"__pos__($self, /)\0A--\0A\0A+self\00", align 1
@.str.94 = private unnamed_addr constant [8 x i8] c"__abs__\00", align 1
@.str.95 = private unnamed_addr constant [32 x i8] c"__abs__($self, /)\0A--\0A\0Aabs(self)\00", align 1
@.str.96 = private unnamed_addr constant [9 x i8] c"__bool__\00", align 1
@.str.97 = private unnamed_addr constant [33 x i8] c"__bool__($self, /)\0A--\0A\0Aself != 0\00", align 1
@.str.98 = private unnamed_addr constant [11 x i8] c"__invert__\00", align 1
@.str.99 = private unnamed_addr constant [31 x i8] c"__invert__($self, /)\0A--\0A\0A~self\00", align 1
@.str.100 = private unnamed_addr constant [11 x i8] c"__lshift__\00", align 1
@.str.101 = private unnamed_addr constant [52 x i8] c"__lshift__($self, value, /)\0A--\0A\0AReturn self<<value.\00", align 1
@.str.102 = private unnamed_addr constant [12 x i8] c"__rlshift__\00", align 1
@.str.103 = private unnamed_addr constant [53 x i8] c"__rlshift__($self, value, /)\0A--\0A\0AReturn value<<self.\00", align 1
@.str.104 = private unnamed_addr constant [11 x i8] c"__rshift__\00", align 1
@.str.105 = private unnamed_addr constant [52 x i8] c"__rshift__($self, value, /)\0A--\0A\0AReturn self>>value.\00", align 1
@.str.106 = private unnamed_addr constant [12 x i8] c"__rrshift__\00", align 1
@.str.107 = private unnamed_addr constant [53 x i8] c"__rrshift__($self, value, /)\0A--\0A\0AReturn value>>self.\00", align 1
@.str.108 = private unnamed_addr constant [8 x i8] c"__and__\00", align 1
@.str.109 = private unnamed_addr constant [48 x i8] c"__and__($self, value, /)\0A--\0A\0AReturn self&value.\00", align 1
@.str.110 = private unnamed_addr constant [9 x i8] c"__rand__\00", align 1
@.str.111 = private unnamed_addr constant [49 x i8] c"__rand__($self, value, /)\0A--\0A\0AReturn value&self.\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c"__xor__\00", align 1
@.str.113 = private unnamed_addr constant [48 x i8] c"__xor__($self, value, /)\0A--\0A\0AReturn self^value.\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c"__rxor__\00", align 1
@.str.115 = private unnamed_addr constant [49 x i8] c"__rxor__($self, value, /)\0A--\0A\0AReturn value^self.\00", align 1
@.str.116 = private unnamed_addr constant [7 x i8] c"__or__\00", align 1
@.str.117 = private unnamed_addr constant [47 x i8] c"__or__($self, value, /)\0A--\0A\0AReturn self|value.\00", align 1
@.str.118 = private unnamed_addr constant [8 x i8] c"__ror__\00", align 1
@.str.119 = private unnamed_addr constant [48 x i8] c"__ror__($self, value, /)\0A--\0A\0AReturn value|self.\00", align 1
@.str.120 = private unnamed_addr constant [8 x i8] c"__int__\00", align 1
@.str.121 = private unnamed_addr constant [32 x i8] c"__int__($self, /)\0A--\0A\0Aint(self)\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"__float__\00", align 1
@.str.123 = private unnamed_addr constant [36 x i8] c"__float__($self, /)\0A--\0A\0Afloat(self)\00", align 1
@.str.124 = private unnamed_addr constant [9 x i8] c"__iadd__\00", align 1
@.str.125 = private unnamed_addr constant [50 x i8] c"__iadd__($self, value, /)\0A--\0A\0AReturn self+=value.\00", align 1
@.str.126 = private unnamed_addr constant [9 x i8] c"__isub__\00", align 1
@.str.127 = private unnamed_addr constant [50 x i8] c"__isub__($self, value, /)\0A--\0A\0AReturn self-=value.\00", align 1
@.str.128 = private unnamed_addr constant [9 x i8] c"__imul__\00", align 1
@.str.129 = private unnamed_addr constant [50 x i8] c"__imul__($self, value, /)\0A--\0A\0AReturn self*=value.\00", align 1
@.str.130 = private unnamed_addr constant [9 x i8] c"__imod__\00", align 1
@.str.131 = private unnamed_addr constant [50 x i8] c"__imod__($self, value, /)\0A--\0A\0AReturn self%=value.\00", align 1
@.str.132 = private unnamed_addr constant [9 x i8] c"__ipow__\00", align 1
@.str.133 = private unnamed_addr constant [51 x i8] c"__ipow__($self, value, /)\0A--\0A\0AReturn self**=value.\00", align 1
@.str.134 = private unnamed_addr constant [12 x i8] c"__ilshift__\00", align 1
@.str.135 = private unnamed_addr constant [54 x i8] c"__ilshift__($self, value, /)\0A--\0A\0AReturn self<<=value.\00", align 1
@.str.136 = private unnamed_addr constant [12 x i8] c"__irshift__\00", align 1
@.str.137 = private unnamed_addr constant [54 x i8] c"__irshift__($self, value, /)\0A--\0A\0AReturn self>>=value.\00", align 1
@.str.138 = private unnamed_addr constant [9 x i8] c"__iand__\00", align 1
@.str.139 = private unnamed_addr constant [50 x i8] c"__iand__($self, value, /)\0A--\0A\0AReturn self&=value.\00", align 1
@.str.140 = private unnamed_addr constant [9 x i8] c"__ixor__\00", align 1
@.str.141 = private unnamed_addr constant [50 x i8] c"__ixor__($self, value, /)\0A--\0A\0AReturn self^=value.\00", align 1
@.str.142 = private unnamed_addr constant [8 x i8] c"__ior__\00", align 1
@.str.143 = private unnamed_addr constant [49 x i8] c"__ior__($self, value, /)\0A--\0A\0AReturn self|=value.\00", align 1
@.str.144 = private unnamed_addr constant [13 x i8] c"__floordiv__\00", align 1
@.str.145 = private unnamed_addr constant [54 x i8] c"__floordiv__($self, value, /)\0A--\0A\0AReturn self//value.\00", align 1
@.str.146 = private unnamed_addr constant [14 x i8] c"__rfloordiv__\00", align 1
@.str.147 = private unnamed_addr constant [55 x i8] c"__rfloordiv__($self, value, /)\0A--\0A\0AReturn value//self.\00", align 1
@.str.148 = private unnamed_addr constant [12 x i8] c"__truediv__\00", align 1
@.str.149 = private unnamed_addr constant [52 x i8] c"__truediv__($self, value, /)\0A--\0A\0AReturn self/value.\00", align 1
@.str.150 = private unnamed_addr constant [13 x i8] c"__rtruediv__\00", align 1
@.str.151 = private unnamed_addr constant [53 x i8] c"__rtruediv__($self, value, /)\0A--\0A\0AReturn value/self.\00", align 1
@.str.152 = private unnamed_addr constant [14 x i8] c"__ifloordiv__\00", align 1
@.str.153 = private unnamed_addr constant [55 x i8] c"__ifloordiv__($self, value, /)\0A--\0A\0AReturn self//value.\00", align 1
@.str.154 = private unnamed_addr constant [13 x i8] c"__itruediv__\00", align 1
@.str.155 = private unnamed_addr constant [53 x i8] c"__itruediv__($self, value, /)\0A--\0A\0AReturn self/value.\00", align 1
@.str.156 = private unnamed_addr constant [10 x i8] c"__index__\00", align 1
@.str.157 = private unnamed_addr constant [114 x i8] c"__index__($self, /)\0A--\0A\0AReturn self converted to an integer, if self is suitable for use as an index into a list.\00", align 1
@.str.158 = private unnamed_addr constant [8 x i8] c"__len__\00", align 1
@.str.159 = private unnamed_addr constant [40 x i8] c"__len__($self, /)\0A--\0A\0AReturn len(self).\00", align 1
@.str.160 = private unnamed_addr constant [12 x i8] c"__getitem__\00", align 1
@.str.161 = private unnamed_addr constant [49 x i8] c"__getitem__($self, key, /)\0A--\0A\0AReturn self[key].\00", align 1
@.str.162 = private unnamed_addr constant [12 x i8] c"__setitem__\00", align 1
@.str.163 = private unnamed_addr constant [62 x i8] c"__setitem__($self, key, value, /)\0A--\0A\0ASet self[key] to value.\00", align 1
@.str.164 = private unnamed_addr constant [12 x i8] c"__delitem__\00", align 1
@.str.165 = private unnamed_addr constant [49 x i8] c"__delitem__($self, key, /)\0A--\0A\0ADelete self[key].\00", align 1
@.str.166 = private unnamed_addr constant [49 x i8] c"__mul__($self, value, /)\0A--\0A\0AReturn self*value.n\00", align 1
@.str.167 = private unnamed_addr constant [49 x i8] c"__rmul__($self, value, /)\0A--\0A\0AReturn self*value.\00", align 1
@.str.168 = private unnamed_addr constant [13 x i8] c"__contains__\00", align 1
@.str.169 = private unnamed_addr constant [52 x i8] c"__contains__($self, key, /)\0A--\0A\0AReturn key in self.\00", align 1
@.str.170 = private unnamed_addr constant [53 x i8] c"__iadd__($self, value, /)\0A--\0A\0AImplement self+=value.\00", align 1
@.str.171 = private unnamed_addr constant [53 x i8] c"__imul__($self, value, /)\0A--\0A\0AImplement self*=value.\00", align 1
@slot_tp_repr.PyId___repr__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.28, i32 0, i32 0), %struct._object* null }, align 8
@.str.172 = private unnamed_addr constant [18 x i8] c"<%s object at %p>\00", align 1
@PyTuple_Type = external global %struct._typeobject, align 8
@PyExc_SystemError = external global %struct._object*, align 8
@.str.173 = private unnamed_addr constant [49 x i8] c"PyArg_UnpackTuple() argument list is not a tuple\00", align 1
@.str.174 = private unnamed_addr constant [31 x i8] c"expected %d arguments, got %zd\00", align 1
@.str.175 = private unnamed_addr constant [41 x i8] c"__hash__ method should return an integer\00", align 1
@PyLong_Type = external global %struct._typeobject, align 8
@slot_tp_call.PyId___call__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.32, i32 0, i32 0), %struct._object* null }, align 8
@slot_tp_str.PyId___str__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i32 0, i32 0), %struct._object* null }, align 8
@slot_tp_getattr_hook.PyId___getattr__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i32 0, i32 0), %struct._object* null }, align 8
@PyId___getattribute__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.23, i32 0, i32 0), %struct._object* null }, align 8
@PyWrapperDescr_Type = external global %struct._typeobject, align 8
@.str.176 = private unnamed_addr constant [4 x i8] c"(O)\00", align 1
@slot_tp_setattro.PyId___delattr__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0), %struct._object* null }, align 8
@slot_tp_setattro.PyId___setattr__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0), %struct._object* null }, align 8
@.str.177 = private unnamed_addr constant [5 x i8] c"(OO)\00", align 1
@.str.178 = private unnamed_addr constant [33 x i8] c"can't apply this %s to %s object\00", align 1
@name_op = internal global [6 x %struct._Py_Identifier] [%struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.39, i32 0, i32 0), %struct._object* null }, %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), %struct._object* null }, %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i32 0, i32 0), %struct._object* null }, %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.45, i32 0, i32 0), %struct._object* null }, %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0), %struct._object* null }, %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i32 0, i32 0), %struct._object* null }], align 16
@_Py_NotImplementedStruct = external global %struct._object, align 8
@slot_tp_iter.PyId___iter__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.51, i32 0, i32 0), %struct._object* null }, align 8
@PyId___getitem__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.160, i32 0, i32 0), %struct._object* null }, align 8
@.str.179 = private unnamed_addr constant [32 x i8] c"'%.200s' object is not iterable\00", align 1
@slot_tp_iternext.PyId___next__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), %struct._object* null }, align 8
@.str.180 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@PyExc_StopIteration = external global %struct._object*, align 8
@slot_tp_descr_get.PyId___get__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55, i32 0, i32 0), %struct._object* null }, align 8
@.str.181 = private unnamed_addr constant [31 x i8] c"__get__(None, None) is invalid\00", align 1
@slot_tp_descr_set.PyId___delete__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.59, i32 0, i32 0), %struct._object* null }, align 8
@slot_tp_descr_set.PyId___set__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.57, i32 0, i32 0), %struct._object* null }, align 8
@slot_tp_init.PyId___init__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.61, i32 0, i32 0), %struct._object* null }, align 8
@.str.182 = private unnamed_addr constant [44 x i8] c"__init__() should return None, not '%.200s'\00", align 1
@PyId___new__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), %struct._object* null }, align 8
@slot_tp_finalize.PyId___del__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.65, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_add.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.66, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_add.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.68, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_subtract.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_subtract.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_multiply.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.74, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_multiply.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.76, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_remainder.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.78, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_remainder.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.80, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_divmod.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_divmod.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.84, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_power.PyId___pow__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_power_binary.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.86, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_power_binary.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_negative.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_positive.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.92, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_absolute.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.94, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_bool.PyId___bool__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.96, i32 0, i32 0), %struct._object* null }, align 8
@PyId___len__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.158, i32 0, i32 0), %struct._object* null }, align 8
@PyBool_Type = external global %struct._typeobject, align 8
@.str.183 = private unnamed_addr constant [41 x i8] c"__bool__ should return bool, returned %s\00", align 1
@slot_nb_invert.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_lshift.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.100, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_lshift.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.102, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_rshift.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.104, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_rshift.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.106, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_and.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.108, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_and.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.110, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_xor.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_xor.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_or.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.116, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_or.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_int.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.120, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_float.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_add.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.124, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_subtract.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.126, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_multiply.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.128, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_remainder.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.130, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_power.PyId___ipow__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_lshift.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.134, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_rshift.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.136, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_and.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.138, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_xor.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.140, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_or.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.142, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_floor_divide.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.144, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_floor_divide.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.146, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_true_divide.op_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.148, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_true_divide.rop_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.150, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_floor_divide.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.152, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_inplace_true_divide.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.154, i32 0, i32 0), %struct._object* null }, align 8
@slot_nb_index.PyId___index__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.156, i32 0, i32 0), %struct._object* null }, align 8
@PyExc_OverflowError = external global %struct._object*, align 8
@PyExc_ValueError = external global %struct._object*, align 8
@.str.184 = private unnamed_addr constant [29 x i8] c"__len__() should return >= 0\00", align 1
@slot_mp_subscript.id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.160, i32 0, i32 0), %struct._object* null }, align 8
@PyId___delitem__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.164, i32 0, i32 0), %struct._object* null }, align 8
@PyId___setitem__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.162, i32 0, i32 0), %struct._object* null }, align 8
@.str.185 = private unnamed_addr constant [4 x i8] c"(n)\00", align 1
@.str.186 = private unnamed_addr constant [5 x i8] c"(nO)\00", align 1
@slot_sq_contains.PyId___contains__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.168, i32 0, i32 0), %struct._object* null }, align 8
@PyCFunction_Type = external global %struct._typeobject, align 8
@resolve_slotdups.pname = internal global %struct._object* null, align 8
@resolve_slotdups.ptrs = internal global [10 x %struct.wrapperbase*] zeroinitializer, align 16
@.str.187 = private unnamed_addr constant [38 x i8] c"__new__() called with non-type 'self'\00", align 1
@.str.188 = private unnamed_addr constant [35 x i8] c"%s.__new__(): not enough arguments\00", align 1
@.str.189 = private unnamed_addr constant [43 x i8] c"%s.__new__(X): X is not a type object (%s)\00", align 1
@.str.190 = private unnamed_addr constant [42 x i8] c"%s.__new__(%s): %s is not a subtype of %s\00", align 1
@.str.191 = private unnamed_addr constant [45 x i8] c"%s.__new__(%s) is not safe, use %s.__new__()\00", align 1
@.str.192 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.193 = private unnamed_addr constant [50 x i8] c"type_traverse() called for non-heap type '%.100s'\00", align 1
@.str.194 = private unnamed_addr constant [4 x i8] c"mro\00", align 1
@.str.195 = private unnamed_addr constant [54 x i8] c"mro() -> list\0Areturn a type's method resolution order\00", align 1
@.str.196 = private unnamed_addr constant [15 x i8] c"__subclasses__\00", align 1
@.str.197 = private unnamed_addr constant [49 x i8] c"__subclasses__() -> list of immediate subclasses\00", align 1
@.str.198 = private unnamed_addr constant [12 x i8] c"__prepare__\00", align 1
@.str.199 = private unnamed_addr constant [75 x i8] c"__prepare__() -> dict\0Aused to create the namespace for the class statement\00", align 1
@.str.200 = private unnamed_addr constant [18 x i8] c"__instancecheck__\00", align 1
@.str.201 = private unnamed_addr constant [62 x i8] c"__instancecheck__() -> bool\0Acheck if an object is an instance\00", align 1
@.str.202 = private unnamed_addr constant [18 x i8] c"__subclasscheck__\00", align 1
@.str.203 = private unnamed_addr constant [59 x i8] c"__subclasscheck__() -> bool\0Acheck if a class is a subclass\00", align 1
@.str.204 = private unnamed_addr constant [8 x i8] c"__dir__\00", align 1
@.str.205 = private unnamed_addr constant [63 x i8] c"__dir__() -> list\0Aspecialized __dir__ implementation for types\00", align 1
@.str.206 = private unnamed_addr constant [11 x i8] c"__sizeof__\00", align 1
@.str.207 = private unnamed_addr constant [65 x i8] c"__sizeof__() -> int\0Areturn memory consumption of the type object\00", align 1
@.str.208 = private unnamed_addr constant [4 x i8] c"[O]\00", align 1
@.str.209 = private unnamed_addr constant [24 x i8] c"duplicate base class %U\00", align 1
@.str.210 = private unnamed_addr constant [21 x i8] c"duplicate base class\00", align 1
@PyId___name__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.211, i32 0, i32 0), %struct._object* null }, align 8
@.str.211 = private unnamed_addr constant [9 x i8] c"__name__\00", align 1
@.str.212 = private unnamed_addr constant [67 x i8] c"Cannot create a consistent method resolution\0Aorder (MRO) for bases\00", align 1
@.str.213 = private unnamed_addr constant [4 x i8] c" %s\00", align 1
@_Py_FalseStruct = external global %struct._longobject, align 8
@_Py_TrueStruct = external global %struct._longobject, align 8
@merge_class_dict.PyId___bases__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.214, i32 0, i32 0), %struct._object* null }, align 8
@.str.214 = private unnamed_addr constant [10 x i8] c"__bases__\00", align 1
@PyId___dict__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.215, i32 0, i32 0), %struct._object* null }, align 8
@.str.215 = private unnamed_addr constant [9 x i8] c"__dict__\00", align 1
@.str.216 = private unnamed_addr constant [14 x i8] c"__basicsize__\00", align 1
@.str.217 = private unnamed_addr constant [13 x i8] c"__itemsize__\00", align 1
@.str.218 = private unnamed_addr constant [10 x i8] c"__flags__\00", align 1
@.str.219 = private unnamed_addr constant [18 x i8] c"__weakrefoffset__\00", align 1
@.str.220 = private unnamed_addr constant [9 x i8] c"__base__\00", align 1
@.str.221 = private unnamed_addr constant [15 x i8] c"__dictoffset__\00", align 1
@.str.222 = private unnamed_addr constant [8 x i8] c"__mro__\00", align 1
@.str.223 = private unnamed_addr constant [13 x i8] c"__qualname__\00", align 1
@.str.224 = private unnamed_addr constant [20 x i8] c"__abstractmethods__\00", align 1
@.str.225 = private unnamed_addr constant [8 x i8] c"__doc__\00", align 1
@.str.226 = private unnamed_addr constant [19 x i8] c"__text_signature__\00", align 1
@.str.227 = private unnamed_addr constant [48 x i8] c"can only assign string to %s.__name__, not '%s'\00", align 1
@.str.228 = private unnamed_addr constant [2 x i8] zeroinitializer, align 1
@.str.229 = private unnamed_addr constant [37 x i8] c"__name__ must not contain null bytes\00", align 1
@.str.230 = private unnamed_addr constant [16 x i8] c"can't set %s.%s\00", align 1
@.str.231 = private unnamed_addr constant [19 x i8] c"can't delete %s.%s\00", align 1
@.str.232 = private unnamed_addr constant [52 x i8] c"can only assign string to %s.__qualname__, not '%s'\00", align 1
@.str.233 = private unnamed_addr constant [46 x i8] c"can only assign tuple to %s.__bases__, not %s\00", align 1
@.str.234 = private unnamed_addr constant [56 x i8] c"can only assign non-empty tuple to %s.__bases__, not ()\00", align 1
@.str.235 = private unnamed_addr constant [48 x i8] c"%s.__bases__ must be tuple of classes, not '%s'\00", align 1
@.str.236 = private unnamed_addr constant [45 x i8] c"a __bases__ item causes an inheritance cycle\00", align 1
@.str.237 = private unnamed_addr constant [50 x i8] c"%s assignment: '%s' deallocator differs from '%s'\00", align 1
@.str.238 = private unnamed_addr constant [52 x i8] c"%s assignment: '%s' object layout differs from '%s'\00", align 1
@PyId___abstractmethods__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.224, i32 0, i32 0), %struct._object* null }, align 8
@PyExc_KeyError = external global %struct._object*, align 8
@.str.239 = private unnamed_addr constant [43 x i8] c"type.__init__() takes no keyword arguments\00", align 1
@.str.240 = private unnamed_addr constant [39 x i8] c"type.__init__() takes 1 or 3 arguments\00", align 1
@type_new.kwlist = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.242, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.243, i32 0, i32 0), i8* null], align 16
@.str.241 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.242 = private unnamed_addr constant [6 x i8] c"bases\00", align 1
@.str.243 = private unnamed_addr constant [5 x i8] c"dict\00", align 1
@type_new.PyId___qualname__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.223, i32 0, i32 0), %struct._object* null }, align 8
@type_new.PyId___slots__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.244, i32 0, i32 0), %struct._object* null }, align 8
@.str.244 = private unnamed_addr constant [10 x i8] c"__slots__\00", align 1
@.str.245 = private unnamed_addr constant [30 x i8] c"type() takes 1 or 3 arguments\00", align 1
@.str.246 = private unnamed_addr constant [11 x i8] c"UO!O!:type\00", align 1
@PyDict_Type = external global %struct._typeobject, align 8
@.str.247 = private unnamed_addr constant [53 x i8] c"nonempty __slots__ not supported for subtype of '%s'\00", align 1
@.str.248 = private unnamed_addr constant [45 x i8] c"__dict__ slot disallowed: we already got one\00", align 1
@.str.249 = private unnamed_addr constant [12 x i8] c"__weakref__\00", align 1
@.str.250 = private unnamed_addr constant [77 x i8] c"__weakref__ slot disallowed: either we already got one, or __itemsize__ != 0\00", align 1
@.str.251 = private unnamed_addr constant [46 x i8] c"%R in __slots__ conflicts with class variable\00", align 1
@.str.252 = private unnamed_addr constant [40 x i8] c"type __qualname__ must be a str, not %s\00", align 1
@PyFunction_Type = external global %struct._typeobject, align 8
@subtype_getsets_full = internal global [3 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.215, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @subtype_dict, i32 (%struct._object*, %struct._object*, i8*)* @subtype_setdict, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.255, i32 0, i32 0), i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @subtype_getweakref, i32 (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.256, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@subtype_getsets_weakref_only = internal global [2 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @subtype_getweakref, i32 (%struct._object*, %struct._object*, i8*)* null, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.256, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@subtype_getsets_dict_only = internal global [2 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.215, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @subtype_dict, i32 (%struct._object*, %struct._object*, i8*)* @subtype_setdict, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.255, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.253 = private unnamed_addr constant [46 x i8] c"__slots__ items must be strings, not '%.200s'\00", align 1
@.str.254 = private unnamed_addr constant [30 x i8] c"__slots__ must be identifiers\00", align 1
@.str.255 = private unnamed_addr constant [47 x i8] c"dictionary for instance variables (if defined)\00", align 1
@.str.256 = private unnamed_addr constant [51 x i8] c"list of weak references to the object (if defined)\00", align 1
@.str.257 = private unnamed_addr constant [59 x i8] c"this __dict__ descriptor does not support '%.200s' objects\00", align 1
@.str.258 = private unnamed_addr constant [28 x i8] c"This object has no __dict__\00", align 1
@.str.259 = private unnamed_addr constant [53 x i8] c"__dict__ must be set to a dictionary, not a '%.200s'\00", align 1
@.str.260 = private unnamed_addr constant [31 x i8] c"This object has no __weakref__\00", align 1
@.str.261 = private unnamed_addr constant [21 x i8] c"<%U.%U object at %p>\00", align 1
@.str.262 = private unnamed_addr constant [14 x i8] c"__reduce_ex__\00", align 1
@.str.263 = private unnamed_addr constant [18 x i8] c"helper for pickle\00", align 1
@.str.264 = private unnamed_addr constant [11 x i8] c"__reduce__\00", align 1
@.str.265 = private unnamed_addr constant [17 x i8] c"__subclasshook__\00", align 1
@object_subclasshook_doc = internal global [309 x i8] c"Abstract classes can override this to customize issubclass().\0A\0AThis is invoked early on by abc.ABCMeta.__subclasscheck__().\0AIt should return True, False or NotImplemented.  If it returns\0ANotImplemented, the normal algorithm is used.  Otherwise, it\0Aoverrides the normal algorithm (and the outcome is cached).\0A\00", align 16
@.str.266 = private unnamed_addr constant [11 x i8] c"__format__\00", align 1
@.str.267 = private unnamed_addr constant [25 x i8] c"default object formatter\00", align 1
@.str.268 = private unnamed_addr constant [55 x i8] c"__sizeof__() -> int\0Asize of object in memory, in bytes\00", align 1
@.str.269 = private unnamed_addr constant [47 x i8] c"__dir__() -> list\0Adefault dir() implementation\00", align 1
@object_reduce_ex.objreduce = internal global %struct._object* null, align 8
@object_reduce_ex.PyId___reduce__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.264, i32 0, i32 0), %struct._object* null }, align 8
@.str.270 = private unnamed_addr constant [17 x i8] c"|i:__reduce_ex__\00", align 1
@.str.271 = private unnamed_addr constant [11 x i8] c"_reduce_ex\00", align 1
@.str.272 = private unnamed_addr constant [5 x i8] c"(Oi)\00", align 1
@reduce_4.PyId___newobj_ex__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.273, i32 0, i32 0), %struct._object* null }, align 8
@.str.273 = private unnamed_addr constant [14 x i8] c"__newobj_ex__\00", align 1
@_PyObject_GetNewArguments.PyId___getnewargs_ex__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.274, i32 0, i32 0), %struct._object* null }, align 8
@.str.274 = private unnamed_addr constant [18 x i8] c"__getnewargs_ex__\00", align 1
@_PyObject_GetNewArguments.PyId___getnewargs__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.275, i32 0, i32 0), %struct._object* null }, align 8
@.str.275 = private unnamed_addr constant [15 x i8] c"__getnewargs__\00", align 1
@.str.276 = private unnamed_addr constant [54 x i8] c"__getnewargs_ex__ should return a tuple, not '%.200s'\00", align 1
@.str.277 = private unnamed_addr constant [61 x i8] c"__getnewargs_ex__ should return a tuple of length 2, not %zd\00", align 1
@.str.278 = private unnamed_addr constant [84 x i8] c"first item of the tuple returned by __getnewargs_ex__ must be a tuple, not '%.200s'\00", align 1
@.str.279 = private unnamed_addr constant [84 x i8] c"second item of the tuple returned by __getnewargs_ex__ must be a dict, not '%.200s'\00", align 1
@.str.280 = private unnamed_addr constant [51 x i8] c"__getnewargs__ should return a tuple, not '%.200s'\00", align 1
@_PyObject_GetState.PyId___getstate__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.281, i32 0, i32 0), %struct._object* null }, align 8
@.str.281 = private unnamed_addr constant [13 x i8] c"__getstate__\00", align 1
@.str.282 = private unnamed_addr constant [44 x i8] c"__slotsname__ changed size during iteration\00", align 1
@_PyType_GetSlotNames.PyId___slotnames__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.283, i32 0, i32 0), %struct._object* null }, align 8
@.str.283 = private unnamed_addr constant [14 x i8] c"__slotnames__\00", align 1
@_PyType_GetSlotNames.PyId__slotnames = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.284, i32 0, i32 0), %struct._object* null }, align 8
@.str.284 = private unnamed_addr constant [11 x i8] c"_slotnames\00", align 1
@.str.285 = private unnamed_addr constant [58 x i8] c"%.200s.__slotnames__ should be a list or None, not %.200s\00", align 1
@.str.286 = private unnamed_addr constant [48 x i8] c"copyreg._slotnames didn't return a list or None\00", align 1
@_PyObject_GetItemsIter.PyId_items = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.287, i32 0, i32 0), %struct._object* null }, align 8
@.str.287 = private unnamed_addr constant [6 x i8] c"items\00", align 1
@reduce_2.PyId___newobj__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.288, i32 0, i32 0), %struct._object* null }, align 8
@.str.288 = private unnamed_addr constant [11 x i8] c"__newobj__\00", align 1
@.str.289 = private unnamed_addr constant [104 x i8] c"must use protocol 4 or greater to copy this object; since __getnewargs_ex__ returned keyword arguments.\00", align 1
@import_copyreg.PyId_copyreg = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.290, i32 0, i32 0), %struct._object* null }, align 8
@.str.290 = private unnamed_addr constant [8 x i8] c"copyreg\00", align 1
@.str.291 = private unnamed_addr constant [14 x i8] c"|i:__reduce__\00", align 1
@.str.292 = private unnamed_addr constant [13 x i8] c"U:__format__\00", align 1
@.str.293 = private unnamed_addr constant [52 x i8] c"non-empty format string passed to object.__format__\00", align 1
@PyId___class__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.294, i32 0, i32 0), %struct._object* null }, align 8
@.str.294 = private unnamed_addr constant [10 x i8] c"__class__\00", align 1
@.str.295 = private unnamed_addr constant [19 x i8] c"the object's class\00", align 1
@.str.296 = private unnamed_addr constant [33 x i8] c"can't delete __class__ attribute\00", align 1
@.str.297 = private unnamed_addr constant [50 x i8] c"__class__ must be set to a class, not '%s' object\00", align 1
@.str.298 = private unnamed_addr constant [42 x i8] c"__class__ assignment: only for heap types\00", align 1
@.str.299 = private unnamed_addr constant [38 x i8] c"object.__init__() takes no parameters\00", align 1
@.str.300 = private unnamed_addr constant [29 x i8] c"object() takes no parameters\00", align 1
@object_new.comma_id = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.301, i32 0, i32 0), %struct._object* null }, align 8
@.str.301 = private unnamed_addr constant [3 x i8] c", \00", align 1
@object_new.PyId_sorted = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.302, i32 0, i32 0), %struct._object* null }, align 8
@.str.302 = private unnamed_addr constant [7 x i8] c"sorted\00", align 1
@.str.303 = private unnamed_addr constant [61 x i8] c"Can't instantiate abstract class %s with abstract methods %U\00", align 1
@.str.304 = private unnamed_addr constant [39 x i8] c"method cannot be both class and static\00", align 1
@mro_internal.PyId_mro = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.194, i32 0, i32 0), %struct._object* null }, align 8
@.str.305 = private unnamed_addr constant [38 x i8] c"mro() returned a non-class ('%.500s')\00", align 1
@.str.306 = private unnamed_addr constant [54 x i8] c"mro() returned base with unsuitable layout ('%.500s')\00", align 1
@PyExc_BaseException = external global %struct._object*, align 8
@PyBytes_Type = external global %struct._typeobject, align 8
@PyList_Type = external global %struct._typeobject, align 8
@overrides_hash.PyId___eq__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i32 0, i32 0), %struct._object* null }, align 8
@tp_new_methoddef = internal global [2 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @tp_new_wrapper to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @.str.307, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.307 = private unnamed_addr constant [108 x i8] c"__new__($type, *args, **kwargs)\0A--\0A\0ACreate and return a new object.  See help(type) for accurate signature.\00", align 1
@.str.308 = private unnamed_addr constant [35 x i8] c"<super: <class '%s'>, <%s object>>\00", align 1
@.str.309 = private unnamed_addr constant [5 x i8] c"NULL\00", align 1
@.str.310 = private unnamed_addr constant [28 x i8] c"<super: <class '%s'>, NULL>\00", align 1
@.str.311 = private unnamed_addr constant [14 x i8] c"__thisclass__\00", align 1
@.str.312 = private unnamed_addr constant [27 x i8] c"the class invoking super()\00", align 1
@.str.313 = private unnamed_addr constant [9 x i8] c"__self__\00", align 1
@.str.314 = private unnamed_addr constant [43 x i8] c"the instance invoking super(); may be None\00", align 1
@.str.315 = private unnamed_addr constant [15 x i8] c"__self_class__\00", align 1
@.str.316 = private unnamed_addr constant [55 x i8] c"the type of the instance invoking super(); may be None\00", align 1
@.str.317 = private unnamed_addr constant [61 x i8] c"super(type, obj): obj must be an instance or subtype of type\00", align 1
@.str.318 = private unnamed_addr constant [11 x i8] c"|O!O:super\00", align 1
@.str.319 = private unnamed_addr constant [26 x i8] c"super(): no current frame\00", align 1
@.str.320 = private unnamed_addr constant [24 x i8] c"super(): no code object\00", align 1
@.str.321 = private unnamed_addr constant [22 x i8] c"super(): no arguments\00", align 1
@.str.322 = private unnamed_addr constant [24 x i8] c"super(): arg[0] deleted\00", align 1
@PyCell_Type = external global %struct._typeobject, align 8
@.str.323 = private unnamed_addr constant [28 x i8] c"super(): bad __class__ cell\00", align 1
@.str.324 = private unnamed_addr constant [30 x i8] c"super(): empty __class__ cell\00", align 1
@.str.325 = private unnamed_addr constant [38 x i8] c"super(): __class__ is not a type (%s)\00", align 1
@.str.326 = private unnamed_addr constant [34 x i8] c"super(): __class__ cell not found\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @_PyType_GetDocFromInternalDoc(i8* %name, i8* %internal_doc) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %name.addr = alloca i8*, align 8
  %internal_doc.addr = alloca i8*, align 8
  %doc = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %internal_doc, i8** %internal_doc.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8*, i8** %internal_doc.addr, align 8
  %call = call i8* @_PyType_DocWithoutSignature(i8* %0, i8* %1)
  store i8* %call, i8** %doc, align 8
  %2 = load i8*, i8** %doc, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load i8*, i8** %doc, align 8
  %call1 = call %struct._object* @PyUnicode_FromString(i8* %4)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %5
}

; Function Attrs: nounwind uwtable
define internal i8* @_PyType_DocWithoutSignature(i8* %name, i8* %internal_doc) #0 {
entry:
  %retval = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %internal_doc.addr = alloca i8*, align 8
  %doc = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %internal_doc, i8** %internal_doc.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8*, i8** %internal_doc.addr, align 8
  %call = call i8* @find_signature(i8* %0, i8* %1)
  store i8* %call, i8** %doc, align 8
  %2 = load i8*, i8** %doc, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %doc, align 8
  %call1 = call i8* @skip_signature(i8* %3)
  store i8* %call1, i8** %doc, align 8
  %4 = load i8*, i8** %doc, align 8
  %tobool2 = icmp ne i8* %4, null
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %5 = load i8*, i8** %doc, align 8
  store i8* %5, i8** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %6 = load i8*, i8** %internal_doc.addr, align 8
  store i8* %6, i8** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3
  %7 = load i8*, i8** %retval
  ret i8* %7
}

declare %struct._object* @PyUnicode_FromString(i8*) #1

; Function Attrs: nounwind uwtable
define %struct._object* @_PyType_GetTextSignatureFromInternalDoc(i8* %name, i8* %internal_doc) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %name.addr = alloca i8*, align 8
  %internal_doc.addr = alloca i8*, align 8
  %start = alloca i8*, align 8
  %end = alloca i8*, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %internal_doc, i8** %internal_doc.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %1 = load i8*, i8** %internal_doc.addr, align 8
  %call = call i8* @find_signature(i8* %0, i8* %1)
  store i8* %call, i8** %start, align 8
  %2 = load i8*, i8** %start, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %start, align 8
  %call1 = call i8* @skip_signature(i8* %3)
  store i8* %call1, i8** %end, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store i8* null, i8** %end, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i8*, i8** %end, align 8
  %tobool2 = icmp ne i8* %4, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %6 = load i8*, i8** %end, align 8
  %add.ptr = getelementptr i8, i8* %6, i64 -5
  store i8* %add.ptr, i8** %end, align 8
  %7 = load i8*, i8** %start, align 8
  %8 = load i8*, i8** %end, align 8
  %9 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call5 = call %struct._object* @PyUnicode_FromStringAndSize(i8* %7, i64 %sub.ptr.sub)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3
  %10 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %10
}

; Function Attrs: nounwind uwtable
define internal i8* @find_signature(i8* %name, i8* %doc) #0 {
entry:
  %retval = alloca i8*, align 8
  %name.addr = alloca i8*, align 8
  %doc.addr = alloca i8*, align 8
  %dot = alloca i8*, align 8
  %length = alloca i64, align 8
  store i8* %name, i8** %name.addr, align 8
  store i8* %doc, i8** %doc.addr, align 8
  %0 = load i8*, i8** %doc.addr, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %name.addr, align 8
  %call = call i8* @strrchr(i8* %1, i32 46) #7
  store i8* %call, i8** %dot, align 8
  %2 = load i8*, i8** %dot, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %3 = load i8*, i8** %dot, align 8
  %add.ptr = getelementptr i8, i8* %3, i64 1
  store i8* %add.ptr, i8** %name.addr, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %4 = load i8*, i8** %name.addr, align 8
  %call4 = call i64 @strlen(i8* %4) #7
  store i64 %call4, i64* %length, align 8
  %5 = load i8*, i8** %doc.addr, align 8
  %6 = load i8*, i8** %name.addr, align 8
  %7 = load i64, i64* %length, align 8
  %call5 = call i32 @strncmp(i8* %5, i8* %6, i64 %7) #7
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.3
  store i8* null, i8** %retval
  br label %return

if.end.8:                                         ; preds = %if.end.3
  %8 = load i64, i64* %length, align 8
  %9 = load i8*, i8** %doc.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %9, i64 %8
  store i8* %add.ptr9, i8** %doc.addr, align 8
  %10 = load i8*, i8** %doc.addr, align 8
  %11 = load i8, i8* %10, align 1
  %conv = sext i8 %11 to i32
  %cmp = icmp ne i32 %conv, 40
  br i1 %cmp, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  store i8* null, i8** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  %12 = load i8*, i8** %doc.addr, align 8
  store i8* %12, i8** %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.11, %if.then.7, %if.then
  %13 = load i8*, i8** %retval
  ret i8* %13
}

; Function Attrs: nounwind uwtable
define internal i8* @skip_signature(i8* %doc) #0 {
entry:
  %retval = alloca i8*, align 8
  %doc.addr = alloca i8*, align 8
  store i8* %doc, i8** %doc.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.12, %entry
  %0 = load i8*, i8** %doc.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %doc.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %4 = load i8, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), align 1
  %conv1 = sext i8 %4 to i32
  %cmp = icmp eq i32 %conv, %conv1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %5 = load i8*, i8** %doc.addr, align 8
  %call = call i32 @strncmp(i8* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i32 0, i32 0), i64 6) #7
  %tobool3 = icmp ne i32 %call, 0
  br i1 %tobool3, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** %doc.addr, align 8
  %add.ptr = getelementptr i8, i8* %6, i64 6
  store i8* %add.ptr, i8** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %while.body
  %7 = load i8*, i8** %doc.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv4 = sext i8 %8 to i32
  %cmp5 = icmp eq i32 %conv4, 10
  br i1 %cmp5, label %land.lhs.true.7, label %if.end.12

land.lhs.true.7:                                  ; preds = %if.end
  %9 = load i8*, i8** %doc.addr, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx, align 1
  %conv8 = sext i8 %10 to i32
  %cmp9 = icmp eq i32 %conv8, 10
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %land.lhs.true.7
  store i8* null, i8** %retval
  br label %return

if.end.12:                                        ; preds = %land.lhs.true.7, %if.end
  %11 = load i8*, i8** %doc.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %doc.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i8* null, i8** %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.11, %if.then
  %12 = load i8*, i8** %retval
  ret i8* %12
}

declare %struct._object* @PyUnicode_FromStringAndSize(i8*, i64) #1

; Function Attrs: nounwind uwtable
define i32 @PyType_ClearCache() #0 {
entry:
  %i = alloca i64, align 8
  %cur_version_tag = alloca i32, align 4
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %0 = load i32, i32* @next_version_tag, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %cur_version_tag, align 4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %i, align 8
  %cmp = icmp slt i64 %1, 512
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i64, i64* %i, align 8
  %arrayidx = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %2
  %version = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx, i32 0, i32 0
  store i32 0, i32* %version, align 4
  br label %do.body

do.body:                                          ; preds = %for.body
  %3 = load i64, i64* %i, align 8
  %arrayidx1 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %3
  %name = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx1, i32 0, i32 1
  %4 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %4, %struct._object** %_py_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp2 = icmp ne %struct._object* %5, null
  br i1 %cmp2, label %if.then, label %if.end.8

if.then:                                          ; preds = %do.body
  %6 = load i64, i64* %i, align 8
  %arrayidx3 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %6
  %name4 = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx3, i32 0, i32 1
  store %struct._object* null, %struct._object** %name4, align 8
  br label %do.body.5

do.body.5:                                        ; preds = %if.then
  %7 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body.5
  br label %if.end

if.else:                                          ; preds = %do.body.5
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %do.end, %do.body
  br label %do.end.9

do.end.9:                                         ; preds = %if.end.8
  %14 = load i64, i64* %i, align 8
  %arrayidx10 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %14
  %value = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx10, i32 0, i32 2
  store %struct._object* null, %struct._object** %value, align 8
  br label %for.inc

for.inc:                                          ; preds = %do.end.9
  %15 = load i64, i64* %i, align 8
  %inc = add i64 %15, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @next_version_tag, align 4
  call void @PyType_Modified(%struct._typeobject* @PyBaseObject_Type)
  %16 = load i32, i32* %cur_version_tag, align 4
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define void @PyType_Modified(%struct._typeobject* %type) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %raw = alloca %struct._object*, align 8
  %ref = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 524288
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_subclasses = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 43
  %3 = load %struct._object*, %struct._object** %tp_subclasses, align 8
  store %struct._object* %3, %struct._object** %raw, align 8
  %4 = load %struct._object*, %struct._object** %raw, align 8
  %cmp1 = icmp ne %struct._object* %4, null
  br i1 %cmp1, label %if.then.2, label %if.end.8

if.then.2:                                        ; preds = %if.end
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.7, %if.then.2
  %5 = load %struct._object*, %struct._object** %raw, align 8
  %call = call i32 @PyDict_Next(%struct._object* %5, i64* %i, %struct._object** null, %struct._object** %ref)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct._object*, %struct._object** %ref, align 8
  %7 = bitcast %struct._object* %6 to %struct._PyWeakReference*
  %wr_object = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %7, i32 0, i32 1
  %8 = load %struct._object*, %struct._object** %wr_object, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %cmp3 = icmp sgt i64 %9, 0
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %10 = load %struct._object*, %struct._object** %ref, align 8
  %11 = bitcast %struct._object* %10 to %struct._PyWeakReference*
  %wr_object4 = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %11, i32 0, i32 1
  %12 = load %struct._object*, %struct._object** %wr_object4, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %12, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %ref, align 8
  %13 = load %struct._object*, %struct._object** %ref, align 8
  %cmp5 = icmp ne %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %ref, align 8
  %15 = bitcast %struct._object* %14 to %struct._typeobject*
  call void @PyType_Modified(%struct._typeobject* %15)
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %cond.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.8

if.end.8:                                         ; preds = %while.end, %if.end
  %16 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 19
  %17 = load i64, i64* %tp_flags9, align 8
  %and10 = and i64 %17, -524289
  store i64 %and10, i64* %tp_flags9, align 8
  br label %return

return:                                           ; preds = %if.end.8, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define void @_PyType_Fini() #0 {
entry:
  %call = call i32 @PyType_ClearCache()
  ret void
}

declare i32 @PyDict_Next(%struct._object*, i64*, %struct._object**, %struct._object**) #1

; Function Attrs: nounwind uwtable
define %struct._object* @PyType_GenericAlloc(%struct._typeobject* %type, i64 %nitems) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %nitems.addr = alloca i64, align 8
  %obj = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %g = alloca %union._gc_head*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i64 %nitems, i64* %nitems.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 2
  %1 = load i64, i64* %tp_basicsize, align 8
  %2 = load i64, i64* %nitems.addr, align 8
  %add = add i64 %2, 1
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_itemsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 3
  %4 = load i64, i64* %tp_itemsize, align 8
  %mul = mul i64 %add, %4
  %add1 = add i64 %1, %mul
  %add2 = add i64 %add1, 7
  %and = and i64 %add2, -8
  store i64 %and, i64* %size, align 8
  %5 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and3 = and i64 %6, 16384
  %cmp = icmp ne i64 %and3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load i64, i64* %size, align 8
  %call = call %struct._object* @_PyObject_GC_Malloc(i64 %7)
  store %struct._object* %call, %struct._object** %obj, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i64, i64* %size, align 8
  %call4 = call i8* @PyObject_Malloc(i64 %8)
  %9 = bitcast i8* %call4 to %struct._object*
  store %struct._object* %9, %struct._object** %obj, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %10 = load %struct._object*, %struct._object** %obj, align 8
  %cmp5 = icmp eq %struct._object* %10, null
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.end
  %call7 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call7, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %obj, align 8
  %12 = bitcast %struct._object* %11 to i8*
  %13 = load i64, i64* %size, align 8
  call void @llvm.memset.p0i8.i64(i8* %12, i8 0, i64 %13, i32 8, i1 false)
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 19
  %15 = load i64, i64* %tp_flags9, align 8
  %and10 = and i64 %15, 512
  %tobool = icmp ne i64 %and10, 0
  br i1 %tobool, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  %16 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %17 = bitcast %struct._typeobject* %16 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.end.8
  %19 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_itemsize13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 3
  %20 = load i64, i64* %tp_itemsize13, align 8
  %cmp14 = icmp eq i64 %20, 0
  br i1 %cmp14, label %if.then.15, label %if.else.17

if.then.15:                                       ; preds = %if.end.12
  %21 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %22 = load %struct._object*, %struct._object** %obj, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  store %struct._typeobject* %21, %struct._typeobject** %ob_type, align 8
  %23 = load %struct._object*, %struct._object** %obj, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  store i64 1, i64* %ob_refcnt16, align 8
  %24 = load %struct._object*, %struct._object** %obj, align 8
  br label %if.end.20

if.else.17:                                       ; preds = %if.end.12
  %25 = load i64, i64* %nitems.addr, align 8
  %26 = load %struct._object*, %struct._object** %obj, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %27, i32 0, i32 1
  store i64 %25, i64* %ob_size, align 8
  %28 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %29 = load %struct._object*, %struct._object** %obj, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyVarObject*
  %31 = bitcast %struct.PyVarObject* %30 to %struct._object*
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  store %struct._typeobject* %28, %struct._typeobject** %ob_type18, align 8
  %32 = load %struct._object*, %struct._object** %obj, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyVarObject*
  %34 = bitcast %struct.PyVarObject* %33 to %struct._object*
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  store i64 1, i64* %ob_refcnt19, align 8
  %35 = load %struct._object*, %struct._object** %obj, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyVarObject*
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.15
  %37 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 19
  %38 = load i64, i64* %tp_flags21, align 8
  %and22 = and i64 %38, 16384
  %cmp23 = icmp ne i64 %and22, 0
  br i1 %cmp23, label %if.then.24, label %if.end.45

if.then.24:                                       ; preds = %if.end.20
  br label %do.body

do.body:                                          ; preds = %if.then.24
  %39 = load %struct._object*, %struct._object** %obj, align 8
  %40 = bitcast %struct._object* %39 to %union._gc_head*
  %add.ptr = getelementptr %union._gc_head, %union._gc_head* %40, i64 -1
  store %union._gc_head* %add.ptr, %union._gc_head** %g, align 8
  %41 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc = bitcast %union._gc_head* %41 to %struct.anon*
  %gc_refs = getelementptr inbounds %struct.anon, %struct.anon* %gc, i32 0, i32 2
  %42 = load i64, i64* %gc_refs, align 8
  %shr = ashr i64 %42, 1
  %cmp25 = icmp ne i64 %shr, -2
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %do.body
  call void @Py_FatalError(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0)) #8
  unreachable

if.end.27:                                        ; preds = %do.body
  br label %do.body.28

do.body.28:                                       ; preds = %if.end.27
  %43 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc29 = bitcast %union._gc_head* %43 to %struct.anon*
  %gc_refs30 = getelementptr inbounds %struct.anon, %struct.anon* %gc29, i32 0, i32 2
  %44 = load i64, i64* %gc_refs30, align 8
  %and31 = and i64 %44, 1
  %or = or i64 %and31, -6
  %45 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc32 = bitcast %union._gc_head* %45 to %struct.anon*
  %gc_refs33 = getelementptr inbounds %struct.anon, %struct.anon* %gc32, i32 0, i32 2
  store i64 %or, i64* %gc_refs33, align 8
  br label %do.end

do.end:                                           ; preds = %do.body.28
  %46 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %47 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc34 = bitcast %union._gc_head* %47 to %struct.anon*
  %gc_next = getelementptr inbounds %struct.anon, %struct.anon* %gc34, i32 0, i32 0
  store %union._gc_head* %46, %union._gc_head** %gc_next, align 8
  %48 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %gc35 = bitcast %union._gc_head* %48 to %struct.anon*
  %gc_prev = getelementptr inbounds %struct.anon, %struct.anon* %gc35, i32 0, i32 1
  %49 = load %union._gc_head*, %union._gc_head** %gc_prev, align 8
  %50 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc36 = bitcast %union._gc_head* %50 to %struct.anon*
  %gc_prev37 = getelementptr inbounds %struct.anon, %struct.anon* %gc36, i32 0, i32 1
  store %union._gc_head* %49, %union._gc_head** %gc_prev37, align 8
  %51 = load %union._gc_head*, %union._gc_head** %g, align 8
  %52 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc38 = bitcast %union._gc_head* %52 to %struct.anon*
  %gc_prev39 = getelementptr inbounds %struct.anon, %struct.anon* %gc38, i32 0, i32 1
  %53 = load %union._gc_head*, %union._gc_head** %gc_prev39, align 8
  %gc40 = bitcast %union._gc_head* %53 to %struct.anon*
  %gc_next41 = getelementptr inbounds %struct.anon, %struct.anon* %gc40, i32 0, i32 0
  store %union._gc_head* %51, %union._gc_head** %gc_next41, align 8
  %54 = load %union._gc_head*, %union._gc_head** %g, align 8
  %55 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %gc42 = bitcast %union._gc_head* %55 to %struct.anon*
  %gc_prev43 = getelementptr inbounds %struct.anon, %struct.anon* %gc42, i32 0, i32 1
  store %union._gc_head* %54, %union._gc_head** %gc_prev43, align 8
  br label %do.end.44

do.end.44:                                        ; preds = %do.end
  br label %if.end.45

if.end.45:                                        ; preds = %do.end.44, %if.end.20
  %56 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %56, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.45, %if.then.6
  %57 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %57
}

declare %struct._object* @_PyObject_GC_Malloc(i64) #1

declare i8* @PyObject_Malloc(i64) #1

declare %struct._object* @PyErr_NoMemory() #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #2

; Function Attrs: noreturn
declare void @Py_FatalError(i8*) #3

; Function Attrs: nounwind uwtable
define %struct._object* @PyType_GenericNew(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 36
  %1 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* %1(%struct._typeobject* %2, i64 0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define i32 @PyType_IsSubtype(%struct._typeobject* %a, %struct._typeobject* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct._typeobject*, align 8
  %b.addr = alloca %struct._typeobject*, align 8
  %mro = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  store %struct._typeobject* %a, %struct._typeobject** %a.addr, align 8
  store %struct._typeobject* %b, %struct._typeobject** %b.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 41
  %1 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %1, %struct._object** %mro, align 8
  %2 = load %struct._object*, %struct._object** %mro, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %mro, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  store i64 %5, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i64, i64* %i, align 8
  %7 = load i64, i64* %n, align 8
  %cmp1 = icmp slt i64 %6, %7
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i64, i64* %i, align 8
  %9 = load %struct._object*, %struct._object** %mro, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %10, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %8
  %11 = load %struct._object*, %struct._object** %arrayidx, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %13 = bitcast %struct._typeobject* %12 to %struct._object*
  %cmp2 = icmp eq %struct._object* %11, %13
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %14 = load i64, i64* %i, align 8
  %inc = add i64 %14, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.else
  %15 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %16 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %cmp4 = icmp eq %struct._typeobject* %15, %16
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %do.body
  store i32 1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %do.body
  %17 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 30
  %18 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %18, %struct._typeobject** %a.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %if.end.6
  %19 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %cmp7 = icmp ne %struct._typeobject* %19, null
  br i1 %cmp7, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %20 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %cmp8 = icmp eq %struct._typeobject* %20, @PyBaseObject_Type
  %conv = zext i1 %cmp8 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.5, %for.end, %if.then.3
  %21 = load i32, i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define %struct._object* @_PyObject_LookupSpecial(%struct._object* %self, %struct._Py_Identifier* %attrid) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %attrid.addr = alloca %struct._Py_Identifier*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._Py_Identifier* %attrid, %struct._Py_Identifier** %attrid.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._Py_Identifier*, %struct._Py_Identifier** %attrid.addr, align 8
  %call = call %struct._object* @lookup_maybe(%struct._object* %0, %struct._Py_Identifier* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @lookup_maybe(%struct._object* %self, %struct._Py_Identifier* %attrid) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %attrid.addr = alloca %struct._Py_Identifier*, align 8
  %res = alloca %struct._object*, align 8
  %f = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._Py_Identifier* %attrid, %struct._Py_Identifier** %attrid.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._Py_Identifier*, %struct._Py_Identifier** %attrid.addr, align 8
  %call = call %struct._object* @_PyType_LookupId(%struct._typeobject* %1, %struct._Py_Identifier* %2)
  store %struct._object* %call, %struct._object** %res, align 8
  %3 = load %struct._object*, %struct._object** %res, align 8
  %cmp = icmp ne %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %res, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 32
  %6 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %6, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %cmp2 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %6, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %7 = load %struct._object*, %struct._object** %res, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.else:                                          ; preds = %if.then
  %9 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %10 = load %struct._object*, %struct._object** %res, align 8
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %14 = bitcast %struct._typeobject* %13 to %struct._object*
  %call5 = call %struct._object* %9(%struct._object* %10, %struct._object* %11, %struct._object* %14)
  store %struct._object* %call5, %struct._object** %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %if.end.6

if.end.6:                                         ; preds = %if.end, %entry
  %15 = load %struct._object*, %struct._object** %res, align 8
  ret %struct._object* %15
}

; Function Attrs: nounwind uwtable
define i64 @PyType_GetFlags(%struct._typeobject* %type) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define %struct._typeobject* @_PyType_CalculateMetaclass(%struct._typeobject* %metatype, %struct._object* %bases) #0 {
entry:
  %retval = alloca %struct._typeobject*, align 8
  %metatype.addr = alloca %struct._typeobject*, align 8
  %bases.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %nbases = alloca i64, align 8
  %winner = alloca %struct._typeobject*, align 8
  %tmp = alloca %struct._object*, align 8
  %tmptype = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %metatype, %struct._typeobject** %metatype.addr, align 8
  store %struct._object* %bases, %struct._object** %bases.addr, align 8
  %0 = load %struct._object*, %struct._object** %bases.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %nbases, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %metatype.addr, align 8
  store %struct._typeobject* %3, %struct._typeobject** %winner, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %i, align 8
  %5 = load i64, i64* %nbases, align 8
  %cmp = icmp slt i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %i, align 8
  %7 = load %struct._object*, %struct._object** %bases.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %8, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %6
  %9 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %9, %struct._object** %tmp, align 8
  %10 = load %struct._object*, %struct._object** %tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %11, %struct._typeobject** %tmptype, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %13 = load %struct._typeobject*, %struct._typeobject** %tmptype, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %12, %struct._typeobject* %13)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %14 = load %struct._typeobject*, %struct._typeobject** %tmptype, align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %call2 = call i32 @PyType_IsSubtype(%struct._typeobject* %14, %struct._typeobject* %15)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  %16 = load %struct._typeobject*, %struct._typeobject** %tmptype, align 8
  store %struct._typeobject* %16, %struct._typeobject** %winner, align 8
  br label %for.inc

if.end.5:                                         ; preds = %if.end
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.1, i32 0, i32 0))
  store %struct._typeobject* null, %struct._typeobject** %retval
  br label %return

for.inc:                                          ; preds = %if.then.4, %if.then
  %18 = load i64, i64* %i, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  store %struct._typeobject* %19, %struct._typeobject** %retval
  br label %return

return:                                           ; preds = %for.end, %if.end.5
  %20 = load %struct._typeobject*, %struct._typeobject** %retval
  ret %struct._typeobject* %20
}

declare void @PyErr_SetString(%struct._object*, i8*) #1

; Function Attrs: nounwind uwtable
define %struct._object* @PyType_FromSpecWithBases(%struct.PyType_Spec* %spec, %struct._object* %bases) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %spec.addr = alloca %struct.PyType_Spec*, align 8
  %bases.addr = alloca %struct._object*, align 8
  %res = alloca %struct._heaptypeobject*, align 8
  %type = alloca %struct._typeobject*, align 8
  %base = alloca %struct._typeobject*, align 8
  %s = alloca i8*, align 8
  %res_start = alloca i8*, align 8
  %slot = alloca %struct.PyType_Slot*, align 8
  %old_doc = alloca i8*, align 8
  %len = alloca i64, align 8
  %tp_doc = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyType_Spec* %spec, %struct.PyType_Spec** %spec.addr, align 8
  store %struct._object* %bases, %struct._object** %bases.addr, align 8
  %call = call %struct._object* @PyType_GenericAlloc(%struct._typeobject* @PyType_Type, i64 0)
  %0 = bitcast %struct._object* %call to %struct._heaptypeobject*
  store %struct._heaptypeobject* %0, %struct._heaptypeobject** %res, align 8
  %1 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %2 = bitcast %struct._heaptypeobject* %1 to i8*
  store i8* %2, i8** %res_start, align 8
  %3 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %name = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %3, i32 0, i32 0
  %4 = load i8*, i8** %name, align 8
  %call1 = call i8* @strrchr(i8* %4, i32 46) #7
  store i8* %call1, i8** %s, align 8
  %5 = load i8*, i8** %s, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %6 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %name2 = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %6, i32 0, i32 0
  %7 = load i8*, i8** %name2, align 8
  store i8* %7, i8** %s, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %8 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %9 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %cmp3 = icmp eq %struct._heaptypeobject* %9, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %10 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %ht_type = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %10, i32 0, i32 0
  store %struct._typeobject* %ht_type, %struct._typeobject** %type, align 8
  %11 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %flags = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %11, i32 0, i32 3
  %12 = load i32, i32* %flags, align 4
  %conv = zext i32 %12 to i64
  %or = or i64 %conv, 512
  %13 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  store i64 %or, i64* %tp_flags, align 8
  %14 = load i8*, i8** %s, align 8
  %call6 = call %struct._object* @PyUnicode_FromString(i8* %14)
  %15 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %ht_name = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %15, i32 0, i32 5
  store %struct._object* %call6, %struct._object** %ht_name, align 8
  %16 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %ht_name7 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %16, i32 0, i32 5
  %17 = load %struct._object*, %struct._object** %ht_name7, align 8
  %tobool = icmp ne %struct._object* %17, null
  br i1 %tobool, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.end.5
  br label %fail

if.end.9:                                         ; preds = %if.end.5
  %18 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %ht_name10 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %18, i32 0, i32 5
  %19 = load %struct._object*, %struct._object** %ht_name10, align 8
  %20 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %ht_qualname = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %20, i32 0, i32 7
  store %struct._object* %19, %struct._object** %ht_qualname, align 8
  %21 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %ht_qualname11 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %21, i32 0, i32 7
  %22 = load %struct._object*, %struct._object** %ht_qualname11, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %23, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %24 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %name12 = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %24, i32 0, i32 0
  %25 = load i8*, i8** %name12, align 8
  %26 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 1
  store i8* %25, i8** %tp_name, align 8
  %27 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 1
  %28 = load i8*, i8** %tp_name13, align 8
  %tobool14 = icmp ne i8* %28, null
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.9
  br label %fail

if.end.16:                                        ; preds = %if.end.9
  %29 = load %struct._object*, %struct._object** %bases.addr, align 8
  %tobool17 = icmp ne %struct._object* %29, null
  br i1 %tobool17, label %if.else.43, label %if.then.18

if.then.18:                                       ; preds = %if.end.16
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** %base, align 8
  %30 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %slots = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %30, i32 0, i32 4
  %31 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slots, align 8
  store %struct.PyType_Slot* %31, %struct.PyType_Slot** %slot, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.18
  %32 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot19 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %32, i32 0, i32 0
  %33 = load i32, i32* %slot19, align 4
  %tobool20 = icmp ne i32 %33, 0
  br i1 %tobool20, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot21 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %34, i32 0, i32 0
  %35 = load i32, i32* %slot21, align 4
  %cmp22 = icmp eq i32 %35, 48
  br i1 %cmp22, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %for.body
  %36 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %pfunc = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %36, i32 0, i32 1
  %37 = load i8*, i8** %pfunc, align 8
  %38 = bitcast i8* %37 to %struct._typeobject*
  store %struct._typeobject* %38, %struct._typeobject** %base, align 8
  br label %if.end.34

if.else.25:                                       ; preds = %for.body
  %39 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot26 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %39, i32 0, i32 0
  %40 = load i32, i32* %slot26, align 4
  %cmp27 = icmp eq i32 %40, 49
  br i1 %cmp27, label %if.then.29, label %if.end.33

if.then.29:                                       ; preds = %if.else.25
  %41 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %pfunc30 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %41, i32 0, i32 1
  %42 = load i8*, i8** %pfunc30, align 8
  %43 = bitcast i8* %42 to %struct._object*
  store %struct._object* %43, %struct._object** %bases.addr, align 8
  %44 = load %struct._object*, %struct._object** %bases.addr, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt31, align 8
  %inc32 = add i64 %45, 1
  store i64 %inc32, i64* %ob_refcnt31, align 8
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.29, %if.else.25
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.then.24
  br label %for.inc

for.inc:                                          ; preds = %if.end.34
  %46 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %incdec.ptr35 = getelementptr %struct.PyType_Slot, %struct.PyType_Slot* %46, i32 1
  store %struct.PyType_Slot* %incdec.ptr35, %struct.PyType_Slot** %slot, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %47 = load %struct._object*, %struct._object** %bases.addr, align 8
  %tobool36 = icmp ne %struct._object* %47, null
  br i1 %tobool36, label %if.end.39, label %if.then.37

if.then.37:                                       ; preds = %for.end
  %48 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %call38 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._typeobject* %48)
  store %struct._object* %call38, %struct._object** %bases.addr, align 8
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.37, %for.end
  %49 = load %struct._object*, %struct._object** %bases.addr, align 8
  %tobool40 = icmp ne %struct._object* %49, null
  br i1 %tobool40, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %if.end.39
  br label %fail

if.end.42:                                        ; preds = %if.end.39
  br label %if.end.46

if.else.43:                                       ; preds = %if.end.16
  %50 = load %struct._object*, %struct._object** %bases.addr, align 8
  %ob_refcnt44 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt44, align 8
  %inc45 = add i64 %51, 1
  store i64 %inc45, i64* %ob_refcnt44, align 8
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.end.42
  %52 = load %struct._object*, %struct._object** %bases.addr, align 8
  %call47 = call %struct._typeobject* @best_base(%struct._object* %52)
  store %struct._typeobject* %call47, %struct._typeobject** %base, align 8
  %53 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp48 = icmp eq %struct._typeobject* %53, null
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %if.end.46
  br label %fail

if.end.51:                                        ; preds = %if.end.46
  %54 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_flags52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 19
  %55 = load i64, i64* %tp_flags52, align 8
  %and = and i64 %55, 1024
  %cmp53 = icmp ne i64 %and, 0
  br i1 %cmp53, label %if.end.58, label %if.then.55

if.then.55:                                       ; preds = %if.end.51
  %56 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %57 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_name56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 1
  %58 = load i8*, i8** %tp_name56, align 8
  %call57 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %56, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i32 0, i32 0), i8* %58)
  br label %fail

if.end.58:                                        ; preds = %if.end.51
  %59 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %as_number = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 10
  store %struct.PyNumberMethods* %as_number, %struct.PyNumberMethods** %tp_as_number, align 8
  %61 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %as_sequence = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %61, i32 0, i32 3
  %62 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 11
  store %struct.PySequenceMethods* %as_sequence, %struct.PySequenceMethods** %tp_as_sequence, align 8
  %63 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %as_mapping = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %63, i32 0, i32 2
  %64 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 12
  store %struct.PyMappingMethods* %as_mapping, %struct.PyMappingMethods** %tp_as_mapping, align 8
  %65 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %as_buffer = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %65, i32 0, i32 4
  %66 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 18
  store %struct.PyBufferProcs* %as_buffer, %struct.PyBufferProcs** %tp_as_buffer, align 8
  %67 = load %struct._object*, %struct._object** %bases.addr, align 8
  %68 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 40
  store %struct._object* %67, %struct._object** %tp_bases, align 8
  store %struct._object* null, %struct._object** %bases.addr, align 8
  %69 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %70 = bitcast %struct._typeobject* %69 to %struct._object*
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt59, align 8
  %inc60 = add i64 %71, 1
  store i64 %inc60, i64* %ob_refcnt59, align 8
  %72 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %73 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 30
  store %struct._typeobject* %72, %struct._typeobject** %tp_base, align 8
  %74 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %basicsize = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %74, i32 0, i32 1
  %75 = load i32, i32* %basicsize, align 4
  %conv61 = sext i32 %75 to i64
  %76 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 2
  store i64 %conv61, i64* %tp_basicsize, align 8
  %77 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %itemsize = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %77, i32 0, i32 2
  %78 = load i32, i32* %itemsize, align 4
  %conv62 = sext i32 %78 to i64
  %79 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_itemsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 3
  store i64 %conv62, i64* %tp_itemsize, align 8
  %80 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %slots63 = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %80, i32 0, i32 4
  %81 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slots63, align 8
  store %struct.PyType_Slot* %81, %struct.PyType_Slot** %slot, align 8
  br label %for.cond.64

for.cond.64:                                      ; preds = %for.inc.101, %if.end.58
  %82 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot65 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %82, i32 0, i32 0
  %83 = load i32, i32* %slot65, align 4
  %tobool66 = icmp ne i32 %83, 0
  br i1 %tobool66, label %for.body.67, label %for.end.103

for.body.67:                                      ; preds = %for.cond.64
  %84 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot68 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %84, i32 0, i32 0
  %85 = load i32, i32* %slot68, align 4
  %conv69 = sext i32 %85 to i64
  %cmp70 = icmp uge i64 %conv69, 75
  br i1 %cmp70, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %for.body.67
  %86 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %86, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i32 0, i32 0))
  br label %fail

if.end.73:                                        ; preds = %for.body.67
  %87 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot74 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %87, i32 0, i32 0
  %88 = load i32, i32* %slot74, align 4
  %cmp75 = icmp eq i32 %88, 48
  br i1 %cmp75, label %if.then.80, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.73
  %89 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot77 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %89, i32 0, i32 0
  %90 = load i32, i32* %slot77, align 4
  %cmp78 = icmp eq i32 %90, 49
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %lor.lhs.false, %if.end.73
  br label %for.inc.101

if.end.81:                                        ; preds = %lor.lhs.false
  %91 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %pfunc82 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %91, i32 0, i32 1
  %92 = load i8*, i8** %pfunc82, align 8
  %93 = load i8*, i8** %res_start, align 8
  %94 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot83 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %94, i32 0, i32 0
  %95 = load i32, i32* %slot83, align 4
  %idxprom = sext i32 %95 to i64
  %arrayidx = getelementptr [75 x i16], [75 x i16]* @slotoffsets, i32 0, i64 %idxprom
  %96 = load i16, i16* %arrayidx, align 2
  %conv84 = sext i16 %96 to i32
  %idx.ext = sext i32 %conv84 to i64
  %add.ptr = getelementptr i8, i8* %93, i64 %idx.ext
  %97 = bitcast i8* %add.ptr to i8**
  store i8* %92, i8** %97, align 8
  %98 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %slot85 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %98, i32 0, i32 0
  %99 = load i32, i32* %slot85, align 4
  %cmp86 = icmp eq i32 %99, 56
  br i1 %cmp86, label %if.then.88, label %if.end.100

if.then.88:                                       ; preds = %if.end.81
  %100 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 1
  %101 = load i8*, i8** %tp_name89, align 8
  %102 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %pfunc90 = getelementptr inbounds %struct.PyType_Slot, %struct.PyType_Slot* %102, i32 0, i32 1
  %103 = load i8*, i8** %pfunc90, align 8
  %call91 = call i8* @_PyType_DocWithoutSignature(i8* %101, i8* %103)
  store i8* %call91, i8** %old_doc, align 8
  %104 = load i8*, i8** %old_doc, align 8
  %call92 = call i64 @strlen(i8* %104) #7
  %add = add i64 %call92, 1
  store i64 %add, i64* %len, align 8
  %105 = load i64, i64* %len, align 8
  %call93 = call i8* @PyObject_Malloc(i64 %105)
  store i8* %call93, i8** %tp_doc, align 8
  %106 = load i8*, i8** %tp_doc, align 8
  %cmp94 = icmp eq i8* %106, null
  br i1 %cmp94, label %if.then.96, label %if.end.98

if.then.96:                                       ; preds = %if.then.88
  %call97 = call %struct._object* @PyErr_NoMemory()
  br label %fail

if.end.98:                                        ; preds = %if.then.88
  %107 = load i8*, i8** %tp_doc, align 8
  %108 = load i8*, i8** %old_doc, align 8
  %109 = load i64, i64* %len, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %107, i8* %108, i64 %109, i32 1, i1 false)
  %110 = load i8*, i8** %tp_doc, align 8
  %111 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_doc99 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %111, i32 0, i32 20
  store i8* %110, i8** %tp_doc99, align 8
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.98, %if.end.81
  br label %for.inc.101

for.inc.101:                                      ; preds = %if.end.100, %if.then.80
  %112 = load %struct.PyType_Slot*, %struct.PyType_Slot** %slot, align 8
  %incdec.ptr102 = getelementptr %struct.PyType_Slot, %struct.PyType_Slot* %112, i32 1
  store %struct.PyType_Slot* %incdec.ptr102, %struct.PyType_Slot** %slot, align 8
  br label %for.cond.64

for.end.103:                                      ; preds = %for.cond.64
  %113 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %113, i32 0, i32 4
  %114 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %cmp104 = icmp eq void (%struct._object*)* %114, null
  br i1 %cmp104, label %if.then.106, label %if.end.108

if.then.106:                                      ; preds = %for.end.103
  %115 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dealloc107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %115, i32 0, i32 4
  store void (%struct._object*)* @subtype_dealloc, void (%struct._object*)** %tp_dealloc107, align 8
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.106, %for.end.103
  %116 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call109 = call i32 @PyType_Ready(%struct._typeobject* %116)
  %cmp110 = icmp slt i32 %call109, 0
  br i1 %cmp110, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %if.end.108
  br label %fail

if.end.113:                                       ; preds = %if.end.108
  %117 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %117, i32 0, i32 34
  %118 = load i64, i64* %tp_dictoffset, align 8
  %tobool114 = icmp ne i64 %118, 0
  br i1 %tobool114, label %if.then.115, label %if.end.117

if.then.115:                                      ; preds = %if.end.113
  %call116 = call %struct._dictkeysobject* @_PyDict_NewKeysForClass()
  %119 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %ht_cached_keys = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %119, i32 0, i32 8
  store %struct._dictkeysobject* %call116, %struct._dictkeysobject** %ht_cached_keys, align 8
  br label %if.end.117

if.end.117:                                       ; preds = %if.then.115, %if.end.113
  %120 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %name118 = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %120, i32 0, i32 0
  %121 = load i8*, i8** %name118, align 8
  %call119 = call i8* @strrchr(i8* %121, i32 46) #7
  store i8* %call119, i8** %s, align 8
  %122 = load i8*, i8** %s, align 8
  %cmp120 = icmp ne i8* %122, null
  br i1 %cmp120, label %if.then.122, label %if.end.127

if.then.122:                                      ; preds = %if.end.117
  %123 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 31
  %124 = load %struct._object*, %struct._object** %tp_dict, align 8
  %125 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %name123 = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %125, i32 0, i32 0
  %126 = load i8*, i8** %name123, align 8
  %127 = load i8*, i8** %s, align 8
  %128 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %name124 = getelementptr inbounds %struct.PyType_Spec, %struct.PyType_Spec* %128, i32 0, i32 0
  %129 = load i8*, i8** %name124, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %127 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %129 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call125 = call %struct._object* @PyUnicode_FromStringAndSize(i8* %126, i64 %sub.ptr.sub)
  %call126 = call i32 @_PyDict_SetItemId(%struct._object* %124, %struct._Py_Identifier* @PyId___module__, %struct._object* %call125)
  br label %if.end.127

if.end.127:                                       ; preds = %if.then.122, %if.end.117
  %130 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %131 = bitcast %struct._heaptypeobject* %130 to %struct._object*
  store %struct._object* %131, %struct._object** %retval
  br label %return

fail:                                             ; preds = %if.then.112, %if.then.96, %if.then.72, %if.then.55, %if.then.50, %if.then.41, %if.then.15, %if.then.8
  br label %do.body

do.body:                                          ; preds = %fail
  %132 = load %struct._heaptypeobject*, %struct._heaptypeobject** %res, align 8
  %133 = bitcast %struct._heaptypeobject* %132 to %struct._object*
  store %struct._object* %133, %struct._object** %_py_decref_tmp, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt128 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 0
  %135 = load i64, i64* %ob_refcnt128, align 8
  %dec = add i64 %135, -1
  store i64 %dec, i64* %ob_refcnt128, align 8
  %cmp129 = icmp ne i64 %dec, 0
  br i1 %cmp129, label %if.then.131, label %if.else.132

if.then.131:                                      ; preds = %do.body
  br label %if.end.134

if.else.132:                                      ; preds = %do.body
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %136, i32 0, i32 1
  %137 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc133 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %137, i32 0, i32 4
  %138 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc133, align 8
  %139 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %138(%struct._object* %139)
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.132, %if.then.131
  br label %do.end

do.end:                                           ; preds = %if.end.134
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.end.127, %if.then.4
  %140 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %140
}

; Function Attrs: nounwind readonly
declare i8* @strrchr(i8*, i32) #4

declare %struct._object* @PyTuple_Pack(i64, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._typeobject* @best_base(%struct._object* %bases) #0 {
entry:
  %retval = alloca %struct._typeobject*, align 8
  %bases.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %base = alloca %struct._typeobject*, align 8
  %winner = alloca %struct._typeobject*, align 8
  %candidate = alloca %struct._typeobject*, align 8
  %base_i = alloca %struct._typeobject*, align 8
  %base_proto = alloca %struct._object*, align 8
  store %struct._object* %bases, %struct._object** %bases.addr, align 8
  %0 = load %struct._object*, %struct._object** %bases.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %n, align 8
  store %struct._typeobject* null, %struct._typeobject** %base, align 8
  store %struct._typeobject* null, %struct._typeobject** %winner, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i64, i64* %i, align 8
  %4 = load i64, i64* %n, align 8
  %cmp = icmp slt i64 %3, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %i, align 8
  %6 = load %struct._object*, %struct._object** %bases.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %7, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %5
  %8 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %8, %struct._object** %base_proto, align 8
  %9 = load %struct._object*, %struct._object** %base_proto, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 19
  %11 = load i64, i64* %tp_flags, align 8
  %and = and i64 %11, 2147483648
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %for.body
  %12 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i32 0, i32 0))
  store %struct._typeobject* null, %struct._typeobject** %retval
  br label %return

if.end:                                           ; preds = %for.body
  %13 = load %struct._object*, %struct._object** %base_proto, align 8
  %14 = bitcast %struct._object* %13 to %struct._typeobject*
  store %struct._typeobject* %14, %struct._typeobject** %base_i, align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %base_i, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 31
  %16 = load %struct._object*, %struct._object** %tp_dict, align 8
  %cmp2 = icmp eq %struct._object* %16, null
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.end
  %17 = load %struct._typeobject*, %struct._typeobject** %base_i, align 8
  %call = call i32 @PyType_Ready(%struct._typeobject* %17)
  %cmp4 = icmp slt i32 %call, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.3
  store %struct._typeobject* null, %struct._typeobject** %retval
  br label %return

if.end.6:                                         ; preds = %if.then.3
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6, %if.end
  %18 = load %struct._typeobject*, %struct._typeobject** %base_i, align 8
  %call8 = call %struct._typeobject* @solid_base(%struct._typeobject* %18)
  store %struct._typeobject* %call8, %struct._typeobject** %candidate, align 8
  %19 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %cmp9 = icmp eq %struct._typeobject* %19, null
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end.7
  %20 = load %struct._typeobject*, %struct._typeobject** %candidate, align 8
  store %struct._typeobject* %20, %struct._typeobject** %winner, align 8
  %21 = load %struct._typeobject*, %struct._typeobject** %base_i, align 8
  store %struct._typeobject* %21, %struct._typeobject** %base, align 8
  br label %if.end.20

if.else:                                          ; preds = %if.end.7
  %22 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %23 = load %struct._typeobject*, %struct._typeobject** %candidate, align 8
  %call11 = call i32 @PyType_IsSubtype(%struct._typeobject* %22, %struct._typeobject* %23)
  %tobool = icmp ne i32 %call11, 0
  br i1 %tobool, label %if.then.12, label %if.else.13

if.then.12:                                       ; preds = %if.else
  br label %if.end.19

if.else.13:                                       ; preds = %if.else
  %24 = load %struct._typeobject*, %struct._typeobject** %candidate, align 8
  %25 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %call14 = call i32 @PyType_IsSubtype(%struct._typeobject* %24, %struct._typeobject* %25)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %if.else.13
  %26 = load %struct._typeobject*, %struct._typeobject** %candidate, align 8
  store %struct._typeobject* %26, %struct._typeobject** %winner, align 8
  %27 = load %struct._typeobject*, %struct._typeobject** %base_i, align 8
  store %struct._typeobject* %27, %struct._typeobject** %base, align 8
  br label %if.end.18

if.else.17:                                       ; preds = %if.else.13
  %28 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %28, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.13, i32 0, i32 0))
  store %struct._typeobject* null, %struct._typeobject** %retval
  br label %return

if.end.18:                                        ; preds = %if.then.16
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.then.12
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.then.10
  br label %for.inc

for.inc:                                          ; preds = %if.end.20
  %29 = load i64, i64* %i, align 8
  %inc = add i64 %29, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %30 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  store %struct._typeobject* %30, %struct._typeobject** %retval
  br label %return

return:                                           ; preds = %for.end, %if.else.17, %if.then.5, %if.then
  %31 = load %struct._typeobject*, %struct._typeobject** %retval
  ret %struct._typeobject* %31
}

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #4

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #2

; Function Attrs: nounwind uwtable
define internal void @subtype_dealloc(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %type = alloca %struct._typeobject*, align 8
  %base = alloca %struct._typeobject*, align 8
  %basedealloc = alloca void (%struct._object*)*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %has_finalizer = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_tstate = alloca %struct._ts*, align 8
  %atomic_val30 = alloca %struct._Py_atomic_address*, align 8
  %result32 = alloca i8*, align 8
  %volatile_data34 = alloca i8**, align 8
  %order37 = alloca i32, align 4
  %tmp44 = alloca i8*, align 8
  %g = alloca %union._gc_head*, align 8
  %g115 = alloca %union._gc_head*, align 8
  %list = alloca %struct._PyWeakReference**, align 8
  %dictptr = alloca %struct._object**, align 8
  %dict = alloca %struct._object*, align 8
  %_py_decref_tmp179 = alloca %struct._object*, align 8
  %g199 = alloca %union._gc_head*, align 8
  %_py_decref_tmp231 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %12, %struct._typeobject** %type, align 8
  %13 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  %14 = load i64, i64* %tp_flags, align 8
  %and = and i64 %14, 16384
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end.25, label %if.then

if.then:                                          ; preds = %sw.epilog.3
  %15 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_finalize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 47
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize, align 8
  %tobool = icmp ne void (%struct._object*)* %16, null
  br i1 %tobool, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.then
  %17 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call i32 @PyObject_CallFinalizerFromDealloc(%struct._object* %17)
  %cmp6 = icmp slt i32 %call, 0
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then.5
  br label %return

if.end:                                           ; preds = %if.then.5
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %if.then
  %18 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_del = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 45
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_del, align 8
  %tobool9 = icmp ne void (%struct._object*)* %19, null
  br i1 %tobool9, label %if.then.10, label %if.end.15

if.then.10:                                       ; preds = %if.end.8
  %20 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_del11 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 45
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_del11, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  call void %21(%struct._object* %22)
  %23 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt, align 8
  %cmp12 = icmp sgt i64 %24, 0
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.then.10
  br label %return

if.end.14:                                        ; preds = %if.then.10
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %if.end.8
  %25 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  store %struct._typeobject* %25, %struct._typeobject** %base, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.15
  %26 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  store void (%struct._object*)* %27, void (%struct._object*)** %basedealloc, align 8
  %cmp16 = icmp eq void (%struct._object*)* %27, @subtype_dealloc
  br i1 %cmp16, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %28 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 30
  %29 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %29, %struct._typeobject** %base, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %30 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  store %struct._typeobject* %31, %struct._typeobject** %type, align 8
  %32 = load void (%struct._object*)*, void (%struct._object*)** %basedealloc, align 8
  %33 = load %struct._object*, %struct._object** %self.addr, align 8
  call void %32(%struct._object* %33)
  br label %do.body

do.body:                                          ; preds = %while.end
  %34 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %35 = bitcast %struct._typeobject* %34 to %struct._object*
  store %struct._object* %35, %struct._object** %_py_decref_tmp, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt19, align 8
  %dec = add i64 %37, -1
  store i64 %dec, i64* %ob_refcnt19, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else:                                          ; preds = %do.body
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %40(%struct._object* %41)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  br label %return

if.end.25:                                        ; preds = %sw.epilog.3
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %43 = bitcast %struct._object* %42 to i8*
  call void @PyObject_GC_UnTrack(i8* %43)
  %44 = load i32, i32* @_PyTrash_delete_nesting, align 4
  %inc = add i32 %44, 1
  store i32 %inc, i32* @_PyTrash_delete_nesting, align 4
  %45 = load %struct._ts*, %struct._ts** %tstate, align 8
  %trash_delete_nesting = getelementptr inbounds %struct._ts, %struct._ts* %45, i32 0, i32 23
  %46 = load i32, i32* %trash_delete_nesting, align 4
  %inc26 = add i32 %46, 1
  store i32 %inc26, i32* %trash_delete_nesting, align 4
  br label %do.body.27

do.body.27:                                       ; preds = %if.end.25
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val30, align 8
  %47 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val30, align 8
  %_value35 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %47, i32 0, i32 0
  store i8** %_value35, i8*** %volatile_data34, align 8
  store i32 0, i32* %order37, align 4
  %48 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val30, align 8
  %49 = bitcast %struct._Py_atomic_address* %48 to i8*
  %50 = load i32, i32* %order37, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %49, i32 %50)
  %51 = load i32, i32* %order37, align 4
  switch i32 %51, label %sw.default.39 [
    i32 2, label %sw.bb.38
    i32 3, label %sw.bb.38
    i32 4, label %sw.bb.38
  ]

sw.bb.38:                                         ; preds = %do.body.27, %do.body.27, %do.body.27
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.40

sw.default.39:                                    ; preds = %do.body.27
  br label %sw.epilog.40

sw.epilog.40:                                     ; preds = %sw.default.39, %sw.bb.38
  %52 = load i8**, i8*** %volatile_data34, align 8
  %53 = load volatile i8*, i8** %52, align 8
  store i8* %53, i8** %result32, align 8
  %54 = load i32, i32* %order37, align 4
  switch i32 %54, label %sw.default.42 [
    i32 1, label %sw.bb.41
    i32 3, label %sw.bb.41
    i32 4, label %sw.bb.41
  ]

sw.bb.41:                                         ; preds = %sw.epilog.40, %sw.epilog.40, %sw.epilog.40
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.43

sw.default.42:                                    ; preds = %sw.epilog.40
  br label %sw.epilog.43

sw.epilog.43:                                     ; preds = %sw.default.42, %sw.bb.41
  %55 = load i8*, i8** %result32, align 8
  store i8* %55, i8** %tmp44
  %56 = load i8*, i8** %tmp44
  %57 = bitcast i8* %56 to %struct._ts*
  store %struct._ts* %57, %struct._ts** %_tstate, align 8
  %58 = load %struct._ts*, %struct._ts** %_tstate, align 8
  %trash_delete_nesting45 = getelementptr inbounds %struct._ts, %struct._ts* %58, i32 0, i32 23
  %59 = load i32, i32* %trash_delete_nesting45, align 4
  %cmp46 = icmp slt i32 %59, 50
  br i1 %cmp46, label %if.then.47, label %if.else.252

if.then.47:                                       ; preds = %sw.epilog.43
  %60 = load %struct._ts*, %struct._ts** %_tstate, align 8
  %trash_delete_nesting48 = getelementptr inbounds %struct._ts, %struct._ts* %60, i32 0, i32 23
  %61 = load i32, i32* %trash_delete_nesting48, align 4
  %inc49 = add i32 %61, 1
  store i32 %inc49, i32* %trash_delete_nesting48, align 4
  %62 = load i32, i32* @_PyTrash_delete_nesting, align 4
  %dec50 = add i32 %62, -1
  store i32 %dec50, i32* @_PyTrash_delete_nesting, align 4
  %63 = load %struct._ts*, %struct._ts** %tstate, align 8
  %trash_delete_nesting51 = getelementptr inbounds %struct._ts, %struct._ts* %63, i32 0, i32 23
  %64 = load i32, i32* %trash_delete_nesting51, align 4
  %dec52 = add i32 %64, -1
  store i32 %dec52, i32* %trash_delete_nesting51, align 4
  %65 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  store %struct._typeobject* %65, %struct._typeobject** %base, align 8
  br label %while.cond.53

while.cond.53:                                    ; preds = %while.body.56, %if.then.47
  %66 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %cmp55 = icmp eq void (%struct._object*)* %67, @subtype_dealloc
  br i1 %cmp55, label %while.body.56, label %while.end.58

while.body.56:                                    ; preds = %while.cond.53
  %68 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_base57 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 30
  %69 = load %struct._typeobject*, %struct._typeobject** %tp_base57, align 8
  store %struct._typeobject* %69, %struct._typeobject** %base, align 8
  br label %while.cond.53

while.end.58:                                     ; preds = %while.cond.53
  %70 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_finalize59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 47
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize59, align 8
  %tobool60 = icmp ne void (%struct._object*)* %71, null
  br i1 %tobool60, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %while.end.58
  %72 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_del61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 45
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_del61, align 8
  %tobool62 = icmp ne void (%struct._object*)* %73, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %while.end.58
  %74 = phi i1 [ true, %while.end.58 ], [ %tobool62, %lor.rhs ]
  %lor.ext = zext i1 %74 to i32
  store i32 %lor.ext, i32* %has_finalizer, align 4
  %75 = load i32, i32* %has_finalizer, align 4
  %tobool63 = icmp ne i32 %75, 0
  br i1 %tobool63, label %if.then.64, label %if.end.88

if.then.64:                                       ; preds = %lor.end
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %76 = load %struct._object*, %struct._object** %self.addr, align 8
  %77 = bitcast %struct._object* %76 to %union._gc_head*
  %add.ptr = getelementptr %union._gc_head, %union._gc_head* %77, i64 -1
  store %union._gc_head* %add.ptr, %union._gc_head** %g, align 8
  %78 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc = bitcast %union._gc_head* %78 to %struct.anon*
  %gc_refs = getelementptr inbounds %struct.anon, %struct.anon* %gc, i32 0, i32 2
  %79 = load i64, i64* %gc_refs, align 8
  %shr = ashr i64 %79, 1
  %cmp67 = icmp ne i64 %shr, -2
  br i1 %cmp67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %do.body.65
  call void @Py_FatalError(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0)) #8
  unreachable

if.end.69:                                        ; preds = %do.body.65
  br label %do.body.70

do.body.70:                                       ; preds = %if.end.69
  %80 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc71 = bitcast %union._gc_head* %80 to %struct.anon*
  %gc_refs72 = getelementptr inbounds %struct.anon, %struct.anon* %gc71, i32 0, i32 2
  %81 = load i64, i64* %gc_refs72, align 8
  %and73 = and i64 %81, 1
  %or = or i64 %and73, -6
  %82 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc74 = bitcast %union._gc_head* %82 to %struct.anon*
  %gc_refs75 = getelementptr inbounds %struct.anon, %struct.anon* %gc74, i32 0, i32 2
  store i64 %or, i64* %gc_refs75, align 8
  br label %do.end.76

do.end.76:                                        ; preds = %do.body.70
  %83 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %84 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc77 = bitcast %union._gc_head* %84 to %struct.anon*
  %gc_next = getelementptr inbounds %struct.anon, %struct.anon* %gc77, i32 0, i32 0
  store %union._gc_head* %83, %union._gc_head** %gc_next, align 8
  %85 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %gc78 = bitcast %union._gc_head* %85 to %struct.anon*
  %gc_prev = getelementptr inbounds %struct.anon, %struct.anon* %gc78, i32 0, i32 1
  %86 = load %union._gc_head*, %union._gc_head** %gc_prev, align 8
  %87 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc79 = bitcast %union._gc_head* %87 to %struct.anon*
  %gc_prev80 = getelementptr inbounds %struct.anon, %struct.anon* %gc79, i32 0, i32 1
  store %union._gc_head* %86, %union._gc_head** %gc_prev80, align 8
  %88 = load %union._gc_head*, %union._gc_head** %g, align 8
  %89 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc81 = bitcast %union._gc_head* %89 to %struct.anon*
  %gc_prev82 = getelementptr inbounds %struct.anon, %struct.anon* %gc81, i32 0, i32 1
  %90 = load %union._gc_head*, %union._gc_head** %gc_prev82, align 8
  %gc83 = bitcast %union._gc_head* %90 to %struct.anon*
  %gc_next84 = getelementptr inbounds %struct.anon, %struct.anon* %gc83, i32 0, i32 0
  store %union._gc_head* %88, %union._gc_head** %gc_next84, align 8
  %91 = load %union._gc_head*, %union._gc_head** %g, align 8
  %92 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %gc85 = bitcast %union._gc_head* %92 to %struct.anon*
  %gc_prev86 = getelementptr inbounds %struct.anon, %struct.anon* %gc85, i32 0, i32 1
  store %union._gc_head* %91, %union._gc_head** %gc_prev86, align 8
  br label %do.end.87

do.end.87:                                        ; preds = %do.end.76
  br label %if.end.88

if.end.88:                                        ; preds = %do.end.87, %lor.end
  %93 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_finalize89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 47
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize89, align 8
  %tobool90 = icmp ne void (%struct._object*)* %94, null
  br i1 %tobool90, label %if.then.91, label %if.end.96

if.then.91:                                       ; preds = %if.end.88
  %95 = load %struct._object*, %struct._object** %self.addr, align 8
  %call92 = call i32 @PyObject_CallFinalizerFromDealloc(%struct._object* %95)
  %cmp93 = icmp slt i32 %call92, 0
  br i1 %cmp93, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %if.then.91
  br label %endlabel

if.end.95:                                        ; preds = %if.then.91
  br label %if.end.96

if.end.96:                                        ; preds = %if.end.95, %if.end.88
  %96 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_weaklistoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 24
  %97 = load i64, i64* %tp_weaklistoffset, align 8
  %tobool97 = icmp ne i64 %97, 0
  br i1 %tobool97, label %land.lhs.true, label %if.end.101

land.lhs.true:                                    ; preds = %if.end.96
  %98 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_weaklistoffset98 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %98, i32 0, i32 24
  %99 = load i64, i64* %tp_weaklistoffset98, align 8
  %tobool99 = icmp ne i64 %99, 0
  br i1 %tobool99, label %if.end.101, label %if.then.100

if.then.100:                                      ; preds = %land.lhs.true
  %100 = load %struct._object*, %struct._object** %self.addr, align 8
  call void @PyObject_ClearWeakRefs(%struct._object* %100)
  br label %if.end.101

if.end.101:                                       ; preds = %if.then.100, %land.lhs.true, %if.end.96
  %101 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_del102 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %101, i32 0, i32 45
  %102 = load void (%struct._object*)*, void (%struct._object*)** %tp_del102, align 8
  %tobool103 = icmp ne void (%struct._object*)* %102, null
  br i1 %tobool103, label %if.then.104, label %if.end.110

if.then.104:                                      ; preds = %if.end.101
  %103 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_del105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %103, i32 0, i32 45
  %104 = load void (%struct._object*)*, void (%struct._object*)** %tp_del105, align 8
  %105 = load %struct._object*, %struct._object** %self.addr, align 8
  call void %104(%struct._object* %105)
  %106 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 0
  %107 = load i64, i64* %ob_refcnt106, align 8
  %cmp107 = icmp sgt i64 %107, 0
  br i1 %cmp107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %if.then.104
  br label %endlabel

if.end.109:                                       ; preds = %if.then.104
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.end.101
  %108 = load i32, i32* %has_finalizer, align 4
  %tobool111 = icmp ne i32 %108, 0
  br i1 %tobool111, label %if.then.112, label %if.end.155

if.then.112:                                      ; preds = %if.end.110
  br label %do.body.113

do.body.113:                                      ; preds = %if.then.112
  %109 = load %struct._object*, %struct._object** %self.addr, align 8
  %110 = bitcast %struct._object* %109 to %union._gc_head*
  %add.ptr116 = getelementptr %union._gc_head, %union._gc_head* %110, i64 -1
  store %union._gc_head* %add.ptr116, %union._gc_head** %g115, align 8
  br label %do.body.117

do.body.117:                                      ; preds = %do.body.113
  %111 = load %union._gc_head*, %union._gc_head** %g115, align 8
  %gc118 = bitcast %union._gc_head* %111 to %struct.anon*
  %gc_refs119 = getelementptr inbounds %struct.anon, %struct.anon* %gc118, i32 0, i32 2
  %112 = load i64, i64* %gc_refs119, align 8
  %and120 = and i64 %112, 1
  %or121 = or i64 %and120, -4
  %113 = load %union._gc_head*, %union._gc_head** %g115, align 8
  %gc122 = bitcast %union._gc_head* %113 to %struct.anon*
  %gc_refs123 = getelementptr inbounds %struct.anon, %struct.anon* %gc122, i32 0, i32 2
  store i64 %or121, i64* %gc_refs123, align 8
  br label %do.end.124

do.end.124:                                       ; preds = %do.body.117
  %114 = load %union._gc_head*, %union._gc_head** %g115, align 8
  %gc125 = bitcast %union._gc_head* %114 to %struct.anon*
  %gc_next126 = getelementptr inbounds %struct.anon, %struct.anon* %gc125, i32 0, i32 0
  %115 = load %union._gc_head*, %union._gc_head** %gc_next126, align 8
  %116 = load %union._gc_head*, %union._gc_head** %g115, align 8
  %gc127 = bitcast %union._gc_head* %116 to %struct.anon*
  %gc_prev128 = getelementptr inbounds %struct.anon, %struct.anon* %gc127, i32 0, i32 1
  %117 = load %union._gc_head*, %union._gc_head** %gc_prev128, align 8
  %gc129 = bitcast %union._gc_head* %117 to %struct.anon*
  %gc_next130 = getelementptr inbounds %struct.anon, %struct.anon* %gc129, i32 0, i32 0
  store %union._gc_head* %115, %union._gc_head** %gc_next130, align 8
  %118 = load %union._gc_head*, %union._gc_head** %g115, align 8
  %gc131 = bitcast %union._gc_head* %118 to %struct.anon*
  %gc_prev132 = getelementptr inbounds %struct.anon, %struct.anon* %gc131, i32 0, i32 1
  %119 = load %union._gc_head*, %union._gc_head** %gc_prev132, align 8
  %120 = load %union._gc_head*, %union._gc_head** %g115, align 8
  %gc133 = bitcast %union._gc_head* %120 to %struct.anon*
  %gc_next134 = getelementptr inbounds %struct.anon, %struct.anon* %gc133, i32 0, i32 0
  %121 = load %union._gc_head*, %union._gc_head** %gc_next134, align 8
  %gc135 = bitcast %union._gc_head* %121 to %struct.anon*
  %gc_prev136 = getelementptr inbounds %struct.anon, %struct.anon* %gc135, i32 0, i32 1
  store %union._gc_head* %119, %union._gc_head** %gc_prev136, align 8
  %122 = load %union._gc_head*, %union._gc_head** %g115, align 8
  %gc137 = bitcast %union._gc_head* %122 to %struct.anon*
  %gc_next138 = getelementptr inbounds %struct.anon, %struct.anon* %gc137, i32 0, i32 0
  store %union._gc_head* null, %union._gc_head** %gc_next138, align 8
  br label %do.end.139

do.end.139:                                       ; preds = %do.end.124
  %123 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_weaklistoffset140 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 24
  %124 = load i64, i64* %tp_weaklistoffset140, align 8
  %tobool141 = icmp ne i64 %124, 0
  br i1 %tobool141, label %land.lhs.true.142, label %if.end.154

land.lhs.true.142:                                ; preds = %do.end.139
  %125 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_weaklistoffset143 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %125, i32 0, i32 24
  %126 = load i64, i64* %tp_weaklistoffset143, align 8
  %tobool144 = icmp ne i64 %126, 0
  br i1 %tobool144, label %if.end.154, label %if.then.145

if.then.145:                                      ; preds = %land.lhs.true.142
  %127 = load %struct._object*, %struct._object** %self.addr, align 8
  %128 = bitcast %struct._object* %127 to i8*
  %129 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type147 = getelementptr inbounds %struct._object, %struct._object* %129, i32 0, i32 1
  %130 = load %struct._typeobject*, %struct._typeobject** %ob_type147, align 8
  %tp_weaklistoffset148 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %130, i32 0, i32 24
  %131 = load i64, i64* %tp_weaklistoffset148, align 8
  %add.ptr149 = getelementptr i8, i8* %128, i64 %131
  %132 = bitcast i8* %add.ptr149 to %struct._object**
  %133 = bitcast %struct._object** %132 to %struct._PyWeakReference**
  store %struct._PyWeakReference** %133, %struct._PyWeakReference*** %list, align 8
  br label %while.cond.150

while.cond.150:                                   ; preds = %while.body.152, %if.then.145
  %134 = load %struct._PyWeakReference**, %struct._PyWeakReference*** %list, align 8
  %135 = load %struct._PyWeakReference*, %struct._PyWeakReference** %134, align 8
  %tobool151 = icmp ne %struct._PyWeakReference* %135, null
  br i1 %tobool151, label %while.body.152, label %while.end.153

while.body.152:                                   ; preds = %while.cond.150
  %136 = load %struct._PyWeakReference**, %struct._PyWeakReference*** %list, align 8
  %137 = load %struct._PyWeakReference*, %struct._PyWeakReference** %136, align 8
  call void @_PyWeakref_ClearRef(%struct._PyWeakReference* %137)
  br label %while.cond.150

while.end.153:                                    ; preds = %while.cond.150
  br label %if.end.154

if.end.154:                                       ; preds = %while.end.153, %land.lhs.true.142, %do.end.139
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %if.end.110
  %138 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  store %struct._typeobject* %138, %struct._typeobject** %base, align 8
  br label %while.cond.156

while.cond.156:                                   ; preds = %if.end.162, %if.end.155
  %139 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dealloc157 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %139, i32 0, i32 4
  %140 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc157, align 8
  store void (%struct._object*)* %140, void (%struct._object*)** %basedealloc, align 8
  %cmp158 = icmp eq void (%struct._object*)* %140, @subtype_dealloc
  br i1 %cmp158, label %while.body.159, label %while.end.164

while.body.159:                                   ; preds = %while.cond.156
  %141 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %142 = bitcast %struct._typeobject* %141 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %142, i32 0, i32 1
  %143 = load i64, i64* %ob_size, align 8
  %tobool160 = icmp ne i64 %143, 0
  br i1 %tobool160, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %while.body.159
  %144 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %145 = load %struct._object*, %struct._object** %self.addr, align 8
  call void @clear_slots(%struct._typeobject* %144, %struct._object* %145)
  br label %if.end.162

if.end.162:                                       ; preds = %if.then.161, %while.body.159
  %146 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_base163 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %146, i32 0, i32 30
  %147 = load %struct._typeobject*, %struct._typeobject** %tp_base163, align 8
  store %struct._typeobject* %147, %struct._typeobject** %base, align 8
  br label %while.cond.156

while.end.164:                                    ; preds = %while.cond.156
  %148 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %148, i32 0, i32 34
  %149 = load i64, i64* %tp_dictoffset, align 8
  %tobool165 = icmp ne i64 %149, 0
  br i1 %tobool165, label %land.lhs.true.166, label %if.end.191

land.lhs.true.166:                                ; preds = %while.end.164
  %150 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dictoffset167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %150, i32 0, i32 34
  %151 = load i64, i64* %tp_dictoffset167, align 8
  %tobool168 = icmp ne i64 %151, 0
  br i1 %tobool168, label %if.end.191, label %if.then.169

if.then.169:                                      ; preds = %land.lhs.true.166
  %152 = load %struct._object*, %struct._object** %self.addr, align 8
  %call171 = call %struct._object** @_PyObject_GetDictPtr(%struct._object* %152)
  store %struct._object** %call171, %struct._object*** %dictptr, align 8
  %153 = load %struct._object**, %struct._object*** %dictptr, align 8
  %cmp172 = icmp ne %struct._object** %153, null
  br i1 %cmp172, label %if.then.173, label %if.end.190

if.then.173:                                      ; preds = %if.then.169
  %154 = load %struct._object**, %struct._object*** %dictptr, align 8
  %155 = load %struct._object*, %struct._object** %154, align 8
  store %struct._object* %155, %struct._object** %dict, align 8
  %156 = load %struct._object*, %struct._object** %dict, align 8
  %cmp175 = icmp ne %struct._object* %156, null
  br i1 %cmp175, label %if.then.176, label %if.end.189

if.then.176:                                      ; preds = %if.then.173
  br label %do.body.177

do.body.177:                                      ; preds = %if.then.176
  %157 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %157, %struct._object** %_py_decref_tmp179, align 8
  %158 = load %struct._object*, %struct._object** %_py_decref_tmp179, align 8
  %ob_refcnt180 = getelementptr inbounds %struct._object, %struct._object* %158, i32 0, i32 0
  %159 = load i64, i64* %ob_refcnt180, align 8
  %dec181 = add i64 %159, -1
  store i64 %dec181, i64* %ob_refcnt180, align 8
  %cmp182 = icmp ne i64 %dec181, 0
  br i1 %cmp182, label %if.then.183, label %if.else.184

if.then.183:                                      ; preds = %do.body.177
  br label %if.end.187

if.else.184:                                      ; preds = %do.body.177
  %160 = load %struct._object*, %struct._object** %_py_decref_tmp179, align 8
  %ob_type185 = getelementptr inbounds %struct._object, %struct._object* %160, i32 0, i32 1
  %161 = load %struct._typeobject*, %struct._typeobject** %ob_type185, align 8
  %tp_dealloc186 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %161, i32 0, i32 4
  %162 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc186, align 8
  %163 = load %struct._object*, %struct._object** %_py_decref_tmp179, align 8
  call void %162(%struct._object* %163)
  br label %if.end.187

if.end.187:                                       ; preds = %if.else.184, %if.then.183
  br label %do.end.188

do.end.188:                                       ; preds = %if.end.187
  %164 = load %struct._object**, %struct._object*** %dictptr, align 8
  store %struct._object* null, %struct._object** %164, align 8
  br label %if.end.189

if.end.189:                                       ; preds = %do.end.188, %if.then.173
  br label %if.end.190

if.end.190:                                       ; preds = %if.end.189, %if.then.169
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.190, %land.lhs.true.166, %while.end.164
  %165 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type192 = getelementptr inbounds %struct._object, %struct._object* %165, i32 0, i32 1
  %166 = load %struct._typeobject*, %struct._typeobject** %ob_type192, align 8
  store %struct._typeobject* %166, %struct._typeobject** %type, align 8
  %167 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_flags193 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %167, i32 0, i32 19
  %168 = load i64, i64* %tp_flags193, align 8
  %and194 = and i64 %168, 16384
  %cmp195 = icmp ne i64 %and194, 0
  br i1 %cmp195, label %if.then.196, label %if.end.228

if.then.196:                                      ; preds = %if.end.191
  br label %do.body.197

do.body.197:                                      ; preds = %if.then.196
  %169 = load %struct._object*, %struct._object** %self.addr, align 8
  %170 = bitcast %struct._object* %169 to %union._gc_head*
  %add.ptr200 = getelementptr %union._gc_head, %union._gc_head* %170, i64 -1
  store %union._gc_head* %add.ptr200, %union._gc_head** %g199, align 8
  %171 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %gc201 = bitcast %union._gc_head* %171 to %struct.anon*
  %gc_refs202 = getelementptr inbounds %struct.anon, %struct.anon* %gc201, i32 0, i32 2
  %172 = load i64, i64* %gc_refs202, align 8
  %shr203 = ashr i64 %172, 1
  %cmp204 = icmp ne i64 %shr203, -2
  br i1 %cmp204, label %if.then.205, label %if.end.206

if.then.205:                                      ; preds = %do.body.197
  call void @Py_FatalError(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i32 0, i32 0)) #8
  unreachable

if.end.206:                                       ; preds = %do.body.197
  br label %do.body.207

do.body.207:                                      ; preds = %if.end.206
  %173 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %gc208 = bitcast %union._gc_head* %173 to %struct.anon*
  %gc_refs209 = getelementptr inbounds %struct.anon, %struct.anon* %gc208, i32 0, i32 2
  %174 = load i64, i64* %gc_refs209, align 8
  %and210 = and i64 %174, 1
  %or211 = or i64 %and210, -6
  %175 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %gc212 = bitcast %union._gc_head* %175 to %struct.anon*
  %gc_refs213 = getelementptr inbounds %struct.anon, %struct.anon* %gc212, i32 0, i32 2
  store i64 %or211, i64* %gc_refs213, align 8
  br label %do.end.214

do.end.214:                                       ; preds = %do.body.207
  %176 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %177 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %gc215 = bitcast %union._gc_head* %177 to %struct.anon*
  %gc_next216 = getelementptr inbounds %struct.anon, %struct.anon* %gc215, i32 0, i32 0
  store %union._gc_head* %176, %union._gc_head** %gc_next216, align 8
  %178 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %gc217 = bitcast %union._gc_head* %178 to %struct.anon*
  %gc_prev218 = getelementptr inbounds %struct.anon, %struct.anon* %gc217, i32 0, i32 1
  %179 = load %union._gc_head*, %union._gc_head** %gc_prev218, align 8
  %180 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %gc219 = bitcast %union._gc_head* %180 to %struct.anon*
  %gc_prev220 = getelementptr inbounds %struct.anon, %struct.anon* %gc219, i32 0, i32 1
  store %union._gc_head* %179, %union._gc_head** %gc_prev220, align 8
  %181 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %182 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %gc221 = bitcast %union._gc_head* %182 to %struct.anon*
  %gc_prev222 = getelementptr inbounds %struct.anon, %struct.anon* %gc221, i32 0, i32 1
  %183 = load %union._gc_head*, %union._gc_head** %gc_prev222, align 8
  %gc223 = bitcast %union._gc_head* %183 to %struct.anon*
  %gc_next224 = getelementptr inbounds %struct.anon, %struct.anon* %gc223, i32 0, i32 0
  store %union._gc_head* %181, %union._gc_head** %gc_next224, align 8
  %184 = load %union._gc_head*, %union._gc_head** %g199, align 8
  %185 = load %union._gc_head*, %union._gc_head** @_PyGC_generation0, align 8
  %gc225 = bitcast %union._gc_head* %185 to %struct.anon*
  %gc_prev226 = getelementptr inbounds %struct.anon, %struct.anon* %gc225, i32 0, i32 1
  store %union._gc_head* %184, %union._gc_head** %gc_prev226, align 8
  br label %do.end.227

do.end.227:                                       ; preds = %do.end.214
  br label %if.end.228

if.end.228:                                       ; preds = %do.end.227, %if.end.191
  %186 = load void (%struct._object*)*, void (%struct._object*)** %basedealloc, align 8
  %187 = load %struct._object*, %struct._object** %self.addr, align 8
  call void %186(%struct._object* %187)
  br label %do.body.229

do.body.229:                                      ; preds = %if.end.228
  %188 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %189 = bitcast %struct._typeobject* %188 to %struct._object*
  store %struct._object* %189, %struct._object** %_py_decref_tmp231, align 8
  %190 = load %struct._object*, %struct._object** %_py_decref_tmp231, align 8
  %ob_refcnt232 = getelementptr inbounds %struct._object, %struct._object* %190, i32 0, i32 0
  %191 = load i64, i64* %ob_refcnt232, align 8
  %dec233 = add i64 %191, -1
  store i64 %dec233, i64* %ob_refcnt232, align 8
  %cmp234 = icmp ne i64 %dec233, 0
  br i1 %cmp234, label %if.then.235, label %if.else.236

if.then.235:                                      ; preds = %do.body.229
  br label %if.end.239

if.else.236:                                      ; preds = %do.body.229
  %192 = load %struct._object*, %struct._object** %_py_decref_tmp231, align 8
  %ob_type237 = getelementptr inbounds %struct._object, %struct._object* %192, i32 0, i32 1
  %193 = load %struct._typeobject*, %struct._typeobject** %ob_type237, align 8
  %tp_dealloc238 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %193, i32 0, i32 4
  %194 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc238, align 8
  %195 = load %struct._object*, %struct._object** %_py_decref_tmp231, align 8
  call void %194(%struct._object* %195)
  br label %if.end.239

if.end.239:                                       ; preds = %if.else.236, %if.then.235
  br label %do.end.240

do.end.240:                                       ; preds = %if.end.239
  br label %endlabel

endlabel:                                         ; preds = %do.end.240, %if.then.108, %if.then.94
  %196 = load i32, i32* @_PyTrash_delete_nesting, align 4
  %inc241 = add i32 %196, 1
  store i32 %inc241, i32* @_PyTrash_delete_nesting, align 4
  %197 = load %struct._ts*, %struct._ts** %tstate, align 8
  %trash_delete_nesting242 = getelementptr inbounds %struct._ts, %struct._ts* %197, i32 0, i32 23
  %198 = load i32, i32* %trash_delete_nesting242, align 4
  %inc243 = add i32 %198, 1
  store i32 %inc243, i32* %trash_delete_nesting242, align 4
  %199 = load %struct._ts*, %struct._ts** %_tstate, align 8
  %trash_delete_nesting244 = getelementptr inbounds %struct._ts, %struct._ts* %199, i32 0, i32 23
  %200 = load i32, i32* %trash_delete_nesting244, align 4
  %dec245 = add i32 %200, -1
  store i32 %dec245, i32* %trash_delete_nesting244, align 4
  %201 = load %struct._ts*, %struct._ts** %_tstate, align 8
  %trash_delete_later = getelementptr inbounds %struct._ts, %struct._ts* %201, i32 0, i32 24
  %202 = load %struct._object*, %struct._object** %trash_delete_later, align 8
  %tobool246 = icmp ne %struct._object* %202, null
  br i1 %tobool246, label %land.lhs.true.247, label %if.end.251

land.lhs.true.247:                                ; preds = %endlabel
  %203 = load %struct._ts*, %struct._ts** %_tstate, align 8
  %trash_delete_nesting248 = getelementptr inbounds %struct._ts, %struct._ts* %203, i32 0, i32 23
  %204 = load i32, i32* %trash_delete_nesting248, align 4
  %cmp249 = icmp sle i32 %204, 0
  br i1 %cmp249, label %if.then.250, label %if.end.251

if.then.250:                                      ; preds = %land.lhs.true.247
  call void @_PyTrash_thread_destroy_chain()
  br label %if.end.251

if.end.251:                                       ; preds = %if.then.250, %land.lhs.true.247, %endlabel
  br label %if.end.253

if.else.252:                                      ; preds = %sw.epilog.43
  %205 = load %struct._object*, %struct._object** %self.addr, align 8
  call void @_PyTrash_thread_deposit_object(%struct._object* %205)
  br label %if.end.253

if.end.253:                                       ; preds = %if.else.252, %if.end.251
  br label %do.end.254

do.end.254:                                       ; preds = %if.end.253
  %206 = load i32, i32* @_PyTrash_delete_nesting, align 4
  %dec255 = add i32 %206, -1
  store i32 %dec255, i32* @_PyTrash_delete_nesting, align 4
  %207 = load %struct._ts*, %struct._ts** %tstate, align 8
  %trash_delete_nesting256 = getelementptr inbounds %struct._ts, %struct._ts* %207, i32 0, i32 23
  %208 = load i32, i32* %trash_delete_nesting256, align 4
  %dec257 = add i32 %208, -1
  store i32 %dec257, i32* %trash_delete_nesting256, align 4
  br label %return

return:                                           ; preds = %do.end.254, %do.end, %if.then.13, %if.then.7
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @PyType_Ready(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %dict = alloca %struct._object*, align 8
  %bases = alloca %struct._object*, align 8
  %base = alloca %struct._typeobject*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %b = alloca %struct._object*, align 8
  %old_doc = alloca i8*, align 8
  %doc = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp126 = alloca %struct._object*, align 8
  %b187 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 4096
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags1, align 8
  %or = or i64 %3, 8192
  store i64 %or, i64* %tp_flags1, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 30
  %5 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %5, %struct._typeobject** %base, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp = icmp eq %struct._typeobject* %6, null
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %cmp2 = icmp ne %struct._typeobject* %7, @PyBaseObject_Type
  br i1 %cmp2, label %if.then.3, label %if.end.5

if.then.3:                                        ; preds = %land.lhs.true
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 30
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** %tp_base4, align 8
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** %base, align 8
  %9 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %10 = bitcast %struct._typeobject* %9 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.3, %land.lhs.true, %if.end
  %12 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp6 = icmp ne %struct._typeobject* %12, null
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.13

land.lhs.true.7:                                  ; preds = %if.end.5
  %13 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 31
  %14 = load %struct._object*, %struct._object** %tp_dict, align 8
  %cmp8 = icmp eq %struct._object* %14, null
  br i1 %cmp8, label %if.then.9, label %if.end.13

if.then.9:                                        ; preds = %land.lhs.true.7
  %15 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %call = call i32 @PyType_Ready(%struct._typeobject* %15)
  %cmp10 = icmp slt i32 %call, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.9
  br label %error

if.end.12:                                        ; preds = %if.then.9
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %land.lhs.true.7, %if.end.5
  %16 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %17 = bitcast %struct._typeobject* %16 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp14 = icmp eq %struct._typeobject* %18, null
  br i1 %cmp14, label %land.lhs.true.15, label %if.end.20

land.lhs.true.15:                                 ; preds = %if.end.13
  %19 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp16 = icmp ne %struct._typeobject* %19, null
  br i1 %cmp16, label %if.then.17, label %if.end.20

if.then.17:                                       ; preds = %land.lhs.true.15
  %20 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %21 = bitcast %struct._typeobject* %20 to %struct._object*
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %23 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %24 = bitcast %struct._typeobject* %23 to %struct._object*
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  store %struct._typeobject* %22, %struct._typeobject** %ob_type19, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %land.lhs.true.15, %if.end.13
  %25 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 40
  %26 = load %struct._object*, %struct._object** %tp_bases, align 8
  store %struct._object* %26, %struct._object** %bases, align 8
  %27 = load %struct._object*, %struct._object** %bases, align 8
  %cmp21 = icmp eq %struct._object* %27, null
  br i1 %cmp21, label %if.then.22, label %if.end.32

if.then.22:                                       ; preds = %if.end.20
  %28 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp23 = icmp eq %struct._typeobject* %28, null
  br i1 %cmp23, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %if.then.22
  %call25 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call25, %struct._object** %bases, align 8
  br label %if.end.27

if.else:                                          ; preds = %if.then.22
  %29 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %call26 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._typeobject* %29)
  store %struct._object* %call26, %struct._object** %bases, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.24
  %30 = load %struct._object*, %struct._object** %bases, align 8
  %cmp28 = icmp eq %struct._object* %30, null
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.end.27
  br label %error

if.end.30:                                        ; preds = %if.end.27
  %31 = load %struct._object*, %struct._object** %bases, align 8
  %32 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 40
  store %struct._object* %31, %struct._object** %tp_bases31, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.30, %if.end.20
  %33 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 31
  %34 = load %struct._object*, %struct._object** %tp_dict33, align 8
  store %struct._object* %34, %struct._object** %dict, align 8
  %35 = load %struct._object*, %struct._object** %dict, align 8
  %cmp34 = icmp eq %struct._object* %35, null
  br i1 %cmp34, label %if.then.35, label %if.end.41

if.then.35:                                       ; preds = %if.end.32
  %call36 = call %struct._object* @PyDict_New()
  store %struct._object* %call36, %struct._object** %dict, align 8
  %36 = load %struct._object*, %struct._object** %dict, align 8
  %cmp37 = icmp eq %struct._object* %36, null
  br i1 %cmp37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.then.35
  br label %error

if.end.39:                                        ; preds = %if.then.35
  %37 = load %struct._object*, %struct._object** %dict, align 8
  %38 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 31
  store %struct._object* %37, %struct._object** %tp_dict40, align 8
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.39, %if.end.32
  %39 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call42 = call i32 @add_operators(%struct._typeobject* %39)
  %cmp43 = icmp slt i32 %call42, 0
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.41
  br label %error

if.end.45:                                        ; preds = %if.end.41
  %40 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_methods = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 27
  %41 = load %struct.PyMethodDef*, %struct.PyMethodDef** %tp_methods, align 8
  %cmp46 = icmp ne %struct.PyMethodDef* %41, null
  br i1 %cmp46, label %if.then.47, label %if.end.53

if.then.47:                                       ; preds = %if.end.45
  %42 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %43 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_methods48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 27
  %44 = load %struct.PyMethodDef*, %struct.PyMethodDef** %tp_methods48, align 8
  %call49 = call i32 @add_methods(%struct._typeobject* %42, %struct.PyMethodDef* %44)
  %cmp50 = icmp slt i32 %call49, 0
  br i1 %cmp50, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %if.then.47
  br label %error

if.end.52:                                        ; preds = %if.then.47
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.end.45
  %45 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_members = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 28
  %46 = load %struct.PyMemberDef*, %struct.PyMemberDef** %tp_members, align 8
  %cmp54 = icmp ne %struct.PyMemberDef* %46, null
  br i1 %cmp54, label %if.then.55, label %if.end.61

if.then.55:                                       ; preds = %if.end.53
  %47 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %48 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_members56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 28
  %49 = load %struct.PyMemberDef*, %struct.PyMemberDef** %tp_members56, align 8
  %call57 = call i32 @add_members(%struct._typeobject* %47, %struct.PyMemberDef* %49)
  %cmp58 = icmp slt i32 %call57, 0
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.then.55
  br label %error

if.end.60:                                        ; preds = %if.then.55
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.end.53
  %50 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_getset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 29
  %51 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %tp_getset, align 8
  %cmp62 = icmp ne %struct.PyGetSetDef* %51, null
  br i1 %cmp62, label %if.then.63, label %if.end.69

if.then.63:                                       ; preds = %if.end.61
  %52 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %53 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_getset64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 29
  %54 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %tp_getset64, align 8
  %call65 = call i32 @add_getset(%struct._typeobject* %52, %struct.PyGetSetDef* %54)
  %cmp66 = icmp slt i32 %call65, 0
  br i1 %cmp66, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.then.63
  br label %error

if.end.68:                                        ; preds = %if.then.63
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %if.end.61
  %55 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call70 = call i32 @mro_internal(%struct._typeobject* %55)
  %cmp71 = icmp slt i32 %call70, 0
  br i1 %cmp71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.end.69
  br label %error

if.end.73:                                        ; preds = %if.end.69
  %56 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 30
  %57 = load %struct._typeobject*, %struct._typeobject** %tp_base74, align 8
  %cmp75 = icmp ne %struct._typeobject* %57, null
  br i1 %cmp75, label %if.then.76, label %if.end.78

if.then.76:                                       ; preds = %if.end.73
  %58 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %59 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 30
  %60 = load %struct._typeobject*, %struct._typeobject** %tp_base77, align 8
  call void @inherit_special(%struct._typeobject* %58, %struct._typeobject* %60)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.76, %if.end.73
  %61 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %61, i32 0, i32 41
  %62 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %62, %struct._object** %bases, align 8
  %63 = load %struct._object*, %struct._object** %bases, align 8
  %64 = bitcast %struct._object* %63 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %64, i32 0, i32 1
  %65 = load i64, i64* %ob_size, align 8
  store i64 %65, i64* %n, align 8
  store i64 1, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.78
  %66 = load i64, i64* %i, align 8
  %67 = load i64, i64* %n, align 8
  %cmp79 = icmp slt i64 %66, %67
  br i1 %cmp79, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %68 = load i64, i64* %i, align 8
  %69 = load %struct._object*, %struct._object** %bases, align 8
  %70 = bitcast %struct._object* %69 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %70, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %68
  %71 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %71, %struct._object** %b, align 8
  %72 = load %struct._object*, %struct._object** %b, align 8
  %ob_type80 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type80, align 8
  %tp_flags81 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 19
  %74 = load i64, i64* %tp_flags81, align 8
  %and82 = and i64 %74, 2147483648
  %cmp83 = icmp ne i64 %and82, 0
  br i1 %cmp83, label %if.then.84, label %if.end.85

if.then.84:                                       ; preds = %for.body
  %75 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %76 = load %struct._object*, %struct._object** %b, align 8
  %77 = bitcast %struct._object* %76 to %struct._typeobject*
  call void @inherit_slots(%struct._typeobject* %75, %struct._typeobject* %77)
  br label %if.end.85

if.end.85:                                        ; preds = %if.then.84, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.85
  %78 = load i64, i64* %i, align 8
  %inc86 = add i64 %78, 1
  store i64 %inc86, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %79 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags87 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 19
  %80 = load i64, i64* %tp_flags87, align 8
  %and88 = and i64 %80, 16384
  %cmp89 = icmp ne i64 %and88, 0
  br i1 %cmp89, label %land.lhs.true.90, label %if.end.100

land.lhs.true.90:                                 ; preds = %for.end
  %81 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags91 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 19
  %82 = load i64, i64* %tp_flags91, align 8
  %and92 = and i64 %82, 1024
  %tobool93 = icmp ne i64 %and92, 0
  br i1 %tobool93, label %land.lhs.true.94, label %if.end.100

land.lhs.true.94:                                 ; preds = %land.lhs.true.90
  %83 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 38
  %84 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %cmp95 = icmp eq void (i8*)* %84, null
  br i1 %cmp95, label %if.then.98, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.94
  %85 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_free96 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 38
  %86 = load void (i8*)*, void (i8*)** %tp_free96, align 8
  %cmp97 = icmp eq void (i8*)* %86, @PyObject_Free
  br i1 %cmp97, label %if.then.98, label %if.end.100

if.then.98:                                       ; preds = %lor.lhs.false, %land.lhs.true.94
  %87 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %88 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 1
  %89 = load i8*, i8** %tp_name, align 8
  %call99 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %87, i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.8, i32 0, i32 0), i8* %89)
  br label %error

if.end.100:                                       ; preds = %lor.lhs.false, %land.lhs.true.90, %for.end
  %90 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 31
  %91 = load %struct._object*, %struct._object** %tp_dict101, align 8
  %call102 = call %struct._object* @_PyDict_GetItemId(%struct._object* %91, %struct._Py_Identifier* @PyId___doc__)
  %cmp103 = icmp eq %struct._object* %call102, null
  br i1 %cmp103, label %if.then.104, label %if.end.143

if.then.104:                                      ; preds = %if.end.100
  %92 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_doc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %92, i32 0, i32 20
  %93 = load i8*, i8** %tp_doc, align 8
  %cmp105 = icmp ne i8* %93, null
  br i1 %cmp105, label %if.then.106, label %if.else.136

if.then.106:                                      ; preds = %if.then.104
  %94 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 1
  %95 = load i8*, i8** %tp_name107, align 8
  %96 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_doc108 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 20
  %97 = load i8*, i8** %tp_doc108, align 8
  %call109 = call i8* @_PyType_DocWithoutSignature(i8* %95, i8* %97)
  store i8* %call109, i8** %old_doc, align 8
  %98 = load i8*, i8** %old_doc, align 8
  %call110 = call %struct._object* @PyUnicode_FromString(i8* %98)
  store %struct._object* %call110, %struct._object** %doc, align 8
  %99 = load %struct._object*, %struct._object** %doc, align 8
  %cmp111 = icmp eq %struct._object* %99, null
  br i1 %cmp111, label %if.then.112, label %if.end.113

if.then.112:                                      ; preds = %if.then.106
  br label %error

if.end.113:                                       ; preds = %if.then.106
  %100 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict114 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 31
  %101 = load %struct._object*, %struct._object** %tp_dict114, align 8
  %102 = load %struct._object*, %struct._object** %doc, align 8
  %call115 = call i32 @_PyDict_SetItemId(%struct._object* %101, %struct._Py_Identifier* @PyId___doc__, %struct._object* %102)
  %cmp116 = icmp slt i32 %call115, 0
  br i1 %cmp116, label %if.then.117, label %if.end.124

if.then.117:                                      ; preds = %if.end.113
  br label %do.body

do.body:                                          ; preds = %if.then.117
  %103 = load %struct._object*, %struct._object** %doc, align 8
  store %struct._object* %103, %struct._object** %_py_decref_tmp, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt118 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0
  %105 = load i64, i64* %ob_refcnt118, align 8
  %dec = add i64 %105, -1
  store i64 %dec, i64* %ob_refcnt118, align 8
  %cmp119 = icmp ne i64 %dec, 0
  br i1 %cmp119, label %if.then.120, label %if.else.121

if.then.120:                                      ; preds = %do.body
  br label %if.end.123

if.else.121:                                      ; preds = %do.body
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type122 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type122, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %108(%struct._object* %109)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.121, %if.then.120
  br label %do.end

do.end:                                           ; preds = %if.end.123
  br label %error

if.end.124:                                       ; preds = %if.end.113
  br label %do.body.125

do.body.125:                                      ; preds = %if.end.124
  %110 = load %struct._object*, %struct._object** %doc, align 8
  store %struct._object* %110, %struct._object** %_py_decref_tmp126, align 8
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp126, align 8
  %ob_refcnt127 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 0
  %112 = load i64, i64* %ob_refcnt127, align 8
  %dec128 = add i64 %112, -1
  store i64 %dec128, i64* %ob_refcnt127, align 8
  %cmp129 = icmp ne i64 %dec128, 0
  br i1 %cmp129, label %if.then.130, label %if.else.131

if.then.130:                                      ; preds = %do.body.125
  br label %if.end.134

if.else.131:                                      ; preds = %do.body.125
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp126, align 8
  %ob_type132 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type132, align 8
  %tp_dealloc133 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 4
  %115 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc133, align 8
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp126, align 8
  call void %115(%struct._object* %116)
  br label %if.end.134

if.end.134:                                       ; preds = %if.else.131, %if.then.130
  br label %do.end.135

do.end.135:                                       ; preds = %if.end.134
  br label %if.end.142

if.else.136:                                      ; preds = %if.then.104
  %117 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict137 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %117, i32 0, i32 31
  %118 = load %struct._object*, %struct._object** %tp_dict137, align 8
  %call138 = call i32 @_PyDict_SetItemId(%struct._object* %118, %struct._Py_Identifier* @PyId___doc__, %struct._object* @_Py_NoneStruct)
  %cmp139 = icmp slt i32 %call138, 0
  br i1 %cmp139, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %if.else.136
  br label %error

if.end.141:                                       ; preds = %if.else.136
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.141, %do.end.135
  br label %if.end.143

if.end.143:                                       ; preds = %if.end.142, %if.end.100
  %119 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_hash = getelementptr inbounds %struct._typeobject, %struct._typeobject* %119, i32 0, i32 13
  %120 = load i64 (%struct._object*)*, i64 (%struct._object*)** %tp_hash, align 8
  %cmp144 = icmp eq i64 (%struct._object*)* %120, null
  br i1 %cmp144, label %if.then.145, label %if.end.157

if.then.145:                                      ; preds = %if.end.143
  %121 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict146 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %121, i32 0, i32 31
  %122 = load %struct._object*, %struct._object** %tp_dict146, align 8
  %call147 = call %struct._object* @_PyDict_GetItemId(%struct._object* %122, %struct._Py_Identifier* @PyId___hash__)
  %cmp148 = icmp eq %struct._object* %call147, null
  br i1 %cmp148, label %if.then.149, label %if.end.156

if.then.149:                                      ; preds = %if.then.145
  %123 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict150 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 31
  %124 = load %struct._object*, %struct._object** %tp_dict150, align 8
  %call151 = call i32 @_PyDict_SetItemId(%struct._object* %124, %struct._Py_Identifier* @PyId___hash__, %struct._object* @_Py_NoneStruct)
  %cmp152 = icmp slt i32 %call151, 0
  br i1 %cmp152, label %if.then.153, label %if.end.154

if.then.153:                                      ; preds = %if.then.149
  br label %error

if.end.154:                                       ; preds = %if.then.149
  %125 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_hash155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %125, i32 0, i32 13
  store i64 (%struct._object*)* @PyObject_HashNotImplemented, i64 (%struct._object*)** %tp_hash155, align 8
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.154, %if.then.145
  br label %if.end.157

if.end.157:                                       ; preds = %if.end.156, %if.end.143
  %126 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base158 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %126, i32 0, i32 30
  %127 = load %struct._typeobject*, %struct._typeobject** %tp_base158, align 8
  store %struct._typeobject* %127, %struct._typeobject** %base, align 8
  %128 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp159 = icmp ne %struct._typeobject* %128, null
  br i1 %cmp159, label %if.then.160, label %if.end.181

if.then.160:                                      ; preds = %if.end.157
  %129 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %129, i32 0, i32 10
  %130 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp161 = icmp eq %struct.PyNumberMethods* %130, null
  br i1 %cmp161, label %if.then.162, label %if.end.165

if.then.162:                                      ; preds = %if.then.160
  %131 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_as_number163 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %131, i32 0, i32 10
  %132 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number163, align 8
  %133 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number164 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %133, i32 0, i32 10
  store %struct.PyNumberMethods* %132, %struct.PyNumberMethods** %tp_as_number164, align 8
  br label %if.end.165

if.end.165:                                       ; preds = %if.then.162, %if.then.160
  %134 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %134, i32 0, i32 11
  %135 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8
  %cmp166 = icmp eq %struct.PySequenceMethods* %135, null
  br i1 %cmp166, label %if.then.167, label %if.end.170

if.then.167:                                      ; preds = %if.end.165
  %136 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_as_sequence168 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %136, i32 0, i32 11
  %137 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence168, align 8
  %138 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence169 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %138, i32 0, i32 11
  store %struct.PySequenceMethods* %137, %struct.PySequenceMethods** %tp_as_sequence169, align 8
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.167, %if.end.165
  %139 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %139, i32 0, i32 12
  %140 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8
  %cmp171 = icmp eq %struct.PyMappingMethods* %140, null
  br i1 %cmp171, label %if.then.172, label %if.end.175

if.then.172:                                      ; preds = %if.end.170
  %141 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_as_mapping173 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %141, i32 0, i32 12
  %142 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping173, align 8
  %143 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping174 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %143, i32 0, i32 12
  store %struct.PyMappingMethods* %142, %struct.PyMappingMethods** %tp_as_mapping174, align 8
  br label %if.end.175

if.end.175:                                       ; preds = %if.then.172, %if.end.170
  %144 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %144, i32 0, i32 18
  %145 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8
  %cmp176 = icmp eq %struct.PyBufferProcs* %145, null
  br i1 %cmp176, label %if.then.177, label %if.end.180

if.then.177:                                      ; preds = %if.end.175
  %146 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_as_buffer178 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %146, i32 0, i32 18
  %147 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer178, align 8
  %148 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_buffer179 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %148, i32 0, i32 18
  store %struct.PyBufferProcs* %147, %struct.PyBufferProcs** %tp_as_buffer179, align 8
  br label %if.end.180

if.end.180:                                       ; preds = %if.then.177, %if.end.175
  br label %if.end.181

if.end.181:                                       ; preds = %if.end.180, %if.end.157
  %149 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases182 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %149, i32 0, i32 40
  %150 = load %struct._object*, %struct._object** %tp_bases182, align 8
  store %struct._object* %150, %struct._object** %bases, align 8
  %151 = load %struct._object*, %struct._object** %bases, align 8
  %152 = bitcast %struct._object* %151 to %struct.PyVarObject*
  %ob_size183 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %152, i32 0, i32 1
  %153 = load i64, i64* %ob_size183, align 8
  store i64 %153, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.184

for.cond.184:                                     ; preds = %for.inc.199, %if.end.181
  %154 = load i64, i64* %i, align 8
  %155 = load i64, i64* %n, align 8
  %cmp185 = icmp slt i64 %154, %155
  br i1 %cmp185, label %for.body.186, label %for.end.201

for.body.186:                                     ; preds = %for.cond.184
  %156 = load i64, i64* %i, align 8
  %157 = load %struct._object*, %struct._object** %bases, align 8
  %158 = bitcast %struct._object* %157 to %struct.PyTupleObject*
  %ob_item188 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %158, i32 0, i32 1
  %arrayidx189 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item188, i32 0, i64 %156
  %159 = load %struct._object*, %struct._object** %arrayidx189, align 8
  store %struct._object* %159, %struct._object** %b187, align 8
  %160 = load %struct._object*, %struct._object** %b187, align 8
  %ob_type190 = getelementptr inbounds %struct._object, %struct._object* %160, i32 0, i32 1
  %161 = load %struct._typeobject*, %struct._typeobject** %ob_type190, align 8
  %tp_flags191 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %161, i32 0, i32 19
  %162 = load i64, i64* %tp_flags191, align 8
  %and192 = and i64 %162, 2147483648
  %cmp193 = icmp ne i64 %and192, 0
  br i1 %cmp193, label %land.lhs.true.194, label %if.end.198

land.lhs.true.194:                                ; preds = %for.body.186
  %163 = load %struct._object*, %struct._object** %b187, align 8
  %164 = bitcast %struct._object* %163 to %struct._typeobject*
  %165 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call195 = call i32 @add_subclass(%struct._typeobject* %164, %struct._typeobject* %165)
  %cmp196 = icmp slt i32 %call195, 0
  br i1 %cmp196, label %if.then.197, label %if.end.198

if.then.197:                                      ; preds = %land.lhs.true.194
  br label %error

if.end.198:                                       ; preds = %land.lhs.true.194, %for.body.186
  br label %for.inc.199

for.inc.199:                                      ; preds = %if.end.198
  %166 = load i64, i64* %i, align 8
  %inc200 = add i64 %166, 1
  store i64 %inc200, i64* %i, align 8
  br label %for.cond.184

for.end.201:                                      ; preds = %for.cond.184
  %167 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_reserved = getelementptr inbounds %struct._typeobject, %struct._typeobject* %167, i32 0, i32 8
  %168 = load i8*, i8** %tp_reserved, align 8
  %tobool202 = icmp ne i8* %168, null
  br i1 %tobool202, label %land.lhs.true.203, label %if.end.208

land.lhs.true.203:                                ; preds = %for.end.201
  %169 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_richcompare = getelementptr inbounds %struct._typeobject, %struct._typeobject* %169, i32 0, i32 23
  %170 = load %struct._object* (%struct._object*, %struct._object*, i32)*, %struct._object* (%struct._object*, %struct._object*, i32)** %tp_richcompare, align 8
  %tobool204 = icmp ne %struct._object* (%struct._object*, %struct._object*, i32)* %170, null
  br i1 %tobool204, label %if.end.208, label %if.then.205

if.then.205:                                      ; preds = %land.lhs.true.203
  %171 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %172 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name206 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %172, i32 0, i32 1
  %173 = load i8*, i8** %tp_name206, align 8
  %call207 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %171, i8* getelementptr inbounds ([118 x i8], [118 x i8]* @.str.9, i32 0, i32 0), i8* %173)
  br label %error

if.end.208:                                       ; preds = %land.lhs.true.203, %for.end.201
  %174 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags209 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %174, i32 0, i32 19
  %175 = load i64, i64* %tp_flags209, align 8
  %and210 = and i64 %175, -8193
  %or211 = or i64 %and210, 4096
  %176 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags212 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %176, i32 0, i32 19
  store i64 %or211, i64* %tp_flags212, align 8
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.205, %if.then.197, %if.then.153, %if.then.140, %do.end, %if.then.112, %if.then.98, %if.then.72, %if.then.67, %if.then.59, %if.then.51, %if.then.44, %if.then.38, %if.then.29, %if.then.11
  %177 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags213 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %177, i32 0, i32 19
  %178 = load i64, i64* %tp_flags213, align 8
  %and214 = and i64 %178, -8193
  store i64 %and214, i64* %tp_flags213, align 8
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %error, %if.end.208, %if.then
  %179 = load i32, i32* %retval
  ret i32 %179
}

declare %struct._dictkeysobject* @_PyDict_NewKeysForClass() #1

declare i32 @_PyDict_SetItemId(%struct._object*, %struct._Py_Identifier*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define %struct._object* @PyType_FromSpec(%struct.PyType_Spec* %spec) #0 {
entry:
  %spec.addr = alloca %struct.PyType_Spec*, align 8
  store %struct.PyType_Spec* %spec, %struct.PyType_Spec** %spec.addr, align 8
  %0 = load %struct.PyType_Spec*, %struct.PyType_Spec** %spec.addr, align 8
  %call = call %struct._object* @PyType_FromSpecWithBases(%struct.PyType_Spec* %0, %struct._object* null)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define i8* @PyType_GetSlot(%struct._typeobject* %type, i32 %slot) #0 {
entry:
  %retval = alloca i8*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %slot.addr = alloca i32, align 4
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i32 %slot, i32* %slot.addr, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  call void @_PyErr_BadInternalCall(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 2682)
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %slot.addr, align 4
  %conv = sext i32 %2 to i64
  %cmp1 = icmp uge i64 %conv, 75
  br i1 %cmp1, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = bitcast %struct._typeobject* %3 to i8*
  %5 = load i32, i32* %slot.addr, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr [75 x i16], [75 x i16]* @slotoffsets, i32 0, i64 %idxprom
  %6 = load i16, i16* %arrayidx, align 2
  %conv5 = sext i16 %6 to i32
  %idx.ext = sext i32 %conv5 to i64
  %add.ptr = getelementptr i8, i8* %4, i64 %idx.ext
  %7 = bitcast i8* %add.ptr to i8**
  %8 = load i8*, i8** %7, align 8
  store i8* %8, i8** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %9 = load i8*, i8** %retval
  ret i8* %9
}

declare void @_PyErr_BadInternalCall(i8*, i32) #1

; Function Attrs: nounwind uwtable
define %struct._object* @_PyType_Lookup(%struct._typeobject* %type, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %mro = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %base = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %h = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyUnicode_Type
  br i1 %cmp, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %name.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %3, i32 0, i32 3
  %4 = bitcast %struct.anon.0* %state to i32*
  %bf.load = load i32, i32* %4, align 4
  %bf.lshr = lshr i32 %bf.load, 7
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true
  %5 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call i32 @_PyUnicode_Ready(%struct._object* %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call, %cond.false ]
  %cmp1 = icmp ne i32 %cond, -1
  br i1 %cmp1, label %land.lhs.true.2, label %if.end.18

land.lhs.true.2:                                  ; preds = %cond.end
  %6 = load %struct._object*, %struct._object** %name.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %7, i32 0, i32 1
  %8 = load i64, i64* %length, align 8
  %cmp3 = icmp sle i64 %8, 100
  br i1 %cmp3, label %land.lhs.true.4, label %if.end.18

land.lhs.true.4:                                  ; preds = %land.lhs.true.2
  %9 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 19
  %10 = load i64, i64* %tp_flags, align 8
  %and = and i64 %10, 524288
  %cmp5 = icmp ne i64 %and, 0
  br i1 %cmp5, label %if.then, label %if.end.18

if.then:                                          ; preds = %land.lhs.true.4
  %11 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_version_tag = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 46
  %12 = load i32, i32* %tp_version_tag, align 4
  %13 = load %struct._object*, %struct._object** %name.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyASCIIObject*
  %hash = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %14, i32 0, i32 2
  %15 = load i64, i64* %hash, align 8
  %conv = trunc i64 %15 to i32
  %mul = mul i32 %12, %conv
  %shr = lshr i32 %mul, 23
  store i32 %shr, i32* %h, align 4
  %16 = load i32, i32* %h, align 4
  %idxprom = zext i32 %16 to i64
  %arrayidx = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %idxprom
  %version = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx, i32 0, i32 0
  %17 = load i32, i32* %version, align 4
  %18 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_version_tag6 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 46
  %19 = load i32, i32* %tp_version_tag6, align 4
  %cmp7 = icmp eq i32 %17, %19
  br i1 %cmp7, label %land.lhs.true.9, label %if.end

land.lhs.true.9:                                  ; preds = %if.then
  %20 = load i32, i32* %h, align 4
  %idxprom10 = zext i32 %20 to i64
  %arrayidx11 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %idxprom10
  %name12 = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx11, i32 0, i32 1
  %21 = load %struct._object*, %struct._object** %name12, align 8
  %22 = load %struct._object*, %struct._object** %name.addr, align 8
  %cmp13 = icmp eq %struct._object* %21, %22
  br i1 %cmp13, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %land.lhs.true.9
  %23 = load i32, i32* %h, align 4
  %idxprom16 = zext i32 %23 to i64
  %arrayidx17 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %idxprom16
  %value = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx17, i32 0, i32 2
  %24 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.9, %if.then
  br label %if.end.18

if.end.18:                                        ; preds = %if.end, %land.lhs.true.4, %land.lhs.true.2, %cond.end, %entry
  %25 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 41
  %26 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %26, %struct._object** %mro, align 8
  %27 = load %struct._object*, %struct._object** %mro, align 8
  %cmp19 = icmp eq %struct._object* %27, null
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.18
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.22:                                        ; preds = %if.end.18
  store %struct._object* null, %struct._object** %res, align 8
  %28 = load %struct._object*, %struct._object** %mro, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %29, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %30 = load %struct._object*, %struct._object** %mro, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %31, i32 0, i32 1
  %32 = load i64, i64* %ob_size, align 8
  store i64 %32, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.22
  %33 = load i64, i64* %i, align 8
  %34 = load i64, i64* %n, align 8
  %cmp23 = icmp slt i64 %33, %34
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load i64, i64* %i, align 8
  %36 = load %struct._object*, %struct._object** %mro, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %37, i32 0, i32 1
  %arrayidx25 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %35
  %38 = load %struct._object*, %struct._object** %arrayidx25, align 8
  store %struct._object* %38, %struct._object** %base, align 8
  %39 = load %struct._object*, %struct._object** %base, align 8
  %40 = bitcast %struct._object* %39 to %struct._typeobject*
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 31
  %41 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %41, %struct._object** %dict, align 8
  %42 = load %struct._object*, %struct._object** %dict, align 8
  %43 = load %struct._object*, %struct._object** %name.addr, align 8
  %call26 = call %struct._object* @PyDict_GetItem(%struct._object* %42, %struct._object* %43)
  store %struct._object* %call26, %struct._object** %res, align 8
  %44 = load %struct._object*, %struct._object** %res, align 8
  %cmp27 = icmp ne %struct._object* %44, null
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %for.body
  br label %for.end

if.end.30:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.30
  %45 = load i64, i64* %i, align 8
  %inc31 = add i64 %45, 1
  store i64 %inc31, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.29, %for.cond
  br label %do.body

do.body:                                          ; preds = %for.end
  %46 = load %struct._object*, %struct._object** %mro, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt32, align 8
  %dec = add i64 %48, -1
  store i64 %dec, i64* %ob_refcnt32, align 8
  %cmp33 = icmp ne i64 %dec, 0
  br i1 %cmp33, label %if.then.35, label %if.else

if.then.35:                                       ; preds = %do.body
  br label %if.end.37

if.else:                                          ; preds = %do.body
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %51(%struct._object* %52)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else, %if.then.35
  br label %do.end

do.end:                                           ; preds = %if.end.37
  %53 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %cmp39 = icmp eq %struct._typeobject* %54, @PyUnicode_Type
  br i1 %cmp39, label %land.lhs.true.41, label %if.end.94

land.lhs.true.41:                                 ; preds = %do.end
  %55 = load %struct._object*, %struct._object** %name.addr, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyASCIIObject*
  %state42 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %56, i32 0, i32 3
  %57 = bitcast %struct.anon.0* %state42 to i32*
  %bf.load43 = load i32, i32* %57, align 4
  %bf.lshr44 = lshr i32 %bf.load43, 7
  %bf.clear45 = and i32 %bf.lshr44, 1
  %tobool46 = icmp ne i32 %bf.clear45, 0
  br i1 %tobool46, label %cond.true.47, label %cond.false.48

cond.true.47:                                     ; preds = %land.lhs.true.41
  br label %cond.end.50

cond.false.48:                                    ; preds = %land.lhs.true.41
  %58 = load %struct._object*, %struct._object** %name.addr, align 8
  %call49 = call i32 @_PyUnicode_Ready(%struct._object* %58)
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.48, %cond.true.47
  %cond51 = phi i32 [ 0, %cond.true.47 ], [ %call49, %cond.false.48 ]
  %cmp52 = icmp ne i32 %cond51, -1
  br i1 %cmp52, label %land.lhs.true.54, label %if.end.94

land.lhs.true.54:                                 ; preds = %cond.end.50
  %59 = load %struct._object*, %struct._object** %name.addr, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyASCIIObject*
  %length55 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %60, i32 0, i32 1
  %61 = load i64, i64* %length55, align 8
  %cmp56 = icmp sle i64 %61, 100
  br i1 %cmp56, label %land.lhs.true.58, label %if.end.94

land.lhs.true.58:                                 ; preds = %land.lhs.true.54
  %62 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call59 = call i32 @assign_version_tag(%struct._typeobject* %62)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.then.61, label %if.end.94

if.then.61:                                       ; preds = %land.lhs.true.58
  %63 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_version_tag62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 46
  %64 = load i32, i32* %tp_version_tag62, align 4
  %65 = load %struct._object*, %struct._object** %name.addr, align 8
  %66 = bitcast %struct._object* %65 to %struct.PyASCIIObject*
  %hash63 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %66, i32 0, i32 2
  %67 = load i64, i64* %hash63, align 8
  %conv64 = trunc i64 %67 to i32
  %mul65 = mul i32 %64, %conv64
  %shr66 = lshr i32 %mul65, 23
  store i32 %shr66, i32* %h, align 4
  %68 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_version_tag67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 46
  %69 = load i32, i32* %tp_version_tag67, align 4
  %70 = load i32, i32* %h, align 4
  %idxprom68 = zext i32 %70 to i64
  %arrayidx69 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %idxprom68
  %version70 = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx69, i32 0, i32 0
  store i32 %69, i32* %version70, align 4
  %71 = load %struct._object*, %struct._object** %res, align 8
  %72 = load i32, i32* %h, align 4
  %idxprom71 = zext i32 %72 to i64
  %arrayidx72 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %idxprom71
  %value73 = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx72, i32 0, i32 2
  store %struct._object* %71, %struct._object** %value73, align 8
  %73 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_refcnt74 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt74, align 8
  %inc75 = add i64 %74, 1
  store i64 %inc75, i64* %ob_refcnt74, align 8
  br label %do.body.76

do.body.76:                                       ; preds = %if.then.61
  %75 = load i32, i32* %h, align 4
  %idxprom78 = zext i32 %75 to i64
  %arrayidx79 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %idxprom78
  %name80 = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx79, i32 0, i32 1
  %76 = load %struct._object*, %struct._object** %name80, align 8
  store %struct._object* %76, %struct._object** %_py_decref_tmp77, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt81 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0
  %78 = load i64, i64* %ob_refcnt81, align 8
  %dec82 = add i64 %78, -1
  store i64 %dec82, i64* %ob_refcnt81, align 8
  %cmp83 = icmp ne i64 %dec82, 0
  br i1 %cmp83, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.76
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.76
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %81(%struct._object* %82)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  %83 = load %struct._object*, %struct._object** %name.addr, align 8
  %84 = load i32, i32* %h, align 4
  %idxprom91 = zext i32 %84 to i64
  %arrayidx92 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %idxprom91
  %name93 = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx92, i32 0, i32 1
  store %struct._object* %83, %struct._object** %name93, align 8
  br label %if.end.94

if.end.94:                                        ; preds = %do.end.90, %land.lhs.true.58, %land.lhs.true.54, %cond.end.50, %do.end
  %85 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %85, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.94, %if.then.21, %if.then.15
  %86 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %86
}

declare i32 @_PyUnicode_Ready(%struct._object*) #1

declare %struct._object* @PyDict_GetItem(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @assign_version_tag(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %bases = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 524288
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags1, align 8
  %and2 = and i64 %3, 262144
  %cmp3 = icmp ne i64 %and2, 0
  br i1 %cmp3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags6 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19
  %5 = load i64, i64* %tp_flags6, align 8
  %and7 = and i64 %5, 4096
  %cmp8 = icmp ne i64 %and7, 0
  br i1 %cmp8, label %if.end.10, label %if.then.9

if.then.9:                                        ; preds = %if.end.5
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  %6 = load i32, i32* @next_version_tag, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* @next_version_tag, align 4
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_version_tag = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 46
  store i32 %6, i32* %tp_version_tag, align 4
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_version_tag11 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 46
  %9 = load i32, i32* %tp_version_tag11, align 4
  %cmp12 = icmp eq i32 %9, 0
  br i1 %cmp12, label %if.then.13, label %if.end.28

if.then.13:                                       ; preds = %if.end.10
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.13
  %10 = load i64, i64* %i, align 8
  %cmp14 = icmp slt i64 %10, 512
  br i1 %cmp14, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %11 = load i64, i64* %i, align 8
  %arrayidx = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %11
  %value = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx, i32 0, i32 2
  store %struct._object* null, %struct._object** %value, align 8
  br label %do.body

do.body:                                          ; preds = %for.body
  %12 = load i64, i64* %i, align 8
  %arrayidx15 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %12
  %name = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx15, i32 0, i32 1
  %13 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %13, %struct._object** %_py_xdecref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp16 = icmp ne %struct._object* %14, null
  br i1 %cmp16, label %if.then.17, label %if.end.22

if.then.17:                                       ; preds = %do.body
  br label %do.body.18

do.body.18:                                       ; preds = %if.then.17
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body.18
  br label %if.end.21

if.else:                                          ; preds = %do.body.18
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.20
  br label %do.end

do.end:                                           ; preds = %if.end.21
  br label %if.end.22

if.end.22:                                        ; preds = %do.end, %do.body
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  %22 = load i64, i64* %i, align 8
  %arrayidx24 = getelementptr [512 x %struct.method_cache_entry], [512 x %struct.method_cache_entry]* @method_cache, i32 0, i64 %22
  %name25 = getelementptr inbounds %struct.method_cache_entry, %struct.method_cache_entry* %arrayidx24, i32 0, i32 1
  store %struct._object* @_Py_NoneStruct, %struct._object** %name25, align 8
  %23 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc26 = add i64 %23, 1
  store i64 %inc26, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  br label %for.inc

for.inc:                                          ; preds = %do.end.23
  %24 = load i64, i64* %i, align 8
  %inc27 = add i64 %24, 1
  store i64 %inc27, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @PyType_Modified(%struct._typeobject* @PyBaseObject_Type)
  store i32 1, i32* %retval
  br label %return

if.end.28:                                        ; preds = %if.end.10
  %25 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 40
  %26 = load %struct._object*, %struct._object** %tp_bases, align 8
  store %struct._object* %26, %struct._object** %bases, align 8
  %27 = load %struct._object*, %struct._object** %bases, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %28, i32 0, i32 1
  %29 = load i64, i64* %ob_size, align 8
  store i64 %29, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.29

for.cond.29:                                      ; preds = %for.inc.35, %if.end.28
  %30 = load i64, i64* %i, align 8
  %31 = load i64, i64* %n, align 8
  %cmp30 = icmp slt i64 %30, %31
  br i1 %cmp30, label %for.body.31, label %for.end.37

for.body.31:                                      ; preds = %for.cond.29
  %32 = load i64, i64* %i, align 8
  %33 = load %struct._object*, %struct._object** %bases, align 8
  %34 = bitcast %struct._object* %33 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %34, i32 0, i32 1
  %arrayidx32 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %32
  %35 = load %struct._object*, %struct._object** %arrayidx32, align 8
  store %struct._object* %35, %struct._object** %b, align 8
  %36 = load %struct._object*, %struct._object** %b, align 8
  %37 = bitcast %struct._object* %36 to %struct._typeobject*
  %call = call i32 @assign_version_tag(%struct._typeobject* %37)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %for.body.31
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %for.body.31
  br label %for.inc.35

for.inc.35:                                       ; preds = %if.end.34
  %38 = load i64, i64* %i, align 8
  %inc36 = add i64 %38, 1
  store i64 %inc36, i64* %i, align 8
  br label %for.cond.29

for.end.37:                                       ; preds = %for.cond.29
  %39 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 19
  %40 = load i64, i64* %tp_flags38, align 8
  %or = or i64 %40, 524288
  store i64 %or, i64* %tp_flags38, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.37, %if.then.33, %for.end, %if.then.9, %if.then.4, %if.then
  %41 = load i32, i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define %struct._object* @_PyType_LookupId(%struct._typeobject* %type, %struct._Py_Identifier* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._Py_Identifier*, align 8
  %oname = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._Py_Identifier* %name, %struct._Py_Identifier** %name.addr, align 8
  %0 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8
  %call = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* %0)
  store %struct._object* %call, %struct._object** %oname, align 8
  %1 = load %struct._object*, %struct._object** %oname, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = load %struct._object*, %struct._object** %oname, align 8
  %call1 = call %struct._object* @_PyType_Lookup(%struct._typeobject* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %4
}

declare %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier*) #1

; Function Attrs: nounwind uwtable
define internal void @type_dealloc(%struct._typeobject* %type) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %et = alloca %struct._heaptypeobject*, align 8
  %tp = alloca %struct._object*, align 8
  %val = alloca %struct._object*, align 8
  %tb = alloca %struct._object*, align 8
  %g = alloca %union._gc_head*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp25 = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %_py_xdecref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  %_py_xdecref_tmp60 = alloca %struct._object*, align 8
  %_py_decref_tmp64 = alloca %struct._object*, align 8
  %_py_xdecref_tmp77 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  %_py_xdecref_tmp94 = alloca %struct._object*, align 8
  %_py_decref_tmp98 = alloca %struct._object*, align 8
  %_py_xdecref_tmp111 = alloca %struct._object*, align 8
  %_py_decref_tmp115 = alloca %struct._object*, align 8
  %_py_xdecref_tmp128 = alloca %struct._object*, align 8
  %_py_decref_tmp132 = alloca %struct._object*, align 8
  %_py_xdecref_tmp145 = alloca %struct._object*, align 8
  %_py_decref_tmp149 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %union._gc_head*
  %add.ptr = getelementptr %union._gc_head, %union._gc_head* %1, i64 -1
  store %union._gc_head* %add.ptr, %union._gc_head** %g, align 8
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %2 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc = bitcast %union._gc_head* %2 to %struct.anon*
  %gc_refs = getelementptr inbounds %struct.anon, %struct.anon* %gc, i32 0, i32 2
  %3 = load i64, i64* %gc_refs, align 8
  %and = and i64 %3, 1
  %or = or i64 %and, -4
  %4 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc2 = bitcast %union._gc_head* %4 to %struct.anon*
  %gc_refs3 = getelementptr inbounds %struct.anon, %struct.anon* %gc2, i32 0, i32 2
  store i64 %or, i64* %gc_refs3, align 8
  br label %do.end

do.end:                                           ; preds = %do.body.1
  %5 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc4 = bitcast %union._gc_head* %5 to %struct.anon*
  %gc_next = getelementptr inbounds %struct.anon, %struct.anon* %gc4, i32 0, i32 0
  %6 = load %union._gc_head*, %union._gc_head** %gc_next, align 8
  %7 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc5 = bitcast %union._gc_head* %7 to %struct.anon*
  %gc_prev = getelementptr inbounds %struct.anon, %struct.anon* %gc5, i32 0, i32 1
  %8 = load %union._gc_head*, %union._gc_head** %gc_prev, align 8
  %gc6 = bitcast %union._gc_head* %8 to %struct.anon*
  %gc_next7 = getelementptr inbounds %struct.anon, %struct.anon* %gc6, i32 0, i32 0
  store %union._gc_head* %6, %union._gc_head** %gc_next7, align 8
  %9 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc8 = bitcast %union._gc_head* %9 to %struct.anon*
  %gc_prev9 = getelementptr inbounds %struct.anon, %struct.anon* %gc8, i32 0, i32 1
  %10 = load %union._gc_head*, %union._gc_head** %gc_prev9, align 8
  %11 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc10 = bitcast %union._gc_head* %11 to %struct.anon*
  %gc_next11 = getelementptr inbounds %struct.anon, %struct.anon* %gc10, i32 0, i32 0
  %12 = load %union._gc_head*, %union._gc_head** %gc_next11, align 8
  %gc12 = bitcast %union._gc_head* %12 to %struct.anon*
  %gc_prev13 = getelementptr inbounds %struct.anon, %struct.anon* %gc12, i32 0, i32 1
  store %union._gc_head* %10, %union._gc_head** %gc_prev13, align 8
  %13 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc14 = bitcast %union._gc_head* %13 to %struct.anon*
  %gc_next15 = getelementptr inbounds %struct.anon, %struct.anon* %gc14, i32 0, i32 0
  store %union._gc_head* null, %union._gc_head** %gc_next15, align 8
  br label %do.end.16

do.end.16:                                        ; preds = %do.end
  call void @PyErr_Fetch(%struct._object** %tp, %struct._object** %val, %struct._object** %tb)
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 40
  %16 = load %struct._object*, %struct._object** %tp_bases, align 8
  call void @remove_all_subclasses(%struct._typeobject* %14, %struct._object* %16)
  %17 = load %struct._object*, %struct._object** %tp, align 8
  %18 = load %struct._object*, %struct._object** %val, align 8
  %19 = load %struct._object*, %struct._object** %tb, align 8
  call void @PyErr_Restore(%struct._object* %17, %struct._object* %18, %struct._object* %19)
  %20 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %21 = bitcast %struct._typeobject* %20 to %struct._object*
  call void @PyObject_ClearWeakRefs(%struct._object* %21)
  %22 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %23 = bitcast %struct._typeobject* %22 to %struct._heaptypeobject*
  store %struct._heaptypeobject* %23, %struct._heaptypeobject** %et, align 8
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %24 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 30
  %25 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %26 = bitcast %struct._typeobject* %25 to %struct._object*
  store %struct._object* %26, %struct._object** %_py_xdecref_tmp, align 8
  %27 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %27, null
  br i1 %cmp, label %if.then, label %if.end.22

if.then:                                          ; preds = %do.body.17
  br label %do.body.18

do.body.18:                                       ; preds = %if.then
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %30, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body.18
  br label %if.end

if.else:                                          ; preds = %do.body.18
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %33(%struct._object* %34)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.20
  br label %do.end.21

do.end.21:                                        ; preds = %if.end
  br label %if.end.22

if.end.22:                                        ; preds = %do.end.21, %do.body.17
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  br label %do.body.24

do.body.24:                                       ; preds = %do.end.23
  %35 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 31
  %36 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %36, %struct._object** %_py_xdecref_tmp25, align 8
  %37 = load %struct._object*, %struct._object** %_py_xdecref_tmp25, align 8
  %cmp26 = icmp ne %struct._object* %37, null
  br i1 %cmp26, label %if.then.27, label %if.end.39

if.then.27:                                       ; preds = %do.body.24
  br label %do.body.28

do.body.28:                                       ; preds = %if.then.27
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp25, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp29, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt30, align 8
  %dec31 = add i64 %40, -1
  store i64 %dec31, i64* %ob_refcnt30, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.28
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.28
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  call void %43(%struct._object* %44)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  br label %if.end.39

if.end.39:                                        ; preds = %do.end.38, %do.body.24
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %do.body.41

do.body.41:                                       ; preds = %do.end.40
  %45 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 40
  %46 = load %struct._object*, %struct._object** %tp_bases43, align 8
  store %struct._object* %46, %struct._object** %_py_xdecref_tmp42, align 8
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp42, align 8
  %cmp44 = icmp ne %struct._object* %47, null
  br i1 %cmp44, label %if.then.45, label %if.end.57

if.then.45:                                       ; preds = %do.body.41
  br label %do.body.46

do.body.46:                                       ; preds = %if.then.45
  %48 = load %struct._object*, %struct._object** %_py_xdecref_tmp42, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp47, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt48, align 8
  %dec49 = add i64 %50, -1
  store i64 %dec49, i64* %ob_refcnt48, align 8
  %cmp50 = icmp ne i64 %dec49, 0
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %do.body.46
  br label %if.end.55

if.else.52:                                       ; preds = %do.body.46
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  call void %53(%struct._object* %54)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %if.end.57

if.end.57:                                        ; preds = %do.end.56, %do.body.41
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %do.body.59

do.body.59:                                       ; preds = %do.end.58
  %55 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 41
  %56 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %56, %struct._object** %_py_xdecref_tmp60, align 8
  %57 = load %struct._object*, %struct._object** %_py_xdecref_tmp60, align 8
  %cmp61 = icmp ne %struct._object* %57, null
  br i1 %cmp61, label %if.then.62, label %if.end.74

if.then.62:                                       ; preds = %do.body.59
  br label %do.body.63

do.body.63:                                       ; preds = %if.then.62
  %58 = load %struct._object*, %struct._object** %_py_xdecref_tmp60, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp64, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  %ob_refcnt65 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt65, align 8
  %dec66 = add i64 %60, -1
  store i64 %dec66, i64* %ob_refcnt65, align 8
  %cmp67 = icmp ne i64 %dec66, 0
  br i1 %cmp67, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %do.body.63
  br label %if.end.72

if.else.69:                                       ; preds = %do.body.63
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8
  %tp_dealloc71 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc71, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  call void %63(%struct._object* %64)
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.68
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  br label %if.end.74

if.end.74:                                        ; preds = %do.end.73, %do.body.59
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  br label %do.body.76

do.body.76:                                       ; preds = %do.end.75
  %65 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_cache = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 42
  %66 = load %struct._object*, %struct._object** %tp_cache, align 8
  store %struct._object* %66, %struct._object** %_py_xdecref_tmp77, align 8
  %67 = load %struct._object*, %struct._object** %_py_xdecref_tmp77, align 8
  %cmp78 = icmp ne %struct._object* %67, null
  br i1 %cmp78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.body.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %68 = load %struct._object*, %struct._object** %_py_xdecref_tmp77, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp81, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %70, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %73(%struct._object* %74)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  br label %if.end.91

if.end.91:                                        ; preds = %do.end.90, %do.body.76
  br label %do.end.92

do.end.92:                                        ; preds = %if.end.91
  br label %do.body.93

do.body.93:                                       ; preds = %do.end.92
  %75 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_subclasses = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 43
  %76 = load %struct._object*, %struct._object** %tp_subclasses, align 8
  store %struct._object* %76, %struct._object** %_py_xdecref_tmp94, align 8
  %77 = load %struct._object*, %struct._object** %_py_xdecref_tmp94, align 8
  %cmp95 = icmp ne %struct._object* %77, null
  br i1 %cmp95, label %if.then.96, label %if.end.108

if.then.96:                                       ; preds = %do.body.93
  br label %do.body.97

do.body.97:                                       ; preds = %if.then.96
  %78 = load %struct._object*, %struct._object** %_py_xdecref_tmp94, align 8
  store %struct._object* %78, %struct._object** %_py_decref_tmp98, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  %ob_refcnt99 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 0
  %80 = load i64, i64* %ob_refcnt99, align 8
  %dec100 = add i64 %80, -1
  store i64 %dec100, i64* %ob_refcnt99, align 8
  %cmp101 = icmp ne i64 %dec100, 0
  br i1 %cmp101, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %do.body.97
  br label %if.end.106

if.else.103:                                      ; preds = %do.body.97
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 1
  %82 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %82, i32 0, i32 4
  %83 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp98, align 8
  call void %83(%struct._object* %84)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  br label %if.end.108

if.end.108:                                       ; preds = %do.end.107, %do.body.93
  br label %do.end.109

do.end.109:                                       ; preds = %if.end.108
  %85 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_doc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 20
  %86 = load i8*, i8** %tp_doc, align 8
  call void @PyObject_Free(i8* %86)
  br label %do.body.110

do.body.110:                                      ; preds = %do.end.109
  %87 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_name = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %87, i32 0, i32 5
  %88 = load %struct._object*, %struct._object** %ht_name, align 8
  store %struct._object* %88, %struct._object** %_py_xdecref_tmp111, align 8
  %89 = load %struct._object*, %struct._object** %_py_xdecref_tmp111, align 8
  %cmp112 = icmp ne %struct._object* %89, null
  br i1 %cmp112, label %if.then.113, label %if.end.125

if.then.113:                                      ; preds = %do.body.110
  br label %do.body.114

do.body.114:                                      ; preds = %if.then.113
  %90 = load %struct._object*, %struct._object** %_py_xdecref_tmp111, align 8
  store %struct._object* %90, %struct._object** %_py_decref_tmp115, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 0
  %92 = load i64, i64* %ob_refcnt116, align 8
  %dec117 = add i64 %92, -1
  store i64 %dec117, i64* %ob_refcnt116, align 8
  %cmp118 = icmp ne i64 %dec117, 0
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %do.body.114
  br label %if.end.123

if.else.120:                                      ; preds = %do.body.114
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_type121 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 1
  %94 = load %struct._typeobject*, %struct._typeobject** %ob_type121, align 8
  %tp_dealloc122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 4
  %95 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc122, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  call void %95(%struct._object* %96)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.120, %if.then.119
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  br label %if.end.125

if.end.125:                                       ; preds = %do.end.124, %do.body.110
  br label %do.end.126

do.end.126:                                       ; preds = %if.end.125
  br label %do.body.127

do.body.127:                                      ; preds = %do.end.126
  %97 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_qualname = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %97, i32 0, i32 7
  %98 = load %struct._object*, %struct._object** %ht_qualname, align 8
  store %struct._object* %98, %struct._object** %_py_xdecref_tmp128, align 8
  %99 = load %struct._object*, %struct._object** %_py_xdecref_tmp128, align 8
  %cmp129 = icmp ne %struct._object* %99, null
  br i1 %cmp129, label %if.then.130, label %if.end.142

if.then.130:                                      ; preds = %do.body.127
  br label %do.body.131

do.body.131:                                      ; preds = %if.then.130
  %100 = load %struct._object*, %struct._object** %_py_xdecref_tmp128, align 8
  store %struct._object* %100, %struct._object** %_py_decref_tmp132, align 8
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  %ob_refcnt133 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 0
  %102 = load i64, i64* %ob_refcnt133, align 8
  %dec134 = add i64 %102, -1
  store i64 %dec134, i64* %ob_refcnt133, align 8
  %cmp135 = icmp ne i64 %dec134, 0
  br i1 %cmp135, label %if.then.136, label %if.else.137

if.then.136:                                      ; preds = %do.body.131
  br label %if.end.140

if.else.137:                                      ; preds = %do.body.131
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  %ob_type138 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 1
  %104 = load %struct._typeobject*, %struct._typeobject** %ob_type138, align 8
  %tp_dealloc139 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %104, i32 0, i32 4
  %105 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc139, align 8
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  call void %105(%struct._object* %106)
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.137, %if.then.136
  br label %do.end.141

do.end.141:                                       ; preds = %if.end.140
  br label %if.end.142

if.end.142:                                       ; preds = %do.end.141, %do.body.127
  br label %do.end.143

do.end.143:                                       ; preds = %if.end.142
  br label %do.body.144

do.body.144:                                      ; preds = %do.end.143
  %107 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_slots = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %107, i32 0, i32 6
  %108 = load %struct._object*, %struct._object** %ht_slots, align 8
  store %struct._object* %108, %struct._object** %_py_xdecref_tmp145, align 8
  %109 = load %struct._object*, %struct._object** %_py_xdecref_tmp145, align 8
  %cmp146 = icmp ne %struct._object* %109, null
  br i1 %cmp146, label %if.then.147, label %if.end.159

if.then.147:                                      ; preds = %do.body.144
  br label %do.body.148

do.body.148:                                      ; preds = %if.then.147
  %110 = load %struct._object*, %struct._object** %_py_xdecref_tmp145, align 8
  store %struct._object* %110, %struct._object** %_py_decref_tmp149, align 8
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  %ob_refcnt150 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 0
  %112 = load i64, i64* %ob_refcnt150, align 8
  %dec151 = add i64 %112, -1
  store i64 %dec151, i64* %ob_refcnt150, align 8
  %cmp152 = icmp ne i64 %dec151, 0
  br i1 %cmp152, label %if.then.153, label %if.else.154

if.then.153:                                      ; preds = %do.body.148
  br label %if.end.157

if.else.154:                                      ; preds = %do.body.148
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  %ob_type155 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type155, align 8
  %tp_dealloc156 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 4
  %115 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc156, align 8
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  call void %115(%struct._object* %116)
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.154, %if.then.153
  br label %do.end.158

do.end.158:                                       ; preds = %if.end.157
  br label %if.end.159

if.end.159:                                       ; preds = %do.end.158, %do.body.144
  br label %do.end.160

do.end.160:                                       ; preds = %if.end.159
  %117 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_cached_keys = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %117, i32 0, i32 8
  %118 = load %struct._dictkeysobject*, %struct._dictkeysobject** %ht_cached_keys, align 8
  %tobool = icmp ne %struct._dictkeysobject* %118, null
  br i1 %tobool, label %if.then.161, label %if.end.163

if.then.161:                                      ; preds = %do.end.160
  %119 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_cached_keys162 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %119, i32 0, i32 8
  %120 = load %struct._dictkeysobject*, %struct._dictkeysobject** %ht_cached_keys162, align 8
  call void @_PyDictKeys_DecRef(%struct._dictkeysobject* %120)
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.161, %do.end.160
  %121 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %122 = bitcast %struct._typeobject* %121 to %struct._object*
  %ob_type164 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type164, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 38
  %124 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %125 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %126 = bitcast %struct._typeobject* %125 to %struct._object*
  %127 = bitcast %struct._object* %126 to i8*
  call void %124(i8* %127)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_repr(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %mod = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %rtn = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %_py_xdecref_tmp37 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @type_module(%struct._typeobject* %0, i8* null)
  store %struct._object* %call, %struct._object** %mod, align 8
  %1 = load %struct._object*, %struct._object** %mod, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @PyErr_Clear()
  br label %if.end.8

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %mod, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.end.7, label %if.then.2

if.then.2:                                        ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %5 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else.5

if.then.4:                                        ; preds = %do.body
  br label %if.end

if.else.5:                                        ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else.5, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  store %struct._object* null, %struct._object** %mod, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %if.else
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %if.then
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call9 = call %struct._object* @type_qualname(%struct._typeobject* %12, i8* null)
  store %struct._object* %call9, %struct._object** %name, align 8
  %13 = load %struct._object*, %struct._object** %name, align 8
  %cmp10 = icmp eq %struct._object* %13, null
  br i1 %cmp10, label %if.then.11, label %if.end.28

if.then.11:                                       ; preds = %if.end.8
  br label %do.body.12

do.body.12:                                       ; preds = %if.then.11
  %14 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %14, %struct._object** %_py_xdecref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp13 = icmp ne %struct._object* %15, null
  br i1 %cmp13, label %if.then.14, label %if.end.26

if.then.14:                                       ; preds = %do.body.12
  br label %do.body.15

do.body.15:                                       ; preds = %if.then.14
  %16 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp16, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %18, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %21(%struct._object* %22)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %do.end.25, %do.body.12
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.8
  %23 = load %struct._object*, %struct._object** %mod, align 8
  %cmp29 = icmp ne %struct._object* %23, null
  br i1 %cmp29, label %land.lhs.true, label %if.else.33

land.lhs.true:                                    ; preds = %if.end.28
  %24 = load %struct._object*, %struct._object** %mod, align 8
  %call30 = call i32 @_PyUnicode_CompareWithId(%struct._object* %24, %struct._Py_Identifier* @PyId_builtins)
  %tobool = icmp ne i32 %call30, 0
  br i1 %tobool, label %if.then.31, label %if.else.33

if.then.31:                                       ; preds = %land.lhs.true
  %25 = load %struct._object*, %struct._object** %mod, align 8
  %26 = load %struct._object*, %struct._object** %name, align 8
  %call32 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0), %struct._object* %25, %struct._object* %26)
  store %struct._object* %call32, %struct._object** %rtn, align 8
  br label %if.end.35

if.else.33:                                       ; preds = %land.lhs.true, %if.end.28
  %27 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 1
  %28 = load i8*, i8** %tp_name, align 8
  %call34 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i32 0, i32 0), i8* %28)
  store %struct._object* %call34, %struct._object** %rtn, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.33, %if.then.31
  br label %do.body.36

do.body.36:                                       ; preds = %if.end.35
  %29 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %29, %struct._object** %_py_xdecref_tmp37, align 8
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp37, align 8
  %cmp38 = icmp ne %struct._object* %30, null
  br i1 %cmp38, label %if.then.39, label %if.end.51

if.then.39:                                       ; preds = %do.body.36
  br label %do.body.40

do.body.40:                                       ; preds = %if.then.39
  %31 = load %struct._object*, %struct._object** %_py_xdecref_tmp37, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp41, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %33, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %36(%struct._object* %37)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %if.end.51

if.end.51:                                        ; preds = %do.end.50, %do.body.36
  br label %do.end.52

do.end.52:                                        ; preds = %if.end.51
  br label %do.body.53

do.body.53:                                       ; preds = %do.end.52
  %38 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp54, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %40, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.58, label %if.else.59

if.then.58:                                       ; preds = %do.body.53
  br label %if.end.62

if.else.59:                                       ; preds = %do.body.53
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8
  %tp_dealloc61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc61, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %43(%struct._object* %44)
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.59, %if.then.58
  br label %do.end.63

do.end.63:                                        ; preds = %if.end.62
  %45 = load %struct._object*, %struct._object** %rtn, align 8
  store %struct._object* %45, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.63, %do.end.27
  %46 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %46
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_call(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 37
  %1 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp = icmp eq %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 1
  %4 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18, i32 0, i32 0), i8* %4)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 37
  %6 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new1, align 8
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %8 = load %struct._object*, %struct._object** %args.addr, align 8
  %9 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call2 = call %struct._object* %6(%struct._typeobject* %7, %struct._object* %8, %struct._object* %9)
  store %struct._object* %call2, %struct._object** %obj, align 8
  %10 = load %struct._object*, %struct._object** %obj, align 8
  %cmp3 = icmp ne %struct._object* %10, null
  br i1 %cmp3, label %if.then.4, label %if.end.37

if.then.4:                                        ; preds = %if.end
  %11 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %cmp5 = icmp eq %struct._typeobject* %11, @PyType_Type
  br i1 %cmp5, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.then.4
  %12 = load %struct._object*, %struct._object** %args.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  %14 = load i64, i64* %tp_flags, align 8
  %and = and i64 %14, 67108864
  %cmp6 = icmp ne i64 %and, 0
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.19

land.lhs.true.7:                                  ; preds = %land.lhs.true
  %15 = load %struct._object*, %struct._object** %args.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1
  %17 = load i64, i64* %ob_size, align 8
  %cmp8 = icmp eq i64 %17, 1
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.19

land.lhs.true.9:                                  ; preds = %land.lhs.true.7
  %18 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %cmp10 = icmp eq %struct._object* %18, null
  br i1 %cmp10, label %if.then.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.9
  %19 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_flags12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 19
  %21 = load i64, i64* %tp_flags12, align 8
  %and13 = and i64 %21, 536870912
  %cmp14 = icmp ne i64 %and13, 0
  br i1 %cmp14, label %land.lhs.true.15, label %if.end.19

land.lhs.true.15:                                 ; preds = %lor.lhs.false
  %22 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call16 = call i64 @PyDict_Size(%struct._object* %22)
  %cmp17 = icmp eq i64 %call16, 0
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true.15, %land.lhs.true.9
  %23 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %land.lhs.true.15, %lor.lhs.false, %land.lhs.true.7, %land.lhs.true, %if.then.4
  %24 = load %struct._object*, %struct._object** %obj, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %26 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call21 = call i32 @PyType_IsSubtype(%struct._typeobject* %25, %struct._typeobject* %26)
  %tobool = icmp ne i32 %call21, 0
  br i1 %tobool, label %if.end.23, label %if.then.22

if.then.22:                                       ; preds = %if.end.19
  %27 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %27, %struct._object** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.19
  %28 = load %struct._object*, %struct._object** %obj, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  store %struct._typeobject* %29, %struct._typeobject** %type.addr, align 8
  %30 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_init = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 35
  %31 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init, align 8
  %cmp25 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %31, null
  br i1 %cmp25, label %if.then.26, label %if.end.36

if.then.26:                                       ; preds = %if.end.23
  %32 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_init27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 35
  %33 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init27, align 8
  %34 = load %struct._object*, %struct._object** %obj, align 8
  %35 = load %struct._object*, %struct._object** %args.addr, align 8
  %36 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call28 = call i32 %33(%struct._object* %34, %struct._object* %35, %struct._object* %36)
  store i32 %call28, i32* %res, align 4
  %37 = load i32, i32* %res, align 4
  %cmp29 = icmp slt i32 %37, 0
  br i1 %cmp29, label %if.then.30, label %if.end.35

if.then.30:                                       ; preds = %if.then.26
  br label %do.body

do.body:                                          ; preds = %if.then.30
  %38 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %40, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp31 = icmp ne i64 %dec, 0
  br i1 %cmp31, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %do.body
  br label %if.end.34

if.else:                                          ; preds = %do.body
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %43(%struct._object* %44)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else, %if.then.32
  br label %do.end

do.end:                                           ; preds = %if.end.34
  store %struct._object* null, %struct._object** %obj, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %do.end, %if.then.26
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.end.23
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.end
  %45 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %45, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.37, %if.then.22, %if.then.18, %if.then
  %46 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %46
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_getattro(%struct._typeobject* %type, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._object*, align 8
  %metatype = alloca %struct._typeobject*, align 8
  %meta_attribute = alloca %struct._object*, align 8
  %attribute = alloca %struct._object*, align 8
  %meta_get = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %local_get = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %2, %struct._typeobject** %metatype, align 8
  %3 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19
  %5 = load i64, i64* %tp_flags, align 8
  %and = and i64 %5, 268435456
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %7 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 1
  %9 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %6, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.19, i32 0, i32 0), i8* %9)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %10 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 31
  %11 = load %struct._object*, %struct._object** %tp_dict, align 8
  %cmp3 = icmp eq %struct._object* %11, null
  br i1 %cmp3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %if.end
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call5 = call i32 @PyType_Ready(%struct._typeobject* %12)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.then.4
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.then.4
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.end
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %meta_get, align 8
  %13 = load %struct._typeobject*, %struct._typeobject** %metatype, align 8
  %14 = load %struct._object*, %struct._object** %name.addr, align 8
  %call10 = call %struct._object* @_PyType_Lookup(%struct._typeobject* %13, %struct._object* %14)
  store %struct._object* %call10, %struct._object** %meta_attribute, align 8
  %15 = load %struct._object*, %struct._object** %meta_attribute, align 8
  %cmp11 = icmp ne %struct._object* %15, null
  br i1 %cmp11, label %if.then.12, label %if.end.20

if.then.12:                                       ; preds = %if.end.9
  %16 = load %struct._object*, %struct._object** %meta_attribute, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 32
  %18 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %18, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %meta_get, align 8
  %19 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %meta_get, align 8
  %cmp14 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %19, null
  br i1 %cmp14, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.then.12
  %20 = load %struct._object*, %struct._object** %meta_attribute, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_descr_set = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 33
  %22 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set, align 8
  %cmp16 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %22, null
  br i1 %cmp16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %land.lhs.true
  %23 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %meta_get, align 8
  %24 = load %struct._object*, %struct._object** %meta_attribute, align 8
  %25 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %26 = bitcast %struct._typeobject* %25 to %struct._object*
  %27 = load %struct._typeobject*, %struct._typeobject** %metatype, align 8
  %28 = bitcast %struct._typeobject* %27 to %struct._object*
  %call18 = call %struct._object* %23(%struct._object* %24, %struct._object* %26, %struct._object* %28)
  store %struct._object* %call18, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %land.lhs.true, %if.then.12
  %29 = load %struct._object*, %struct._object** %meta_attribute, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %30, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.19, %if.end.9
  %31 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %32 = load %struct._object*, %struct._object** %name.addr, align 8
  %call21 = call %struct._object* @_PyType_Lookup(%struct._typeobject* %31, %struct._object* %32)
  store %struct._object* %call21, %struct._object** %attribute, align 8
  %33 = load %struct._object*, %struct._object** %attribute, align 8
  %cmp22 = icmp ne %struct._object* %33, null
  br i1 %cmp22, label %if.then.23, label %if.end.42

if.then.23:                                       ; preds = %if.end.20
  %34 = load %struct._object*, %struct._object** %attribute, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_descr_get25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 32
  %36 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get25, align 8
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %36, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %local_get, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.23
  %37 = load %struct._object*, %struct._object** %meta_attribute, align 8
  store %struct._object* %37, %struct._object** %_py_xdecref_tmp, align 8
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp26 = icmp ne %struct._object* %38, null
  br i1 %cmp26, label %if.then.27, label %if.end.34

if.then.27:                                       ; preds = %do.body
  br label %do.body.28

do.body.28:                                       ; preds = %if.then.27
  %39 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %39, %struct._object** %_py_decref_tmp, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0
  %41 = load i64, i64* %ob_refcnt29, align 8
  %dec = add i64 %41, -1
  store i64 %dec, i64* %ob_refcnt29, align 8
  %cmp30 = icmp ne i64 %dec, 0
  br i1 %cmp30, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %do.body.28
  br label %if.end.33

if.else:                                          ; preds = %do.body.28
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %44(%struct._object* %45)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.then.31
  br label %do.end

do.end:                                           ; preds = %if.end.33
  br label %if.end.34

if.end.34:                                        ; preds = %do.end, %do.body
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  %46 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %local_get, align 8
  %cmp36 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %46, null
  br i1 %cmp36, label %if.then.37, label %if.end.39

if.then.37:                                       ; preds = %do.end.35
  %47 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %local_get, align 8
  %48 = load %struct._object*, %struct._object** %attribute, align 8
  %49 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %50 = bitcast %struct._typeobject* %49 to %struct._object*
  %call38 = call %struct._object* %47(%struct._object* %48, %struct._object* null, %struct._object* %50)
  store %struct._object* %call38, %struct._object** %retval
  br label %return

if.end.39:                                        ; preds = %do.end.35
  %51 = load %struct._object*, %struct._object** %attribute, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt40, align 8
  %inc41 = add i64 %52, 1
  store i64 %inc41, i64* %ob_refcnt40, align 8
  %53 = load %struct._object*, %struct._object** %attribute, align 8
  store %struct._object* %53, %struct._object** %retval
  br label %return

if.end.42:                                        ; preds = %if.end.20
  %54 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %meta_get, align 8
  %cmp43 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %54, null
  br i1 %cmp43, label %if.then.44, label %if.end.57

if.then.44:                                       ; preds = %if.end.42
  %55 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %meta_get, align 8
  %56 = load %struct._object*, %struct._object** %meta_attribute, align 8
  %57 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %58 = bitcast %struct._typeobject* %57 to %struct._object*
  %59 = load %struct._typeobject*, %struct._typeobject** %metatype, align 8
  %60 = bitcast %struct._typeobject* %59 to %struct._object*
  %call45 = call %struct._object* %55(%struct._object* %56, %struct._object* %58, %struct._object* %60)
  store %struct._object* %call45, %struct._object** %res, align 8
  br label %do.body.46

do.body.46:                                       ; preds = %if.then.44
  %61 = load %struct._object*, %struct._object** %meta_attribute, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp47, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt48, align 8
  %dec49 = add i64 %63, -1
  store i64 %dec49, i64* %ob_refcnt48, align 8
  %cmp50 = icmp ne i64 %dec49, 0
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %do.body.46
  br label %if.end.55

if.else.52:                                       ; preds = %do.body.46
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  call void %66(%struct._object* %67)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  %68 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %68, %struct._object** %retval
  br label %return

if.end.57:                                        ; preds = %if.end.42
  %69 = load %struct._object*, %struct._object** %meta_attribute, align 8
  %cmp58 = icmp ne %struct._object* %69, null
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.end.57
  %70 = load %struct._object*, %struct._object** %meta_attribute, align 8
  store %struct._object* %70, %struct._object** %retval
  br label %return

if.end.60:                                        ; preds = %if.end.57
  %71 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %72 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 1
  %73 = load i8*, i8** %tp_name61, align 8
  %74 = load %struct._object*, %struct._object** %name.addr, align 8
  %call62 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %71, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i32 0, i32 0), i8* %73, %struct._object* %74)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.60, %if.then.59, %do.end.56, %if.end.39, %if.then.37, %if.then.17, %if.then.7, %if.then
  %75 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %75
}

; Function Attrs: nounwind uwtable
define internal i32 @type_setattro(%struct._typeobject* %type, %struct._object* %name, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 1
  %4 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.21, i32 0, i32 0), i8* %4)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct._object*
  %7 = load %struct._object*, %struct._object** %name.addr, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call i32 @PyObject_GenericSetAttr(%struct._object* %6, %struct._object* %7, %struct._object* %8)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %9 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %10 = load %struct._object*, %struct._object** %name.addr, align 8
  %call4 = call i32 @update_slot(%struct._typeobject* %9, %struct._object* %10)
  store i32 %call4, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @type_traverse(%struct._typeobject* %type, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %msg = alloca [200 x i8], align 16
  %vret = alloca i32, align 4
  %vret13 = alloca i32, align 4
  %vret24 = alloca i32, align 4
  %vret35 = alloca i32, align 4
  %vret46 = alloca i32, align 4
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [200 x i8], [200 x i8]* %msg, i32 0, i32 0
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.193, i32 0, i32 0), i8* %3) #2
  %arraydecay1 = getelementptr inbounds [200 x i8], [200 x i8]* %msg, i32 0, i32 0
  call void @Py_FatalError(i8* %arraydecay1) #8
  unreachable

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 31
  %5 = load %struct._object*, %struct._object** %tp_dict, align 8
  %tobool2 = icmp ne %struct._object* %5, null
  br i1 %tobool2, label %if.then.3, label %if.end.9

if.then.3:                                        ; preds = %do.body
  %6 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 31
  %8 = load %struct._object*, %struct._object** %tp_dict4, align 8
  %9 = load i8*, i8** %arg.addr, align 8
  %call5 = call i32 %6(%struct._object* %8, i8* %9)
  store i32 %call5, i32* %vret, align 4
  %10 = load i32, i32* %vret, align 4
  %tobool6 = icmp ne i32 %10, 0
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.then.3
  %11 = load i32, i32* %vret, align 4
  store i32 %11, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.then.3
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %do.body.10

do.body.10:                                       ; preds = %do.end
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_cache = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 42
  %13 = load %struct._object*, %struct._object** %tp_cache, align 8
  %tobool11 = icmp ne %struct._object* %13, null
  br i1 %tobool11, label %if.then.12, label %if.end.19

if.then.12:                                       ; preds = %do.body.10
  %14 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_cache14 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 42
  %16 = load %struct._object*, %struct._object** %tp_cache14, align 8
  %17 = load i8*, i8** %arg.addr, align 8
  %call15 = call i32 %14(%struct._object* %16, i8* %17)
  store i32 %call15, i32* %vret13, align 4
  %18 = load i32, i32* %vret13, align 4
  %tobool16 = icmp ne i32 %18, 0
  br i1 %tobool16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.12
  %19 = load i32, i32* %vret13, align 4
  store i32 %19, i32* %retval
  br label %return

if.end.18:                                        ; preds = %if.then.12
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %do.body.10
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %do.body.21

do.body.21:                                       ; preds = %do.end.20
  %20 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 41
  %21 = load %struct._object*, %struct._object** %tp_mro, align 8
  %tobool22 = icmp ne %struct._object* %21, null
  br i1 %tobool22, label %if.then.23, label %if.end.30

if.then.23:                                       ; preds = %do.body.21
  %22 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %23 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 41
  %24 = load %struct._object*, %struct._object** %tp_mro25, align 8
  %25 = load i8*, i8** %arg.addr, align 8
  %call26 = call i32 %22(%struct._object* %24, i8* %25)
  store i32 %call26, i32* %vret24, align 4
  %26 = load i32, i32* %vret24, align 4
  %tobool27 = icmp ne i32 %26, 0
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.23
  %27 = load i32, i32* %vret24, align 4
  store i32 %27, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.then.23
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %do.body.21
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %do.body.32

do.body.32:                                       ; preds = %do.end.31
  %28 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 40
  %29 = load %struct._object*, %struct._object** %tp_bases, align 8
  %tobool33 = icmp ne %struct._object* %29, null
  br i1 %tobool33, label %if.then.34, label %if.end.41

if.then.34:                                       ; preds = %do.body.32
  %30 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %31 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 40
  %32 = load %struct._object*, %struct._object** %tp_bases36, align 8
  %33 = load i8*, i8** %arg.addr, align 8
  %call37 = call i32 %30(%struct._object* %32, i8* %33)
  store i32 %call37, i32* %vret35, align 4
  %34 = load i32, i32* %vret35, align 4
  %tobool38 = icmp ne i32 %34, 0
  br i1 %tobool38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.then.34
  %35 = load i32, i32* %vret35, align 4
  store i32 %35, i32* %retval
  br label %return

if.end.40:                                        ; preds = %if.then.34
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %do.body.32
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  %36 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 30
  %37 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %tobool44 = icmp ne %struct._typeobject* %37, null
  br i1 %tobool44, label %if.then.45, label %if.end.52

if.then.45:                                       ; preds = %do.body.43
  %38 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %39 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 30
  %40 = load %struct._typeobject*, %struct._typeobject** %tp_base47, align 8
  %41 = bitcast %struct._typeobject* %40 to %struct._object*
  %42 = load i8*, i8** %arg.addr, align 8
  %call48 = call i32 %38(%struct._object* %41, i8* %42)
  store i32 %call48, i32* %vret46, align 4
  %43 = load i32, i32* %vret46, align 4
  %tobool49 = icmp ne i32 %43, 0
  br i1 %tobool49, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %if.then.45
  %44 = load i32, i32* %vret46, align 4
  store i32 %44, i32* %retval
  br label %return

if.end.51:                                        ; preds = %if.then.45
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %do.body.43
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.53, %if.then.50, %if.then.39, %if.then.28, %if.then.17, %if.then.7
  %45 = load i32, i32* %retval
  ret i32 %45
}

; Function Attrs: nounwind uwtable
define internal i32 @type_clear(%struct._typeobject* %type) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %cached_keys = alloca %struct._dictkeysobject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @PyType_Modified(%struct._typeobject* %0)
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %2 = bitcast %struct._typeobject* %1 to %struct._heaptypeobject*
  %ht_cached_keys = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %2, i32 0, i32 8
  %3 = load %struct._dictkeysobject*, %struct._dictkeysobject** %ht_cached_keys, align 8
  store %struct._dictkeysobject* %3, %struct._dictkeysobject** %cached_keys, align 8
  %4 = load %struct._dictkeysobject*, %struct._dictkeysobject** %cached_keys, align 8
  %cmp = icmp ne %struct._dictkeysobject* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct._heaptypeobject*
  %ht_cached_keys1 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %6, i32 0, i32 8
  store %struct._dictkeysobject* null, %struct._dictkeysobject** %ht_cached_keys1, align 8
  %7 = load %struct._dictkeysobject*, %struct._dictkeysobject** %cached_keys, align 8
  call void @_PyDictKeys_DecRef(%struct._dictkeysobject* %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 31
  %9 = load %struct._object*, %struct._object** %tp_dict, align 8
  %tobool = icmp ne %struct._object* %9, null
  br i1 %tobool, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %10 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 31
  %11 = load %struct._object*, %struct._object** %tp_dict3, align 8
  call void @PyDict_Clear(%struct._object* %11)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 41
  %13 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %13, %struct._object** %_py_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp5 = icmp ne %struct._object* %14, null
  br i1 %cmp5, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %do.body
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 41
  store %struct._object* null, %struct._object** %tp_mro7, align 8
  br label %do.body.8

do.body.8:                                        ; preds = %if.then.6
  %16 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body.8
  br label %if.end.11

if.else:                                          ; preds = %do.body.8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  br label %if.end.12

if.end.12:                                        ; preds = %do.end, %do.body
  br label %do.end.13

do.end.13:                                        ; preds = %if.end.12
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @type_init(%struct._object* %cls, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %cmp = icmp ne %struct._object* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags, align 8
  %and = and i64 %3, 536870912
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %land.lhs.true.2, label %if.end

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %4 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i64 @PyDict_Size(%struct._object* %4)
  %cmp3 = icmp ne i64 %call, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.2
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.239, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.2, %land.lhs.true, %entry
  %6 = load %struct._object*, %struct._object** %args.addr, align 8
  %cmp4 = icmp ne %struct._object* %6, null
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.16

land.lhs.true.5:                                  ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %args.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %tp_flags7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 19
  %9 = load i64, i64* %tp_flags7, align 8
  %and8 = and i64 %9, 67108864
  %cmp9 = icmp ne i64 %and8, 0
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.16

land.lhs.true.10:                                 ; preds = %land.lhs.true.5
  %10 = load %struct._object*, %struct._object** %args.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %11, i32 0, i32 1
  %12 = load i64, i64* %ob_size, align 8
  %cmp11 = icmp ne i64 %12, 1
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.16

land.lhs.true.12:                                 ; preds = %land.lhs.true.10
  %13 = load %struct._object*, %struct._object** %args.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyVarObject*
  %ob_size13 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1
  %15 = load i64, i64* %ob_size13, align 8
  %cmp14 = icmp ne i64 %15, 3
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %land.lhs.true.12
  %16 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.240, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %land.lhs.true.12, %land.lhs.true.10, %land.lhs.true.5, %if.end
  %17 = load %struct._object*, %struct._object** %args.addr, align 8
  %call17 = call %struct._object* @PyTuple_GetSlice(%struct._object* %17, i64 0, i64 0)
  store %struct._object* %call17, %struct._object** %args.addr, align 8
  %18 = load %struct._object*, %struct._object** %cls.addr, align 8
  %19 = load %struct._object*, %struct._object** %args.addr, align 8
  %call18 = call i32 @object_init(%struct._object* %18, %struct._object* %19, %struct._object* null)
  store i32 %call18, i32* %res, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.16
  %20 = load %struct._object*, %struct._object** %args.addr, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body
  br label %if.end.22

if.else:                                          ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.20
  br label %do.end

do.end:                                           ; preds = %if.end.22
  %27 = load i32, i32* %res, align 4
  store i32 %27, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.15, %if.then
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_new(%struct._typeobject* %metatype, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %metatype.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %bases = alloca %struct._object*, align 8
  %orig_dict = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %qualname = alloca %struct._object*, align 8
  %slots = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %newslots = alloca %struct._object*, align 8
  %type = alloca %struct._typeobject*, align 8
  %base = alloca %struct._typeobject*, align 8
  %tmptype = alloca %struct._typeobject*, align 8
  %winner = alloca %struct._typeobject*, align 8
  %et = alloca %struct._heaptypeobject*, align 8
  %mp = alloca %struct.PyMemberDef*, align 8
  %i = alloca i64, align 8
  %nbases = alloca i64, align 8
  %nslots = alloca i64, align 8
  %slotoffset = alloca i64, align 8
  %add_dict = alloca i64, align 8
  %add_weak = alloca i64, align 8
  %j = alloca i32, align 4
  %may_add_dict = alloca i32, align 4
  %may_add_weak = alloca i32, align 4
  %nargs = alloca i64, align 8
  %nkwds = alloca i64, align 8
  %x = alloca %struct._object*, align 8
  %tmp112 = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp186 = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp210 = alloca %struct._object*, align 8
  %_py_decref_tmp229 = alloca %struct._object*, align 8
  %_py_decref_tmp244 = alloca %struct._object*, align 8
  %doc = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %doc_str = alloca i8*, align 8
  %tp_doc = alloca i8*, align 8
  %_py_decref_tmp441 = alloca %struct._object*, align 8
  %_py_decref_tmp584 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp602 = alloca %struct._object*, align 8
  %_py_xdecref_tmp617 = alloca %struct._object*, align 8
  %_py_decref_tmp623 = alloca %struct._object*, align 8
  %_py_xdecref_tmp638 = alloca %struct._object*, align 8
  %_py_decref_tmp644 = alloca %struct._object*, align 8
  %_py_xdecref_tmp659 = alloca %struct._object*, align 8
  %_py_decref_tmp665 = alloca %struct._object*, align 8
  store %struct._typeobject* %metatype, %struct._typeobject** %metatype.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* null, %struct._object** %bases, align 8
  store %struct._object* null, %struct._object** %dict, align 8
  store %struct._object* null, %struct._object** %slots, align 8
  store %struct._typeobject* null, %struct._typeobject** %type, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %nargs, align 8
  %3 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %4 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i64 @PyDict_Size(%struct._object* %4)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 0, %cond.true ], [ %call, %cond.false ]
  store i64 %cond, i64* %nkwds, align 8
  %5 = load %struct._typeobject*, %struct._typeobject** %metatype.addr, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp19 = icmp eq %struct._typeobject* %7, @PyType_Type
  br i1 %cmp19, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %cond.end
  %8 = load i64, i64* %nargs, align 8
  %cmp20 = icmp eq i64 %8, 1
  br i1 %cmp20, label %land.lhs.true.21, label %if.end

land.lhs.true.21:                                 ; preds = %land.lhs.true
  %9 = load i64, i64* %nkwds, align 8
  %cmp22 = icmp eq i64 %9, 0
  br i1 %cmp22, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.21
  %10 = load %struct._object*, %struct._object** %args.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %11, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %12, %struct._object** %x, align 8
  %13 = load %struct._object*, %struct._object** %x, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %15 = bitcast %struct._typeobject* %14 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %16, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %17 = load %struct._object*, %struct._object** %x, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %19 = bitcast %struct._typeobject* %18 to %struct._object*
  store %struct._object* %19, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.21, %land.lhs.true, %cond.end
  %20 = load i64, i64* %nargs, align 8
  %21 = load i64, i64* %nkwds, align 8
  %add = add i64 %20, %21
  %cmp26 = icmp ne i64 %add, 3
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end
  %22 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.245, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end
  %23 = load %struct._object*, %struct._object** %args.addr, align 8
  %24 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call29 = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %23, %struct._object* %24, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.246, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @type_new.kwlist, i32 0, i32 0), %struct._object** %name, %struct._typeobject* @PyTuple_Type, %struct._object** %bases, %struct._typeobject* @PyDict_Type, %struct._object** %orig_dict)
  %tobool = icmp ne i32 %call29, 0
  br i1 %tobool, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %if.end.28
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.31:                                        ; preds = %if.end.28
  %25 = load %struct._typeobject*, %struct._typeobject** %metatype.addr, align 8
  %26 = load %struct._object*, %struct._object** %bases, align 8
  %call32 = call %struct._typeobject* @_PyType_CalculateMetaclass(%struct._typeobject* %25, %struct._object* %26)
  store %struct._typeobject* %call32, %struct._typeobject** %winner, align 8
  %27 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %cmp33 = icmp eq %struct._typeobject* %27, null
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.31
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.35:                                        ; preds = %if.end.31
  %28 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %29 = load %struct._typeobject*, %struct._typeobject** %metatype.addr, align 8
  %cmp36 = icmp ne %struct._typeobject* %28, %29
  br i1 %cmp36, label %if.then.37, label %if.end.43

if.then.37:                                       ; preds = %if.end.35
  %30 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 37
  %31 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp38 = icmp ne %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %31, @type_new
  br i1 %cmp38, label %if.then.39, label %if.end.42

if.then.39:                                       ; preds = %if.then.37
  %32 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %tp_new40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 37
  %33 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new40, align 8
  %34 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  %35 = load %struct._object*, %struct._object** %args.addr, align 8
  %36 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call41 = call %struct._object* %33(%struct._typeobject* %34, %struct._object* %35, %struct._object* %36)
  store %struct._object* %call41, %struct._object** %retval
  br label %return

if.end.42:                                        ; preds = %if.then.37
  %37 = load %struct._typeobject*, %struct._typeobject** %winner, align 8
  store %struct._typeobject* %37, %struct._typeobject** %metatype.addr, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %if.end.35
  %38 = load %struct._object*, %struct._object** %bases, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyVarObject*
  %ob_size44 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %39, i32 0, i32 1
  %40 = load i64, i64* %ob_size44, align 8
  store i64 %40, i64* %nbases, align 8
  %41 = load i64, i64* %nbases, align 8
  %cmp45 = icmp eq i64 %41, 0
  br i1 %cmp45, label %if.then.46, label %if.else

if.then.46:                                       ; preds = %if.end.43
  %call47 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._typeobject* @PyBaseObject_Type)
  store %struct._object* %call47, %struct._object** %bases, align 8
  %42 = load %struct._object*, %struct._object** %bases, align 8
  %cmp48 = icmp eq %struct._object* %42, null
  br i1 %cmp48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.then.46
  br label %error

if.end.50:                                        ; preds = %if.then.46
  store i64 1, i64* %nbases, align 8
  br label %if.end.53

if.else:                                          ; preds = %if.end.43
  %43 = load %struct._object*, %struct._object** %bases, align 8
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt51, align 8
  %inc52 = add i64 %44, 1
  store i64 %inc52, i64* %ob_refcnt51, align 8
  br label %if.end.53

if.end.53:                                        ; preds = %if.else, %if.end.50
  %45 = load %struct._object*, %struct._object** %bases, align 8
  %call54 = call %struct._typeobject* @best_base(%struct._object* %45)
  store %struct._typeobject* %call54, %struct._typeobject** %base, align 8
  %46 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp55 = icmp eq %struct._typeobject* %46, null
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.53
  br label %error

if.end.57:                                        ; preds = %if.end.53
  %47 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 19
  %48 = load i64, i64* %tp_flags, align 8
  %and = and i64 %48, 1024
  %cmp58 = icmp ne i64 %and, 0
  br i1 %cmp58, label %if.end.61, label %if.then.59

if.then.59:                                       ; preds = %if.end.57
  %49 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %50 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 1
  %51 = load i8*, i8** %tp_name, align 8
  %call60 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %49, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i32 0, i32 0), i8* %51)
  br label %error

if.end.61:                                        ; preds = %if.end.57
  %52 = load %struct._object*, %struct._object** %orig_dict, align 8
  %call62 = call %struct._object* @PyDict_Copy(%struct._object* %52)
  store %struct._object* %call62, %struct._object** %dict, align 8
  %53 = load %struct._object*, %struct._object** %dict, align 8
  %cmp63 = icmp eq %struct._object* %53, null
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.61
  br label %error

if.end.65:                                        ; preds = %if.end.61
  %54 = load %struct._object*, %struct._object** %dict, align 8
  %call66 = call %struct._object* @_PyDict_GetItemId(%struct._object* %54, %struct._Py_Identifier* @type_new.PyId___slots__)
  store %struct._object* %call66, %struct._object** %slots, align 8
  store i64 0, i64* %nslots, align 8
  store i64 0, i64* %add_dict, align 8
  store i64 0, i64* %add_weak, align 8
  %55 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 34
  %56 = load i64, i64* %tp_dictoffset, align 8
  %cmp67 = icmp eq i64 %56, 0
  %conv = zext i1 %cmp67 to i32
  store i32 %conv, i32* %may_add_dict, align 4
  %57 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_weaklistoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 24
  %58 = load i64, i64* %tp_weaklistoffset, align 8
  %cmp68 = icmp eq i64 %58, 0
  br i1 %cmp68, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.65
  %59 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_itemsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 3
  %60 = load i64, i64* %tp_itemsize, align 8
  %cmp70 = icmp eq i64 %60, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.65
  %61 = phi i1 [ false, %if.end.65 ], [ %cmp70, %land.rhs ]
  %land.ext = zext i1 %61 to i32
  store i32 %land.ext, i32* %may_add_weak, align 4
  %62 = load %struct._object*, %struct._object** %slots, align 8
  %cmp72 = icmp eq %struct._object* %62, null
  br i1 %cmp72, label %if.then.74, label %if.else.83

if.then.74:                                       ; preds = %land.end
  %63 = load i32, i32* %may_add_dict, align 4
  %tobool75 = icmp ne i32 %63, 0
  br i1 %tobool75, label %if.then.76, label %if.end.78

if.then.76:                                       ; preds = %if.then.74
  %64 = load i64, i64* %add_dict, align 8
  %inc77 = add i64 %64, 1
  store i64 %inc77, i64* %add_dict, align 8
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.76, %if.then.74
  %65 = load i32, i32* %may_add_weak, align 4
  %tobool79 = icmp ne i32 %65, 0
  br i1 %tobool79, label %if.then.80, label %if.end.82

if.then.80:                                       ; preds = %if.end.78
  %66 = load i64, i64* %add_weak, align 8
  %inc81 = add i64 %66, 1
  store i64 %inc81, i64* %add_weak, align 8
  br label %if.end.82

if.end.82:                                        ; preds = %if.then.80, %if.end.78
  br label %if.end.314

if.else.83:                                       ; preds = %land.end
  %67 = load %struct._object*, %struct._object** %slots, align 8
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8
  %tp_flags85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 19
  %69 = load i64, i64* %tp_flags85, align 8
  %and86 = and i64 %69, 268435456
  %cmp87 = icmp ne i64 %and86, 0
  br i1 %cmp87, label %if.then.89, label %if.else.91

if.then.89:                                       ; preds = %if.else.83
  %70 = load %struct._object*, %struct._object** %slots, align 8
  %call90 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %70)
  store %struct._object* %call90, %struct._object** %slots, align 8
  br label %if.end.93

if.else.91:                                       ; preds = %if.else.83
  %71 = load %struct._object*, %struct._object** %slots, align 8
  %call92 = call %struct._object* @PySequence_Tuple(%struct._object* %71)
  store %struct._object* %call92, %struct._object** %slots, align 8
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.91, %if.then.89
  %72 = load %struct._object*, %struct._object** %slots, align 8
  %cmp94 = icmp eq %struct._object* %72, null
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %if.end.93
  br label %error

if.end.97:                                        ; preds = %if.end.93
  %73 = load %struct._object*, %struct._object** %slots, align 8
  %74 = bitcast %struct._object* %73 to %struct.PyVarObject*
  %ob_size98 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %74, i32 0, i32 1
  %75 = load i64, i64* %ob_size98, align 8
  store i64 %75, i64* %nslots, align 8
  %76 = load i64, i64* %nslots, align 8
  %cmp99 = icmp sgt i64 %76, 0
  br i1 %cmp99, label %land.lhs.true.101, label %if.end.108

land.lhs.true.101:                                ; preds = %if.end.97
  %77 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_itemsize102 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 3
  %78 = load i64, i64* %tp_itemsize102, align 8
  %cmp103 = icmp ne i64 %78, 0
  br i1 %cmp103, label %if.then.105, label %if.end.108

if.then.105:                                      ; preds = %land.lhs.true.101
  %79 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %80 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_name106 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 1
  %81 = load i8*, i8** %tp_name106, align 8
  %call107 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %79, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.247, i32 0, i32 0), i8* %81)
  br label %error

if.end.108:                                       ; preds = %land.lhs.true.101, %if.end.97
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.108
  %82 = load i64, i64* %i, align 8
  %83 = load i64, i64* %nslots, align 8
  %cmp109 = icmp slt i64 %82, %83
  br i1 %cmp109, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %84 = load i64, i64* %i, align 8
  %85 = load %struct._object*, %struct._object** %slots, align 8
  %86 = bitcast %struct._object* %85 to %struct.PyTupleObject*
  %ob_item113 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %86, i32 0, i32 1
  %arrayidx114 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item113, i32 0, i64 %84
  %87 = load %struct._object*, %struct._object** %arrayidx114, align 8
  store %struct._object* %87, %struct._object** %tmp112, align 8
  %88 = load %struct._object*, %struct._object** %tmp112, align 8
  %call115 = call i32 @valid_identifier(%struct._object* %88)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.end.118, label %if.then.117

if.then.117:                                      ; preds = %for.body
  br label %error

if.end.118:                                       ; preds = %for.body
  %89 = load %struct._object*, %struct._object** %tmp112, align 8
  %call119 = call i32 @_PyUnicode_CompareWithId(%struct._object* %89, %struct._Py_Identifier* @PyId___dict__)
  %cmp120 = icmp eq i32 %call119, 0
  br i1 %cmp120, label %if.then.122, label %if.end.128

if.then.122:                                      ; preds = %if.end.118
  %90 = load i32, i32* %may_add_dict, align 4
  %tobool123 = icmp ne i32 %90, 0
  br i1 %tobool123, label %lor.lhs.false, label %if.then.125

lor.lhs.false:                                    ; preds = %if.then.122
  %91 = load i64, i64* %add_dict, align 8
  %tobool124 = icmp ne i64 %91, 0
  br i1 %tobool124, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %lor.lhs.false, %if.then.122
  %92 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %92, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.248, i32 0, i32 0))
  br label %error

if.end.126:                                       ; preds = %lor.lhs.false
  %93 = load i64, i64* %add_dict, align 8
  %inc127 = add i64 %93, 1
  store i64 %inc127, i64* %add_dict, align 8
  br label %if.end.128

if.end.128:                                       ; preds = %if.end.126, %if.end.118
  %94 = load %struct._object*, %struct._object** %tmp112, align 8
  %call129 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %94, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249, i32 0, i32 0))
  %cmp130 = icmp eq i32 %call129, 0
  br i1 %cmp130, label %if.then.132, label %if.end.139

if.then.132:                                      ; preds = %if.end.128
  %95 = load i32, i32* %may_add_weak, align 4
  %tobool133 = icmp ne i32 %95, 0
  br i1 %tobool133, label %lor.lhs.false.134, label %if.then.136

lor.lhs.false.134:                                ; preds = %if.then.132
  %96 = load i64, i64* %add_weak, align 8
  %tobool135 = icmp ne i64 %96, 0
  br i1 %tobool135, label %if.then.136, label %if.end.137

if.then.136:                                      ; preds = %lor.lhs.false.134, %if.then.132
  %97 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %97, i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.250, i32 0, i32 0))
  br label %error

if.end.137:                                       ; preds = %lor.lhs.false.134
  %98 = load i64, i64* %add_weak, align 8
  %inc138 = add i64 %98, 1
  store i64 %inc138, i64* %add_weak, align 8
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.137, %if.end.128
  br label %for.inc

for.inc:                                          ; preds = %if.end.139
  %99 = load i64, i64* %i, align 8
  %inc140 = add i64 %99, 1
  store i64 %inc140, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %100 = load i64, i64* %nslots, align 8
  %101 = load i64, i64* %add_dict, align 8
  %sub = sub i64 %100, %101
  %102 = load i64, i64* %add_weak, align 8
  %sub141 = sub i64 %sub, %102
  %call142 = call %struct._object* @PyList_New(i64 %sub141)
  store %struct._object* %call142, %struct._object** %newslots, align 8
  %103 = load %struct._object*, %struct._object** %newslots, align 8
  %cmp143 = icmp eq %struct._object* %103, null
  br i1 %cmp143, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %for.end
  br label %error

if.end.146:                                       ; preds = %for.end
  store i32 0, i32* %j, align 4
  store i64 0, i64* %i, align 8
  br label %for.cond.147

for.cond.147:                                     ; preds = %for.inc.199, %if.end.146
  %104 = load i64, i64* %i, align 8
  %105 = load i64, i64* %nslots, align 8
  %cmp148 = icmp slt i64 %104, %105
  br i1 %cmp148, label %for.body.150, label %for.end.201

for.body.150:                                     ; preds = %for.cond.147
  %106 = load i64, i64* %i, align 8
  %107 = load %struct._object*, %struct._object** %slots, align 8
  %108 = bitcast %struct._object* %107 to %struct.PyTupleObject*
  %ob_item151 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %108, i32 0, i32 1
  %arrayidx152 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item151, i32 0, i64 %106
  %109 = load %struct._object*, %struct._object** %arrayidx152, align 8
  store %struct._object* %109, %struct._object** %tmp, align 8
  %110 = load i64, i64* %add_dict, align 8
  %tobool153 = icmp ne i64 %110, 0
  br i1 %tobool153, label %land.lhs.true.154, label %lor.lhs.false.158

land.lhs.true.154:                                ; preds = %for.body.150
  %111 = load %struct._object*, %struct._object** %tmp, align 8
  %call155 = call i32 @_PyUnicode_CompareWithId(%struct._object* %111, %struct._Py_Identifier* @PyId___dict__)
  %cmp156 = icmp eq i32 %call155, 0
  br i1 %cmp156, label %if.then.164, label %lor.lhs.false.158

lor.lhs.false.158:                                ; preds = %land.lhs.true.154, %for.body.150
  %112 = load i64, i64* %add_weak, align 8
  %tobool159 = icmp ne i64 %112, 0
  br i1 %tobool159, label %land.lhs.true.160, label %if.end.165

land.lhs.true.160:                                ; preds = %lor.lhs.false.158
  %113 = load %struct._object*, %struct._object** %tmp, align 8
  %call161 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %113, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.249, i32 0, i32 0))
  %cmp162 = icmp eq i32 %call161, 0
  br i1 %cmp162, label %if.then.164, label %if.end.165

if.then.164:                                      ; preds = %land.lhs.true.160, %land.lhs.true.154
  br label %for.inc.199

if.end.165:                                       ; preds = %land.lhs.true.160, %lor.lhs.false.158
  %114 = load %struct._object*, %struct._object** %name, align 8
  %115 = load %struct._object*, %struct._object** %tmp, align 8
  %call166 = call %struct._object* @_Py_Mangle(%struct._object* %114, %struct._object* %115)
  store %struct._object* %call166, %struct._object** %tmp, align 8
  %116 = load %struct._object*, %struct._object** %tmp, align 8
  %tobool167 = icmp ne %struct._object* %116, null
  br i1 %tobool167, label %if.end.177, label %if.then.168

if.then.168:                                      ; preds = %if.end.165
  br label %do.body

do.body:                                          ; preds = %if.then.168
  %117 = load %struct._object*, %struct._object** %newslots, align 8
  store %struct._object* %117, %struct._object** %_py_decref_tmp, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt170 = getelementptr inbounds %struct._object, %struct._object* %118, i32 0, i32 0
  %119 = load i64, i64* %ob_refcnt170, align 8
  %dec = add i64 %119, -1
  store i64 %dec, i64* %ob_refcnt170, align 8
  %cmp171 = icmp ne i64 %dec, 0
  br i1 %cmp171, label %if.then.173, label %if.else.174

if.then.173:                                      ; preds = %do.body
  br label %if.end.176

if.else.174:                                      ; preds = %do.body
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type175 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 1
  %121 = load %struct._typeobject*, %struct._typeobject** %ob_type175, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %121, i32 0, i32 4
  %122 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %122(%struct._object* %123)
  br label %if.end.176

if.end.176:                                       ; preds = %if.else.174, %if.then.173
  br label %do.end

do.end:                                           ; preds = %if.end.176
  br label %error

if.end.177:                                       ; preds = %if.end.165
  %124 = load %struct._object*, %struct._object** %tmp, align 8
  %125 = load i32, i32* %j, align 4
  %idxprom = sext i32 %125 to i64
  %126 = load %struct._object*, %struct._object** %newslots, align 8
  %127 = bitcast %struct._object* %126 to %struct.PyListObject*
  %ob_item178 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %127, i32 0, i32 1
  %128 = load %struct._object**, %struct._object*** %ob_item178, align 8
  %arrayidx179 = getelementptr %struct._object*, %struct._object** %128, i64 %idxprom
  store %struct._object* %124, %struct._object** %arrayidx179, align 8
  %129 = load %struct._object*, %struct._object** %dict, align 8
  %130 = load %struct._object*, %struct._object** %tmp, align 8
  %call180 = call %struct._object* @PyDict_GetItem(%struct._object* %129, %struct._object* %130)
  %tobool181 = icmp ne %struct._object* %call180, null
  br i1 %tobool181, label %if.then.182, label %if.end.197

if.then.182:                                      ; preds = %if.end.177
  %131 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %132 = load %struct._object*, %struct._object** %tmp, align 8
  %call183 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %131, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.251, i32 0, i32 0), %struct._object* %132)
  br label %do.body.184

do.body.184:                                      ; preds = %if.then.182
  %133 = load %struct._object*, %struct._object** %newslots, align 8
  store %struct._object* %133, %struct._object** %_py_decref_tmp186, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  %ob_refcnt187 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 0
  %135 = load i64, i64* %ob_refcnt187, align 8
  %dec188 = add i64 %135, -1
  store i64 %dec188, i64* %ob_refcnt187, align 8
  %cmp189 = icmp ne i64 %dec188, 0
  br i1 %cmp189, label %if.then.191, label %if.else.192

if.then.191:                                      ; preds = %do.body.184
  br label %if.end.195

if.else.192:                                      ; preds = %do.body.184
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  %ob_type193 = getelementptr inbounds %struct._object, %struct._object* %136, i32 0, i32 1
  %137 = load %struct._typeobject*, %struct._typeobject** %ob_type193, align 8
  %tp_dealloc194 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %137, i32 0, i32 4
  %138 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc194, align 8
  %139 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  call void %138(%struct._object* %139)
  br label %if.end.195

if.end.195:                                       ; preds = %if.else.192, %if.then.191
  br label %do.end.196

do.end.196:                                       ; preds = %if.end.195
  br label %error

if.end.197:                                       ; preds = %if.end.177
  %140 = load i32, i32* %j, align 4
  %inc198 = add i32 %140, 1
  store i32 %inc198, i32* %j, align 4
  br label %for.inc.199

for.inc.199:                                      ; preds = %if.end.197, %if.then.164
  %141 = load i64, i64* %i, align 8
  %inc200 = add i64 %141, 1
  store i64 %inc200, i64* %i, align 8
  br label %for.cond.147

for.end.201:                                      ; preds = %for.cond.147
  %142 = load i32, i32* %j, align 4
  %conv202 = sext i32 %142 to i64
  store i64 %conv202, i64* %nslots, align 8
  br label %do.body.203

do.body.203:                                      ; preds = %for.end.201
  %143 = load %struct._object*, %struct._object** %slots, align 8
  store %struct._object* %143, %struct._object** %_py_tmp, align 8
  %144 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp205 = icmp ne %struct._object* %144, null
  br i1 %cmp205, label %if.then.207, label %if.end.221

if.then.207:                                      ; preds = %do.body.203
  store %struct._object* null, %struct._object** %slots, align 8
  br label %do.body.208

do.body.208:                                      ; preds = %if.then.207
  %145 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %145, %struct._object** %_py_decref_tmp210, align 8
  %146 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  %ob_refcnt211 = getelementptr inbounds %struct._object, %struct._object* %146, i32 0, i32 0
  %147 = load i64, i64* %ob_refcnt211, align 8
  %dec212 = add i64 %147, -1
  store i64 %dec212, i64* %ob_refcnt211, align 8
  %cmp213 = icmp ne i64 %dec212, 0
  br i1 %cmp213, label %if.then.215, label %if.else.216

if.then.215:                                      ; preds = %do.body.208
  br label %if.end.219

if.else.216:                                      ; preds = %do.body.208
  %148 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  %ob_type217 = getelementptr inbounds %struct._object, %struct._object* %148, i32 0, i32 1
  %149 = load %struct._typeobject*, %struct._typeobject** %ob_type217, align 8
  %tp_dealloc218 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %149, i32 0, i32 4
  %150 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc218, align 8
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  call void %150(%struct._object* %151)
  br label %if.end.219

if.end.219:                                       ; preds = %if.else.216, %if.then.215
  br label %do.end.220

do.end.220:                                       ; preds = %if.end.219
  br label %if.end.221

if.end.221:                                       ; preds = %do.end.220, %do.body.203
  br label %do.end.222

do.end.222:                                       ; preds = %if.end.221
  %152 = load %struct._object*, %struct._object** %newslots, align 8
  %call223 = call i32 @PyList_Sort(%struct._object* %152)
  %cmp224 = icmp eq i32 %call223, -1
  br i1 %cmp224, label %if.then.226, label %if.end.240

if.then.226:                                      ; preds = %do.end.222
  br label %do.body.227

do.body.227:                                      ; preds = %if.then.226
  %153 = load %struct._object*, %struct._object** %newslots, align 8
  store %struct._object* %153, %struct._object** %_py_decref_tmp229, align 8
  %154 = load %struct._object*, %struct._object** %_py_decref_tmp229, align 8
  %ob_refcnt230 = getelementptr inbounds %struct._object, %struct._object* %154, i32 0, i32 0
  %155 = load i64, i64* %ob_refcnt230, align 8
  %dec231 = add i64 %155, -1
  store i64 %dec231, i64* %ob_refcnt230, align 8
  %cmp232 = icmp ne i64 %dec231, 0
  br i1 %cmp232, label %if.then.234, label %if.else.235

if.then.234:                                      ; preds = %do.body.227
  br label %if.end.238

if.else.235:                                      ; preds = %do.body.227
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp229, align 8
  %ob_type236 = getelementptr inbounds %struct._object, %struct._object* %156, i32 0, i32 1
  %157 = load %struct._typeobject*, %struct._typeobject** %ob_type236, align 8
  %tp_dealloc237 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %157, i32 0, i32 4
  %158 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc237, align 8
  %159 = load %struct._object*, %struct._object** %_py_decref_tmp229, align 8
  call void %158(%struct._object* %159)
  br label %if.end.238

if.end.238:                                       ; preds = %if.else.235, %if.then.234
  br label %do.end.239

do.end.239:                                       ; preds = %if.end.238
  br label %error

if.end.240:                                       ; preds = %do.end.222
  %160 = load %struct._object*, %struct._object** %newslots, align 8
  %call241 = call %struct._object* @PyList_AsTuple(%struct._object* %160)
  store %struct._object* %call241, %struct._object** %slots, align 8
  br label %do.body.242

do.body.242:                                      ; preds = %if.end.240
  %161 = load %struct._object*, %struct._object** %newslots, align 8
  store %struct._object* %161, %struct._object** %_py_decref_tmp244, align 8
  %162 = load %struct._object*, %struct._object** %_py_decref_tmp244, align 8
  %ob_refcnt245 = getelementptr inbounds %struct._object, %struct._object* %162, i32 0, i32 0
  %163 = load i64, i64* %ob_refcnt245, align 8
  %dec246 = add i64 %163, -1
  store i64 %dec246, i64* %ob_refcnt245, align 8
  %cmp247 = icmp ne i64 %dec246, 0
  br i1 %cmp247, label %if.then.249, label %if.else.250

if.then.249:                                      ; preds = %do.body.242
  br label %if.end.253

if.else.250:                                      ; preds = %do.body.242
  %164 = load %struct._object*, %struct._object** %_py_decref_tmp244, align 8
  %ob_type251 = getelementptr inbounds %struct._object, %struct._object* %164, i32 0, i32 1
  %165 = load %struct._typeobject*, %struct._typeobject** %ob_type251, align 8
  %tp_dealloc252 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %165, i32 0, i32 4
  %166 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc252, align 8
  %167 = load %struct._object*, %struct._object** %_py_decref_tmp244, align 8
  call void %166(%struct._object* %167)
  br label %if.end.253

if.end.253:                                       ; preds = %if.else.250, %if.then.249
  br label %do.end.254

do.end.254:                                       ; preds = %if.end.253
  %168 = load %struct._object*, %struct._object** %slots, align 8
  %cmp255 = icmp eq %struct._object* %168, null
  br i1 %cmp255, label %if.then.257, label %if.end.258

if.then.257:                                      ; preds = %do.end.254
  br label %error

if.end.258:                                       ; preds = %do.end.254
  %169 = load i64, i64* %nbases, align 8
  %cmp259 = icmp sgt i64 %169, 1
  br i1 %cmp259, label %land.lhs.true.261, label %if.end.313

land.lhs.true.261:                                ; preds = %if.end.258
  %170 = load i32, i32* %may_add_dict, align 4
  %tobool262 = icmp ne i32 %170, 0
  br i1 %tobool262, label %land.lhs.true.263, label %lor.lhs.false.265

land.lhs.true.263:                                ; preds = %land.lhs.true.261
  %171 = load i64, i64* %add_dict, align 8
  %tobool264 = icmp ne i64 %171, 0
  br i1 %tobool264, label %lor.lhs.false.265, label %if.then.269

lor.lhs.false.265:                                ; preds = %land.lhs.true.263, %land.lhs.true.261
  %172 = load i32, i32* %may_add_weak, align 4
  %tobool266 = icmp ne i32 %172, 0
  br i1 %tobool266, label %land.lhs.true.267, label %if.end.313

land.lhs.true.267:                                ; preds = %lor.lhs.false.265
  %173 = load i64, i64* %add_weak, align 8
  %tobool268 = icmp ne i64 %173, 0
  br i1 %tobool268, label %if.end.313, label %if.then.269

if.then.269:                                      ; preds = %land.lhs.true.267, %land.lhs.true.263
  store i64 0, i64* %i, align 8
  br label %for.cond.270

for.cond.270:                                     ; preds = %for.inc.310, %if.then.269
  %174 = load i64, i64* %i, align 8
  %175 = load i64, i64* %nbases, align 8
  %cmp271 = icmp slt i64 %174, %175
  br i1 %cmp271, label %for.body.273, label %for.end.312

for.body.273:                                     ; preds = %for.cond.270
  %176 = load i64, i64* %i, align 8
  %177 = load %struct._object*, %struct._object** %bases, align 8
  %178 = bitcast %struct._object* %177 to %struct.PyTupleObject*
  %ob_item274 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %178, i32 0, i32 1
  %arrayidx275 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item274, i32 0, i64 %176
  %179 = load %struct._object*, %struct._object** %arrayidx275, align 8
  store %struct._object* %179, %struct._object** %tmp, align 8
  %180 = load %struct._object*, %struct._object** %tmp, align 8
  %181 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %182 = bitcast %struct._typeobject* %181 to %struct._object*
  %cmp276 = icmp eq %struct._object* %180, %182
  br i1 %cmp276, label %if.then.278, label %if.end.279

if.then.278:                                      ; preds = %for.body.273
  br label %for.inc.310

if.end.279:                                       ; preds = %for.body.273
  %183 = load %struct._object*, %struct._object** %tmp, align 8
  %184 = bitcast %struct._object* %183 to %struct._typeobject*
  store %struct._typeobject* %184, %struct._typeobject** %tmptype, align 8
  %185 = load i32, i32* %may_add_dict, align 4
  %tobool280 = icmp ne i32 %185, 0
  br i1 %tobool280, label %land.lhs.true.281, label %if.end.289

land.lhs.true.281:                                ; preds = %if.end.279
  %186 = load i64, i64* %add_dict, align 8
  %tobool282 = icmp ne i64 %186, 0
  br i1 %tobool282, label %if.end.289, label %land.lhs.true.283

land.lhs.true.283:                                ; preds = %land.lhs.true.281
  %187 = load %struct._typeobject*, %struct._typeobject** %tmptype, align 8
  %tp_dictoffset284 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %187, i32 0, i32 34
  %188 = load i64, i64* %tp_dictoffset284, align 8
  %cmp285 = icmp ne i64 %188, 0
  br i1 %cmp285, label %if.then.287, label %if.end.289

if.then.287:                                      ; preds = %land.lhs.true.283
  %189 = load i64, i64* %add_dict, align 8
  %inc288 = add i64 %189, 1
  store i64 %inc288, i64* %add_dict, align 8
  br label %if.end.289

if.end.289:                                       ; preds = %if.then.287, %land.lhs.true.283, %land.lhs.true.281, %if.end.279
  %190 = load i32, i32* %may_add_weak, align 4
  %tobool290 = icmp ne i32 %190, 0
  br i1 %tobool290, label %land.lhs.true.291, label %if.end.299

land.lhs.true.291:                                ; preds = %if.end.289
  %191 = load i64, i64* %add_weak, align 8
  %tobool292 = icmp ne i64 %191, 0
  br i1 %tobool292, label %if.end.299, label %land.lhs.true.293

land.lhs.true.293:                                ; preds = %land.lhs.true.291
  %192 = load %struct._typeobject*, %struct._typeobject** %tmptype, align 8
  %tp_weaklistoffset294 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %192, i32 0, i32 24
  %193 = load i64, i64* %tp_weaklistoffset294, align 8
  %cmp295 = icmp ne i64 %193, 0
  br i1 %cmp295, label %if.then.297, label %if.end.299

if.then.297:                                      ; preds = %land.lhs.true.293
  %194 = load i64, i64* %add_weak, align 8
  %inc298 = add i64 %194, 1
  store i64 %inc298, i64* %add_weak, align 8
  br label %if.end.299

if.end.299:                                       ; preds = %if.then.297, %land.lhs.true.293, %land.lhs.true.291, %if.end.289
  %195 = load i32, i32* %may_add_dict, align 4
  %tobool300 = icmp ne i32 %195, 0
  br i1 %tobool300, label %land.lhs.true.301, label %if.end.304

land.lhs.true.301:                                ; preds = %if.end.299
  %196 = load i64, i64* %add_dict, align 8
  %tobool302 = icmp ne i64 %196, 0
  br i1 %tobool302, label %if.end.304, label %if.then.303

if.then.303:                                      ; preds = %land.lhs.true.301
  br label %for.inc.310

if.end.304:                                       ; preds = %land.lhs.true.301, %if.end.299
  %197 = load i32, i32* %may_add_weak, align 4
  %tobool305 = icmp ne i32 %197, 0
  br i1 %tobool305, label %land.lhs.true.306, label %if.end.309

land.lhs.true.306:                                ; preds = %if.end.304
  %198 = load i64, i64* %add_weak, align 8
  %tobool307 = icmp ne i64 %198, 0
  br i1 %tobool307, label %if.end.309, label %if.then.308

if.then.308:                                      ; preds = %land.lhs.true.306
  br label %for.inc.310

if.end.309:                                       ; preds = %land.lhs.true.306, %if.end.304
  br label %for.end.312

for.inc.310:                                      ; preds = %if.then.308, %if.then.303, %if.then.278
  %199 = load i64, i64* %i, align 8
  %inc311 = add i64 %199, 1
  store i64 %inc311, i64* %i, align 8
  br label %for.cond.270

for.end.312:                                      ; preds = %if.end.309, %for.cond.270
  br label %if.end.313

if.end.313:                                       ; preds = %for.end.312, %land.lhs.true.267, %lor.lhs.false.265, %if.end.258
  br label %if.end.314

if.end.314:                                       ; preds = %if.end.313, %if.end.82
  %200 = load %struct._typeobject*, %struct._typeobject** %metatype.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %200, i32 0, i32 36
  %201 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %202 = load %struct._typeobject*, %struct._typeobject** %metatype.addr, align 8
  %203 = load i64, i64* %nslots, align 8
  %call315 = call %struct._object* %201(%struct._typeobject* %202, i64 %203)
  %204 = bitcast %struct._object* %call315 to %struct._typeobject*
  store %struct._typeobject* %204, %struct._typeobject** %type, align 8
  %205 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp316 = icmp eq %struct._typeobject* %205, null
  br i1 %cmp316, label %if.then.318, label %if.end.319

if.then.318:                                      ; preds = %if.end.314
  br label %error

if.end.319:                                       ; preds = %if.end.314
  %206 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %207 = bitcast %struct._typeobject* %206 to %struct._heaptypeobject*
  store %struct._heaptypeobject* %207, %struct._heaptypeobject** %et, align 8
  %208 = load %struct._object*, %struct._object** %name, align 8
  %ob_refcnt320 = getelementptr inbounds %struct._object, %struct._object* %208, i32 0, i32 0
  %209 = load i64, i64* %ob_refcnt320, align 8
  %inc321 = add i64 %209, 1
  store i64 %inc321, i64* %ob_refcnt320, align 8
  %210 = load %struct._object*, %struct._object** %name, align 8
  %211 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_name = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %211, i32 0, i32 5
  store %struct._object* %210, %struct._object** %ht_name, align 8
  %212 = load %struct._object*, %struct._object** %slots, align 8
  %213 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_slots = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %213, i32 0, i32 6
  store %struct._object* %212, %struct._object** %ht_slots, align 8
  store %struct._object* null, %struct._object** %slots, align 8
  %214 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags322 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %214, i32 0, i32 19
  store i64 263681, i64* %tp_flags322, align 8
  %215 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_flags323 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %215, i32 0, i32 19
  %216 = load i64, i64* %tp_flags323, align 8
  %and324 = and i64 %216, 16384
  %tobool325 = icmp ne i64 %and324, 0
  br i1 %tobool325, label %if.then.326, label %if.end.328

if.then.326:                                      ; preds = %if.end.319
  %217 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags327 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %217, i32 0, i32 19
  %218 = load i64, i64* %tp_flags327, align 8
  %or = or i64 %218, 16384
  store i64 %or, i64* %tp_flags327, align 8
  br label %if.end.328

if.end.328:                                       ; preds = %if.then.326, %if.end.319
  %219 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %as_number = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %219, i32 0, i32 1
  %220 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %220, i32 0, i32 10
  store %struct.PyNumberMethods* %as_number, %struct.PyNumberMethods** %tp_as_number, align 8
  %221 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %as_sequence = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %221, i32 0, i32 3
  %222 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %222, i32 0, i32 11
  store %struct.PySequenceMethods* %as_sequence, %struct.PySequenceMethods** %tp_as_sequence, align 8
  %223 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %as_mapping = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %223, i32 0, i32 2
  %224 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %224, i32 0, i32 12
  store %struct.PyMappingMethods* %as_mapping, %struct.PyMappingMethods** %tp_as_mapping, align 8
  %225 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %as_buffer = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %225, i32 0, i32 4
  %226 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %226, i32 0, i32 18
  store %struct.PyBufferProcs* %as_buffer, %struct.PyBufferProcs** %tp_as_buffer, align 8
  %227 = load %struct._object*, %struct._object** %name, align 8
  %call329 = call i8* @PyUnicode_AsUTF8(%struct._object* %227)
  %228 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name330 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %228, i32 0, i32 1
  store i8* %call329, i8** %tp_name330, align 8
  %229 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name331 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %229, i32 0, i32 1
  %230 = load i8*, i8** %tp_name331, align 8
  %tobool332 = icmp ne i8* %230, null
  br i1 %tobool332, label %if.end.334, label %if.then.333

if.then.333:                                      ; preds = %if.end.328
  br label %error

if.end.334:                                       ; preds = %if.end.328
  %231 = load %struct._object*, %struct._object** %bases, align 8
  %232 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %232, i32 0, i32 40
  store %struct._object* %231, %struct._object** %tp_bases, align 8
  store %struct._object* null, %struct._object** %bases, align 8
  %233 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %234 = bitcast %struct._typeobject* %233 to %struct._object*
  %ob_refcnt335 = getelementptr inbounds %struct._object, %struct._object* %234, i32 0, i32 0
  %235 = load i64, i64* %ob_refcnt335, align 8
  %inc336 = add i64 %235, 1
  store i64 %inc336, i64* %ob_refcnt335, align 8
  %236 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %237 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %237, i32 0, i32 30
  store %struct._typeobject* %236, %struct._typeobject** %tp_base, align 8
  %238 = load %struct._object*, %struct._object** %dict, align 8
  %ob_refcnt337 = getelementptr inbounds %struct._object, %struct._object* %238, i32 0, i32 0
  %239 = load i64, i64* %ob_refcnt337, align 8
  %inc338 = add i64 %239, 1
  store i64 %inc338, i64* %ob_refcnt337, align 8
  %240 = load %struct._object*, %struct._object** %dict, align 8
  %241 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %241, i32 0, i32 31
  store %struct._object* %240, %struct._object** %tp_dict, align 8
  %242 = load %struct._object*, %struct._object** %dict, align 8
  %call339 = call %struct._object* @_PyDict_GetItemId(%struct._object* %242, %struct._Py_Identifier* @PyId___module__)
  %cmp340 = icmp eq %struct._object* %call339, null
  br i1 %cmp340, label %if.then.342, label %if.end.358

if.then.342:                                      ; preds = %if.end.334
  %call343 = call %struct._object* @PyEval_GetGlobals()
  store %struct._object* %call343, %struct._object** %tmp, align 8
  %243 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp344 = icmp ne %struct._object* %243, null
  br i1 %cmp344, label %if.then.346, label %if.end.357

if.then.346:                                      ; preds = %if.then.342
  %244 = load %struct._object*, %struct._object** %tmp, align 8
  %call347 = call %struct._object* @_PyDict_GetItemId(%struct._object* %244, %struct._Py_Identifier* @PyId___name__)
  store %struct._object* %call347, %struct._object** %tmp, align 8
  %245 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp348 = icmp ne %struct._object* %245, null
  br i1 %cmp348, label %if.then.350, label %if.end.356

if.then.350:                                      ; preds = %if.then.346
  %246 = load %struct._object*, %struct._object** %dict, align 8
  %247 = load %struct._object*, %struct._object** %tmp, align 8
  %call351 = call i32 @_PyDict_SetItemId(%struct._object* %246, %struct._Py_Identifier* @PyId___module__, %struct._object* %247)
  %cmp352 = icmp slt i32 %call351, 0
  br i1 %cmp352, label %if.then.354, label %if.end.355

if.then.354:                                      ; preds = %if.then.350
  br label %error

if.end.355:                                       ; preds = %if.then.350
  br label %if.end.356

if.end.356:                                       ; preds = %if.end.355, %if.then.346
  br label %if.end.357

if.end.357:                                       ; preds = %if.end.356, %if.then.342
  br label %if.end.358

if.end.358:                                       ; preds = %if.end.357, %if.end.334
  %248 = load %struct._object*, %struct._object** %dict, align 8
  %call359 = call %struct._object* @_PyDict_GetItemId(%struct._object* %248, %struct._Py_Identifier* @type_new.PyId___qualname__)
  store %struct._object* %call359, %struct._object** %qualname, align 8
  %249 = load %struct._object*, %struct._object** %qualname, align 8
  %cmp360 = icmp ne %struct._object* %249, null
  br i1 %cmp360, label %if.then.362, label %if.end.373

if.then.362:                                      ; preds = %if.end.358
  %250 = load %struct._object*, %struct._object** %qualname, align 8
  %ob_type363 = getelementptr inbounds %struct._object, %struct._object* %250, i32 0, i32 1
  %251 = load %struct._typeobject*, %struct._typeobject** %ob_type363, align 8
  %tp_flags364 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %251, i32 0, i32 19
  %252 = load i64, i64* %tp_flags364, align 8
  %and365 = and i64 %252, 268435456
  %cmp366 = icmp ne i64 %and365, 0
  br i1 %cmp366, label %if.end.372, label %if.then.368

if.then.368:                                      ; preds = %if.then.362
  %253 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %254 = load %struct._object*, %struct._object** %qualname, align 8
  %ob_type369 = getelementptr inbounds %struct._object, %struct._object* %254, i32 0, i32 1
  %255 = load %struct._typeobject*, %struct._typeobject** %ob_type369, align 8
  %tp_name370 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %255, i32 0, i32 1
  %256 = load i8*, i8** %tp_name370, align 8
  %call371 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %253, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.252, i32 0, i32 0), i8* %256)
  br label %error

if.end.372:                                       ; preds = %if.then.362
  br label %if.end.373

if.end.373:                                       ; preds = %if.end.372, %if.end.358
  %257 = load %struct._object*, %struct._object** %qualname, align 8
  %tobool374 = icmp ne %struct._object* %257, null
  br i1 %tobool374, label %cond.true.375, label %cond.false.376

cond.true.375:                                    ; preds = %if.end.373
  %258 = load %struct._object*, %struct._object** %qualname, align 8
  br label %cond.end.378

cond.false.376:                                   ; preds = %if.end.373
  %259 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_name377 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %259, i32 0, i32 5
  %260 = load %struct._object*, %struct._object** %ht_name377, align 8
  br label %cond.end.378

cond.end.378:                                     ; preds = %cond.false.376, %cond.true.375
  %cond379 = phi %struct._object* [ %258, %cond.true.375 ], [ %260, %cond.false.376 ]
  %261 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_qualname = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %261, i32 0, i32 7
  store %struct._object* %cond379, %struct._object** %ht_qualname, align 8
  %262 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_qualname380 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %262, i32 0, i32 7
  %263 = load %struct._object*, %struct._object** %ht_qualname380, align 8
  %ob_refcnt381 = getelementptr inbounds %struct._object, %struct._object* %263, i32 0, i32 0
  %264 = load i64, i64* %ob_refcnt381, align 8
  %inc382 = add i64 %264, 1
  store i64 %inc382, i64* %ob_refcnt381, align 8
  %265 = load %struct._object*, %struct._object** %qualname, align 8
  %cmp383 = icmp ne %struct._object* %265, null
  br i1 %cmp383, label %land.lhs.true.385, label %if.end.390

land.lhs.true.385:                                ; preds = %cond.end.378
  %266 = load %struct._object*, %struct._object** %dict, align 8
  %267 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._Py_Identifier, %struct._Py_Identifier* @type_new.PyId___qualname__, i32 0, i32 2), align 8
  %call386 = call i32 @PyDict_DelItem(%struct._object* %266, %struct._object* %267)
  %cmp387 = icmp slt i32 %call386, 0
  br i1 %cmp387, label %if.then.389, label %if.end.390

if.then.389:                                      ; preds = %land.lhs.true.385
  br label %error

if.end.390:                                       ; preds = %land.lhs.true.385, %cond.end.378
  %268 = load %struct._object*, %struct._object** %dict, align 8
  %call392 = call %struct._object* @_PyDict_GetItemId(%struct._object* %268, %struct._Py_Identifier* @PyId___doc__)
  store %struct._object* %call392, %struct._object** %doc, align 8
  %269 = load %struct._object*, %struct._object** %doc, align 8
  %cmp393 = icmp ne %struct._object* %269, null
  br i1 %cmp393, label %land.lhs.true.395, label %if.end.420

land.lhs.true.395:                                ; preds = %if.end.390
  %270 = load %struct._object*, %struct._object** %doc, align 8
  %ob_type396 = getelementptr inbounds %struct._object, %struct._object* %270, i32 0, i32 1
  %271 = load %struct._typeobject*, %struct._typeobject** %ob_type396, align 8
  %tp_flags397 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %271, i32 0, i32 19
  %272 = load i64, i64* %tp_flags397, align 8
  %and398 = and i64 %272, 268435456
  %cmp399 = icmp ne i64 %and398, 0
  br i1 %cmp399, label %if.then.401, label %if.end.420

if.then.401:                                      ; preds = %land.lhs.true.395
  %273 = load %struct._object*, %struct._object** %doc, align 8
  %call405 = call i8* @PyUnicode_AsUTF8(%struct._object* %273)
  store i8* %call405, i8** %doc_str, align 8
  %274 = load i8*, i8** %doc_str, align 8
  %cmp406 = icmp eq i8* %274, null
  br i1 %cmp406, label %if.then.408, label %if.end.409

if.then.408:                                      ; preds = %if.then.401
  br label %error

if.end.409:                                       ; preds = %if.then.401
  %275 = load i8*, i8** %doc_str, align 8
  %call410 = call i64 @strlen(i8* %275) #7
  store i64 %call410, i64* %len, align 8
  %276 = load i64, i64* %len, align 8
  %add411 = add i64 %276, 1
  %call412 = call i8* @PyObject_Malloc(i64 %add411)
  store i8* %call412, i8** %tp_doc, align 8
  %277 = load i8*, i8** %tp_doc, align 8
  %cmp413 = icmp eq i8* %277, null
  br i1 %cmp413, label %if.then.415, label %if.end.417

if.then.415:                                      ; preds = %if.end.409
  %call416 = call %struct._object* @PyErr_NoMemory()
  br label %error

if.end.417:                                       ; preds = %if.end.409
  %278 = load i8*, i8** %tp_doc, align 8
  %279 = load i8*, i8** %doc_str, align 8
  %280 = load i64, i64* %len, align 8
  %add418 = add i64 %280, 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %278, i8* %279, i64 %add418, i32 1, i1 false)
  %281 = load i8*, i8** %tp_doc, align 8
  %282 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_doc419 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %282, i32 0, i32 20
  store i8* %281, i8** %tp_doc419, align 8
  br label %if.end.420

if.end.420:                                       ; preds = %if.end.417, %land.lhs.true.395, %if.end.390
  %283 = load %struct._object*, %struct._object** %dict, align 8
  %call421 = call %struct._object* @_PyDict_GetItemId(%struct._object* %283, %struct._Py_Identifier* @PyId___new__)
  store %struct._object* %call421, %struct._object** %tmp, align 8
  %284 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp422 = icmp ne %struct._object* %284, null
  br i1 %cmp422, label %land.lhs.true.424, label %if.end.452

land.lhs.true.424:                                ; preds = %if.end.420
  %285 = load %struct._object*, %struct._object** %tmp, align 8
  %ob_type425 = getelementptr inbounds %struct._object, %struct._object* %285, i32 0, i32 1
  %286 = load %struct._typeobject*, %struct._typeobject** %ob_type425, align 8
  %cmp426 = icmp eq %struct._typeobject* %286, @PyFunction_Type
  br i1 %cmp426, label %if.then.428, label %if.end.452

if.then.428:                                      ; preds = %land.lhs.true.424
  %287 = load %struct._object*, %struct._object** %tmp, align 8
  %call429 = call %struct._object* @PyStaticMethod_New(%struct._object* %287)
  store %struct._object* %call429, %struct._object** %tmp, align 8
  %288 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp430 = icmp eq %struct._object* %288, null
  br i1 %cmp430, label %if.then.432, label %if.end.433

if.then.432:                                      ; preds = %if.then.428
  br label %error

if.end.433:                                       ; preds = %if.then.428
  %289 = load %struct._object*, %struct._object** %dict, align 8
  %290 = load %struct._object*, %struct._object** %tmp, align 8
  %call434 = call i32 @_PyDict_SetItemId(%struct._object* %289, %struct._Py_Identifier* @PyId___new__, %struct._object* %290)
  %cmp435 = icmp slt i32 %call434, 0
  br i1 %cmp435, label %if.then.437, label %if.end.438

if.then.437:                                      ; preds = %if.end.433
  br label %error

if.end.438:                                       ; preds = %if.end.433
  br label %do.body.439

do.body.439:                                      ; preds = %if.end.438
  %291 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %291, %struct._object** %_py_decref_tmp441, align 8
  %292 = load %struct._object*, %struct._object** %_py_decref_tmp441, align 8
  %ob_refcnt442 = getelementptr inbounds %struct._object, %struct._object* %292, i32 0, i32 0
  %293 = load i64, i64* %ob_refcnt442, align 8
  %dec443 = add i64 %293, -1
  store i64 %dec443, i64* %ob_refcnt442, align 8
  %cmp444 = icmp ne i64 %dec443, 0
  br i1 %cmp444, label %if.then.446, label %if.else.447

if.then.446:                                      ; preds = %do.body.439
  br label %if.end.450

if.else.447:                                      ; preds = %do.body.439
  %294 = load %struct._object*, %struct._object** %_py_decref_tmp441, align 8
  %ob_type448 = getelementptr inbounds %struct._object, %struct._object* %294, i32 0, i32 1
  %295 = load %struct._typeobject*, %struct._typeobject** %ob_type448, align 8
  %tp_dealloc449 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %295, i32 0, i32 4
  %296 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc449, align 8
  %297 = load %struct._object*, %struct._object** %_py_decref_tmp441, align 8
  call void %296(%struct._object* %297)
  br label %if.end.450

if.end.450:                                       ; preds = %if.else.447, %if.then.446
  br label %do.end.451

do.end.451:                                       ; preds = %if.end.450
  br label %if.end.452

if.end.452:                                       ; preds = %do.end.451, %land.lhs.true.424, %if.end.420
  %298 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %299 = bitcast %struct._heaptypeobject* %298 to i8*
  %300 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %301 = bitcast %struct._heaptypeobject* %300 to %struct._object*
  %ob_type453 = getelementptr inbounds %struct._object, %struct._object* %301, i32 0, i32 1
  %302 = load %struct._typeobject*, %struct._typeobject** %ob_type453, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %302, i32 0, i32 2
  %303 = load i64, i64* %tp_basicsize, align 8
  %add.ptr = getelementptr i8, i8* %299, i64 %303
  %304 = bitcast i8* %add.ptr to %struct.PyMemberDef*
  store %struct.PyMemberDef* %304, %struct.PyMemberDef** %mp, align 8
  %305 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_basicsize454 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %305, i32 0, i32 2
  %306 = load i64, i64* %tp_basicsize454, align 8
  store i64 %306, i64* %slotoffset, align 8
  %307 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_slots455 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %307, i32 0, i32 6
  %308 = load %struct._object*, %struct._object** %ht_slots455, align 8
  %cmp456 = icmp ne %struct._object* %308, null
  br i1 %cmp456, label %if.then.458, label %if.end.478

if.then.458:                                      ; preds = %if.end.452
  store i64 0, i64* %i, align 8
  br label %for.cond.459

for.cond.459:                                     ; preds = %for.inc.475, %if.then.458
  %309 = load i64, i64* %i, align 8
  %310 = load i64, i64* %nslots, align 8
  %cmp460 = icmp slt i64 %309, %310
  br i1 %cmp460, label %for.body.462, label %for.end.477

for.body.462:                                     ; preds = %for.cond.459
  %311 = load i64, i64* %i, align 8
  %312 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_slots463 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %312, i32 0, i32 6
  %313 = load %struct._object*, %struct._object** %ht_slots463, align 8
  %314 = bitcast %struct._object* %313 to %struct.PyTupleObject*
  %ob_item464 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %314, i32 0, i32 1
  %arrayidx465 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item464, i32 0, i64 %311
  %315 = load %struct._object*, %struct._object** %arrayidx465, align 8
  %call466 = call i8* @PyUnicode_AsUTF8(%struct._object* %315)
  %316 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %name467 = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %316, i32 0, i32 0
  store i8* %call466, i8** %name467, align 8
  %317 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %name468 = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %317, i32 0, i32 0
  %318 = load i8*, i8** %name468, align 8
  %cmp469 = icmp eq i8* %318, null
  br i1 %cmp469, label %if.then.471, label %if.end.472

if.then.471:                                      ; preds = %for.body.462
  br label %error

if.end.472:                                       ; preds = %for.body.462
  %319 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %type473 = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %319, i32 0, i32 1
  store i32 16, i32* %type473, align 4
  %320 = load i64, i64* %slotoffset, align 8
  %321 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %offset = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %321, i32 0, i32 2
  store i64 %320, i64* %offset, align 8
  %322 = load i64, i64* %slotoffset, align 8
  %add474 = add i64 %322, 8
  store i64 %add474, i64* %slotoffset, align 8
  br label %for.inc.475

for.inc.475:                                      ; preds = %if.end.472
  %323 = load i64, i64* %i, align 8
  %inc476 = add i64 %323, 1
  store i64 %inc476, i64* %i, align 8
  %324 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %incdec.ptr = getelementptr %struct.PyMemberDef, %struct.PyMemberDef* %324, i32 1
  store %struct.PyMemberDef* %incdec.ptr, %struct.PyMemberDef** %mp, align 8
  br label %for.cond.459

for.end.477:                                      ; preds = %for.cond.459
  br label %if.end.478

if.end.478:                                       ; preds = %for.end.477, %if.end.452
  %325 = load i64, i64* %add_dict, align 8
  %tobool479 = icmp ne i64 %325, 0
  br i1 %tobool479, label %if.then.480, label %if.end.489

if.then.480:                                      ; preds = %if.end.478
  %326 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_itemsize481 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %326, i32 0, i32 3
  %327 = load i64, i64* %tp_itemsize481, align 8
  %tobool482 = icmp ne i64 %327, 0
  br i1 %tobool482, label %if.then.483, label %if.else.485

if.then.483:                                      ; preds = %if.then.480
  %328 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset484 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %328, i32 0, i32 34
  store i64 -8, i64* %tp_dictoffset484, align 8
  br label %if.end.487

if.else.485:                                      ; preds = %if.then.480
  %329 = load i64, i64* %slotoffset, align 8
  %330 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset486 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %330, i32 0, i32 34
  store i64 %329, i64* %tp_dictoffset486, align 8
  br label %if.end.487

if.end.487:                                       ; preds = %if.else.485, %if.then.483
  %331 = load i64, i64* %slotoffset, align 8
  %add488 = add i64 %331, 8
  store i64 %add488, i64* %slotoffset, align 8
  br label %if.end.489

if.end.489:                                       ; preds = %if.end.487, %if.end.478
  %332 = load i64, i64* %add_weak, align 8
  %tobool490 = icmp ne i64 %332, 0
  br i1 %tobool490, label %if.then.491, label %if.end.494

if.then.491:                                      ; preds = %if.end.489
  %333 = load i64, i64* %slotoffset, align 8
  %334 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_weaklistoffset492 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %334, i32 0, i32 24
  store i64 %333, i64* %tp_weaklistoffset492, align 8
  %335 = load i64, i64* %slotoffset, align 8
  %add493 = add i64 %335, 8
  store i64 %add493, i64* %slotoffset, align 8
  br label %if.end.494

if.end.494:                                       ; preds = %if.then.491, %if.end.489
  %336 = load i64, i64* %slotoffset, align 8
  %337 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_basicsize495 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %337, i32 0, i32 2
  store i64 %336, i64* %tp_basicsize495, align 8
  %338 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_itemsize496 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %338, i32 0, i32 3
  %339 = load i64, i64* %tp_itemsize496, align 8
  %340 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_itemsize497 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %340, i32 0, i32 3
  store i64 %339, i64* %tp_itemsize497, align 8
  %341 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %342 = bitcast %struct._heaptypeobject* %341 to i8*
  %343 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %344 = bitcast %struct._heaptypeobject* %343 to %struct._object*
  %ob_type498 = getelementptr inbounds %struct._object, %struct._object* %344, i32 0, i32 1
  %345 = load %struct._typeobject*, %struct._typeobject** %ob_type498, align 8
  %tp_basicsize499 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %345, i32 0, i32 2
  %346 = load i64, i64* %tp_basicsize499, align 8
  %add.ptr500 = getelementptr i8, i8* %342, i64 %346
  %347 = bitcast i8* %add.ptr500 to %struct.PyMemberDef*
  %348 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_members = getelementptr inbounds %struct._typeobject, %struct._typeobject* %348, i32 0, i32 28
  store %struct.PyMemberDef* %347, %struct.PyMemberDef** %tp_members, align 8
  %349 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_weaklistoffset501 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %349, i32 0, i32 24
  %350 = load i64, i64* %tp_weaklistoffset501, align 8
  %tobool502 = icmp ne i64 %350, 0
  br i1 %tobool502, label %land.lhs.true.503, label %if.else.507

land.lhs.true.503:                                ; preds = %if.end.494
  %351 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset504 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %351, i32 0, i32 34
  %352 = load i64, i64* %tp_dictoffset504, align 8
  %tobool505 = icmp ne i64 %352, 0
  br i1 %tobool505, label %if.then.506, label %if.else.507

if.then.506:                                      ; preds = %land.lhs.true.503
  %353 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_getset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %353, i32 0, i32 29
  store %struct.PyGetSetDef* getelementptr inbounds ([3 x %struct.PyGetSetDef], [3 x %struct.PyGetSetDef]* @subtype_getsets_full, i32 0, i32 0), %struct.PyGetSetDef** %tp_getset, align 8
  br label %if.end.527

if.else.507:                                      ; preds = %land.lhs.true.503, %if.end.494
  %354 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_weaklistoffset508 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %354, i32 0, i32 24
  %355 = load i64, i64* %tp_weaklistoffset508, align 8
  %tobool509 = icmp ne i64 %355, 0
  br i1 %tobool509, label %land.lhs.true.510, label %if.else.515

land.lhs.true.510:                                ; preds = %if.else.507
  %356 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset511 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %356, i32 0, i32 34
  %357 = load i64, i64* %tp_dictoffset511, align 8
  %tobool512 = icmp ne i64 %357, 0
  br i1 %tobool512, label %if.else.515, label %if.then.513

if.then.513:                                      ; preds = %land.lhs.true.510
  %358 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_getset514 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %358, i32 0, i32 29
  store %struct.PyGetSetDef* getelementptr inbounds ([2 x %struct.PyGetSetDef], [2 x %struct.PyGetSetDef]* @subtype_getsets_weakref_only, i32 0, i32 0), %struct.PyGetSetDef** %tp_getset514, align 8
  br label %if.end.526

if.else.515:                                      ; preds = %land.lhs.true.510, %if.else.507
  %359 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_weaklistoffset516 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %359, i32 0, i32 24
  %360 = load i64, i64* %tp_weaklistoffset516, align 8
  %tobool517 = icmp ne i64 %360, 0
  br i1 %tobool517, label %if.else.523, label %land.lhs.true.518

land.lhs.true.518:                                ; preds = %if.else.515
  %361 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset519 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %361, i32 0, i32 34
  %362 = load i64, i64* %tp_dictoffset519, align 8
  %tobool520 = icmp ne i64 %362, 0
  br i1 %tobool520, label %if.then.521, label %if.else.523

if.then.521:                                      ; preds = %land.lhs.true.518
  %363 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_getset522 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %363, i32 0, i32 29
  store %struct.PyGetSetDef* getelementptr inbounds ([2 x %struct.PyGetSetDef], [2 x %struct.PyGetSetDef]* @subtype_getsets_dict_only, i32 0, i32 0), %struct.PyGetSetDef** %tp_getset522, align 8
  br label %if.end.525

if.else.523:                                      ; preds = %land.lhs.true.518, %if.else.515
  %364 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_getset524 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %364, i32 0, i32 29
  store %struct.PyGetSetDef* null, %struct.PyGetSetDef** %tp_getset524, align 8
  br label %if.end.525

if.end.525:                                       ; preds = %if.else.523, %if.then.521
  br label %if.end.526

if.end.526:                                       ; preds = %if.end.525, %if.then.513
  br label %if.end.527

if.end.527:                                       ; preds = %if.end.526, %if.then.506
  %365 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset528 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %365, i32 0, i32 34
  %366 = load i64, i64* %tp_dictoffset528, align 8
  %cmp529 = icmp ne i64 %366, 0
  br i1 %cmp529, label %if.then.534, label %lor.lhs.false.531

lor.lhs.false.531:                                ; preds = %if.end.527
  %367 = load i64, i64* %nslots, align 8
  %cmp532 = icmp sgt i64 %367, 0
  br i1 %cmp532, label %if.then.534, label %if.end.551

if.then.534:                                      ; preds = %lor.lhs.false.531, %if.end.527
  %368 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_getattr = getelementptr inbounds %struct._typeobject, %struct._typeobject* %368, i32 0, i32 6
  %369 = load %struct._object* (%struct._object*, i8*)*, %struct._object* (%struct._object*, i8*)** %tp_getattr, align 8
  %cmp535 = icmp eq %struct._object* (%struct._object*, i8*)* %369, null
  br i1 %cmp535, label %land.lhs.true.537, label %if.end.542

land.lhs.true.537:                                ; preds = %if.then.534
  %370 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_getattro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %370, i32 0, i32 16
  %371 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %tp_getattro, align 8
  %cmp538 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %371, null
  br i1 %cmp538, label %if.then.540, label %if.end.542

if.then.540:                                      ; preds = %land.lhs.true.537
  %372 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_getattro541 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %372, i32 0, i32 16
  store %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, %struct._object* (%struct._object*, %struct._object*)** %tp_getattro541, align 8
  br label %if.end.542

if.end.542:                                       ; preds = %if.then.540, %land.lhs.true.537, %if.then.534
  %373 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_setattr = getelementptr inbounds %struct._typeobject, %struct._typeobject* %373, i32 0, i32 7
  %374 = load i32 (%struct._object*, i8*, %struct._object*)*, i32 (%struct._object*, i8*, %struct._object*)** %tp_setattr, align 8
  %cmp543 = icmp eq i32 (%struct._object*, i8*, %struct._object*)* %374, null
  br i1 %cmp543, label %land.lhs.true.545, label %if.end.550

land.lhs.true.545:                                ; preds = %if.end.542
  %375 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_setattro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %375, i32 0, i32 17
  %376 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_setattro, align 8
  %cmp546 = icmp eq i32 (%struct._object*, %struct._object*, %struct._object*)* %376, null
  br i1 %cmp546, label %if.then.548, label %if.end.550

if.then.548:                                      ; preds = %land.lhs.true.545
  %377 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_setattro549 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %377, i32 0, i32 17
  store i32 (%struct._object*, %struct._object*, %struct._object*)* @PyObject_GenericSetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_setattro549, align 8
  br label %if.end.550

if.end.550:                                       ; preds = %if.then.548, %land.lhs.true.545, %if.end.542
  br label %if.end.551

if.end.551:                                       ; preds = %if.end.550, %lor.lhs.false.531
  %378 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dealloc552 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %378, i32 0, i32 4
  store void (%struct._object*)* @subtype_dealloc, void (%struct._object*)** %tp_dealloc552, align 8
  %379 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_basicsize553 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %379, i32 0, i32 2
  %380 = load i64, i64* %tp_basicsize553, align 8
  %cmp554 = icmp eq i64 %380, 16
  br i1 %cmp554, label %land.lhs.true.556, label %if.then.560

land.lhs.true.556:                                ; preds = %if.end.551
  %381 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_itemsize557 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %381, i32 0, i32 3
  %382 = load i64, i64* %tp_itemsize557, align 8
  %cmp558 = icmp eq i64 %382, 0
  br i1 %cmp558, label %if.end.563, label %if.then.560

if.then.560:                                      ; preds = %land.lhs.true.556, %if.end.551
  %383 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags561 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %383, i32 0, i32 19
  %384 = load i64, i64* %tp_flags561, align 8
  %or562 = or i64 %384, 16384
  store i64 %or562, i64* %tp_flags561, align 8
  br label %if.end.563

if.end.563:                                       ; preds = %if.then.560, %land.lhs.true.556
  %385 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_alloc564 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %385, i32 0, i32 36
  store %struct._object* (%struct._typeobject*, i64)* @PyType_GenericAlloc, %struct._object* (%struct._typeobject*, i64)** %tp_alloc564, align 8
  %386 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags565 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %386, i32 0, i32 19
  %387 = load i64, i64* %tp_flags565, align 8
  %and566 = and i64 %387, 16384
  %tobool567 = icmp ne i64 %and566, 0
  br i1 %tobool567, label %if.then.568, label %if.else.569

if.then.568:                                      ; preds = %if.end.563
  %388 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %388, i32 0, i32 38
  store void (i8*)* @PyObject_GC_Del, void (i8*)** %tp_free, align 8
  %389 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_traverse = getelementptr inbounds %struct._typeobject, %struct._typeobject* %389, i32 0, i32 21
  store i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* @subtype_traverse, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %tp_traverse, align 8
  %390 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_clear = getelementptr inbounds %struct._typeobject, %struct._typeobject* %390, i32 0, i32 22
  store i32 (%struct._object*)* @subtype_clear, i32 (%struct._object*)** %tp_clear, align 8
  br label %if.end.571

if.else.569:                                      ; preds = %if.end.563
  %391 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_free570 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %391, i32 0, i32 38
  store void (i8*)* @PyObject_Free, void (i8*)** %tp_free570, align 8
  br label %if.end.571

if.end.571:                                       ; preds = %if.else.569, %if.then.568
  %392 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call572 = call i32 @PyType_Ready(%struct._typeobject* %392)
  %cmp573 = icmp slt i32 %call572, 0
  br i1 %cmp573, label %if.then.575, label %if.end.576

if.then.575:                                      ; preds = %if.end.571
  br label %error

if.end.576:                                       ; preds = %if.end.571
  %393 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  call void @fixup_slot_dispatchers(%struct._typeobject* %393)
  %394 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset577 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %394, i32 0, i32 34
  %395 = load i64, i64* %tp_dictoffset577, align 8
  %tobool578 = icmp ne i64 %395, 0
  br i1 %tobool578, label %if.then.579, label %if.end.581

if.then.579:                                      ; preds = %if.end.576
  %call580 = call %struct._dictkeysobject* @_PyDict_NewKeysForClass()
  %396 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_cached_keys = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %396, i32 0, i32 8
  store %struct._dictkeysobject* %call580, %struct._dictkeysobject** %ht_cached_keys, align 8
  br label %if.end.581

if.end.581:                                       ; preds = %if.then.579, %if.end.576
  br label %do.body.582

do.body.582:                                      ; preds = %if.end.581
  %397 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %397, %struct._object** %_py_decref_tmp584, align 8
  %398 = load %struct._object*, %struct._object** %_py_decref_tmp584, align 8
  %ob_refcnt585 = getelementptr inbounds %struct._object, %struct._object* %398, i32 0, i32 0
  %399 = load i64, i64* %ob_refcnt585, align 8
  %dec586 = add i64 %399, -1
  store i64 %dec586, i64* %ob_refcnt585, align 8
  %cmp587 = icmp ne i64 %dec586, 0
  br i1 %cmp587, label %if.then.589, label %if.else.590

if.then.589:                                      ; preds = %do.body.582
  br label %if.end.593

if.else.590:                                      ; preds = %do.body.582
  %400 = load %struct._object*, %struct._object** %_py_decref_tmp584, align 8
  %ob_type591 = getelementptr inbounds %struct._object, %struct._object* %400, i32 0, i32 1
  %401 = load %struct._typeobject*, %struct._typeobject** %ob_type591, align 8
  %tp_dealloc592 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %401, i32 0, i32 4
  %402 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc592, align 8
  %403 = load %struct._object*, %struct._object** %_py_decref_tmp584, align 8
  call void %402(%struct._object* %403)
  br label %if.end.593

if.end.593:                                       ; preds = %if.else.590, %if.then.589
  br label %do.end.594

do.end.594:                                       ; preds = %if.end.593
  %404 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %405 = bitcast %struct._typeobject* %404 to %struct._object*
  store %struct._object* %405, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.575, %if.then.471, %if.then.437, %if.then.432, %if.then.415, %if.then.408, %if.then.389, %if.then.368, %if.then.354, %if.then.333, %if.then.318, %if.then.257, %do.end.239, %do.end.196, %do.end, %if.then.145, %if.then.136, %if.then.125, %if.then.117, %if.then.105, %if.then.96, %if.then.64, %if.then.59, %if.then.56, %if.then.49
  br label %do.body.595

do.body.595:                                      ; preds = %error
  %406 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %406, %struct._object** %_py_xdecref_tmp, align 8
  %407 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp597 = icmp ne %struct._object* %407, null
  br i1 %cmp597, label %if.then.599, label %if.end.613

if.then.599:                                      ; preds = %do.body.595
  br label %do.body.600

do.body.600:                                      ; preds = %if.then.599
  %408 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %408, %struct._object** %_py_decref_tmp602, align 8
  %409 = load %struct._object*, %struct._object** %_py_decref_tmp602, align 8
  %ob_refcnt603 = getelementptr inbounds %struct._object, %struct._object* %409, i32 0, i32 0
  %410 = load i64, i64* %ob_refcnt603, align 8
  %dec604 = add i64 %410, -1
  store i64 %dec604, i64* %ob_refcnt603, align 8
  %cmp605 = icmp ne i64 %dec604, 0
  br i1 %cmp605, label %if.then.607, label %if.else.608

if.then.607:                                      ; preds = %do.body.600
  br label %if.end.611

if.else.608:                                      ; preds = %do.body.600
  %411 = load %struct._object*, %struct._object** %_py_decref_tmp602, align 8
  %ob_type609 = getelementptr inbounds %struct._object, %struct._object* %411, i32 0, i32 1
  %412 = load %struct._typeobject*, %struct._typeobject** %ob_type609, align 8
  %tp_dealloc610 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %412, i32 0, i32 4
  %413 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc610, align 8
  %414 = load %struct._object*, %struct._object** %_py_decref_tmp602, align 8
  call void %413(%struct._object* %414)
  br label %if.end.611

if.end.611:                                       ; preds = %if.else.608, %if.then.607
  br label %do.end.612

do.end.612:                                       ; preds = %if.end.611
  br label %if.end.613

if.end.613:                                       ; preds = %do.end.612, %do.body.595
  br label %do.end.614

do.end.614:                                       ; preds = %if.end.613
  br label %do.body.615

do.body.615:                                      ; preds = %do.end.614
  %415 = load %struct._object*, %struct._object** %bases, align 8
  store %struct._object* %415, %struct._object** %_py_xdecref_tmp617, align 8
  %416 = load %struct._object*, %struct._object** %_py_xdecref_tmp617, align 8
  %cmp618 = icmp ne %struct._object* %416, null
  br i1 %cmp618, label %if.then.620, label %if.end.634

if.then.620:                                      ; preds = %do.body.615
  br label %do.body.621

do.body.621:                                      ; preds = %if.then.620
  %417 = load %struct._object*, %struct._object** %_py_xdecref_tmp617, align 8
  store %struct._object* %417, %struct._object** %_py_decref_tmp623, align 8
  %418 = load %struct._object*, %struct._object** %_py_decref_tmp623, align 8
  %ob_refcnt624 = getelementptr inbounds %struct._object, %struct._object* %418, i32 0, i32 0
  %419 = load i64, i64* %ob_refcnt624, align 8
  %dec625 = add i64 %419, -1
  store i64 %dec625, i64* %ob_refcnt624, align 8
  %cmp626 = icmp ne i64 %dec625, 0
  br i1 %cmp626, label %if.then.628, label %if.else.629

if.then.628:                                      ; preds = %do.body.621
  br label %if.end.632

if.else.629:                                      ; preds = %do.body.621
  %420 = load %struct._object*, %struct._object** %_py_decref_tmp623, align 8
  %ob_type630 = getelementptr inbounds %struct._object, %struct._object* %420, i32 0, i32 1
  %421 = load %struct._typeobject*, %struct._typeobject** %ob_type630, align 8
  %tp_dealloc631 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %421, i32 0, i32 4
  %422 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc631, align 8
  %423 = load %struct._object*, %struct._object** %_py_decref_tmp623, align 8
  call void %422(%struct._object* %423)
  br label %if.end.632

if.end.632:                                       ; preds = %if.else.629, %if.then.628
  br label %do.end.633

do.end.633:                                       ; preds = %if.end.632
  br label %if.end.634

if.end.634:                                       ; preds = %do.end.633, %do.body.615
  br label %do.end.635

do.end.635:                                       ; preds = %if.end.634
  br label %do.body.636

do.body.636:                                      ; preds = %do.end.635
  %424 = load %struct._object*, %struct._object** %slots, align 8
  store %struct._object* %424, %struct._object** %_py_xdecref_tmp638, align 8
  %425 = load %struct._object*, %struct._object** %_py_xdecref_tmp638, align 8
  %cmp639 = icmp ne %struct._object* %425, null
  br i1 %cmp639, label %if.then.641, label %if.end.655

if.then.641:                                      ; preds = %do.body.636
  br label %do.body.642

do.body.642:                                      ; preds = %if.then.641
  %426 = load %struct._object*, %struct._object** %_py_xdecref_tmp638, align 8
  store %struct._object* %426, %struct._object** %_py_decref_tmp644, align 8
  %427 = load %struct._object*, %struct._object** %_py_decref_tmp644, align 8
  %ob_refcnt645 = getelementptr inbounds %struct._object, %struct._object* %427, i32 0, i32 0
  %428 = load i64, i64* %ob_refcnt645, align 8
  %dec646 = add i64 %428, -1
  store i64 %dec646, i64* %ob_refcnt645, align 8
  %cmp647 = icmp ne i64 %dec646, 0
  br i1 %cmp647, label %if.then.649, label %if.else.650

if.then.649:                                      ; preds = %do.body.642
  br label %if.end.653

if.else.650:                                      ; preds = %do.body.642
  %429 = load %struct._object*, %struct._object** %_py_decref_tmp644, align 8
  %ob_type651 = getelementptr inbounds %struct._object, %struct._object* %429, i32 0, i32 1
  %430 = load %struct._typeobject*, %struct._typeobject** %ob_type651, align 8
  %tp_dealloc652 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %430, i32 0, i32 4
  %431 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc652, align 8
  %432 = load %struct._object*, %struct._object** %_py_decref_tmp644, align 8
  call void %431(%struct._object* %432)
  br label %if.end.653

if.end.653:                                       ; preds = %if.else.650, %if.then.649
  br label %do.end.654

do.end.654:                                       ; preds = %if.end.653
  br label %if.end.655

if.end.655:                                       ; preds = %do.end.654, %do.body.636
  br label %do.end.656

do.end.656:                                       ; preds = %if.end.655
  br label %do.body.657

do.body.657:                                      ; preds = %do.end.656
  %433 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %434 = bitcast %struct._typeobject* %433 to %struct._object*
  store %struct._object* %434, %struct._object** %_py_xdecref_tmp659, align 8
  %435 = load %struct._object*, %struct._object** %_py_xdecref_tmp659, align 8
  %cmp660 = icmp ne %struct._object* %435, null
  br i1 %cmp660, label %if.then.662, label %if.end.676

if.then.662:                                      ; preds = %do.body.657
  br label %do.body.663

do.body.663:                                      ; preds = %if.then.662
  %436 = load %struct._object*, %struct._object** %_py_xdecref_tmp659, align 8
  store %struct._object* %436, %struct._object** %_py_decref_tmp665, align 8
  %437 = load %struct._object*, %struct._object** %_py_decref_tmp665, align 8
  %ob_refcnt666 = getelementptr inbounds %struct._object, %struct._object* %437, i32 0, i32 0
  %438 = load i64, i64* %ob_refcnt666, align 8
  %dec667 = add i64 %438, -1
  store i64 %dec667, i64* %ob_refcnt666, align 8
  %cmp668 = icmp ne i64 %dec667, 0
  br i1 %cmp668, label %if.then.670, label %if.else.671

if.then.670:                                      ; preds = %do.body.663
  br label %if.end.674

if.else.671:                                      ; preds = %do.body.663
  %439 = load %struct._object*, %struct._object** %_py_decref_tmp665, align 8
  %ob_type672 = getelementptr inbounds %struct._object, %struct._object* %439, i32 0, i32 1
  %440 = load %struct._typeobject*, %struct._typeobject** %ob_type672, align 8
  %tp_dealloc673 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %440, i32 0, i32 4
  %441 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc673, align 8
  %442 = load %struct._object*, %struct._object** %_py_decref_tmp665, align 8
  call void %441(%struct._object* %442)
  br label %if.end.674

if.end.674:                                       ; preds = %if.else.671, %if.then.670
  br label %do.end.675

do.end.675:                                       ; preds = %if.end.674
  br label %if.end.676

if.end.676:                                       ; preds = %do.end.675, %do.body.657
  br label %do.end.677

do.end.677:                                       ; preds = %if.end.676
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.677, %do.end.594, %if.then.39, %if.then.34, %if.then.30, %if.then.27, %if.then
  %443 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %443
}

declare void @PyObject_GC_Del(i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @type_is_gc(%struct._typeobject* %type) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %conv = trunc i64 %and to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define internal void @object_dealloc(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 38
  %2 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to i8*
  call void %2(i8* %4)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_repr(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %type = alloca %struct._typeobject*, align 8
  %mod = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %rtn = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_xdecref_tmp38 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp55 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call = call %struct._object* @type_module(%struct._typeobject* %2, i8* null)
  store %struct._object* %call, %struct._object** %mod, align 8
  %3 = load %struct._object*, %struct._object** %mod, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @PyErr_Clear()
  br label %if.end.9

if.else:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %mod, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 268435456
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.end.8, label %if.then.3

if.then.3:                                        ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %7 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %do.body
  br label %if.end

if.else.6:                                        ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  store %struct._object* null, %struct._object** %mod, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %do.end, %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %if.then
  %14 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call10 = call %struct._object* @type_qualname(%struct._typeobject* %14, i8* null)
  store %struct._object* %call10, %struct._object** %name, align 8
  %15 = load %struct._object*, %struct._object** %name, align 8
  %cmp11 = icmp eq %struct._object* %15, null
  br i1 %cmp11, label %if.then.12, label %if.end.29

if.then.12:                                       ; preds = %if.end.9
  br label %do.body.13

do.body.13:                                       ; preds = %if.then.12
  %16 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %16, %struct._object** %_py_xdecref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp14 = icmp ne %struct._object* %17, null
  br i1 %cmp14, label %if.then.15, label %if.end.27

if.then.15:                                       ; preds = %do.body.13
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  %18 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp17, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %20, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %23(%struct._object* %24)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %if.end.27

if.end.27:                                        ; preds = %do.end.26, %do.body.13
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.29:                                        ; preds = %if.end.9
  %25 = load %struct._object*, %struct._object** %mod, align 8
  %cmp30 = icmp ne %struct._object* %25, null
  br i1 %cmp30, label %land.lhs.true, label %if.else.34

land.lhs.true:                                    ; preds = %if.end.29
  %26 = load %struct._object*, %struct._object** %mod, align 8
  %call31 = call i32 @_PyUnicode_CompareWithId(%struct._object* %26, %struct._Py_Identifier* @PyId_builtins)
  %tobool = icmp ne i32 %call31, 0
  br i1 %tobool, label %if.then.32, label %if.else.34

if.then.32:                                       ; preds = %land.lhs.true
  %27 = load %struct._object*, %struct._object** %mod, align 8
  %28 = load %struct._object*, %struct._object** %name, align 8
  %29 = load %struct._object*, %struct._object** %self.addr, align 8
  %call33 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.261, i32 0, i32 0), %struct._object* %27, %struct._object* %28, %struct._object* %29)
  store %struct._object* %call33, %struct._object** %rtn, align 8
  br label %if.end.36

if.else.34:                                       ; preds = %land.lhs.true, %if.end.29
  %30 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 1
  %31 = load i8*, i8** %tp_name, align 8
  %32 = load %struct._object*, %struct._object** %self.addr, align 8
  %call35 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.172, i32 0, i32 0), i8* %31, %struct._object* %32)
  store %struct._object* %call35, %struct._object** %rtn, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.34, %if.then.32
  br label %do.body.37

do.body.37:                                       ; preds = %if.end.36
  %33 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %33, %struct._object** %_py_xdecref_tmp38, align 8
  %34 = load %struct._object*, %struct._object** %_py_xdecref_tmp38, align 8
  %cmp39 = icmp ne %struct._object* %34, null
  br i1 %cmp39, label %if.then.40, label %if.end.52

if.then.40:                                       ; preds = %do.body.37
  br label %do.body.41

do.body.41:                                       ; preds = %if.then.40
  %35 = load %struct._object*, %struct._object** %_py_xdecref_tmp38, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp42, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %37, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %40(%struct._object* %41)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %if.end.52

if.end.52:                                        ; preds = %do.end.51, %do.body.37
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.end.53
  %42 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp55, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt56, align 8
  %dec57 = add i64 %44, -1
  store i64 %dec57, i64* %ob_refcnt56, align 8
  %cmp58 = icmp ne i64 %dec57, 0
  br i1 %cmp58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.54
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.54
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  call void %47(%struct._object* %48)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  %49 = load %struct._object*, %struct._object** %rtn, align 8
  store %struct._object* %49, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.64, %do.end.28
  %50 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %50
}

declare i64 @_Py_HashPointer(i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_str(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %f = alloca %struct._object* (%struct._object*)*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_repr = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 9
  %2 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_repr, align 8
  store %struct._object* (%struct._object*)* %2, %struct._object* (%struct._object*)** %f, align 8
  %3 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %f, align 8
  %cmp = icmp eq %struct._object* (%struct._object*)* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* (%struct._object*)* @object_repr, %struct._object* (%struct._object*)** %f, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %f, align 8
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* %4(%struct._object* %5)
  ret %struct._object* %call
}

declare %struct._object* @PyObject_GenericGetAttr(%struct._object*, %struct._object*) #1

declare i32 @PyObject_GenericSetAttr(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_richcompare(%struct._object* %self, %struct._object* %other, i32 %op) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %res = alloca %struct._object*, align 8
  %ok = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %cmp = icmp eq %struct._object* %1, %2
  %cond = select i1 %cmp, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object* @_Py_NotImplementedStruct
  store %struct._object* %cond, %struct._object** %res, align 8
  %3 = load %struct._object*, %struct._object** %res, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = load %struct._object*, %struct._object** %other.addr, align 8
  %call = call %struct._object* @PyObject_RichCompare(%struct._object* %5, %struct._object* %6, i32 2)
  store %struct._object* %call, %struct._object** %res, align 8
  %7 = load %struct._object*, %struct._object** %res, align 8
  %cmp2 = icmp ne %struct._object* %7, null
  br i1 %cmp2, label %land.lhs.true, label %if.end.17

land.lhs.true:                                    ; preds = %sw.bb.1
  %8 = load %struct._object*, %struct._object** %res, align 8
  %cmp3 = icmp ne %struct._object* %8, @_Py_NotImplementedStruct
  br i1 %cmp3, label %if.then, label %if.end.17

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct._object*, %struct._object** %res, align 8
  %call4 = call i32 @PyObject_IsTrue(%struct._object* %9)
  store i32 %call4, i32* %ok, align 4
  br label %do.body

do.body:                                          ; preds = %if.then
  %10 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt5 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt5, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt5, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load i32, i32* %ok, align 4
  %cmp8 = icmp slt i32 %17, 0
  br i1 %cmp8, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %do.end
  store %struct._object* null, %struct._object** %res, align 8
  br label %if.end.16

if.else.10:                                       ; preds = %do.end
  %18 = load i32, i32* %ok, align 4
  %tobool = icmp ne i32 %18, 0
  br i1 %tobool, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %if.else.10
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %res, align 8
  br label %if.end.13

if.else.12:                                       ; preds = %if.else.10
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %res, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.12, %if.then.11
  %19 = load %struct._object*, %struct._object** %res, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt14, align 8
  %inc15 = add i64 %20, 1
  store i64 %inc15, i64* %ob_refcnt14, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.13, %if.then.9
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %land.lhs.true, %sw.bb.1
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %res, align 8
  %21 = load %struct._object*, %struct._object** %res, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt18, align 8
  %inc19 = add i64 %22, 1
  store i64 %inc19, i64* %ob_refcnt18, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.17, %sw.bb
  %23 = load %struct._object*, %struct._object** %res, align 8
  ret %struct._object* %23
}

; Function Attrs: nounwind uwtable
define internal i32 @object_init(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %type = alloca %struct._typeobject*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store i32 0, i32* %err, align 4
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %3 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 @excess_args(%struct._object* %2, %struct._object* %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 37
  %5 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp = icmp eq %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %5, @object_new
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %6 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_init = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 35
  %7 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init, align 8
  %cmp1 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %7, @object_init
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.299, i32 0, i32 0))
  store i32 -1, i32* %err, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false, %entry
  %9 = load i32, i32* %err, align 4
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %abstract_methods = alloca %struct._object*, align 8
  %builtins = alloca %struct._object*, align 8
  %sorted = alloca %struct._object*, align 8
  %sorted_methods = alloca %struct._object*, align 8
  %joined = alloca %struct._object*, align 8
  %comma = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp38 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_xdecref_tmp55 = alloca %struct._object*, align 8
  %_py_decref_tmp59 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 @excess_args(%struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_init = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 35
  %3 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init, align 8
  %cmp = icmp eq i32 (%struct._object*, %struct._object*, %struct._object*)* %3, @object_init
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 37
  %5 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp1 = icmp ne %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %5, @object_new
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.300, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 19
  %8 = load i64, i64* %tp_flags, align 8
  %and = and i64 %8, 1048576
  %tobool2 = icmp ne i64 %and, 0
  br i1 %tobool2, label %if.then.3, label %if.end.71

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %abstract_methods, align 8
  store %struct._object* null, %struct._object** %sorted_methods, align 8
  store %struct._object* null, %struct._object** %joined, align 8
  %9 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call4 = call %struct._object* @type_abstractmethods(%struct._typeobject* %9, i8* null)
  store %struct._object* %call4, %struct._object** %abstract_methods, align 8
  %10 = load %struct._object*, %struct._object** %abstract_methods, align 8
  %cmp5 = icmp eq %struct._object* %10, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.3
  br label %error

if.end.7:                                         ; preds = %if.then.3
  %call8 = call %struct._object* @PyEval_GetBuiltins()
  store %struct._object* %call8, %struct._object** %builtins, align 8
  %11 = load %struct._object*, %struct._object** %builtins, align 8
  %cmp9 = icmp eq %struct._object* %11, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.7
  br label %error

if.end.11:                                        ; preds = %if.end.7
  %12 = load %struct._object*, %struct._object** %builtins, align 8
  %call12 = call %struct._object* @_PyDict_GetItemId(%struct._object* %12, %struct._Py_Identifier* @object_new.PyId_sorted)
  store %struct._object* %call12, %struct._object** %sorted, align 8
  %13 = load %struct._object*, %struct._object** %sorted, align 8
  %cmp13 = icmp eq %struct._object* %13, null
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.11
  br label %error

if.end.15:                                        ; preds = %if.end.11
  %14 = load %struct._object*, %struct._object** %sorted, align 8
  %15 = load %struct._object*, %struct._object** %abstract_methods, align 8
  %call16 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %14, %struct._object* %15, i8* null)
  store %struct._object* %call16, %struct._object** %sorted_methods, align 8
  %16 = load %struct._object*, %struct._object** %sorted_methods, align 8
  %cmp17 = icmp eq %struct._object* %16, null
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end.15
  br label %error

if.end.19:                                        ; preds = %if.end.15
  %call20 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @object_new.comma_id)
  store %struct._object* %call20, %struct._object** %comma, align 8
  %17 = load %struct._object*, %struct._object** %comma, align 8
  %cmp21 = icmp eq %struct._object* %17, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.19
  br label %error

if.end.23:                                        ; preds = %if.end.19
  %18 = load %struct._object*, %struct._object** %comma, align 8
  %19 = load %struct._object*, %struct._object** %sorted_methods, align 8
  %call24 = call %struct._object* @PyUnicode_Join(%struct._object* %18, %struct._object* %19)
  store %struct._object* %call24, %struct._object** %joined, align 8
  %20 = load %struct._object*, %struct._object** %joined, align 8
  %cmp25 = icmp eq %struct._object* %20, null
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.23
  br label %error

if.end.27:                                        ; preds = %if.end.23
  %21 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %22 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 1
  %23 = load i8*, i8** %tp_name, align 8
  %24 = load %struct._object*, %struct._object** %joined, align 8
  %call28 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %21, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.303, i32 0, i32 0), i8* %23, %struct._object* %24)
  br label %error

error:                                            ; preds = %if.end.27, %if.then.26, %if.then.22, %if.then.18, %if.then.14, %if.then.10, %if.then.6
  br label %do.body

do.body:                                          ; preds = %error
  %25 = load %struct._object*, %struct._object** %joined, align 8
  store %struct._object* %25, %struct._object** %_py_xdecref_tmp, align 8
  %26 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp29 = icmp ne %struct._object* %26, null
  br i1 %cmp29, label %if.then.30, label %if.end.35

if.then.30:                                       ; preds = %do.body
  br label %do.body.31

do.body.31:                                       ; preds = %if.then.30
  %27 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %29, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp32 = icmp ne i64 %dec, 0
  br i1 %cmp32, label %if.then.33, label %if.else

if.then.33:                                       ; preds = %do.body.31
  br label %if.end.34

if.else:                                          ; preds = %do.body.31
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %32(%struct._object* %33)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else, %if.then.33
  br label %do.end

do.end:                                           ; preds = %if.end.34
  br label %if.end.35

if.end.35:                                        ; preds = %do.end, %do.body
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  br label %do.body.37

do.body.37:                                       ; preds = %do.end.36
  %34 = load %struct._object*, %struct._object** %sorted_methods, align 8
  store %struct._object* %34, %struct._object** %_py_xdecref_tmp38, align 8
  %35 = load %struct._object*, %struct._object** %_py_xdecref_tmp38, align 8
  %cmp39 = icmp ne %struct._object* %35, null
  br i1 %cmp39, label %if.then.40, label %if.end.52

if.then.40:                                       ; preds = %do.body.37
  br label %do.body.41

do.body.41:                                       ; preds = %if.then.40
  %36 = load %struct._object*, %struct._object** %_py_xdecref_tmp38, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp42, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %38, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %41(%struct._object* %42)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %if.end.52

if.end.52:                                        ; preds = %do.end.51, %do.body.37
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.end.53
  %43 = load %struct._object*, %struct._object** %abstract_methods, align 8
  store %struct._object* %43, %struct._object** %_py_xdecref_tmp55, align 8
  %44 = load %struct._object*, %struct._object** %_py_xdecref_tmp55, align 8
  %cmp56 = icmp ne %struct._object* %44, null
  br i1 %cmp56, label %if.then.57, label %if.end.69

if.then.57:                                       ; preds = %do.body.54
  br label %do.body.58

do.body.58:                                       ; preds = %if.then.57
  %45 = load %struct._object*, %struct._object** %_py_xdecref_tmp55, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp59, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt60, align 8
  %dec61 = add i64 %47, -1
  store i64 %dec61, i64* %ob_refcnt60, align 8
  %cmp62 = icmp ne i64 %dec61, 0
  br i1 %cmp62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %do.body.58
  br label %if.end.67

if.else.64:                                       ; preds = %do.body.58
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  call void %50(%struct._object* %51)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  br label %if.end.69

if.end.69:                                        ; preds = %do.end.68, %do.body.54
  br label %do.end.70

do.end.70:                                        ; preds = %if.end.69
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.71:                                        ; preds = %if.end
  %52 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 36
  %53 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %54 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call72 = call %struct._object* %53(%struct._typeobject* %54, i64 0)
  store %struct._object* %call72, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.71, %do.end.70, %if.then
  %55 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %55
}

declare void @PyObject_Free(i8*) #1

declare %struct._object* @PyTuple_New(i64) #1

declare %struct._object* @PyDict_New() #1

; Function Attrs: nounwind uwtable
define internal i32 @add_operators(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %dict = alloca %struct._object*, align 8
  %p = alloca %struct.wrapperbase*, align 8
  %descr = alloca %struct._object*, align 8
  %ptr = alloca i8**, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  call void @init_slotdefs()
  store %struct.wrapperbase* getelementptr inbounds ([87 x %struct.wrapperbase], [87 x %struct.wrapperbase]* @slotdefs, i32 0, i32 0), %struct.wrapperbase** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %2, i32 0, i32 0
  %3 = load i8*, i8** %name, align 8
  %tobool = icmp ne i8* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %wrapper = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %4, i32 0, i32 3
  %5 = load %struct._object* (%struct._object*, %struct._object*, i8*)*, %struct._object* (%struct._object*, %struct._object*, i8*)** %wrapper, align 8
  %cmp = icmp eq %struct._object* (%struct._object*, %struct._object*, i8*)* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %7 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %offset = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %7, i32 0, i32 1
  %8 = load i32, i32* %offset, align 4
  %call = call i8** @slotptr(%struct._typeobject* %6, i32 %8)
  store i8** %call, i8*** %ptr, align 8
  %9 = load i8**, i8*** %ptr, align 8
  %tobool1 = icmp ne i8** %9, null
  br i1 %tobool1, label %lor.lhs.false, label %if.then.3

lor.lhs.false:                                    ; preds = %if.end
  %10 = load i8**, i8*** %ptr, align 8
  %11 = load i8*, i8** %10, align 8
  %tobool2 = icmp ne i8* %11, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  br label %for.inc

if.end.4:                                         ; preds = %lor.lhs.false
  %12 = load %struct._object*, %struct._object** %dict, align 8
  %13 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %13, i32 0, i32 6
  %14 = load %struct._object*, %struct._object** %name_strobj, align 8
  %call5 = call %struct._object* @PyDict_GetItem(%struct._object* %12, %struct._object* %14)
  %tobool6 = icmp ne %struct._object* %call5, null
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  br label %for.inc

if.end.8:                                         ; preds = %if.end.4
  %15 = load i8**, i8*** %ptr, align 8
  %16 = load i8*, i8** %15, align 8
  %cmp9 = icmp eq i8* %16, bitcast (i64 (%struct._object*)* @PyObject_HashNotImplemented to i8*)
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end.8
  %17 = load %struct._object*, %struct._object** %dict, align 8
  %18 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj11 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %18, i32 0, i32 6
  %19 = load %struct._object*, %struct._object** %name_strobj11, align 8
  %call12 = call i32 @PyDict_SetItem(%struct._object* %17, %struct._object* %19, %struct._object* @_Py_NoneStruct)
  %cmp13 = icmp slt i32 %call12, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.10
  store i32 -1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.then.10
  br label %if.end.29

if.else:                                          ; preds = %if.end.8
  %20 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %21 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %22 = load i8**, i8*** %ptr, align 8
  %23 = load i8*, i8** %22, align 8
  %call16 = call %struct._object* @PyDescr_NewWrapper(%struct._typeobject* %20, %struct.wrapperbase* %21, i8* %23)
  store %struct._object* %call16, %struct._object** %descr, align 8
  %24 = load %struct._object*, %struct._object** %descr, align 8
  %cmp17 = icmp eq %struct._object* %24, null
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.else
  %25 = load %struct._object*, %struct._object** %dict, align 8
  %26 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj20 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %26, i32 0, i32 6
  %27 = load %struct._object*, %struct._object** %name_strobj20, align 8
  %28 = load %struct._object*, %struct._object** %descr, align 8
  %call21 = call i32 @PyDict_SetItem(%struct._object* %25, %struct._object* %27, %struct._object* %28)
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.19
  store i32 -1, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.end.19
  br label %do.body

do.body:                                          ; preds = %if.end.24
  %29 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %31, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp25 = icmp ne i64 %dec, 0
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %do.body
  br label %if.end.28

if.else.27:                                       ; preds = %do.body
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %34(%struct._object* %35)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.27, %if.then.26
  br label %do.end

do.end:                                           ; preds = %if.end.28
  br label %if.end.29

if.end.29:                                        ; preds = %do.end, %if.end.15
  br label %for.inc

for.inc:                                          ; preds = %if.end.29, %if.then.7, %if.then.3, %if.then
  %36 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %incdec.ptr = getelementptr %struct.wrapperbase, %struct.wrapperbase* %36, i32 1
  store %struct.wrapperbase* %incdec.ptr, %struct.wrapperbase** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %37 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 37
  %38 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp30 = icmp ne %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %38, null
  br i1 %cmp30, label %if.then.31, label %if.end.36

if.then.31:                                       ; preds = %for.end
  %39 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call32 = call i32 @add_tp_new_wrapper(%struct._typeobject* %39)
  %cmp33 = icmp slt i32 %call32, 0
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.31
  store i32 -1, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.31
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %for.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.34, %if.then.23, %if.then.18, %if.then.14
  %40 = load i32, i32* %retval
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal i32 @add_methods(%struct._typeobject* %type, %struct.PyMethodDef* %meth) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %meth.addr = alloca %struct.PyMethodDef*, align 8
  %dict = alloca %struct._object*, align 8
  %descr = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %cfunc = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct.PyMethodDef* %meth, %struct.PyMethodDef** %meth.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %ml_name = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %2, i32 0, i32 0
  %3 = load i8*, i8** %ml_name, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._object*, %struct._object** %dict, align 8
  %5 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %ml_name1 = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %5, i32 0, i32 0
  %6 = load i8*, i8** %ml_name1, align 8
  %call = call %struct._object* @PyDict_GetItemString(%struct._object* %4, i8* %6)
  %tobool = icmp ne %struct._object* %call, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %7 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %ml_flags = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %7, i32 0, i32 2
  %8 = load i32, i32* %ml_flags, align 4
  %and = and i32 %8, 64
  %tobool2 = icmp ne i32 %and, 0
  br i1 %tobool2, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc

if.end:                                           ; preds = %land.lhs.true, %for.body
  %9 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %ml_flags3 = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %9, i32 0, i32 2
  %10 = load i32, i32* %ml_flags3, align 4
  %and4 = and i32 %10, 16
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end
  %11 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %ml_flags7 = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %11, i32 0, i32 2
  %12 = load i32, i32* %ml_flags7, align 4
  %and8 = and i32 %12, 32
  %tobool9 = icmp ne i32 %and8, 0
  br i1 %tobool9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.6
  %13 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.304, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.6
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %15 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %call12 = call %struct._object* @PyDescr_NewClassMethod(%struct._typeobject* %14, %struct.PyMethodDef* %15)
  store %struct._object* %call12, %struct._object** %descr, align 8
  br label %if.end.29

if.else:                                          ; preds = %if.end
  %16 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %ml_flags13 = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %16, i32 0, i32 2
  %17 = load i32, i32* %ml_flags13, align 4
  %and14 = and i32 %17, 32
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %if.then.16, label %if.else.26

if.then.16:                                       ; preds = %if.else
  %18 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %19 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %20 = bitcast %struct._typeobject* %19 to %struct._object*
  %call17 = call %struct._object* @PyCFunction_NewEx(%struct.PyMethodDef* %18, %struct._object* %20, %struct._object* null)
  store %struct._object* %call17, %struct._object** %cfunc, align 8
  %21 = load %struct._object*, %struct._object** %cfunc, align 8
  %cmp18 = icmp eq %struct._object* %21, null
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.16
  store i32 -1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.then.16
  %22 = load %struct._object*, %struct._object** %cfunc, align 8
  %call21 = call %struct._object* @PyStaticMethod_New(%struct._object* %22)
  store %struct._object* %call21, %struct._object** %descr, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.20
  %23 = load %struct._object*, %struct._object** %cfunc, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %25, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.25

if.else.24:                                       ; preds = %do.body
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %28(%struct._object* %29)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.25
  br label %if.end.28

if.else.26:                                       ; preds = %if.else
  %30 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %31 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %call27 = call %struct._object* @PyDescr_NewMethod(%struct._typeobject* %30, %struct.PyMethodDef* %31)
  store %struct._object* %call27, %struct._object** %descr, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.26, %do.end
  br label %if.end.29

if.end.29:                                        ; preds = %if.end.28, %if.end.11
  %32 = load %struct._object*, %struct._object** %descr, align 8
  %cmp30 = icmp eq %struct._object* %32, null
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.29
  store i32 -1, i32* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.29
  %33 = load %struct._object*, %struct._object** %dict, align 8
  %34 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %ml_name33 = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %34, i32 0, i32 0
  %35 = load i8*, i8** %ml_name33, align 8
  %36 = load %struct._object*, %struct._object** %descr, align 8
  %call34 = call i32 @PyDict_SetItemString(%struct._object* %33, i8* %35, %struct._object* %36)
  store i32 %call34, i32* %err, align 4
  br label %do.body.35

do.body.35:                                       ; preds = %if.end.32
  %37 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp36, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt37, align 8
  %dec38 = add i64 %39, -1
  store i64 %dec38, i64* %ob_refcnt37, align 8
  %cmp39 = icmp ne i64 %dec38, 0
  br i1 %cmp39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %do.body.35
  br label %if.end.44

if.else.41:                                       ; preds = %do.body.35
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  call void %42(%struct._object* %43)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  %44 = load i32, i32* %err, align 4
  %cmp46 = icmp slt i32 %44, 0
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %do.end.45
  store i32 -1, i32* %retval
  br label %return

if.end.48:                                        ; preds = %do.end.45
  br label %for.inc

for.inc:                                          ; preds = %if.end.48, %if.then
  %45 = load %struct.PyMethodDef*, %struct.PyMethodDef** %meth.addr, align 8
  %incdec.ptr = getelementptr %struct.PyMethodDef, %struct.PyMethodDef* %45, i32 1
  store %struct.PyMethodDef* %incdec.ptr, %struct.PyMethodDef** %meth.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.47, %if.then.31, %if.then.19, %if.then.10
  %46 = load i32, i32* %retval
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal i32 @add_members(%struct._typeobject* %type, %struct.PyMemberDef* %memb) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %memb.addr = alloca %struct.PyMemberDef*, align 8
  %dict = alloca %struct._object*, align 8
  %descr = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct.PyMemberDef* %memb, %struct.PyMemberDef** %memb.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.PyMemberDef*, %struct.PyMemberDef** %memb.addr, align 8
  %name = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %2, i32 0, i32 0
  %3 = load i8*, i8** %name, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._object*, %struct._object** %dict, align 8
  %5 = load %struct.PyMemberDef*, %struct.PyMemberDef** %memb.addr, align 8
  %name1 = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %5, i32 0, i32 0
  %6 = load i8*, i8** %name1, align 8
  %call = call %struct._object* @PyDict_GetItemString(%struct._object* %4, i8* %6)
  %tobool = icmp ne %struct._object* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %8 = load %struct.PyMemberDef*, %struct.PyMemberDef** %memb.addr, align 8
  %call2 = call %struct._object* @PyDescr_NewMember(%struct._typeobject* %7, %struct.PyMemberDef* %8)
  store %struct._object* %call2, %struct._object** %descr, align 8
  %9 = load %struct._object*, %struct._object** %descr, align 8
  %cmp3 = icmp eq %struct._object* %9, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %dict, align 8
  %11 = load %struct.PyMemberDef*, %struct.PyMemberDef** %memb.addr, align 8
  %name6 = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %11, i32 0, i32 0
  %12 = load i8*, i8** %name6, align 8
  %13 = load %struct._object*, %struct._object** %descr, align 8
  %call7 = call i32 @PyDict_SetItemString(%struct._object* %10, i8* %12, %struct._object* %13)
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.5
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  br label %do.body

do.body:                                          ; preds = %if.end.10
  %14 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %for.inc

for.inc:                                          ; preds = %do.end, %if.then
  %21 = load %struct.PyMemberDef*, %struct.PyMemberDef** %memb.addr, align 8
  %incdec.ptr = getelementptr %struct.PyMemberDef, %struct.PyMemberDef* %21, i32 1
  store %struct.PyMemberDef* %incdec.ptr, %struct.PyMemberDef** %memb.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.9, %if.then.4
  %22 = load i32, i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @add_getset(%struct._typeobject* %type, %struct.PyGetSetDef* %gsp) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %gsp.addr = alloca %struct.PyGetSetDef*, align 8
  %dict = alloca %struct._object*, align 8
  %descr = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct.PyGetSetDef* %gsp, %struct.PyGetSetDef** %gsp.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %name = getelementptr inbounds %struct.PyGetSetDef, %struct.PyGetSetDef* %2, i32 0, i32 0
  %3 = load i8*, i8** %name, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._object*, %struct._object** %dict, align 8
  %5 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %name1 = getelementptr inbounds %struct.PyGetSetDef, %struct.PyGetSetDef* %5, i32 0, i32 0
  %6 = load i8*, i8** %name1, align 8
  %call = call %struct._object* @PyDict_GetItemString(%struct._object* %4, i8* %6)
  %tobool = icmp ne %struct._object* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.inc

if.end:                                           ; preds = %for.body
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %8 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %call2 = call %struct._object* @PyDescr_NewGetSet(%struct._typeobject* %7, %struct.PyGetSetDef* %8)
  store %struct._object* %call2, %struct._object** %descr, align 8
  %9 = load %struct._object*, %struct._object** %descr, align 8
  %cmp3 = icmp eq %struct._object* %9, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %dict, align 8
  %11 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %name6 = getelementptr inbounds %struct.PyGetSetDef, %struct.PyGetSetDef* %11, i32 0, i32 0
  %12 = load i8*, i8** %name6, align 8
  %13 = load %struct._object*, %struct._object** %descr, align 8
  %call7 = call i32 @PyDict_SetItemString(%struct._object* %10, i8* %12, %struct._object* %13)
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.5
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  br label %do.body

do.body:                                          ; preds = %if.end.10
  %14 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %for.inc

for.inc:                                          ; preds = %do.end, %if.then
  %21 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %incdec.ptr = getelementptr %struct.PyGetSetDef, %struct.PyGetSetDef* %21, i32 1
  store %struct.PyGetSetDef* %incdec.ptr, %struct.PyGetSetDef** %gsp.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.9, %if.then.4
  %22 = load i32, i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal i32 @mro_internal(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %mro = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %tuple = alloca %struct._object*, align 8
  %checkit = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %cls = alloca %struct._object*, align 8
  %solid = alloca %struct._typeobject*, align 8
  %t = alloca %struct._typeobject*, align 8
  %_py_decref_tmp38 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i32 0, i32* %checkit, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %2, @PyType_Type
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @mro_implementation(%struct._typeobject* %3)
  store %struct._object* %call, %struct._object** %result, align 8
  br label %if.end.10

if.else:                                          ; preds = %entry
  store i32 1, i32* %checkit, align 4
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %5 = bitcast %struct._typeobject* %4 to %struct._object*
  %call1 = call %struct._object* @lookup_method(%struct._object* %5, %struct._Py_Identifier* @mro_internal.PyId_mro)
  store %struct._object* %call1, %struct._object** %mro, align 8
  %6 = load %struct._object*, %struct._object** %mro, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  %7 = load %struct._object*, %struct._object** %mro, align 8
  %call4 = call %struct._object* @PyObject_CallObject(%struct._object* %7, %struct._object* null)
  store %struct._object* %call4, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %mro, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %do.body
  br label %if.end.9

if.else.7:                                        ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else.7, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %if.then
  %15 = load %struct._object*, %struct._object** %result, align 8
  %cmp11 = icmp eq %struct._object* %15, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.10
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.10
  %16 = load %struct._object*, %struct._object** %result, align 8
  %call14 = call %struct._object* @PySequence_Tuple(%struct._object* %16)
  store %struct._object* %call14, %struct._object** %tuple, align 8
  br label %do.body.15

do.body.15:                                       ; preds = %if.end.13
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp16, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %19, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %22(%struct._object* %23)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  %24 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp26 = icmp eq %struct._object* %24, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %do.end.25
  store i32 -1, i32* %retval
  br label %return

if.end.28:                                        ; preds = %do.end.25
  %25 = load i32, i32* %checkit, align 4
  %tobool = icmp ne i32 %25, 0
  br i1 %tobool, label %if.then.29, label %if.end.67

if.then.29:                                       ; preds = %if.end.28
  %26 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call30 = call %struct._typeobject* @solid_base(%struct._typeobject* %26)
  store %struct._typeobject* %call30, %struct._typeobject** %solid, align 8
  %27 = load %struct._object*, %struct._object** %tuple, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %28, i32 0, i32 1
  %29 = load i64, i64* %ob_size, align 8
  store i64 %29, i64* %len, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.29
  %30 = load i64, i64* %i, align 8
  %31 = load i64, i64* %len, align 8
  %cmp31 = icmp slt i64 %30, %31
  br i1 %cmp31, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %32 = load i64, i64* %i, align 8
  %33 = load %struct._object*, %struct._object** %tuple, align 8
  %34 = bitcast %struct._object* %33 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %34, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %32
  %35 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %35, %struct._object** %cls, align 8
  %36 = load %struct._object*, %struct._object** %cls, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 19
  %38 = load i64, i64* %tp_flags, align 8
  %and = and i64 %38, 2147483648
  %cmp33 = icmp ne i64 %and, 0
  br i1 %cmp33, label %if.end.48, label %if.then.34

if.then.34:                                       ; preds = %for.body
  %39 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %40 = load %struct._object*, %struct._object** %cls, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 1
  %42 = load i8*, i8** %tp_name, align 8
  %call36 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %39, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.305, i32 0, i32 0), i8* %42)
  br label %do.body.37

do.body.37:                                       ; preds = %if.then.34
  %43 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp38, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  %ob_refcnt39 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt39, align 8
  %dec40 = add i64 %45, -1
  store i64 %dec40, i64* %ob_refcnt39, align 8
  %cmp41 = icmp ne i64 %dec40, 0
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.37
  br label %if.end.46

if.else.43:                                       ; preds = %do.body.37
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8
  %tp_dealloc45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc45, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  call void %48(%struct._object* %49)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.then.42
  br label %do.end.47

do.end.47:                                        ; preds = %if.end.46
  store i32 -1, i32* %retval
  br label %return

if.end.48:                                        ; preds = %for.body
  %50 = load %struct._object*, %struct._object** %cls, align 8
  %51 = bitcast %struct._object* %50 to %struct._typeobject*
  store %struct._typeobject* %51, %struct._typeobject** %t, align 8
  %52 = load %struct._typeobject*, %struct._typeobject** %solid, align 8
  %53 = load %struct._typeobject*, %struct._typeobject** %t, align 8
  %call49 = call %struct._typeobject* @solid_base(%struct._typeobject* %53)
  %call50 = call i32 @PyType_IsSubtype(%struct._typeobject* %52, %struct._typeobject* %call49)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %if.end.66, label %if.then.52

if.then.52:                                       ; preds = %if.end.48
  %54 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %55 = load %struct._typeobject*, %struct._typeobject** %t, align 8
  %tp_name53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 1
  %56 = load i8*, i8** %tp_name53, align 8
  %call54 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %54, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.306, i32 0, i32 0), i8* %56)
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.52
  %57 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %57, %struct._object** %_py_decref_tmp56, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 0
  %59 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %59, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 1
  %61 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %61, i32 0, i32 4
  %62 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %62(%struct._object* %63)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  store i32 -1, i32* %retval
  br label %return

if.end.66:                                        ; preds = %if.end.48
  br label %for.inc

for.inc:                                          ; preds = %if.end.66
  %64 = load i64, i64* %i, align 8
  %inc = add i64 %64, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.67

if.end.67:                                        ; preds = %for.end, %if.end.28
  %65 = load %struct._object*, %struct._object** %tuple, align 8
  %66 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 41
  store %struct._object* %65, %struct._object** %tp_mro, align 8
  %67 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %68 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro68 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 41
  %69 = load %struct._object*, %struct._object** %tp_mro68, align 8
  call void @type_mro_modified(%struct._typeobject* %67, %struct._object* %69)
  %70 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %71 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 40
  %72 = load %struct._object*, %struct._object** %tp_bases, align 8
  call void @type_mro_modified(%struct._typeobject* %70, %struct._object* %72)
  %73 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @PyType_Modified(%struct._typeobject* %73)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.67, %do.end.65, %do.end.47, %if.then.27, %if.then.12, %if.then.3
  %74 = load i32, i32* %retval
  ret i32 %74
}

; Function Attrs: nounwind uwtable
define internal void @inherit_special(%struct._typeobject* %type, %struct._typeobject* %base) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %base.addr = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._typeobject* %base, %struct._typeobject** %base.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 16384
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end.19, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_flags1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags1, align 8
  %and2 = and i64 %3, 16384
  %tobool3 = icmp ne i64 %and2, 0
  br i1 %tobool3, label %land.lhs.true.4, label %if.end.19

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_traverse = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 21
  %5 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %tp_traverse, align 8
  %tobool5 = icmp ne i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* %5, null
  br i1 %tobool5, label %if.end.19, label %land.lhs.true.6

land.lhs.true.6:                                  ; preds = %land.lhs.true.4
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_clear = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 22
  %7 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_clear, align 8
  %tobool7 = icmp ne i32 (%struct._object*)* %7, null
  br i1 %tobool7, label %if.end.19, label %if.then

if.then:                                          ; preds = %land.lhs.true.6
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 19
  %9 = load i64, i64* %tp_flags8, align 8
  %or = or i64 %9, 16384
  store i64 %or, i64* %tp_flags8, align 8
  %10 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_traverse9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 21
  %11 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %tp_traverse9, align 8
  %cmp = icmp eq i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* %11, null
  br i1 %cmp, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %12 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_traverse11 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 21
  %13 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %tp_traverse11, align 8
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_traverse12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 21
  store i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* %13, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %tp_traverse12, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_clear13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 22
  %16 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_clear13, align 8
  %cmp14 = icmp eq i32 (%struct._object*)* %16, null
  br i1 %cmp14, label %if.then.15, label %if.end.18

if.then.15:                                       ; preds = %if.end
  %17 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_clear16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 22
  %18 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_clear16, align 8
  %19 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_clear17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 22
  store i32 (%struct._object*)* %18, i32 (%struct._object*)** %tp_clear17, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.15, %if.end
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %land.lhs.true.6, %land.lhs.true.4, %land.lhs.true, %entry
  %20 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %cmp20 = icmp ne %struct._typeobject* %20, @PyBaseObject_Type
  br i1 %cmp20, label %if.then.24, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.19
  %21 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 19
  %22 = load i64, i64* %tp_flags21, align 8
  %and22 = and i64 %22, 512
  %tobool23 = icmp ne i64 %and22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.30

if.then.24:                                       ; preds = %lor.lhs.false, %if.end.19
  %23 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 37
  %24 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp25 = icmp eq %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %24, null
  br i1 %cmp25, label %if.then.26, label %if.end.29

if.then.26:                                       ; preds = %if.then.24
  %25 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_new27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 37
  %26 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new27, align 8
  %27 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 37
  store %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %26, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new28, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.26, %if.then.24
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %lor.lhs.false
  %28 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 2
  %29 = load i64, i64* %tp_basicsize, align 8
  %cmp31 = icmp eq i64 %29, 0
  br i1 %cmp31, label %if.then.32, label %if.end.35

if.then.32:                                       ; preds = %if.end.30
  %30 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_basicsize33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 2
  %31 = load i64, i64* %tp_basicsize33, align 8
  %32 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_basicsize34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 2
  store i64 %31, i64* %tp_basicsize34, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.32, %if.end.30
  %33 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_itemsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 3
  %34 = load i64, i64* %tp_itemsize, align 8
  %cmp36 = icmp eq i64 %34, 0
  br i1 %cmp36, label %if.then.37, label %if.end.40

if.then.37:                                       ; preds = %if.end.35
  %35 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_itemsize38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 3
  %36 = load i64, i64* %tp_itemsize38, align 8
  %37 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_itemsize39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 3
  store i64 %36, i64* %tp_itemsize39, align 8
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.37, %if.end.35
  %38 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_weaklistoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 24
  %39 = load i64, i64* %tp_weaklistoffset, align 8
  %cmp41 = icmp eq i64 %39, 0
  br i1 %cmp41, label %if.then.42, label %if.end.45

if.then.42:                                       ; preds = %if.end.40
  %40 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_weaklistoffset43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 24
  %41 = load i64, i64* %tp_weaklistoffset43, align 8
  %42 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_weaklistoffset44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 24
  store i64 %41, i64* %tp_weaklistoffset44, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.42, %if.end.40
  %43 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 34
  %44 = load i64, i64* %tp_dictoffset, align 8
  %cmp46 = icmp eq i64 %44, 0
  br i1 %cmp46, label %if.then.47, label %if.end.50

if.then.47:                                       ; preds = %if.end.45
  %45 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dictoffset48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 34
  %46 = load i64, i64* %tp_dictoffset48, align 8
  %47 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dictoffset49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 34
  store i64 %46, i64* %tp_dictoffset49, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.then.47, %if.end.45
  %48 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %49 = load %struct._object*, %struct._object** @PyExc_BaseException, align 8
  %50 = bitcast %struct._object* %49 to %struct._typeobject*
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %48, %struct._typeobject* %50)
  %tobool51 = icmp ne i32 %call, 0
  br i1 %tobool51, label %if.then.52, label %if.else

if.then.52:                                       ; preds = %if.end.50
  %51 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 19
  %52 = load i64, i64* %tp_flags53, align 8
  %or54 = or i64 %52, 1073741824
  store i64 %or54, i64* %tp_flags53, align 8
  br label %if.end.103

if.else:                                          ; preds = %if.end.50
  %53 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %call55 = call i32 @PyType_IsSubtype(%struct._typeobject* %53, %struct._typeobject* @PyType_Type)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.then.57, label %if.else.60

if.then.57:                                       ; preds = %if.else
  %54 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 19
  %55 = load i64, i64* %tp_flags58, align 8
  %or59 = or i64 %55, 2147483648
  store i64 %or59, i64* %tp_flags58, align 8
  br label %if.end.102

if.else.60:                                       ; preds = %if.else
  %56 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %call61 = call i32 @PyType_IsSubtype(%struct._typeobject* %56, %struct._typeobject* @PyLong_Type)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %if.then.63, label %if.else.66

if.then.63:                                       ; preds = %if.else.60
  %57 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 19
  %58 = load i64, i64* %tp_flags64, align 8
  %or65 = or i64 %58, 16777216
  store i64 %or65, i64* %tp_flags64, align 8
  br label %if.end.101

if.else.66:                                       ; preds = %if.else.60
  %59 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %call67 = call i32 @PyType_IsSubtype(%struct._typeobject* %59, %struct._typeobject* @PyBytes_Type)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.then.69, label %if.else.72

if.then.69:                                       ; preds = %if.else.66
  %60 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags70 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 19
  %61 = load i64, i64* %tp_flags70, align 8
  %or71 = or i64 %61, 134217728
  store i64 %or71, i64* %tp_flags70, align 8
  br label %if.end.100

if.else.72:                                       ; preds = %if.else.66
  %62 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %call73 = call i32 @PyType_IsSubtype(%struct._typeobject* %62, %struct._typeobject* @PyUnicode_Type)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.then.75, label %if.else.78

if.then.75:                                       ; preds = %if.else.72
  %63 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 19
  %64 = load i64, i64* %tp_flags76, align 8
  %or77 = or i64 %64, 268435456
  store i64 %or77, i64* %tp_flags76, align 8
  br label %if.end.99

if.else.78:                                       ; preds = %if.else.72
  %65 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %call79 = call i32 @PyType_IsSubtype(%struct._typeobject* %65, %struct._typeobject* @PyTuple_Type)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.then.81, label %if.else.84

if.then.81:                                       ; preds = %if.else.78
  %66 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags82 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 19
  %67 = load i64, i64* %tp_flags82, align 8
  %or83 = or i64 %67, 67108864
  store i64 %or83, i64* %tp_flags82, align 8
  br label %if.end.98

if.else.84:                                       ; preds = %if.else.78
  %68 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %call85 = call i32 @PyType_IsSubtype(%struct._typeobject* %68, %struct._typeobject* @PyList_Type)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.then.87, label %if.else.90

if.then.87:                                       ; preds = %if.else.84
  %69 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 19
  %70 = load i64, i64* %tp_flags88, align 8
  %or89 = or i64 %70, 33554432
  store i64 %or89, i64* %tp_flags88, align 8
  br label %if.end.97

if.else.90:                                       ; preds = %if.else.84
  %71 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %call91 = call i32 @PyType_IsSubtype(%struct._typeobject* %71, %struct._typeobject* @PyDict_Type)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.then.93, label %if.end.96

if.then.93:                                       ; preds = %if.else.90
  %72 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags94 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 19
  %73 = load i64, i64* %tp_flags94, align 8
  %or95 = or i64 %73, 536870912
  store i64 %or95, i64* %tp_flags94, align 8
  br label %if.end.96

if.end.96:                                        ; preds = %if.then.93, %if.else.90
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %if.then.87
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %if.then.81
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %if.then.75
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.then.69
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %if.then.63
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %if.then.57
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.then.52
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @inherit_slots(%struct._typeobject* %type, %struct._typeobject* %base) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %base.addr = alloca %struct._typeobject*, align 8
  %basebase = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._typeobject* %base, %struct._typeobject** %base.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 10
  %1 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp = icmp ne %struct.PyNumberMethods* %1, null
  br i1 %cmp, label %land.lhs.true, label %if.end.664

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 10
  %3 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number1, align 8
  %cmp2 = icmp ne %struct.PyNumberMethods* %3, null
  br i1 %cmp2, label %if.then, label %if.end.664

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 30
  %5 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %5, %struct._typeobject** %basebase, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 10
  %7 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number3, align 8
  %cmp4 = icmp eq %struct.PyNumberMethods* %7, null
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  store %struct._typeobject* null, %struct._typeobject** %basebase, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number6 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number6, align 8
  %nb_add = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 0
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_add, align 8
  %tobool = icmp ne %struct._object* (%struct._object*, %struct._object*)* %10, null
  br i1 %tobool, label %if.end.23, label %land.lhs.true.7

land.lhs.true.7:                                  ; preds = %if.end
  %11 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 10
  %12 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %nb_add9 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %12, i32 0, i32 0
  %13 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_add9, align 8
  %cmp10 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %13, null
  br i1 %cmp10, label %land.lhs.true.11, label %if.end.23

land.lhs.true.11:                                 ; preds = %land.lhs.true.7
  %14 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp12 = icmp eq %struct._typeobject* %14, null
  br i1 %cmp12, label %if.then.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.11
  %15 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 10
  %16 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number13, align 8
  %nb_add14 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %16, i32 0, i32 0
  %17 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_add14, align 8
  %18 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number15 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 10
  %19 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number15, align 8
  %nb_add16 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %19, i32 0, i32 0
  %20 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_add16, align 8
  %cmp17 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %17, %20
  br i1 %cmp17, label %if.then.18, label %if.end.23

if.then.18:                                       ; preds = %lor.lhs.false, %land.lhs.true.11
  %21 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 10
  %22 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number19, align 8
  %nb_add20 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %22, i32 0, i32 0
  %23 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_add20, align 8
  %24 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 10
  %25 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number21, align 8
  %nb_add22 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %25, i32 0, i32 0
  store %struct._object* (%struct._object*, %struct._object*)* %23, %struct._object* (%struct._object*, %struct._object*)** %nb_add22, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.18, %lor.lhs.false, %land.lhs.true.7, %if.end
  %26 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 10
  %27 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number24, align 8
  %nb_subtract = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %27, i32 0, i32 1
  %28 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract, align 8
  %tobool25 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %28, null
  br i1 %tobool25, label %if.end.43, label %land.lhs.true.26

land.lhs.true.26:                                 ; preds = %if.end.23
  %29 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 10
  %30 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number27, align 8
  %nb_subtract28 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %30, i32 0, i32 1
  %31 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract28, align 8
  %cmp29 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %31, null
  br i1 %cmp29, label %land.lhs.true.30, label %if.end.43

land.lhs.true.30:                                 ; preds = %land.lhs.true.26
  %32 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp31 = icmp eq %struct._typeobject* %32, null
  br i1 %cmp31, label %if.then.38, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %land.lhs.true.30
  %33 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 10
  %34 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number33, align 8
  %nb_subtract34 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %34, i32 0, i32 1
  %35 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract34, align 8
  %36 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 10
  %37 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number35, align 8
  %nb_subtract36 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %37, i32 0, i32 1
  %38 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract36, align 8
  %cmp37 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %35, %38
  br i1 %cmp37, label %if.then.38, label %if.end.43

if.then.38:                                       ; preds = %lor.lhs.false.32, %land.lhs.true.30
  %39 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 10
  %40 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number39, align 8
  %nb_subtract40 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %40, i32 0, i32 1
  %41 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract40, align 8
  %42 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 10
  %43 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number41, align 8
  %nb_subtract42 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %43, i32 0, i32 1
  store %struct._object* (%struct._object*, %struct._object*)* %41, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract42, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.38, %lor.lhs.false.32, %land.lhs.true.26, %if.end.23
  %44 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 10
  %45 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number44, align 8
  %nb_multiply = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %45, i32 0, i32 2
  %46 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply, align 8
  %tobool45 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %46, null
  br i1 %tobool45, label %if.end.63, label %land.lhs.true.46

land.lhs.true.46:                                 ; preds = %if.end.43
  %47 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 10
  %48 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number47, align 8
  %nb_multiply48 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %48, i32 0, i32 2
  %49 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply48, align 8
  %cmp49 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %49, null
  br i1 %cmp49, label %land.lhs.true.50, label %if.end.63

land.lhs.true.50:                                 ; preds = %land.lhs.true.46
  %50 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp51 = icmp eq %struct._typeobject* %50, null
  br i1 %cmp51, label %if.then.58, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %land.lhs.true.50
  %51 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 10
  %52 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number53, align 8
  %nb_multiply54 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %52, i32 0, i32 2
  %53 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply54, align 8
  %54 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number55 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 10
  %55 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number55, align 8
  %nb_multiply56 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %55, i32 0, i32 2
  %56 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply56, align 8
  %cmp57 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %53, %56
  br i1 %cmp57, label %if.then.58, label %if.end.63

if.then.58:                                       ; preds = %lor.lhs.false.52, %land.lhs.true.50
  %57 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 10
  %58 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number59, align 8
  %nb_multiply60 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %58, i32 0, i32 2
  %59 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply60, align 8
  %60 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 10
  %61 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number61, align 8
  %nb_multiply62 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %61, i32 0, i32 2
  store %struct._object* (%struct._object*, %struct._object*)* %59, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply62, align 8
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.58, %lor.lhs.false.52, %land.lhs.true.46, %if.end.43
  %62 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 10
  %63 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number64, align 8
  %nb_remainder = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %63, i32 0, i32 3
  %64 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder, align 8
  %tobool65 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %64, null
  br i1 %tobool65, label %if.end.83, label %land.lhs.true.66

land.lhs.true.66:                                 ; preds = %if.end.63
  %65 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 10
  %66 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number67, align 8
  %nb_remainder68 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %66, i32 0, i32 3
  %67 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder68, align 8
  %cmp69 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %67, null
  br i1 %cmp69, label %land.lhs.true.70, label %if.end.83

land.lhs.true.70:                                 ; preds = %land.lhs.true.66
  %68 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp71 = icmp eq %struct._typeobject* %68, null
  br i1 %cmp71, label %if.then.78, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %land.lhs.true.70
  %69 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 10
  %70 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number73, align 8
  %nb_remainder74 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %70, i32 0, i32 3
  %71 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder74, align 8
  %72 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 10
  %73 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number75, align 8
  %nb_remainder76 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %73, i32 0, i32 3
  %74 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder76, align 8
  %cmp77 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %71, %74
  br i1 %cmp77, label %if.then.78, label %if.end.83

if.then.78:                                       ; preds = %lor.lhs.false.72, %land.lhs.true.70
  %75 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 10
  %76 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number79, align 8
  %nb_remainder80 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %76, i32 0, i32 3
  %77 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder80, align 8
  %78 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number81 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 10
  %79 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number81, align 8
  %nb_remainder82 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %79, i32 0, i32 3
  store %struct._object* (%struct._object*, %struct._object*)* %77, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder82, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.78, %lor.lhs.false.72, %land.lhs.true.66, %if.end.63
  %80 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 10
  %81 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number84, align 8
  %nb_divmod = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %81, i32 0, i32 4
  %82 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod, align 8
  %tobool85 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %82, null
  br i1 %tobool85, label %if.end.103, label %land.lhs.true.86

land.lhs.true.86:                                 ; preds = %if.end.83
  %83 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number87 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 10
  %84 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number87, align 8
  %nb_divmod88 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %84, i32 0, i32 4
  %85 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod88, align 8
  %cmp89 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %85, null
  br i1 %cmp89, label %land.lhs.true.90, label %if.end.103

land.lhs.true.90:                                 ; preds = %land.lhs.true.86
  %86 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp91 = icmp eq %struct._typeobject* %86, null
  br i1 %cmp91, label %if.then.98, label %lor.lhs.false.92

lor.lhs.false.92:                                 ; preds = %land.lhs.true.90
  %87 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number93 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %87, i32 0, i32 10
  %88 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number93, align 8
  %nb_divmod94 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %88, i32 0, i32 4
  %89 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod94, align 8
  %90 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 10
  %91 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number95, align 8
  %nb_divmod96 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %91, i32 0, i32 4
  %92 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod96, align 8
  %cmp97 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %89, %92
  br i1 %cmp97, label %if.then.98, label %if.end.103

if.then.98:                                       ; preds = %lor.lhs.false.92, %land.lhs.true.90
  %93 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number99 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 10
  %94 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number99, align 8
  %nb_divmod100 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %94, i32 0, i32 4
  %95 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod100, align 8
  %96 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 10
  %97 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number101, align 8
  %nb_divmod102 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %97, i32 0, i32 4
  store %struct._object* (%struct._object*, %struct._object*)* %95, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod102, align 8
  br label %if.end.103

if.end.103:                                       ; preds = %if.then.98, %lor.lhs.false.92, %land.lhs.true.86, %if.end.83
  %98 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number104 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %98, i32 0, i32 10
  %99 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number104, align 8
  %nb_power = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %99, i32 0, i32 5
  %100 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power, align 8
  %tobool105 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %100, null
  br i1 %tobool105, label %if.end.123, label %land.lhs.true.106

land.lhs.true.106:                                ; preds = %if.end.103
  %101 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %101, i32 0, i32 10
  %102 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number107, align 8
  %nb_power108 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %102, i32 0, i32 5
  %103 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power108, align 8
  %cmp109 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %103, null
  br i1 %cmp109, label %land.lhs.true.110, label %if.end.123

land.lhs.true.110:                                ; preds = %land.lhs.true.106
  %104 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp111 = icmp eq %struct._typeobject* %104, null
  br i1 %cmp111, label %if.then.118, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %land.lhs.true.110
  %105 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 10
  %106 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number113, align 8
  %nb_power114 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %106, i32 0, i32 5
  %107 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power114, align 8
  %108 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number115 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %108, i32 0, i32 10
  %109 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number115, align 8
  %nb_power116 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %109, i32 0, i32 5
  %110 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power116, align 8
  %cmp117 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %107, %110
  br i1 %cmp117, label %if.then.118, label %if.end.123

if.then.118:                                      ; preds = %lor.lhs.false.112, %land.lhs.true.110
  %111 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number119 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %111, i32 0, i32 10
  %112 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number119, align 8
  %nb_power120 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %112, i32 0, i32 5
  %113 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power120, align 8
  %114 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number121 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 10
  %115 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number121, align 8
  %nb_power122 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %115, i32 0, i32 5
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %113, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power122, align 8
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.118, %lor.lhs.false.112, %land.lhs.true.106, %if.end.103
  %116 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number124 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %116, i32 0, i32 10
  %117 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number124, align 8
  %nb_negative = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %117, i32 0, i32 6
  %118 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_negative, align 8
  %tobool125 = icmp ne %struct._object* (%struct._object*)* %118, null
  br i1 %tobool125, label %if.end.143, label %land.lhs.true.126

land.lhs.true.126:                                ; preds = %if.end.123
  %119 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number127 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %119, i32 0, i32 10
  %120 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number127, align 8
  %nb_negative128 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %120, i32 0, i32 6
  %121 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_negative128, align 8
  %cmp129 = icmp ne %struct._object* (%struct._object*)* %121, null
  br i1 %cmp129, label %land.lhs.true.130, label %if.end.143

land.lhs.true.130:                                ; preds = %land.lhs.true.126
  %122 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp131 = icmp eq %struct._typeobject* %122, null
  br i1 %cmp131, label %if.then.138, label %lor.lhs.false.132

lor.lhs.false.132:                                ; preds = %land.lhs.true.130
  %123 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number133 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 10
  %124 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number133, align 8
  %nb_negative134 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %124, i32 0, i32 6
  %125 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_negative134, align 8
  %126 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number135 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %126, i32 0, i32 10
  %127 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number135, align 8
  %nb_negative136 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %127, i32 0, i32 6
  %128 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_negative136, align 8
  %cmp137 = icmp ne %struct._object* (%struct._object*)* %125, %128
  br i1 %cmp137, label %if.then.138, label %if.end.143

if.then.138:                                      ; preds = %lor.lhs.false.132, %land.lhs.true.130
  %129 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number139 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %129, i32 0, i32 10
  %130 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number139, align 8
  %nb_negative140 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %130, i32 0, i32 6
  %131 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_negative140, align 8
  %132 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number141 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %132, i32 0, i32 10
  %133 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number141, align 8
  %nb_negative142 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %133, i32 0, i32 6
  store %struct._object* (%struct._object*)* %131, %struct._object* (%struct._object*)** %nb_negative142, align 8
  br label %if.end.143

if.end.143:                                       ; preds = %if.then.138, %lor.lhs.false.132, %land.lhs.true.126, %if.end.123
  %134 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number144 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %134, i32 0, i32 10
  %135 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number144, align 8
  %nb_positive = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %135, i32 0, i32 7
  %136 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_positive, align 8
  %tobool145 = icmp ne %struct._object* (%struct._object*)* %136, null
  br i1 %tobool145, label %if.end.163, label %land.lhs.true.146

land.lhs.true.146:                                ; preds = %if.end.143
  %137 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number147 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %137, i32 0, i32 10
  %138 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number147, align 8
  %nb_positive148 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %138, i32 0, i32 7
  %139 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_positive148, align 8
  %cmp149 = icmp ne %struct._object* (%struct._object*)* %139, null
  br i1 %cmp149, label %land.lhs.true.150, label %if.end.163

land.lhs.true.150:                                ; preds = %land.lhs.true.146
  %140 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp151 = icmp eq %struct._typeobject* %140, null
  br i1 %cmp151, label %if.then.158, label %lor.lhs.false.152

lor.lhs.false.152:                                ; preds = %land.lhs.true.150
  %141 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number153 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %141, i32 0, i32 10
  %142 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number153, align 8
  %nb_positive154 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %142, i32 0, i32 7
  %143 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_positive154, align 8
  %144 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %144, i32 0, i32 10
  %145 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number155, align 8
  %nb_positive156 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %145, i32 0, i32 7
  %146 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_positive156, align 8
  %cmp157 = icmp ne %struct._object* (%struct._object*)* %143, %146
  br i1 %cmp157, label %if.then.158, label %if.end.163

if.then.158:                                      ; preds = %lor.lhs.false.152, %land.lhs.true.150
  %147 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number159 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %147, i32 0, i32 10
  %148 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number159, align 8
  %nb_positive160 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %148, i32 0, i32 7
  %149 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_positive160, align 8
  %150 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number161 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %150, i32 0, i32 10
  %151 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number161, align 8
  %nb_positive162 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %151, i32 0, i32 7
  store %struct._object* (%struct._object*)* %149, %struct._object* (%struct._object*)** %nb_positive162, align 8
  br label %if.end.163

if.end.163:                                       ; preds = %if.then.158, %lor.lhs.false.152, %land.lhs.true.146, %if.end.143
  %152 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number164 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %152, i32 0, i32 10
  %153 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number164, align 8
  %nb_absolute = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %153, i32 0, i32 8
  %154 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_absolute, align 8
  %tobool165 = icmp ne %struct._object* (%struct._object*)* %154, null
  br i1 %tobool165, label %if.end.183, label %land.lhs.true.166

land.lhs.true.166:                                ; preds = %if.end.163
  %155 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %155, i32 0, i32 10
  %156 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number167, align 8
  %nb_absolute168 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %156, i32 0, i32 8
  %157 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_absolute168, align 8
  %cmp169 = icmp ne %struct._object* (%struct._object*)* %157, null
  br i1 %cmp169, label %land.lhs.true.170, label %if.end.183

land.lhs.true.170:                                ; preds = %land.lhs.true.166
  %158 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp171 = icmp eq %struct._typeobject* %158, null
  br i1 %cmp171, label %if.then.178, label %lor.lhs.false.172

lor.lhs.false.172:                                ; preds = %land.lhs.true.170
  %159 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number173 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %159, i32 0, i32 10
  %160 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number173, align 8
  %nb_absolute174 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %160, i32 0, i32 8
  %161 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_absolute174, align 8
  %162 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number175 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %162, i32 0, i32 10
  %163 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number175, align 8
  %nb_absolute176 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %163, i32 0, i32 8
  %164 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_absolute176, align 8
  %cmp177 = icmp ne %struct._object* (%struct._object*)* %161, %164
  br i1 %cmp177, label %if.then.178, label %if.end.183

if.then.178:                                      ; preds = %lor.lhs.false.172, %land.lhs.true.170
  %165 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number179 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %165, i32 0, i32 10
  %166 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number179, align 8
  %nb_absolute180 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %166, i32 0, i32 8
  %167 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_absolute180, align 8
  %168 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number181 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %168, i32 0, i32 10
  %169 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number181, align 8
  %nb_absolute182 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %169, i32 0, i32 8
  store %struct._object* (%struct._object*)* %167, %struct._object* (%struct._object*)** %nb_absolute182, align 8
  br label %if.end.183

if.end.183:                                       ; preds = %if.then.178, %lor.lhs.false.172, %land.lhs.true.166, %if.end.163
  %170 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number184 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %170, i32 0, i32 10
  %171 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number184, align 8
  %nb_bool = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %171, i32 0, i32 9
  %172 = load i32 (%struct._object*)*, i32 (%struct._object*)** %nb_bool, align 8
  %tobool185 = icmp ne i32 (%struct._object*)* %172, null
  br i1 %tobool185, label %if.end.203, label %land.lhs.true.186

land.lhs.true.186:                                ; preds = %if.end.183
  %173 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number187 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %173, i32 0, i32 10
  %174 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number187, align 8
  %nb_bool188 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %174, i32 0, i32 9
  %175 = load i32 (%struct._object*)*, i32 (%struct._object*)** %nb_bool188, align 8
  %cmp189 = icmp ne i32 (%struct._object*)* %175, null
  br i1 %cmp189, label %land.lhs.true.190, label %if.end.203

land.lhs.true.190:                                ; preds = %land.lhs.true.186
  %176 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp191 = icmp eq %struct._typeobject* %176, null
  br i1 %cmp191, label %if.then.198, label %lor.lhs.false.192

lor.lhs.false.192:                                ; preds = %land.lhs.true.190
  %177 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number193 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %177, i32 0, i32 10
  %178 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number193, align 8
  %nb_bool194 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %178, i32 0, i32 9
  %179 = load i32 (%struct._object*)*, i32 (%struct._object*)** %nb_bool194, align 8
  %180 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number195 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %180, i32 0, i32 10
  %181 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number195, align 8
  %nb_bool196 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %181, i32 0, i32 9
  %182 = load i32 (%struct._object*)*, i32 (%struct._object*)** %nb_bool196, align 8
  %cmp197 = icmp ne i32 (%struct._object*)* %179, %182
  br i1 %cmp197, label %if.then.198, label %if.end.203

if.then.198:                                      ; preds = %lor.lhs.false.192, %land.lhs.true.190
  %183 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number199 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %183, i32 0, i32 10
  %184 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number199, align 8
  %nb_bool200 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %184, i32 0, i32 9
  %185 = load i32 (%struct._object*)*, i32 (%struct._object*)** %nb_bool200, align 8
  %186 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number201 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %186, i32 0, i32 10
  %187 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number201, align 8
  %nb_bool202 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %187, i32 0, i32 9
  store i32 (%struct._object*)* %185, i32 (%struct._object*)** %nb_bool202, align 8
  br label %if.end.203

if.end.203:                                       ; preds = %if.then.198, %lor.lhs.false.192, %land.lhs.true.186, %if.end.183
  %188 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number204 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %188, i32 0, i32 10
  %189 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number204, align 8
  %nb_invert = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %189, i32 0, i32 10
  %190 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_invert, align 8
  %tobool205 = icmp ne %struct._object* (%struct._object*)* %190, null
  br i1 %tobool205, label %if.end.223, label %land.lhs.true.206

land.lhs.true.206:                                ; preds = %if.end.203
  %191 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number207 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %191, i32 0, i32 10
  %192 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number207, align 8
  %nb_invert208 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %192, i32 0, i32 10
  %193 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_invert208, align 8
  %cmp209 = icmp ne %struct._object* (%struct._object*)* %193, null
  br i1 %cmp209, label %land.lhs.true.210, label %if.end.223

land.lhs.true.210:                                ; preds = %land.lhs.true.206
  %194 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp211 = icmp eq %struct._typeobject* %194, null
  br i1 %cmp211, label %if.then.218, label %lor.lhs.false.212

lor.lhs.false.212:                                ; preds = %land.lhs.true.210
  %195 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number213 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %195, i32 0, i32 10
  %196 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number213, align 8
  %nb_invert214 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %196, i32 0, i32 10
  %197 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_invert214, align 8
  %198 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number215 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %198, i32 0, i32 10
  %199 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number215, align 8
  %nb_invert216 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %199, i32 0, i32 10
  %200 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_invert216, align 8
  %cmp217 = icmp ne %struct._object* (%struct._object*)* %197, %200
  br i1 %cmp217, label %if.then.218, label %if.end.223

if.then.218:                                      ; preds = %lor.lhs.false.212, %land.lhs.true.210
  %201 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number219 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %201, i32 0, i32 10
  %202 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number219, align 8
  %nb_invert220 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %202, i32 0, i32 10
  %203 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_invert220, align 8
  %204 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number221 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %204, i32 0, i32 10
  %205 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number221, align 8
  %nb_invert222 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %205, i32 0, i32 10
  store %struct._object* (%struct._object*)* %203, %struct._object* (%struct._object*)** %nb_invert222, align 8
  br label %if.end.223

if.end.223:                                       ; preds = %if.then.218, %lor.lhs.false.212, %land.lhs.true.206, %if.end.203
  %206 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number224 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %206, i32 0, i32 10
  %207 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number224, align 8
  %nb_lshift = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %207, i32 0, i32 11
  %208 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift, align 8
  %tobool225 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %208, null
  br i1 %tobool225, label %if.end.243, label %land.lhs.true.226

land.lhs.true.226:                                ; preds = %if.end.223
  %209 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number227 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %209, i32 0, i32 10
  %210 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number227, align 8
  %nb_lshift228 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %210, i32 0, i32 11
  %211 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift228, align 8
  %cmp229 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %211, null
  br i1 %cmp229, label %land.lhs.true.230, label %if.end.243

land.lhs.true.230:                                ; preds = %land.lhs.true.226
  %212 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp231 = icmp eq %struct._typeobject* %212, null
  br i1 %cmp231, label %if.then.238, label %lor.lhs.false.232

lor.lhs.false.232:                                ; preds = %land.lhs.true.230
  %213 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number233 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %213, i32 0, i32 10
  %214 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number233, align 8
  %nb_lshift234 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %214, i32 0, i32 11
  %215 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift234, align 8
  %216 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number235 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %216, i32 0, i32 10
  %217 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number235, align 8
  %nb_lshift236 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %217, i32 0, i32 11
  %218 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift236, align 8
  %cmp237 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %215, %218
  br i1 %cmp237, label %if.then.238, label %if.end.243

if.then.238:                                      ; preds = %lor.lhs.false.232, %land.lhs.true.230
  %219 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number239 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %219, i32 0, i32 10
  %220 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number239, align 8
  %nb_lshift240 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %220, i32 0, i32 11
  %221 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift240, align 8
  %222 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number241 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %222, i32 0, i32 10
  %223 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number241, align 8
  %nb_lshift242 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %223, i32 0, i32 11
  store %struct._object* (%struct._object*, %struct._object*)* %221, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift242, align 8
  br label %if.end.243

if.end.243:                                       ; preds = %if.then.238, %lor.lhs.false.232, %land.lhs.true.226, %if.end.223
  %224 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number244 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %224, i32 0, i32 10
  %225 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number244, align 8
  %nb_rshift = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %225, i32 0, i32 12
  %226 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift, align 8
  %tobool245 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %226, null
  br i1 %tobool245, label %if.end.263, label %land.lhs.true.246

land.lhs.true.246:                                ; preds = %if.end.243
  %227 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number247 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %227, i32 0, i32 10
  %228 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number247, align 8
  %nb_rshift248 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %228, i32 0, i32 12
  %229 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift248, align 8
  %cmp249 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %229, null
  br i1 %cmp249, label %land.lhs.true.250, label %if.end.263

land.lhs.true.250:                                ; preds = %land.lhs.true.246
  %230 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp251 = icmp eq %struct._typeobject* %230, null
  br i1 %cmp251, label %if.then.258, label %lor.lhs.false.252

lor.lhs.false.252:                                ; preds = %land.lhs.true.250
  %231 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number253 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %231, i32 0, i32 10
  %232 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number253, align 8
  %nb_rshift254 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %232, i32 0, i32 12
  %233 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift254, align 8
  %234 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number255 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %234, i32 0, i32 10
  %235 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number255, align 8
  %nb_rshift256 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %235, i32 0, i32 12
  %236 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift256, align 8
  %cmp257 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %233, %236
  br i1 %cmp257, label %if.then.258, label %if.end.263

if.then.258:                                      ; preds = %lor.lhs.false.252, %land.lhs.true.250
  %237 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number259 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %237, i32 0, i32 10
  %238 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number259, align 8
  %nb_rshift260 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %238, i32 0, i32 12
  %239 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift260, align 8
  %240 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number261 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %240, i32 0, i32 10
  %241 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number261, align 8
  %nb_rshift262 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %241, i32 0, i32 12
  store %struct._object* (%struct._object*, %struct._object*)* %239, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift262, align 8
  br label %if.end.263

if.end.263:                                       ; preds = %if.then.258, %lor.lhs.false.252, %land.lhs.true.246, %if.end.243
  %242 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number264 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %242, i32 0, i32 10
  %243 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number264, align 8
  %nb_and = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %243, i32 0, i32 13
  %244 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_and, align 8
  %tobool265 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %244, null
  br i1 %tobool265, label %if.end.283, label %land.lhs.true.266

land.lhs.true.266:                                ; preds = %if.end.263
  %245 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number267 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %245, i32 0, i32 10
  %246 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number267, align 8
  %nb_and268 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %246, i32 0, i32 13
  %247 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_and268, align 8
  %cmp269 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %247, null
  br i1 %cmp269, label %land.lhs.true.270, label %if.end.283

land.lhs.true.270:                                ; preds = %land.lhs.true.266
  %248 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp271 = icmp eq %struct._typeobject* %248, null
  br i1 %cmp271, label %if.then.278, label %lor.lhs.false.272

lor.lhs.false.272:                                ; preds = %land.lhs.true.270
  %249 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number273 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %249, i32 0, i32 10
  %250 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number273, align 8
  %nb_and274 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %250, i32 0, i32 13
  %251 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_and274, align 8
  %252 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number275 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %252, i32 0, i32 10
  %253 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number275, align 8
  %nb_and276 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %253, i32 0, i32 13
  %254 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_and276, align 8
  %cmp277 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %251, %254
  br i1 %cmp277, label %if.then.278, label %if.end.283

if.then.278:                                      ; preds = %lor.lhs.false.272, %land.lhs.true.270
  %255 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number279 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %255, i32 0, i32 10
  %256 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number279, align 8
  %nb_and280 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %256, i32 0, i32 13
  %257 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_and280, align 8
  %258 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number281 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %258, i32 0, i32 10
  %259 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number281, align 8
  %nb_and282 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %259, i32 0, i32 13
  store %struct._object* (%struct._object*, %struct._object*)* %257, %struct._object* (%struct._object*, %struct._object*)** %nb_and282, align 8
  br label %if.end.283

if.end.283:                                       ; preds = %if.then.278, %lor.lhs.false.272, %land.lhs.true.266, %if.end.263
  %260 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number284 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %260, i32 0, i32 10
  %261 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number284, align 8
  %nb_xor = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %261, i32 0, i32 14
  %262 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_xor, align 8
  %tobool285 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %262, null
  br i1 %tobool285, label %if.end.303, label %land.lhs.true.286

land.lhs.true.286:                                ; preds = %if.end.283
  %263 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number287 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %263, i32 0, i32 10
  %264 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number287, align 8
  %nb_xor288 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %264, i32 0, i32 14
  %265 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_xor288, align 8
  %cmp289 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %265, null
  br i1 %cmp289, label %land.lhs.true.290, label %if.end.303

land.lhs.true.290:                                ; preds = %land.lhs.true.286
  %266 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp291 = icmp eq %struct._typeobject* %266, null
  br i1 %cmp291, label %if.then.298, label %lor.lhs.false.292

lor.lhs.false.292:                                ; preds = %land.lhs.true.290
  %267 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number293 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %267, i32 0, i32 10
  %268 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number293, align 8
  %nb_xor294 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %268, i32 0, i32 14
  %269 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_xor294, align 8
  %270 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number295 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %270, i32 0, i32 10
  %271 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number295, align 8
  %nb_xor296 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %271, i32 0, i32 14
  %272 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_xor296, align 8
  %cmp297 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %269, %272
  br i1 %cmp297, label %if.then.298, label %if.end.303

if.then.298:                                      ; preds = %lor.lhs.false.292, %land.lhs.true.290
  %273 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number299 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %273, i32 0, i32 10
  %274 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number299, align 8
  %nb_xor300 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %274, i32 0, i32 14
  %275 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_xor300, align 8
  %276 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number301 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %276, i32 0, i32 10
  %277 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number301, align 8
  %nb_xor302 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %277, i32 0, i32 14
  store %struct._object* (%struct._object*, %struct._object*)* %275, %struct._object* (%struct._object*, %struct._object*)** %nb_xor302, align 8
  br label %if.end.303

if.end.303:                                       ; preds = %if.then.298, %lor.lhs.false.292, %land.lhs.true.286, %if.end.283
  %278 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number304 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %278, i32 0, i32 10
  %279 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number304, align 8
  %nb_or = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %279, i32 0, i32 15
  %280 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_or, align 8
  %tobool305 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %280, null
  br i1 %tobool305, label %if.end.323, label %land.lhs.true.306

land.lhs.true.306:                                ; preds = %if.end.303
  %281 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number307 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %281, i32 0, i32 10
  %282 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number307, align 8
  %nb_or308 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %282, i32 0, i32 15
  %283 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_or308, align 8
  %cmp309 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %283, null
  br i1 %cmp309, label %land.lhs.true.310, label %if.end.323

land.lhs.true.310:                                ; preds = %land.lhs.true.306
  %284 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp311 = icmp eq %struct._typeobject* %284, null
  br i1 %cmp311, label %if.then.318, label %lor.lhs.false.312

lor.lhs.false.312:                                ; preds = %land.lhs.true.310
  %285 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number313 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %285, i32 0, i32 10
  %286 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number313, align 8
  %nb_or314 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %286, i32 0, i32 15
  %287 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_or314, align 8
  %288 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number315 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %288, i32 0, i32 10
  %289 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number315, align 8
  %nb_or316 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %289, i32 0, i32 15
  %290 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_or316, align 8
  %cmp317 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %287, %290
  br i1 %cmp317, label %if.then.318, label %if.end.323

if.then.318:                                      ; preds = %lor.lhs.false.312, %land.lhs.true.310
  %291 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number319 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %291, i32 0, i32 10
  %292 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number319, align 8
  %nb_or320 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %292, i32 0, i32 15
  %293 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_or320, align 8
  %294 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number321 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %294, i32 0, i32 10
  %295 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number321, align 8
  %nb_or322 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %295, i32 0, i32 15
  store %struct._object* (%struct._object*, %struct._object*)* %293, %struct._object* (%struct._object*, %struct._object*)** %nb_or322, align 8
  br label %if.end.323

if.end.323:                                       ; preds = %if.then.318, %lor.lhs.false.312, %land.lhs.true.306, %if.end.303
  %296 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number324 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %296, i32 0, i32 10
  %297 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number324, align 8
  %nb_int = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %297, i32 0, i32 16
  %298 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int, align 8
  %tobool325 = icmp ne %struct._object* (%struct._object*)* %298, null
  br i1 %tobool325, label %if.end.343, label %land.lhs.true.326

land.lhs.true.326:                                ; preds = %if.end.323
  %299 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number327 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %299, i32 0, i32 10
  %300 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number327, align 8
  %nb_int328 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %300, i32 0, i32 16
  %301 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int328, align 8
  %cmp329 = icmp ne %struct._object* (%struct._object*)* %301, null
  br i1 %cmp329, label %land.lhs.true.330, label %if.end.343

land.lhs.true.330:                                ; preds = %land.lhs.true.326
  %302 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp331 = icmp eq %struct._typeobject* %302, null
  br i1 %cmp331, label %if.then.338, label %lor.lhs.false.332

lor.lhs.false.332:                                ; preds = %land.lhs.true.330
  %303 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number333 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %303, i32 0, i32 10
  %304 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number333, align 8
  %nb_int334 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %304, i32 0, i32 16
  %305 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int334, align 8
  %306 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number335 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %306, i32 0, i32 10
  %307 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number335, align 8
  %nb_int336 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %307, i32 0, i32 16
  %308 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int336, align 8
  %cmp337 = icmp ne %struct._object* (%struct._object*)* %305, %308
  br i1 %cmp337, label %if.then.338, label %if.end.343

if.then.338:                                      ; preds = %lor.lhs.false.332, %land.lhs.true.330
  %309 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number339 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %309, i32 0, i32 10
  %310 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number339, align 8
  %nb_int340 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %310, i32 0, i32 16
  %311 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_int340, align 8
  %312 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number341 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %312, i32 0, i32 10
  %313 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number341, align 8
  %nb_int342 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %313, i32 0, i32 16
  store %struct._object* (%struct._object*)* %311, %struct._object* (%struct._object*)** %nb_int342, align 8
  br label %if.end.343

if.end.343:                                       ; preds = %if.then.338, %lor.lhs.false.332, %land.lhs.true.326, %if.end.323
  %314 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number344 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %314, i32 0, i32 10
  %315 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number344, align 8
  %nb_float = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %315, i32 0, i32 18
  %316 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float, align 8
  %tobool345 = icmp ne %struct._object* (%struct._object*)* %316, null
  br i1 %tobool345, label %if.end.363, label %land.lhs.true.346

land.lhs.true.346:                                ; preds = %if.end.343
  %317 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number347 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %317, i32 0, i32 10
  %318 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number347, align 8
  %nb_float348 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %318, i32 0, i32 18
  %319 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float348, align 8
  %cmp349 = icmp ne %struct._object* (%struct._object*)* %319, null
  br i1 %cmp349, label %land.lhs.true.350, label %if.end.363

land.lhs.true.350:                                ; preds = %land.lhs.true.346
  %320 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp351 = icmp eq %struct._typeobject* %320, null
  br i1 %cmp351, label %if.then.358, label %lor.lhs.false.352

lor.lhs.false.352:                                ; preds = %land.lhs.true.350
  %321 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number353 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %321, i32 0, i32 10
  %322 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number353, align 8
  %nb_float354 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %322, i32 0, i32 18
  %323 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float354, align 8
  %324 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number355 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %324, i32 0, i32 10
  %325 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number355, align 8
  %nb_float356 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %325, i32 0, i32 18
  %326 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float356, align 8
  %cmp357 = icmp ne %struct._object* (%struct._object*)* %323, %326
  br i1 %cmp357, label %if.then.358, label %if.end.363

if.then.358:                                      ; preds = %lor.lhs.false.352, %land.lhs.true.350
  %327 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number359 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %327, i32 0, i32 10
  %328 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number359, align 8
  %nb_float360 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %328, i32 0, i32 18
  %329 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_float360, align 8
  %330 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number361 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %330, i32 0, i32 10
  %331 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number361, align 8
  %nb_float362 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %331, i32 0, i32 18
  store %struct._object* (%struct._object*)* %329, %struct._object* (%struct._object*)** %nb_float362, align 8
  br label %if.end.363

if.end.363:                                       ; preds = %if.then.358, %lor.lhs.false.352, %land.lhs.true.346, %if.end.343
  %332 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number364 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %332, i32 0, i32 10
  %333 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number364, align 8
  %nb_inplace_add = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %333, i32 0, i32 19
  %334 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_add, align 8
  %tobool365 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %334, null
  br i1 %tobool365, label %if.end.383, label %land.lhs.true.366

land.lhs.true.366:                                ; preds = %if.end.363
  %335 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number367 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %335, i32 0, i32 10
  %336 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number367, align 8
  %nb_inplace_add368 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %336, i32 0, i32 19
  %337 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_add368, align 8
  %cmp369 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %337, null
  br i1 %cmp369, label %land.lhs.true.370, label %if.end.383

land.lhs.true.370:                                ; preds = %land.lhs.true.366
  %338 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp371 = icmp eq %struct._typeobject* %338, null
  br i1 %cmp371, label %if.then.378, label %lor.lhs.false.372

lor.lhs.false.372:                                ; preds = %land.lhs.true.370
  %339 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number373 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %339, i32 0, i32 10
  %340 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number373, align 8
  %nb_inplace_add374 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %340, i32 0, i32 19
  %341 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_add374, align 8
  %342 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number375 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %342, i32 0, i32 10
  %343 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number375, align 8
  %nb_inplace_add376 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %343, i32 0, i32 19
  %344 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_add376, align 8
  %cmp377 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %341, %344
  br i1 %cmp377, label %if.then.378, label %if.end.383

if.then.378:                                      ; preds = %lor.lhs.false.372, %land.lhs.true.370
  %345 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number379 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %345, i32 0, i32 10
  %346 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number379, align 8
  %nb_inplace_add380 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %346, i32 0, i32 19
  %347 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_add380, align 8
  %348 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number381 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %348, i32 0, i32 10
  %349 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number381, align 8
  %nb_inplace_add382 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %349, i32 0, i32 19
  store %struct._object* (%struct._object*, %struct._object*)* %347, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_add382, align 8
  br label %if.end.383

if.end.383:                                       ; preds = %if.then.378, %lor.lhs.false.372, %land.lhs.true.366, %if.end.363
  %350 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number384 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %350, i32 0, i32 10
  %351 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number384, align 8
  %nb_inplace_subtract = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %351, i32 0, i32 20
  %352 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_subtract, align 8
  %tobool385 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %352, null
  br i1 %tobool385, label %if.end.403, label %land.lhs.true.386

land.lhs.true.386:                                ; preds = %if.end.383
  %353 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number387 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %353, i32 0, i32 10
  %354 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number387, align 8
  %nb_inplace_subtract388 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %354, i32 0, i32 20
  %355 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_subtract388, align 8
  %cmp389 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %355, null
  br i1 %cmp389, label %land.lhs.true.390, label %if.end.403

land.lhs.true.390:                                ; preds = %land.lhs.true.386
  %356 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp391 = icmp eq %struct._typeobject* %356, null
  br i1 %cmp391, label %if.then.398, label %lor.lhs.false.392

lor.lhs.false.392:                                ; preds = %land.lhs.true.390
  %357 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number393 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %357, i32 0, i32 10
  %358 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number393, align 8
  %nb_inplace_subtract394 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %358, i32 0, i32 20
  %359 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_subtract394, align 8
  %360 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number395 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %360, i32 0, i32 10
  %361 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number395, align 8
  %nb_inplace_subtract396 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %361, i32 0, i32 20
  %362 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_subtract396, align 8
  %cmp397 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %359, %362
  br i1 %cmp397, label %if.then.398, label %if.end.403

if.then.398:                                      ; preds = %lor.lhs.false.392, %land.lhs.true.390
  %363 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number399 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %363, i32 0, i32 10
  %364 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number399, align 8
  %nb_inplace_subtract400 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %364, i32 0, i32 20
  %365 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_subtract400, align 8
  %366 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number401 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %366, i32 0, i32 10
  %367 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number401, align 8
  %nb_inplace_subtract402 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %367, i32 0, i32 20
  store %struct._object* (%struct._object*, %struct._object*)* %365, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_subtract402, align 8
  br label %if.end.403

if.end.403:                                       ; preds = %if.then.398, %lor.lhs.false.392, %land.lhs.true.386, %if.end.383
  %368 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number404 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %368, i32 0, i32 10
  %369 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number404, align 8
  %nb_inplace_multiply = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %369, i32 0, i32 21
  %370 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_multiply, align 8
  %tobool405 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %370, null
  br i1 %tobool405, label %if.end.423, label %land.lhs.true.406

land.lhs.true.406:                                ; preds = %if.end.403
  %371 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number407 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %371, i32 0, i32 10
  %372 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number407, align 8
  %nb_inplace_multiply408 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %372, i32 0, i32 21
  %373 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_multiply408, align 8
  %cmp409 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %373, null
  br i1 %cmp409, label %land.lhs.true.410, label %if.end.423

land.lhs.true.410:                                ; preds = %land.lhs.true.406
  %374 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp411 = icmp eq %struct._typeobject* %374, null
  br i1 %cmp411, label %if.then.418, label %lor.lhs.false.412

lor.lhs.false.412:                                ; preds = %land.lhs.true.410
  %375 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number413 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %375, i32 0, i32 10
  %376 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number413, align 8
  %nb_inplace_multiply414 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %376, i32 0, i32 21
  %377 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_multiply414, align 8
  %378 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number415 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %378, i32 0, i32 10
  %379 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number415, align 8
  %nb_inplace_multiply416 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %379, i32 0, i32 21
  %380 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_multiply416, align 8
  %cmp417 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %377, %380
  br i1 %cmp417, label %if.then.418, label %if.end.423

if.then.418:                                      ; preds = %lor.lhs.false.412, %land.lhs.true.410
  %381 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number419 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %381, i32 0, i32 10
  %382 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number419, align 8
  %nb_inplace_multiply420 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %382, i32 0, i32 21
  %383 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_multiply420, align 8
  %384 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number421 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %384, i32 0, i32 10
  %385 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number421, align 8
  %nb_inplace_multiply422 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %385, i32 0, i32 21
  store %struct._object* (%struct._object*, %struct._object*)* %383, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_multiply422, align 8
  br label %if.end.423

if.end.423:                                       ; preds = %if.then.418, %lor.lhs.false.412, %land.lhs.true.406, %if.end.403
  %386 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number424 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %386, i32 0, i32 10
  %387 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number424, align 8
  %nb_inplace_remainder = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %387, i32 0, i32 22
  %388 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_remainder, align 8
  %tobool425 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %388, null
  br i1 %tobool425, label %if.end.443, label %land.lhs.true.426

land.lhs.true.426:                                ; preds = %if.end.423
  %389 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number427 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %389, i32 0, i32 10
  %390 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number427, align 8
  %nb_inplace_remainder428 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %390, i32 0, i32 22
  %391 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_remainder428, align 8
  %cmp429 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %391, null
  br i1 %cmp429, label %land.lhs.true.430, label %if.end.443

land.lhs.true.430:                                ; preds = %land.lhs.true.426
  %392 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp431 = icmp eq %struct._typeobject* %392, null
  br i1 %cmp431, label %if.then.438, label %lor.lhs.false.432

lor.lhs.false.432:                                ; preds = %land.lhs.true.430
  %393 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number433 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %393, i32 0, i32 10
  %394 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number433, align 8
  %nb_inplace_remainder434 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %394, i32 0, i32 22
  %395 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_remainder434, align 8
  %396 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number435 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %396, i32 0, i32 10
  %397 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number435, align 8
  %nb_inplace_remainder436 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %397, i32 0, i32 22
  %398 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_remainder436, align 8
  %cmp437 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %395, %398
  br i1 %cmp437, label %if.then.438, label %if.end.443

if.then.438:                                      ; preds = %lor.lhs.false.432, %land.lhs.true.430
  %399 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number439 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %399, i32 0, i32 10
  %400 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number439, align 8
  %nb_inplace_remainder440 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %400, i32 0, i32 22
  %401 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_remainder440, align 8
  %402 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number441 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %402, i32 0, i32 10
  %403 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number441, align 8
  %nb_inplace_remainder442 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %403, i32 0, i32 22
  store %struct._object* (%struct._object*, %struct._object*)* %401, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_remainder442, align 8
  br label %if.end.443

if.end.443:                                       ; preds = %if.then.438, %lor.lhs.false.432, %land.lhs.true.426, %if.end.423
  %404 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number444 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %404, i32 0, i32 10
  %405 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number444, align 8
  %nb_inplace_power = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %405, i32 0, i32 23
  %406 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_inplace_power, align 8
  %tobool445 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %406, null
  br i1 %tobool445, label %if.end.463, label %land.lhs.true.446

land.lhs.true.446:                                ; preds = %if.end.443
  %407 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number447 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %407, i32 0, i32 10
  %408 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number447, align 8
  %nb_inplace_power448 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %408, i32 0, i32 23
  %409 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_inplace_power448, align 8
  %cmp449 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %409, null
  br i1 %cmp449, label %land.lhs.true.450, label %if.end.463

land.lhs.true.450:                                ; preds = %land.lhs.true.446
  %410 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp451 = icmp eq %struct._typeobject* %410, null
  br i1 %cmp451, label %if.then.458, label %lor.lhs.false.452

lor.lhs.false.452:                                ; preds = %land.lhs.true.450
  %411 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number453 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %411, i32 0, i32 10
  %412 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number453, align 8
  %nb_inplace_power454 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %412, i32 0, i32 23
  %413 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_inplace_power454, align 8
  %414 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number455 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %414, i32 0, i32 10
  %415 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number455, align 8
  %nb_inplace_power456 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %415, i32 0, i32 23
  %416 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_inplace_power456, align 8
  %cmp457 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %413, %416
  br i1 %cmp457, label %if.then.458, label %if.end.463

if.then.458:                                      ; preds = %lor.lhs.false.452, %land.lhs.true.450
  %417 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number459 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %417, i32 0, i32 10
  %418 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number459, align 8
  %nb_inplace_power460 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %418, i32 0, i32 23
  %419 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_inplace_power460, align 8
  %420 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number461 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %420, i32 0, i32 10
  %421 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number461, align 8
  %nb_inplace_power462 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %421, i32 0, i32 23
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %419, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_inplace_power462, align 8
  br label %if.end.463

if.end.463:                                       ; preds = %if.then.458, %lor.lhs.false.452, %land.lhs.true.446, %if.end.443
  %422 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number464 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %422, i32 0, i32 10
  %423 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number464, align 8
  %nb_inplace_lshift = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %423, i32 0, i32 24
  %424 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_lshift, align 8
  %tobool465 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %424, null
  br i1 %tobool465, label %if.end.483, label %land.lhs.true.466

land.lhs.true.466:                                ; preds = %if.end.463
  %425 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number467 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %425, i32 0, i32 10
  %426 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number467, align 8
  %nb_inplace_lshift468 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %426, i32 0, i32 24
  %427 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_lshift468, align 8
  %cmp469 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %427, null
  br i1 %cmp469, label %land.lhs.true.470, label %if.end.483

land.lhs.true.470:                                ; preds = %land.lhs.true.466
  %428 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp471 = icmp eq %struct._typeobject* %428, null
  br i1 %cmp471, label %if.then.478, label %lor.lhs.false.472

lor.lhs.false.472:                                ; preds = %land.lhs.true.470
  %429 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number473 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %429, i32 0, i32 10
  %430 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number473, align 8
  %nb_inplace_lshift474 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %430, i32 0, i32 24
  %431 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_lshift474, align 8
  %432 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number475 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %432, i32 0, i32 10
  %433 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number475, align 8
  %nb_inplace_lshift476 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %433, i32 0, i32 24
  %434 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_lshift476, align 8
  %cmp477 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %431, %434
  br i1 %cmp477, label %if.then.478, label %if.end.483

if.then.478:                                      ; preds = %lor.lhs.false.472, %land.lhs.true.470
  %435 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number479 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %435, i32 0, i32 10
  %436 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number479, align 8
  %nb_inplace_lshift480 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %436, i32 0, i32 24
  %437 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_lshift480, align 8
  %438 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number481 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %438, i32 0, i32 10
  %439 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number481, align 8
  %nb_inplace_lshift482 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %439, i32 0, i32 24
  store %struct._object* (%struct._object*, %struct._object*)* %437, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_lshift482, align 8
  br label %if.end.483

if.end.483:                                       ; preds = %if.then.478, %lor.lhs.false.472, %land.lhs.true.466, %if.end.463
  %440 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number484 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %440, i32 0, i32 10
  %441 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number484, align 8
  %nb_inplace_rshift = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %441, i32 0, i32 25
  %442 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_rshift, align 8
  %tobool485 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %442, null
  br i1 %tobool485, label %if.end.503, label %land.lhs.true.486

land.lhs.true.486:                                ; preds = %if.end.483
  %443 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number487 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %443, i32 0, i32 10
  %444 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number487, align 8
  %nb_inplace_rshift488 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %444, i32 0, i32 25
  %445 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_rshift488, align 8
  %cmp489 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %445, null
  br i1 %cmp489, label %land.lhs.true.490, label %if.end.503

land.lhs.true.490:                                ; preds = %land.lhs.true.486
  %446 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp491 = icmp eq %struct._typeobject* %446, null
  br i1 %cmp491, label %if.then.498, label %lor.lhs.false.492

lor.lhs.false.492:                                ; preds = %land.lhs.true.490
  %447 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number493 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %447, i32 0, i32 10
  %448 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number493, align 8
  %nb_inplace_rshift494 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %448, i32 0, i32 25
  %449 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_rshift494, align 8
  %450 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number495 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %450, i32 0, i32 10
  %451 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number495, align 8
  %nb_inplace_rshift496 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %451, i32 0, i32 25
  %452 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_rshift496, align 8
  %cmp497 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %449, %452
  br i1 %cmp497, label %if.then.498, label %if.end.503

if.then.498:                                      ; preds = %lor.lhs.false.492, %land.lhs.true.490
  %453 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number499 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %453, i32 0, i32 10
  %454 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number499, align 8
  %nb_inplace_rshift500 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %454, i32 0, i32 25
  %455 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_rshift500, align 8
  %456 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number501 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %456, i32 0, i32 10
  %457 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number501, align 8
  %nb_inplace_rshift502 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %457, i32 0, i32 25
  store %struct._object* (%struct._object*, %struct._object*)* %455, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_rshift502, align 8
  br label %if.end.503

if.end.503:                                       ; preds = %if.then.498, %lor.lhs.false.492, %land.lhs.true.486, %if.end.483
  %458 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number504 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %458, i32 0, i32 10
  %459 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number504, align 8
  %nb_inplace_and = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %459, i32 0, i32 26
  %460 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_and, align 8
  %tobool505 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %460, null
  br i1 %tobool505, label %if.end.523, label %land.lhs.true.506

land.lhs.true.506:                                ; preds = %if.end.503
  %461 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number507 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %461, i32 0, i32 10
  %462 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number507, align 8
  %nb_inplace_and508 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %462, i32 0, i32 26
  %463 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_and508, align 8
  %cmp509 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %463, null
  br i1 %cmp509, label %land.lhs.true.510, label %if.end.523

land.lhs.true.510:                                ; preds = %land.lhs.true.506
  %464 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp511 = icmp eq %struct._typeobject* %464, null
  br i1 %cmp511, label %if.then.518, label %lor.lhs.false.512

lor.lhs.false.512:                                ; preds = %land.lhs.true.510
  %465 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number513 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %465, i32 0, i32 10
  %466 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number513, align 8
  %nb_inplace_and514 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %466, i32 0, i32 26
  %467 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_and514, align 8
  %468 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number515 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %468, i32 0, i32 10
  %469 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number515, align 8
  %nb_inplace_and516 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %469, i32 0, i32 26
  %470 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_and516, align 8
  %cmp517 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %467, %470
  br i1 %cmp517, label %if.then.518, label %if.end.523

if.then.518:                                      ; preds = %lor.lhs.false.512, %land.lhs.true.510
  %471 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number519 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %471, i32 0, i32 10
  %472 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number519, align 8
  %nb_inplace_and520 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %472, i32 0, i32 26
  %473 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_and520, align 8
  %474 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number521 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %474, i32 0, i32 10
  %475 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number521, align 8
  %nb_inplace_and522 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %475, i32 0, i32 26
  store %struct._object* (%struct._object*, %struct._object*)* %473, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_and522, align 8
  br label %if.end.523

if.end.523:                                       ; preds = %if.then.518, %lor.lhs.false.512, %land.lhs.true.506, %if.end.503
  %476 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number524 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %476, i32 0, i32 10
  %477 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number524, align 8
  %nb_inplace_xor = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %477, i32 0, i32 27
  %478 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_xor, align 8
  %tobool525 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %478, null
  br i1 %tobool525, label %if.end.543, label %land.lhs.true.526

land.lhs.true.526:                                ; preds = %if.end.523
  %479 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number527 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %479, i32 0, i32 10
  %480 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number527, align 8
  %nb_inplace_xor528 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %480, i32 0, i32 27
  %481 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_xor528, align 8
  %cmp529 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %481, null
  br i1 %cmp529, label %land.lhs.true.530, label %if.end.543

land.lhs.true.530:                                ; preds = %land.lhs.true.526
  %482 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp531 = icmp eq %struct._typeobject* %482, null
  br i1 %cmp531, label %if.then.538, label %lor.lhs.false.532

lor.lhs.false.532:                                ; preds = %land.lhs.true.530
  %483 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number533 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %483, i32 0, i32 10
  %484 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number533, align 8
  %nb_inplace_xor534 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %484, i32 0, i32 27
  %485 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_xor534, align 8
  %486 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number535 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %486, i32 0, i32 10
  %487 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number535, align 8
  %nb_inplace_xor536 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %487, i32 0, i32 27
  %488 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_xor536, align 8
  %cmp537 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %485, %488
  br i1 %cmp537, label %if.then.538, label %if.end.543

if.then.538:                                      ; preds = %lor.lhs.false.532, %land.lhs.true.530
  %489 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number539 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %489, i32 0, i32 10
  %490 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number539, align 8
  %nb_inplace_xor540 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %490, i32 0, i32 27
  %491 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_xor540, align 8
  %492 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number541 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %492, i32 0, i32 10
  %493 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number541, align 8
  %nb_inplace_xor542 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %493, i32 0, i32 27
  store %struct._object* (%struct._object*, %struct._object*)* %491, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_xor542, align 8
  br label %if.end.543

if.end.543:                                       ; preds = %if.then.538, %lor.lhs.false.532, %land.lhs.true.526, %if.end.523
  %494 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number544 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %494, i32 0, i32 10
  %495 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number544, align 8
  %nb_inplace_or = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %495, i32 0, i32 28
  %496 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_or, align 8
  %tobool545 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %496, null
  br i1 %tobool545, label %if.end.563, label %land.lhs.true.546

land.lhs.true.546:                                ; preds = %if.end.543
  %497 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number547 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %497, i32 0, i32 10
  %498 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number547, align 8
  %nb_inplace_or548 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %498, i32 0, i32 28
  %499 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_or548, align 8
  %cmp549 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %499, null
  br i1 %cmp549, label %land.lhs.true.550, label %if.end.563

land.lhs.true.550:                                ; preds = %land.lhs.true.546
  %500 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp551 = icmp eq %struct._typeobject* %500, null
  br i1 %cmp551, label %if.then.558, label %lor.lhs.false.552

lor.lhs.false.552:                                ; preds = %land.lhs.true.550
  %501 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number553 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %501, i32 0, i32 10
  %502 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number553, align 8
  %nb_inplace_or554 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %502, i32 0, i32 28
  %503 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_or554, align 8
  %504 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number555 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %504, i32 0, i32 10
  %505 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number555, align 8
  %nb_inplace_or556 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %505, i32 0, i32 28
  %506 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_or556, align 8
  %cmp557 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %503, %506
  br i1 %cmp557, label %if.then.558, label %if.end.563

if.then.558:                                      ; preds = %lor.lhs.false.552, %land.lhs.true.550
  %507 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number559 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %507, i32 0, i32 10
  %508 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number559, align 8
  %nb_inplace_or560 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %508, i32 0, i32 28
  %509 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_or560, align 8
  %510 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number561 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %510, i32 0, i32 10
  %511 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number561, align 8
  %nb_inplace_or562 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %511, i32 0, i32 28
  store %struct._object* (%struct._object*, %struct._object*)* %509, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_or562, align 8
  br label %if.end.563

if.end.563:                                       ; preds = %if.then.558, %lor.lhs.false.552, %land.lhs.true.546, %if.end.543
  %512 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number564 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %512, i32 0, i32 10
  %513 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number564, align 8
  %nb_true_divide = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %513, i32 0, i32 30
  %514 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide, align 8
  %tobool565 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %514, null
  br i1 %tobool565, label %if.end.583, label %land.lhs.true.566

land.lhs.true.566:                                ; preds = %if.end.563
  %515 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number567 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %515, i32 0, i32 10
  %516 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number567, align 8
  %nb_true_divide568 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %516, i32 0, i32 30
  %517 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide568, align 8
  %cmp569 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %517, null
  br i1 %cmp569, label %land.lhs.true.570, label %if.end.583

land.lhs.true.570:                                ; preds = %land.lhs.true.566
  %518 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp571 = icmp eq %struct._typeobject* %518, null
  br i1 %cmp571, label %if.then.578, label %lor.lhs.false.572

lor.lhs.false.572:                                ; preds = %land.lhs.true.570
  %519 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number573 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %519, i32 0, i32 10
  %520 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number573, align 8
  %nb_true_divide574 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %520, i32 0, i32 30
  %521 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide574, align 8
  %522 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number575 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %522, i32 0, i32 10
  %523 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number575, align 8
  %nb_true_divide576 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %523, i32 0, i32 30
  %524 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide576, align 8
  %cmp577 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %521, %524
  br i1 %cmp577, label %if.then.578, label %if.end.583

if.then.578:                                      ; preds = %lor.lhs.false.572, %land.lhs.true.570
  %525 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number579 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %525, i32 0, i32 10
  %526 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number579, align 8
  %nb_true_divide580 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %526, i32 0, i32 30
  %527 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide580, align 8
  %528 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number581 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %528, i32 0, i32 10
  %529 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number581, align 8
  %nb_true_divide582 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %529, i32 0, i32 30
  store %struct._object* (%struct._object*, %struct._object*)* %527, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide582, align 8
  br label %if.end.583

if.end.583:                                       ; preds = %if.then.578, %lor.lhs.false.572, %land.lhs.true.566, %if.end.563
  %530 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number584 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %530, i32 0, i32 10
  %531 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number584, align 8
  %nb_floor_divide = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %531, i32 0, i32 29
  %532 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide, align 8
  %tobool585 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %532, null
  br i1 %tobool585, label %if.end.603, label %land.lhs.true.586

land.lhs.true.586:                                ; preds = %if.end.583
  %533 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number587 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %533, i32 0, i32 10
  %534 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number587, align 8
  %nb_floor_divide588 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %534, i32 0, i32 29
  %535 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide588, align 8
  %cmp589 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %535, null
  br i1 %cmp589, label %land.lhs.true.590, label %if.end.603

land.lhs.true.590:                                ; preds = %land.lhs.true.586
  %536 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp591 = icmp eq %struct._typeobject* %536, null
  br i1 %cmp591, label %if.then.598, label %lor.lhs.false.592

lor.lhs.false.592:                                ; preds = %land.lhs.true.590
  %537 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number593 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %537, i32 0, i32 10
  %538 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number593, align 8
  %nb_floor_divide594 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %538, i32 0, i32 29
  %539 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide594, align 8
  %540 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number595 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %540, i32 0, i32 10
  %541 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number595, align 8
  %nb_floor_divide596 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %541, i32 0, i32 29
  %542 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide596, align 8
  %cmp597 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %539, %542
  br i1 %cmp597, label %if.then.598, label %if.end.603

if.then.598:                                      ; preds = %lor.lhs.false.592, %land.lhs.true.590
  %543 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number599 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %543, i32 0, i32 10
  %544 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number599, align 8
  %nb_floor_divide600 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %544, i32 0, i32 29
  %545 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide600, align 8
  %546 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number601 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %546, i32 0, i32 10
  %547 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number601, align 8
  %nb_floor_divide602 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %547, i32 0, i32 29
  store %struct._object* (%struct._object*, %struct._object*)* %545, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide602, align 8
  br label %if.end.603

if.end.603:                                       ; preds = %if.then.598, %lor.lhs.false.592, %land.lhs.true.586, %if.end.583
  %548 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number604 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %548, i32 0, i32 10
  %549 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number604, align 8
  %nb_inplace_true_divide = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %549, i32 0, i32 32
  %550 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_true_divide, align 8
  %tobool605 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %550, null
  br i1 %tobool605, label %if.end.623, label %land.lhs.true.606

land.lhs.true.606:                                ; preds = %if.end.603
  %551 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number607 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %551, i32 0, i32 10
  %552 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number607, align 8
  %nb_inplace_true_divide608 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %552, i32 0, i32 32
  %553 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_true_divide608, align 8
  %cmp609 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %553, null
  br i1 %cmp609, label %land.lhs.true.610, label %if.end.623

land.lhs.true.610:                                ; preds = %land.lhs.true.606
  %554 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp611 = icmp eq %struct._typeobject* %554, null
  br i1 %cmp611, label %if.then.618, label %lor.lhs.false.612

lor.lhs.false.612:                                ; preds = %land.lhs.true.610
  %555 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number613 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %555, i32 0, i32 10
  %556 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number613, align 8
  %nb_inplace_true_divide614 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %556, i32 0, i32 32
  %557 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_true_divide614, align 8
  %558 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number615 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %558, i32 0, i32 10
  %559 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number615, align 8
  %nb_inplace_true_divide616 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %559, i32 0, i32 32
  %560 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_true_divide616, align 8
  %cmp617 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %557, %560
  br i1 %cmp617, label %if.then.618, label %if.end.623

if.then.618:                                      ; preds = %lor.lhs.false.612, %land.lhs.true.610
  %561 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number619 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %561, i32 0, i32 10
  %562 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number619, align 8
  %nb_inplace_true_divide620 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %562, i32 0, i32 32
  %563 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_true_divide620, align 8
  %564 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number621 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %564, i32 0, i32 10
  %565 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number621, align 8
  %nb_inplace_true_divide622 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %565, i32 0, i32 32
  store %struct._object* (%struct._object*, %struct._object*)* %563, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_true_divide622, align 8
  br label %if.end.623

if.end.623:                                       ; preds = %if.then.618, %lor.lhs.false.612, %land.lhs.true.606, %if.end.603
  %566 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number624 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %566, i32 0, i32 10
  %567 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number624, align 8
  %nb_inplace_floor_divide = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %567, i32 0, i32 31
  %568 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_floor_divide, align 8
  %tobool625 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %568, null
  br i1 %tobool625, label %if.end.643, label %land.lhs.true.626

land.lhs.true.626:                                ; preds = %if.end.623
  %569 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number627 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %569, i32 0, i32 10
  %570 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number627, align 8
  %nb_inplace_floor_divide628 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %570, i32 0, i32 31
  %571 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_floor_divide628, align 8
  %cmp629 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %571, null
  br i1 %cmp629, label %land.lhs.true.630, label %if.end.643

land.lhs.true.630:                                ; preds = %land.lhs.true.626
  %572 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp631 = icmp eq %struct._typeobject* %572, null
  br i1 %cmp631, label %if.then.638, label %lor.lhs.false.632

lor.lhs.false.632:                                ; preds = %land.lhs.true.630
  %573 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number633 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %573, i32 0, i32 10
  %574 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number633, align 8
  %nb_inplace_floor_divide634 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %574, i32 0, i32 31
  %575 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_floor_divide634, align 8
  %576 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number635 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %576, i32 0, i32 10
  %577 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number635, align 8
  %nb_inplace_floor_divide636 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %577, i32 0, i32 31
  %578 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_floor_divide636, align 8
  %cmp637 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %575, %578
  br i1 %cmp637, label %if.then.638, label %if.end.643

if.then.638:                                      ; preds = %lor.lhs.false.632, %land.lhs.true.630
  %579 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number639 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %579, i32 0, i32 10
  %580 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number639, align 8
  %nb_inplace_floor_divide640 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %580, i32 0, i32 31
  %581 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_floor_divide640, align 8
  %582 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number641 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %582, i32 0, i32 10
  %583 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number641, align 8
  %nb_inplace_floor_divide642 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %583, i32 0, i32 31
  store %struct._object* (%struct._object*, %struct._object*)* %581, %struct._object* (%struct._object*, %struct._object*)** %nb_inplace_floor_divide642, align 8
  br label %if.end.643

if.end.643:                                       ; preds = %if.then.638, %lor.lhs.false.632, %land.lhs.true.626, %if.end.623
  %584 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number644 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %584, i32 0, i32 10
  %585 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number644, align 8
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %585, i32 0, i32 33
  %586 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index, align 8
  %tobool645 = icmp ne %struct._object* (%struct._object*)* %586, null
  br i1 %tobool645, label %if.end.663, label %land.lhs.true.646

land.lhs.true.646:                                ; preds = %if.end.643
  %587 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number647 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %587, i32 0, i32 10
  %588 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number647, align 8
  %nb_index648 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %588, i32 0, i32 33
  %589 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index648, align 8
  %cmp649 = icmp ne %struct._object* (%struct._object*)* %589, null
  br i1 %cmp649, label %land.lhs.true.650, label %if.end.663

land.lhs.true.650:                                ; preds = %land.lhs.true.646
  %590 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp651 = icmp eq %struct._typeobject* %590, null
  br i1 %cmp651, label %if.then.658, label %lor.lhs.false.652

lor.lhs.false.652:                                ; preds = %land.lhs.true.650
  %591 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number653 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %591, i32 0, i32 10
  %592 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number653, align 8
  %nb_index654 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %592, i32 0, i32 33
  %593 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index654, align 8
  %594 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_number655 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %594, i32 0, i32 10
  %595 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number655, align 8
  %nb_index656 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %595, i32 0, i32 33
  %596 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index656, align 8
  %cmp657 = icmp ne %struct._object* (%struct._object*)* %593, %596
  br i1 %cmp657, label %if.then.658, label %if.end.663

if.then.658:                                      ; preds = %lor.lhs.false.652, %land.lhs.true.650
  %597 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_number659 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %597, i32 0, i32 10
  %598 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number659, align 8
  %nb_index660 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %598, i32 0, i32 33
  %599 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index660, align 8
  %600 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number661 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %600, i32 0, i32 10
  %601 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number661, align 8
  %nb_index662 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %601, i32 0, i32 33
  store %struct._object* (%struct._object*)* %599, %struct._object* (%struct._object*)** %nb_index662, align 8
  br label %if.end.663

if.end.663:                                       ; preds = %if.then.658, %lor.lhs.false.652, %land.lhs.true.646, %if.end.643
  br label %if.end.664

if.end.664:                                       ; preds = %if.end.663, %land.lhs.true, %entry
  %602 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %602, i32 0, i32 11
  %603 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8
  %cmp665 = icmp ne %struct.PySequenceMethods* %603, null
  br i1 %cmp665, label %land.lhs.true.666, label %if.end.835

land.lhs.true.666:                                ; preds = %if.end.664
  %604 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence667 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %604, i32 0, i32 11
  %605 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence667, align 8
  %cmp668 = icmp ne %struct.PySequenceMethods* %605, null
  br i1 %cmp668, label %if.then.669, label %if.end.835

if.then.669:                                      ; preds = %land.lhs.true.666
  %606 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_base670 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %606, i32 0, i32 30
  %607 = load %struct._typeobject*, %struct._typeobject** %tp_base670, align 8
  store %struct._typeobject* %607, %struct._typeobject** %basebase, align 8
  %608 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence671 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %608, i32 0, i32 11
  %609 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence671, align 8
  %cmp672 = icmp eq %struct.PySequenceMethods* %609, null
  br i1 %cmp672, label %if.then.673, label %if.end.674

if.then.673:                                      ; preds = %if.then.669
  store %struct._typeobject* null, %struct._typeobject** %basebase, align 8
  br label %if.end.674

if.end.674:                                       ; preds = %if.then.673, %if.then.669
  %610 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence675 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %610, i32 0, i32 11
  %611 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence675, align 8
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %611, i32 0, i32 0
  %612 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8
  %tobool676 = icmp ne i64 (%struct._object*)* %612, null
  br i1 %tobool676, label %if.end.694, label %land.lhs.true.677

land.lhs.true.677:                                ; preds = %if.end.674
  %613 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence678 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %613, i32 0, i32 11
  %614 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence678, align 8
  %sq_length679 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %614, i32 0, i32 0
  %615 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length679, align 8
  %cmp680 = icmp ne i64 (%struct._object*)* %615, null
  br i1 %cmp680, label %land.lhs.true.681, label %if.end.694

land.lhs.true.681:                                ; preds = %land.lhs.true.677
  %616 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp682 = icmp eq %struct._typeobject* %616, null
  br i1 %cmp682, label %if.then.689, label %lor.lhs.false.683

lor.lhs.false.683:                                ; preds = %land.lhs.true.681
  %617 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence684 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %617, i32 0, i32 11
  %618 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence684, align 8
  %sq_length685 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %618, i32 0, i32 0
  %619 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length685, align 8
  %620 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence686 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %620, i32 0, i32 11
  %621 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence686, align 8
  %sq_length687 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %621, i32 0, i32 0
  %622 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length687, align 8
  %cmp688 = icmp ne i64 (%struct._object*)* %619, %622
  br i1 %cmp688, label %if.then.689, label %if.end.694

if.then.689:                                      ; preds = %lor.lhs.false.683, %land.lhs.true.681
  %623 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence690 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %623, i32 0, i32 11
  %624 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence690, align 8
  %sq_length691 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %624, i32 0, i32 0
  %625 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length691, align 8
  %626 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence692 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %626, i32 0, i32 11
  %627 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence692, align 8
  %sq_length693 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %627, i32 0, i32 0
  store i64 (%struct._object*)* %625, i64 (%struct._object*)** %sq_length693, align 8
  br label %if.end.694

if.end.694:                                       ; preds = %if.then.689, %lor.lhs.false.683, %land.lhs.true.677, %if.end.674
  %628 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence695 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %628, i32 0, i32 11
  %629 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence695, align 8
  %sq_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %629, i32 0, i32 1
  %630 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat, align 8
  %tobool696 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %630, null
  br i1 %tobool696, label %if.end.714, label %land.lhs.true.697

land.lhs.true.697:                                ; preds = %if.end.694
  %631 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence698 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %631, i32 0, i32 11
  %632 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence698, align 8
  %sq_concat699 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %632, i32 0, i32 1
  %633 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat699, align 8
  %cmp700 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %633, null
  br i1 %cmp700, label %land.lhs.true.701, label %if.end.714

land.lhs.true.701:                                ; preds = %land.lhs.true.697
  %634 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp702 = icmp eq %struct._typeobject* %634, null
  br i1 %cmp702, label %if.then.709, label %lor.lhs.false.703

lor.lhs.false.703:                                ; preds = %land.lhs.true.701
  %635 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence704 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %635, i32 0, i32 11
  %636 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence704, align 8
  %sq_concat705 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %636, i32 0, i32 1
  %637 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat705, align 8
  %638 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence706 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %638, i32 0, i32 11
  %639 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence706, align 8
  %sq_concat707 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %639, i32 0, i32 1
  %640 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat707, align 8
  %cmp708 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %637, %640
  br i1 %cmp708, label %if.then.709, label %if.end.714

if.then.709:                                      ; preds = %lor.lhs.false.703, %land.lhs.true.701
  %641 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence710 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %641, i32 0, i32 11
  %642 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence710, align 8
  %sq_concat711 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %642, i32 0, i32 1
  %643 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_concat711, align 8
  %644 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence712 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %644, i32 0, i32 11
  %645 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence712, align 8
  %sq_concat713 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %645, i32 0, i32 1
  store %struct._object* (%struct._object*, %struct._object*)* %643, %struct._object* (%struct._object*, %struct._object*)** %sq_concat713, align 8
  br label %if.end.714

if.end.714:                                       ; preds = %if.then.709, %lor.lhs.false.703, %land.lhs.true.697, %if.end.694
  %646 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence715 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %646, i32 0, i32 11
  %647 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence715, align 8
  %sq_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %647, i32 0, i32 2
  %648 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat, align 8
  %tobool716 = icmp ne %struct._object* (%struct._object*, i64)* %648, null
  br i1 %tobool716, label %if.end.734, label %land.lhs.true.717

land.lhs.true.717:                                ; preds = %if.end.714
  %649 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence718 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %649, i32 0, i32 11
  %650 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence718, align 8
  %sq_repeat719 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %650, i32 0, i32 2
  %651 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat719, align 8
  %cmp720 = icmp ne %struct._object* (%struct._object*, i64)* %651, null
  br i1 %cmp720, label %land.lhs.true.721, label %if.end.734

land.lhs.true.721:                                ; preds = %land.lhs.true.717
  %652 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp722 = icmp eq %struct._typeobject* %652, null
  br i1 %cmp722, label %if.then.729, label %lor.lhs.false.723

lor.lhs.false.723:                                ; preds = %land.lhs.true.721
  %653 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence724 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %653, i32 0, i32 11
  %654 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence724, align 8
  %sq_repeat725 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %654, i32 0, i32 2
  %655 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat725, align 8
  %656 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence726 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %656, i32 0, i32 11
  %657 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence726, align 8
  %sq_repeat727 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %657, i32 0, i32 2
  %658 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat727, align 8
  %cmp728 = icmp ne %struct._object* (%struct._object*, i64)* %655, %658
  br i1 %cmp728, label %if.then.729, label %if.end.734

if.then.729:                                      ; preds = %lor.lhs.false.723, %land.lhs.true.721
  %659 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence730 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %659, i32 0, i32 11
  %660 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence730, align 8
  %sq_repeat731 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %660, i32 0, i32 2
  %661 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_repeat731, align 8
  %662 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence732 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %662, i32 0, i32 11
  %663 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence732, align 8
  %sq_repeat733 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %663, i32 0, i32 2
  store %struct._object* (%struct._object*, i64)* %661, %struct._object* (%struct._object*, i64)** %sq_repeat733, align 8
  br label %if.end.734

if.end.734:                                       ; preds = %if.then.729, %lor.lhs.false.723, %land.lhs.true.717, %if.end.714
  %664 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence735 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %664, i32 0, i32 11
  %665 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence735, align 8
  %sq_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %665, i32 0, i32 3
  %666 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item, align 8
  %tobool736 = icmp ne %struct._object* (%struct._object*, i64)* %666, null
  br i1 %tobool736, label %if.end.754, label %land.lhs.true.737

land.lhs.true.737:                                ; preds = %if.end.734
  %667 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence738 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %667, i32 0, i32 11
  %668 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence738, align 8
  %sq_item739 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %668, i32 0, i32 3
  %669 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item739, align 8
  %cmp740 = icmp ne %struct._object* (%struct._object*, i64)* %669, null
  br i1 %cmp740, label %land.lhs.true.741, label %if.end.754

land.lhs.true.741:                                ; preds = %land.lhs.true.737
  %670 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp742 = icmp eq %struct._typeobject* %670, null
  br i1 %cmp742, label %if.then.749, label %lor.lhs.false.743

lor.lhs.false.743:                                ; preds = %land.lhs.true.741
  %671 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence744 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %671, i32 0, i32 11
  %672 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence744, align 8
  %sq_item745 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %672, i32 0, i32 3
  %673 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item745, align 8
  %674 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence746 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %674, i32 0, i32 11
  %675 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence746, align 8
  %sq_item747 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %675, i32 0, i32 3
  %676 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item747, align 8
  %cmp748 = icmp ne %struct._object* (%struct._object*, i64)* %673, %676
  br i1 %cmp748, label %if.then.749, label %if.end.754

if.then.749:                                      ; preds = %lor.lhs.false.743, %land.lhs.true.741
  %677 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence750 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %677, i32 0, i32 11
  %678 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence750, align 8
  %sq_item751 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %678, i32 0, i32 3
  %679 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_item751, align 8
  %680 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence752 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %680, i32 0, i32 11
  %681 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence752, align 8
  %sq_item753 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %681, i32 0, i32 3
  store %struct._object* (%struct._object*, i64)* %679, %struct._object* (%struct._object*, i64)** %sq_item753, align 8
  br label %if.end.754

if.end.754:                                       ; preds = %if.then.749, %lor.lhs.false.743, %land.lhs.true.737, %if.end.734
  %682 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence755 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %682, i32 0, i32 11
  %683 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence755, align 8
  %sq_ass_item = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %683, i32 0, i32 5
  %684 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item, align 8
  %tobool756 = icmp ne i32 (%struct._object*, i64, %struct._object*)* %684, null
  br i1 %tobool756, label %if.end.774, label %land.lhs.true.757

land.lhs.true.757:                                ; preds = %if.end.754
  %685 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence758 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %685, i32 0, i32 11
  %686 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence758, align 8
  %sq_ass_item759 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %686, i32 0, i32 5
  %687 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item759, align 8
  %cmp760 = icmp ne i32 (%struct._object*, i64, %struct._object*)* %687, null
  br i1 %cmp760, label %land.lhs.true.761, label %if.end.774

land.lhs.true.761:                                ; preds = %land.lhs.true.757
  %688 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp762 = icmp eq %struct._typeobject* %688, null
  br i1 %cmp762, label %if.then.769, label %lor.lhs.false.763

lor.lhs.false.763:                                ; preds = %land.lhs.true.761
  %689 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence764 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %689, i32 0, i32 11
  %690 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence764, align 8
  %sq_ass_item765 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %690, i32 0, i32 5
  %691 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item765, align 8
  %692 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence766 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %692, i32 0, i32 11
  %693 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence766, align 8
  %sq_ass_item767 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %693, i32 0, i32 5
  %694 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item767, align 8
  %cmp768 = icmp ne i32 (%struct._object*, i64, %struct._object*)* %691, %694
  br i1 %cmp768, label %if.then.769, label %if.end.774

if.then.769:                                      ; preds = %lor.lhs.false.763, %land.lhs.true.761
  %695 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence770 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %695, i32 0, i32 11
  %696 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence770, align 8
  %sq_ass_item771 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %696, i32 0, i32 5
  %697 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item771, align 8
  %698 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence772 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %698, i32 0, i32 11
  %699 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence772, align 8
  %sq_ass_item773 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %699, i32 0, i32 5
  store i32 (%struct._object*, i64, %struct._object*)* %697, i32 (%struct._object*, i64, %struct._object*)** %sq_ass_item773, align 8
  br label %if.end.774

if.end.774:                                       ; preds = %if.then.769, %lor.lhs.false.763, %land.lhs.true.757, %if.end.754
  %700 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence775 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %700, i32 0, i32 11
  %701 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence775, align 8
  %sq_contains = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %701, i32 0, i32 7
  %702 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %sq_contains, align 8
  %tobool776 = icmp ne i32 (%struct._object*, %struct._object*)* %702, null
  br i1 %tobool776, label %if.end.794, label %land.lhs.true.777

land.lhs.true.777:                                ; preds = %if.end.774
  %703 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence778 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %703, i32 0, i32 11
  %704 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence778, align 8
  %sq_contains779 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %704, i32 0, i32 7
  %705 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %sq_contains779, align 8
  %cmp780 = icmp ne i32 (%struct._object*, %struct._object*)* %705, null
  br i1 %cmp780, label %land.lhs.true.781, label %if.end.794

land.lhs.true.781:                                ; preds = %land.lhs.true.777
  %706 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp782 = icmp eq %struct._typeobject* %706, null
  br i1 %cmp782, label %if.then.789, label %lor.lhs.false.783

lor.lhs.false.783:                                ; preds = %land.lhs.true.781
  %707 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence784 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %707, i32 0, i32 11
  %708 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence784, align 8
  %sq_contains785 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %708, i32 0, i32 7
  %709 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %sq_contains785, align 8
  %710 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence786 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %710, i32 0, i32 11
  %711 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence786, align 8
  %sq_contains787 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %711, i32 0, i32 7
  %712 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %sq_contains787, align 8
  %cmp788 = icmp ne i32 (%struct._object*, %struct._object*)* %709, %712
  br i1 %cmp788, label %if.then.789, label %if.end.794

if.then.789:                                      ; preds = %lor.lhs.false.783, %land.lhs.true.781
  %713 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence790 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %713, i32 0, i32 11
  %714 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence790, align 8
  %sq_contains791 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %714, i32 0, i32 7
  %715 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %sq_contains791, align 8
  %716 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence792 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %716, i32 0, i32 11
  %717 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence792, align 8
  %sq_contains793 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %717, i32 0, i32 7
  store i32 (%struct._object*, %struct._object*)* %715, i32 (%struct._object*, %struct._object*)** %sq_contains793, align 8
  br label %if.end.794

if.end.794:                                       ; preds = %if.then.789, %lor.lhs.false.783, %land.lhs.true.777, %if.end.774
  %718 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence795 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %718, i32 0, i32 11
  %719 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence795, align 8
  %sq_inplace_concat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %719, i32 0, i32 8
  %720 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat, align 8
  %tobool796 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %720, null
  br i1 %tobool796, label %if.end.814, label %land.lhs.true.797

land.lhs.true.797:                                ; preds = %if.end.794
  %721 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence798 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %721, i32 0, i32 11
  %722 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence798, align 8
  %sq_inplace_concat799 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %722, i32 0, i32 8
  %723 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat799, align 8
  %cmp800 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %723, null
  br i1 %cmp800, label %land.lhs.true.801, label %if.end.814

land.lhs.true.801:                                ; preds = %land.lhs.true.797
  %724 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp802 = icmp eq %struct._typeobject* %724, null
  br i1 %cmp802, label %if.then.809, label %lor.lhs.false.803

lor.lhs.false.803:                                ; preds = %land.lhs.true.801
  %725 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence804 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %725, i32 0, i32 11
  %726 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence804, align 8
  %sq_inplace_concat805 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %726, i32 0, i32 8
  %727 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat805, align 8
  %728 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence806 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %728, i32 0, i32 11
  %729 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence806, align 8
  %sq_inplace_concat807 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %729, i32 0, i32 8
  %730 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat807, align 8
  %cmp808 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %727, %730
  br i1 %cmp808, label %if.then.809, label %if.end.814

if.then.809:                                      ; preds = %lor.lhs.false.803, %land.lhs.true.801
  %731 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence810 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %731, i32 0, i32 11
  %732 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence810, align 8
  %sq_inplace_concat811 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %732, i32 0, i32 8
  %733 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat811, align 8
  %734 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence812 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %734, i32 0, i32 11
  %735 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence812, align 8
  %sq_inplace_concat813 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %735, i32 0, i32 8
  store %struct._object* (%struct._object*, %struct._object*)* %733, %struct._object* (%struct._object*, %struct._object*)** %sq_inplace_concat813, align 8
  br label %if.end.814

if.end.814:                                       ; preds = %if.then.809, %lor.lhs.false.803, %land.lhs.true.797, %if.end.794
  %736 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence815 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %736, i32 0, i32 11
  %737 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence815, align 8
  %sq_inplace_repeat = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %737, i32 0, i32 9
  %738 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat, align 8
  %tobool816 = icmp ne %struct._object* (%struct._object*, i64)* %738, null
  br i1 %tobool816, label %if.end.834, label %land.lhs.true.817

land.lhs.true.817:                                ; preds = %if.end.814
  %739 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence818 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %739, i32 0, i32 11
  %740 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence818, align 8
  %sq_inplace_repeat819 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %740, i32 0, i32 9
  %741 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat819, align 8
  %cmp820 = icmp ne %struct._object* (%struct._object*, i64)* %741, null
  br i1 %cmp820, label %land.lhs.true.821, label %if.end.834

land.lhs.true.821:                                ; preds = %land.lhs.true.817
  %742 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp822 = icmp eq %struct._typeobject* %742, null
  br i1 %cmp822, label %if.then.829, label %lor.lhs.false.823

lor.lhs.false.823:                                ; preds = %land.lhs.true.821
  %743 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence824 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %743, i32 0, i32 11
  %744 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence824, align 8
  %sq_inplace_repeat825 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %744, i32 0, i32 9
  %745 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat825, align 8
  %746 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_sequence826 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %746, i32 0, i32 11
  %747 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence826, align 8
  %sq_inplace_repeat827 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %747, i32 0, i32 9
  %748 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat827, align 8
  %cmp828 = icmp ne %struct._object* (%struct._object*, i64)* %745, %748
  br i1 %cmp828, label %if.then.829, label %if.end.834

if.then.829:                                      ; preds = %lor.lhs.false.823, %land.lhs.true.821
  %749 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_sequence830 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %749, i32 0, i32 11
  %750 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence830, align 8
  %sq_inplace_repeat831 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %750, i32 0, i32 9
  %751 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat831, align 8
  %752 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence832 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %752, i32 0, i32 11
  %753 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence832, align 8
  %sq_inplace_repeat833 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %753, i32 0, i32 9
  store %struct._object* (%struct._object*, i64)* %751, %struct._object* (%struct._object*, i64)** %sq_inplace_repeat833, align 8
  br label %if.end.834

if.end.834:                                       ; preds = %if.then.829, %lor.lhs.false.823, %land.lhs.true.817, %if.end.814
  br label %if.end.835

if.end.835:                                       ; preds = %if.end.834, %land.lhs.true.666, %if.end.664
  %754 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %754, i32 0, i32 12
  %755 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8
  %cmp836 = icmp ne %struct.PyMappingMethods* %755, null
  br i1 %cmp836, label %land.lhs.true.837, label %if.end.906

land.lhs.true.837:                                ; preds = %if.end.835
  %756 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping838 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %756, i32 0, i32 12
  %757 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping838, align 8
  %cmp839 = icmp ne %struct.PyMappingMethods* %757, null
  br i1 %cmp839, label %if.then.840, label %if.end.906

if.then.840:                                      ; preds = %land.lhs.true.837
  %758 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_base841 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %758, i32 0, i32 30
  %759 = load %struct._typeobject*, %struct._typeobject** %tp_base841, align 8
  store %struct._typeobject* %759, %struct._typeobject** %basebase, align 8
  %760 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_mapping842 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %760, i32 0, i32 12
  %761 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping842, align 8
  %cmp843 = icmp eq %struct.PyMappingMethods* %761, null
  br i1 %cmp843, label %if.then.844, label %if.end.845

if.then.844:                                      ; preds = %if.then.840
  store %struct._typeobject* null, %struct._typeobject** %basebase, align 8
  br label %if.end.845

if.end.845:                                       ; preds = %if.then.844, %if.then.840
  %762 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping846 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %762, i32 0, i32 12
  %763 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping846, align 8
  %mp_length = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %763, i32 0, i32 0
  %764 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length, align 8
  %tobool847 = icmp ne i64 (%struct._object*)* %764, null
  br i1 %tobool847, label %if.end.865, label %land.lhs.true.848

land.lhs.true.848:                                ; preds = %if.end.845
  %765 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping849 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %765, i32 0, i32 12
  %766 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping849, align 8
  %mp_length850 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %766, i32 0, i32 0
  %767 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length850, align 8
  %cmp851 = icmp ne i64 (%struct._object*)* %767, null
  br i1 %cmp851, label %land.lhs.true.852, label %if.end.865

land.lhs.true.852:                                ; preds = %land.lhs.true.848
  %768 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp853 = icmp eq %struct._typeobject* %768, null
  br i1 %cmp853, label %if.then.860, label %lor.lhs.false.854

lor.lhs.false.854:                                ; preds = %land.lhs.true.852
  %769 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping855 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %769, i32 0, i32 12
  %770 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping855, align 8
  %mp_length856 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %770, i32 0, i32 0
  %771 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length856, align 8
  %772 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_mapping857 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %772, i32 0, i32 12
  %773 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping857, align 8
  %mp_length858 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %773, i32 0, i32 0
  %774 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length858, align 8
  %cmp859 = icmp ne i64 (%struct._object*)* %771, %774
  br i1 %cmp859, label %if.then.860, label %if.end.865

if.then.860:                                      ; preds = %lor.lhs.false.854, %land.lhs.true.852
  %775 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping861 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %775, i32 0, i32 12
  %776 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping861, align 8
  %mp_length862 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %776, i32 0, i32 0
  %777 = load i64 (%struct._object*)*, i64 (%struct._object*)** %mp_length862, align 8
  %778 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping863 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %778, i32 0, i32 12
  %779 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping863, align 8
  %mp_length864 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %779, i32 0, i32 0
  store i64 (%struct._object*)* %777, i64 (%struct._object*)** %mp_length864, align 8
  br label %if.end.865

if.end.865:                                       ; preds = %if.then.860, %lor.lhs.false.854, %land.lhs.true.848, %if.end.845
  %780 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping866 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %780, i32 0, i32 12
  %781 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping866, align 8
  %mp_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %781, i32 0, i32 1
  %782 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript, align 8
  %tobool867 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %782, null
  br i1 %tobool867, label %if.end.885, label %land.lhs.true.868

land.lhs.true.868:                                ; preds = %if.end.865
  %783 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping869 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %783, i32 0, i32 12
  %784 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping869, align 8
  %mp_subscript870 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %784, i32 0, i32 1
  %785 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript870, align 8
  %cmp871 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %785, null
  br i1 %cmp871, label %land.lhs.true.872, label %if.end.885

land.lhs.true.872:                                ; preds = %land.lhs.true.868
  %786 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp873 = icmp eq %struct._typeobject* %786, null
  br i1 %cmp873, label %if.then.880, label %lor.lhs.false.874

lor.lhs.false.874:                                ; preds = %land.lhs.true.872
  %787 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping875 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %787, i32 0, i32 12
  %788 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping875, align 8
  %mp_subscript876 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %788, i32 0, i32 1
  %789 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript876, align 8
  %790 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_mapping877 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %790, i32 0, i32 12
  %791 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping877, align 8
  %mp_subscript878 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %791, i32 0, i32 1
  %792 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript878, align 8
  %cmp879 = icmp ne %struct._object* (%struct._object*, %struct._object*)* %789, %792
  br i1 %cmp879, label %if.then.880, label %if.end.885

if.then.880:                                      ; preds = %lor.lhs.false.874, %land.lhs.true.872
  %793 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping881 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %793, i32 0, i32 12
  %794 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping881, align 8
  %mp_subscript882 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %794, i32 0, i32 1
  %795 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript882, align 8
  %796 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping883 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %796, i32 0, i32 12
  %797 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping883, align 8
  %mp_subscript884 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %797, i32 0, i32 1
  store %struct._object* (%struct._object*, %struct._object*)* %795, %struct._object* (%struct._object*, %struct._object*)** %mp_subscript884, align 8
  br label %if.end.885

if.end.885:                                       ; preds = %if.then.880, %lor.lhs.false.874, %land.lhs.true.868, %if.end.865
  %798 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping886 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %798, i32 0, i32 12
  %799 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping886, align 8
  %mp_ass_subscript = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %799, i32 0, i32 2
  %800 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript, align 8
  %tobool887 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %800, null
  br i1 %tobool887, label %if.end.905, label %land.lhs.true.888

land.lhs.true.888:                                ; preds = %if.end.885
  %801 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping889 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %801, i32 0, i32 12
  %802 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping889, align 8
  %mp_ass_subscript890 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %802, i32 0, i32 2
  %803 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript890, align 8
  %cmp891 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %803, null
  br i1 %cmp891, label %land.lhs.true.892, label %if.end.905

land.lhs.true.892:                                ; preds = %land.lhs.true.888
  %804 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp893 = icmp eq %struct._typeobject* %804, null
  br i1 %cmp893, label %if.then.900, label %lor.lhs.false.894

lor.lhs.false.894:                                ; preds = %land.lhs.true.892
  %805 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping895 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %805, i32 0, i32 12
  %806 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping895, align 8
  %mp_ass_subscript896 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %806, i32 0, i32 2
  %807 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript896, align 8
  %808 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_mapping897 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %808, i32 0, i32 12
  %809 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping897, align 8
  %mp_ass_subscript898 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %809, i32 0, i32 2
  %810 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript898, align 8
  %cmp899 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %807, %810
  br i1 %cmp899, label %if.then.900, label %if.end.905

if.then.900:                                      ; preds = %lor.lhs.false.894, %land.lhs.true.892
  %811 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_mapping901 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %811, i32 0, i32 12
  %812 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping901, align 8
  %mp_ass_subscript902 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %812, i32 0, i32 2
  %813 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript902, align 8
  %814 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping903 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %814, i32 0, i32 12
  %815 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping903, align 8
  %mp_ass_subscript904 = getelementptr inbounds %struct.PyMappingMethods, %struct.PyMappingMethods* %815, i32 0, i32 2
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %813, i32 (%struct._object*, %struct._object*, %struct._object*)** %mp_ass_subscript904, align 8
  br label %if.end.905

if.end.905:                                       ; preds = %if.then.900, %lor.lhs.false.894, %land.lhs.true.888, %if.end.885
  br label %if.end.906

if.end.906:                                       ; preds = %if.end.905, %land.lhs.true.837, %if.end.835
  %816 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_buffer = getelementptr inbounds %struct._typeobject, %struct._typeobject* %816, i32 0, i32 18
  %817 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer, align 8
  %cmp907 = icmp ne %struct.PyBufferProcs* %817, null
  br i1 %cmp907, label %land.lhs.true.908, label %if.end.957

land.lhs.true.908:                                ; preds = %if.end.906
  %818 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_buffer909 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %818, i32 0, i32 18
  %819 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer909, align 8
  %cmp910 = icmp ne %struct.PyBufferProcs* %819, null
  br i1 %cmp910, label %if.then.911, label %if.end.957

if.then.911:                                      ; preds = %land.lhs.true.908
  %820 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_base912 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %820, i32 0, i32 30
  %821 = load %struct._typeobject*, %struct._typeobject** %tp_base912, align 8
  store %struct._typeobject* %821, %struct._typeobject** %basebase, align 8
  %822 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_buffer913 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %822, i32 0, i32 18
  %823 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer913, align 8
  %cmp914 = icmp eq %struct.PyBufferProcs* %823, null
  br i1 %cmp914, label %if.then.915, label %if.end.916

if.then.915:                                      ; preds = %if.then.911
  store %struct._typeobject* null, %struct._typeobject** %basebase, align 8
  br label %if.end.916

if.end.916:                                       ; preds = %if.then.915, %if.then.911
  %824 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_buffer917 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %824, i32 0, i32 18
  %825 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer917, align 8
  %bf_getbuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %825, i32 0, i32 0
  %826 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer, align 8
  %tobool918 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %826, null
  br i1 %tobool918, label %if.end.936, label %land.lhs.true.919

land.lhs.true.919:                                ; preds = %if.end.916
  %827 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_buffer920 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %827, i32 0, i32 18
  %828 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer920, align 8
  %bf_getbuffer921 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %828, i32 0, i32 0
  %829 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer921, align 8
  %cmp922 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %829, null
  br i1 %cmp922, label %land.lhs.true.923, label %if.end.936

land.lhs.true.923:                                ; preds = %land.lhs.true.919
  %830 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp924 = icmp eq %struct._typeobject* %830, null
  br i1 %cmp924, label %if.then.931, label %lor.lhs.false.925

lor.lhs.false.925:                                ; preds = %land.lhs.true.923
  %831 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_buffer926 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %831, i32 0, i32 18
  %832 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer926, align 8
  %bf_getbuffer927 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %832, i32 0, i32 0
  %833 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer927, align 8
  %834 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_buffer928 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %834, i32 0, i32 18
  %835 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer928, align 8
  %bf_getbuffer929 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %835, i32 0, i32 0
  %836 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer929, align 8
  %cmp930 = icmp ne i32 (%struct._object*, %struct.bufferinfo*, i32)* %833, %836
  br i1 %cmp930, label %if.then.931, label %if.end.936

if.then.931:                                      ; preds = %lor.lhs.false.925, %land.lhs.true.923
  %837 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_buffer932 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %837, i32 0, i32 18
  %838 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer932, align 8
  %bf_getbuffer933 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %838, i32 0, i32 0
  %839 = load i32 (%struct._object*, %struct.bufferinfo*, i32)*, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer933, align 8
  %840 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_buffer934 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %840, i32 0, i32 18
  %841 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer934, align 8
  %bf_getbuffer935 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %841, i32 0, i32 0
  store i32 (%struct._object*, %struct.bufferinfo*, i32)* %839, i32 (%struct._object*, %struct.bufferinfo*, i32)** %bf_getbuffer935, align 8
  br label %if.end.936

if.end.936:                                       ; preds = %if.then.931, %lor.lhs.false.925, %land.lhs.true.919, %if.end.916
  %842 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_buffer937 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %842, i32 0, i32 18
  %843 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer937, align 8
  %bf_releasebuffer = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %843, i32 0, i32 1
  %844 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer, align 8
  %tobool938 = icmp ne void (%struct._object*, %struct.bufferinfo*)* %844, null
  br i1 %tobool938, label %if.end.956, label %land.lhs.true.939

land.lhs.true.939:                                ; preds = %if.end.936
  %845 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_buffer940 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %845, i32 0, i32 18
  %846 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer940, align 8
  %bf_releasebuffer941 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %846, i32 0, i32 1
  %847 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer941, align 8
  %cmp942 = icmp ne void (%struct._object*, %struct.bufferinfo*)* %847, null
  br i1 %cmp942, label %land.lhs.true.943, label %if.end.956

land.lhs.true.943:                                ; preds = %land.lhs.true.939
  %848 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp944 = icmp eq %struct._typeobject* %848, null
  br i1 %cmp944, label %if.then.951, label %lor.lhs.false.945

lor.lhs.false.945:                                ; preds = %land.lhs.true.943
  %849 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_buffer946 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %849, i32 0, i32 18
  %850 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer946, align 8
  %bf_releasebuffer947 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %850, i32 0, i32 1
  %851 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer947, align 8
  %852 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_as_buffer948 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %852, i32 0, i32 18
  %853 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer948, align 8
  %bf_releasebuffer949 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %853, i32 0, i32 1
  %854 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer949, align 8
  %cmp950 = icmp ne void (%struct._object*, %struct.bufferinfo*)* %851, %854
  br i1 %cmp950, label %if.then.951, label %if.end.956

if.then.951:                                      ; preds = %lor.lhs.false.945, %land.lhs.true.943
  %855 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_as_buffer952 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %855, i32 0, i32 18
  %856 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer952, align 8
  %bf_releasebuffer953 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %856, i32 0, i32 1
  %857 = load void (%struct._object*, %struct.bufferinfo*)*, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer953, align 8
  %858 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_buffer954 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %858, i32 0, i32 18
  %859 = load %struct.PyBufferProcs*, %struct.PyBufferProcs** %tp_as_buffer954, align 8
  %bf_releasebuffer955 = getelementptr inbounds %struct.PyBufferProcs, %struct.PyBufferProcs* %859, i32 0, i32 1
  store void (%struct._object*, %struct.bufferinfo*)* %857, void (%struct._object*, %struct.bufferinfo*)** %bf_releasebuffer955, align 8
  br label %if.end.956

if.end.956:                                       ; preds = %if.then.951, %lor.lhs.false.945, %land.lhs.true.939, %if.end.936
  br label %if.end.957

if.end.957:                                       ; preds = %if.end.956, %land.lhs.true.908, %if.end.906
  %860 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_base958 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %860, i32 0, i32 30
  %861 = load %struct._typeobject*, %struct._typeobject** %tp_base958, align 8
  store %struct._typeobject* %861, %struct._typeobject** %basebase, align 8
  %862 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %862, i32 0, i32 4
  %863 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %tobool959 = icmp ne void (%struct._object*)* %863, null
  br i1 %tobool959, label %if.end.972, label %land.lhs.true.960

land.lhs.true.960:                                ; preds = %if.end.957
  %864 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dealloc961 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %864, i32 0, i32 4
  %865 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc961, align 8
  %cmp962 = icmp ne void (%struct._object*)* %865, null
  br i1 %cmp962, label %land.lhs.true.963, label %if.end.972

land.lhs.true.963:                                ; preds = %land.lhs.true.960
  %866 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp964 = icmp eq %struct._typeobject* %866, null
  br i1 %cmp964, label %if.then.969, label %lor.lhs.false.965

lor.lhs.false.965:                                ; preds = %land.lhs.true.963
  %867 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dealloc966 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %867, i32 0, i32 4
  %868 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc966, align 8
  %869 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_dealloc967 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %869, i32 0, i32 4
  %870 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc967, align 8
  %cmp968 = icmp ne void (%struct._object*)* %868, %870
  br i1 %cmp968, label %if.then.969, label %if.end.972

if.then.969:                                      ; preds = %lor.lhs.false.965, %land.lhs.true.963
  %871 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dealloc970 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %871, i32 0, i32 4
  %872 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc970, align 8
  %873 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dealloc971 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %873, i32 0, i32 4
  store void (%struct._object*)* %872, void (%struct._object*)** %tp_dealloc971, align 8
  br label %if.end.972

if.end.972:                                       ; preds = %if.then.969, %lor.lhs.false.965, %land.lhs.true.960, %if.end.957
  %874 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_getattr = getelementptr inbounds %struct._typeobject, %struct._typeobject* %874, i32 0, i32 6
  %875 = load %struct._object* (%struct._object*, i8*)*, %struct._object* (%struct._object*, i8*)** %tp_getattr, align 8
  %cmp973 = icmp eq %struct._object* (%struct._object*, i8*)* %875, null
  br i1 %cmp973, label %land.lhs.true.974, label %if.end.981

land.lhs.true.974:                                ; preds = %if.end.972
  %876 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_getattro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %876, i32 0, i32 16
  %877 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %tp_getattro, align 8
  %cmp975 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %877, null
  br i1 %cmp975, label %if.then.976, label %if.end.981

if.then.976:                                      ; preds = %land.lhs.true.974
  %878 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_getattr977 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %878, i32 0, i32 6
  %879 = load %struct._object* (%struct._object*, i8*)*, %struct._object* (%struct._object*, i8*)** %tp_getattr977, align 8
  %880 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_getattr978 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %880, i32 0, i32 6
  store %struct._object* (%struct._object*, i8*)* %879, %struct._object* (%struct._object*, i8*)** %tp_getattr978, align 8
  %881 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_getattro979 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %881, i32 0, i32 16
  %882 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %tp_getattro979, align 8
  %883 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_getattro980 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %883, i32 0, i32 16
  store %struct._object* (%struct._object*, %struct._object*)* %882, %struct._object* (%struct._object*, %struct._object*)** %tp_getattro980, align 8
  br label %if.end.981

if.end.981:                                       ; preds = %if.then.976, %land.lhs.true.974, %if.end.972
  %884 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_setattr = getelementptr inbounds %struct._typeobject, %struct._typeobject* %884, i32 0, i32 7
  %885 = load i32 (%struct._object*, i8*, %struct._object*)*, i32 (%struct._object*, i8*, %struct._object*)** %tp_setattr, align 8
  %cmp982 = icmp eq i32 (%struct._object*, i8*, %struct._object*)* %885, null
  br i1 %cmp982, label %land.lhs.true.983, label %if.end.990

land.lhs.true.983:                                ; preds = %if.end.981
  %886 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_setattro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %886, i32 0, i32 17
  %887 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_setattro, align 8
  %cmp984 = icmp eq i32 (%struct._object*, %struct._object*, %struct._object*)* %887, null
  br i1 %cmp984, label %if.then.985, label %if.end.990

if.then.985:                                      ; preds = %land.lhs.true.983
  %888 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_setattr986 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %888, i32 0, i32 7
  %889 = load i32 (%struct._object*, i8*, %struct._object*)*, i32 (%struct._object*, i8*, %struct._object*)** %tp_setattr986, align 8
  %890 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_setattr987 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %890, i32 0, i32 7
  store i32 (%struct._object*, i8*, %struct._object*)* %889, i32 (%struct._object*, i8*, %struct._object*)** %tp_setattr987, align 8
  %891 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_setattro988 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %891, i32 0, i32 17
  %892 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_setattro988, align 8
  %893 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_setattro989 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %893, i32 0, i32 17
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %892, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_setattro989, align 8
  br label %if.end.990

if.end.990:                                       ; preds = %if.then.985, %land.lhs.true.983, %if.end.981
  %894 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_repr = getelementptr inbounds %struct._typeobject, %struct._typeobject* %894, i32 0, i32 9
  %895 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_repr, align 8
  %tobool991 = icmp ne %struct._object* (%struct._object*)* %895, null
  br i1 %tobool991, label %if.end.1004, label %land.lhs.true.992

land.lhs.true.992:                                ; preds = %if.end.990
  %896 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_repr993 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %896, i32 0, i32 9
  %897 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_repr993, align 8
  %cmp994 = icmp ne %struct._object* (%struct._object*)* %897, null
  br i1 %cmp994, label %land.lhs.true.995, label %if.end.1004

land.lhs.true.995:                                ; preds = %land.lhs.true.992
  %898 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp996 = icmp eq %struct._typeobject* %898, null
  br i1 %cmp996, label %if.then.1001, label %lor.lhs.false.997

lor.lhs.false.997:                                ; preds = %land.lhs.true.995
  %899 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_repr998 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %899, i32 0, i32 9
  %900 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_repr998, align 8
  %901 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_repr999 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %901, i32 0, i32 9
  %902 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_repr999, align 8
  %cmp1000 = icmp ne %struct._object* (%struct._object*)* %900, %902
  br i1 %cmp1000, label %if.then.1001, label %if.end.1004

if.then.1001:                                     ; preds = %lor.lhs.false.997, %land.lhs.true.995
  %903 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_repr1002 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %903, i32 0, i32 9
  %904 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_repr1002, align 8
  %905 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_repr1003 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %905, i32 0, i32 9
  store %struct._object* (%struct._object*)* %904, %struct._object* (%struct._object*)** %tp_repr1003, align 8
  br label %if.end.1004

if.end.1004:                                      ; preds = %if.then.1001, %lor.lhs.false.997, %land.lhs.true.992, %if.end.990
  %906 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_call = getelementptr inbounds %struct._typeobject, %struct._typeobject* %906, i32 0, i32 14
  %907 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_call, align 8
  %tobool1005 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %907, null
  br i1 %tobool1005, label %if.end.1018, label %land.lhs.true.1006

land.lhs.true.1006:                               ; preds = %if.end.1004
  %908 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_call1007 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %908, i32 0, i32 14
  %909 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_call1007, align 8
  %cmp1008 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %909, null
  br i1 %cmp1008, label %land.lhs.true.1009, label %if.end.1018

land.lhs.true.1009:                               ; preds = %land.lhs.true.1006
  %910 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1010 = icmp eq %struct._typeobject* %910, null
  br i1 %cmp1010, label %if.then.1015, label %lor.lhs.false.1011

lor.lhs.false.1011:                               ; preds = %land.lhs.true.1009
  %911 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_call1012 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %911, i32 0, i32 14
  %912 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_call1012, align 8
  %913 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_call1013 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %913, i32 0, i32 14
  %914 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_call1013, align 8
  %cmp1014 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %912, %914
  br i1 %cmp1014, label %if.then.1015, label %if.end.1018

if.then.1015:                                     ; preds = %lor.lhs.false.1011, %land.lhs.true.1009
  %915 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_call1016 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %915, i32 0, i32 14
  %916 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_call1016, align 8
  %917 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_call1017 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %917, i32 0, i32 14
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %916, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_call1017, align 8
  br label %if.end.1018

if.end.1018:                                      ; preds = %if.then.1015, %lor.lhs.false.1011, %land.lhs.true.1006, %if.end.1004
  %918 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_str = getelementptr inbounds %struct._typeobject, %struct._typeobject* %918, i32 0, i32 15
  %919 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_str, align 8
  %tobool1019 = icmp ne %struct._object* (%struct._object*)* %919, null
  br i1 %tobool1019, label %if.end.1032, label %land.lhs.true.1020

land.lhs.true.1020:                               ; preds = %if.end.1018
  %920 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_str1021 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %920, i32 0, i32 15
  %921 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_str1021, align 8
  %cmp1022 = icmp ne %struct._object* (%struct._object*)* %921, null
  br i1 %cmp1022, label %land.lhs.true.1023, label %if.end.1032

land.lhs.true.1023:                               ; preds = %land.lhs.true.1020
  %922 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1024 = icmp eq %struct._typeobject* %922, null
  br i1 %cmp1024, label %if.then.1029, label %lor.lhs.false.1025

lor.lhs.false.1025:                               ; preds = %land.lhs.true.1023
  %923 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_str1026 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %923, i32 0, i32 15
  %924 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_str1026, align 8
  %925 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_str1027 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %925, i32 0, i32 15
  %926 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_str1027, align 8
  %cmp1028 = icmp ne %struct._object* (%struct._object*)* %924, %926
  br i1 %cmp1028, label %if.then.1029, label %if.end.1032

if.then.1029:                                     ; preds = %lor.lhs.false.1025, %land.lhs.true.1023
  %927 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_str1030 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %927, i32 0, i32 15
  %928 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_str1030, align 8
  %929 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_str1031 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %929, i32 0, i32 15
  store %struct._object* (%struct._object*)* %928, %struct._object* (%struct._object*)** %tp_str1031, align 8
  br label %if.end.1032

if.end.1032:                                      ; preds = %if.then.1029, %lor.lhs.false.1025, %land.lhs.true.1020, %if.end.1018
  %930 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_richcompare = getelementptr inbounds %struct._typeobject, %struct._typeobject* %930, i32 0, i32 23
  %931 = load %struct._object* (%struct._object*, %struct._object*, i32)*, %struct._object* (%struct._object*, %struct._object*, i32)** %tp_richcompare, align 8
  %cmp1033 = icmp eq %struct._object* (%struct._object*, %struct._object*, i32)* %931, null
  br i1 %cmp1033, label %land.lhs.true.1034, label %if.end.1043

land.lhs.true.1034:                               ; preds = %if.end.1032
  %932 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_hash = getelementptr inbounds %struct._typeobject, %struct._typeobject* %932, i32 0, i32 13
  %933 = load i64 (%struct._object*)*, i64 (%struct._object*)** %tp_hash, align 8
  %cmp1035 = icmp eq i64 (%struct._object*)* %933, null
  br i1 %cmp1035, label %land.lhs.true.1036, label %if.end.1043

land.lhs.true.1036:                               ; preds = %land.lhs.true.1034
  %934 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call i32 @overrides_hash(%struct._typeobject* %934)
  %tobool1037 = icmp ne i32 %call, 0
  br i1 %tobool1037, label %if.end.1043, label %if.then.1038

if.then.1038:                                     ; preds = %land.lhs.true.1036
  %935 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_richcompare1039 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %935, i32 0, i32 23
  %936 = load %struct._object* (%struct._object*, %struct._object*, i32)*, %struct._object* (%struct._object*, %struct._object*, i32)** %tp_richcompare1039, align 8
  %937 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_richcompare1040 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %937, i32 0, i32 23
  store %struct._object* (%struct._object*, %struct._object*, i32)* %936, %struct._object* (%struct._object*, %struct._object*, i32)** %tp_richcompare1040, align 8
  %938 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_hash1041 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %938, i32 0, i32 13
  %939 = load i64 (%struct._object*)*, i64 (%struct._object*)** %tp_hash1041, align 8
  %940 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_hash1042 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %940, i32 0, i32 13
  store i64 (%struct._object*)* %939, i64 (%struct._object*)** %tp_hash1042, align 8
  br label %if.end.1043

if.end.1043:                                      ; preds = %if.then.1038, %land.lhs.true.1036, %land.lhs.true.1034, %if.end.1032
  %941 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_iter = getelementptr inbounds %struct._typeobject, %struct._typeobject* %941, i32 0, i32 25
  %942 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iter, align 8
  %tobool1044 = icmp ne %struct._object* (%struct._object*)* %942, null
  br i1 %tobool1044, label %if.end.1057, label %land.lhs.true.1045

land.lhs.true.1045:                               ; preds = %if.end.1043
  %943 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_iter1046 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %943, i32 0, i32 25
  %944 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iter1046, align 8
  %cmp1047 = icmp ne %struct._object* (%struct._object*)* %944, null
  br i1 %cmp1047, label %land.lhs.true.1048, label %if.end.1057

land.lhs.true.1048:                               ; preds = %land.lhs.true.1045
  %945 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1049 = icmp eq %struct._typeobject* %945, null
  br i1 %cmp1049, label %if.then.1054, label %lor.lhs.false.1050

lor.lhs.false.1050:                               ; preds = %land.lhs.true.1048
  %946 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_iter1051 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %946, i32 0, i32 25
  %947 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iter1051, align 8
  %948 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_iter1052 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %948, i32 0, i32 25
  %949 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iter1052, align 8
  %cmp1053 = icmp ne %struct._object* (%struct._object*)* %947, %949
  br i1 %cmp1053, label %if.then.1054, label %if.end.1057

if.then.1054:                                     ; preds = %lor.lhs.false.1050, %land.lhs.true.1048
  %950 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_iter1055 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %950, i32 0, i32 25
  %951 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iter1055, align 8
  %952 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_iter1056 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %952, i32 0, i32 25
  store %struct._object* (%struct._object*)* %951, %struct._object* (%struct._object*)** %tp_iter1056, align 8
  br label %if.end.1057

if.end.1057:                                      ; preds = %if.then.1054, %lor.lhs.false.1050, %land.lhs.true.1045, %if.end.1043
  %953 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_iternext = getelementptr inbounds %struct._typeobject, %struct._typeobject* %953, i32 0, i32 26
  %954 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext, align 8
  %tobool1058 = icmp ne %struct._object* (%struct._object*)* %954, null
  br i1 %tobool1058, label %if.end.1071, label %land.lhs.true.1059

land.lhs.true.1059:                               ; preds = %if.end.1057
  %955 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_iternext1060 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %955, i32 0, i32 26
  %956 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext1060, align 8
  %cmp1061 = icmp ne %struct._object* (%struct._object*)* %956, null
  br i1 %cmp1061, label %land.lhs.true.1062, label %if.end.1071

land.lhs.true.1062:                               ; preds = %land.lhs.true.1059
  %957 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1063 = icmp eq %struct._typeobject* %957, null
  br i1 %cmp1063, label %if.then.1068, label %lor.lhs.false.1064

lor.lhs.false.1064:                               ; preds = %land.lhs.true.1062
  %958 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_iternext1065 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %958, i32 0, i32 26
  %959 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext1065, align 8
  %960 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_iternext1066 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %960, i32 0, i32 26
  %961 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext1066, align 8
  %cmp1067 = icmp ne %struct._object* (%struct._object*)* %959, %961
  br i1 %cmp1067, label %if.then.1068, label %if.end.1071

if.then.1068:                                     ; preds = %lor.lhs.false.1064, %land.lhs.true.1062
  %962 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_iternext1069 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %962, i32 0, i32 26
  %963 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext1069, align 8
  %964 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_iternext1070 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %964, i32 0, i32 26
  store %struct._object* (%struct._object*)* %963, %struct._object* (%struct._object*)** %tp_iternext1070, align 8
  br label %if.end.1071

if.end.1071:                                      ; preds = %if.then.1068, %lor.lhs.false.1064, %land.lhs.true.1059, %if.end.1057
  %965 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %965, i32 0, i32 32
  %966 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  %tobool1072 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %966, null
  br i1 %tobool1072, label %if.end.1085, label %land.lhs.true.1073

land.lhs.true.1073:                               ; preds = %if.end.1071
  %967 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_descr_get1074 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %967, i32 0, i32 32
  %968 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get1074, align 8
  %cmp1075 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %968, null
  br i1 %cmp1075, label %land.lhs.true.1076, label %if.end.1085

land.lhs.true.1076:                               ; preds = %land.lhs.true.1073
  %969 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1077 = icmp eq %struct._typeobject* %969, null
  br i1 %cmp1077, label %if.then.1082, label %lor.lhs.false.1078

lor.lhs.false.1078:                               ; preds = %land.lhs.true.1076
  %970 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_descr_get1079 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %970, i32 0, i32 32
  %971 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get1079, align 8
  %972 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_descr_get1080 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %972, i32 0, i32 32
  %973 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get1080, align 8
  %cmp1081 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %971, %973
  br i1 %cmp1081, label %if.then.1082, label %if.end.1085

if.then.1082:                                     ; preds = %lor.lhs.false.1078, %land.lhs.true.1076
  %974 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_descr_get1083 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %974, i32 0, i32 32
  %975 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get1083, align 8
  %976 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_descr_get1084 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %976, i32 0, i32 32
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %975, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get1084, align 8
  br label %if.end.1085

if.end.1085:                                      ; preds = %if.then.1082, %lor.lhs.false.1078, %land.lhs.true.1073, %if.end.1071
  %977 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_descr_set = getelementptr inbounds %struct._typeobject, %struct._typeobject* %977, i32 0, i32 33
  %978 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set, align 8
  %tobool1086 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %978, null
  br i1 %tobool1086, label %if.end.1099, label %land.lhs.true.1087

land.lhs.true.1087:                               ; preds = %if.end.1085
  %979 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_descr_set1088 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %979, i32 0, i32 33
  %980 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set1088, align 8
  %cmp1089 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %980, null
  br i1 %cmp1089, label %land.lhs.true.1090, label %if.end.1099

land.lhs.true.1090:                               ; preds = %land.lhs.true.1087
  %981 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1091 = icmp eq %struct._typeobject* %981, null
  br i1 %cmp1091, label %if.then.1096, label %lor.lhs.false.1092

lor.lhs.false.1092:                               ; preds = %land.lhs.true.1090
  %982 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_descr_set1093 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %982, i32 0, i32 33
  %983 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set1093, align 8
  %984 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_descr_set1094 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %984, i32 0, i32 33
  %985 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set1094, align 8
  %cmp1095 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %983, %985
  br i1 %cmp1095, label %if.then.1096, label %if.end.1099

if.then.1096:                                     ; preds = %lor.lhs.false.1092, %land.lhs.true.1090
  %986 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_descr_set1097 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %986, i32 0, i32 33
  %987 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set1097, align 8
  %988 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_descr_set1098 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %988, i32 0, i32 33
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %987, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set1098, align 8
  br label %if.end.1099

if.end.1099:                                      ; preds = %if.then.1096, %lor.lhs.false.1092, %land.lhs.true.1087, %if.end.1085
  %989 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %989, i32 0, i32 34
  %990 = load i64, i64* %tp_dictoffset, align 8
  %tobool1100 = icmp ne i64 %990, 0
  br i1 %tobool1100, label %if.end.1113, label %land.lhs.true.1101

land.lhs.true.1101:                               ; preds = %if.end.1099
  %991 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dictoffset1102 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %991, i32 0, i32 34
  %992 = load i64, i64* %tp_dictoffset1102, align 8
  %cmp1103 = icmp ne i64 %992, 0
  br i1 %cmp1103, label %land.lhs.true.1104, label %if.end.1113

land.lhs.true.1104:                               ; preds = %land.lhs.true.1101
  %993 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1105 = icmp eq %struct._typeobject* %993, null
  br i1 %cmp1105, label %if.then.1110, label %lor.lhs.false.1106

lor.lhs.false.1106:                               ; preds = %land.lhs.true.1104
  %994 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dictoffset1107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %994, i32 0, i32 34
  %995 = load i64, i64* %tp_dictoffset1107, align 8
  %996 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_dictoffset1108 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %996, i32 0, i32 34
  %997 = load i64, i64* %tp_dictoffset1108, align 8
  %cmp1109 = icmp ne i64 %995, %997
  br i1 %cmp1109, label %if.then.1110, label %if.end.1113

if.then.1110:                                     ; preds = %lor.lhs.false.1106, %land.lhs.true.1104
  %998 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dictoffset1111 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %998, i32 0, i32 34
  %999 = load i64, i64* %tp_dictoffset1111, align 8
  %1000 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dictoffset1112 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1000, i32 0, i32 34
  store i64 %999, i64* %tp_dictoffset1112, align 8
  br label %if.end.1113

if.end.1113:                                      ; preds = %if.then.1110, %lor.lhs.false.1106, %land.lhs.true.1101, %if.end.1099
  %1001 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_init = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1001, i32 0, i32 35
  %1002 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init, align 8
  %tobool1114 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %1002, null
  br i1 %tobool1114, label %if.end.1127, label %land.lhs.true.1115

land.lhs.true.1115:                               ; preds = %if.end.1113
  %1003 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_init1116 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1003, i32 0, i32 35
  %1004 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init1116, align 8
  %cmp1117 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %1004, null
  br i1 %cmp1117, label %land.lhs.true.1118, label %if.end.1127

land.lhs.true.1118:                               ; preds = %land.lhs.true.1115
  %1005 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1119 = icmp eq %struct._typeobject* %1005, null
  br i1 %cmp1119, label %if.then.1124, label %lor.lhs.false.1120

lor.lhs.false.1120:                               ; preds = %land.lhs.true.1118
  %1006 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_init1121 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1006, i32 0, i32 35
  %1007 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init1121, align 8
  %1008 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_init1122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1008, i32 0, i32 35
  %1009 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init1122, align 8
  %cmp1123 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %1007, %1009
  br i1 %cmp1123, label %if.then.1124, label %if.end.1127

if.then.1124:                                     ; preds = %lor.lhs.false.1120, %land.lhs.true.1118
  %1010 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_init1125 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1010, i32 0, i32 35
  %1011 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init1125, align 8
  %1012 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_init1126 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1012, i32 0, i32 35
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1011, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_init1126, align 8
  br label %if.end.1127

if.end.1127:                                      ; preds = %if.then.1124, %lor.lhs.false.1120, %land.lhs.true.1115, %if.end.1113
  %1013 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1013, i32 0, i32 36
  %1014 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %tobool1128 = icmp ne %struct._object* (%struct._typeobject*, i64)* %1014, null
  br i1 %tobool1128, label %if.end.1141, label %land.lhs.true.1129

land.lhs.true.1129:                               ; preds = %if.end.1127
  %1015 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_alloc1130 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1015, i32 0, i32 36
  %1016 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc1130, align 8
  %cmp1131 = icmp ne %struct._object* (%struct._typeobject*, i64)* %1016, null
  br i1 %cmp1131, label %land.lhs.true.1132, label %if.end.1141

land.lhs.true.1132:                               ; preds = %land.lhs.true.1129
  %1017 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1133 = icmp eq %struct._typeobject* %1017, null
  br i1 %cmp1133, label %if.then.1138, label %lor.lhs.false.1134

lor.lhs.false.1134:                               ; preds = %land.lhs.true.1132
  %1018 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_alloc1135 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1018, i32 0, i32 36
  %1019 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc1135, align 8
  %1020 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_alloc1136 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1020, i32 0, i32 36
  %1021 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc1136, align 8
  %cmp1137 = icmp ne %struct._object* (%struct._typeobject*, i64)* %1019, %1021
  br i1 %cmp1137, label %if.then.1138, label %if.end.1141

if.then.1138:                                     ; preds = %lor.lhs.false.1134, %land.lhs.true.1132
  %1022 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_alloc1139 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1022, i32 0, i32 36
  %1023 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc1139, align 8
  %1024 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc1140 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1024, i32 0, i32 36
  store %struct._object* (%struct._typeobject*, i64)* %1023, %struct._object* (%struct._typeobject*, i64)** %tp_alloc1140, align 8
  br label %if.end.1141

if.end.1141:                                      ; preds = %if.then.1138, %lor.lhs.false.1134, %land.lhs.true.1129, %if.end.1127
  %1025 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_is_gc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1025, i32 0, i32 39
  %1026 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_is_gc, align 8
  %tobool1142 = icmp ne i32 (%struct._object*)* %1026, null
  br i1 %tobool1142, label %if.end.1155, label %land.lhs.true.1143

land.lhs.true.1143:                               ; preds = %if.end.1141
  %1027 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_is_gc1144 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1027, i32 0, i32 39
  %1028 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_is_gc1144, align 8
  %cmp1145 = icmp ne i32 (%struct._object*)* %1028, null
  br i1 %cmp1145, label %land.lhs.true.1146, label %if.end.1155

land.lhs.true.1146:                               ; preds = %land.lhs.true.1143
  %1029 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1147 = icmp eq %struct._typeobject* %1029, null
  br i1 %cmp1147, label %if.then.1152, label %lor.lhs.false.1148

lor.lhs.false.1148:                               ; preds = %land.lhs.true.1146
  %1030 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_is_gc1149 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1030, i32 0, i32 39
  %1031 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_is_gc1149, align 8
  %1032 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_is_gc1150 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1032, i32 0, i32 39
  %1033 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_is_gc1150, align 8
  %cmp1151 = icmp ne i32 (%struct._object*)* %1031, %1033
  br i1 %cmp1151, label %if.then.1152, label %if.end.1155

if.then.1152:                                     ; preds = %lor.lhs.false.1148, %land.lhs.true.1146
  %1034 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_is_gc1153 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1034, i32 0, i32 39
  %1035 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_is_gc1153, align 8
  %1036 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_is_gc1154 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1036, i32 0, i32 39
  store i32 (%struct._object*)* %1035, i32 (%struct._object*)** %tp_is_gc1154, align 8
  br label %if.end.1155

if.end.1155:                                      ; preds = %if.then.1152, %lor.lhs.false.1148, %land.lhs.true.1143, %if.end.1141
  %1037 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1037, i32 0, i32 19
  %1038 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1038, 1
  %tobool1156 = icmp ne i64 %and, 0
  br i1 %tobool1156, label %land.lhs.true.1157, label %if.end.1176

land.lhs.true.1157:                               ; preds = %if.end.1155
  %1039 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_flags1158 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1039, i32 0, i32 19
  %1040 = load i64, i64* %tp_flags1158, align 8
  %and1159 = and i64 %1040, 1
  %tobool1160 = icmp ne i64 %and1159, 0
  br i1 %tobool1160, label %if.then.1161, label %if.end.1176

if.then.1161:                                     ; preds = %land.lhs.true.1157
  %1041 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_finalize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1041, i32 0, i32 47
  %1042 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize, align 8
  %tobool1162 = icmp ne void (%struct._object*)* %1042, null
  br i1 %tobool1162, label %if.end.1175, label %land.lhs.true.1163

land.lhs.true.1163:                               ; preds = %if.then.1161
  %1043 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_finalize1164 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1043, i32 0, i32 47
  %1044 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize1164, align 8
  %cmp1165 = icmp ne void (%struct._object*)* %1044, null
  br i1 %cmp1165, label %land.lhs.true.1166, label %if.end.1175

land.lhs.true.1166:                               ; preds = %land.lhs.true.1163
  %1045 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1167 = icmp eq %struct._typeobject* %1045, null
  br i1 %cmp1167, label %if.then.1172, label %lor.lhs.false.1168

lor.lhs.false.1168:                               ; preds = %land.lhs.true.1166
  %1046 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_finalize1169 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1046, i32 0, i32 47
  %1047 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize1169, align 8
  %1048 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_finalize1170 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1048, i32 0, i32 47
  %1049 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize1170, align 8
  %cmp1171 = icmp ne void (%struct._object*)* %1047, %1049
  br i1 %cmp1171, label %if.then.1172, label %if.end.1175

if.then.1172:                                     ; preds = %lor.lhs.false.1168, %land.lhs.true.1166
  %1050 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_finalize1173 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1050, i32 0, i32 47
  %1051 = load void (%struct._object*)*, void (%struct._object*)** %tp_finalize1173, align 8
  %1052 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_finalize1174 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1052, i32 0, i32 47
  store void (%struct._object*)* %1051, void (%struct._object*)** %tp_finalize1174, align 8
  br label %if.end.1175

if.end.1175:                                      ; preds = %if.then.1172, %lor.lhs.false.1168, %land.lhs.true.1163, %if.then.1161
  br label %if.end.1176

if.end.1176:                                      ; preds = %if.end.1175, %land.lhs.true.1157, %if.end.1155
  %1053 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags1177 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1053, i32 0, i32 19
  %1054 = load i64, i64* %tp_flags1177, align 8
  %and1178 = and i64 %1054, 16384
  %1055 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_flags1179 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1055, i32 0, i32 19
  %1056 = load i64, i64* %tp_flags1179, align 8
  %and1180 = and i64 %1056, 16384
  %cmp1181 = icmp eq i64 %and1178, %and1180
  br i1 %cmp1181, label %if.then.1182, label %if.else

if.then.1182:                                     ; preds = %if.end.1176
  %1057 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1057, i32 0, i32 38
  %1058 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %tobool1183 = icmp ne void (i8*)* %1058, null
  br i1 %tobool1183, label %if.end.1196, label %land.lhs.true.1184

land.lhs.true.1184:                               ; preds = %if.then.1182
  %1059 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_free1185 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1059, i32 0, i32 38
  %1060 = load void (i8*)*, void (i8*)** %tp_free1185, align 8
  %cmp1186 = icmp ne void (i8*)* %1060, null
  br i1 %cmp1186, label %land.lhs.true.1187, label %if.end.1196

land.lhs.true.1187:                               ; preds = %land.lhs.true.1184
  %1061 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %cmp1188 = icmp eq %struct._typeobject* %1061, null
  br i1 %cmp1188, label %if.then.1193, label %lor.lhs.false.1189

lor.lhs.false.1189:                               ; preds = %land.lhs.true.1187
  %1062 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_free1190 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1062, i32 0, i32 38
  %1063 = load void (i8*)*, void (i8*)** %tp_free1190, align 8
  %1064 = load %struct._typeobject*, %struct._typeobject** %basebase, align 8
  %tp_free1191 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1064, i32 0, i32 38
  %1065 = load void (i8*)*, void (i8*)** %tp_free1191, align 8
  %cmp1192 = icmp ne void (i8*)* %1063, %1065
  br i1 %cmp1192, label %if.then.1193, label %if.end.1196

if.then.1193:                                     ; preds = %lor.lhs.false.1189, %land.lhs.true.1187
  %1066 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_free1194 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1066, i32 0, i32 38
  %1067 = load void (i8*)*, void (i8*)** %tp_free1194, align 8
  %1068 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_free1195 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1068, i32 0, i32 38
  store void (i8*)* %1067, void (i8*)** %tp_free1195, align 8
  br label %if.end.1196

if.end.1196:                                      ; preds = %if.then.1193, %lor.lhs.false.1189, %land.lhs.true.1184, %if.then.1182
  br label %if.end.1209

if.else:                                          ; preds = %if.end.1176
  %1069 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags1197 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1069, i32 0, i32 19
  %1070 = load i64, i64* %tp_flags1197, align 8
  %and1198 = and i64 %1070, 16384
  %tobool1199 = icmp ne i64 %and1198, 0
  br i1 %tobool1199, label %land.lhs.true.1200, label %if.end.1208

land.lhs.true.1200:                               ; preds = %if.else
  %1071 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_free1201 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1071, i32 0, i32 38
  %1072 = load void (i8*)*, void (i8*)** %tp_free1201, align 8
  %cmp1202 = icmp eq void (i8*)* %1072, null
  br i1 %cmp1202, label %land.lhs.true.1203, label %if.end.1208

land.lhs.true.1203:                               ; preds = %land.lhs.true.1200
  %1073 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_free1204 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1073, i32 0, i32 38
  %1074 = load void (i8*)*, void (i8*)** %tp_free1204, align 8
  %cmp1205 = icmp eq void (i8*)* %1074, @PyObject_Free
  br i1 %cmp1205, label %if.then.1206, label %if.end.1208

if.then.1206:                                     ; preds = %land.lhs.true.1203
  %1075 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_free1207 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1075, i32 0, i32 38
  store void (i8*)* @PyObject_GC_Del, void (i8*)** %tp_free1207, align 8
  br label %if.end.1208

if.end.1208:                                      ; preds = %if.then.1206, %land.lhs.true.1203, %land.lhs.true.1200, %if.else
  br label %if.end.1209

if.end.1209:                                      ; preds = %if.end.1208, %if.end.1196
  ret void
}

declare %struct._object* @_PyDict_GetItemId(%struct._object*, %struct._Py_Identifier*) #1

declare i64 @PyObject_HashNotImplemented(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @add_subclass(%struct._typeobject* %base, %struct._typeobject* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %base.addr = alloca %struct._typeobject*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %result = alloca i32, align 4
  %dict = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  store %struct._typeobject* %base, %struct._typeobject** %base.addr, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i32 -1, i32* %result, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_subclasses = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 43
  %1 = load %struct._object*, %struct._object** %tp_subclasses, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  %2 = load %struct._object*, %struct._object** %dict, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %dict, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_subclasses1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 43
  store %struct._object* %call, %struct._object** %tp_subclasses1, align 8
  %4 = load %struct._object*, %struct._object** %dict, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %5 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %6 = bitcast %struct._typeobject* %5 to i8*
  %call5 = call %struct._object* @PyLong_FromVoidPtr(i8* %6)
  store %struct._object* %call5, %struct._object** %key, align 8
  %7 = load %struct._object*, %struct._object** %key, align 8
  %cmp6 = icmp eq %struct._object* %7, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %9 = bitcast %struct._typeobject* %8 to %struct._object*
  %call9 = call %struct._object* @PyWeakref_NewRef(%struct._object* %9, %struct._object* null)
  store %struct._object* %call9, %struct._object** %newobj, align 8
  %10 = load %struct._object*, %struct._object** %newobj, align 8
  %cmp10 = icmp ne %struct._object* %10, null
  br i1 %cmp10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.end.8
  %11 = load %struct._object*, %struct._object** %dict, align 8
  %12 = load %struct._object*, %struct._object** %key, align 8
  %13 = load %struct._object*, %struct._object** %newobj, align 8
  %call12 = call i32 @PyDict_SetItem(%struct._object* %11, %struct._object* %12, %struct._object* %13)
  store i32 %call12, i32* %result, align 4
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %14 = load %struct._object*, %struct._object** %newobj, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  br label %if.end.16

if.end.16:                                        ; preds = %do.end, %if.end.8
  br label %do.body.17

do.body.17:                                       ; preds = %if.end.16
  %21 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp18, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %23, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %26(%struct._object* %27)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  %28 = load i32, i32* %result, align 4
  store i32 %28, i32* %retval
  br label %return

return:                                           ; preds = %do.end.27, %if.then.7, %if.then.3
  %29 = load i32, i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal void @super_dealloc(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %su = alloca %struct.superobject*, align 8
  %g = alloca %union._gc_head*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp25 = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %_py_xdecref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.superobject*
  store %struct.superobject* %1, %struct.superobject** %su, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %union._gc_head*
  %add.ptr = getelementptr %union._gc_head, %union._gc_head* %3, i64 -1
  store %union._gc_head* %add.ptr, %union._gc_head** %g, align 8
  br label %do.body.1

do.body.1:                                        ; preds = %do.body
  %4 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc = bitcast %union._gc_head* %4 to %struct.anon*
  %gc_refs = getelementptr inbounds %struct.anon, %struct.anon* %gc, i32 0, i32 2
  %5 = load i64, i64* %gc_refs, align 8
  %and = and i64 %5, 1
  %or = or i64 %and, -4
  %6 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc2 = bitcast %union._gc_head* %6 to %struct.anon*
  %gc_refs3 = getelementptr inbounds %struct.anon, %struct.anon* %gc2, i32 0, i32 2
  store i64 %or, i64* %gc_refs3, align 8
  br label %do.end

do.end:                                           ; preds = %do.body.1
  %7 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc4 = bitcast %union._gc_head* %7 to %struct.anon*
  %gc_next = getelementptr inbounds %struct.anon, %struct.anon* %gc4, i32 0, i32 0
  %8 = load %union._gc_head*, %union._gc_head** %gc_next, align 8
  %9 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc5 = bitcast %union._gc_head* %9 to %struct.anon*
  %gc_prev = getelementptr inbounds %struct.anon, %struct.anon* %gc5, i32 0, i32 1
  %10 = load %union._gc_head*, %union._gc_head** %gc_prev, align 8
  %gc6 = bitcast %union._gc_head* %10 to %struct.anon*
  %gc_next7 = getelementptr inbounds %struct.anon, %struct.anon* %gc6, i32 0, i32 0
  store %union._gc_head* %8, %union._gc_head** %gc_next7, align 8
  %11 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc8 = bitcast %union._gc_head* %11 to %struct.anon*
  %gc_prev9 = getelementptr inbounds %struct.anon, %struct.anon* %gc8, i32 0, i32 1
  %12 = load %union._gc_head*, %union._gc_head** %gc_prev9, align 8
  %13 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc10 = bitcast %union._gc_head* %13 to %struct.anon*
  %gc_next11 = getelementptr inbounds %struct.anon, %struct.anon* %gc10, i32 0, i32 0
  %14 = load %union._gc_head*, %union._gc_head** %gc_next11, align 8
  %gc12 = bitcast %union._gc_head* %14 to %struct.anon*
  %gc_prev13 = getelementptr inbounds %struct.anon, %struct.anon* %gc12, i32 0, i32 1
  store %union._gc_head* %12, %union._gc_head** %gc_prev13, align 8
  %15 = load %union._gc_head*, %union._gc_head** %g, align 8
  %gc14 = bitcast %union._gc_head* %15 to %struct.anon*
  %gc_next15 = getelementptr inbounds %struct.anon, %struct.anon* %gc14, i32 0, i32 0
  store %union._gc_head* null, %union._gc_head** %gc_next15, align 8
  br label %do.end.16

do.end.16:                                        ; preds = %do.end
  br label %do.body.17

do.body.17:                                       ; preds = %do.end.16
  %16 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj = getelementptr inbounds %struct.superobject, %struct.superobject* %16, i32 0, i32 2
  %17 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %17, %struct._object** %_py_xdecref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %18, null
  br i1 %cmp, label %if.then, label %if.end.22

if.then:                                          ; preds = %do.body.17
  br label %do.body.18

do.body.18:                                       ; preds = %if.then
  %19 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body.18
  br label %if.end

if.else:                                          ; preds = %do.body.18
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.20
  br label %do.end.21

do.end.21:                                        ; preds = %if.end
  br label %if.end.22

if.end.22:                                        ; preds = %do.end.21, %do.body.17
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  br label %do.body.24

do.body.24:                                       ; preds = %do.end.23
  %26 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type = getelementptr inbounds %struct.superobject, %struct.superobject* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %28 = bitcast %struct._typeobject* %27 to %struct._object*
  store %struct._object* %28, %struct._object** %_py_xdecref_tmp25, align 8
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp25, align 8
  %cmp26 = icmp ne %struct._object* %29, null
  br i1 %cmp26, label %if.then.27, label %if.end.39

if.then.27:                                       ; preds = %do.body.24
  br label %do.body.28

do.body.28:                                       ; preds = %if.then.27
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp25, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp29, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt30, align 8
  %dec31 = add i64 %32, -1
  store i64 %dec31, i64* %ob_refcnt30, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.28
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.28
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  call void %35(%struct._object* %36)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  br label %if.end.39

if.end.39:                                        ; preds = %do.end.38, %do.body.24
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %do.body.41

do.body.41:                                       ; preds = %do.end.40
  %37 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type = getelementptr inbounds %struct.superobject, %struct.superobject* %37, i32 0, i32 3
  %38 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %39 = bitcast %struct._typeobject* %38 to %struct._object*
  store %struct._object* %39, %struct._object** %_py_xdecref_tmp42, align 8
  %40 = load %struct._object*, %struct._object** %_py_xdecref_tmp42, align 8
  %cmp43 = icmp ne %struct._object* %40, null
  br i1 %cmp43, label %if.then.44, label %if.end.56

if.then.44:                                       ; preds = %do.body.41
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %41 = load %struct._object*, %struct._object** %_py_xdecref_tmp42, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp46, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt47, align 8
  %dec48 = add i64 %43, -1
  store i64 %dec48, i64* %ob_refcnt47, align 8
  %cmp49 = icmp ne i64 %dec48, 0
  br i1 %cmp49, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.45
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  call void %46(%struct._object* %47)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  br label %if.end.56

if.end.56:                                        ; preds = %do.end.55, %do.body.41
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  %48 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 38
  %50 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %51 = load %struct._object*, %struct._object** %self.addr, align 8
  %52 = bitcast %struct._object* %51 to i8*
  call void %50(i8* %52)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @super_repr(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %su = alloca %struct.superobject*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.superobject*
  store %struct.superobject* %1, %struct.superobject** %su, align 8
  %2 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type = getelementptr inbounds %struct.superobject, %struct.superobject* %2, i32 0, i32 3
  %3 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %tobool = icmp ne %struct._typeobject* %3, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type = getelementptr inbounds %struct.superobject, %struct.superobject* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tobool1 = icmp ne %struct._typeobject* %5, null
  br i1 %tobool1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %6 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type2 = getelementptr inbounds %struct.superobject, %struct.superobject* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %type2, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 1
  %8 = load i8*, i8** %tp_name, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %8, %cond.true ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.309, i32 0, i32 0), %cond.false ]
  %9 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type3 = getelementptr inbounds %struct.superobject, %struct.superobject* %9, i32 0, i32 3
  %10 = load %struct._typeobject*, %struct._typeobject** %obj_type3, align 8
  %tp_name4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 1
  %11 = load i8*, i8** %tp_name4, align 8
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.308, i32 0, i32 0), i8* %cond, i8* %11)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %12 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type5 = getelementptr inbounds %struct.superobject, %struct.superobject* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %type5, align 8
  %tobool6 = icmp ne %struct._typeobject* %13, null
  br i1 %tobool6, label %cond.true.7, label %cond.false.10

cond.true.7:                                      ; preds = %if.else
  %14 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type8 = getelementptr inbounds %struct.superobject, %struct.superobject* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %type8, align 8
  %tp_name9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 1
  %16 = load i8*, i8** %tp_name9, align 8
  br label %cond.end.11

cond.false.10:                                    ; preds = %if.else
  br label %cond.end.11

cond.end.11:                                      ; preds = %cond.false.10, %cond.true.7
  %cond12 = phi i8* [ %16, %cond.true.7 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.309, i32 0, i32 0), %cond.false.10 ]
  %call13 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.310, i32 0, i32 0), i8* %cond12)
  store %struct._object* %call13, %struct._object** %retval
  br label %return

return:                                           ; preds = %cond.end.11, %cond.end
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @super_getattro(%struct._object* %self, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %su = alloca %struct.superobject*, align 8
  %skip = alloca i32, align 4
  %mro = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %starttype = alloca %struct._typeobject*, align 8
  %f = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.superobject*
  store %struct.superobject* %1, %struct.superobject** %su, align 8
  %2 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type = getelementptr inbounds %struct.superobject, %struct.superobject* %2, i32 0, i32 3
  %3 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %cmp = icmp eq %struct._typeobject* %3, null
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %skip, align 4
  %4 = load i32, i32* %skip, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19
  %7 = load i64, i64* %tp_flags, align 8
  %and = and i64 %7, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %if.then
  %8 = load %struct._object*, %struct._object** %name.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %9, i32 0, i32 1
  %10 = load i64, i64* %length, align 8
  %cmp3 = icmp eq i64 %10, 9
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %11 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call i32 @_PyUnicode_CompareWithId(%struct._object* %11, %struct._Py_Identifier* @PyId___class__)
  %cmp5 = icmp eq i32 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %if.then
  %12 = phi i1 [ false, %land.lhs.true ], [ false, %if.then ], [ %cmp5, %land.rhs ]
  %land.ext = zext i1 %12 to i32
  store i32 %land.ext, i32* %skip, align 4
  br label %if.end

if.end:                                           ; preds = %land.end, %entry
  %13 = load i32, i32* %skip, align 4
  %tobool7 = icmp ne i32 %13, 0
  br i1 %tobool7, label %if.end.95, label %if.then.8

if.then.8:                                        ; preds = %if.end
  %14 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type14 = getelementptr inbounds %struct.superobject, %struct.superobject* %14, i32 0, i32 3
  %15 = load %struct._typeobject*, %struct._typeobject** %obj_type14, align 8
  store %struct._typeobject* %15, %struct._typeobject** %starttype, align 8
  %16 = load %struct._typeobject*, %struct._typeobject** %starttype, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 41
  %17 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %17, %struct._object** %mro, align 8
  %18 = load %struct._object*, %struct._object** %mro, align 8
  %cmp15 = icmp eq %struct._object* %18, null
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.then.8
  store i64 0, i64* %n, align 8
  br label %if.end.18

if.else:                                          ; preds = %if.then.8
  %19 = load %struct._object*, %struct._object** %mro, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %20, i32 0, i32 1
  %21 = load i64, i64* %ob_size, align 8
  store i64 %21, i64* %n, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.18
  %22 = load i64, i64* %i, align 8
  %23 = load i64, i64* %n, align 8
  %cmp19 = icmp slt i64 %22, %23
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %24 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type = getelementptr inbounds %struct.superobject, %struct.superobject* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %26 = bitcast %struct._typeobject* %25 to %struct._object*
  %27 = load i64, i64* %i, align 8
  %28 = load %struct._object*, %struct._object** %mro, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %29, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %27
  %30 = load %struct._object*, %struct._object** %arrayidx, align 8
  %cmp21 = icmp eq %struct._object* %26, %30
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %for.body
  br label %for.end

if.end.24:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.24
  %31 = load i64, i64* %i, align 8
  %inc = add i64 %31, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.23, %for.cond
  %32 = load i64, i64* %i, align 8
  %inc25 = add i64 %32, 1
  store i64 %inc25, i64* %i, align 8
  store %struct._object* null, %struct._object** %res, align 8
  %33 = load %struct._object*, %struct._object** %mro, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt, align 8
  %inc26 = add i64 %34, 1
  store i64 %inc26, i64* %ob_refcnt, align 8
  br label %for.cond.27

for.cond.27:                                      ; preds = %for.inc.79, %for.end
  %35 = load i64, i64* %i, align 8
  %36 = load i64, i64* %n, align 8
  %cmp28 = icmp slt i64 %35, %36
  br i1 %cmp28, label %for.body.30, label %for.end.81

for.body.30:                                      ; preds = %for.cond.27
  %37 = load i64, i64* %i, align 8
  %38 = load %struct._object*, %struct._object** %mro, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyTupleObject*
  %ob_item31 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %39, i32 0, i32 1
  %arrayidx32 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item31, i32 0, i64 %37
  %40 = load %struct._object*, %struct._object** %arrayidx32, align 8
  store %struct._object* %40, %struct._object** %tmp, align 8
  %41 = load %struct._object*, %struct._object** %tmp, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_flags34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 19
  %43 = load i64, i64* %tp_flags34, align 8
  %and35 = and i64 %43, 2147483648
  %cmp36 = icmp ne i64 %and35, 0
  br i1 %cmp36, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %for.body.30
  %44 = load %struct._object*, %struct._object** %tmp, align 8
  %45 = bitcast %struct._object* %44 to %struct._typeobject*
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 31
  %46 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %46, %struct._object** %dict, align 8
  br label %if.end.40

if.else.39:                                       ; preds = %for.body.30
  br label %for.inc.79

if.end.40:                                        ; preds = %if.then.38
  %47 = load %struct._object*, %struct._object** %dict, align 8
  %48 = load %struct._object*, %struct._object** %name.addr, align 8
  %call41 = call %struct._object* @PyDict_GetItem(%struct._object* %47, %struct._object* %48)
  store %struct._object* %call41, %struct._object** %res, align 8
  %49 = load %struct._object*, %struct._object** %res, align 8
  %cmp42 = icmp ne %struct._object* %49, null
  br i1 %cmp42, label %if.then.44, label %if.end.78

if.then.44:                                       ; preds = %if.end.40
  %50 = load %struct._object*, %struct._object** %res, align 8
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt45, align 8
  %inc46 = add i64 %51, 1
  store i64 %inc46, i64* %ob_refcnt45, align 8
  %52 = load %struct._object*, %struct._object** %res, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 32
  %54 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %54, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %55 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %cmp48 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %55, null
  br i1 %cmp48, label %if.then.50, label %if.end.64

if.then.50:                                       ; preds = %if.then.44
  %56 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %57 = load %struct._object*, %struct._object** %res, align 8
  %58 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj = getelementptr inbounds %struct.superobject, %struct.superobject* %58, i32 0, i32 2
  %59 = load %struct._object*, %struct._object** %obj, align 8
  %60 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type51 = getelementptr inbounds %struct.superobject, %struct.superobject* %60, i32 0, i32 3
  %61 = load %struct._typeobject*, %struct._typeobject** %obj_type51, align 8
  %62 = bitcast %struct._typeobject* %61 to %struct._object*
  %cmp52 = icmp eq %struct._object* %59, %62
  br i1 %cmp52, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.50
  br label %cond.end

cond.false:                                       ; preds = %if.then.50
  %63 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj54 = getelementptr inbounds %struct.superobject, %struct.superobject* %63, i32 0, i32 2
  %64 = load %struct._object*, %struct._object** %obj54, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ null, %cond.true ], [ %64, %cond.false ]
  %65 = load %struct._typeobject*, %struct._typeobject** %starttype, align 8
  %66 = bitcast %struct._typeobject* %65 to %struct._object*
  %call55 = call %struct._object* %56(%struct._object* %57, %struct._object* %cond, %struct._object* %66)
  store %struct._object* %call55, %struct._object** %tmp, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %67 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %67, %struct._object** %_py_decref_tmp, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0
  %69 = load i64, i64* %ob_refcnt57, align 8
  %dec = add i64 %69, -1
  store i64 %dec, i64* %ob_refcnt57, align 8
  %cmp58 = icmp ne i64 %dec, 0
  br i1 %cmp58, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body
  br label %if.end.63

if.else.61:                                       ; preds = %do.body
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %72(%struct._object* %73)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end

do.end:                                           ; preds = %if.end.63
  %74 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %74, %struct._object** %res, align 8
  br label %if.end.64

if.end.64:                                        ; preds = %do.end, %if.then.44
  br label %do.body.65

do.body.65:                                       ; preds = %if.end.64
  %75 = load %struct._object*, %struct._object** %mro, align 8
  store %struct._object* %75, %struct._object** %_py_decref_tmp67, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0
  %77 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %77, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.65
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.65
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %80(%struct._object* %81)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  %82 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %82, %struct._object** %retval
  br label %return

if.end.78:                                        ; preds = %if.end.40
  br label %for.inc.79

for.inc.79:                                       ; preds = %if.end.78, %if.else.39
  %83 = load i64, i64* %i, align 8
  %inc80 = add i64 %83, 1
  store i64 %inc80, i64* %i, align 8
  br label %for.cond.27

for.end.81:                                       ; preds = %for.cond.27
  br label %do.body.82

do.body.82:                                       ; preds = %for.end.81
  %84 = load %struct._object*, %struct._object** %mro, align 8
  store %struct._object* %84, %struct._object** %_py_decref_tmp84, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 0
  %86 = load i64, i64* %ob_refcnt85, align 8
  %dec86 = add i64 %86, -1
  store i64 %dec86, i64* %ob_refcnt85, align 8
  %cmp87 = icmp ne i64 %dec86, 0
  br i1 %cmp87, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.82
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.82
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 4
  %89 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  call void %89(%struct._object* %90)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %do.end.94, %if.end
  %91 = load %struct._object*, %struct._object** %self.addr, align 8
  %92 = load %struct._object*, %struct._object** %name.addr, align 8
  %call96 = call %struct._object* @PyObject_GenericGetAttr(%struct._object* %91, %struct._object* %92)
  store %struct._object* %call96, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.95, %do.end.77
  %93 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %93
}

; Function Attrs: nounwind uwtable
define internal i32 @super_traverse(%struct._object* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %su = alloca %struct.superobject*, align 8
  %vret = alloca i32, align 4
  %vret8 = alloca i32, align 4
  %vret19 = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.superobject*
  store %struct.superobject* %1, %struct.superobject** %su, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj = getelementptr inbounds %struct.superobject, %struct.superobject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %obj, align 8
  %tobool = icmp ne %struct._object* %3, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  %4 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %5 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj1 = getelementptr inbounds %struct.superobject, %struct.superobject* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %obj1, align 8
  %7 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %4(%struct._object* %6, i8* %7)
  store i32 %call, i32* %vret, align 4
  %8 = load i32, i32* %vret, align 4
  %tobool2 = icmp ne i32 %8, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %9 = load i32, i32* %vret, align 4
  store i32 %9, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  br label %do.body.5

do.body.5:                                        ; preds = %do.end
  %10 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type = getelementptr inbounds %struct.superobject, %struct.superobject* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tobool6 = icmp ne %struct._typeobject* %11, null
  br i1 %tobool6, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %do.body.5
  %12 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %13 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type9 = getelementptr inbounds %struct.superobject, %struct.superobject* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %type9, align 8
  %15 = bitcast %struct._typeobject* %14 to %struct._object*
  %16 = load i8*, i8** %arg.addr, align 8
  %call10 = call i32 %12(%struct._object* %15, i8* %16)
  store i32 %call10, i32* %vret8, align 4
  %17 = load i32, i32* %vret8, align 4
  %tobool11 = icmp ne i32 %17, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.7
  %18 = load i32, i32* %vret8, align 4
  store i32 %18, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.7
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %do.body.5
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  br label %do.body.16

do.body.16:                                       ; preds = %do.end.15
  %19 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type = getelementptr inbounds %struct.superobject, %struct.superobject* %19, i32 0, i32 3
  %20 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %tobool17 = icmp ne %struct._typeobject* %20, null
  br i1 %tobool17, label %if.then.18, label %if.end.25

if.then.18:                                       ; preds = %do.body.16
  %21 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %22 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type20 = getelementptr inbounds %struct.superobject, %struct.superobject* %22, i32 0, i32 3
  %23 = load %struct._typeobject*, %struct._typeobject** %obj_type20, align 8
  %24 = bitcast %struct._typeobject* %23 to %struct._object*
  %25 = load i8*, i8** %arg.addr, align 8
  %call21 = call i32 %21(%struct._object* %24, i8* %25)
  store i32 %call21, i32* %vret19, align 4
  %26 = load i32, i32* %vret19, align 4
  %tobool22 = icmp ne i32 %26, 0
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.18
  %27 = load i32, i32* %vret19, align 4
  store i32 %27, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.18
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %do.body.16
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.26, %if.then.23, %if.then.12, %if.then.3
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @super_descr_get(%struct._object* %self, %struct._object* %obj, %struct._object* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %su = alloca %struct.superobject*, align 8
  %newobj = alloca %struct.superobject*, align 8
  %obj_type = alloca %struct._typeobject*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.superobject*
  store %struct.superobject* %1, %struct.superobject** %su, align 8
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp1 = icmp eq %struct._object* %3, @_Py_NoneStruct
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %4 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj3 = getelementptr inbounds %struct.superobject, %struct.superobject* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %obj3, align 8
  %cmp4 = icmp ne %struct._object* %5, null
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %8 = load %struct._object*, %struct._object** %self.addr, align 8
  store %struct._object* %8, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.2
  %9 = load %struct.superobject*, %struct.superobject** %su, align 8
  %10 = bitcast %struct.superobject* %9 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp5 = icmp ne %struct._typeobject* %11, @PySuper_Type
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end
  %12 = load %struct.superobject*, %struct.superobject** %su, align 8
  %13 = bitcast %struct.superobject* %12 to %struct._object*
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %15 = bitcast %struct._typeobject* %14 to %struct._object*
  %16 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type8 = getelementptr inbounds %struct.superobject, %struct.superobject* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %type8, align 8
  %18 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %15, %struct._typeobject* %17, %struct._object* %18, i8* null)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %if.end
  %19 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type9 = getelementptr inbounds %struct.superobject, %struct.superobject* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %type9, align 8
  %21 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call10 = call %struct._typeobject* @supercheck(%struct._typeobject* %20, %struct._object* %21)
  store %struct._typeobject* %call10, %struct._typeobject** %obj_type, align 8
  %22 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %cmp11 = icmp eq %struct._typeobject* %22, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.else
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.else
  %23 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PySuper_Type, i32 0, i32 37), align 8
  %call14 = call %struct._object* %23(%struct._typeobject* @PySuper_Type, %struct._object* null, %struct._object* null)
  %24 = bitcast %struct._object* %call14 to %struct.superobject*
  store %struct.superobject* %24, %struct.superobject** %newobj, align 8
  %25 = load %struct.superobject*, %struct.superobject** %newobj, align 8
  %cmp15 = icmp eq %struct.superobject* %25, null
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.13
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.17:                                        ; preds = %if.end.13
  %26 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type18 = getelementptr inbounds %struct.superobject, %struct.superobject* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %type18, align 8
  %28 = bitcast %struct._typeobject* %27 to %struct._object*
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt19, align 8
  %inc20 = add i64 %29, 1
  store i64 %inc20, i64* %ob_refcnt19, align 8
  %30 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt21, align 8
  %inc22 = add i64 %31, 1
  store i64 %inc22, i64* %ob_refcnt21, align 8
  %32 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type23 = getelementptr inbounds %struct.superobject, %struct.superobject* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %type23, align 8
  %34 = load %struct.superobject*, %struct.superobject** %newobj, align 8
  %type24 = getelementptr inbounds %struct.superobject, %struct.superobject* %34, i32 0, i32 1
  store %struct._typeobject* %33, %struct._typeobject** %type24, align 8
  %35 = load %struct._object*, %struct._object** %obj.addr, align 8
  %36 = load %struct.superobject*, %struct.superobject** %newobj, align 8
  %obj25 = getelementptr inbounds %struct.superobject, %struct.superobject* %36, i32 0, i32 2
  store %struct._object* %35, %struct._object** %obj25, align 8
  %37 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %38 = load %struct.superobject*, %struct.superobject** %newobj, align 8
  %obj_type26 = getelementptr inbounds %struct.superobject, %struct.superobject* %38, i32 0, i32 3
  store %struct._typeobject* %37, %struct._typeobject** %obj_type26, align 8
  %39 = load %struct.superobject*, %struct.superobject** %newobj, align 8
  %40 = bitcast %struct.superobject* %39 to %struct._object*
  store %struct._object* %40, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.16, %if.then.12, %if.then.6, %if.then
  %41 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %41
}

; Function Attrs: nounwind uwtable
define internal i32 @super_init(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %su = alloca %struct.superobject*, align 8
  %type = alloca %struct._typeobject*, align 8
  %obj = alloca %struct._object*, align 8
  %obj_type = alloca %struct._typeobject*, align 8
  %f = alloca %struct._frame*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %cell = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %index = alloca i64, align 8
  %cell61 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.superobject*
  store %struct.superobject* %1, %struct.superobject** %su, align 8
  store %struct._typeobject* null, %struct._typeobject** %type, align 8
  store %struct._object* null, %struct._object** %obj, align 8
  store %struct._typeobject* null, %struct._typeobject** %obj_type, align 8
  %2 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 @_PyArg_NoKeywords(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i32 0, i32 0), %struct._object* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %call1 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.318, i32 0, i32 0), %struct._typeobject* @PyType_Type, %struct._typeobject** %type, %struct._object** %obj)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp = icmp eq %struct._typeobject* %4, null
  br i1 %cmp, label %if.then.5, label %if.end.90

if.then.5:                                        ; preds = %if.end.4
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %5 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %5, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %6 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %7 = bitcast %struct._Py_atomic_address* %6 to i8*
  %8 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %7, i32 %8)
  %9 = load i32, i32* %order, align 4
  switch i32 %9, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.5, %if.then.5, %if.then.5
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.5
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %10 = load i8**, i8*** %volatile_data, align 8
  %11 = load volatile i8*, i8** %10, align 8
  store i8* %11, i8** %result, align 8
  %12 = load i32, i32* %order, align 4
  switch i32 %12, label %sw.default.7 [
    i32 1, label %sw.bb.6
    i32 3, label %sw.bb.6
    i32 4, label %sw.bb.6
  ]

sw.bb.6:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.8

sw.default.7:                                     ; preds = %sw.epilog
  br label %sw.epilog.8

sw.epilog.8:                                      ; preds = %sw.default.7, %sw.bb.6
  %13 = load i8*, i8** %result, align 8
  store i8* %13, i8** %tmp
  %14 = load i8*, i8** %tmp
  %15 = bitcast i8* %14 to %struct._ts*
  %frame = getelementptr inbounds %struct._ts, %struct._ts* %15, i32 0, i32 3
  %16 = load %struct._frame*, %struct._frame** %frame, align 8
  store %struct._frame* %16, %struct._frame** %f, align 8
  %17 = load %struct._frame*, %struct._frame** %f, align 8
  %cmp9 = icmp eq %struct._frame* %17, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %sw.epilog.8
  %18 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %18, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.319, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %sw.epilog.8
  %19 = load %struct._frame*, %struct._frame** %f, align 8
  %f_code = getelementptr inbounds %struct._frame, %struct._frame* %19, i32 0, i32 2
  %20 = load %struct.PyCodeObject*, %struct.PyCodeObject** %f_code, align 8
  store %struct.PyCodeObject* %20, %struct.PyCodeObject** %co, align 8
  %21 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %cmp12 = icmp eq %struct.PyCodeObject* %21, null
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.11
  %22 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.320, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.11
  %23 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %23, i32 0, i32 1
  %24 = load i32, i32* %co_argcount, align 4
  %cmp15 = icmp eq i32 %24, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.14
  %25 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.321, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.14
  %26 = load %struct._frame*, %struct._frame** %f, align 8
  %f_localsplus = getelementptr inbounds %struct._frame, %struct._frame* %26, i32 0, i32 18
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus, i32 0, i64 0
  %27 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %27, %struct._object** %obj, align 8
  %28 = load %struct._object*, %struct._object** %obj, align 8
  %cmp18 = icmp eq %struct._object* %28, null
  br i1 %cmp18, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %if.end.17
  %29 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cell2arg = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %29, i32 0, i32 12
  %30 = load i8*, i8** %co_cell2arg, align 8
  %tobool19 = icmp ne i8* %30, null
  br i1 %tobool19, label %if.then.20, label %if.end.32

if.then.20:                                       ; preds = %land.lhs.true
  %31 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cellvars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %31, i32 0, i32 11
  %32 = load %struct._object*, %struct._object** %co_cellvars, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %33, i32 0, i32 1
  %34 = load i64, i64* %ob_size, align 8
  store i64 %34, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.20
  %35 = load i64, i64* %i, align 8
  %36 = load i64, i64* %n, align 8
  %cmp21 = icmp slt i64 %35, %36
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %37 = load i64, i64* %i, align 8
  %38 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cell2arg22 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %38, i32 0, i32 12
  %39 = load i8*, i8** %co_cell2arg22, align 8
  %arrayidx23 = getelementptr i8, i8* %39, i64 %37
  %40 = load i8, i8* %arrayidx23, align 1
  %conv = zext i8 %40 to i32
  %cmp24 = icmp eq i32 %conv, 0
  br i1 %cmp24, label %if.then.26, label %if.end.31

if.then.26:                                       ; preds = %for.body
  %41 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_nlocals = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %41, i32 0, i32 3
  %42 = load i32, i32* %co_nlocals, align 4
  %conv28 = sext i32 %42 to i64
  %43 = load i64, i64* %i, align 8
  %add = add i64 %conv28, %43
  %44 = load %struct._frame*, %struct._frame** %f, align 8
  %f_localsplus29 = getelementptr inbounds %struct._frame, %struct._frame* %44, i32 0, i32 18
  %arrayidx30 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus29, i32 0, i64 %add
  %45 = load %struct._object*, %struct._object** %arrayidx30, align 8
  store %struct._object* %45, %struct._object** %cell, align 8
  %46 = load %struct._object*, %struct._object** %cell, align 8
  %47 = bitcast %struct._object* %46 to %struct.PyCellObject*
  %ob_ref = getelementptr inbounds %struct.PyCellObject, %struct.PyCellObject* %47, i32 0, i32 1
  %48 = load %struct._object*, %struct._object** %ob_ref, align 8
  store %struct._object* %48, %struct._object** %obj, align 8
  br label %for.end

if.end.31:                                        ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.31
  %49 = load i64, i64* %i, align 8
  %inc = add i64 %49, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.26, %for.cond
  br label %if.end.32

if.end.32:                                        ; preds = %for.end, %land.lhs.true, %if.end.17
  %50 = load %struct._object*, %struct._object** %obj, align 8
  %cmp33 = icmp eq %struct._object* %50, null
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.32
  %51 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %51, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.322, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.end.32
  %52 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_freevars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %52, i32 0, i32 10
  %53 = load %struct._object*, %struct._object** %co_freevars, align 8
  %cmp37 = icmp eq %struct._object* %53, null
  br i1 %cmp37, label %if.then.39, label %if.else

if.then.39:                                       ; preds = %if.end.36
  store i64 0, i64* %n, align 8
  br label %if.end.42

if.else:                                          ; preds = %if.end.36
  %54 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_freevars40 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %54, i32 0, i32 10
  %55 = load %struct._object*, %struct._object** %co_freevars40, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyVarObject*
  %ob_size41 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %56, i32 0, i32 1
  %57 = load i64, i64* %ob_size41, align 8
  store i64 %57, i64* %n, align 8
  br label %if.end.42

if.end.42:                                        ; preds = %if.else, %if.then.39
  store i64 0, i64* %i, align 8
  br label %for.cond.43

for.cond.43:                                      ; preds = %for.inc.83, %if.end.42
  %58 = load i64, i64* %i, align 8
  %59 = load i64, i64* %n, align 8
  %cmp44 = icmp slt i64 %58, %59
  br i1 %cmp44, label %for.body.46, label %for.end.85

for.body.46:                                      ; preds = %for.cond.43
  %60 = load i64, i64* %i, align 8
  %61 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_freevars48 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %61, i32 0, i32 10
  %62 = load %struct._object*, %struct._object** %co_freevars48, align 8
  %63 = bitcast %struct._object* %62 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %63, i32 0, i32 1
  %arrayidx49 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %60
  %64 = load %struct._object*, %struct._object** %arrayidx49, align 8
  store %struct._object* %64, %struct._object** %name, align 8
  %65 = load %struct._object*, %struct._object** %name, align 8
  %call50 = call i32 @_PyUnicode_CompareWithId(%struct._object* %65, %struct._Py_Identifier* @PyId___class__)
  %tobool51 = icmp ne i32 %call50, 0
  br i1 %tobool51, label %if.end.82, label %if.then.52

if.then.52:                                       ; preds = %for.body.46
  %66 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_nlocals54 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %66, i32 0, i32 3
  %67 = load i32, i32* %co_nlocals54, align 4
  %conv55 = sext i32 %67 to i64
  %68 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cellvars56 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %68, i32 0, i32 11
  %69 = load %struct._object*, %struct._object** %co_cellvars56, align 8
  %70 = bitcast %struct._object* %69 to %struct.PyVarObject*
  %ob_size57 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %70, i32 0, i32 1
  %71 = load i64, i64* %ob_size57, align 8
  %add58 = add i64 %conv55, %71
  %72 = load i64, i64* %i, align 8
  %add59 = add i64 %add58, %72
  store i64 %add59, i64* %index, align 8
  %73 = load i64, i64* %index, align 8
  %74 = load %struct._frame*, %struct._frame** %f, align 8
  %f_localsplus62 = getelementptr inbounds %struct._frame, %struct._frame* %74, i32 0, i32 18
  %arrayidx63 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus62, i32 0, i64 %73
  %75 = load %struct._object*, %struct._object** %arrayidx63, align 8
  store %struct._object* %75, %struct._object** %cell61, align 8
  %76 = load %struct._object*, %struct._object** %cell61, align 8
  %cmp64 = icmp eq %struct._object* %76, null
  br i1 %cmp64, label %if.then.68, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.52
  %77 = load %struct._object*, %struct._object** %cell61, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp66 = icmp eq %struct._typeobject* %78, @PyCell_Type
  br i1 %cmp66, label %if.end.69, label %if.then.68

if.then.68:                                       ; preds = %lor.lhs.false, %if.then.52
  %79 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %79, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.323, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.69:                                        ; preds = %lor.lhs.false
  %80 = load %struct._object*, %struct._object** %cell61, align 8
  %81 = bitcast %struct._object* %80 to %struct.PyCellObject*
  %ob_ref70 = getelementptr inbounds %struct.PyCellObject, %struct.PyCellObject* %81, i32 0, i32 1
  %82 = load %struct._object*, %struct._object** %ob_ref70, align 8
  %83 = bitcast %struct._object* %82 to %struct._typeobject*
  store %struct._typeobject* %83, %struct._typeobject** %type, align 8
  %84 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp71 = icmp eq %struct._typeobject* %84, null
  br i1 %cmp71, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %if.end.69
  %85 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %85, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.324, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.74:                                        ; preds = %if.end.69
  %86 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %87 = bitcast %struct._typeobject* %86 to %struct._object*
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 19
  %89 = load i64, i64* %tp_flags, align 8
  %and = and i64 %89, 2147483648
  %cmp76 = icmp ne i64 %and, 0
  br i1 %cmp76, label %if.end.81, label %if.then.78

if.then.78:                                       ; preds = %if.end.74
  %90 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %91 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %92 = bitcast %struct._typeobject* %91 to %struct._object*
  %ob_type79 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type79, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 1
  %94 = load i8*, i8** %tp_name, align 8
  %call80 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %90, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.325, i32 0, i32 0), i8* %94)
  store i32 -1, i32* %retval
  br label %return

if.end.81:                                        ; preds = %if.end.74
  br label %for.end.85

if.end.82:                                        ; preds = %for.body.46
  br label %for.inc.83

for.inc.83:                                       ; preds = %if.end.82
  %95 = load i64, i64* %i, align 8
  %inc84 = add i64 %95, 1
  store i64 %inc84, i64* %i, align 8
  br label %for.cond.43

for.end.85:                                       ; preds = %if.end.81, %for.cond.43
  %96 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %cmp86 = icmp eq %struct._typeobject* %96, null
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %for.end.85
  %97 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %97, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.326, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.89:                                        ; preds = %for.end.85
  br label %if.end.90

if.end.90:                                        ; preds = %if.end.89, %if.end.4
  %98 = load %struct._object*, %struct._object** %obj, align 8
  %cmp91 = icmp eq %struct._object* %98, @_Py_NoneStruct
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %if.end.90
  store %struct._object* null, %struct._object** %obj, align 8
  br label %if.end.94

if.end.94:                                        ; preds = %if.then.93, %if.end.90
  %99 = load %struct._object*, %struct._object** %obj, align 8
  %cmp95 = icmp ne %struct._object* %99, null
  br i1 %cmp95, label %if.then.97, label %if.end.104

if.then.97:                                       ; preds = %if.end.94
  %100 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %101 = load %struct._object*, %struct._object** %obj, align 8
  %call98 = call %struct._typeobject* @supercheck(%struct._typeobject* %100, %struct._object* %101)
  store %struct._typeobject* %call98, %struct._typeobject** %obj_type, align 8
  %102 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %cmp99 = icmp eq %struct._typeobject* %102, null
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %if.then.97
  store i32 -1, i32* %retval
  br label %return

if.end.102:                                       ; preds = %if.then.97
  %103 = load %struct._object*, %struct._object** %obj, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 0
  %104 = load i64, i64* %ob_refcnt, align 8
  %inc103 = add i64 %104, 1
  store i64 %inc103, i64* %ob_refcnt, align 8
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.102, %if.end.94
  %105 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %106 = bitcast %struct._typeobject* %105 to %struct._object*
  %ob_refcnt105 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 0
  %107 = load i64, i64* %ob_refcnt105, align 8
  %inc106 = add i64 %107, 1
  store i64 %inc106, i64* %ob_refcnt105, align 8
  %108 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %109 = load %struct.superobject*, %struct.superobject** %su, align 8
  %type107 = getelementptr inbounds %struct.superobject, %struct.superobject* %109, i32 0, i32 1
  store %struct._typeobject* %108, %struct._typeobject** %type107, align 8
  %110 = load %struct._object*, %struct._object** %obj, align 8
  %111 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj108 = getelementptr inbounds %struct.superobject, %struct.superobject* %111, i32 0, i32 2
  store %struct._object* %110, %struct._object** %obj108, align 8
  %112 = load %struct._typeobject*, %struct._typeobject** %obj_type, align 8
  %113 = load %struct.superobject*, %struct.superobject** %su, align 8
  %obj_type109 = getelementptr inbounds %struct.superobject, %struct.superobject* %113, i32 0, i32 3
  store %struct._typeobject* %112, %struct._typeobject** %obj_type109, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.104, %if.then.101, %if.then.88, %if.then.78, %if.then.73, %if.then.68, %if.then.35, %if.then.16, %if.then.13, %if.then.10, %if.then.3, %if.then
  %114 = load i32, i32* %retval
  ret i32 %114
}

; Function Attrs: nounwind readonly
declare i32 @strncmp(i8*, i8*, i64) #4

; Function Attrs: nounwind uwtable
define internal %struct._typeobject* @solid_base(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca %struct._typeobject*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %base = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 30
  %1 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %tobool = icmp ne %struct._typeobject* %1, null
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 30
  %3 = load %struct._typeobject*, %struct._typeobject** %tp_base1, align 8
  %call = call %struct._typeobject* @solid_base(%struct._typeobject* %3)
  store %struct._typeobject* %call, %struct._typeobject** %base, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** %base, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %5 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %call2 = call i32 @extra_ivars(%struct._typeobject* %4, %struct._typeobject* %5)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.else.5

if.then.4:                                        ; preds = %if.end
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  store %struct._typeobject* %6, %struct._typeobject** %retval
  br label %return

if.else.5:                                        ; preds = %if.end
  %7 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  store %struct._typeobject* %7, %struct._typeobject** %retval
  br label %return

return:                                           ; preds = %if.else.5, %if.then.4
  %8 = load %struct._typeobject*, %struct._typeobject** %retval
  ret %struct._typeobject* %8
}

; Function Attrs: nounwind uwtable
define internal i32 @extra_ivars(%struct._typeobject* %type, %struct._typeobject* %base) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %base.addr = alloca %struct._typeobject*, align 8
  %t_size = alloca i64, align 8
  %b_size = alloca i64, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._typeobject* %base, %struct._typeobject** %base.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 2
  %1 = load i64, i64* %tp_basicsize, align 8
  store i64 %1, i64* %t_size, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_basicsize1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 2
  %3 = load i64, i64* %tp_basicsize1, align 8
  store i64 %3, i64* %b_size, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_itemsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 3
  %5 = load i64, i64* %tp_itemsize, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_itemsize2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 3
  %7 = load i64, i64* %tp_itemsize2, align 8
  %tobool3 = icmp ne i64 %7, 0
  br i1 %tobool3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load i64, i64* %t_size, align 8
  %9 = load i64, i64* %b_size, align 8
  %cmp = icmp ne i64 %8, %9
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then
  %10 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_itemsize4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 3
  %11 = load i64, i64* %tp_itemsize4, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_itemsize5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 3
  %13 = load i64, i64* %tp_itemsize5, align 8
  %cmp6 = icmp ne i64 %11, %13
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then
  %14 = phi i1 [ true, %if.then ], [ %cmp6, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32
  store i32 %lor.ext, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_weaklistoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 24
  %16 = load i64, i64* %tp_weaklistoffset, align 8
  %tobool7 = icmp ne i64 %16, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.end
  %17 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_weaklistoffset8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 24
  %18 = load i64, i64* %tp_weaklistoffset8, align 8
  %cmp9 = icmp eq i64 %18, 0
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.16

land.lhs.true.10:                                 ; preds = %land.lhs.true
  %19 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_weaklistoffset11 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 24
  %20 = load i64, i64* %tp_weaklistoffset11, align 8
  %add = add i64 %20, 8
  %21 = load i64, i64* %t_size, align 8
  %cmp12 = icmp eq i64 %add, %21
  br i1 %cmp12, label %land.lhs.true.13, label %if.end.16

land.lhs.true.13:                                 ; preds = %land.lhs.true.10
  %22 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 19
  %23 = load i64, i64* %tp_flags, align 8
  %and = and i64 %23, 512
  %tobool14 = icmp ne i64 %and, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %land.lhs.true.13
  %24 = load i64, i64* %t_size, align 8
  %sub = sub i64 %24, 8
  store i64 %sub, i64* %t_size, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.then.15, %land.lhs.true.13, %land.lhs.true.10, %land.lhs.true, %if.end
  %25 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 34
  %26 = load i64, i64* %tp_dictoffset, align 8
  %tobool17 = icmp ne i64 %26, 0
  br i1 %tobool17, label %land.lhs.true.18, label %if.end.31

land.lhs.true.18:                                 ; preds = %if.end.16
  %27 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_dictoffset19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 34
  %28 = load i64, i64* %tp_dictoffset19, align 8
  %cmp20 = icmp eq i64 %28, 0
  br i1 %cmp20, label %land.lhs.true.21, label %if.end.31

land.lhs.true.21:                                 ; preds = %land.lhs.true.18
  %29 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dictoffset22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 34
  %30 = load i64, i64* %tp_dictoffset22, align 8
  %add23 = add i64 %30, 8
  %31 = load i64, i64* %t_size, align 8
  %cmp24 = icmp eq i64 %add23, %31
  br i1 %cmp24, label %land.lhs.true.25, label %if.end.31

land.lhs.true.25:                                 ; preds = %land.lhs.true.21
  %32 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags26 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 19
  %33 = load i64, i64* %tp_flags26, align 8
  %and27 = and i64 %33, 512
  %tobool28 = icmp ne i64 %and27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %land.lhs.true.25
  %34 = load i64, i64* %t_size, align 8
  %sub30 = sub i64 %34, 8
  store i64 %sub30, i64* %t_size, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.29, %land.lhs.true.25, %land.lhs.true.21, %land.lhs.true.18, %if.end.16
  %35 = load i64, i64* %t_size, align 8
  %36 = load i64, i64* %b_size, align 8
  %cmp32 = icmp ne i64 %35, %36
  %conv = zext i1 %cmp32 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.end.31, %lor.end
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_ANNOTATE_MEMORY_ORDER(i8* %address, i32 %order) #5 {
entry:
  %address.addr = alloca i8*, align 8
  %order.addr = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %order, i32* %order.addr, align 4
  %0 = load i8*, i8** %address.addr, align 8
  %1 = load i32, i32* %order.addr, align 4
  switch i32 %1, label %sw.epilog [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 0, label %sw.bb.1
    i32 1, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %order.addr, align 4
  switch i32 %2, label %sw.epilog.4 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
    i32 0, label %sw.bb.3
    i32 2, label %sw.bb.3
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.bb.3:                                          ; preds = %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.epilog, %sw.bb.3, %sw.bb.2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_thread_fence(i32 %order) #5 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_signal_fence(i32 %order) #5 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @PyObject_CallFinalizerFromDealloc(%struct._object*) #1

declare void @PyObject_GC_UnTrack(i8*) #1

declare void @PyObject_ClearWeakRefs(%struct._object*) #1

declare void @_PyWeakref_ClearRef(%struct._PyWeakReference*) #1

; Function Attrs: nounwind uwtable
define internal void @clear_slots(%struct._typeobject* %type, %struct._object* %self) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %self.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %mp = alloca %struct.PyMemberDef*, align 8
  %addr = alloca i8*, align 8
  %obj = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %n, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = bitcast %struct._typeobject* %3 to %struct._heaptypeobject*
  %5 = bitcast %struct._heaptypeobject* %4 to i8*
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %7 = bitcast %struct._typeobject* %6 to %struct._heaptypeobject*
  %8 = bitcast %struct._heaptypeobject* %7 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 2
  %10 = load i64, i64* %tp_basicsize, align 8
  %add.ptr = getelementptr i8, i8* %5, i64 %10
  %11 = bitcast i8* %add.ptr to %struct.PyMemberDef*
  store %struct.PyMemberDef* %11, %struct.PyMemberDef** %mp, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i64, i64* %i, align 8
  %13 = load i64, i64* %n, align 8
  %cmp = icmp slt i64 %12, %13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %type1 = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %14, i32 0, i32 1
  %15 = load i32, i32* %type1, align 4
  %cmp2 = icmp eq i32 %15, 16
  br i1 %cmp2, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %for.body
  %16 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %flags = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %16, i32 0, i32 3
  %17 = load i32, i32* %flags, align 4
  %and = and i32 %17, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.10, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %18 = load %struct._object*, %struct._object** %self.addr, align 8
  %19 = bitcast %struct._object* %18 to i8*
  %20 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %offset = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %20, i32 0, i32 2
  %21 = load i64, i64* %offset, align 8
  %add.ptr3 = getelementptr i8, i8* %19, i64 %21
  store i8* %add.ptr3, i8** %addr, align 8
  %22 = load i8*, i8** %addr, align 8
  %23 = bitcast i8* %22 to %struct._object**
  %24 = load %struct._object*, %struct._object** %23, align 8
  store %struct._object* %24, %struct._object** %obj, align 8
  %25 = load %struct._object*, %struct._object** %obj, align 8
  %cmp4 = icmp ne %struct._object* %25, null
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %if.then
  %26 = load i8*, i8** %addr, align 8
  %27 = bitcast i8* %26 to %struct._object**
  store %struct._object* null, %struct._object** %27, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %28 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %30, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %33(%struct._object* %34)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.9

if.end.9:                                         ; preds = %do.end, %if.then
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.10
  %35 = load i64, i64* %i, align 8
  %inc = add i64 %35, 1
  store i64 %inc, i64* %i, align 8
  %36 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %incdec.ptr = getelementptr %struct.PyMemberDef, %struct.PyMemberDef* %36, i32 1
  store %struct.PyMemberDef* %incdec.ptr, %struct.PyMemberDef** %mp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare %struct._object** @_PyObject_GetDictPtr(%struct._object*) #1

declare void @_PyTrash_thread_destroy_chain() #1

declare void @_PyTrash_thread_deposit_object(%struct._object*) #1

declare void @PyErr_Fetch(%struct._object**, %struct._object**, %struct._object**) #1

; Function Attrs: nounwind uwtable
define internal void @remove_all_subclasses(%struct._typeobject* %type, %struct._object* %bases) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %bases.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %base = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %bases, %struct._object** %bases.addr, align 8
  %0 = load %struct._object*, %struct._object** %bases.addr, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i64, i64* %i, align 8
  %2 = load %struct._object*, %struct._object** %bases.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %cmp = icmp slt i64 %1, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %i, align 8
  %6 = load %struct._object*, %struct._object** %bases.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %7, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %5
  %8 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %8, %struct._object** %base, align 8
  %9 = load %struct._object*, %struct._object** %base, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 19
  %11 = load i64, i64* %tp_flags, align 8
  %and = and i64 %11, 2147483648
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %for.body
  %12 = load %struct._object*, %struct._object** %base, align 8
  %13 = bitcast %struct._object* %12 to %struct._typeobject*
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @remove_subclass(%struct._typeobject* %13, %struct._typeobject* %14)
  br label %if.end

if.end:                                           ; preds = %if.then.2, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %15 = load i64, i64* %i, align 8
  %inc = add i64 %15, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.3

if.end.3:                                         ; preds = %for.end, %entry
  ret void
}

declare void @PyErr_Restore(%struct._object*, %struct._object*, %struct._object*) #1

declare void @_PyDictKeys_DecRef(%struct._dictkeysobject*) #1

; Function Attrs: nounwind uwtable
define internal void @remove_subclass(%struct._typeobject* %base, %struct._typeobject* %type) #0 {
entry:
  %base.addr = alloca %struct._typeobject*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %dict = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %base, %struct._typeobject** %base.addr, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %base.addr, align 8
  %tp_subclasses = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 43
  %1 = load %struct._object*, %struct._object** %tp_subclasses, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  %2 = load %struct._object*, %struct._object** %dict, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.end.12

if.end:                                           ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = bitcast %struct._typeobject* %3 to i8*
  %call = call %struct._object* @PyLong_FromVoidPtr(i8* %4)
  store %struct._object* %call, %struct._object** %key, align 8
  %5 = load %struct._object*, %struct._object** %key, align 8
  %cmp1 = icmp eq %struct._object* %5, null
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %dict, align 8
  %7 = load %struct._object*, %struct._object** %key, align 8
  %call2 = call i32 @PyDict_DelItem(%struct._object* %6, %struct._object* %7)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  call void @PyErr_Clear()
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.3, %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %8 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %8, %struct._object** %_py_xdecref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp5 = icmp ne %struct._object* %9, null
  br i1 %cmp5, label %if.then.6, label %if.end.11

if.then.6:                                        ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %10 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body.7
  br label %if.end.10

if.else:                                          ; preds = %do.body.7
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %if.end.11

if.end.11:                                        ; preds = %do.end, %do.body
  br label %do.end.12

do.end.12:                                        ; preds = %if.then, %if.end.11
  ret void
}

declare %struct._object* @PyLong_FromVoidPtr(i8*) #1

declare i32 @PyDict_DelItem(%struct._object*, %struct._object*) #1

declare void @PyErr_Clear() #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_module(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %mod = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %_py_xincref_tmp15 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 31
  %3 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call = call %struct._object* @_PyDict_GetItemId(%struct._object* %3, %struct._Py_Identifier* @PyId___module__)
  store %struct._object* %call, %struct._object** %mod, align 8
  %4 = load %struct._object*, %struct._object** %mod, align 8
  %tobool1 = icmp ne %struct._object* %4, null
  br i1 %tobool1, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call3 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %6, %struct._object** %_py_xincref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp = icmp ne %struct._object* %7, null
  br i1 %cmp, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %10 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %10, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %11 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 1
  %12 = load i8*, i8** %tp_name, align 8
  %call6 = call i8* @strrchr(i8* %12, i32 46) #7
  store i8* %call6, i8** %s, align 8
  %13 = load i8*, i8** %s, align 8
  %cmp7 = icmp ne i8* %13, null
  br i1 %cmp7, label %if.then.8, label %if.end.12

if.then.8:                                        ; preds = %if.else
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 1
  %15 = load i8*, i8** %tp_name9, align 8
  %16 = load i8*, i8** %s, align 8
  %17 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name10 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 1
  %18 = load i8*, i8** %tp_name10, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %call11 = call %struct._object* @PyUnicode_FromStringAndSize(i8* %15, i64 %sub.ptr.sub)
  store %struct._object* %call11, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.else
  %call13 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @PyId_builtins)
  store %struct._object* %call13, %struct._object** %name, align 8
  br label %do.body.14

do.body.14:                                       ; preds = %if.end.12
  %19 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %19, %struct._object** %_py_xincref_tmp15, align 8
  %20 = load %struct._object*, %struct._object** %_py_xincref_tmp15, align 8
  %cmp16 = icmp ne %struct._object* %20, null
  br i1 %cmp16, label %if.then.17, label %if.end.20

if.then.17:                                       ; preds = %do.body.14
  %21 = load %struct._object*, %struct._object** %_py_xincref_tmp15, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt18, align 8
  %inc19 = add i64 %22, 1
  store i64 %inc19, i64* %ob_refcnt18, align 8
  br label %if.end.20

if.end.20:                                        ; preds = %if.then.17, %do.body.14
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  %23 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.21, %if.then.8, %do.end, %if.then.2
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_qualname(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  %et = alloca %struct._heaptypeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = bitcast %struct._typeobject* %2 to %struct._heaptypeobject*
  store %struct._heaptypeobject* %3, %struct._heaptypeobject** %et, align 8
  %4 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_qualname = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %4, i32 0, i32 7
  %5 = load %struct._object*, %struct._object** %ht_qualname, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %7 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_qualname1 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %7, i32 0, i32 7
  %8 = load %struct._object*, %struct._object** %ht_qualname1, align 8
  store %struct._object* %8, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %9 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %10 = load i8*, i8** %context.addr, align 8
  %call = call %struct._object* @type_name(%struct._typeobject* %9, i8* %10)
  store %struct._object* %call, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

declare i32 @_PyUnicode_CompareWithId(%struct._object*, %struct._Py_Identifier*) #1

declare %struct._object* @PyUnicode_FromFormat(i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_name(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  %s = alloca i8*, align 8
  %et = alloca %struct._heaptypeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = bitcast %struct._typeobject* %2 to %struct._heaptypeobject*
  store %struct._heaptypeobject* %3, %struct._heaptypeobject** %et, align 8
  %4 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_name = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %4, i32 0, i32 5
  %5 = load %struct._object*, %struct._object** %ht_name, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %7 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_name1 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %7, i32 0, i32 5
  %8 = load %struct._object*, %struct._object** %ht_name1, align 8
  store %struct._object* %8, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %9 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1
  %10 = load i8*, i8** %tp_name, align 8
  %call = call i8* @strrchr(i8* %10, i32 46) #7
  store i8* %call, i8** %s, align 8
  %11 = load i8*, i8** %s, align 8
  %cmp = icmp eq i8* %11, null
  br i1 %cmp, label %if.then.2, label %if.else.4

if.then.2:                                        ; preds = %if.else
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 1
  %13 = load i8*, i8** %tp_name3, align 8
  store i8* %13, i8** %s, align 8
  br label %if.end

if.else.4:                                        ; preds = %if.else
  %14 = load i8*, i8** %s, align 8
  %incdec.ptr = getelementptr i8, i8* %14, i32 1
  store i8* %incdec.ptr, i8** %s, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.2
  %15 = load i8*, i8** %s, align 8
  %call5 = call %struct._object* @PyUnicode_FromString(i8* %15)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %16
}

declare i64 @PyDict_Size(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @update_slot(%struct._typeobject* %type, %struct._object* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._object*, align 8
  %ptrs = alloca [10 x %struct.wrapperbase*], align 16
  %p = alloca %struct.wrapperbase*, align 8
  %pp = alloca %struct.wrapperbase**, align 8
  %offset = alloca i32, align 4
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @PyType_Modified(%struct._typeobject* %0)
  call void @init_slotdefs()
  %arraydecay = getelementptr inbounds [10 x %struct.wrapperbase*], [10 x %struct.wrapperbase*]* %ptrs, i32 0, i32 0
  store %struct.wrapperbase** %arraydecay, %struct.wrapperbase*** %pp, align 8
  store %struct.wrapperbase* getelementptr inbounds ([87 x %struct.wrapperbase], [87 x %struct.wrapperbase]* @slotdefs, i32 0, i32 0), %struct.wrapperbase** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name1 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %1, i32 0, i32 0
  %2 = load i8*, i8** %name1, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %3, i32 0, i32 6
  %4 = load %struct._object*, %struct._object** %name_strobj, align 8
  %5 = load %struct._object*, %struct._object** %name.addr, align 8
  %cmp = icmp eq %struct._object* %4, %5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %6 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %7 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %incdec.ptr = getelementptr %struct.wrapperbase*, %struct.wrapperbase** %7, i32 1
  store %struct.wrapperbase** %incdec.ptr, %struct.wrapperbase*** %pp, align 8
  store %struct.wrapperbase* %6, %struct.wrapperbase** %7, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %incdec.ptr2 = getelementptr %struct.wrapperbase, %struct.wrapperbase* %8, i32 1
  store %struct.wrapperbase* %incdec.ptr2, %struct.wrapperbase** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  store %struct.wrapperbase* null, %struct.wrapperbase** %9, align 8
  %arraydecay3 = getelementptr inbounds [10 x %struct.wrapperbase*], [10 x %struct.wrapperbase*]* %ptrs, i32 0, i32 0
  store %struct.wrapperbase** %arraydecay3, %struct.wrapperbase*** %pp, align 8
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.12, %for.end
  %10 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %11 = load %struct.wrapperbase*, %struct.wrapperbase** %10, align 8
  %tobool5 = icmp ne %struct.wrapperbase* %11, null
  br i1 %tobool5, label %for.body.6, label %for.end.14

for.body.6:                                       ; preds = %for.cond.4
  %12 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %13 = load %struct.wrapperbase*, %struct.wrapperbase** %12, align 8
  store %struct.wrapperbase* %13, %struct.wrapperbase** %p, align 8
  %14 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %offset7 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %14, i32 0, i32 1
  %15 = load i32, i32* %offset7, align 4
  store i32 %15, i32* %offset, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.body.6
  %16 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %cmp8 = icmp ugt %struct.wrapperbase* %16, getelementptr inbounds ([87 x %struct.wrapperbase], [87 x %struct.wrapperbase]* @slotdefs, i32 0, i32 0)
  br i1 %cmp8, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %17 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %add.ptr = getelementptr %struct.wrapperbase, %struct.wrapperbase* %17, i64 -1
  %offset9 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %add.ptr, i32 0, i32 1
  %18 = load i32, i32* %offset9, align 4
  %19 = load i32, i32* %offset, align 4
  %cmp10 = icmp eq i32 %18, %19
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %20 = phi i1 [ false, %while.cond ], [ %cmp10, %land.rhs ]
  br i1 %20, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %21 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %incdec.ptr11 = getelementptr %struct.wrapperbase, %struct.wrapperbase* %21, i32 -1
  store %struct.wrapperbase* %incdec.ptr11, %struct.wrapperbase** %p, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %22 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %23 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  store %struct.wrapperbase* %22, %struct.wrapperbase** %23, align 8
  br label %for.inc.12

for.inc.12:                                       ; preds = %while.end
  %24 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %incdec.ptr13 = getelementptr %struct.wrapperbase*, %struct.wrapperbase** %24, i32 1
  store %struct.wrapperbase** %incdec.ptr13, %struct.wrapperbase*** %pp, align 8
  br label %for.cond.4

for.end.14:                                       ; preds = %for.cond.4
  %arrayidx = getelementptr [10 x %struct.wrapperbase*], [10 x %struct.wrapperbase*]* %ptrs, i32 0, i64 0
  %25 = load %struct.wrapperbase*, %struct.wrapperbase** %arrayidx, align 8
  %cmp15 = icmp eq %struct.wrapperbase* %25, null
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %for.end.14
  store i32 0, i32* %retval
  br label %return

if.end.17:                                        ; preds = %for.end.14
  %26 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %27 = load %struct._object*, %struct._object** %name.addr, align 8
  %arraydecay18 = getelementptr inbounds [10 x %struct.wrapperbase*], [10 x %struct.wrapperbase*]* %ptrs, i32 0, i32 0
  %28 = bitcast %struct.wrapperbase** %arraydecay18 to i8*
  %call = call i32 @update_subclasses(%struct._typeobject* %26, %struct._object* %27, i32 (%struct._typeobject*, i8*)* @update_slots_callback, i8* %28)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.16
  %29 = load i32, i32* %retval
  ret i32 %29
}

; Function Attrs: nounwind uwtable
define internal void @init_slotdefs() #0 {
entry:
  %p = alloca %struct.wrapperbase*, align 8
  %0 = load i32, i32* @init_slotdefs.initialized, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  store %struct.wrapperbase* getelementptr inbounds ([87 x %struct.wrapperbase], [87 x %struct.wrapperbase]* @slotdefs, i32 0, i32 0), %struct.wrapperbase** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %1, i32 0, i32 0
  %2 = load i8*, i8** %name, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name2 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %3, i32 0, i32 0
  %4 = load i8*, i8** %name2, align 8
  %call = call %struct._object* @PyUnicode_InternFromString(i8* %4)
  %5 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %5, i32 0, i32 6
  store %struct._object* %call, %struct._object** %name_strobj, align 8
  %6 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj3 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %6, i32 0, i32 6
  %7 = load %struct._object*, %struct._object** %name_strobj3, align 8
  %tobool4 = icmp ne %struct._object* %7, null
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %for.body
  call void @Py_FatalError(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.22, i32 0, i32 0)) #8
  unreachable

if.end.6:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.6
  %8 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %incdec.ptr = getelementptr %struct.wrapperbase, %struct.wrapperbase* %8, i32 1
  store %struct.wrapperbase* %incdec.ptr, %struct.wrapperbase** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* @init_slotdefs.initialized, align 4
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @update_subclasses(%struct._typeobject* %type, %struct._object* %name, i32 (%struct._typeobject*, i8*)* %callback, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._object*, align 8
  %callback.addr = alloca i32 (%struct._typeobject*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store i32 (%struct._typeobject*, i8*)* %callback, i32 (%struct._typeobject*, i8*)** %callback.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i32 (%struct._typeobject*, i8*)*, i32 (%struct._typeobject*, i8*)** %callback.addr, align 8
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %2 = load i8*, i8** %data.addr, align 8
  %call = call i32 %0(%struct._typeobject* %1, i8* %2)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = load %struct._object*, %struct._object** %name.addr, align 8
  %5 = load i32 (%struct._typeobject*, i8*)*, i32 (%struct._typeobject*, i8*)** %callback.addr, align 8
  %6 = load i8*, i8** %data.addr, align 8
  %call1 = call i32 @recurse_down_subclasses(%struct._typeobject* %3, %struct._object* %4, i32 (%struct._typeobject*, i8*)* %5, i8* %6)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @update_slots_callback(%struct._typeobject* %type, i8* %data) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %data.addr = alloca i8*, align 8
  %pp = alloca %struct.wrapperbase**, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load i8*, i8** %data.addr, align 8
  %1 = bitcast i8* %0 to %struct.wrapperbase**
  store %struct.wrapperbase** %1, %struct.wrapperbase*** %pp, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %3 = load %struct.wrapperbase*, %struct.wrapperbase** %2, align 8
  %tobool = icmp ne %struct.wrapperbase* %3, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %5 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %6 = load %struct.wrapperbase*, %struct.wrapperbase** %5, align 8
  %call = call %struct.wrapperbase* @update_one_slot(%struct._typeobject* %4, %struct.wrapperbase* %6)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %incdec.ptr = getelementptr %struct.wrapperbase*, %struct.wrapperbase** %7, i32 1
  store %struct.wrapperbase** %incdec.ptr, %struct.wrapperbase*** %pp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 0
}

declare %struct._object* @PyUnicode_InternFromString(i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_repr(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_method(%struct._object* %0, %struct._Py_Identifier* @slot_tp_repr.PyId___repr__)
  store %struct._object* %call, %struct._object** %func, align 8
  %1 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %func, align 8
  %call1 = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %2, %struct._object* null, %struct._object* null)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %10, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %entry
  call void @PyErr_Clear()
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 1
  %13 = load i8*, i8** %tp_name, align 8
  %14 = load %struct._object*, %struct._object** %self.addr, align 8
  %call6 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.172, i32 0, i32 0), i8* %13, %struct._object* %14)
  store %struct._object* %call6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.4, %do.end
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_unaryfunc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*)*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*)*
  store %struct._object* (%struct._object*)* %1, %struct._object* (%struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call %struct._object* %3(%struct._object* %4)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %5
}

; Function Attrs: nounwind uwtable
define internal i64 @slot_tp_hash(%struct._object* %self) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %h = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_method(%struct._object* %0, %struct._Py_Identifier* @PyId___hash__)
  store %struct._object* %call, %struct._object** %func, align 8
  %1 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp eq %struct._object* %1, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp1 = icmp ne i64 %dec, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end
  store %struct._object* null, %struct._object** %func, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %do.end, %entry
  %9 = load %struct._object*, %struct._object** %func, align 8
  %cmp4 = icmp eq %struct._object* %9, null
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.end.3
  %10 = load %struct._object*, %struct._object** %self.addr, align 8
  %call6 = call i64 @PyObject_HashNotImplemented(%struct._object* %10)
  store i64 %call6, i64* %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %11 = load %struct._object*, %struct._object** %func, align 8
  %call8 = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %11, %struct._object* null, %struct._object* null)
  store %struct._object* %call8, %struct._object** %res, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.7
  %12 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp10, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %14, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %17(%struct._object* %18)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %19 = load %struct._object*, %struct._object** %res, align 8
  %cmp20 = icmp eq %struct._object* %19, null
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %do.end.19
  store i64 -1, i64* %retval
  br label %return

if.end.22:                                        ; preds = %do.end.19
  %20 = load %struct._object*, %struct._object** %res, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 19
  %22 = load i64, i64* %tp_flags, align 8
  %and = and i64 %22, 16777216
  %cmp24 = icmp ne i64 %and, 0
  br i1 %cmp24, label %if.end.26, label %if.then.25

if.then.25:                                       ; preds = %if.end.22
  %23 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %23, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.175, i32 0, i32 0))
  store i64 -1, i64* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.22
  %24 = load %struct._object*, %struct._object** %res, align 8
  %call27 = call i64 @PyLong_AsSsize_t(%struct._object* %24)
  store i64 %call27, i64* %h, align 8
  %25 = load i64, i64* %h, align 8
  %cmp28 = icmp eq i64 %25, -1
  br i1 %cmp28, label %land.lhs.true, label %if.end.32

land.lhs.true:                                    ; preds = %if.end.26
  %call29 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call29, null
  br i1 %tobool, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %land.lhs.true
  call void @PyErr_Clear()
  %26 = load i64 (%struct._object*)*, i64 (%struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyLong_Type, i32 0, i32 13), align 8
  %27 = load %struct._object*, %struct._object** %res, align 8
  %call31 = call i64 %26(%struct._object* %27)
  store i64 %call31, i64* %h, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %land.lhs.true, %if.end.26
  %28 = load i64, i64* %h, align 8
  %cmp33 = icmp eq i64 %28, -1
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.32
  store i64 -2, i64* %h, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.then.34, %if.end.32
  br label %do.body.36

do.body.36:                                       ; preds = %if.end.35
  %29 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp37, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %31, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.36
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.36
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %34(%struct._object* %35)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  %36 = load i64, i64* %h, align 8
  store i64 %36, i64* %retval
  br label %return

return:                                           ; preds = %do.end.46, %if.then.25, %if.then.21, %if.then.5
  %37 = load i64, i64* %retval
  ret i64 %37
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_hashfunc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i64 (%struct._object*)*, align 8
  %res = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i64 (%struct._object*)*
  store i64 (%struct._object*)* %1, i64 (%struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64 (%struct._object*)*, i64 (%struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call i64 %3(%struct._object* %4)
  store i64 %call1, i64* %res, align 8
  %5 = load i64, i64* %res, align 8
  %cmp = icmp eq i64 %5, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %6 = load i64, i64* %res, align 8
  %call6 = call %struct._object* @PyLong_FromSsize_t(i64 %6)
  store %struct._object* %call6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_call(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %meth = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_method(%struct._object* %0, %struct._Py_Identifier* @slot_tp_call.PyId___call__)
  store %struct._object* %call, %struct._object** %meth, align 8
  %1 = load %struct._object*, %struct._object** %meth, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %meth, align 8
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call1 = call %struct._object* @PyObject_Call(%struct._object* %2, %struct._object* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %meth, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %12 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %12, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_call(%struct._object* %self, %struct._object* %args, i8* %wrapped, %struct._object* %kwds) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*, %struct._object*)*
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %1, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %args.addr, align 8
  %5 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* %2(%struct._object* %3, %struct._object* %4, %struct._object* %5)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_str(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_method(%struct._object* %0, %struct._Py_Identifier* @slot_tp_str.PyId___str__)
  store %struct._object* %call, %struct._object** %func, align 8
  %1 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %func, align 8
  %call1 = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %2, %struct._object* null, %struct._object* null)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %10 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %10, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_getattr_hook(%struct._object* %self, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %tp = alloca %struct._typeobject*, align 8
  %getattr = alloca %struct._object*, align 8
  %getattribute = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %tp, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %tp, align 8
  %call = call %struct._object* @_PyType_LookupId(%struct._typeobject* %2, %struct._Py_Identifier* @slot_tp_getattr_hook.PyId___getattr__)
  store %struct._object* %call, %struct._object** %getattr, align 8
  %3 = load %struct._object*, %struct._object** %getattr, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct._typeobject*, %struct._typeobject** %tp, align 8
  %tp_getattro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 16
  store %struct._object* (%struct._object*, %struct._object*)* @slot_tp_getattro, %struct._object* (%struct._object*, %struct._object*)** %tp_getattro, align 8
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = load %struct._object*, %struct._object** %name.addr, align 8
  %call1 = call %struct._object* @slot_tp_getattro(%struct._object* %5, %struct._object* %6)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %getattr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %9 = load %struct._typeobject*, %struct._typeobject** %tp, align 8
  %call2 = call %struct._object* @_PyType_LookupId(%struct._typeobject* %9, %struct._Py_Identifier* @PyId___getattribute__)
  store %struct._object* %call2, %struct._object** %getattribute, align 8
  %10 = load %struct._object*, %struct._object** %getattribute, align 8
  %cmp3 = icmp eq %struct._object* %10, null
  br i1 %cmp3, label %if.then.7, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %getattribute, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %cmp5 = icmp eq %struct._typeobject* %12, @PyWrapperDescr_Type
  br i1 %cmp5, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false
  %13 = load %struct._object*, %struct._object** %getattribute, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyWrapperDescrObject*
  %d_wrapped = getelementptr inbounds %struct.PyWrapperDescrObject, %struct.PyWrapperDescrObject* %14, i32 0, i32 2
  %15 = load i8*, i8** %d_wrapped, align 8
  %cmp6 = icmp eq i8* %15, bitcast (%struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr to i8*)
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %land.lhs.true, %if.end
  %16 = load %struct._object*, %struct._object** %self.addr, align 8
  %17 = load %struct._object*, %struct._object** %name.addr, align 8
  %call8 = call %struct._object* @PyObject_GenericGetAttr(%struct._object* %16, %struct._object* %17)
  store %struct._object* %call8, %struct._object** %res, align 8
  br label %if.end.18

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %18 = load %struct._object*, %struct._object** %getattribute, align 8
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt9, align 8
  %inc10 = add i64 %19, 1
  store i64 %inc10, i64* %ob_refcnt9, align 8
  %20 = load %struct._object*, %struct._object** %self.addr, align 8
  %21 = load %struct._object*, %struct._object** %getattribute, align 8
  %22 = load %struct._object*, %struct._object** %name.addr, align 8
  %call11 = call %struct._object* @call_attribute(%struct._object* %20, %struct._object* %21, %struct._object* %22)
  store %struct._object* %call11, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %23 = load %struct._object*, %struct._object** %getattribute, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt12, align 8
  %dec = add i64 %25, -1
  store i64 %dec, i64* %ob_refcnt12, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body
  br label %if.end.17

if.else.15:                                       ; preds = %do.body
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %28(%struct._object* %29)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.17
  br label %if.end.18

if.end.18:                                        ; preds = %do.end, %if.then.7
  %30 = load %struct._object*, %struct._object** %res, align 8
  %cmp19 = icmp eq %struct._object* %30, null
  br i1 %cmp19, label %land.lhs.true.20, label %if.end.24

land.lhs.true.20:                                 ; preds = %if.end.18
  %31 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call21 = call i32 @PyErr_ExceptionMatches(%struct._object* %31)
  %tobool = icmp ne i32 %call21, 0
  br i1 %tobool, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %land.lhs.true.20
  call void @PyErr_Clear()
  %32 = load %struct._object*, %struct._object** %self.addr, align 8
  %33 = load %struct._object*, %struct._object** %getattr, align 8
  %34 = load %struct._object*, %struct._object** %name.addr, align 8
  %call23 = call %struct._object* @call_attribute(%struct._object* %32, %struct._object* %33, %struct._object* %34)
  store %struct._object* %call23, %struct._object** %res, align 8
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.22, %land.lhs.true.20, %if.end.18
  br label %do.body.25

do.body.25:                                       ; preds = %if.end.24
  %35 = load %struct._object*, %struct._object** %getattr, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp26, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %37, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %40(%struct._object* %41)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  %42 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %42, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.35, %if.then
  %43 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %43
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_binaryfunc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %other = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*)*
  store %struct._object* (%struct._object*, %struct._object*)* %1, %struct._object* (%struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %other, align 8
  %6 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %other, align 8
  %call1 = call %struct._object* %6(%struct._object* %7, %struct._object* %8)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: nounwind uwtable
define internal i32 @slot_tp_setattro(%struct._object* %self, %struct._object* %name, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %1, %struct._Py_Identifier* @slot_tp_setattro.PyId___delattr__, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %2)
  store %struct._object* %call, %struct._object** %res, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %name.addr, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %3, %struct._Py_Identifier* @slot_tp_setattro.PyId___setattr__, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i32 0, i32 0), %struct._object* %4, %struct._object* %5)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct._object*, %struct._object** %res, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %7 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %do.body
  br label %if.end.8

if.else.7:                                        ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else.7, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_setattr(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %res = alloca i32, align 4
  %name = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 2, i64 2, %struct._object** %name, %struct._object** %value)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %call1 = call i32 @hackcheck(%struct._object* %3, i32 (%struct._object*, %struct._object*, %struct._object*)* %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26, i32 0, i32 0))
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = load %struct._object*, %struct._object** %name, align 8
  %8 = load %struct._object*, %struct._object** %value, align 8
  %call5 = call i32 %5(%struct._object* %6, %struct._object* %7, %struct._object* %8)
  store i32 %call5, i32* %res, align 4
  %9 = load i32, i32* %res, align 4
  %cmp = icmp slt i32 %9, 0
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.6, %if.then.3, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_delattr(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %res = alloca i32, align 4
  %name = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %name, align 8
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %call1 = call i32 @hackcheck(%struct._object* %6, i32 (%struct._object*, %struct._object*, %struct._object*)* %7, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.27, i32 0, i32 0))
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %8 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %name, align 8
  %call5 = call i32 %8(%struct._object* %9, %struct._object* %10, %struct._object* null)
  store i32 %call5, i32* %res, align 4
  %11 = load i32, i32* %res, align 4
  %cmp = icmp slt i32 %11, 0
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %12 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.6, %if.then.3, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_richcompare(%struct._object* %self, %struct._object* %other, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %func = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load i32, i32* %op.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr [6 x %struct._Py_Identifier], [6 x %struct._Py_Identifier]* @name_op, i32 0, i64 %idxprom
  %call = call %struct._object* @lookup_method(%struct._object* %0, %struct._Py_Identifier* %arrayidx)
  store %struct._object* %call, %struct._object** %func, align 8
  %2 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @PyErr_Clear()
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %call1 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %args, align 8
  %5 = load %struct._object*, %struct._object** %args, align 8
  %cmp2 = icmp eq %struct._object* %5, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %res, align 8
  br label %if.end.9

if.else:                                          ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %func, align 8
  %7 = load %struct._object*, %struct._object** %args, align 8
  %call4 = call %struct._object* @PyObject_Call(%struct._object* %6, %struct._object* %7, %struct._object* null)
  store %struct._object* %call4, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %8 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %do.body
  br label %if.end.8

if.else.7:                                        ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else.7, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.8
  br label %if.end.9

if.end.9:                                         ; preds = %do.end, %if.then.3
  br label %do.body.10

do.body.10:                                       ; preds = %if.end.9
  %15 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp11, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %17, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %20(%struct._object* %21)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  %22 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %22, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.20, %if.then
  %23 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %23
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @richcmp_lt(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load i8*, i8** %wrapped.addr, align 8
  %call = call %struct._object* @wrap_richcmpfunc(%struct._object* %0, %struct._object* %1, i8* %2, i32 0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @richcmp_le(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load i8*, i8** %wrapped.addr, align 8
  %call = call %struct._object* @wrap_richcmpfunc(%struct._object* %0, %struct._object* %1, i8* %2, i32 1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @richcmp_eq(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load i8*, i8** %wrapped.addr, align 8
  %call = call %struct._object* @wrap_richcmpfunc(%struct._object* %0, %struct._object* %1, i8* %2, i32 2)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @richcmp_ne(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load i8*, i8** %wrapped.addr, align 8
  %call = call %struct._object* @wrap_richcmpfunc(%struct._object* %0, %struct._object* %1, i8* %2, i32 3)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @richcmp_gt(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load i8*, i8** %wrapped.addr, align 8
  %call = call %struct._object* @wrap_richcmpfunc(%struct._object* %0, %struct._object* %1, i8* %2, i32 4)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @richcmp_ge(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load i8*, i8** %wrapped.addr, align 8
  %call = call %struct._object* @wrap_richcmpfunc(%struct._object* %0, %struct._object* %1, i8* %2, i32 5)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_iter(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp9 = alloca %struct._object*, align 8
  %_py_decref_tmp27 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_method(%struct._object* %0, %struct._Py_Identifier* @slot_tp_iter.PyId___iter__)
  store %struct._object* %call, %struct._object** %func, align 8
  %1 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.19

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call1, %struct._object** %res, align 8
  store %struct._object* %call1, %struct._object** %args, align 8
  %2 = load %struct._object*, %struct._object** %args, align 8
  %cmp2 = icmp ne %struct._object* %2, null
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.then
  %3 = load %struct._object*, %struct._object** %func, align 8
  %4 = load %struct._object*, %struct._object** %args, align 8
  %call4 = call %struct._object* @PyObject_Call(%struct._object* %3, %struct._object* %4, %struct._object* null)
  store %struct._object* %call4, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %5 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %if.then
  br label %do.body.8

do.body.8:                                        ; preds = %if.end.7
  %12 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp9, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_refcnt10 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt10, align 8
  %dec11 = add i64 %14, -1
  store i64 %dec11, i64* %ob_refcnt10, align 8
  %cmp12 = icmp ne i64 %dec11, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.8
  br label %if.end.17

if.else.14:                                       ; preds = %do.body.8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_dealloc16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc16, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  call void %17(%struct._object* %18)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.14, %if.then.13
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  %19 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %entry
  call void @PyErr_Clear()
  %20 = load %struct._object*, %struct._object** %self.addr, align 8
  %call20 = call %struct._object* @lookup_method(%struct._object* %20, %struct._Py_Identifier* @PyId___getitem__)
  store %struct._object* %call20, %struct._object** %func, align 8
  %21 = load %struct._object*, %struct._object** %func, align 8
  %cmp21 = icmp eq %struct._object* %21, null
  br i1 %cmp21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %if.end.19
  %22 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %23 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 1
  %25 = load i8*, i8** %tp_name, align 8
  %call24 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %22, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.179, i32 0, i32 0), i8* %25)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.19
  br label %do.body.26

do.body.26:                                       ; preds = %if.end.25
  %26 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp27, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt28, align 8
  %dec29 = add i64 %28, -1
  store i64 %dec29, i64* %ob_refcnt28, align 8
  %cmp30 = icmp ne i64 %dec29, 0
  br i1 %cmp30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %do.body.26
  br label %if.end.35

if.else.32:                                       ; preds = %do.body.26
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_dealloc34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc34, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  call void %31(%struct._object* %32)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %if.then.31
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  %33 = load %struct._object*, %struct._object** %self.addr, align 8
  %call37 = call %struct._object* @PySeqIter_New(%struct._object* %33)
  store %struct._object* %call37, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.36, %if.then.22, %do.end.18
  %34 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %34
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_iternext(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_tp_iternext.PyId___next__, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_next(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*)*, align 8
  %res = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*)*
  store %struct._object* (%struct._object*)* %1, %struct._object* (%struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call %struct._object* %3(%struct._object* %4)
  store %struct._object* %call1, %struct._object** %res, align 8
  %5 = load %struct._object*, %struct._object** %res, align 8
  %cmp = icmp eq %struct._object* %5, null
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** @PyExc_StopIteration, align 8
  call void @PyErr_SetNone(%struct._object* %6)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %land.lhs.true, %if.end
  %7 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_descr_get(%struct._object* %self, %struct._object* %obj, %struct._object* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %tp = alloca %struct._typeobject*, align 8
  %get = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %tp, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %tp, align 8
  %call = call %struct._object* @_PyType_LookupId(%struct._typeobject* %2, %struct._Py_Identifier* @slot_tp_descr_get.PyId___get__)
  store %struct._object* %call, %struct._object** %get, align 8
  %3 = load %struct._object*, %struct._object** %get, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %4 = load %struct._typeobject*, %struct._typeobject** %tp, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 32
  %5 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  %cmp1 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %5, @slot_tp_descr_get
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %6 = load %struct._typeobject*, %struct._typeobject** %tp, align 8
  %tp_descr_get3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 32
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get3, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  store %struct._object* %9, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %entry
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %cmp5 = icmp eq %struct._object* %10, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  store %struct._object* @_Py_NoneStruct, %struct._object** %obj.addr, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.6, %if.end.4
  %11 = load %struct._object*, %struct._object** %type.addr, align 8
  %cmp8 = icmp eq %struct._object* %11, null
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.7
  store %struct._object* @_Py_NoneStruct, %struct._object** %type.addr, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end.7
  %12 = load %struct._object*, %struct._object** %get, align 8
  %13 = load %struct._object*, %struct._object** %self.addr, align 8
  %14 = load %struct._object*, %struct._object** %obj.addr, align 8
  %15 = load %struct._object*, %struct._object** %type.addr, align 8
  %call11 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %12, %struct._object* %13, %struct._object* %14, %struct._object* %15, i8* null)
  store %struct._object* %call11, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.end
  %16 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %16
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_descr_get(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %obj = alloca %struct._object*, align 8
  %type = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*, %struct._object*)*
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %1, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  store %struct._object* null, %struct._object** %type, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 1, i64 2, %struct._object** %obj, %struct._object** %type)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj, align 8
  %cmp = icmp eq %struct._object* %3, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %obj, align 8
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %4 = load %struct._object*, %struct._object** %type, align 8
  %cmp3 = icmp eq %struct._object* %4, @_Py_NoneStruct
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %type, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.end.2
  %5 = load %struct._object*, %struct._object** %type, align 8
  %cmp6 = icmp eq %struct._object* %5, null
  br i1 %cmp6, label %land.lhs.true, label %if.end.9

land.lhs.true:                                    ; preds = %if.end.5
  %6 = load %struct._object*, %struct._object** %obj, align 8
  %cmp7 = icmp eq %struct._object* %6, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.181, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %land.lhs.true, %if.end.5
  %8 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %obj, align 8
  %11 = load %struct._object*, %struct._object** %type, align 8
  %call10 = call %struct._object* %8(%struct._object* %9, %struct._object* %10, %struct._object* %11)
  store %struct._object* %call10, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.8, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal i32 @slot_tp_descr_set(%struct._object* %self, %struct._object* %target, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %target.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %target, %struct._object** %target.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %target.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %1, %struct._Py_Identifier* @slot_tp_descr_set.PyId___delete__, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %2)
  store %struct._object* %call, %struct._object** %res, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %target.addr, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %3, %struct._Py_Identifier* @slot_tp_descr_set.PyId___set__, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i32 0, i32 0), %struct._object* %4, %struct._object* %5)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct._object*, %struct._object** %res, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %7 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %do.body
  br label %if.end.8

if.else.7:                                        ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else.7, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_descr_set(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %obj = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %ret = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 2, i64 2, %struct._object** %obj, %struct._object** %value)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = load %struct._object*, %struct._object** %obj, align 8
  %6 = load %struct._object*, %struct._object** %value, align 8
  %call1 = call i32 %3(%struct._object* %4, %struct._object* %5, %struct._object* %6)
  store i32 %call1, i32* %ret, align 4
  %7 = load i32, i32* %ret, align 4
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_descr_delete(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %obj = alloca %struct._object*, align 8
  %ret = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %obj, align 8
  %6 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %obj, align 8
  %call1 = call i32 %6(%struct._object* %7, %struct._object* %8, %struct._object* null)
  store i32 %call1, i32* %ret, align 4
  %9 = load i32, i32* %ret, align 4
  %cmp = icmp slt i32 %9, 0
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal i32 @slot_tp_init(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %meth = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_method(%struct._object* %0, %struct._Py_Identifier* @slot_tp_init.PyId___init__)
  store %struct._object* %call, %struct._object** %meth, align 8
  %1 = load %struct._object*, %struct._object** %meth, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %meth, align 8
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call1 = call %struct._object* @PyObject_Call(%struct._object* %2, %struct._object* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %meth, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %12 = load %struct._object*, %struct._object** %res, align 8
  %cmp5 = icmp eq %struct._object* %12, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %do.end
  %13 = load %struct._object*, %struct._object** %res, align 8
  %cmp8 = icmp ne %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp8, label %if.then.9, label %if.end.23

if.then.9:                                        ; preds = %if.end.7
  %14 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %15 = load %struct._object*, %struct._object** %res, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 1
  %17 = load i8*, i8** %tp_name, align 8
  %call11 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %14, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.182, i32 0, i32 0), i8* %17)
  br label %do.body.12

do.body.12:                                       ; preds = %if.then.9
  %18 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp13, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %20, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %23(%struct._object* %24)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  store i32 -1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.end.7
  br label %do.body.24

do.body.24:                                       ; preds = %if.end.23
  %25 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp25, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %27, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body.24
  br label %if.end.33

if.else.30:                                       ; preds = %do.body.24
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc32, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %30(%struct._object* %31)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end.34

do.end.34:                                        ; preds = %if.end.33
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.34, %do.end.22, %if.then.6, %if.then
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_init(%struct._object* %self, %struct._object* %args, i8* %wrapped, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %args.addr, align 8
  %5 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 %2(%struct._object* %3, %struct._object* %4, %struct._object* %5)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %newargs = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %1, %struct._Py_Identifier* @PyId___new__)
  store %struct._object* %call, %struct._object** %func, align 8
  %2 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  store i64 %5, i64* %n, align 8
  %6 = load i64, i64* %n, align 8
  %add = add i64 %6, 1
  %call1 = call %struct._object* @PyTuple_New(i64 %add)
  store %struct._object* %call1, %struct._object** %newargs, align 8
  %7 = load %struct._object*, %struct._object** %newargs, align 8
  %cmp2 = icmp eq %struct._object* %7, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %9 = bitcast %struct._typeobject* %8 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %11 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %12 = bitcast %struct._typeobject* %11 to %struct._object*
  %13 = load %struct._object*, %struct._object** %newargs, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %14, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  store %struct._object* %12, %struct._object** %arrayidx, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.4
  %15 = load i64, i64* %i, align 8
  %16 = load i64, i64* %n, align 8
  %cmp5 = icmp slt i64 %15, %16
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i64, i64* %i, align 8
  %18 = load %struct._object*, %struct._object** %args.addr, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyTupleObject*
  %ob_item6 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %19, i32 0, i32 1
  %arrayidx7 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item6, i32 0, i64 %17
  %20 = load %struct._object*, %struct._object** %arrayidx7, align 8
  store %struct._object* %20, %struct._object** %x, align 8
  %21 = load %struct._object*, %struct._object** %x, align 8
  %ob_refcnt8 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt8, align 8
  %inc9 = add i64 %22, 1
  store i64 %inc9, i64* %ob_refcnt8, align 8
  %23 = load %struct._object*, %struct._object** %x, align 8
  %24 = load i64, i64* %i, align 8
  %add10 = add i64 %24, 1
  %25 = load %struct._object*, %struct._object** %newargs, align 8
  %26 = bitcast %struct._object* %25 to %struct.PyTupleObject*
  %ob_item11 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %26, i32 0, i32 1
  %arrayidx12 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item11, i32 0, i64 %add10
  store %struct._object* %23, %struct._object** %arrayidx12, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %27 = load i64, i64* %i, align 8
  %inc13 = add i64 %27, 1
  store i64 %inc13, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %28 = load %struct._object*, %struct._object** %func, align 8
  %29 = load %struct._object*, %struct._object** %newargs, align 8
  %30 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call14 = call %struct._object* @PyObject_Call(%struct._object* %28, %struct._object* %29, %struct._object* %30)
  store %struct._object* %call14, %struct._object** %x, align 8
  br label %do.body

do.body:                                          ; preds = %for.end
  %31 = load %struct._object*, %struct._object** %newargs, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt15, align 8
  %dec = add i64 %33, -1
  store i64 %dec, i64* %ob_refcnt15, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body
  br label %if.end.18

if.else:                                          ; preds = %do.body
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %36(%struct._object* %37)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.18
  br label %do.body.19

do.body.19:                                       ; preds = %do.end
  %38 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp20, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt21, align 8
  %dec22 = add i64 %40, -1
  store i64 %dec22, i64* %ob_refcnt21, align 8
  %cmp23 = icmp ne i64 %dec22, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.19
  br label %if.end.28

if.else.25:                                       ; preds = %do.body.19
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  call void %43(%struct._object* %44)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  %45 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %45, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.29, %if.then.3, %if.then
  %46 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %46
}

; Function Attrs: nounwind uwtable
define internal void @slot_tp_finalize(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %del = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %error_type = alloca %struct._object*, align 8
  %error_value = alloca %struct._object*, align 8
  %error_traceback = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp9 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  call void @PyErr_Fetch(%struct._object** %error_type, %struct._object** %error_value, %struct._object** %error_traceback)
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_maybe(%struct._object* %0, %struct._Py_Identifier* @slot_tp_finalize.PyId___del__)
  store %struct._object* %call, %struct._object** %del, align 8
  %1 = load %struct._object*, %struct._object** %del, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.19

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %del, align 8
  %call1 = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %2, %struct._object* null, %struct._object* null)
  store %struct._object* %call1, %struct._object** %res, align 8
  %3 = load %struct._object*, %struct._object** %res, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %del, align 8
  call void @PyErr_WriteUnraisable(%struct._object* %4)
  br label %if.end.7

if.else:                                          ; preds = %if.then
  br label %do.body

do.body:                                          ; preds = %if.else
  %5 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %do.body
  br label %if.end

if.else.6:                                        ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %if.then.3
  br label %do.body.8

do.body.8:                                        ; preds = %if.end.7
  %12 = load %struct._object*, %struct._object** %del, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp9, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_refcnt10 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt10, align 8
  %dec11 = add i64 %14, -1
  store i64 %dec11, i64* %ob_refcnt10, align 8
  %cmp12 = icmp ne i64 %dec11, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.8
  br label %if.end.17

if.else.14:                                       ; preds = %do.body.8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_dealloc16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc16, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  call void %17(%struct._object* %18)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.14, %if.then.13
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  br label %if.end.19

if.end.19:                                        ; preds = %do.end.18, %entry
  %19 = load %struct._object*, %struct._object** %error_type, align 8
  %20 = load %struct._object*, %struct._object** %error_value, align 8
  %21 = load %struct._object*, %struct._object** %error_traceback, align 8
  call void @PyErr_Restore(%struct._object* %19, %struct._object* %20, %struct._object* %21)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_del(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca void (%struct._object*)*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to void (%struct._object*)*
  store void (%struct._object*)* %1, void (%struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load void (%struct._object*)*, void (%struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  call void %3(%struct._object* %4)
  %5 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_add(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_add = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 0
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_add, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_add
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_add13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 0
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_add13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_add
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_add.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_add.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_add.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_add.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_binaryfunc_l(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %other = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*)*
  store %struct._object* (%struct._object*, %struct._object*)* %1, %struct._object* (%struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %other, align 8
  %6 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %other, align 8
  %call1 = call %struct._object* %6(%struct._object* %7, %struct._object* %8)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_binaryfunc_r(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %other = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*)*
  store %struct._object* (%struct._object*, %struct._object*)* %1, %struct._object* (%struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %other, align 8
  %6 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %func, align 8
  %7 = load %struct._object*, %struct._object** %other, align 8
  %8 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call %struct._object* %6(%struct._object* %7, %struct._object* %8)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_subtract(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_subtract = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 1
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_subtract
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_subtract13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 1
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_subtract13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_subtract
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_subtract.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_subtract.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_subtract.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_subtract.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_multiply(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_multiply = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 2
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_multiply
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_multiply13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 2
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_multiply13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_multiply
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_multiply.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_multiply.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_multiply.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_multiply.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_remainder(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_remainder = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 3
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_remainder
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_remainder13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 3
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_remainder13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_remainder
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_remainder.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_remainder.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_remainder.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_remainder.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_divmod(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_divmod = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 4
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_divmod
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_divmod13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 4
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_divmod13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_divmod
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_divmod.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_divmod.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_divmod.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_divmod.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_power(%struct._object* %self, %struct._object* %other, %struct._object* %modulus) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %modulus.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store %struct._object* %modulus, %struct._object** %modulus.addr, align 8
  %0 = load %struct._object*, %struct._object** %modulus.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %call = call %struct._object* @slot_nb_power_binary(%struct._object* %1, %struct._object* %2)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 10
  %5 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp1 = icmp ne %struct.PyNumberMethods* %5, null
  br i1 %cmp1, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 10
  %8 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number3, align 8
  %nb_power = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %8, i32 0, i32 5
  %9 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power, align 8
  %cmp4 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %9, @slot_nb_power
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %land.lhs.true
  %10 = load %struct._object*, %struct._object** %self.addr, align 8
  %11 = load %struct._object*, %struct._object** %other.addr, align 8
  %12 = load %struct._object*, %struct._object** %modulus.addr, align 8
  %call6 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %10, %struct._Py_Identifier* @slot_nb_power.PyId___pow__, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i32 0, i32 0), %struct._object* %11, %struct._object* %12)
  store %struct._object* %call6, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  %13 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %13, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.5, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_ternaryfunc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %other = alloca %struct._object*, align 8
  %third = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*, %struct._object*)*
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %1, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %third, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 1, i64 2, %struct._object** %other, %struct._object** %third)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = load %struct._object*, %struct._object** %other, align 8
  %6 = load %struct._object*, %struct._object** %third, align 8
  %call1 = call %struct._object* %3(%struct._object* %4, %struct._object* %5, %struct._object* %6)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_ternaryfunc_r(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %other = alloca %struct._object*, align 8
  %third = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*, %struct._object*)*
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %1, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %third, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 1, i64 2, %struct._object** %other, %struct._object** %third)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %other, align 8
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = load %struct._object*, %struct._object** %third, align 8
  %call1 = call %struct._object* %3(%struct._object* %4, %struct._object* %5, %struct._object* %6)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_negative(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_negative.id, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_positive(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_positive.id, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_absolute(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_absolute.id, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @slot_nb_bool(%struct._object* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %using_len = alloca i32, align 4
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 -1, i32* %result, align 4
  store i32 0, i32* %using_len, align 4
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_maybe(%struct._object* %0, %struct._Py_Identifier* @slot_nb_bool.PyId___bool__)
  store %struct._object* %call, %struct._object** %func, align 8
  %1 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %call3 = call %struct._object* @lookup_maybe(%struct._object* %2, %struct._Py_Identifier* @PyId___len__)
  store %struct._object* %call3, %struct._object** %func, align 8
  %3 = load %struct._object*, %struct._object** %func, align 8
  %cmp4 = icmp eq %struct._object* %3, null
  br i1 %cmp4, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %call6 = call %struct._object* @PyErr_Occurred()
  %tobool7 = icmp ne %struct._object* %call6, null
  %cond = select i1 %tobool7, i32 -1, i32 1
  store i32 %cond, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  store i32 1, i32* %using_len, align 4
  br label %if.end.9

if.end.9:                                         ; preds = %if.end.8, %entry
  %call10 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call10, %struct._object** %args, align 8
  %4 = load %struct._object*, %struct._object** %args, align 8
  %cmp11 = icmp ne %struct._object* %4, null
  br i1 %cmp11, label %if.then.12, label %if.end.44

if.then.12:                                       ; preds = %if.end.9
  %5 = load %struct._object*, %struct._object** %func, align 8
  %6 = load %struct._object*, %struct._object** %args, align 8
  %call13 = call %struct._object* @PyObject_Call(%struct._object* %5, %struct._object* %6, %struct._object* null)
  store %struct._object* %call13, %struct._object** %temp, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.12
  %7 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp14 = icmp ne i64 %dec, 0
  br i1 %cmp14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %do.body
  br label %if.end.16

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.15
  br label %do.end

do.end:                                           ; preds = %if.end.16
  %14 = load %struct._object*, %struct._object** %temp, align 8
  %cmp17 = icmp ne %struct._object* %14, null
  br i1 %cmp17, label %if.then.18, label %if.end.43

if.then.18:                                       ; preds = %do.end
  %15 = load i32, i32* %using_len, align 4
  %tobool19 = icmp ne i32 %15, 0
  br i1 %tobool19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.then.18
  %16 = load %struct._object*, %struct._object** %temp, align 8
  %call21 = call i32 @PyObject_IsTrue(%struct._object* %16)
  store i32 %call21, i32* %result, align 4
  br label %if.end.31

if.else.22:                                       ; preds = %if.then.18
  %17 = load %struct._object*, %struct._object** %temp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %cmp24 = icmp eq %struct._typeobject* %18, @PyBool_Type
  br i1 %cmp24, label %if.then.25, label %if.else.27

if.then.25:                                       ; preds = %if.else.22
  %19 = load %struct._object*, %struct._object** %temp, align 8
  %call26 = call i32 @PyObject_IsTrue(%struct._object* %19)
  store i32 %call26, i32* %result, align 4
  br label %if.end.30

if.else.27:                                       ; preds = %if.else.22
  %20 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %21 = load %struct._object*, %struct._object** %temp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 1
  %23 = load i8*, i8** %tp_name, align 8
  %call29 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %20, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.183, i32 0, i32 0), i8* %23)
  store i32 -1, i32* %result, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.25
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.20
  br label %do.body.32

do.body.32:                                       ; preds = %if.end.31
  %24 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %26, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %29(%struct._object* %30)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %if.end.43

if.end.43:                                        ; preds = %do.end.42, %do.end
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end.9
  br label %do.body.45

do.body.45:                                       ; preds = %if.end.44
  %31 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp46, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt47, align 8
  %dec48 = add i64 %33, -1
  store i64 %dec48, i64* %ob_refcnt47, align 8
  %cmp49 = icmp ne i64 %dec48, 0
  br i1 %cmp49, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.45
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  call void %36(%struct._object* %37)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  %38 = load i32, i32* %result, align 4
  store i32 %38, i32* %retval
  br label %return

return:                                           ; preds = %do.end.55, %if.then.5, %if.then.2
  %39 = load i32, i32* %retval
  ret i32 %39
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_inquirypred(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*)*, align 8
  %res = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*)*
  store i32 (%struct._object*)* %1, i32 (%struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32 (%struct._object*)*, i32 (%struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call i32 %3(%struct._object* %4)
  store i32 %call1, i32* %res, align 4
  %5 = load i32, i32* %res, align 4
  %cmp = icmp eq i32 %5, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %6 = load i32, i32* %res, align 4
  %conv = sext i32 %6 to i64
  %call6 = call %struct._object* @PyBool_FromLong(i64 %conv)
  store %struct._object* %call6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_invert(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_invert.id, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_lshift(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_lshift = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 11
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_lshift
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_lshift13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 11
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_lshift13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_lshift
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_lshift.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_lshift.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_lshift.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_lshift.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_rshift(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_rshift = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 12
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_rshift
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_rshift13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 12
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_rshift13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_rshift
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_rshift.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_rshift.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_rshift.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_rshift.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_and(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_and = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 13
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_and, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_and
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_and13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 13
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_and13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_and
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_and.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_and.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_and.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_and.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_xor(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_xor = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 14
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_xor, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_xor
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_xor13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 14
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_xor13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_xor
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_xor.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_xor.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_xor.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_xor.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_or(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_or = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 15
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_or, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_or
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_or13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 15
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_or13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_or
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_or.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_or.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_or.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_or.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_int(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_int.id, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_float(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_float.id, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_add(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_add.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_subtract(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_subtract.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_multiply(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_multiply.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_remainder(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_remainder.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_power(%struct._object* %self, %struct._object* %arg1, %struct._object* %arg2) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  %arg2.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  store %struct._object* %arg2, %struct._object** %arg2.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_power.PyId___ipow__, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_lshift(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_lshift.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_rshift(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_rshift.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_and(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_and.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_xor(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_xor.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_or(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_or.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_floor_divide(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_floor_divide = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 29
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_floor_divide
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_floor_divide13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 29
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_floor_divide13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_floor_divide
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_floor_divide.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_floor_divide.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_floor_divide.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_floor_divide.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_true_divide(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_true_divide = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 30
  %10 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %10, @slot_nb_true_divide
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_true_divide13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 30
  %18 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %nb_true_divide13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %18, @slot_nb_true_divide
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_true_divide.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_true_divide.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_true_divide.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_true_divide.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_floor_divide(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_floor_divide.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_inplace_true_divide(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_inplace_true_divide.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_index(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_nb_index.PyId___index__, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i64 @slot_sq_length(%struct._object* %self) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %len = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @PyId___len__, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.180, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %res, align 8
  %1 = load %struct._object*, %struct._object** %res, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %res, align 8
  %3 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %call1 = call i64 @PyNumber_AsSsize_t(%struct._object* %2, %struct._object* %3)
  store i64 %call1, i64* %len, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %11 = load i64, i64* %len, align 8
  %cmp5 = icmp slt i64 %11, 0
  br i1 %cmp5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %do.end
  %call7 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call7, null
  br i1 %tobool, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.then.6
  %12 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.184, i32 0, i32 0))
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %if.then.6
  store i64 -1, i64* %retval
  br label %return

if.end.10:                                        ; preds = %do.end
  %13 = load i64, i64* %len, align 8
  store i64 %13, i64* %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.end.9, %if.then
  %14 = load i64, i64* %retval
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_lenfunc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i64 (%struct._object*)*, align 8
  %res = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i64 (%struct._object*)*
  store i64 (%struct._object*)* %1, i64 (%struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64 (%struct._object*)*, i64 (%struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call i64 %3(%struct._object* %4)
  store i64 %call1, i64* %res, align 8
  %5 = load i64, i64* %res, align 8
  %cmp = icmp eq i64 %5, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %6 = load i64, i64* %res, align 8
  %call6 = call %struct._object* @PyLong_FromLong(i64 %6)
  store %struct._object* %call6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_mp_subscript(%struct._object* %self, %struct._object* %arg1) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %arg1.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg1, %struct._object** %arg1.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg1.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @slot_mp_subscript.id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @slot_mp_ass_subscript(%struct._object* %self, %struct._object* %key, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %key.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %1, %struct._Py_Identifier* @PyId___delitem__, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %2)
  store %struct._object* %call, %struct._object** %res, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %key.addr, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %3, %struct._Py_Identifier* @PyId___setitem__, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.177, i32 0, i32 0), %struct._object* %4, %struct._object* %5)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct._object*, %struct._object** %res, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %7 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %do.body
  br label %if.end.8

if.else.7:                                        ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else.7, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_objobjargproc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %res = alloca i32, align 4
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 2, i64 2, %struct._object** %key, %struct._object** %value)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = load %struct._object*, %struct._object** %key, align 8
  %6 = load %struct._object*, %struct._object** %value, align 8
  %call1 = call i32 %3(%struct._object* %4, %struct._object* %5, %struct._object* %6)
  store i32 %call1, i32* %res, align 4
  %7 = load i32, i32* %res, align 4
  %cmp = icmp eq i32 %7, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_delitem(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %res = alloca i32, align 4
  %key = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %key, align 8
  %6 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %key, align 8
  %call1 = call i32 %6(%struct._object* %7, %struct._object* %8, %struct._object* null)
  store i32 %call1, i32* %res, align 4
  %9 = load i32, i32* %res, align 4
  %cmp = icmp eq i32 %9, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_indexargfunc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, i64)*, align 8
  %o = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, i64)*
  store %struct._object* (%struct._object*, i64)* %1, %struct._object* (%struct._object*, i64)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 1, i64 1, %struct._object** %o)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %o, align 8
  %4 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %call1 = call i64 @PyNumber_AsSsize_t(%struct._object* %3, %struct._object* %4)
  store i64 %call1, i64* %i, align 8
  %5 = load i64, i64* %i, align 8
  %cmp = icmp eq i64 %5, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %6 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load i64, i64* %i, align 8
  %call6 = call %struct._object* %6(%struct._object* %7, i64 %8)
  store %struct._object* %call6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_sq_item(%struct._object* %self, i64 %i) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %i.addr = alloca i64, align 8
  %func = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %ival = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %f = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %getitem_str = alloca %struct._object*, align 8
  %_py_xdecref_tmp51 = alloca %struct._object*, align 8
  %_py_decref_tmp55 = alloca %struct._object*, align 8
  %_py_xdecref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  %_py_xdecref_tmp85 = alloca %struct._object*, align 8
  %_py_decref_tmp89 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i64 %i, i64* %i.addr, align 8
  store %struct._object* null, %struct._object** %args, align 8
  store %struct._object* null, %struct._object** %ival, align 8
  store %struct._object* null, %struct._object** %retval1, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %call = call %struct._object* @_PyType_LookupId(%struct._typeobject* %1, %struct._Py_Identifier* @PyId___getitem__)
  store %struct._object* %call, %struct._object** %func, align 8
  %2 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.else.47

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %func, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 32
  %5 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %5, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %cmp3 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %5, null
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %func, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.9

if.else:                                          ; preds = %if.then
  %8 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %9 = load %struct._object*, %struct._object** %func, align 8
  %10 = load %struct._object*, %struct._object** %self.addr, align 8
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %13 = bitcast %struct._typeobject* %12 to %struct._object*
  %call6 = call %struct._object* %8(%struct._object* %9, %struct._object* %10, %struct._object* %13)
  store %struct._object* %call6, %struct._object** %func, align 8
  %14 = load %struct._object*, %struct._object** %func, align 8
  %cmp7 = icmp eq %struct._object* %14, null
  br i1 %cmp7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %if.then.4
  %15 = load i64, i64* %i.addr, align 8
  %call10 = call %struct._object* @PyLong_FromSsize_t(i64 %15)
  store %struct._object* %call10, %struct._object** %ival, align 8
  %16 = load %struct._object*, %struct._object** %ival, align 8
  %cmp11 = icmp ne %struct._object* %16, null
  br i1 %cmp11, label %if.then.12, label %if.end.46

if.then.12:                                       ; preds = %if.end.9
  %call13 = call %struct._object* @PyTuple_New(i64 1)
  store %struct._object* %call13, %struct._object** %args, align 8
  %17 = load %struct._object*, %struct._object** %args, align 8
  %cmp14 = icmp ne %struct._object* %17, null
  br i1 %cmp14, label %if.then.15, label %if.end.45

if.then.15:                                       ; preds = %if.then.12
  %18 = load %struct._object*, %struct._object** %ival, align 8
  %19 = load %struct._object*, %struct._object** %args, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %20, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  store %struct._object* %18, %struct._object** %arrayidx, align 8
  %21 = load %struct._object*, %struct._object** %func, align 8
  %22 = load %struct._object*, %struct._object** %args, align 8
  %call16 = call %struct._object* @PyObject_Call(%struct._object* %21, %struct._object* %22, %struct._object* null)
  store %struct._object* %call16, %struct._object** %retval1, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.15
  %23 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %23, %struct._object** %_py_xdecref_tmp, align 8
  %24 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp17 = icmp ne %struct._object* %24, null
  br i1 %cmp17, label %if.then.18, label %if.end.26

if.then.18:                                       ; preds = %do.body
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  %25 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt20, align 8
  %dec = add i64 %27, -1
  store i64 %dec, i64* %ob_refcnt20, align 8
  %cmp21 = icmp ne i64 %dec, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.19
  br label %if.end.25

if.else.23:                                       ; preds = %do.body.19
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %30(%struct._object* %31)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end

do.end:                                           ; preds = %if.end.25
  br label %if.end.26

if.end.26:                                        ; preds = %do.end, %do.body
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.27
  %32 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %32, %struct._object** %_py_xdecref_tmp29, align 8
  %33 = load %struct._object*, %struct._object** %_py_xdecref_tmp29, align 8
  %cmp30 = icmp ne %struct._object* %33, null
  br i1 %cmp30, label %if.then.31, label %if.end.43

if.then.31:                                       ; preds = %do.body.28
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.31
  %34 = load %struct._object*, %struct._object** %_py_xdecref_tmp29, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp33, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %36, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %39(%struct._object* %40)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %if.end.43

if.end.43:                                        ; preds = %do.end.42, %do.body.28
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  %41 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %41, %struct._object** %retval
  br label %return

if.end.45:                                        ; preds = %if.then.12
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.end.9
  br label %if.end.49

if.else.47:                                       ; preds = %entry
  %call48 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @PyId___getitem__)
  store %struct._object* %call48, %struct._object** %getitem_str, align 8
  %42 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %43 = load %struct._object*, %struct._object** %getitem_str, align 8
  call void @PyErr_SetObject(%struct._object* %42, %struct._object* %43)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.47, %if.end.46
  br label %do.body.50

do.body.50:                                       ; preds = %if.end.49
  %44 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %44, %struct._object** %_py_xdecref_tmp51, align 8
  %45 = load %struct._object*, %struct._object** %_py_xdecref_tmp51, align 8
  %cmp52 = icmp ne %struct._object* %45, null
  br i1 %cmp52, label %if.then.53, label %if.end.65

if.then.53:                                       ; preds = %do.body.50
  br label %do.body.54

do.body.54:                                       ; preds = %if.then.53
  %46 = load %struct._object*, %struct._object** %_py_xdecref_tmp51, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp55, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt56, align 8
  %dec57 = add i64 %48, -1
  store i64 %dec57, i64* %ob_refcnt56, align 8
  %cmp58 = icmp ne i64 %dec57, 0
  br i1 %cmp58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.54
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.54
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  call void %51(%struct._object* %52)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  br label %if.end.65

if.end.65:                                        ; preds = %do.end.64, %do.body.50
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  %53 = load %struct._object*, %struct._object** %ival, align 8
  store %struct._object* %53, %struct._object** %_py_xdecref_tmp68, align 8
  %54 = load %struct._object*, %struct._object** %_py_xdecref_tmp68, align 8
  %cmp69 = icmp ne %struct._object* %54, null
  br i1 %cmp69, label %if.then.70, label %if.end.82

if.then.70:                                       ; preds = %do.body.67
  br label %do.body.71

do.body.71:                                       ; preds = %if.then.70
  %55 = load %struct._object*, %struct._object** %_py_xdecref_tmp68, align 8
  store %struct._object* %55, %struct._object** %_py_decref_tmp72, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt73, align 8
  %dec74 = add i64 %57, -1
  store i64 %dec74, i64* %ob_refcnt73, align 8
  %cmp75 = icmp ne i64 %dec74, 0
  br i1 %cmp75, label %if.then.76, label %if.else.77

if.then.76:                                       ; preds = %do.body.71
  br label %if.end.80

if.else.77:                                       ; preds = %do.body.71
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  call void %60(%struct._object* %61)
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  br label %if.end.82

if.end.82:                                        ; preds = %do.end.81, %do.body.67
  br label %do.end.83

do.end.83:                                        ; preds = %if.end.82
  br label %do.body.84

do.body.84:                                       ; preds = %do.end.83
  %62 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %62, %struct._object** %_py_xdecref_tmp85, align 8
  %63 = load %struct._object*, %struct._object** %_py_xdecref_tmp85, align 8
  %cmp86 = icmp ne %struct._object* %63, null
  br i1 %cmp86, label %if.then.87, label %if.end.99

if.then.87:                                       ; preds = %do.body.84
  br label %do.body.88

do.body.88:                                       ; preds = %if.then.87
  %64 = load %struct._object*, %struct._object** %_py_xdecref_tmp85, align 8
  store %struct._object* %64, %struct._object** %_py_decref_tmp89, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_refcnt90 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 0
  %66 = load i64, i64* %ob_refcnt90, align 8
  %dec91 = add i64 %66, -1
  store i64 %dec91, i64* %ob_refcnt90, align 8
  %cmp92 = icmp ne i64 %dec91, 0
  br i1 %cmp92, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %do.body.88
  br label %if.end.97

if.else.94:                                       ; preds = %do.body.88
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_type95 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type95, align 8
  %tp_dealloc96 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 4
  %69 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc96, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  call void %69(%struct._object* %70)
  br label %if.end.97

if.end.97:                                        ; preds = %if.else.94, %if.then.93
  br label %do.end.98

do.end.98:                                        ; preds = %if.end.97
  br label %if.end.99

if.end.99:                                        ; preds = %do.end.98, %do.body.84
  br label %do.end.100

do.end.100:                                       ; preds = %if.end.99
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.100, %do.end.44, %if.then.8
  %71 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %71
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_sq_item(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca %struct._object* (%struct._object*, i64)*, align 8
  %arg = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, i64)*
  store %struct._object* (%struct._object*, i64)* %1, %struct._object* (%struct._object*, i64)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %cmp = icmp eq i64 %4, 1
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** %args.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %6, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %7, %struct._object** %arg, align 8
  %8 = load %struct._object*, %struct._object** %self.addr, align 8
  %9 = load %struct._object*, %struct._object** %arg, align 8
  %call = call i64 @getindex(%struct._object* %8, %struct._object* %9)
  store i64 %call, i64* %i, align 8
  %10 = load i64, i64* %i, align 8
  %cmp1 = icmp eq i64 %10, -1
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call2, null
  br i1 %tobool, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %11 = load %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)** %func, align 8
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %13 = load i64, i64* %i, align 8
  %call4 = call %struct._object* %11(%struct._object* %12, i64 %13)
  store %struct._object* %call4, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %entry
  %14 = load %struct._object*, %struct._object** %args.addr, align 8
  %call6 = call i32 @check_num_args(%struct._object* %14, i32 1)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.end, %if.then.3
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

; Function Attrs: nounwind uwtable
define internal i32 @slot_sq_ass_item(%struct._object* %self, i64 %index, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %value.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load i64, i64* %index.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %1, %struct._Py_Identifier* @PyId___delitem__, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.185, i32 0, i32 0), i64 %2)
  store %struct._object* %call, %struct._object** %res, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load i64, i64* %index.addr, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %3, %struct._Py_Identifier* @PyId___setitem__, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.186, i32 0, i32 0), i64 %4, %struct._object* %5)
  store %struct._object* %call1, %struct._object** %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct._object*, %struct._object** %res, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %7 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %do.body
  br label %if.end.8

if.else.7:                                        ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else.7, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.3
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_sq_setitem(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, i64, %struct._object*)*, align 8
  %i = alloca i64, align 8
  %res = alloca i32, align 4
  %arg = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, i64, %struct._object*)*
  store i32 (%struct._object*, i64, %struct._object*)* %1, i32 (%struct._object*, i64, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %2, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 2, i64 2, %struct._object** %arg, %struct._object** %value)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %arg, align 8
  %call1 = call i64 @getindex(%struct._object* %3, %struct._object* %4)
  store i64 %call1, i64* %i, align 8
  %5 = load i64, i64* %i, align 8
  %cmp = icmp eq i64 %5, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %6 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load i64, i64* %i, align 8
  %9 = load %struct._object*, %struct._object** %value, align 8
  %call6 = call i32 %6(%struct._object* %7, i64 %8, %struct._object* %9)
  store i32 %call6, i32* %res, align 4
  %10 = load i32, i32* %res, align 4
  %cmp7 = icmp eq i32 %10, -1
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.12

land.lhs.true.8:                                  ; preds = %if.end.5
  %call9 = call %struct._object* @PyErr_Occurred()
  %tobool10 = icmp ne %struct._object* %call9, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %land.lhs.true.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %land.lhs.true.8, %if.end.5
  %11 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.11, %if.then.4, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_sq_delitem(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, i64, %struct._object*)*, align 8
  %i = alloca i64, align 8
  %res = alloca i32, align 4
  %arg = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, i64, %struct._object*)*
  store i32 (%struct._object*, i64, %struct._object*)* %1, i32 (%struct._object*, i64, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %arg, align 8
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = load %struct._object*, %struct._object** %arg, align 8
  %call1 = call i64 @getindex(%struct._object* %6, %struct._object* %7)
  store i64 %call1, i64* %i, align 8
  %8 = load i64, i64* %i, align 8
  %cmp = icmp eq i64 %8, -1
  br i1 %cmp, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %9 = load i32 (%struct._object*, i64, %struct._object*)*, i32 (%struct._object*, i64, %struct._object*)** %func, align 8
  %10 = load %struct._object*, %struct._object** %self.addr, align 8
  %11 = load i64, i64* %i, align 8
  %call6 = call i32 %9(%struct._object* %10, i64 %11, %struct._object* null)
  store i32 %call6, i32* %res, align 4
  %12 = load i32, i32* %res, align 4
  %cmp7 = icmp eq i32 %12, -1
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.12

land.lhs.true.8:                                  ; preds = %if.end.5
  %call9 = call %struct._object* @PyErr_Occurred()
  %tobool10 = icmp ne %struct._object* %call9, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %land.lhs.true.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %land.lhs.true.8, %if.end.5
  %13 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %13, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.11, %if.then.4, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

; Function Attrs: nounwind uwtable
define internal i32 @slot_sq_contains(%struct._object* %self, %struct._object* %value) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i32 -1, i32* %result, align 4
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @lookup_maybe(%struct._object* %0, %struct._Py_Identifier* @slot_sq_contains.PyId___contains__)
  store %struct._object* %call, %struct._object** %func, align 8
  %1 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else.35

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %2)
  store %struct._object* %call1, %struct._object** %args, align 8
  %3 = load %struct._object*, %struct._object** %args, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %res, align 8
  br label %if.end.8

if.else:                                          ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %func, align 8
  %5 = load %struct._object*, %struct._object** %args, align 8
  %call4 = call %struct._object* @PyObject_Call(%struct._object* %4, %struct._object* %5, %struct._object* null)
  store %struct._object* %call4, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else.7

if.then.6:                                        ; preds = %do.body
  br label %if.end

if.else.7:                                        ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else.7, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.8

if.end.8:                                         ; preds = %do.end, %if.then.3
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.8
  %13 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %15, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %18(%struct._object* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %20 = load %struct._object*, %struct._object** %res, align 8
  %cmp20 = icmp ne %struct._object* %20, null
  br i1 %cmp20, label %if.then.21, label %if.end.34

if.then.21:                                       ; preds = %do.end.19
  %21 = load %struct._object*, %struct._object** %res, align 8
  %call22 = call i32 @PyObject_IsTrue(%struct._object* %21)
  store i32 %call22, i32* %result, align 4
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.21
  %22 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp24, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %24, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %27(%struct._object* %28)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %if.end.34

if.end.34:                                        ; preds = %do.end.33, %do.end.19
  br label %if.end.40

if.else.35:                                       ; preds = %entry
  %call36 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call36, null
  br i1 %tobool, label %if.end.39, label %if.then.37

if.then.37:                                       ; preds = %if.else.35
  %29 = load %struct._object*, %struct._object** %self.addr, align 8
  %30 = load %struct._object*, %struct._object** %value.addr, align 8
  %call38 = call i64 @_PySequence_IterSearch(%struct._object* %29, %struct._object* %30, i32 3)
  %conv = trunc i64 %call38 to i32
  store i32 %conv, i32* %result, align 4
  br label %if.end.39

if.end.39:                                        ; preds = %if.then.37, %if.else.35
  br label %if.end.40

if.end.40:                                        ; preds = %if.end.39, %if.end.34
  %31 = load i32, i32* %result, align 4
  ret i32 %31
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_objobjproc(%struct._object* %self, %struct._object* %args, i8* %wrapped) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*)*, align 8
  %res = alloca i32, align 4
  %value = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to i32 (%struct._object*, %struct._object*)*
  store i32 (%struct._object*, %struct._object*)* %1, i32 (%struct._object*, %struct._object*)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %value, align 8
  %6 = load i32 (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %value, align 8
  %call1 = call i32 %6(%struct._object* %7, %struct._object* %8)
  store i32 %call1, i32* %res, align 4
  %9 = load i32, i32* %res, align 4
  %cmp = icmp eq i32 %9, -1
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %call2 = call %struct._object* @PyErr_Occurred()
  %tobool3 = icmp ne %struct._object* %call2, null
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %if.end
  %10 = load i32, i32* %res, align 4
  %conv = sext i32 %10 to i64
  %call5 = call %struct._object* @PyBool_FromLong(i64 %conv)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.4, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @lookup_method(%struct._object* %self, %struct._Py_Identifier* %attrid) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %attrid.addr = alloca %struct._Py_Identifier*, align 8
  %res = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._Py_Identifier* %attrid, %struct._Py_Identifier** %attrid.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._Py_Identifier*, %struct._Py_Identifier** %attrid.addr, align 8
  %call = call %struct._object* @lookup_maybe(%struct._object* %0, %struct._Py_Identifier* %1)
  store %struct._object* %call, %struct._object** %res, align 8
  %2 = load %struct._object*, %struct._object** %res, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %4 = load %struct._Py_Identifier*, %struct._Py_Identifier** %attrid.addr, align 8
  %object = getelementptr inbounds %struct._Py_Identifier, %struct._Py_Identifier* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %object, align 8
  call void @PyErr_SetObject(%struct._object* %3, %struct._object* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %struct._object*, %struct._object** %res, align 8
  ret %struct._object* %6
}

declare %struct._object* @PyEval_CallObjectWithKeywords(%struct._object*, %struct._object*, %struct._object*) #1

declare %struct._object* @PyErr_Occurred() #1

declare void @PyErr_SetObject(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @check_num_args(%struct._object* %ob, i32 %n) #0 {
entry:
  %retval = alloca i32, align 4
  %ob.addr = alloca %struct._object*, align 8
  %n.addr = alloca i32, align 4
  store %struct._object* %ob, %struct._object** %ob.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  %0 = load %struct._object*, %struct._object** %ob.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyTuple_Type
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.173, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %n.addr, align 4
  %conv = sext i32 %3 to i64
  %4 = load %struct._object*, %struct._object** %ob.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1
  %6 = load i64, i64* %ob_size, align 8
  %cmp1 = icmp eq i64 %conv, %6
  br i1 %cmp1, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %8 = load i32, i32* %n.addr, align 4
  %9 = load %struct._object*, %struct._object** %ob.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyVarObject*
  %ob_size5 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %10, i32 0, i32 1
  %11 = load i64, i64* %ob_size5, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.174, i32 0, i32 0), i32 %8, i64 %11)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

declare i64 @PyLong_AsSsize_t(%struct._object*) #1

declare %struct._object* @PyLong_FromSsize_t(i64) #1

declare %struct._object* @PyObject_Call(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_tp_getattro(%struct._object* %self, %struct._object* %name) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_method(%struct._object* %0, %struct._Py_Identifier* @PyId___getattribute__, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_attribute(%struct._object* %self, %struct._object* %attr, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %attr.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %descr = alloca %struct._object*, align 8
  %f = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %attr, %struct._object** %attr.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._object* null, %struct._object** %descr, align 8
  %0 = load %struct._object*, %struct._object** %attr.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 32
  %2 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %2, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %3 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %cmp = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %3, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %4 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %f, align 8
  %5 = load %struct._object*, %struct._object** %attr.addr, align 8
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %9 = bitcast %struct._typeobject* %8 to %struct._object*
  %call = call %struct._object* %4(%struct._object* %5, %struct._object* %6, %struct._object* %9)
  store %struct._object* %call, %struct._object** %descr, align 8
  %10 = load %struct._object*, %struct._object** %descr, align 8
  %cmp2 = icmp eq %struct._object* %10, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %if.then
  %11 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %11, %struct._object** %attr.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %12 = load %struct._object*, %struct._object** %attr.addr, align 8
  %13 = load %struct._object*, %struct._object** %name.addr, align 8
  %call5 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %12, %struct._object* %13, i8* null)
  store %struct._object* %call5, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %14 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %14, %struct._object** %_py_xdecref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp6 = icmp ne %struct._object* %15, null
  br i1 %cmp6, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %do.body
  br label %do.body.8

do.body.8:                                        ; preds = %if.then.7
  %16 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %do.body.8
  br label %if.end.13

if.else.11:                                       ; preds = %do.body.8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.11, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %if.end.14

if.end.14:                                        ; preds = %do.end, %do.body
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  %23 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.15, %if.then.3
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

declare i32 @PyErr_ExceptionMatches(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_method(%struct._object* %o, %struct._Py_Identifier* %nameid, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %nameid.addr = alloca %struct._Py_Identifier*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %args = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8
  store %struct._Py_Identifier* %nameid, %struct._Py_Identifier** %nameid.addr, align 8
  store i8* %format, i8** %format.addr, align 8
  store %struct._object* null, %struct._object** %func, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %arraydecay2 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay2)
  %0 = load %struct._object*, %struct._object** %o.addr, align 8
  %1 = load %struct._Py_Identifier*, %struct._Py_Identifier** %nameid.addr, align 8
  %call = call %struct._object* @lookup_maybe(%struct._object* %0, %struct._Py_Identifier* %1)
  store %struct._object* %call, %struct._object** %func, align 8
  %2 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %call5 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call5, null
  br i1 %tobool, label %if.end, label %if.then.6

if.then.6:                                        ; preds = %if.then
  %3 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %4 = load %struct._Py_Identifier*, %struct._Py_Identifier** %nameid.addr, align 8
  %object = getelementptr inbounds %struct._Py_Identifier, %struct._Py_Identifier* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %object, align 8
  call void @PyErr_SetObject(%struct._object* %3, %struct._object* %5)
  br label %if.end

if.end:                                           ; preds = %if.then.6, %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %entry
  %6 = load i8*, i8** %format.addr, align 8
  %tobool8 = icmp ne i8* %6, null
  br i1 %tobool8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.7
  %7 = load i8*, i8** %format.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv = sext i8 %8 to i32
  %tobool9 = icmp ne i32 %conv, 0
  br i1 %tobool9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %land.lhs.true
  %9 = load i8*, i8** %format.addr, align 8
  %arraydecay11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %call12 = call %struct._object* @Py_VaBuildValue(i8* %9, %struct.__va_list_tag* %arraydecay11)
  store %struct._object* %call12, %struct._object** %args, align 8
  br label %if.end.14

if.else:                                          ; preds = %land.lhs.true, %if.end.7
  %call13 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call13, %struct._object** %args, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.10
  %arraydecay15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %arraydecay1516 = bitcast %struct.__va_list_tag* %arraydecay15 to i8*
  call void @llvm.va_end(i8* %arraydecay1516)
  %10 = load %struct._object*, %struct._object** %args, align 8
  %cmp17 = icmp eq %struct._object* %10, null
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.14
  %11 = load %struct._object*, %struct._object** %func, align 8
  %12 = load %struct._object*, %struct._object** %args, align 8
  %call21 = call %struct._object* @PyObject_Call(%struct._object* %11, %struct._object* %12, %struct._object* null)
  store %struct._object* %call21, %struct._object** %retval1, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.20
  %13 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec, 0
  br i1 %cmp22, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body
  br label %if.end.26

if.else.25:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end

do.end:                                           ; preds = %if.end.26
  br label %do.body.27

do.body.27:                                       ; preds = %do.end
  %20 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp28, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %22, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.27
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.27
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %25(%struct._object* %26)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  %27 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %27, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.38, %if.then.19, %if.end
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #2

declare %struct._object* @Py_VaBuildValue(i8*, %struct.__va_list_tag*) #1

declare %struct._object* @PyObject_CallFunctionObjArgs(%struct._object*, ...) #1

declare i32 @PyArg_UnpackTuple(%struct._object*, i8*, i64, i64, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @hackcheck(%struct._object* %self, i32 (%struct._object*, %struct._object*, %struct._object*)* %func, i8* %what) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %func.addr = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %what.addr = alloca i8*, align 8
  %type = alloca %struct._typeobject*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %func, i32 (%struct._object*, %struct._object*, %struct._object*)** %func.addr, align 8
  store i8* %what, i8** %what.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tobool = icmp ne %struct._typeobject* %2, null
  br i1 %tobool, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 512
  %tobool1 = icmp ne i64 %and, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %5 = phi i1 [ false, %while.cond ], [ %tobool1, %land.rhs ]
  br i1 %5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %6 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 30
  %7 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %7, %struct._typeobject** %type, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %8 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tobool2 = icmp ne %struct._typeobject* %8, null
  br i1 %tobool2, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.end
  %9 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_setattro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 17
  %10 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_setattro, align 8
  %11 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func.addr, align 8
  %cmp = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %10, %11
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %13 = load i8*, i8** %what.addr, align 8
  %14 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 1
  %15 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %12, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.178, i32 0, i32 0), i8* %13, i8* %15)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %while.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_richcmpfunc(%struct._object* %self, %struct._object* %args, i8* %wrapped, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %wrapped.addr = alloca i8*, align 8
  %op.addr = alloca i32, align 4
  %func = alloca %struct._object* (%struct._object*, %struct._object*, i32)*, align 8
  %other = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i8* %wrapped, i8** %wrapped.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load i8*, i8** %wrapped.addr, align 8
  %1 = bitcast i8* %0 to %struct._object* (%struct._object*, %struct._object*, i32)*
  store %struct._object* (%struct._object*, %struct._object*, i32)* %1, %struct._object* (%struct._object*, %struct._object*, i32)** %func, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 @check_num_args(%struct._object* %2, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %other, align 8
  %6 = load %struct._object* (%struct._object*, %struct._object*, i32)*, %struct._object* (%struct._object*, %struct._object*, i32)** %func, align 8
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %other, align 8
  %9 = load i32, i32* %op.addr, align 4
  %call1 = call %struct._object* %6(%struct._object* %7, %struct._object* %8, i32 %9)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %10
}

declare %struct._object* @PySeqIter_New(%struct._object*) #1

declare void @PyErr_SetNone(%struct._object*) #1

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #1

declare void @PyErr_WriteUnraisable(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @method_is_overloaded(%struct._object* %left, %struct._object* %right, %struct._Py_Identifier* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._Py_Identifier*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %ok = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  store %struct._Py_Identifier* %name, %struct._Py_Identifier** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = bitcast %struct._typeobject* %1 to %struct._object*
  %3 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %2, %struct._Py_Identifier* %3)
  store %struct._object* %call, %struct._object** %b, align 8
  %4 = load %struct._object*, %struct._object** %b, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @PyErr_Clear()
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %7 = bitcast %struct._typeobject* %6 to %struct._object*
  %8 = load %struct._Py_Identifier*, %struct._Py_Identifier** %name.addr, align 8
  %call2 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %7, %struct._Py_Identifier* %8)
  store %struct._object* %call2, %struct._object** %a, align 8
  %9 = load %struct._object*, %struct._object** %a, align 8
  %cmp3 = icmp eq %struct._object* %9, null
  br i1 %cmp3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %if.end
  call void @PyErr_Clear()
  br label %do.body

do.body:                                          ; preds = %if.then.4
  %10 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store i32 1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %17 = load %struct._object*, %struct._object** %a, align 8
  %18 = load %struct._object*, %struct._object** %b, align 8
  %call10 = call i32 @PyObject_RichCompareBool(%struct._object* %17, %struct._object* %18, i32 3)
  store i32 %call10, i32* %ok, align 4
  br label %do.body.11

do.body.11:                                       ; preds = %if.end.9
  %19 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp12, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt13, align 8
  %dec14 = add i64 %21, -1
  store i64 %dec14, i64* %ob_refcnt13, align 8
  %cmp15 = icmp ne i64 %dec14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20

if.else.17:                                       ; preds = %do.body.11
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  call void %24(%struct._object* %25)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  br label %do.body.22

do.body.22:                                       ; preds = %do.end.21
  %26 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp23, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %28, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.22
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.22
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %31(%struct._object* %32)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  %33 = load i32, i32* %ok, align 4
  %cmp33 = icmp slt i32 %33, 0
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %do.end.32
  call void @PyErr_Clear()
  store i32 0, i32* %retval
  br label %return

if.end.35:                                        ; preds = %do.end.32
  %34 = load i32, i32* %ok, align 4
  store i32 %34, i32* %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.then.34, %do.end, %if.then
  %35 = load i32, i32* %retval
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_maybe(%struct._object* %o, %struct._Py_Identifier* %nameid, i8* %format, ...) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %nameid.addr = alloca %struct._Py_Identifier*, align 8
  %format.addr = alloca i8*, align 8
  %va = alloca [1 x %struct.__va_list_tag], align 16
  %args = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8
  store %struct._Py_Identifier* %nameid, %struct._Py_Identifier** %nameid.addr, align 8
  store i8* %format, i8** %format.addr, align 8
  store %struct._object* null, %struct._object** %func, align 8
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %arraydecay2 = bitcast %struct.__va_list_tag* %arraydecay to i8*
  call void @llvm.va_start(i8* %arraydecay2)
  %0 = load %struct._object*, %struct._object** %o.addr, align 8
  %1 = load %struct._Py_Identifier*, %struct._Py_Identifier** %nameid.addr, align 8
  %call = call %struct._object* @lookup_maybe(%struct._object* %0, %struct._Py_Identifier* %1)
  store %struct._object* %call, %struct._object** %func, align 8
  %2 = load %struct._object*, %struct._object** %func, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*
  call void @llvm.va_end(i8* %arraydecay34)
  %call5 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call5, null
  br i1 %tobool, label %if.end, label %if.then.6

if.then.6:                                        ; preds = %if.then
  %3 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %entry
  %4 = load i8*, i8** %format.addr, align 8
  %tobool8 = icmp ne i8* %4, null
  br i1 %tobool8, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.7
  %5 = load i8*, i8** %format.addr, align 8
  %6 = load i8, i8* %5, align 1
  %conv = sext i8 %6 to i32
  %tobool9 = icmp ne i32 %conv, 0
  br i1 %tobool9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %land.lhs.true
  %7 = load i8*, i8** %format.addr, align 8
  %arraydecay11 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %call12 = call %struct._object* @Py_VaBuildValue(i8* %7, %struct.__va_list_tag* %arraydecay11)
  store %struct._object* %call12, %struct._object** %args, align 8
  br label %if.end.14

if.else:                                          ; preds = %land.lhs.true, %if.end.7
  %call13 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call13, %struct._object** %args, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.10
  %arraydecay15 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %va, i32 0, i32 0
  %arraydecay1516 = bitcast %struct.__va_list_tag* %arraydecay15 to i8*
  call void @llvm.va_end(i8* %arraydecay1516)
  %8 = load %struct._object*, %struct._object** %args, align 8
  %cmp17 = icmp eq %struct._object* %8, null
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.14
  %9 = load %struct._object*, %struct._object** %func, align 8
  %10 = load %struct._object*, %struct._object** %args, align 8
  %call21 = call %struct._object* @PyObject_Call(%struct._object* %9, %struct._object* %10, %struct._object* null)
  store %struct._object* %call21, %struct._object** %retval1, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.20
  %11 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec, 0
  br i1 %cmp22, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body
  br label %if.end.26

if.else.25:                                       ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end

do.end:                                           ; preds = %if.end.26
  br label %do.body.27

do.body.27:                                       ; preds = %do.end
  %18 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp28, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %20, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.27
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.27
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %23(%struct._object* %24)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  %25 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %25, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.38, %if.then.19, %if.end, %if.then.6
  %26 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %26
}

declare i32 @PyObject_RichCompareBool(%struct._object*, %struct._object*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @slot_nb_power_binary(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %do_other = alloca i32, align 4
  %r = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp = icmp ne %struct._typeobject* %1, %3
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp3 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp3, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_as_number5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number5, align 8
  %nb_power = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 5
  %10 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power, align 8
  %cmp6 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %10, @slot_nb_power
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %11 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp6, %land.rhs ]
  %land.ext = zext i1 %11 to i32
  store i32 %land.ext, i32* %do_other, align 4
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_as_number8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 10
  %14 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number8, align 8
  %cmp9 = icmp ne %struct.PyNumberMethods* %14, null
  br i1 %cmp9, label %land.lhs.true.10, label %if.end.49

land.lhs.true.10:                                 ; preds = %land.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_as_number12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 10
  %17 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number12, align 8
  %nb_power13 = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %17, i32 0, i32 5
  %18 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %nb_power13, align 8
  %cmp14 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %18, @slot_nb_power
  br i1 %cmp14, label %if.then, label %if.end.49

if.then:                                          ; preds = %land.lhs.true.10
  %19 = load i32, i32* %do_other, align 4
  %tobool = icmp ne i32 %19, 0
  br i1 %tobool, label %land.lhs.true.15, label %if.end.30

land.lhs.true.15:                                 ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool18 = icmp ne i32 %call, 0
  br i1 %tobool18, label %land.lhs.true.19, label %if.end.30

land.lhs.true.19:                                 ; preds = %land.lhs.true.15
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call20 = call i32 @method_is_overloaded(%struct._object* %24, %struct._object* %25, %struct._Py_Identifier* @slot_nb_power_binary.rop_id)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.30

if.then.22:                                       ; preds = %land.lhs.true.19
  %26 = load %struct._object*, %struct._object** %other.addr, align 8
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %call23 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %26, %struct._Py_Identifier* @slot_nb_power_binary.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %27)
  store %struct._object* %call23, %struct._object** %r, align 8
  %28 = load %struct._object*, %struct._object** %r, align 8
  %cmp24 = icmp ne %struct._object* %28, @_Py_NotImplementedStruct
  br i1 %cmp24, label %if.then.25, label %if.end

if.then.25:                                       ; preds = %if.then.22
  %29 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %29, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.22
  br label %do.body

do.body:                                          ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %do.body
  br label %if.end.29

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else, %if.then.27
  br label %do.end

do.end:                                           ; preds = %if.end.29
  store i32 0, i32* %do_other, align 4
  br label %if.end.30

if.end.30:                                        ; preds = %do.end, %land.lhs.true.19, %land.lhs.true.15, %if.then
  %37 = load %struct._object*, %struct._object** %self.addr, align 8
  %38 = load %struct._object*, %struct._object** %other.addr, align 8
  %call31 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %37, %struct._Py_Identifier* @slot_nb_power_binary.op_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %38)
  store %struct._object* %call31, %struct._object** %r, align 8
  %39 = load %struct._object*, %struct._object** %r, align 8
  %cmp32 = icmp ne %struct._object* %39, @_Py_NotImplementedStruct
  br i1 %cmp32, label %if.then.36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.30
  %40 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %42 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %cmp35 = icmp eq %struct._typeobject* %41, %43
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %lor.lhs.false, %if.end.30
  %44 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %lor.lhs.false
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %45 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp39, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %47, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %50(%struct._object* %51)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %land.lhs.true.10, %land.end
  %52 = load i32, i32* %do_other, align 4
  %tobool50 = icmp ne i32 %52, 0
  br i1 %tobool50, label %if.then.51, label %if.end.53

if.then.51:                                       ; preds = %if.end.49
  %53 = load %struct._object*, %struct._object** %other.addr, align 8
  %54 = load %struct._object*, %struct._object** %self.addr, align 8
  %call52 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @call_maybe(%struct._object* %53, %struct._Py_Identifier* @slot_nb_power_binary.rop_id, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* %54)
  store %struct._object* %call52, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %if.end.49
  %55 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %55, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.53, %if.then.51, %if.then.36, %if.then.25
  %56 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %56
}

declare i32 @PyObject_IsTrue(%struct._object*) #1

declare %struct._object* @PyBool_FromLong(i64) #1

declare i64 @PyNumber_AsSsize_t(%struct._object*, %struct._object*) #1

declare %struct._object* @PyLong_FromLong(i64) #1

; Function Attrs: nounwind uwtable
define internal i64 @getindex(%struct._object* %self, %struct._object* %arg) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %sq = alloca %struct.PySequenceMethods*, align 8
  %n = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8
  %1 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %0, %struct._object* %1)
  store i64 %call, i64* %i, align 8
  %2 = load i64, i64* %i, align 8
  %cmp = icmp eq i64 %2, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i64, i64* %i, align 8
  %cmp2 = icmp slt i64 %3, 0
  br i1 %cmp2, label %if.then.3, label %if.end.14

if.then.3:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 11
  %6 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8
  store %struct.PySequenceMethods* %6, %struct.PySequenceMethods** %sq, align 8
  %7 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %sq, align 8
  %tobool4 = icmp ne %struct.PySequenceMethods* %7, null
  br i1 %tobool4, label %land.lhs.true.5, label %if.end.13

land.lhs.true.5:                                  ; preds = %if.then.3
  %8 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %sq, align 8
  %sq_length = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %8, i32 0, i32 0
  %9 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length, align 8
  %tobool6 = icmp ne i64 (%struct._object*)* %9, null
  br i1 %tobool6, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %land.lhs.true.5
  %10 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %sq, align 8
  %sq_length8 = getelementptr inbounds %struct.PySequenceMethods, %struct.PySequenceMethods* %10, i32 0, i32 0
  %11 = load i64 (%struct._object*)*, i64 (%struct._object*)** %sq_length8, align 8
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %call9 = call i64 %11(%struct._object* %12)
  store i64 %call9, i64* %n, align 8
  %13 = load i64, i64* %n, align 8
  %cmp10 = icmp slt i64 %13, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.7
  store i64 -1, i64* %retval
  br label %return

if.end.12:                                        ; preds = %if.then.7
  %14 = load i64, i64* %n, align 8
  %15 = load i64, i64* %i, align 8
  %add = add i64 %15, %14
  store i64 %add, i64* %i, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %land.lhs.true.5, %if.then.3
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  %16 = load i64, i64* %i, align 8
  store i64 %16, i64* %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then.11, %if.then
  %17 = load i64, i64* %retval
  ret i64 %17
}

declare i64 @_PySequence_IterSearch(%struct._object*, %struct._object*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @recurse_down_subclasses(%struct._typeobject* %type, %struct._object* %name, i32 (%struct._typeobject*, i8*)* %callback, i8* %data) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._object*, align 8
  %callback.addr = alloca i32 (%struct._typeobject*, i8*)*, align 8
  %data.addr = alloca i8*, align 8
  %subclass = alloca %struct._typeobject*, align 8
  %ref = alloca %struct._object*, align 8
  %subclasses = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store i32 (%struct._typeobject*, i8*)* %callback, i32 (%struct._typeobject*, i8*)** %callback.addr, align 8
  store i8* %data, i8** %data.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_subclasses = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 43
  %1 = load %struct._object*, %struct._object** %tp_subclasses, align 8
  store %struct._object* %1, %struct._object** %subclasses, align 8
  %2 = load %struct._object*, %struct._object** %subclasses, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.16, %if.then.11, %if.then.4, %if.end
  %3 = load %struct._object*, %struct._object** %subclasses, align 8
  %call = call i32 @PyDict_Next(%struct._object* %3, i64* %i, %struct._object** null, %struct._object** %ref)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._object*, %struct._object** %ref, align 8
  %5 = bitcast %struct._object* %4 to %struct._PyWeakReference*
  %wr_object = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %5, i32 0, i32 1
  %6 = load %struct._object*, %struct._object** %wr_object, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %cmp1 = icmp sgt i64 %7, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %8 = load %struct._object*, %struct._object** %ref, align 8
  %9 = bitcast %struct._object* %8 to %struct._PyWeakReference*
  %wr_object2 = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %9, i32 0, i32 1
  %10 = load %struct._object*, %struct._object** %wr_object2, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %10, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %11 = bitcast %struct._object* %cond to %struct._typeobject*
  store %struct._typeobject* %11, %struct._typeobject** %subclass, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %13 = bitcast %struct._typeobject* %12 to %struct._object*
  %cmp3 = icmp eq %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %cond.end
  br label %while.cond

if.end.5:                                         ; preds = %cond.end
  %14 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 31
  %15 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %15, %struct._object** %dict, align 8
  %16 = load %struct._object*, %struct._object** %dict, align 8
  %cmp6 = icmp ne %struct._object* %16, null
  br i1 %cmp6, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %if.end.5
  %17 = load %struct._object*, %struct._object** %dict, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 19
  %19 = load i64, i64* %tp_flags, align 8
  %and = and i64 %19, 536870912
  %cmp7 = icmp ne i64 %and, 0
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.12

land.lhs.true.8:                                  ; preds = %land.lhs.true
  %20 = load %struct._object*, %struct._object** %dict, align 8
  %21 = load %struct._object*, %struct._object** %name.addr, align 8
  %call9 = call %struct._object* @PyDict_GetItem(%struct._object* %20, %struct._object* %21)
  %cmp10 = icmp ne %struct._object* %call9, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %land.lhs.true.8
  br label %while.cond

if.end.12:                                        ; preds = %land.lhs.true.8, %land.lhs.true, %if.end.5
  %22 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %23 = load %struct._object*, %struct._object** %name.addr, align 8
  %24 = load i32 (%struct._typeobject*, i8*)*, i32 (%struct._typeobject*, i8*)** %callback.addr, align 8
  %25 = load i8*, i8** %data.addr, align 8
  %call13 = call i32 @update_subclasses(%struct._typeobject* %22, %struct._object* %23, i32 (%struct._typeobject*, i8*)* %24, i8* %25)
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.15, %if.then
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal %struct.wrapperbase* @update_one_slot(%struct._typeobject* %type, %struct.wrapperbase* %p) #0 {
entry:
  %retval = alloca %struct.wrapperbase*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %p.addr = alloca %struct.wrapperbase*, align 8
  %descr = alloca %struct._object*, align 8
  %d = alloca %struct.PyWrapperDescrObject*, align 8
  %generic = alloca i8*, align 8
  %specific = alloca i8*, align 8
  %use_generic = alloca i32, align 4
  %offset = alloca i32, align 4
  %ptr = alloca i8**, align 8
  %tptr = alloca i8**, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct.wrapperbase* %p, %struct.wrapperbase** %p.addr, align 8
  store i8* null, i8** %generic, align 8
  store i8* null, i8** %specific, align 8
  store i32 0, i32* %use_generic, align 4
  %0 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %offset1 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %0, i32 0, i32 1
  %1 = load i32, i32* %offset1, align 4
  store i32 %1, i32* %offset, align 4
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = load i32, i32* %offset, align 4
  %call = call i8** @slotptr(%struct._typeobject* %2, i32 %3)
  store i8** %call, i8*** %ptr, align 8
  %4 = load i8**, i8*** %ptr, align 8
  %cmp = icmp eq i8** %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then
  %5 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %incdec.ptr = getelementptr %struct.wrapperbase, %struct.wrapperbase* %5, i32 1
  store %struct.wrapperbase* %incdec.ptr, %struct.wrapperbase** %p.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %6 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %offset2 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %6, i32 0, i32 1
  %7 = load i32, i32* %offset2, align 4
  %8 = load i32, i32* %offset, align 4
  %cmp3 = icmp eq i32 %7, %8
  br i1 %cmp3, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %9 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  store %struct.wrapperbase* %9, %struct.wrapperbase** %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body.4

do.body.4:                                        ; preds = %do.cond.55, %if.end
  %10 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %11 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %name_strobj = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %11, i32 0, i32 6
  %12 = load %struct._object*, %struct._object** %name_strobj, align 8
  %call5 = call %struct._object* @_PyType_Lookup(%struct._typeobject* %10, %struct._object* %12)
  store %struct._object* %call5, %struct._object** %descr, align 8
  %13 = load %struct._object*, %struct._object** %descr, align 8
  %cmp6 = icmp eq %struct._object* %13, null
  br i1 %cmp6, label %if.then.7, label %if.end.11

if.then.7:                                        ; preds = %do.body.4
  %14 = load i8**, i8*** %ptr, align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_iternext = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 26
  %16 = bitcast %struct._object* (%struct._object*)** %tp_iternext to i8**
  %cmp8 = icmp eq i8** %14, %16
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.then.7
  store i8* bitcast (%struct._object* (%struct._object*)* @_PyObject_NextNotImplemented to i8*), i8** %specific, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.then.7
  br label %do.cond.55

if.end.11:                                        ; preds = %do.body.4
  %17 = load %struct._object*, %struct._object** %descr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp12 = icmp eq %struct._typeobject* %18, @PyWrapperDescr_Type
  br i1 %cmp12, label %land.lhs.true, label %if.else.36

land.lhs.true:                                    ; preds = %if.end.11
  %19 = load %struct._object*, %struct._object** %descr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyWrapperDescrObject*
  %d_base = getelementptr inbounds %struct.PyWrapperDescrObject, %struct.PyWrapperDescrObject* %20, i32 0, i32 1
  %21 = load %struct.wrapperbase*, %struct.wrapperbase** %d_base, align 8
  %name_strobj13 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %21, i32 0, i32 6
  %22 = load %struct._object*, %struct._object** %name_strobj13, align 8
  %23 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %name_strobj14 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %23, i32 0, i32 6
  %24 = load %struct._object*, %struct._object** %name_strobj14, align 8
  %cmp15 = icmp eq %struct._object* %22, %24
  br i1 %cmp15, label %if.then.16, label %if.else.36

if.then.16:                                       ; preds = %land.lhs.true
  %25 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %26 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %name_strobj17 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %26, i32 0, i32 6
  %27 = load %struct._object*, %struct._object** %name_strobj17, align 8
  %call18 = call i8** @resolve_slotdups(%struct._typeobject* %25, %struct._object* %27)
  store i8** %call18, i8*** %tptr, align 8
  %28 = load i8**, i8*** %tptr, align 8
  %cmp19 = icmp eq i8** %28, null
  br i1 %cmp19, label %if.then.21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.16
  %29 = load i8**, i8*** %tptr, align 8
  %30 = load i8**, i8*** %ptr, align 8
  %cmp20 = icmp eq i8** %29, %30
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %lor.lhs.false, %if.then.16
  %31 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %function = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %31, i32 0, i32 2
  %32 = load i8*, i8** %function, align 8
  store i8* %32, i8** %generic, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %if.then.21, %lor.lhs.false
  %33 = load %struct._object*, %struct._object** %descr, align 8
  %34 = bitcast %struct._object* %33 to %struct.PyWrapperDescrObject*
  store %struct.PyWrapperDescrObject* %34, %struct.PyWrapperDescrObject** %d, align 8
  %35 = load %struct.PyWrapperDescrObject*, %struct.PyWrapperDescrObject** %d, align 8
  %d_base23 = getelementptr inbounds %struct.PyWrapperDescrObject, %struct.PyWrapperDescrObject* %35, i32 0, i32 1
  %36 = load %struct.wrapperbase*, %struct.wrapperbase** %d_base23, align 8
  %wrapper = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %36, i32 0, i32 3
  %37 = load %struct._object* (%struct._object*, %struct._object*, i8*)*, %struct._object* (%struct._object*, %struct._object*, i8*)** %wrapper, align 8
  %38 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %wrapper24 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %38, i32 0, i32 3
  %39 = load %struct._object* (%struct._object*, %struct._object*, i8*)*, %struct._object* (%struct._object*, %struct._object*, i8*)** %wrapper24, align 8
  %cmp25 = icmp eq %struct._object* (%struct._object*, %struct._object*, i8*)* %37, %39
  br i1 %cmp25, label %land.lhs.true.26, label %if.end.35

land.lhs.true.26:                                 ; preds = %if.end.22
  %40 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %41 = load %struct.PyWrapperDescrObject*, %struct.PyWrapperDescrObject** %d, align 8
  %42 = bitcast %struct.PyWrapperDescrObject* %41 to %struct.PyDescrObject*
  %d_type = getelementptr inbounds %struct.PyDescrObject, %struct.PyDescrObject* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %d_type, align 8
  %call27 = call i32 @PyType_IsSubtype(%struct._typeobject* %40, %struct._typeobject* %43)
  %tobool = icmp ne i32 %call27, 0
  br i1 %tobool, label %if.then.28, label %if.end.35

if.then.28:                                       ; preds = %land.lhs.true.26
  %44 = load i8*, i8** %specific, align 8
  %cmp29 = icmp eq i8* %44, null
  br i1 %cmp29, label %if.then.32, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %if.then.28
  %45 = load i8*, i8** %specific, align 8
  %46 = load %struct.PyWrapperDescrObject*, %struct.PyWrapperDescrObject** %d, align 8
  %d_wrapped = getelementptr inbounds %struct.PyWrapperDescrObject, %struct.PyWrapperDescrObject* %46, i32 0, i32 2
  %47 = load i8*, i8** %d_wrapped, align 8
  %cmp31 = icmp eq i8* %45, %47
  br i1 %cmp31, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %lor.lhs.false.30, %if.then.28
  %48 = load %struct.PyWrapperDescrObject*, %struct.PyWrapperDescrObject** %d, align 8
  %d_wrapped33 = getelementptr inbounds %struct.PyWrapperDescrObject, %struct.PyWrapperDescrObject* %48, i32 0, i32 2
  %49 = load i8*, i8** %d_wrapped33, align 8
  store i8* %49, i8** %specific, align 8
  br label %if.end.34

if.else:                                          ; preds = %lor.lhs.false.30
  store i32 1, i32* %use_generic, align 4
  br label %if.end.34

if.end.34:                                        ; preds = %if.else, %if.then.32
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %land.lhs.true.26, %if.end.22
  br label %if.end.54

if.else.36:                                       ; preds = %land.lhs.true, %if.end.11
  %50 = load %struct._object*, %struct._object** %descr, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %cmp38 = icmp eq %struct._typeobject* %51, @PyCFunction_Type
  br i1 %cmp38, label %land.lhs.true.39, label %if.else.45

land.lhs.true.39:                                 ; preds = %if.else.36
  %52 = load %struct._object*, %struct._object** %descr, align 8
  %53 = bitcast %struct._object* %52 to %struct.PyCFunctionObject*
  %m_ml = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %53, i32 0, i32 1
  %54 = load %struct.PyMethodDef*, %struct.PyMethodDef** %m_ml, align 8
  %ml_meth = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %54, i32 0, i32 1
  %55 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %ml_meth, align 8
  %cmp40 = icmp eq %struct._object* (%struct._object*, %struct._object*)* %55, bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @tp_new_wrapper to %struct._object* (%struct._object*, %struct._object*)*)
  br i1 %cmp40, label %land.lhs.true.41, label %if.else.45

land.lhs.true.41:                                 ; preds = %land.lhs.true.39
  %56 = load i8**, i8*** %ptr, align 8
  %57 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 37
  %58 = bitcast %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new to i8**
  %cmp42 = icmp eq i8** %56, %58
  br i1 %cmp42, label %if.then.43, label %if.else.45

if.then.43:                                       ; preds = %land.lhs.true.41
  %59 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_new44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 37
  %60 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new44, align 8
  %61 = bitcast %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %60 to i8*
  store i8* %61, i8** %specific, align 8
  br label %if.end.53

if.else.45:                                       ; preds = %land.lhs.true.41, %land.lhs.true.39, %if.else.36
  %62 = load %struct._object*, %struct._object** %descr, align 8
  %cmp46 = icmp eq %struct._object* %62, @_Py_NoneStruct
  br i1 %cmp46, label %land.lhs.true.47, label %if.else.50

land.lhs.true.47:                                 ; preds = %if.else.45
  %63 = load i8**, i8*** %ptr, align 8
  %64 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_hash = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 13
  %65 = bitcast i64 (%struct._object*)** %tp_hash to i8**
  %cmp48 = icmp eq i8** %63, %65
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %land.lhs.true.47
  store i8* bitcast (i64 (%struct._object*)* @PyObject_HashNotImplemented to i8*), i8** %specific, align 8
  br label %if.end.52

if.else.50:                                       ; preds = %land.lhs.true.47, %if.else.45
  store i32 1, i32* %use_generic, align 4
  %66 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %function51 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %66, i32 0, i32 2
  %67 = load i8*, i8** %function51, align 8
  store i8* %67, i8** %generic, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.50, %if.then.49
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.43
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %if.end.35
  br label %do.cond.55

do.cond.55:                                       ; preds = %if.end.54, %if.end.10
  %68 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  %incdec.ptr56 = getelementptr %struct.wrapperbase, %struct.wrapperbase* %68, i32 1
  store %struct.wrapperbase* %incdec.ptr56, %struct.wrapperbase** %p.addr, align 8
  %offset57 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %incdec.ptr56, i32 0, i32 1
  %69 = load i32, i32* %offset57, align 4
  %70 = load i32, i32* %offset, align 4
  %cmp58 = icmp eq i32 %69, %70
  br i1 %cmp58, label %do.body.4, label %do.end.59

do.end.59:                                        ; preds = %do.cond.55
  %71 = load i8*, i8** %specific, align 8
  %tobool60 = icmp ne i8* %71, null
  br i1 %tobool60, label %land.lhs.true.61, label %if.else.64

land.lhs.true.61:                                 ; preds = %do.end.59
  %72 = load i32, i32* %use_generic, align 4
  %tobool62 = icmp ne i32 %72, 0
  br i1 %tobool62, label %if.else.64, label %if.then.63

if.then.63:                                       ; preds = %land.lhs.true.61
  %73 = load i8*, i8** %specific, align 8
  %74 = load i8**, i8*** %ptr, align 8
  store i8* %73, i8** %74, align 8
  br label %if.end.65

if.else.64:                                       ; preds = %land.lhs.true.61, %do.end.59
  %75 = load i8*, i8** %generic, align 8
  %76 = load i8**, i8*** %ptr, align 8
  store i8* %75, i8** %76, align 8
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.64, %if.then.63
  %77 = load %struct.wrapperbase*, %struct.wrapperbase** %p.addr, align 8
  store %struct.wrapperbase* %77, %struct.wrapperbase** %retval
  br label %return

return:                                           ; preds = %if.end.65, %do.end
  %78 = load %struct.wrapperbase*, %struct.wrapperbase** %retval
  ret %struct.wrapperbase* %78
}

; Function Attrs: nounwind uwtable
define internal i8** @slotptr(%struct._typeobject* %type, i32 %ioffset) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %ioffset.addr = alloca i32, align 4
  %ptr = alloca i8*, align 8
  %offset = alloca i64, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i32 %ioffset, i32* %ioffset.addr, align 4
  %0 = load i32, i32* %ioffset.addr, align 4
  %conv = sext i32 %0 to i64
  store i64 %conv, i64* %offset, align 8
  %1 = load i64, i64* %offset, align 8
  %cmp = icmp uge i64 %1, 696
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_sequence = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 11
  %3 = load %struct.PySequenceMethods*, %struct.PySequenceMethods** %tp_as_sequence, align 8
  %4 = bitcast %struct.PySequenceMethods* %3 to i8*
  store i8* %4, i8** %ptr, align 8
  %5 = load i64, i64* %offset, align 8
  %sub = sub i64 %5, 696
  store i64 %sub, i64* %offset, align 8
  br label %if.end.13

if.else:                                          ; preds = %entry
  %6 = load i64, i64* %offset, align 8
  %cmp2 = icmp uge i64 %6, 672
  br i1 %cmp2, label %if.then.4, label %if.else.6

if.then.4:                                        ; preds = %if.else
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_mapping = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 12
  %8 = load %struct.PyMappingMethods*, %struct.PyMappingMethods** %tp_as_mapping, align 8
  %9 = bitcast %struct.PyMappingMethods* %8 to i8*
  store i8* %9, i8** %ptr, align 8
  %10 = load i64, i64* %offset, align 8
  %sub5 = sub i64 %10, 672
  store i64 %sub5, i64* %offset, align 8
  br label %if.end.12

if.else.6:                                        ; preds = %if.else
  %11 = load i64, i64* %offset, align 8
  %cmp7 = icmp uge i64 %11, 400
  br i1 %cmp7, label %if.then.9, label %if.else.11

if.then.9:                                        ; preds = %if.else.6
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 10
  %13 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %14 = bitcast %struct.PyNumberMethods* %13 to i8*
  store i8* %14, i8** %ptr, align 8
  %15 = load i64, i64* %offset, align 8
  %sub10 = sub i64 %15, 400
  store i64 %sub10, i64* %offset, align 8
  br label %if.end

if.else.11:                                       ; preds = %if.else.6
  %16 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %17 = bitcast %struct._typeobject* %16 to i8*
  store i8* %17, i8** %ptr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.11, %if.then.9
  br label %if.end.12

if.end.12:                                        ; preds = %if.end, %if.then.4
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.then
  %18 = load i8*, i8** %ptr, align 8
  %cmp14 = icmp ne i8* %18, null
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.13
  %19 = load i64, i64* %offset, align 8
  %20 = load i8*, i8** %ptr, align 8
  %add.ptr = getelementptr i8, i8* %20, i64 %19
  store i8* %add.ptr, i8** %ptr, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end.13
  %21 = load i8*, i8** %ptr, align 8
  %22 = bitcast i8* %21 to i8**
  ret i8** %22
}

declare %struct._object* @_PyObject_NextNotImplemented(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i8** @resolve_slotdups(%struct._typeobject* %type, %struct._object* %name) #0 {
entry:
  %retval = alloca i8**, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %name.addr = alloca %struct._object*, align 8
  %p = alloca %struct.wrapperbase*, align 8
  %pp = alloca %struct.wrapperbase**, align 8
  %res = alloca i8**, align 8
  %ptr = alloca i8**, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** @resolve_slotdups.pname, align 8
  %1 = load %struct._object*, %struct._object** %name.addr, align 8
  %cmp = icmp ne %struct._object* %0, %1
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %name.addr, align 8
  store %struct._object* %2, %struct._object** @resolve_slotdups.pname, align 8
  store %struct.wrapperbase** getelementptr inbounds ([10 x %struct.wrapperbase*], [10 x %struct.wrapperbase*]* @resolve_slotdups.ptrs, i32 0, i32 0), %struct.wrapperbase*** %pp, align 8
  store %struct.wrapperbase* getelementptr inbounds ([87 x %struct.wrapperbase], [87 x %struct.wrapperbase]* @slotdefs, i32 0, i32 0), %struct.wrapperbase** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %3, i32 0, i32 6
  %4 = load %struct._object*, %struct._object** %name_strobj, align 8
  %tobool = icmp ne %struct._object* %4, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj1 = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %5, i32 0, i32 6
  %6 = load %struct._object*, %struct._object** %name_strobj1, align 8
  %7 = load %struct._object*, %struct._object** %name.addr, align 8
  %cmp2 = icmp eq %struct._object* %6, %7
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %for.body
  %8 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %9 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %incdec.ptr = getelementptr %struct.wrapperbase*, %struct.wrapperbase** %9, i32 1
  store %struct.wrapperbase** %incdec.ptr, %struct.wrapperbase*** %pp, align 8
  store %struct.wrapperbase* %8, %struct.wrapperbase** %9, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.3, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %incdec.ptr4 = getelementptr %struct.wrapperbase, %struct.wrapperbase* %10, i32 1
  store %struct.wrapperbase* %incdec.ptr4, %struct.wrapperbase** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  store %struct.wrapperbase* null, %struct.wrapperbase** %11, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %for.end, %entry
  store i8** null, i8*** %res, align 8
  store %struct.wrapperbase** getelementptr inbounds ([10 x %struct.wrapperbase*], [10 x %struct.wrapperbase*]* @resolve_slotdups.ptrs, i32 0, i32 0), %struct.wrapperbase*** %pp, align 8
  br label %for.cond.6

for.cond.6:                                       ; preds = %for.inc.16, %if.end.5
  %12 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %13 = load %struct.wrapperbase*, %struct.wrapperbase** %12, align 8
  %tobool7 = icmp ne %struct.wrapperbase* %13, null
  br i1 %tobool7, label %for.body.8, label %for.end.18

for.body.8:                                       ; preds = %for.cond.6
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %15 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %16 = load %struct.wrapperbase*, %struct.wrapperbase** %15, align 8
  %offset = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %16, i32 0, i32 1
  %17 = load i32, i32* %offset, align 4
  %call = call i8** @slotptr(%struct._typeobject* %14, i32 %17)
  store i8** %call, i8*** %ptr, align 8
  %18 = load i8**, i8*** %ptr, align 8
  %cmp9 = icmp eq i8** %18, null
  br i1 %cmp9, label %if.then.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.8
  %19 = load i8**, i8*** %ptr, align 8
  %20 = load i8*, i8** %19, align 8
  %cmp10 = icmp eq i8* %20, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %lor.lhs.false, %for.body.8
  br label %for.inc.16

if.end.12:                                        ; preds = %lor.lhs.false
  %21 = load i8**, i8*** %res, align 8
  %cmp13 = icmp ne i8** %21, null
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.12
  store i8** null, i8*** %retval
  br label %return

if.end.15:                                        ; preds = %if.end.12
  %22 = load i8**, i8*** %ptr, align 8
  store i8** %22, i8*** %res, align 8
  br label %for.inc.16

for.inc.16:                                       ; preds = %if.end.15, %if.then.11
  %23 = load %struct.wrapperbase**, %struct.wrapperbase*** %pp, align 8
  %incdec.ptr17 = getelementptr %struct.wrapperbase*, %struct.wrapperbase** %23, i32 1
  store %struct.wrapperbase** %incdec.ptr17, %struct.wrapperbase*** %pp, align 8
  br label %for.cond.6

for.end.18:                                       ; preds = %for.cond.6
  %24 = load i8**, i8*** %res, align 8
  store i8** %24, i8*** %retval
  br label %return

return:                                           ; preds = %for.end.18, %if.then.14
  %25 = load i8**, i8*** %retval
  ret i8** %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @tp_new_wrapper(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %type = alloca %struct._typeobject*, align 8
  %subtype = alloca %struct._typeobject*, align 8
  %staticbase = alloca %struct._typeobject*, align 8
  %arg0 = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags, align 8
  %and = and i64 %3, 2147483648
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.187, i32 0, i32 0)) #8
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct._typeobject*
  store %struct._typeobject* %5, %struct._typeobject** %type, align 8
  %6 = load %struct._object*, %struct._object** %args.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_flags3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 19
  %8 = load i64, i64* %tp_flags3, align 8
  %and4 = and i64 %8, 67108864
  %cmp5 = icmp ne i64 %and4, 0
  br i1 %cmp5, label %lor.lhs.false.6, label %if.then.8

lor.lhs.false.6:                                  ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %args.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %10, i32 0, i32 1
  %11 = load i64, i64* %ob_size, align 8
  %cmp7 = icmp slt i64 %11, 1
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %lor.lhs.false.6, %if.end
  %12 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %13 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 1
  %14 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %12, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.188, i32 0, i32 0), i8* %14)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false.6
  %15 = load %struct._object*, %struct._object** %args.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %17 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %17, %struct._object** %arg0, align 8
  %18 = load %struct._object*, %struct._object** %arg0, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %tp_flags11 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19
  %20 = load i64, i64* %tp_flags11, align 8
  %and12 = and i64 %20, 2147483648
  %cmp13 = icmp ne i64 %and12, 0
  br i1 %cmp13, label %if.end.19, label %if.then.14

if.then.14:                                       ; preds = %if.end.9
  %21 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %22 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name15 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 1
  %23 = load i8*, i8** %tp_name15, align 8
  %24 = load %struct._object*, %struct._object** %arg0, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_name17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 1
  %26 = load i8*, i8** %tp_name17, align 8
  %call18 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %21, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.189, i32 0, i32 0), i8* %23, i8* %26)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %if.end.9
  %27 = load %struct._object*, %struct._object** %arg0, align 8
  %28 = bitcast %struct._object* %27 to %struct._typeobject*
  store %struct._typeobject* %28, %struct._typeobject** %subtype, align 8
  %29 = load %struct._typeobject*, %struct._typeobject** %subtype, align 8
  %30 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call20 = call i32 @PyType_IsSubtype(%struct._typeobject* %29, %struct._typeobject* %30)
  %tobool = icmp ne i32 %call20, 0
  br i1 %tobool, label %if.end.27, label %if.then.21

if.then.21:                                       ; preds = %if.end.19
  %31 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %32 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 1
  %33 = load i8*, i8** %tp_name22, align 8
  %34 = load %struct._typeobject*, %struct._typeobject** %subtype, align 8
  %tp_name23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 1
  %35 = load i8*, i8** %tp_name23, align 8
  %36 = load %struct._typeobject*, %struct._typeobject** %subtype, align 8
  %tp_name24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 1
  %37 = load i8*, i8** %tp_name24, align 8
  %38 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 1
  %39 = load i8*, i8** %tp_name25, align 8
  %call26 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %31, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.190, i32 0, i32 0), i8* %33, i8* %35, i8* %37, i8* %39)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.19
  %40 = load %struct._typeobject*, %struct._typeobject** %subtype, align 8
  store %struct._typeobject* %40, %struct._typeobject** %staticbase, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.27
  %41 = load %struct._typeobject*, %struct._typeobject** %staticbase, align 8
  %tobool28 = icmp ne %struct._typeobject* %41, null
  br i1 %tobool28, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %42 = load %struct._typeobject*, %struct._typeobject** %staticbase, align 8
  %tp_new = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 37
  %43 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new, align 8
  %cmp29 = icmp eq %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %43, @slot_tp_new
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %44 = phi i1 [ false, %while.cond ], [ %cmp29, %land.rhs ]
  br i1 %44, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %45 = load %struct._typeobject*, %struct._typeobject** %staticbase, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 30
  %46 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %46, %struct._typeobject** %staticbase, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %47 = load %struct._typeobject*, %struct._typeobject** %staticbase, align 8
  %tobool30 = icmp ne %struct._typeobject* %47, null
  br i1 %tobool30, label %land.lhs.true, label %if.end.40

land.lhs.true:                                    ; preds = %while.end
  %48 = load %struct._typeobject*, %struct._typeobject** %staticbase, align 8
  %tp_new31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 37
  %49 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new31, align 8
  %50 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_new32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 37
  %51 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new32, align 8
  %cmp33 = icmp ne %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* %49, %51
  br i1 %cmp33, label %if.then.34, label %if.end.40

if.then.34:                                       ; preds = %land.lhs.true
  %52 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %53 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_name35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 1
  %54 = load i8*, i8** %tp_name35, align 8
  %55 = load %struct._typeobject*, %struct._typeobject** %subtype, align 8
  %tp_name36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 1
  %56 = load i8*, i8** %tp_name36, align 8
  %57 = load %struct._typeobject*, %struct._typeobject** %staticbase, align 8
  %cmp37 = icmp eq %struct._typeobject* %57, null
  br i1 %cmp37, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.34
  br label %cond.end

cond.false:                                       ; preds = %if.then.34
  %58 = load %struct._typeobject*, %struct._typeobject** %staticbase, align 8
  %tp_name38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 1
  %59 = load i8*, i8** %tp_name38, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i32 0, i32 0), %cond.true ], [ %59, %cond.false ]
  %call39 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %52, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.191, i32 0, i32 0), i8* %54, i8* %56, i8* %cond)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %land.lhs.true, %while.end
  %60 = load %struct._object*, %struct._object** %args.addr, align 8
  %61 = load %struct._object*, %struct._object** %args.addr, align 8
  %62 = bitcast %struct._object* %61 to %struct.PyVarObject*
  %ob_size41 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %62, i32 0, i32 1
  %63 = load i64, i64* %ob_size41, align 8
  %call42 = call %struct._object* @PyTuple_GetSlice(%struct._object* %60, i64 1, i64 %63)
  store %struct._object* %call42, %struct._object** %args.addr, align 8
  %64 = load %struct._object*, %struct._object** %args.addr, align 8
  %cmp43 = icmp eq %struct._object* %64, null
  br i1 %cmp43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.40
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.45:                                        ; preds = %if.end.40
  %65 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_new46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 37
  %66 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** %tp_new46, align 8
  %67 = load %struct._typeobject*, %struct._typeobject** %subtype, align 8
  %68 = load %struct._object*, %struct._object** %args.addr, align 8
  %69 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call47 = call %struct._object* %66(%struct._typeobject* %67, %struct._object* %68, %struct._object* %69)
  store %struct._object* %call47, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.45
  %70 = load %struct._object*, %struct._object** %args.addr, align 8
  store %struct._object* %70, %struct._object** %_py_decref_tmp, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0
  %72 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %72, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp48 = icmp ne i64 %dec, 0
  br i1 %cmp48, label %if.then.49, label %if.else

if.then.49:                                       ; preds = %do.body
  br label %if.end.51

if.else:                                          ; preds = %do.body
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 4
  %75 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %75(%struct._object* %76)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else, %if.then.49
  br label %do.end

do.end:                                           ; preds = %if.end.51
  %77 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %77, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.44, %cond.end, %if.then.21, %if.then.14, %if.then.8
  %78 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %78
}

declare %struct._object* @PyTuple_GetSlice(%struct._object*, i64, i64) #1

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #6

declare void @PyDict_Clear(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @mro_external(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %type = alloca %struct._typeobject*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._typeobject*
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call = call %struct._object* @mro_implementation(%struct._typeobject* %2)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_subclasses(%struct._typeobject* %type, %struct._object* %args_ignored) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args_ignored.addr = alloca %struct._object*, align 8
  %list = alloca %struct._object*, align 8
  %raw = alloca %struct._object*, align 8
  %ref = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args_ignored, %struct._object** %args_ignored.addr, align 8
  %call = call %struct._object* @PyList_New(i64 0)
  store %struct._object* %call, %struct._object** %list, align 8
  %0 = load %struct._object*, %struct._object** %list, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_subclasses = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 43
  %2 = load %struct._object*, %struct._object** %tp_subclasses, align 8
  store %struct._object* %2, %struct._object** %raw, align 8
  %3 = load %struct._object*, %struct._object** %raw, align 8
  %cmp1 = icmp eq %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %4, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.17, %if.end.3
  %5 = load %struct._object*, %struct._object** %raw, align 8
  %call4 = call i32 @PyDict_Next(%struct._object* %5, i64* %i, %struct._object** null, %struct._object** %ref)
  %tobool = icmp ne i32 %call4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load %struct._object*, %struct._object** %ref, align 8
  %7 = bitcast %struct._object* %6 to %struct._PyWeakReference*
  %wr_object = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %7, i32 0, i32 1
  %8 = load %struct._object*, %struct._object** %wr_object, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %cmp5 = icmp sgt i64 %9, 0
  br i1 %cmp5, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %10 = load %struct._object*, %struct._object** %ref, align 8
  %11 = bitcast %struct._object* %10 to %struct._PyWeakReference*
  %wr_object6 = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %11, i32 0, i32 1
  %12 = load %struct._object*, %struct._object** %wr_object6, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %12, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %ref, align 8
  %13 = load %struct._object*, %struct._object** %ref, align 8
  %cmp7 = icmp ne %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp7, label %if.then.8, label %if.end.17

if.then.8:                                        ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %list, align 8
  %15 = load %struct._object*, %struct._object** %ref, align 8
  %call9 = call i32 @PyList_Append(%struct._object* %14, %struct._object* %15)
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.then.8
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %16 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt12, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt12, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.then.8
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %cond.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %23 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

return:                                           ; preds = %while.end, %do.end, %if.then.2, %if.then
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_prepare(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* @PyDict_New()
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type___instancecheck__(%struct._object* %type, %struct._object* %inst) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %inst.addr = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %inst, %struct._object** %inst.addr, align 8
  %0 = load %struct._object*, %struct._object** %inst.addr, align 8
  %1 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call i32 @_PyObject_RealIsInstance(%struct._object* %0, %struct._object* %1)
  switch i32 %call, label %sw.default [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

sw.default:                                       ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc2 = add i64 %3, 1
  store i64 %inc2, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.1, %sw.bb
  %4 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type___subclasscheck__(%struct._object* %type, %struct._object* %inst) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %inst.addr = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %inst, %struct._object** %inst.addr, align 8
  %0 = load %struct._object*, %struct._object** %inst.addr, align 8
  %1 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call i32 @_PyObject_RealIsSubclass(%struct._object* %0, %struct._object* %1)
  switch i32 %call, label %sw.default [
    i32 -1, label %sw.bb
    i32 0, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

sw.default:                                       ; preds = %entry
  %3 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc2 = add i64 %3, 1
  store i64 %inc2, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb.1, %sw.bb
  %4 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_dir(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %dict, align 8
  %0 = load %struct._object*, %struct._object** %dict, align 8
  %cmp = icmp ne %struct._object* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %dict, align 8
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call i32 @merge_class_dict(%struct._object* %1, %struct._object* %2)
  %cmp2 = icmp eq i32 %call1, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._object*, %struct._object** %dict, align 8
  %call3 = call %struct._object* @PyDict_Keys(%struct._object* %3)
  store %struct._object* %call3, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %4, %struct._object** %_py_xdecref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp4 = icmp ne %struct._object* %5, null
  br i1 %cmp4, label %if.then.5, label %if.end.10

if.then.5:                                        ; preds = %do.body
  br label %do.body.6

do.body.6:                                        ; preds = %if.then.5
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body.6
  br label %if.end.9

if.else:                                          ; preds = %do.body.6
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %do.body
  br label %do.end.11

do.end.11:                                        ; preds = %if.end.10
  %13 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_sizeof(%struct._object* %self, %struct._object* %args_unused) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args_unused.addr = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %type = alloca %struct._typeobject*, align 8
  %et = alloca %struct._heaptypeobject*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args_unused, %struct._object** %args_unused.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._typeobject*
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags, align 8
  %and = and i64 %3, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %4 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %5 = bitcast %struct._typeobject* %4 to %struct._heaptypeobject*
  store %struct._heaptypeobject* %5, %struct._heaptypeobject** %et, align 8
  store i64 824, i64* %size, align 8
  %6 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_cached_keys = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %6, i32 0, i32 8
  %7 = load %struct._dictkeysobject*, %struct._dictkeysobject** %ht_cached_keys, align 8
  %tobool1 = icmp ne %struct._dictkeysobject* %7, null
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %8 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_cached_keys3 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %8, i32 0, i32 8
  %9 = load %struct._dictkeysobject*, %struct._dictkeysobject** %ht_cached_keys3, align 8
  %call = call i64 @_PyDict_KeysSize(%struct._dictkeysobject* %9)
  %10 = load i64, i64* %size, align 8
  %add = add i64 %10, %call
  store i64 %add, i64* %size, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  br label %if.end.4

if.else:                                          ; preds = %entry
  store i64 400, i64* %size, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.end
  %11 = load i64, i64* %size, align 8
  %call5 = call %struct._object* @PyLong_FromSsize_t(i64 %11)
  ret %struct._object* %call5
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @mro_implementation(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %ok = alloca i32, align 4
  %bases = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %to_merge = alloca %struct._object*, align 8
  %bases_aslist = alloca %struct._object*, align 8
  %base = alloca %struct._object*, align 8
  %parentMRO = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp22 = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  %_py_decref_tmp48 = alloca %struct._object*, align 8
  %_py_decref_tmp65 = alloca %struct._object*, align 8
  %_py_decref_tmp78 = alloca %struct._object*, align 8
  %_py_decref_tmp91 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call i32 @PyType_Ready(%struct._typeobject* %2)
  %cmp1 = icmp slt i32 %call, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 40
  %4 = load %struct._object*, %struct._object** %tp_bases, align 8
  store %struct._object* %4, %struct._object** %bases, align 8
  %5 = load %struct._object*, %struct._object** %bases, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1
  %7 = load i64, i64* %ob_size, align 8
  store i64 %7, i64* %n, align 8
  %8 = load i64, i64* %n, align 8
  %add = add i64 %8, 1
  %call4 = call %struct._object* @PyList_New(i64 %add)
  store %struct._object* %call4, %struct._object** %to_merge, align 8
  %9 = load %struct._object*, %struct._object** %to_merge, align 8
  %cmp5 = icmp eq %struct._object* %9, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %10 = load i64, i64* %i, align 8
  %11 = load i64, i64* %n, align 8
  %cmp8 = icmp slt i64 %10, %11
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i64, i64* %i, align 8
  %13 = load %struct._object*, %struct._object** %bases, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %14, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %12
  %15 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %15, %struct._object** %base, align 8
  %16 = load %struct._object*, %struct._object** %base, align 8
  %17 = bitcast %struct._object* %16 to %struct._typeobject*
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 41
  %18 = load %struct._object*, %struct._object** %tp_mro, align 8
  %call9 = call %struct._object* @PySequence_List(%struct._object* %18)
  store %struct._object* %call9, %struct._object** %parentMRO, align 8
  %19 = load %struct._object*, %struct._object** %parentMRO, align 8
  %cmp10 = icmp eq %struct._object* %19, null
  br i1 %cmp10, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %20 = load %struct._object*, %struct._object** %to_merge, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.14

if.else:                                          ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.15:                                        ; preds = %for.body
  %27 = load %struct._object*, %struct._object** %parentMRO, align 8
  %28 = load i64, i64* %i, align 8
  %29 = load %struct._object*, %struct._object** %to_merge, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyListObject*
  %ob_item16 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %30, i32 0, i32 1
  %31 = load %struct._object**, %struct._object*** %ob_item16, align 8
  %arrayidx17 = getelementptr %struct._object*, %struct._object** %31, i64 %28
  store %struct._object* %27, %struct._object** %arrayidx17, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.15
  %32 = load i64, i64* %i, align 8
  %inc = add i64 %32, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %33 = load %struct._object*, %struct._object** %bases, align 8
  %call18 = call %struct._object* @PySequence_List(%struct._object* %33)
  store %struct._object* %call18, %struct._object** %bases_aslist, align 8
  %34 = load %struct._object*, %struct._object** %bases_aslist, align 8
  %cmp19 = icmp eq %struct._object* %34, null
  br i1 %cmp19, label %if.then.20, label %if.end.32

if.then.20:                                       ; preds = %for.end
  br label %do.body.21

do.body.21:                                       ; preds = %if.then.20
  %35 = load %struct._object*, %struct._object** %to_merge, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp22, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt23, align 8
  %dec24 = add i64 %37, -1
  store i64 %dec24, i64* %ob_refcnt23, align 8
  %cmp25 = icmp ne i64 %dec24, 0
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %do.body.21
  br label %if.end.30

if.else.27:                                       ; preds = %do.body.21
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  call void %40(%struct._object* %41)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.32:                                        ; preds = %for.end
  %42 = load %struct._object*, %struct._object** %bases_aslist, align 8
  %call33 = call i32 @check_duplicates(%struct._object* %42)
  %cmp34 = icmp slt i32 %call33, 0
  br i1 %cmp34, label %if.then.35, label %if.end.58

if.then.35:                                       ; preds = %if.end.32
  br label %do.body.36

do.body.36:                                       ; preds = %if.then.35
  %43 = load %struct._object*, %struct._object** %to_merge, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp37, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %45, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.36
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.36
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %48(%struct._object* %49)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  br label %do.body.47

do.body.47:                                       ; preds = %do.end.46
  %50 = load %struct._object*, %struct._object** %bases_aslist, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp48, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_refcnt49 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt49, align 8
  %dec50 = add i64 %52, -1
  store i64 %dec50, i64* %ob_refcnt49, align 8
  %cmp51 = icmp ne i64 %dec50, 0
  br i1 %cmp51, label %if.then.52, label %if.else.53

if.then.52:                                       ; preds = %do.body.47
  br label %if.end.56

if.else.53:                                       ; preds = %do.body.47
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_type54 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type54, align 8
  %tp_dealloc55 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc55, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  call void %55(%struct._object* %56)
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.53, %if.then.52
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.58:                                        ; preds = %if.end.32
  %57 = load %struct._object*, %struct._object** %bases_aslist, align 8
  %58 = load i64, i64* %n, align 8
  %59 = load %struct._object*, %struct._object** %to_merge, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyListObject*
  %ob_item59 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %60, i32 0, i32 1
  %61 = load %struct._object**, %struct._object*** %ob_item59, align 8
  %arrayidx60 = getelementptr %struct._object*, %struct._object** %61, i64 %58
  store %struct._object* %57, %struct._object** %arrayidx60, align 8
  %62 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %63 = bitcast %struct._typeobject* %62 to %struct._object*
  %call61 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.208, i32 0, i32 0), %struct._object* %63)
  store %struct._object* %call61, %struct._object** %result, align 8
  %64 = load %struct._object*, %struct._object** %result, align 8
  %cmp62 = icmp eq %struct._object* %64, null
  br i1 %cmp62, label %if.then.63, label %if.end.75

if.then.63:                                       ; preds = %if.end.58
  br label %do.body.64

do.body.64:                                       ; preds = %if.then.63
  %65 = load %struct._object*, %struct._object** %to_merge, align 8
  store %struct._object* %65, %struct._object** %_py_decref_tmp65, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  %ob_refcnt66 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 0
  %67 = load i64, i64* %ob_refcnt66, align 8
  %dec67 = add i64 %67, -1
  store i64 %dec67, i64* %ob_refcnt66, align 8
  %cmp68 = icmp ne i64 %dec67, 0
  br i1 %cmp68, label %if.then.69, label %if.else.70

if.then.69:                                       ; preds = %do.body.64
  br label %if.end.73

if.else.70:                                       ; preds = %do.body.64
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  %ob_type71 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 1
  %69 = load %struct._typeobject*, %struct._typeobject** %ob_type71, align 8
  %tp_dealloc72 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 4
  %70 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc72, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  call void %70(%struct._object* %71)
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.70, %if.then.69
  br label %do.end.74

do.end.74:                                        ; preds = %if.end.73
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.75:                                        ; preds = %if.end.58
  %72 = load %struct._object*, %struct._object** %result, align 8
  %73 = load %struct._object*, %struct._object** %to_merge, align 8
  %call76 = call i32 @pmerge(%struct._object* %72, %struct._object* %73)
  store i32 %call76, i32* %ok, align 4
  br label %do.body.77

do.body.77:                                       ; preds = %if.end.75
  %74 = load %struct._object*, %struct._object** %to_merge, align 8
  store %struct._object* %74, %struct._object** %_py_decref_tmp78, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_refcnt79 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt79, align 8
  %dec80 = add i64 %76, -1
  store i64 %dec80, i64* %ob_refcnt79, align 8
  %cmp81 = icmp ne i64 %dec80, 0
  br i1 %cmp81, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %do.body.77
  br label %if.end.86

if.else.83:                                       ; preds = %do.body.77
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 4
  %79 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  call void %79(%struct._object* %80)
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  %81 = load i32, i32* %ok, align 4
  %cmp88 = icmp slt i32 %81, 0
  br i1 %cmp88, label %if.then.89, label %if.end.101

if.then.89:                                       ; preds = %do.end.87
  br label %do.body.90

do.body.90:                                       ; preds = %if.then.89
  %82 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp91, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8
  %ob_refcnt92 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt92, align 8
  %dec93 = add i64 %84, -1
  store i64 %dec93, i64* %ob_refcnt92, align 8
  %cmp94 = icmp ne i64 %dec93, 0
  br i1 %cmp94, label %if.then.95, label %if.else.96

if.then.95:                                       ; preds = %do.body.90
  br label %if.end.99

if.else.96:                                       ; preds = %do.body.90
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8
  %ob_type97 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type97, align 8
  %tp_dealloc98 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc98, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp91, align 8
  call void %87(%struct._object* %88)
  br label %if.end.99

if.end.99:                                        ; preds = %if.else.96, %if.then.95
  br label %do.end.100

do.end.100:                                       ; preds = %if.end.99
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.101:                                       ; preds = %do.end.87
  %89 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %89, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.101, %do.end.100, %do.end.74, %do.end.57, %do.end.31, %do.end, %if.then.6, %if.then.2
  %90 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %90
}

declare %struct._object* @PyList_New(i64) #1

declare %struct._object* @PySequence_List(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @check_duplicates(%struct._object* %list) #0 {
entry:
  %retval = alloca i32, align 4
  %list.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %n = alloca i64, align 8
  %o = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %list, %struct._object** %list.addr, align 8
  %0 = load %struct._object*, %struct._object** %list.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc.15, %entry
  %3 = load i64, i64* %i, align 8
  %4 = load i64, i64* %n, align 8
  %cmp = icmp slt i64 %3, %4
  br i1 %cmp, label %for.body, label %for.end.17

for.body:                                         ; preds = %for.cond
  %5 = load i64, i64* %i, align 8
  %6 = load %struct._object*, %struct._object** %list.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %7, i32 0, i32 1
  %8 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %8, i64 %5
  %9 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %9, %struct._object** %o, align 8
  %10 = load i64, i64* %i, align 8
  %add = add i64 %10, 1
  store i64 %add, i64* %j, align 8
  br label %for.cond.1

for.cond.1:                                       ; preds = %for.inc, %for.body
  %11 = load i64, i64* %j, align 8
  %12 = load i64, i64* %n, align 8
  %cmp2 = icmp slt i64 %11, %12
  br i1 %cmp2, label %for.body.3, label %for.end

for.body.3:                                       ; preds = %for.cond.1
  %13 = load i64, i64* %j, align 8
  %14 = load %struct._object*, %struct._object** %list.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyListObject*
  %ob_item4 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %15, i32 0, i32 1
  %16 = load %struct._object**, %struct._object*** %ob_item4, align 8
  %arrayidx5 = getelementptr %struct._object*, %struct._object** %16, i64 %13
  %17 = load %struct._object*, %struct._object** %arrayidx5, align 8
  %18 = load %struct._object*, %struct._object** %o, align 8
  %cmp6 = icmp eq %struct._object* %17, %18
  br i1 %cmp6, label %if.then, label %if.end.14

if.then:                                          ; preds = %for.body.3
  %19 = load %struct._object*, %struct._object** %o, align 8
  %call = call %struct._object* @class_name(%struct._object* %19)
  store %struct._object* %call, %struct._object** %o, align 8
  %20 = load %struct._object*, %struct._object** %o, align 8
  %cmp7 = icmp ne %struct._object* %20, null
  br i1 %cmp7, label %if.then.8, label %if.else.12

if.then.8:                                        ; preds = %if.then
  %21 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %22 = load %struct._object*, %struct._object** %o, align 8
  %call9 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %21, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.209, i32 0, i32 0), %struct._object* %22)
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %23 = load %struct._object*, %struct._object** %o, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %25, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %28(%struct._object* %29)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.13

if.else.12:                                       ; preds = %if.then
  %30 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %30, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.210, i32 0, i32 0))
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.12, %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %for.body.3
  br label %for.inc

for.inc:                                          ; preds = %if.end.14
  %31 = load i64, i64* %j, align 8
  %inc = add i64 %31, 1
  store i64 %inc, i64* %j, align 8
  br label %for.cond.1

for.end:                                          ; preds = %for.cond.1
  br label %for.inc.15

for.inc.15:                                       ; preds = %for.end
  %32 = load i64, i64* %i, align 8
  %inc16 = add i64 %32, 1
  store i64 %inc16, i64* %i, align 8
  br label %for.cond

for.end.17:                                       ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end.17, %if.end.13
  %33 = load i32, i32* %retval
  ret i32 %33
}

declare %struct._object* @Py_BuildValue(i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @pmerge(%struct._object* %acc, %struct._object* %to_merge) #0 {
entry:
  %retval = alloca i32, align 4
  %acc.addr = alloca %struct._object*, align 8
  %to_merge.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %j = alloca i64, align 8
  %to_merge_size = alloca i64, align 8
  %empty_cnt = alloca i64, align 8
  %remain = alloca i32*, align 8
  %ok = alloca i32, align 4
  %candidate = alloca %struct._object*, align 8
  %cur_list = alloca %struct._object*, align 8
  %j_lst = alloca %struct._object*, align 8
  %j_lst39 = alloca %struct._object*, align 8
  store %struct._object* %acc, %struct._object** %acc.addr, align 8
  store %struct._object* %to_merge, %struct._object** %to_merge.addr, align 8
  %0 = load %struct._object*, %struct._object** %to_merge.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %to_merge_size, align 8
  %3 = load i64, i64* %to_merge_size, align 8
  %mul = mul i64 4, %3
  %call = call i8* @PyMem_Malloc(i64 %mul)
  %4 = bitcast i8* %call to i32*
  store i32* %4, i32** %remain, align 8
  %5 = load i32*, i32** %remain, align 8
  %cmp = icmp eq i32* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load i64, i64* %i, align 8
  %7 = load i64, i64* %to_merge_size, align 8
  %cmp2 = icmp slt i64 %6, %7
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load i64, i64* %i, align 8
  %9 = load i32*, i32** %remain, align 8
  %arrayidx = getelementptr i32, i32* %9, i64 %8
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i64, i64* %i, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %again

again:                                            ; preds = %for.end.59, %for.end
  store i64 0, i64* %empty_cnt, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.60, %again
  %11 = load i64, i64* %i, align 8
  %12 = load i64, i64* %to_merge_size, align 8
  %cmp4 = icmp slt i64 %11, %12
  br i1 %cmp4, label %for.body.5, label %for.end.62

for.body.5:                                       ; preds = %for.cond.3
  %13 = load i64, i64* %i, align 8
  %14 = load %struct._object*, %struct._object** %to_merge.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %15, i32 0, i32 1
  %16 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx6 = getelementptr %struct._object*, %struct._object** %16, i64 %13
  %17 = load %struct._object*, %struct._object** %arrayidx6, align 8
  store %struct._object* %17, %struct._object** %cur_list, align 8
  %18 = load i64, i64* %i, align 8
  %19 = load i32*, i32** %remain, align 8
  %arrayidx7 = getelementptr i32, i32* %19, i64 %18
  %20 = load i32, i32* %arrayidx7, align 4
  %conv = sext i32 %20 to i64
  %21 = load %struct._object*, %struct._object** %cur_list, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyVarObject*
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1
  %23 = load i64, i64* %ob_size8, align 8
  %cmp9 = icmp sge i64 %conv, %23
  br i1 %cmp9, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %for.body.5
  %24 = load i64, i64* %empty_cnt, align 8
  %inc12 = add i64 %24, 1
  store i64 %inc12, i64* %empty_cnt, align 8
  br label %for.inc.60

if.end.13:                                        ; preds = %for.body.5
  %25 = load i64, i64* %i, align 8
  %26 = load i32*, i32** %remain, align 8
  %arrayidx14 = getelementptr i32, i32* %26, i64 %25
  %27 = load i32, i32* %arrayidx14, align 4
  %idxprom = sext i32 %27 to i64
  %28 = load %struct._object*, %struct._object** %cur_list, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyListObject*
  %ob_item15 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %29, i32 0, i32 1
  %30 = load %struct._object**, %struct._object*** %ob_item15, align 8
  %arrayidx16 = getelementptr %struct._object*, %struct._object** %30, i64 %idxprom
  %31 = load %struct._object*, %struct._object** %arrayidx16, align 8
  store %struct._object* %31, %struct._object** %candidate, align 8
  store i64 0, i64* %j, align 8
  br label %for.cond.17

for.cond.17:                                      ; preds = %for.inc.27, %if.end.13
  %32 = load i64, i64* %j, align 8
  %33 = load i64, i64* %to_merge_size, align 8
  %cmp18 = icmp slt i64 %32, %33
  br i1 %cmp18, label %for.body.20, label %for.end.29

for.body.20:                                      ; preds = %for.cond.17
  %34 = load i64, i64* %j, align 8
  %35 = load %struct._object*, %struct._object** %to_merge.addr, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyListObject*
  %ob_item21 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %36, i32 0, i32 1
  %37 = load %struct._object**, %struct._object*** %ob_item21, align 8
  %arrayidx22 = getelementptr %struct._object*, %struct._object** %37, i64 %34
  %38 = load %struct._object*, %struct._object** %arrayidx22, align 8
  store %struct._object* %38, %struct._object** %j_lst, align 8
  %39 = load %struct._object*, %struct._object** %j_lst, align 8
  %40 = load i64, i64* %j, align 8
  %41 = load i32*, i32** %remain, align 8
  %arrayidx23 = getelementptr i32, i32* %41, i64 %40
  %42 = load i32, i32* %arrayidx23, align 4
  %43 = load %struct._object*, %struct._object** %candidate, align 8
  %call24 = call i32 @tail_contains(%struct._object* %39, i32 %42, %struct._object* %43)
  %tobool = icmp ne i32 %call24, 0
  br i1 %tobool, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %for.body.20
  br label %skip

if.end.26:                                        ; preds = %for.body.20
  br label %for.inc.27

for.inc.27:                                       ; preds = %if.end.26
  %44 = load i64, i64* %j, align 8
  %inc28 = add i64 %44, 1
  store i64 %inc28, i64* %j, align 8
  br label %for.cond.17

for.end.29:                                       ; preds = %for.cond.17
  %45 = load %struct._object*, %struct._object** %acc.addr, align 8
  %46 = load %struct._object*, %struct._object** %candidate, align 8
  %call30 = call i32 @PyList_Append(%struct._object* %45, %struct._object* %46)
  store i32 %call30, i32* %ok, align 4
  %47 = load i32, i32* %ok, align 4
  %cmp31 = icmp slt i32 %47, 0
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %for.end.29
  %48 = load i32*, i32** %remain, align 8
  %49 = bitcast i32* %48 to i8*
  call void @PyMem_Free(i8* %49)
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %for.end.29
  store i64 0, i64* %j, align 8
  br label %for.cond.35

for.cond.35:                                      ; preds = %for.inc.57, %if.end.34
  %50 = load i64, i64* %j, align 8
  %51 = load i64, i64* %to_merge_size, align 8
  %cmp36 = icmp slt i64 %50, %51
  br i1 %cmp36, label %for.body.38, label %for.end.59

for.body.38:                                      ; preds = %for.cond.35
  %52 = load i64, i64* %j, align 8
  %53 = load %struct._object*, %struct._object** %to_merge.addr, align 8
  %54 = bitcast %struct._object* %53 to %struct.PyListObject*
  %ob_item40 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %54, i32 0, i32 1
  %55 = load %struct._object**, %struct._object*** %ob_item40, align 8
  %arrayidx41 = getelementptr %struct._object*, %struct._object** %55, i64 %52
  %56 = load %struct._object*, %struct._object** %arrayidx41, align 8
  store %struct._object* %56, %struct._object** %j_lst39, align 8
  %57 = load i64, i64* %j, align 8
  %58 = load i32*, i32** %remain, align 8
  %arrayidx42 = getelementptr i32, i32* %58, i64 %57
  %59 = load i32, i32* %arrayidx42, align 4
  %conv43 = sext i32 %59 to i64
  %60 = load %struct._object*, %struct._object** %j_lst39, align 8
  %61 = bitcast %struct._object* %60 to %struct.PyVarObject*
  %ob_size44 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %61, i32 0, i32 1
  %62 = load i64, i64* %ob_size44, align 8
  %cmp45 = icmp slt i64 %conv43, %62
  br i1 %cmp45, label %land.lhs.true, label %if.end.56

land.lhs.true:                                    ; preds = %for.body.38
  %63 = load i64, i64* %j, align 8
  %64 = load i32*, i32** %remain, align 8
  %arrayidx47 = getelementptr i32, i32* %64, i64 %63
  %65 = load i32, i32* %arrayidx47, align 4
  %idxprom48 = sext i32 %65 to i64
  %66 = load %struct._object*, %struct._object** %j_lst39, align 8
  %67 = bitcast %struct._object* %66 to %struct.PyListObject*
  %ob_item49 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %67, i32 0, i32 1
  %68 = load %struct._object**, %struct._object*** %ob_item49, align 8
  %arrayidx50 = getelementptr %struct._object*, %struct._object** %68, i64 %idxprom48
  %69 = load %struct._object*, %struct._object** %arrayidx50, align 8
  %70 = load %struct._object*, %struct._object** %candidate, align 8
  %cmp51 = icmp eq %struct._object* %69, %70
  br i1 %cmp51, label %if.then.53, label %if.end.56

if.then.53:                                       ; preds = %land.lhs.true
  %71 = load i64, i64* %j, align 8
  %72 = load i32*, i32** %remain, align 8
  %arrayidx54 = getelementptr i32, i32* %72, i64 %71
  %73 = load i32, i32* %arrayidx54, align 4
  %inc55 = add i32 %73, 1
  store i32 %inc55, i32* %arrayidx54, align 4
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.53, %land.lhs.true, %for.body.38
  br label %for.inc.57

for.inc.57:                                       ; preds = %if.end.56
  %74 = load i64, i64* %j, align 8
  %inc58 = add i64 %74, 1
  store i64 %inc58, i64* %j, align 8
  br label %for.cond.35

for.end.59:                                       ; preds = %for.cond.35
  br label %again

skip:                                             ; preds = %if.then.25
  br label %for.inc.60

for.inc.60:                                       ; preds = %skip, %if.then.11
  %75 = load i64, i64* %i, align 8
  %inc61 = add i64 %75, 1
  store i64 %inc61, i64* %i, align 8
  br label %for.cond.3

for.end.62:                                       ; preds = %for.cond.3
  %76 = load i64, i64* %empty_cnt, align 8
  %77 = load i64, i64* %to_merge_size, align 8
  %cmp63 = icmp eq i64 %76, %77
  br i1 %cmp63, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %for.end.62
  %78 = load i32*, i32** %remain, align 8
  %79 = bitcast i32* %78 to i8*
  call void @PyMem_Free(i8* %79)
  store i32 0, i32* %retval
  br label %return

if.end.66:                                        ; preds = %for.end.62
  %80 = load %struct._object*, %struct._object** %to_merge.addr, align 8
  %81 = load i32*, i32** %remain, align 8
  call void @set_mro_error(%struct._object* %80, i32* %81)
  %82 = load i32*, i32** %remain, align 8
  %83 = bitcast i32* %82 to i8*
  call void @PyMem_Free(i8* %83)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.66, %if.then.65, %if.then.33, %if.then
  %84 = load i32, i32* %retval
  ret i32 %84
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @class_name(%struct._object* %cls) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  %0 = load %struct._object*, %struct._object** %cls.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @PyId___name__)
  store %struct._object* %call, %struct._object** %name, align 8
  %1 = load %struct._object*, %struct._object** %name, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  call void @PyErr_Clear()
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %2, %struct._object** %_py_xdecref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp1 = icmp ne %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %do.body
  br label %do.body.3

do.body.3:                                        ; preds = %if.then.2
  %4 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body.3
  br label %if.end

if.else:                                          ; preds = %do.body.3
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.6

if.end.6:                                         ; preds = %do.end, %do.body
  br label %do.end.7

do.end.7:                                         ; preds = %if.end.6
  %11 = load %struct._object*, %struct._object** %cls.addr, align 8
  %call8 = call %struct._object* @PyObject_Repr(%struct._object* %11)
  store %struct._object* %call8, %struct._object** %name, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %do.end.7, %entry
  %12 = load %struct._object*, %struct._object** %name, align 8
  %cmp10 = icmp eq %struct._object* %12, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %name, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 19
  %15 = load i64, i64* %tp_flags, align 8
  %and = and i64 %15, 268435456
  %cmp14 = icmp ne i64 %and, 0
  br i1 %cmp14, label %if.end.27, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  %16 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp17, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %18, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %21(%struct._object* %22)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.12
  %23 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end.26, %if.then.11
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

declare %struct._object* @PyObject_Repr(%struct._object*) #1

declare i8* @PyMem_Malloc(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @tail_contains(%struct._object* %list, i32 %whence, %struct._object* %o) #0 {
entry:
  %retval = alloca i32, align 4
  %list.addr = alloca %struct._object*, align 8
  %whence.addr = alloca i32, align 4
  %o.addr = alloca %struct._object*, align 8
  %j = alloca i64, align 8
  %size = alloca i64, align 8
  store %struct._object* %list, %struct._object** %list.addr, align 8
  store i32 %whence, i32* %whence.addr, align 4
  store %struct._object* %o, %struct._object** %o.addr, align 8
  %0 = load %struct._object*, %struct._object** %list.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %size, align 8
  %3 = load i32, i32* %whence.addr, align 4
  %add = add i32 %3, 1
  %conv = sext i32 %add to i64
  store i64 %conv, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load i64, i64* %j, align 8
  %5 = load i64, i64* %size, align 8
  %cmp = icmp slt i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %j, align 8
  %7 = load %struct._object*, %struct._object** %list.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %8, i32 0, i32 1
  %9 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %9, i64 %6
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8
  %11 = load %struct._object*, %struct._object** %o.addr, align 8
  %cmp2 = icmp eq %struct._object* %10, %11
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %j, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

declare i32 @PyList_Append(%struct._object*, %struct._object*) #1

declare void @PyMem_Free(i8*) #1

; Function Attrs: nounwind uwtable
define internal void @set_mro_error(%struct._object* %to_merge, i32* %remain) #0 {
entry:
  %to_merge.addr = alloca %struct._object*, align 8
  %remain.addr = alloca i32*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %off = alloca i64, align 8
  %to_merge_size = alloca i64, align 8
  %buf = alloca [1000 x i8], align 16
  %k = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %set = alloca %struct._object*, align 8
  %L = alloca %struct._object*, align 8
  %c = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %name_str = alloca i8*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_decref_tmp70 = alloca %struct._object*, align 8
  store %struct._object* %to_merge, %struct._object** %to_merge.addr, align 8
  store i32* %remain, i32** %remain.addr, align 8
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %set, align 8
  %0 = load %struct._object*, %struct._object** %set, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %do.end.80

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %to_merge.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2, i32 0, i32 1
  %3 = load i64, i64* %ob_size, align 8
  store i64 %3, i64* %to_merge_size, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i64, i64* %i, align 8
  %5 = load i64, i64* %to_merge_size, align 8
  %cmp = icmp slt i64 %4, %5
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i64, i64* %i, align 8
  %7 = load %struct._object*, %struct._object** %to_merge.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %8, i32 0, i32 1
  %9 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %9, i64 %6
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %10, %struct._object** %L, align 8
  %11 = load i64, i64* %i, align 8
  %12 = load i32*, i32** %remain.addr, align 8
  %arrayidx1 = getelementptr i32, i32* %12, i64 %11
  %13 = load i32, i32* %arrayidx1, align 4
  %conv = sext i32 %13 to i64
  %14 = load %struct._object*, %struct._object** %L, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*
  %ob_size2 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1
  %16 = load i64, i64* %ob_size2, align 8
  %cmp3 = icmp slt i64 %conv, %16
  br i1 %cmp3, label %if.then.5, label %if.end.18

if.then.5:                                        ; preds = %for.body
  %17 = load i64, i64* %i, align 8
  %18 = load i32*, i32** %remain.addr, align 8
  %arrayidx6 = getelementptr i32, i32* %18, i64 %17
  %19 = load i32, i32* %arrayidx6, align 4
  %idxprom = sext i32 %19 to i64
  %20 = load %struct._object*, %struct._object** %L, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyListObject*
  %ob_item7 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %21, i32 0, i32 1
  %22 = load %struct._object**, %struct._object*** %ob_item7, align 8
  %arrayidx8 = getelementptr %struct._object*, %struct._object** %22, i64 %idxprom
  %23 = load %struct._object*, %struct._object** %arrayidx8, align 8
  store %struct._object* %23, %struct._object** %c, align 8
  %24 = load %struct._object*, %struct._object** %set, align 8
  %25 = load %struct._object*, %struct._object** %c, align 8
  %call9 = call i32 @PyDict_SetItem(%struct._object* %24, %struct._object* %25, %struct._object* @_Py_NoneStruct)
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.12, label %if.end.17

if.then.12:                                       ; preds = %if.then.5
  br label %do.body

do.body:                                          ; preds = %if.then.12
  %26 = load %struct._object*, %struct._object** %set, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %28, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %do.body
  br label %if.end.16

if.else:                                          ; preds = %do.body
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %31(%struct._object* %32)
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.then.15
  br label %do.end

do.end:                                           ; preds = %if.end.16
  br label %do.end.80

if.end.17:                                        ; preds = %if.then.5
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.18
  %33 = load i64, i64* %i, align 8
  %inc = add i64 %33, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %34 = load %struct._object*, %struct._object** %set, align 8
  %call19 = call i64 @PyDict_Size(%struct._object* %34)
  store i64 %call19, i64* %n, align 8
  %arraydecay = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf, i32 0, i32 0
  %call20 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %arraydecay, i64 1000, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.212, i32 0, i32 0))
  %conv21 = sext i32 %call20 to i64
  store i64 %conv21, i64* %off, align 8
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.67, %for.end
  %35 = load %struct._object*, %struct._object** %set, align 8
  %call22 = call i32 @PyDict_Next(%struct._object* %35, i64* %i, %struct._object** %k, %struct._object** %v)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %36 = load i64, i64* %off, align 8
  %cmp24 = icmp ult i64 %36, 1000
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %37 = phi i1 [ false, %while.cond ], [ %cmp24, %land.rhs ]
  br i1 %37, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %38 = load %struct._object*, %struct._object** %k, align 8
  %call26 = call %struct._object* @class_name(%struct._object* %38)
  store %struct._object* %call26, %struct._object** %name, align 8
  %39 = load %struct._object*, %struct._object** %name, align 8
  %cmp27 = icmp ne %struct._object* %39, null
  br i1 %cmp27, label %if.then.29, label %if.else.35

if.then.29:                                       ; preds = %while.body
  %40 = load %struct._object*, %struct._object** %name, align 8
  %call30 = call i8* @PyUnicode_AsUTF8(%struct._object* %40)
  store i8* %call30, i8** %name_str, align 8
  %41 = load i8*, i8** %name_str, align 8
  %cmp31 = icmp eq i8* %41, null
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.then.29
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i32 0, i32 0), i8** %name_str, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.33, %if.then.29
  br label %if.end.36

if.else.35:                                       ; preds = %while.body
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.192, i32 0, i32 0), i8** %name_str, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.35, %if.end.34
  %arraydecay37 = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf, i32 0, i32 0
  %42 = load i64, i64* %off, align 8
  %add.ptr = getelementptr i8, i8* %arraydecay37, i64 %42
  %43 = load i64, i64* %off, align 8
  %sub = sub i64 1000, %43
  %44 = load i8*, i8** %name_str, align 8
  %call38 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %add.ptr, i64 %sub, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.213, i32 0, i32 0), i8* %44)
  %conv39 = sext i32 %call38 to i64
  %45 = load i64, i64* %off, align 8
  %add = add i64 %45, %conv39
  store i64 %add, i64* %off, align 8
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %46 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %46, %struct._object** %_py_xdecref_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp41 = icmp ne %struct._object* %47, null
  br i1 %cmp41, label %if.then.43, label %if.end.56

if.then.43:                                       ; preds = %do.body.40
  br label %do.body.44

do.body.44:                                       ; preds = %if.then.43
  %48 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp45, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %50, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.44
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.44
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %53(%struct._object* %54)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  br label %if.end.56

if.end.56:                                        ; preds = %do.end.55, %do.body.40
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  %55 = load i64, i64* %n, align 8
  %dec58 = add i64 %55, -1
  store i64 %dec58, i64* %n, align 8
  %tobool59 = icmp ne i64 %dec58, 0
  br i1 %tobool59, label %land.lhs.true, label %if.end.67

land.lhs.true:                                    ; preds = %do.end.57
  %56 = load i64, i64* %off, align 8
  %add60 = add i64 %56, 1
  %cmp61 = icmp ult i64 %add60, 1000
  br i1 %cmp61, label %if.then.63, label %if.end.67

if.then.63:                                       ; preds = %land.lhs.true
  %57 = load i64, i64* %off, align 8
  %inc64 = add i64 %57, 1
  store i64 %inc64, i64* %off, align 8
  %arrayidx65 = getelementptr [1000 x i8], [1000 x i8]* %buf, i32 0, i64 %57
  store i8 44, i8* %arrayidx65, align 1
  %58 = load i64, i64* %off, align 8
  %arrayidx66 = getelementptr [1000 x i8], [1000 x i8]* %buf, i32 0, i64 %58
  store i8 0, i8* %arrayidx66, align 1
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.63, %land.lhs.true, %do.end.57
  br label %while.cond

while.end:                                        ; preds = %land.end
  %59 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %arraydecay68 = getelementptr inbounds [1000 x i8], [1000 x i8]* %buf, i32 0, i32 0
  call void @PyErr_SetString(%struct._object* %59, i8* %arraydecay68)
  br label %do.body.69

do.body.69:                                       ; preds = %while.end
  %60 = load %struct._object*, %struct._object** %set, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp70, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_refcnt71 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt71, align 8
  %dec72 = add i64 %62, -1
  store i64 %dec72, i64* %ob_refcnt71, align 8
  %cmp73 = icmp ne i64 %dec72, 0
  br i1 %cmp73, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.69
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.69
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  call void %65(%struct._object* %66)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.then, %do.end, %if.end.79
  ret void
}

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #1

declare i32 @PyOS_snprintf(i8*, i64, i8*, ...) #1

declare i8* @PyUnicode_AsUTF8(%struct._object*) #1

declare i32 @_PyObject_RealIsInstance(%struct._object*, %struct._object*) #1

declare i32 @_PyObject_RealIsSubclass(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @merge_class_dict(%struct._object* %dict, %struct._object* %aclass) #0 {
entry:
  %retval = alloca i32, align 4
  %dict.addr = alloca %struct._object*, align 8
  %aclass.addr = alloca %struct._object*, align 8
  %classdict = alloca %struct._object*, align 8
  %bases = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %status18 = alloca i32, align 4
  %base = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store %struct._object* %aclass, %struct._object** %aclass.addr, align 8
  %0 = load %struct._object*, %struct._object** %aclass.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @PyId___dict__)
  store %struct._object* %call, %struct._object** %classdict, align 8
  %1 = load %struct._object*, %struct._object** %classdict, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @PyErr_Clear()
  br label %if.end.8

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dict.addr, align 8
  %3 = load %struct._object*, %struct._object** %classdict, align 8
  %call1 = call i32 @PyDict_Update(%struct._object* %2, %struct._object* %3)
  store i32 %call1, i32* %status, align 4
  br label %do.body

do.body:                                          ; preds = %if.else
  %4 = load %struct._object*, %struct._object** %classdict, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %do.body
  br label %if.end

if.else.4:                                        ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  %11 = load i32, i32* %status, align 4
  %cmp5 = icmp slt i32 %11, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %do.end
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %if.then
  %12 = load %struct._object*, %struct._object** %aclass.addr, align 8
  %call9 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %12, %struct._Py_Identifier* @merge_class_dict.PyId___bases__)
  store %struct._object* %call9, %struct._object** %bases, align 8
  %13 = load %struct._object*, %struct._object** %bases, align 8
  %cmp10 = icmp eq %struct._object* %13, null
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %if.end.8
  call void @PyErr_Clear()
  br label %if.end.72

if.else.12:                                       ; preds = %if.end.8
  %14 = load %struct._object*, %struct._object** %bases, align 8
  %call13 = call i64 @PySequence_Size(%struct._object* %14)
  store i64 %call13, i64* %n, align 8
  %15 = load i64, i64* %n, align 8
  %cmp14 = icmp slt i64 %15, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %if.else.12
  call void @PyErr_Clear()
  br label %if.end.60

if.else.16:                                       ; preds = %if.else.12
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else.16
  %16 = load i64, i64* %i, align 8
  %17 = load i64, i64* %n, align 8
  %cmp17 = icmp slt i64 %16, %17
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load %struct._object*, %struct._object** %bases, align 8
  %19 = load i64, i64* %i, align 8
  %call19 = call %struct._object* @PySequence_GetItem(%struct._object* %18, i64 %19)
  store %struct._object* %call19, %struct._object** %base, align 8
  %20 = load %struct._object*, %struct._object** %base, align 8
  %cmp20 = icmp eq %struct._object* %20, null
  br i1 %cmp20, label %if.then.21, label %if.end.33

if.then.21:                                       ; preds = %for.body
  br label %do.body.22

do.body.22:                                       ; preds = %if.then.21
  %21 = load %struct._object*, %struct._object** %bases, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp23, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %23, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.22
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.22
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %26(%struct._object* %27)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %for.body
  %28 = load %struct._object*, %struct._object** %dict.addr, align 8
  %29 = load %struct._object*, %struct._object** %base, align 8
  %call34 = call i32 @merge_class_dict(%struct._object* %28, %struct._object* %29)
  store i32 %call34, i32* %status18, align 4
  br label %do.body.35

do.body.35:                                       ; preds = %if.end.33
  %30 = load %struct._object*, %struct._object** %base, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp36, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt37, align 8
  %dec38 = add i64 %32, -1
  store i64 %dec38, i64* %ob_refcnt37, align 8
  %cmp39 = icmp ne i64 %dec38, 0
  br i1 %cmp39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %do.body.35
  br label %if.end.44

if.else.41:                                       ; preds = %do.body.35
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  call void %35(%struct._object* %36)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  %37 = load i32, i32* %status18, align 4
  %cmp46 = icmp slt i32 %37, 0
  br i1 %cmp46, label %if.then.47, label %if.end.59

if.then.47:                                       ; preds = %do.end.45
  br label %do.body.48

do.body.48:                                       ; preds = %if.then.47
  %38 = load %struct._object*, %struct._object** %bases, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp49, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %40, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.48
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %43(%struct._object* %44)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  store i32 -1, i32* %retval
  br label %return

if.end.59:                                        ; preds = %do.end.45
  br label %for.inc

for.inc:                                          ; preds = %if.end.59
  %45 = load i64, i64* %i, align 8
  %inc = add i64 %45, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.60

if.end.60:                                        ; preds = %for.end, %if.then.15
  br label %do.body.61

do.body.61:                                       ; preds = %if.end.60
  %46 = load %struct._object*, %struct._object** %bases, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp62, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt63, align 8
  %dec64 = add i64 %48, -1
  store i64 %dec64, i64* %ob_refcnt63, align 8
  %cmp65 = icmp ne i64 %dec64, 0
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %do.body.61
  br label %if.end.70

if.else.67:                                       ; preds = %do.body.61
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  call void %51(%struct._object* %52)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %if.end.72

if.end.72:                                        ; preds = %do.end.71, %if.then.11
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.72, %do.end.58, %do.end.32, %if.then.6
  %53 = load i32, i32* %retval
  ret i32 %53
}

declare %struct._object* @PyDict_Keys(%struct._object*) #1

declare i32 @PyDict_Update(%struct._object*, %struct._object*) #1

declare i64 @PySequence_Size(%struct._object*) #1

declare %struct._object* @PySequence_GetItem(%struct._object*, i64) #1

declare i64 @_PyDict_KeysSize(%struct._dictkeysobject*) #1

; Function Attrs: nounwind uwtable
define internal i32 @type_set_name(%struct._typeobject* %type, %struct._object* %value, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  %et = alloca %struct._heaptypeobject*, align 8
  %tp_name = alloca i8*, align 8
  %tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @check_set_special_type_attr(%struct._typeobject* %0, %struct._object* %1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.211, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 268435456
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end.6, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 1
  %7 = load i8*, i8** %tp_name2, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %tp_name4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1
  %10 = load i8*, i8** %tp_name4, align 8
  %call5 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.227, i32 0, i32 0), i8* %7, i8* %10)
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %call7 = call %struct._object* @PyUnicode_FromStringAndSize(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.228, i32 0, i32 0), i64 1)
  store %struct._object* %call7, %struct._object** %tmp, align 8
  %11 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp8 = icmp eq %struct._object* %11, null
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.6
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.6
  %12 = load %struct._object*, %struct._object** %value.addr, align 8
  %13 = load %struct._object*, %struct._object** %tmp, align 8
  %call11 = call i32 @PyUnicode_Contains(%struct._object* %12, %struct._object* %13)
  %cmp12 = icmp ne i32 %call11, 0
  br i1 %cmp12, label %if.then.13, label %if.end.20

if.then.13:                                       ; preds = %if.end.10
  br label %do.body

do.body:                                          ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp15 = icmp ne i64 %dec, 0
  br i1 %cmp15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %do.body
  br label %if.end.18

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.16
  br label %do.end

do.end:                                           ; preds = %if.end.18
  %21 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call19 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %21, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.229, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.end.10
  br label %do.body.21

do.body.21:                                       ; preds = %if.end.20
  %22 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp23, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %24, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.21
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.21
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %27(%struct._object* %28)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  %29 = load %struct._object*, %struct._object** %value.addr, align 8
  %call33 = call i8* @PyUnicode_AsUTF8(%struct._object* %29)
  store i8* %call33, i8** %tp_name, align 8
  %30 = load i8*, i8** %tp_name, align 8
  %cmp34 = icmp eq i8* %30, null
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %do.end.32
  store i32 -1, i32* %retval
  br label %return

if.end.36:                                        ; preds = %do.end.32
  %31 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %32 = bitcast %struct._typeobject* %31 to %struct._heaptypeobject*
  store %struct._heaptypeobject* %32, %struct._heaptypeobject** %et, align 8
  %33 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt37, align 8
  %inc = add i64 %34, 1
  store i64 %inc, i64* %ob_refcnt37, align 8
  %35 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_name = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %35, i32 0, i32 5
  %36 = load %struct._object*, %struct._object** %ht_name, align 8
  store %struct._object* %36, %struct._object** %tmp, align 8
  %37 = load %struct._object*, %struct._object** %value.addr, align 8
  %38 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_name38 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %38, i32 0, i32 5
  store %struct._object* %37, %struct._object** %ht_name38, align 8
  %39 = load i8*, i8** %tp_name, align 8
  %40 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 1
  store i8* %39, i8** %tp_name39, align 8
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %41 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp42, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %43, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.40
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.40
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %46(%struct._object* %47)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.51, %if.then.35, %do.end, %if.then.9, %if.then.1, %if.then
  %48 = load i32, i32* %retval
  ret i32 %48
}

; Function Attrs: nounwind uwtable
define internal i32 @type_set_qualname(%struct._typeobject* %type, %struct._object* %value, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  %et = alloca %struct._heaptypeobject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @check_set_special_type_attr(%struct._typeobject* %0, %struct._object* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.223, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 268435456
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end.5, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 1
  %7 = load i8*, i8** %tp_name, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_name3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1
  %10 = load i8*, i8** %tp_name3, align 8
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.232, i32 0, i32 0), i8* %7, i8* %10)
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %11 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %12 = bitcast %struct._typeobject* %11 to %struct._heaptypeobject*
  store %struct._heaptypeobject* %12, %struct._heaptypeobject** %et, align 8
  %13 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %14, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.5
  %15 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_qualname = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %15, i32 0, i32 7
  %16 = load %struct._object*, %struct._object** %ht_qualname, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt6 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt6, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt6, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %23 = load %struct._object*, %struct._object** %value.addr, align 8
  %24 = load %struct._heaptypeobject*, %struct._heaptypeobject** %et, align 8
  %ht_qualname11 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %24, i32 0, i32 7
  store %struct._object* %23, %struct._object** %ht_qualname11, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.1, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_get_bases(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 40
  %1 = load %struct._object*, %struct._object** %tp_bases, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 0
  %2 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 40
  %4 = load %struct._object*, %struct._object** %tp_bases1, align 8
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal i32 @type_set_bases(%struct._typeobject* %type, %struct._object* %value, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %r = alloca i32, align 4
  %ob = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %new_base = alloca %struct._typeobject*, align 8
  %old_base = alloca %struct._typeobject*, align 8
  %old_bases = alloca %struct._object*, align 8
  %old_mro = alloca %struct._object*, align 8
  %cls = alloca %struct._typeobject*, align 8
  %mro = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  %_py_decref_tmp114 = alloca %struct._object*, align 8
  %_py_decref_tmp125 = alloca %struct._object*, align 8
  %_py_decref_tmp136 = alloca %struct._object*, align 8
  %_py_decref_tmp147 = alloca %struct._object*, align 8
  %_py_decref_tmp159 = alloca %struct._object*, align 8
  %_py_decref_tmp174 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  store i32 0, i32* %r, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @check_set_special_type_attr(%struct._typeobject* %0, %struct._object* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.214, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 67108864
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end.5, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 1
  %7 = load i8*, i8** %tp_name, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_name3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1
  %10 = load i8*, i8** %tp_name3, align 8
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.233, i32 0, i32 0), i8* %7, i8* %10)
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %value.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1
  %13 = load i64, i64* %ob_size, align 8
  %cmp6 = icmp eq i64 %13, 0
  br i1 %cmp6, label %if.then.7, label %if.end.10

if.then.7:                                        ; preds = %if.end.5
  %14 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 1
  %16 = load i8*, i8** %tp_name8, align 8
  %call9 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %14, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.234, i32 0, i32 0), i8* %16)
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %17 = load i64, i64* %i, align 8
  %18 = load %struct._object*, %struct._object** %value.addr, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyVarObject*
  %ob_size11 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %19, i32 0, i32 1
  %20 = load i64, i64* %ob_size11, align 8
  %cmp12 = icmp slt i64 %17, %20
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %21 = load i64, i64* %i, align 8
  %22 = load %struct._object*, %struct._object** %value.addr, align 8
  %23 = bitcast %struct._object* %22 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %23, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %21
  %24 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %24, %struct._object** %ob, align 8
  %25 = load %struct._object*, %struct._object** %ob, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %tp_flags14 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 19
  %27 = load i64, i64* %tp_flags14, align 8
  %and15 = and i64 %27, 2147483648
  %cmp16 = icmp ne i64 %and15, 0
  br i1 %cmp16, label %if.end.22, label %if.then.17

if.then.17:                                       ; preds = %for.body
  %28 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %29 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 1
  %30 = load i8*, i8** %tp_name18, align 8
  %31 = load %struct._object*, %struct._object** %ob, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_name20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 1
  %33 = load i8*, i8** %tp_name20, align 8
  %call21 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %28, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.235, i32 0, i32 0), i8* %30, i8* %33)
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %for.body
  %34 = load %struct._object*, %struct._object** %ob, align 8
  %35 = bitcast %struct._object* %34 to %struct._typeobject*
  %36 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call23 = call i32 @PyType_IsSubtype(%struct._typeobject* %35, %struct._typeobject* %36)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.22
  %37 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.236, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.end.22
  br label %for.inc

for.inc:                                          ; preds = %if.end.26
  %38 = load i64, i64* %i, align 8
  %inc = add i64 %38, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load %struct._object*, %struct._object** %value.addr, align 8
  %call27 = call %struct._typeobject* @best_base(%struct._object* %39)
  store %struct._typeobject* %call27, %struct._typeobject** %new_base, align 8
  %40 = load %struct._typeobject*, %struct._typeobject** %new_base, align 8
  %tobool28 = icmp ne %struct._typeobject* %40, null
  br i1 %tobool28, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %for.end
  store i32 -1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %for.end
  %41 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 30
  %42 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %43 = load %struct._typeobject*, %struct._typeobject** %new_base, align 8
  %call31 = call i32 @compatible_for_assignment(%struct._typeobject* %42, %struct._typeobject* %43, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.214, i32 0, i32 0))
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  %44 = load %struct._typeobject*, %struct._typeobject** %new_base, align 8
  %45 = bitcast %struct._typeobject* %44 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0
  %46 = load i64, i64* %ob_refcnt, align 8
  %inc35 = add i64 %46, 1
  store i64 %inc35, i64* %ob_refcnt, align 8
  %47 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt36, align 8
  %inc37 = add i64 %48, 1
  store i64 %inc37, i64* %ob_refcnt36, align 8
  %49 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 40
  %50 = load %struct._object*, %struct._object** %tp_bases, align 8
  store %struct._object* %50, %struct._object** %old_bases, align 8
  %51 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 30
  %52 = load %struct._typeobject*, %struct._typeobject** %tp_base38, align 8
  store %struct._typeobject* %52, %struct._typeobject** %old_base, align 8
  %53 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 41
  %54 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %54, %struct._object** %old_mro, align 8
  %55 = load %struct._object*, %struct._object** %value.addr, align 8
  %56 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 40
  store %struct._object* %55, %struct._object** %tp_bases39, align 8
  %57 = load %struct._typeobject*, %struct._typeobject** %new_base, align 8
  %58 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 30
  store %struct._typeobject* %57, %struct._typeobject** %tp_base40, align 8
  %59 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call41 = call i32 @mro_internal(%struct._typeobject* %59)
  %cmp42 = icmp slt i32 %call41, 0
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.34
  br label %bail

if.end.44:                                        ; preds = %if.end.34
  %call45 = call %struct._object* @PyList_New(i64 0)
  store %struct._object* %call45, %struct._object** %temp, align 8
  %60 = load %struct._object*, %struct._object** %temp, align 8
  %tobool46 = icmp ne %struct._object* %60, null
  br i1 %tobool46, label %if.end.48, label %if.then.47

if.then.47:                                       ; preds = %if.end.44
  br label %bail

if.end.48:                                        ; preds = %if.end.44
  %61 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %62 = load %struct._object*, %struct._object** %temp, align 8
  %call49 = call i32 @mro_subclasses(%struct._typeobject* %61, %struct._object* %62)
  store i32 %call49, i32* %r, align 4
  %63 = load i32, i32* %r, align 4
  %cmp50 = icmp slt i32 %63, 0
  br i1 %cmp50, label %if.then.51, label %if.end.82

if.then.51:                                       ; preds = %if.end.48
  store i64 0, i64* %i, align 8
  br label %for.cond.52

for.cond.52:                                      ; preds = %for.inc.68, %if.then.51
  %64 = load i64, i64* %i, align 8
  %65 = load %struct._object*, %struct._object** %temp, align 8
  %call53 = call i64 @PyList_Size(%struct._object* %65)
  %cmp54 = icmp slt i64 %64, %call53
  br i1 %cmp54, label %for.body.55, label %for.end.70

for.body.55:                                      ; preds = %for.cond.52
  %66 = load i64, i64* %i, align 8
  %67 = load %struct._object*, %struct._object** %temp, align 8
  %68 = bitcast %struct._object* %67 to %struct.PyListObject*
  %ob_item56 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %68, i32 0, i32 1
  %69 = load %struct._object**, %struct._object*** %ob_item56, align 8
  %arrayidx57 = getelementptr %struct._object*, %struct._object** %69, i64 %66
  %70 = load %struct._object*, %struct._object** %arrayidx57, align 8
  %call58 = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %70, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.24, i32 0, i32 0), i64 2, i64 2, %struct._typeobject** %cls, %struct._object** %mro)
  %71 = load %struct._object*, %struct._object** %mro, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0
  %72 = load i64, i64* %ob_refcnt59, align 8
  %inc60 = add i64 %72, 1
  store i64 %inc60, i64* %ob_refcnt59, align 8
  %73 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %tp_mro61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 41
  %74 = load %struct._object*, %struct._object** %tp_mro61, align 8
  store %struct._object* %74, %struct._object** %ob, align 8
  %75 = load %struct._object*, %struct._object** %mro, align 8
  %76 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %tp_mro62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 41
  store %struct._object* %75, %struct._object** %tp_mro62, align 8
  br label %do.body

do.body:                                          ; preds = %for.body.55
  %77 = load %struct._object*, %struct._object** %ob, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt63, align 8
  %dec = add i64 %79, -1
  store i64 %dec, i64* %ob_refcnt63, align 8
  %cmp64 = icmp ne i64 %dec, 0
  br i1 %cmp64, label %if.then.65, label %if.else

if.then.65:                                       ; preds = %do.body
  br label %if.end.67

if.else:                                          ; preds = %do.body
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %82(%struct._object* %83)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else, %if.then.65
  br label %do.end

do.end:                                           ; preds = %if.end.67
  br label %for.inc.68

for.inc.68:                                       ; preds = %do.end
  %84 = load i64, i64* %i, align 8
  %inc69 = add i64 %84, 1
  store i64 %inc69, i64* %i, align 8
  br label %for.cond.52

for.end.70:                                       ; preds = %for.cond.52
  br label %do.body.71

do.body.71:                                       ; preds = %for.end.70
  %85 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %85, %struct._object** %_py_decref_tmp72, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 0
  %87 = load i64, i64* %ob_refcnt73, align 8
  %dec74 = add i64 %87, -1
  store i64 %dec74, i64* %ob_refcnt73, align 8
  %cmp75 = icmp ne i64 %dec74, 0
  br i1 %cmp75, label %if.then.76, label %if.else.77

if.then.76:                                       ; preds = %do.body.71
  br label %if.end.80

if.else.77:                                       ; preds = %do.body.71
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %89, i32 0, i32 4
  %90 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  call void %90(%struct._object* %91)
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  br label %bail

if.end.82:                                        ; preds = %if.end.48
  br label %do.body.83

do.body.83:                                       ; preds = %if.end.82
  %92 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %92, %struct._object** %_py_decref_tmp84, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 0
  %94 = load i64, i64* %ob_refcnt85, align 8
  %dec86 = add i64 %94, -1
  store i64 %dec86, i64* %ob_refcnt85, align 8
  %cmp87 = icmp ne i64 %dec86, 0
  br i1 %cmp87, label %if.then.88, label %if.else.89

if.then.88:                                       ; preds = %do.body.83
  br label %if.end.92

if.else.89:                                       ; preds = %do.body.83
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_type90 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type90, align 8
  %tp_dealloc91 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 4
  %97 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc91, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  call void %97(%struct._object* %98)
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.89, %if.then.88
  br label %do.end.93

do.end.93:                                        ; preds = %if.end.92
  %99 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %100 = load %struct._object*, %struct._object** %old_bases, align 8
  call void @remove_all_subclasses(%struct._typeobject* %99, %struct._object* %100)
  %101 = load %struct._object*, %struct._object** %value.addr, align 8
  %102 = bitcast %struct._object* %101 to %struct.PyVarObject*
  %ob_size94 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %102, i32 0, i32 1
  %103 = load i64, i64* %ob_size94, align 8
  %sub = sub i64 %103, 1
  store i64 %sub, i64* %i, align 8
  br label %for.cond.95

for.cond.95:                                      ; preds = %for.inc.110, %do.end.93
  %104 = load i64, i64* %i, align 8
  %cmp96 = icmp sge i64 %104, 0
  br i1 %cmp96, label %for.body.97, label %for.end.112

for.body.97:                                      ; preds = %for.cond.95
  %105 = load i64, i64* %i, align 8
  %106 = load %struct._object*, %struct._object** %value.addr, align 8
  %107 = bitcast %struct._object* %106 to %struct.PyTupleObject*
  %ob_item98 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %107, i32 0, i32 1
  %arrayidx99 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item98, i32 0, i64 %105
  %108 = load %struct._object*, %struct._object** %arrayidx99, align 8
  store %struct._object* %108, %struct._object** %ob, align 8
  %109 = load %struct._object*, %struct._object** %ob, align 8
  %ob_type100 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 1
  %110 = load %struct._typeobject*, %struct._typeobject** %ob_type100, align 8
  %tp_flags101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 19
  %111 = load i64, i64* %tp_flags101, align 8
  %and102 = and i64 %111, 2147483648
  %cmp103 = icmp ne i64 %and102, 0
  br i1 %cmp103, label %if.then.104, label %if.end.109

if.then.104:                                      ; preds = %for.body.97
  %112 = load %struct._object*, %struct._object** %ob, align 8
  %113 = bitcast %struct._object* %112 to %struct._typeobject*
  %114 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call105 = call i32 @add_subclass(%struct._typeobject* %113, %struct._typeobject* %114)
  %cmp106 = icmp slt i32 %call105, 0
  br i1 %cmp106, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %if.then.104
  store i32 -1, i32* %r, align 4
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.107, %if.then.104
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %for.body.97
  br label %for.inc.110

for.inc.110:                                      ; preds = %if.end.109
  %115 = load i64, i64* %i, align 8
  %dec111 = add i64 %115, -1
  store i64 %dec111, i64* %i, align 8
  br label %for.cond.95

for.end.112:                                      ; preds = %for.cond.95
  %116 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @update_all_slots(%struct._typeobject* %116)
  br label %do.body.113

do.body.113:                                      ; preds = %for.end.112
  %117 = load %struct._object*, %struct._object** %old_bases, align 8
  store %struct._object* %117, %struct._object** %_py_decref_tmp114, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_refcnt115 = getelementptr inbounds %struct._object, %struct._object* %118, i32 0, i32 0
  %119 = load i64, i64* %ob_refcnt115, align 8
  %dec116 = add i64 %119, -1
  store i64 %dec116, i64* %ob_refcnt115, align 8
  %cmp117 = icmp ne i64 %dec116, 0
  br i1 %cmp117, label %if.then.118, label %if.else.119

if.then.118:                                      ; preds = %do.body.113
  br label %if.end.122

if.else.119:                                      ; preds = %do.body.113
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_type120 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 1
  %121 = load %struct._typeobject*, %struct._typeobject** %ob_type120, align 8
  %tp_dealloc121 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %121, i32 0, i32 4
  %122 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc121, align 8
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  call void %122(%struct._object* %123)
  br label %if.end.122

if.end.122:                                       ; preds = %if.else.119, %if.then.118
  br label %do.end.123

do.end.123:                                       ; preds = %if.end.122
  br label %do.body.124

do.body.124:                                      ; preds = %do.end.123
  %124 = load %struct._typeobject*, %struct._typeobject** %old_base, align 8
  %125 = bitcast %struct._typeobject* %124 to %struct._object*
  store %struct._object* %125, %struct._object** %_py_decref_tmp125, align 8
  %126 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_refcnt126 = getelementptr inbounds %struct._object, %struct._object* %126, i32 0, i32 0
  %127 = load i64, i64* %ob_refcnt126, align 8
  %dec127 = add i64 %127, -1
  store i64 %dec127, i64* %ob_refcnt126, align 8
  %cmp128 = icmp ne i64 %dec127, 0
  br i1 %cmp128, label %if.then.129, label %if.else.130

if.then.129:                                      ; preds = %do.body.124
  br label %if.end.133

if.else.130:                                      ; preds = %do.body.124
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_type131 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 1
  %129 = load %struct._typeobject*, %struct._typeobject** %ob_type131, align 8
  %tp_dealloc132 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %129, i32 0, i32 4
  %130 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc132, align 8
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  call void %130(%struct._object* %131)
  br label %if.end.133

if.end.133:                                       ; preds = %if.else.130, %if.then.129
  br label %do.end.134

do.end.134:                                       ; preds = %if.end.133
  br label %do.body.135

do.body.135:                                      ; preds = %do.end.134
  %132 = load %struct._object*, %struct._object** %old_mro, align 8
  store %struct._object* %132, %struct._object** %_py_decref_tmp136, align 8
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8
  %ob_refcnt137 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 0
  %134 = load i64, i64* %ob_refcnt137, align 8
  %dec138 = add i64 %134, -1
  store i64 %dec138, i64* %ob_refcnt137, align 8
  %cmp139 = icmp ne i64 %dec138, 0
  br i1 %cmp139, label %if.then.140, label %if.else.141

if.then.140:                                      ; preds = %do.body.135
  br label %if.end.144

if.else.141:                                      ; preds = %do.body.135
  %135 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8
  %ob_type142 = getelementptr inbounds %struct._object, %struct._object* %135, i32 0, i32 1
  %136 = load %struct._typeobject*, %struct._typeobject** %ob_type142, align 8
  %tp_dealloc143 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %136, i32 0, i32 4
  %137 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc143, align 8
  %138 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8
  call void %137(%struct._object* %138)
  br label %if.end.144

if.end.144:                                       ; preds = %if.else.141, %if.then.140
  br label %do.end.145

do.end.145:                                       ; preds = %if.end.144
  %139 = load i32, i32* %r, align 4
  store i32 %139, i32* %retval
  br label %return

bail:                                             ; preds = %do.end.81, %if.then.47, %if.then.43
  br label %do.body.146

do.body.146:                                      ; preds = %bail
  %140 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases148 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %140, i32 0, i32 40
  %141 = load %struct._object*, %struct._object** %tp_bases148, align 8
  store %struct._object* %141, %struct._object** %_py_decref_tmp147, align 8
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_refcnt149 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 0
  %143 = load i64, i64* %ob_refcnt149, align 8
  %dec150 = add i64 %143, -1
  store i64 %dec150, i64* %ob_refcnt149, align 8
  %cmp151 = icmp ne i64 %dec150, 0
  br i1 %cmp151, label %if.then.152, label %if.else.153

if.then.152:                                      ; preds = %do.body.146
  br label %if.end.156

if.else.153:                                      ; preds = %do.body.146
  %144 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_type154 = getelementptr inbounds %struct._object, %struct._object* %144, i32 0, i32 1
  %145 = load %struct._typeobject*, %struct._typeobject** %ob_type154, align 8
  %tp_dealloc155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %145, i32 0, i32 4
  %146 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc155, align 8
  %147 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  call void %146(%struct._object* %147)
  br label %if.end.156

if.end.156:                                       ; preds = %if.else.153, %if.then.152
  br label %do.end.157

do.end.157:                                       ; preds = %if.end.156
  br label %do.body.158

do.body.158:                                      ; preds = %do.end.157
  %148 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base160 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %148, i32 0, i32 30
  %149 = load %struct._typeobject*, %struct._typeobject** %tp_base160, align 8
  %150 = bitcast %struct._typeobject* %149 to %struct._object*
  store %struct._object* %150, %struct._object** %_py_decref_tmp159, align 8
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  %ob_refcnt161 = getelementptr inbounds %struct._object, %struct._object* %151, i32 0, i32 0
  %152 = load i64, i64* %ob_refcnt161, align 8
  %dec162 = add i64 %152, -1
  store i64 %dec162, i64* %ob_refcnt161, align 8
  %cmp163 = icmp ne i64 %dec162, 0
  br i1 %cmp163, label %if.then.164, label %if.else.165

if.then.164:                                      ; preds = %do.body.158
  br label %if.end.168

if.else.165:                                      ; preds = %do.body.158
  %153 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  %ob_type166 = getelementptr inbounds %struct._object, %struct._object* %153, i32 0, i32 1
  %154 = load %struct._typeobject*, %struct._typeobject** %ob_type166, align 8
  %tp_dealloc167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %154, i32 0, i32 4
  %155 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc167, align 8
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  call void %155(%struct._object* %156)
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.165, %if.then.164
  br label %do.end.169

do.end.169:                                       ; preds = %if.end.168
  %157 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro170 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %157, i32 0, i32 41
  %158 = load %struct._object*, %struct._object** %tp_mro170, align 8
  %159 = load %struct._object*, %struct._object** %old_mro, align 8
  %cmp171 = icmp ne %struct._object* %158, %159
  br i1 %cmp171, label %if.then.172, label %if.end.185

if.then.172:                                      ; preds = %do.end.169
  br label %do.body.173

do.body.173:                                      ; preds = %if.then.172
  %160 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro175 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %160, i32 0, i32 41
  %161 = load %struct._object*, %struct._object** %tp_mro175, align 8
  store %struct._object* %161, %struct._object** %_py_decref_tmp174, align 8
  %162 = load %struct._object*, %struct._object** %_py_decref_tmp174, align 8
  %ob_refcnt176 = getelementptr inbounds %struct._object, %struct._object* %162, i32 0, i32 0
  %163 = load i64, i64* %ob_refcnt176, align 8
  %dec177 = add i64 %163, -1
  store i64 %dec177, i64* %ob_refcnt176, align 8
  %cmp178 = icmp ne i64 %dec177, 0
  br i1 %cmp178, label %if.then.179, label %if.else.180

if.then.179:                                      ; preds = %do.body.173
  br label %if.end.183

if.else.180:                                      ; preds = %do.body.173
  %164 = load %struct._object*, %struct._object** %_py_decref_tmp174, align 8
  %ob_type181 = getelementptr inbounds %struct._object, %struct._object* %164, i32 0, i32 1
  %165 = load %struct._typeobject*, %struct._typeobject** %ob_type181, align 8
  %tp_dealloc182 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %165, i32 0, i32 4
  %166 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc182, align 8
  %167 = load %struct._object*, %struct._object** %_py_decref_tmp174, align 8
  call void %166(%struct._object* %167)
  br label %if.end.183

if.end.183:                                       ; preds = %if.else.180, %if.then.179
  br label %do.end.184

do.end.184:                                       ; preds = %if.end.183
  br label %if.end.185

if.end.185:                                       ; preds = %do.end.184, %do.end.169
  %168 = load %struct._object*, %struct._object** %old_bases, align 8
  %169 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_bases186 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %169, i32 0, i32 40
  store %struct._object* %168, %struct._object** %tp_bases186, align 8
  %170 = load %struct._typeobject*, %struct._typeobject** %old_base, align 8
  %171 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base187 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %171, i32 0, i32 30
  store %struct._typeobject* %170, %struct._typeobject** %tp_base187, align 8
  %172 = load %struct._object*, %struct._object** %old_mro, align 8
  %173 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_mro188 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %173, i32 0, i32 41
  store %struct._object* %172, %struct._object** %tp_mro188, align 8
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.185, %do.end.145, %if.then.33, %if.then.29, %if.then.25, %if.then.17, %if.then.7, %if.then.1, %if.then
  %174 = load i32, i32* %retval
  ret i32 %174
}

; Function Attrs: nounwind uwtable
define internal i32 @type_set_module(%struct._typeobject* %type, %struct._object* %value, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @check_set_special_type_attr(%struct._typeobject* %0, %struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @PyType_Modified(%struct._typeobject* %2)
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 31
  %4 = load %struct._object*, %struct._object** %tp_dict, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call i32 @_PyDict_SetItemId(%struct._object* %4, %struct._Py_Identifier* @PyId___module__, %struct._object* %5)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_abstractmethods(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  %mod = alloca %struct._object*, align 8
  %message = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  store %struct._object* null, %struct._object** %mod, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %cmp = icmp ne %struct._typeobject* %0, @PyType_Type
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 31
  %2 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call = call %struct._object* @_PyDict_GetItemId(%struct._object* %2, %struct._Py_Identifier* @PyId___abstractmethods__)
  store %struct._object* %call, %struct._object** %mod, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct._object*, %struct._object** %mod, align 8
  %tobool = icmp ne %struct._object* %3, null
  br i1 %tobool, label %if.end.6, label %if.then.1

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @PyId___abstractmethods__)
  store %struct._object* %call2, %struct._object** %message, align 8
  %4 = load %struct._object*, %struct._object** %message, align 8
  %tobool3 = icmp ne %struct._object* %4, null
  br i1 %tobool3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  %5 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %6 = load %struct._object*, %struct._object** %message, align 8
  call void @PyErr_SetObject(%struct._object* %5, %struct._object* %6)
  br label %if.end.5

if.end.5:                                         ; preds = %if.then.4, %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.6
  %7 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %7, %struct._object** %_py_xincref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp7 = icmp ne %struct._object* %8, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.8, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %11 = load %struct._object*, %struct._object** %mod, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.end.5
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal i32 @type_set_abstractmethods(%struct._typeobject* %type, %struct._object* %value, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  %abstract = alloca i32, align 4
  %res = alloca i32, align 4
  %message = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp ne %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @PyObject_IsTrue(%struct._object* %1)
  store i32 %call, i32* %abstract, align 4
  %2 = load i32, i32* %abstract, align 4
  %cmp1 = icmp slt i32 %2, 0
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 31
  %4 = load %struct._object*, %struct._object** %tp_dict, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %call3 = call i32 @_PyDict_SetItemId(%struct._object* %4, %struct._Py_Identifier* @PyId___abstractmethods__, %struct._object* %5)
  store i32 %call3, i32* %res, align 4
  br label %if.end.14

if.else:                                          ; preds = %entry
  store i32 0, i32* %abstract, align 4
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 31
  %7 = load %struct._object*, %struct._object** %tp_dict4, align 8
  %call5 = call i32 @_PyDict_DelItemId(%struct._object* %7, %struct._Py_Identifier* @PyId___abstractmethods__)
  store i32 %call5, i32* %res, align 4
  %8 = load i32, i32* %res, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.else
  %9 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %call6 = call i32 @PyErr_ExceptionMatches(%struct._object* %9)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %land.lhs.true
  %call9 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @PyId___abstractmethods__)
  store %struct._object* %call9, %struct._object** %message, align 8
  %10 = load %struct._object*, %struct._object** %message, align 8
  %tobool10 = icmp ne %struct._object* %10, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.8
  %11 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %12 = load %struct._object*, %struct._object** %message, align 8
  call void @PyErr_SetObject(%struct._object* %11, %struct._object* %12)
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.11, %if.then.8
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %land.lhs.true, %if.else
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end
  %13 = load i32, i32* %res, align 4
  %cmp15 = icmp eq i32 %13, 0
  br i1 %cmp15, label %if.then.16, label %if.end.22

if.then.16:                                       ; preds = %if.end.14
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @PyType_Modified(%struct._typeobject* %14)
  %15 = load i32, i32* %abstract, align 4
  %tobool17 = icmp ne i32 %15, 0
  br i1 %tobool17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %if.then.16
  %16 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 19
  %17 = load i64, i64* %tp_flags, align 8
  %or = or i64 %17, 1048576
  store i64 %or, i64* %tp_flags, align 8
  br label %if.end.21

if.else.19:                                       ; preds = %if.then.16
  %18 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 19
  %19 = load i64, i64* %tp_flags20, align 8
  %and = and i64 %19, -1048577
  store i64 %and, i64* %tp_flags20, align 8
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.19, %if.then.18
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %if.end.14
  %20 = load i32, i32* %res, align 4
  store i32 %20, i32* %retval
  br label %return

return:                                           ; preds = %if.end.22, %if.end.12, %if.then.2
  %21 = load i32, i32* %retval
  ret i32 %21
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_dict(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 31
  %4 = load %struct._object*, %struct._object** %tp_dict1, align 8
  %call = call %struct._object* @PyDictProxy_New(%struct._object* %4)
  store %struct._object* %call, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %5
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_get_doc(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %land.lhs.true

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_doc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 20
  %3 = load i8*, i8** %tp_doc, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 1
  %5 = load i8*, i8** %tp_name, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_doc1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 20
  %7 = load i8*, i8** %tp_doc1, align 8
  %call = call %struct._object* @_PyType_GetDocFromInternalDoc(i8* %5, i8* %7)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 31
  %9 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call2 = call %struct._object* @_PyDict_GetItemId(%struct._object* %9, %struct._Py_Identifier* @PyId___doc__)
  store %struct._object* %call2, %struct._object** %result, align 8
  %10 = load %struct._object*, %struct._object** %result, align 8
  %cmp3 = icmp eq %struct._object* %10, null
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  store %struct._object* @_Py_NoneStruct, %struct._object** %result, align 8
  %11 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.14

if.else:                                          ; preds = %if.end
  %13 = load %struct._object*, %struct._object** %result, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 32
  %15 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  %tobool5 = icmp ne %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %15, null
  br i1 %tobool5, label %if.then.6, label %if.else.10

if.then.6:                                        ; preds = %if.else
  %16 = load %struct._object*, %struct._object** %result, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_descr_get8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 32
  %18 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get8, align 8
  %19 = load %struct._object*, %struct._object** %result, align 8
  %20 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %21 = bitcast %struct._typeobject* %20 to %struct._object*
  %call9 = call %struct._object* %18(%struct._object* %19, %struct._object* null, %struct._object* %21)
  store %struct._object* %call9, %struct._object** %result, align 8
  br label %if.end.13

if.else.10:                                       ; preds = %if.else
  %22 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt11, align 8
  %inc12 = add i64 %23, 1
  store i64 %inc12, i64* %ob_refcnt11, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.10, %if.then.6
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.then.4
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal i32 @type_set_doc(%struct._typeobject* %type, %struct._object* %value, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @check_set_special_type_attr(%struct._typeobject* %0, %struct._object* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.225, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  call void @PyType_Modified(%struct._typeobject* %2)
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 31
  %4 = load %struct._object*, %struct._object** %tp_dict, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %call1 = call i32 @_PyDict_SetItemId(%struct._object* %4, %struct._Py_Identifier* @PyId___doc__, %struct._object* %5)
  store i32 %call1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @type_get_text_signature(%struct._typeobject* %type, i8* %context) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %context.addr = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 1
  %1 = load i8*, i8** %tp_name, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_doc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 20
  %3 = load i8*, i8** %tp_doc, align 8
  %call = call %struct._object* @_PyType_GetTextSignatureFromInternalDoc(i8* %1, i8* %3)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @check_set_special_type_attr(%struct._typeobject* %type, %struct._object* %value, i8* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %name.addr = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 1
  %4 = load i8*, i8** %tp_name, align 8
  %5 = load i8*, i8** %name.addr, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.230, i32 0, i32 0), i8* %4, i8* %5)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  %tobool1 = icmp ne %struct._object* %6, null
  br i1 %tobool1, label %if.end.5, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_name3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 1
  %9 = load i8*, i8** %tp_name3, align 8
  %10 = load i8*, i8** %name.addr, align 8
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.231, i32 0, i32 0), i8* %9, i8* %10)
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.2, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

declare i32 @PyUnicode_Contains(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @compatible_for_assignment(%struct._typeobject* %oldto, %struct._typeobject* %newto, i8* %attr) #0 {
entry:
  %retval = alloca i32, align 4
  %oldto.addr = alloca %struct._typeobject*, align 8
  %newto.addr = alloca %struct._typeobject*, align 8
  %attr.addr = alloca i8*, align 8
  %newbase = alloca %struct._typeobject*, align 8
  %oldbase = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %oldto, %struct._typeobject** %oldto.addr, align 8
  store %struct._typeobject* %newto, %struct._typeobject** %newto.addr, align 8
  store i8* %attr, i8** %attr.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %newto.addr, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 4
  %1 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %oldto.addr, align 8
  %tp_dealloc1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 4
  %3 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1, align 8
  %cmp = icmp ne void (%struct._object*)* %1, %3
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct._typeobject*, %struct._typeobject** %newto.addr, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 38
  %5 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %oldto.addr, align 8
  %tp_free2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 38
  %7 = load void (i8*)*, void (i8*)** %tp_free2, align 8
  %cmp3 = icmp ne void (i8*)* %5, %7
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %9 = load i8*, i8** %attr.addr, align 8
  %10 = load %struct._typeobject*, %struct._typeobject** %newto.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 1
  %11 = load i8*, i8** %tp_name, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %oldto.addr, align 8
  %tp_name4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 1
  %13 = load i8*, i8** %tp_name4, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %8, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.237, i32 0, i32 0), i8* %9, i8* %11, i8* %13)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %14 = load %struct._typeobject*, %struct._typeobject** %newto.addr, align 8
  store %struct._typeobject* %14, %struct._typeobject** %newbase, align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %oldto.addr, align 8
  store %struct._typeobject* %15, %struct._typeobject** %oldbase, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %16 = load %struct._typeobject*, %struct._typeobject** %newbase, align 8
  %17 = load %struct._typeobject*, %struct._typeobject** %newbase, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 30
  %18 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %call5 = call i32 @equiv_structs(%struct._typeobject* %16, %struct._typeobject* %18)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load %struct._typeobject*, %struct._typeobject** %newbase, align 8
  %tp_base6 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 30
  %20 = load %struct._typeobject*, %struct._typeobject** %tp_base6, align 8
  store %struct._typeobject* %20, %struct._typeobject** %newbase, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond.7

while.cond.7:                                     ; preds = %while.body.11, %while.end
  %21 = load %struct._typeobject*, %struct._typeobject** %oldbase, align 8
  %22 = load %struct._typeobject*, %struct._typeobject** %oldbase, align 8
  %tp_base8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 30
  %23 = load %struct._typeobject*, %struct._typeobject** %tp_base8, align 8
  %call9 = call i32 @equiv_structs(%struct._typeobject* %21, %struct._typeobject* %23)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %while.body.11, label %while.end.13

while.body.11:                                    ; preds = %while.cond.7
  %24 = load %struct._typeobject*, %struct._typeobject** %oldbase, align 8
  %tp_base12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 30
  %25 = load %struct._typeobject*, %struct._typeobject** %tp_base12, align 8
  store %struct._typeobject* %25, %struct._typeobject** %oldbase, align 8
  br label %while.cond.7

while.end.13:                                     ; preds = %while.cond.7
  %26 = load %struct._typeobject*, %struct._typeobject** %newbase, align 8
  %27 = load %struct._typeobject*, %struct._typeobject** %oldbase, align 8
  %cmp14 = icmp ne %struct._typeobject* %26, %27
  br i1 %cmp14, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %while.end.13
  %28 = load %struct._typeobject*, %struct._typeobject** %newbase, align 8
  %tp_base15 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 30
  %29 = load %struct._typeobject*, %struct._typeobject** %tp_base15, align 8
  %30 = load %struct._typeobject*, %struct._typeobject** %oldbase, align 8
  %tp_base16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 30
  %31 = load %struct._typeobject*, %struct._typeobject** %tp_base16, align 8
  %cmp17 = icmp ne %struct._typeobject* %29, %31
  br i1 %cmp17, label %if.then.21, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %land.lhs.true
  %32 = load %struct._typeobject*, %struct._typeobject** %newbase, align 8
  %33 = load %struct._typeobject*, %struct._typeobject** %oldbase, align 8
  %call19 = call i32 @same_slots_added(%struct._typeobject* %32, %struct._typeobject* %33)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.25, label %if.then.21

if.then.21:                                       ; preds = %lor.lhs.false.18, %land.lhs.true
  %34 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %35 = load i8*, i8** %attr.addr, align 8
  %36 = load %struct._typeobject*, %struct._typeobject** %newto.addr, align 8
  %tp_name22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 1
  %37 = load i8*, i8** %tp_name22, align 8
  %38 = load %struct._typeobject*, %struct._typeobject** %oldto.addr, align 8
  %tp_name23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 1
  %39 = load i8*, i8** %tp_name23, align 8
  %call24 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %34, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.238, i32 0, i32 0), i8* %35, i8* %37, i8* %39)
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %lor.lhs.false.18, %while.end.13
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.25, %if.then.21, %if.then
  %40 = load i32, i32* %retval
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal i32 @mro_subclasses(%struct._typeobject* %type, %struct._object* %temp) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %temp.addr = alloca %struct._object*, align 8
  %subclass = alloca %struct._typeobject*, align 8
  %ref = alloca %struct._object*, align 8
  %subclasses = alloca %struct._object*, align 8
  %old_mro = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %tuple = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %temp, %struct._object** %temp.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_subclasses = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 43
  %1 = load %struct._object*, %struct._object** %tp_subclasses, align 8
  store %struct._object* %1, %struct._object** %subclasses, align 8
  %2 = load %struct._object*, %struct._object** %subclasses, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i64 0, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.38, %if.then.4, %if.end
  %3 = load %struct._object*, %struct._object** %subclasses, align 8
  %call = call i32 @PyDict_Next(%struct._object* %3, i64* %i, %struct._object** null, %struct._object** %ref)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %4 = load %struct._object*, %struct._object** %ref, align 8
  %5 = bitcast %struct._object* %4 to %struct._PyWeakReference*
  %wr_object = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %5, i32 0, i32 1
  %6 = load %struct._object*, %struct._object** %wr_object, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %cmp1 = icmp sgt i64 %7, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %8 = load %struct._object*, %struct._object** %ref, align 8
  %9 = bitcast %struct._object* %8 to %struct._PyWeakReference*
  %wr_object2 = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %9, i32 0, i32 1
  %10 = load %struct._object*, %struct._object** %wr_object2, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %10, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %11 = bitcast %struct._object* %cond to %struct._typeobject*
  store %struct._typeobject* %11, %struct._typeobject** %subclass, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %13 = bitcast %struct._typeobject* %12 to %struct._object*
  %cmp3 = icmp eq %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %cond.end
  br label %while.cond

if.end.5:                                         ; preds = %cond.end
  %14 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %tp_mro = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 41
  %15 = load %struct._object*, %struct._object** %tp_mro, align 8
  store %struct._object* %15, %struct._object** %old_mro, align 8
  %16 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %call6 = call i32 @mro_internal(%struct._typeobject* %16)
  %cmp7 = icmp slt i32 %call6, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end.5
  %17 = load %struct._object*, %struct._object** %old_mro, align 8
  %18 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %tp_mro9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 41
  store %struct._object* %17, %struct._object** %tp_mro9, align 8
  store i32 -1, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end.5
  %19 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %20 = load %struct._object*, %struct._object** %old_mro, align 8
  %call10 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._typeobject* %19, %struct._object* %20)
  store %struct._object* %call10, %struct._object** %tuple, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %21 = load %struct._object*, %struct._object** %old_mro, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt11, align 8
  %dec = add i64 %23, -1
  store i64 %dec, i64* %ob_refcnt11, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body
  br label %if.end.15

if.else.14:                                       ; preds = %do.body
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %26(%struct._object* %27)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.14, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %28 = load %struct._object*, %struct._object** %tuple, align 8
  %tobool16 = icmp ne %struct._object* %28, null
  br i1 %tobool16, label %if.end.18, label %if.then.17

if.then.17:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %do.end
  %29 = load %struct._object*, %struct._object** %temp.addr, align 8
  %30 = load %struct._object*, %struct._object** %tuple, align 8
  %call19 = call i32 @PyList_Append(%struct._object* %29, %struct._object* %30)
  %cmp20 = icmp slt i32 %call19, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %if.end.18
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.18
  br label %do.body.23

do.body.23:                                       ; preds = %if.end.22
  %31 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp24, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %33, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %36(%struct._object* %37)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %if.end.34

if.end.34:                                        ; preds = %do.end.33
  %38 = load %struct._typeobject*, %struct._typeobject** %subclass, align 8
  %39 = load %struct._object*, %struct._object** %temp.addr, align 8
  %call35 = call i32 @mro_subclasses(%struct._typeobject* %38, %struct._object* %39)
  %cmp36 = icmp slt i32 %call35, 0
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.34
  store i32 -1, i32* %retval
  br label %return

if.end.38:                                        ; preds = %if.end.34
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.37, %if.then.21, %if.then.17, %if.then.8, %if.then
  %40 = load i32, i32* %retval
  ret i32 %40
}

declare i64 @PyList_Size(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal void @update_all_slots(%struct._typeobject* %type) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %p = alloca %struct.wrapperbase*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  call void @init_slotdefs()
  store %struct.wrapperbase* getelementptr inbounds ([87 x %struct.wrapperbase], [87 x %struct.wrapperbase]* @slotdefs, i32 0, i32 0), %struct.wrapperbase** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %0, i32 0, i32 0
  %1 = load i8*, i8** %name, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name_strobj = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %3, i32 0, i32 6
  %4 = load %struct._object*, %struct._object** %name_strobj, align 8
  %call = call i32 @update_slot(%struct._typeobject* %2, %struct._object* %4)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %5 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %incdec.ptr = getelementptr %struct.wrapperbase, %struct.wrapperbase* %5, i32 1
  store %struct.wrapperbase* %incdec.ptr, %struct.wrapperbase** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @equiv_structs(%struct._typeobject* %a, %struct._typeobject* %b) #0 {
entry:
  %a.addr = alloca %struct._typeobject*, align 8
  %b.addr = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %a, %struct._typeobject** %a.addr, align 8
  store %struct._typeobject* %b, %struct._typeobject** %b.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %1 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %cmp = icmp eq %struct._typeobject* %0, %1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %cmp1 = icmp ne %struct._typeobject* %2, null
  br i1 %cmp1, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %lor.rhs
  %3 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %cmp2 = icmp ne %struct._typeobject* %3, null
  br i1 %cmp2, label %land.lhs.true.3, label %land.end

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %4 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 2
  %5 = load i64, i64* %tp_basicsize, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_basicsize4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 2
  %7 = load i64, i64* %tp_basicsize4, align 8
  %cmp5 = icmp eq i64 %5, %7
  br i1 %cmp5, label %land.lhs.true.6, label %land.end

land.lhs.true.6:                                  ; preds = %land.lhs.true.3
  %8 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_itemsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 3
  %9 = load i64, i64* %tp_itemsize, align 8
  %10 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_itemsize7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 3
  %11 = load i64, i64* %tp_itemsize7, align 8
  %cmp8 = icmp eq i64 %9, %11
  br i1 %cmp8, label %land.lhs.true.9, label %land.end

land.lhs.true.9:                                  ; preds = %land.lhs.true.6
  %12 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 34
  %13 = load i64, i64* %tp_dictoffset, align 8
  %14 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_dictoffset10 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 34
  %15 = load i64, i64* %tp_dictoffset10, align 8
  %cmp11 = icmp eq i64 %13, %15
  br i1 %cmp11, label %land.lhs.true.12, label %land.end

land.lhs.true.12:                                 ; preds = %land.lhs.true.9
  %16 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_weaklistoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 24
  %17 = load i64, i64* %tp_weaklistoffset, align 8
  %18 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_weaklistoffset13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 24
  %19 = load i64, i64* %tp_weaklistoffset13, align 8
  %cmp14 = icmp eq i64 %17, %19
  br i1 %cmp14, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true.12
  %20 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 19
  %21 = load i64, i64* %tp_flags, align 8
  %and = and i64 %21, 16384
  %22 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_flags15 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 19
  %23 = load i64, i64* %tp_flags15, align 8
  %and16 = and i64 %23, 16384
  %cmp17 = icmp eq i64 %and, %and16
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true.12, %land.lhs.true.9, %land.lhs.true.6, %land.lhs.true.3, %land.lhs.true, %lor.rhs
  %24 = phi i1 [ false, %land.lhs.true.12 ], [ false, %land.lhs.true.9 ], [ false, %land.lhs.true.6 ], [ false, %land.lhs.true.3 ], [ false, %land.lhs.true ], [ false, %lor.rhs ], [ %cmp17, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %25 = phi i1 [ true, %entry ], [ %24, %land.end ]
  %lor.ext = zext i1 %25 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define internal i32 @same_slots_added(%struct._typeobject* %a, %struct._typeobject* %b) #0 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct._typeobject*, align 8
  %b.addr = alloca %struct._typeobject*, align 8
  %base = alloca %struct._typeobject*, align 8
  %size = alloca i64, align 8
  %slots_a = alloca %struct._object*, align 8
  %slots_b = alloca %struct._object*, align 8
  store %struct._typeobject* %a, %struct._typeobject** %a.addr, align 8
  store %struct._typeobject* %b, %struct._typeobject** %b.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 30
  %1 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %1, %struct._typeobject** %base, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 2
  %3 = load i64, i64* %tp_basicsize, align 8
  store i64 %3, i64* %size, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 34
  %5 = load i64, i64* %tp_dictoffset, align 8
  %6 = load i64, i64* %size, align 8
  %cmp = icmp eq i64 %5, %6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_dictoffset1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 34
  %8 = load i64, i64* %tp_dictoffset1, align 8
  %9 = load i64, i64* %size, align 8
  %cmp2 = icmp eq i64 %8, %9
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %10 = load i64, i64* %size, align 8
  %add = add i64 %10, 8
  store i64 %add, i64* %size, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %11 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_weaklistoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 24
  %12 = load i64, i64* %tp_weaklistoffset, align 8
  %13 = load i64, i64* %size, align 8
  %cmp3 = icmp eq i64 %12, %13
  br i1 %cmp3, label %land.lhs.true.4, label %if.end.9

land.lhs.true.4:                                  ; preds = %if.end
  %14 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_weaklistoffset5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 24
  %15 = load i64, i64* %tp_weaklistoffset5, align 8
  %16 = load i64, i64* %size, align 8
  %cmp6 = icmp eq i64 %15, %16
  br i1 %cmp6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %land.lhs.true.4
  %17 = load i64, i64* %size, align 8
  %add8 = add i64 %17, 8
  store i64 %add8, i64* %size, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.7, %land.lhs.true.4, %if.end
  %18 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %19 = bitcast %struct._typeobject* %18 to %struct._heaptypeobject*
  %ht_slots = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %19, i32 0, i32 6
  %20 = load %struct._object*, %struct._object** %ht_slots, align 8
  store %struct._object* %20, %struct._object** %slots_a, align 8
  %21 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %22 = bitcast %struct._typeobject* %21 to %struct._heaptypeobject*
  %ht_slots10 = getelementptr inbounds %struct._heaptypeobject, %struct._heaptypeobject* %22, i32 0, i32 6
  %23 = load %struct._object*, %struct._object** %ht_slots10, align 8
  store %struct._object* %23, %struct._object** %slots_b, align 8
  %24 = load %struct._object*, %struct._object** %slots_a, align 8
  %tobool = icmp ne %struct._object* %24, null
  br i1 %tobool, label %land.lhs.true.11, label %if.end.18

land.lhs.true.11:                                 ; preds = %if.end.9
  %25 = load %struct._object*, %struct._object** %slots_b, align 8
  %tobool12 = icmp ne %struct._object* %25, null
  br i1 %tobool12, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %land.lhs.true.11
  %26 = load %struct._object*, %struct._object** %slots_a, align 8
  %27 = load %struct._object*, %struct._object** %slots_b, align 8
  %call = call i32 @PyObject_RichCompareBool(%struct._object* %26, %struct._object* %27, i32 2)
  %cmp14 = icmp ne i32 %call, 1
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.then.13
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.then.13
  %28 = load %struct._object*, %struct._object** %slots_a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %29, i32 0, i32 1
  %30 = load i64, i64* %ob_size, align 8
  %mul = mul i64 8, %30
  %31 = load i64, i64* %size, align 8
  %add17 = add i64 %31, %mul
  store i64 %add17, i64* %size, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.16, %land.lhs.true.11, %if.end.9
  %32 = load i64, i64* %size, align 8
  %33 = load %struct._typeobject*, %struct._typeobject** %a.addr, align 8
  %tp_basicsize19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 2
  %34 = load i64, i64* %tp_basicsize19, align 8
  %cmp20 = icmp eq i64 %32, %34
  br i1 %cmp20, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.18
  %35 = load i64, i64* %size, align 8
  %36 = load %struct._typeobject*, %struct._typeobject** %b.addr, align 8
  %tp_basicsize21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 2
  %37 = load i64, i64* %tp_basicsize21, align 8
  %cmp22 = icmp eq i64 %35, %37
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.18
  %38 = phi i1 [ false, %if.end.18 ], [ %cmp22, %land.rhs ]
  %land.ext = zext i1 %38 to i32
  store i32 %land.ext, i32* %retval
  br label %return

return:                                           ; preds = %land.end, %if.then.15
  %39 = load i32, i32* %retval
  ret i32 %39
}

declare i32 @_PyDict_DelItemId(%struct._object*, %struct._Py_Identifier*) #1

declare %struct._object* @PyDictProxy_New(%struct._object*) #1

declare i32 @PyArg_ParseTupleAndKeywords(%struct._object*, %struct._object*, i8*, i8**, ...) #1

declare %struct._object* @PyDict_Copy(%struct._object*) #1

declare %struct._object* @PySequence_Tuple(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @valid_identifier(%struct._object* %s) #0 {
entry:
  %retval = alloca i32, align 4
  %s.addr = alloca %struct._object*, align 8
  store %struct._object* %s, %struct._object** %s.addr, align 8
  %0 = load %struct._object*, %struct._object** %s.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 268435456
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %4 = load %struct._object*, %struct._object** %s.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 1
  %6 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %3, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.253, i32 0, i32 0), i8* %6)
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** %s.addr, align 8
  %call2 = call i32 @PyUnicode_IsIdentifier(%struct._object* %7)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.254, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

declare i32 @PyUnicode_CompareWithASCIIString(%struct._object*, i8*) #1

declare %struct._object* @_Py_Mangle(%struct._object*, %struct._object*) #1

declare i32 @PyList_Sort(%struct._object*) #1

declare %struct._object* @PyList_AsTuple(%struct._object*) #1

declare %struct._object* @PyEval_GetGlobals() #1

declare %struct._object* @PyStaticMethod_New(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @subtype_traverse(%struct._object* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %type = alloca %struct._typeobject*, align 8
  %base = alloca %struct._typeobject*, align 8
  %basetraverse = alloca i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, align 8
  %err = alloca i32, align 4
  %dictptr = alloca %struct._object**, align 8
  %vret = alloca i32, align 4
  %vret25 = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  store %struct._typeobject* %2, %struct._typeobject** %base, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.3, %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_traverse = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 21
  %4 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %tp_traverse, align 8
  store i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* %4, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %basetraverse, align 8
  %cmp = icmp eq i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* %4, @subtype_traverse
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1
  %7 = load i64, i64* %ob_size, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %while.body
  %8 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %11 = load i8*, i8** %arg.addr, align 8
  %call = call i32 @traverse_slots(%struct._typeobject* %8, %struct._object* %9, i32 (%struct._object*, i8*)* %10, i8* %11)
  store i32 %call, i32* %err, align 4
  %12 = load i32, i32* %err, align 4
  %tobool1 = icmp ne i32 %12, 0
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %13 = load i32, i32* %err, align 4
  store i32 %13, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %while.body
  %14 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 30
  %15 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %15, %struct._typeobject** %base, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %16 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 34
  %17 = load i64, i64* %tp_dictoffset, align 8
  %18 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dictoffset4 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 34
  %19 = load i64, i64* %tp_dictoffset4, align 8
  %cmp5 = icmp ne i64 %17, %19
  br i1 %cmp5, label %if.then.6, label %if.end.19

if.then.6:                                        ; preds = %while.end
  %20 = load %struct._object*, %struct._object** %self.addr, align 8
  %call7 = call %struct._object** @_PyObject_GetDictPtr(%struct._object* %20)
  store %struct._object** %call7, %struct._object*** %dictptr, align 8
  %21 = load %struct._object**, %struct._object*** %dictptr, align 8
  %tobool8 = icmp ne %struct._object** %21, null
  br i1 %tobool8, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %if.then.6
  %22 = load %struct._object**, %struct._object*** %dictptr, align 8
  %23 = load %struct._object*, %struct._object** %22, align 8
  %tobool9 = icmp ne %struct._object* %23, null
  br i1 %tobool9, label %if.then.10, label %if.end.18

if.then.10:                                       ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then.10
  %24 = load %struct._object**, %struct._object*** %dictptr, align 8
  %25 = load %struct._object*, %struct._object** %24, align 8
  %tobool11 = icmp ne %struct._object* %25, null
  br i1 %tobool11, label %if.then.12, label %if.end.17

if.then.12:                                       ; preds = %do.body
  %26 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %27 = load %struct._object**, %struct._object*** %dictptr, align 8
  %28 = load %struct._object*, %struct._object** %27, align 8
  %29 = load i8*, i8** %arg.addr, align 8
  %call13 = call i32 %26(%struct._object* %28, i8* %29)
  store i32 %call13, i32* %vret, align 4
  %30 = load i32, i32* %vret, align 4
  %tobool14 = icmp ne i32 %30, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.then.12
  %31 = load i32, i32* %vret, align 4
  store i32 %31, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.then.12
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.17
  br label %if.end.18

if.end.18:                                        ; preds = %do.end, %land.lhs.true, %if.then.6
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %while.end
  %32 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 19
  %33 = load i64, i64* %tp_flags, align 8
  %and = and i64 %33, 512
  %tobool20 = icmp ne i64 %and, 0
  br i1 %tobool20, label %if.then.21, label %if.end.32

if.then.21:                                       ; preds = %if.end.19
  br label %do.body.22

do.body.22:                                       ; preds = %if.then.21
  %34 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tobool23 = icmp ne %struct._typeobject* %34, null
  br i1 %tobool23, label %if.then.24, label %if.end.30

if.then.24:                                       ; preds = %do.body.22
  %35 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %36 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %37 = bitcast %struct._typeobject* %36 to %struct._object*
  %38 = load i8*, i8** %arg.addr, align 8
  %call26 = call i32 %35(%struct._object* %37, i8* %38)
  store i32 %call26, i32* %vret25, align 4
  %39 = load i32, i32* %vret25, align 4
  %tobool27 = icmp ne i32 %39, 0
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.24
  %40 = load i32, i32* %vret25, align 4
  store i32 %40, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.then.24
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %do.body.22
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %if.end.32

if.end.32:                                        ; preds = %do.end.31, %if.end.19
  %41 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %basetraverse, align 8
  %tobool33 = icmp ne i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* %41, null
  br i1 %tobool33, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %if.end.32
  %42 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** %basetraverse, align 8
  %43 = load %struct._object*, %struct._object** %self.addr, align 8
  %44 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %45 = load i8*, i8** %arg.addr, align 8
  %call35 = call i32 %42(%struct._object* %43, i32 (%struct._object*, i8*)* %44, i8* %45)
  store i32 %call35, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.end.32
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.34, %if.then.28, %if.then.15, %if.then.2
  %46 = load i32, i32* %retval
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal i32 @subtype_clear(%struct._object* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %type = alloca %struct._typeobject*, align 8
  %base = alloca %struct._typeobject*, align 8
  %baseclear = alloca i32 (%struct._object*)*, align 8
  %dictptr = alloca %struct._object**, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  store %struct._typeobject* %2, %struct._typeobject** %base, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_clear = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 22
  %4 = load i32 (%struct._object*)*, i32 (%struct._object*)** %tp_clear, align 8
  store i32 (%struct._object*)* %4, i32 (%struct._object*)** %baseclear, align 8
  %cmp = icmp eq i32 (%struct._object*)* %4, @subtype_clear
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1
  %7 = load i64, i64* %ob_size, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %8 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  call void @clear_slots(%struct._typeobject* %8, %struct._object* %9)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %10 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 30
  %11 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  store %struct._typeobject* %11, %struct._typeobject** %base, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %12 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 34
  %13 = load i64, i64* %tp_dictoffset, align 8
  %14 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %tp_dictoffset1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 34
  %15 = load i64, i64* %tp_dictoffset1, align 8
  %cmp2 = icmp ne i64 %13, %15
  br i1 %cmp2, label %if.then.3, label %if.end.17

if.then.3:                                        ; preds = %while.end
  %16 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object** @_PyObject_GetDictPtr(%struct._object* %16)
  store %struct._object** %call, %struct._object*** %dictptr, align 8
  %17 = load %struct._object**, %struct._object*** %dictptr, align 8
  %tobool4 = icmp ne %struct._object** %17, null
  br i1 %tobool4, label %land.lhs.true, label %if.end.16

land.lhs.true:                                    ; preds = %if.then.3
  %18 = load %struct._object**, %struct._object*** %dictptr, align 8
  %19 = load %struct._object*, %struct._object** %18, align 8
  %tobool5 = icmp ne %struct._object* %19, null
  br i1 %tobool5, label %if.then.6, label %if.end.16

if.then.6:                                        ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %20 = load %struct._object**, %struct._object*** %dictptr, align 8
  %21 = load %struct._object*, %struct._object** %20, align 8
  store %struct._object* %21, %struct._object** %_py_tmp, align 8
  %22 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp7 = icmp ne %struct._object* %22, null
  br i1 %cmp7, label %if.then.8, label %if.end.14

if.then.8:                                        ; preds = %do.body
  %23 = load %struct._object**, %struct._object*** %dictptr, align 8
  store %struct._object* null, %struct._object** %23, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.then.8
  %24 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %26, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body.9
  br label %if.end.13

if.else:                                          ; preds = %do.body.9
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %29(%struct._object* %30)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %if.end.14

if.end.14:                                        ; preds = %do.end, %do.body
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  br label %if.end.16

if.end.16:                                        ; preds = %do.end.15, %land.lhs.true, %if.then.3
  br label %if.end.17

if.end.17:                                        ; preds = %if.end.16, %while.end
  %31 = load i32 (%struct._object*)*, i32 (%struct._object*)** %baseclear, align 8
  %tobool18 = icmp ne i32 (%struct._object*)* %31, null
  br i1 %tobool18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.17
  %32 = load i32 (%struct._object*)*, i32 (%struct._object*)** %baseclear, align 8
  %33 = load %struct._object*, %struct._object** %self.addr, align 8
  %call20 = call i32 %32(%struct._object* %33)
  store i32 %call20, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.21, %if.then.19
  %34 = load i32, i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal void @fixup_slot_dispatchers(%struct._typeobject* %type) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %p = alloca %struct.wrapperbase*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  call void @init_slotdefs()
  store %struct.wrapperbase* getelementptr inbounds ([87 x %struct.wrapperbase], [87 x %struct.wrapperbase]* @slotdefs, i32 0, i32 0), %struct.wrapperbase** %p, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.body, %entry
  %0 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %name = getelementptr inbounds %struct.wrapperbase, %struct.wrapperbase* %0, i32 0, i32 0
  %1 = load i8*, i8** %name, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = load %struct.wrapperbase*, %struct.wrapperbase** %p, align 8
  %call = call %struct.wrapperbase* @update_one_slot(%struct._typeobject* %2, %struct.wrapperbase* %3)
  store %struct.wrapperbase* %call, %struct.wrapperbase** %p, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

declare i32 @PyUnicode_IsIdentifier(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @subtype_dict(%struct._object* %obj, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  %base = alloca %struct._typeobject*, align 8
  %func = alloca %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %descr = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %call = call %struct._typeobject* @get_builtin_base_with_dict(%struct._typeobject* %1)
  store %struct._typeobject* %call, %struct._typeobject** %base, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp = icmp ne %struct._typeobject* %2, null
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %call1 = call %struct._object* @get_dict_descriptor(%struct._typeobject* %3)
  store %struct._object* %call1, %struct._object** %descr, align 8
  %4 = load %struct._object*, %struct._object** %descr, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8
  call void @raise_dict_descr_error(%struct._object* %5)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %descr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_descr_get = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 32
  %8 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_get, align 8
  store %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %8, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %9 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %cmp5 = icmp eq %struct._object* (%struct._object*, %struct._object*, %struct._object*)* %9, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  call void @raise_dict_descr_error(%struct._object* %10)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %11 = load %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %12 = load %struct._object*, %struct._object** %descr, align 8
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8
  %14 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %16 = bitcast %struct._typeobject* %15 to %struct._object*
  %call9 = call %struct._object* %11(%struct._object* %12, %struct._object* %13, %struct._object* %16)
  store %struct._object* %call9, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %entry
  %17 = load %struct._object*, %struct._object** %obj.addr, align 8
  %18 = load i8*, i8** %context.addr, align 8
  %call11 = call %struct._object* @PyObject_GenericGetDict(%struct._object* %17, i8* %18)
  store %struct._object* %call11, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.end.7, %if.then.6, %if.then.3
  %19 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %19
}

; Function Attrs: nounwind uwtable
define internal i32 @subtype_setdict(%struct._object* %obj, %struct._object* %value, i8* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  %dict = alloca %struct._object*, align 8
  %dictptr = alloca %struct._object**, align 8
  %base = alloca %struct._typeobject*, align 8
  %func = alloca i32 (%struct._object*, %struct._object*, %struct._object*)*, align 8
  %descr = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %call = call %struct._typeobject* @get_builtin_base_with_dict(%struct._typeobject* %1)
  store %struct._typeobject* %call, %struct._typeobject** %base, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %cmp = icmp ne %struct._typeobject* %2, null
  br i1 %cmp, label %if.then, label %if.end.9

if.then:                                          ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %base, align 8
  %call1 = call %struct._object* @get_dict_descriptor(%struct._typeobject* %3)
  store %struct._object* %call1, %struct._object** %descr, align 8
  %4 = load %struct._object*, %struct._object** %descr, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %obj.addr, align 8
  call void @raise_dict_descr_error(%struct._object* %5)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %descr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_descr_set = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 33
  %8 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set, align 8
  store i32 (%struct._object*, %struct._object*, %struct._object*)* %8, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %9 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %cmp5 = icmp eq i32 (%struct._object*, %struct._object*, %struct._object*)* %9, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  call void @raise_dict_descr_error(%struct._object* %10)
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %11 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %func, align 8
  %12 = load %struct._object*, %struct._object** %descr, align 8
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8
  %14 = load %struct._object*, %struct._object** %value.addr, align 8
  %call8 = call i32 %11(%struct._object* %12, %struct._object* %13, %struct._object* %14)
  store i32 %call8, i32* %retval
  br label %return

if.end.9:                                         ; preds = %entry
  %15 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call10 = call %struct._object** @_PyObject_GetDictPtr(%struct._object* %15)
  store %struct._object** %call10, %struct._object*** %dictptr, align 8
  %16 = load %struct._object**, %struct._object*** %dictptr, align 8
  %cmp11 = icmp eq %struct._object** %16, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  %17 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.258, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.9
  %18 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp14 = icmp ne %struct._object* %18, null
  br i1 %cmp14, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end.13
  %19 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 19
  %21 = load i64, i64* %tp_flags, align 8
  %and = and i64 %21, 536870912
  %cmp16 = icmp ne i64 %and, 0
  br i1 %cmp16, label %if.end.20, label %if.then.17

if.then.17:                                       ; preds = %land.lhs.true
  %22 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %23 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 1
  %25 = load i8*, i8** %tp_name, align 8
  %call19 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %22, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.259, i32 0, i32 0), i8* %25)
  store i32 -1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %land.lhs.true, %if.end.13
  %26 = load %struct._object**, %struct._object*** %dictptr, align 8
  %27 = load %struct._object*, %struct._object** %26, align 8
  store %struct._object* %27, %struct._object** %dict, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.20
  %28 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %28, %struct._object** %_py_xincref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp21 = icmp ne %struct._object* %29, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %31, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.then.22, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.23
  %32 = load %struct._object*, %struct._object** %value.addr, align 8
  %33 = load %struct._object**, %struct._object*** %dictptr, align 8
  store %struct._object* %32, %struct._object** %33, align 8
  br label %do.body.24

do.body.24:                                       ; preds = %do.end
  %34 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %34, %struct._object** %_py_xdecref_tmp, align 8
  %35 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp25 = icmp ne %struct._object* %35, null
  br i1 %cmp25, label %if.then.26, label %if.end.34

if.then.26:                                       ; preds = %do.body.24
  br label %do.body.27

do.body.27:                                       ; preds = %if.then.26
  %36 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt28, align 8
  %dec = add i64 %38, -1
  store i64 %dec, i64* %ob_refcnt28, align 8
  %cmp29 = icmp ne i64 %dec, 0
  br i1 %cmp29, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %do.body.27
  br label %if.end.32

if.else:                                          ; preds = %do.body.27
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %41(%struct._object* %42)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else, %if.then.30
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %if.end.34

if.end.34:                                        ; preds = %do.end.33, %do.body.24
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.35, %if.then.17, %if.then.12, %if.end.7, %if.then.6, %if.then.3
  %43 = load i32, i32* %retval
  ret i32 %43
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @subtype_getweakref(%struct._object* %obj, i8* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %context.addr = alloca i8*, align 8
  %weaklistptr = alloca %struct._object**, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8* %context, i8** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_weaklistoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 24
  %2 = load i64, i64* %tp_weaklistoffset, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.260, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %obj.addr, align 8
  %5 = bitcast %struct._object* %4 to i8*
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_weaklistoffset2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 24
  %8 = load i64, i64* %tp_weaklistoffset2, align 8
  %add.ptr = getelementptr i8, i8* %5, i64 %8
  %9 = bitcast i8* %add.ptr to %struct._object**
  store %struct._object** %9, %struct._object*** %weaklistptr, align 8
  %10 = load %struct._object**, %struct._object*** %weaklistptr, align 8
  %11 = load %struct._object*, %struct._object** %10, align 8
  %cmp3 = icmp eq %struct._object* %11, null
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  store %struct._object* @_Py_NoneStruct, %struct._object** %result, align 8
  br label %if.end.5

if.else:                                          ; preds = %if.end
  %12 = load %struct._object**, %struct._object*** %weaklistptr, align 8
  %13 = load %struct._object*, %struct._object** %12, align 8
  store %struct._object* %13, %struct._object** %result, align 8
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  %14 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %15, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %16 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._typeobject* @get_builtin_base_with_dict(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca %struct._typeobject*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 30
  %1 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %cmp = icmp ne %struct._typeobject* %1, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dictoffset = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 34
  %3 = load i64, i64* %tp_dictoffset, align 8
  %cmp1 = icmp ne i64 %3, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %while.body
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19
  %5 = load i64, i64* %tp_flags, align 8
  %and = and i64 %5, 512
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  store %struct._typeobject* %6, %struct._typeobject** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %while.body
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 30
  %8 = load %struct._typeobject*, %struct._typeobject** %tp_base2, align 8
  store %struct._typeobject* %8, %struct._typeobject** %type.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store %struct._typeobject* null, %struct._typeobject** %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %9 = load %struct._typeobject*, %struct._typeobject** %retval
  ret %struct._typeobject* %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @get_dict_descriptor(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %descr = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @_PyType_LookupId(%struct._typeobject* %0, %struct._Py_Identifier* @PyId___dict__)
  store %struct._object* %call, %struct._object** %descr, align 8
  %1 = load %struct._object*, %struct._object** %descr, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %descr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_descr_set = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 33
  %4 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** %tp_descr_set, align 8
  %cmp1 = icmp ne i32 (%struct._object*, %struct._object*, %struct._object*)* %4, null
  br i1 %cmp1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %5, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %6
}

; Function Attrs: nounwind uwtable
define internal void @raise_dict_descr_error(%struct._object* %obj) #0 {
entry:
  %obj.addr = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %1 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %0, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.257, i32 0, i32 0), i8* %3)
  ret void
}

declare %struct._object* @PyObject_GenericGetDict(%struct._object*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @traverse_slots(%struct._typeobject* %type, %struct._object* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %self.addr = alloca %struct._object*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %mp = alloca %struct.PyMemberDef*, align 8
  %addr = alloca i8*, align 8
  %obj = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %n, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = bitcast %struct._typeobject* %3 to %struct._heaptypeobject*
  %5 = bitcast %struct._heaptypeobject* %4 to i8*
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %7 = bitcast %struct._typeobject* %6 to %struct._heaptypeobject*
  %8 = bitcast %struct._heaptypeobject* %7 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 2
  %10 = load i64, i64* %tp_basicsize, align 8
  %add.ptr = getelementptr i8, i8* %5, i64 %10
  %11 = bitcast i8* %add.ptr to %struct.PyMemberDef*
  store %struct.PyMemberDef* %11, %struct.PyMemberDef** %mp, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i64, i64* %i, align 8
  %13 = load i64, i64* %n, align 8
  %cmp = icmp slt i64 %12, %13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %type1 = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %14, i32 0, i32 1
  %15 = load i32, i32* %type1, align 4
  %cmp2 = icmp eq i32 %15, 16
  br i1 %cmp2, label %if.then, label %if.end.8

if.then:                                          ; preds = %for.body
  %16 = load %struct._object*, %struct._object** %self.addr, align 8
  %17 = bitcast %struct._object* %16 to i8*
  %18 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %offset = getelementptr inbounds %struct.PyMemberDef, %struct.PyMemberDef* %18, i32 0, i32 2
  %19 = load i64, i64* %offset, align 8
  %add.ptr3 = getelementptr i8, i8* %17, i64 %19
  store i8* %add.ptr3, i8** %addr, align 8
  %20 = load i8*, i8** %addr, align 8
  %21 = bitcast i8* %20 to %struct._object**
  %22 = load %struct._object*, %struct._object** %21, align 8
  store %struct._object* %22, %struct._object** %obj, align 8
  %23 = load %struct._object*, %struct._object** %obj, align 8
  %cmp4 = icmp ne %struct._object* %23, null
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %if.then
  %24 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %25 = load %struct._object*, %struct._object** %obj, align 8
  %26 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %24(%struct._object* %25, i8* %26)
  store i32 %call, i32* %err, align 4
  %27 = load i32, i32* %err, align 4
  %tobool = icmp ne i32 %27, 0
  br i1 %tobool, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then.5
  %28 = load i32, i32* %err, align 4
  store i32 %28, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.5
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %if.then
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.8
  %29 = load i64, i64* %i, align 8
  %inc = add i64 %29, 1
  store i64 %inc, i64* %i, align 8
  %30 = load %struct.PyMemberDef*, %struct.PyMemberDef** %mp, align 8
  %incdec.ptr = getelementptr %struct.PyMemberDef, %struct.PyMemberDef* %30, i32 1
  store %struct.PyMemberDef* %incdec.ptr, %struct.PyMemberDef** %mp, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.6
  %31 = load i32, i32* %retval
  ret i32 %31
}

declare %struct._object* @PyObject_RichCompare(%struct._object*, %struct._object*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_reduce_ex(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %reduce = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %proto = alloca i32, align 4
  %cls = alloca %struct._object*, align 8
  %clsreduce = alloca %struct._object*, align 8
  %override = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp21 = alloca %struct._object*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %proto, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.270, i32 0, i32 0), i32* %proto)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** @object_reduce_ex.objreduce, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %2 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyBaseObject_Type, i32 0, i32 31), align 8
  %call2 = call %struct._object* @_PyDict_GetItemId(%struct._object* %2, %struct._Py_Identifier* @object_reduce_ex.PyId___reduce__)
  store %struct._object* %call2, %struct._object** @object_reduce_ex.objreduce, align 8
  %3 = load %struct._object*, %struct._object** @object_reduce_ex.objreduce, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %call7 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %4, %struct._Py_Identifier* @object_reduce_ex.PyId___reduce__)
  store %struct._object* %call7, %struct._object** %reduce, align 8
  %5 = load %struct._object*, %struct._object** %reduce, align 8
  %cmp8 = icmp eq %struct._object* %5, null
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end.6
  call void @PyErr_Clear()
  br label %if.end.61

if.else:                                          ; preds = %if.end.6
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %8 = bitcast %struct._typeobject* %7 to %struct._object*
  store %struct._object* %8, %struct._object** %cls, align 8
  %9 = load %struct._object*, %struct._object** %cls, align 8
  %call10 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %9, %struct._Py_Identifier* @object_reduce_ex.PyId___reduce__)
  store %struct._object* %call10, %struct._object** %clsreduce, align 8
  %10 = load %struct._object*, %struct._object** %clsreduce, align 8
  %cmp11 = icmp eq %struct._object* %10, null
  br i1 %cmp11, label %if.then.12, label %if.end.18

if.then.12:                                       ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.12
  %11 = load %struct._object*, %struct._object** %reduce, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp13 = icmp ne i64 %dec, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body
  br label %if.end.17

if.else.15:                                       ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.17
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %if.else
  %18 = load %struct._object*, %struct._object** %clsreduce, align 8
  %19 = load %struct._object*, %struct._object** @object_reduce_ex.objreduce, align 8
  %cmp19 = icmp ne %struct._object* %18, %19
  %conv = zext i1 %cmp19 to i32
  store i32 %conv, i32* %override, align 4
  br label %do.body.20

do.body.20:                                       ; preds = %if.end.18
  %20 = load %struct._object*, %struct._object** %clsreduce, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp21, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt22, align 8
  %dec23 = add i64 %22, -1
  store i64 %dec23, i64* %ob_refcnt22, align 8
  %cmp24 = icmp ne i64 %dec23, 0
  br i1 %cmp24, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %do.body.20
  br label %if.end.30

if.else.27:                                       ; preds = %do.body.20
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  call void %25(%struct._object* %26)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  %27 = load i32, i32* %override, align 4
  %tobool32 = icmp ne i32 %27, 0
  br i1 %tobool32, label %if.then.33, label %if.else.47

if.then.33:                                       ; preds = %do.end.31
  %28 = load %struct._object*, %struct._object** %reduce, align 8
  %call34 = call %struct._object* @PyObject_CallObject(%struct._object* %28, %struct._object* null)
  store %struct._object* %call34, %struct._object** %res, align 8
  br label %do.body.35

do.body.35:                                       ; preds = %if.then.33
  %29 = load %struct._object*, %struct._object** %reduce, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp36, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt37, align 8
  %dec38 = add i64 %31, -1
  store i64 %dec38, i64* %ob_refcnt37, align 8
  %cmp39 = icmp ne i64 %dec38, 0
  br i1 %cmp39, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.35
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.35
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  call void %34(%struct._object* %35)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  %36 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %36, %struct._object** %retval
  br label %return

if.else.47:                                       ; preds = %do.end.31
  br label %do.body.48

do.body.48:                                       ; preds = %if.else.47
  %37 = load %struct._object*, %struct._object** %reduce, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp49, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %39, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.54, label %if.else.55

if.then.54:                                       ; preds = %do.body.48
  br label %if.end.58

if.else.55:                                       ; preds = %do.body.48
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type56 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type56, align 8
  %tp_dealloc57 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc57, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %42(%struct._object* %43)
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.55, %if.then.54
  br label %do.end.59

do.end.59:                                        ; preds = %if.end.58
  br label %if.end.60

if.end.60:                                        ; preds = %do.end.59
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.then.9
  %44 = load %struct._object*, %struct._object** %self.addr, align 8
  %45 = load i32, i32* %proto, align 4
  %call62 = call %struct._object* @_common_reduce(%struct._object* %44, i32 %45)
  store %struct._object* %call62, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.61, %do.end.46, %do.end, %if.then.4, %if.then
  %46 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %46
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_reduce(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %proto = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %proto, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.291, i32 0, i32 0), i32* %proto)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load i32, i32* %proto, align 4
  %call1 = call %struct._object* @_common_reduce(%struct._object* %1, i32 %2)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_subclasshook(%struct._object* %cls, %struct._object* %args) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %0, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  ret %struct._object* @_Py_NotImplementedStruct
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_format(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %format_spec = alloca %struct._object*, align 8
  %self_as_str = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %self_as_str, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.292, i32 0, i32 0), %struct._object** %format_spec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %call1 = call %struct._object* @PyObject_Str(%struct._object* %1)
  store %struct._object* %call1, %struct._object** %self_as_str, align 8
  %2 = load %struct._object*, %struct._object** %self_as_str, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %format_spec, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %4, i32 0, i32 1
  %5 = load i64, i64* %length, align 8
  %cmp3 = icmp sgt i64 %5, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.2
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.293, i32 0, i32 0))
  br label %done

if.end.5:                                         ; preds = %if.then.2
  %7 = load %struct._object*, %struct._object** %self_as_str, align 8
  %8 = load %struct._object*, %struct._object** %format_spec, align 8
  %call6 = call %struct._object* @PyObject_Format(%struct._object* %7, %struct._object* %8)
  store %struct._object* %call6, %struct._object** %result, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.5, %if.end
  br label %done

done:                                             ; preds = %if.end.7, %if.then.4
  br label %do.body

do.body:                                          ; preds = %done
  %9 = load %struct._object*, %struct._object** %self_as_str, align 8
  store %struct._object* %9, %struct._object** %_py_xdecref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp8 = icmp ne %struct._object* %10, null
  br i1 %cmp8, label %if.then.9, label %if.end.14

if.then.9:                                        ; preds = %do.body
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.9
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body.10
  br label %if.end.13

if.else:                                          ; preds = %do.body.10
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %if.end.14

if.end.14:                                        ; preds = %do.end, %do.body
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  %18 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %18, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.15, %if.then
  %19 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %19
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_sizeof(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %res = alloca i64, align 8
  %isize = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i64 0, i64* %res, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_itemsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 3
  %2 = load i64, i64* %tp_itemsize, align 8
  store i64 %2, i64* %isize, align 8
  %3 = load i64, i64* %isize, align 8
  %cmp = icmp sgt i64 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %6, i32 0, i32 1
  %7 = load i64, i64* %ob_size, align 8
  %8 = load i64, i64* %isize, align 8
  %mul = mul i64 %7, %8
  store i64 %mul, i64* %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_basicsize = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 2
  %11 = load i64, i64* %tp_basicsize, align 8
  %12 = load i64, i64* %res, align 8
  %add = add i64 %12, %11
  store i64 %add, i64* %res, align 8
  %13 = load i64, i64* %res, align 8
  %call = call %struct._object* @PyLong_FromSsize_t(i64 %13)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_dir(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %itsclass = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_xdecref_tmp54 = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %dict, align 8
  store %struct._object* null, %struct._object** %itsclass, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @PyId___dict__)
  store %struct._object* %call, %struct._object** %dict, align 8
  %1 = load %struct._object*, %struct._object** %dict, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @PyErr_Clear()
  %call1 = call %struct._object* @PyDict_New()
  store %struct._object* %call1, %struct._object** %dict, align 8
  br label %if.end.23

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dict, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 536870912
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.else.9, label %if.then.3

if.then.3:                                        ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %5 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %do.body
  br label %if.end

if.else.6:                                        ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  %call8 = call %struct._object* @PyDict_New()
  store %struct._object* %call8, %struct._object** %dict, align 8
  br label %if.end.22

if.else.9:                                        ; preds = %if.else
  %12 = load %struct._object*, %struct._object** %dict, align 8
  %call10 = call %struct._object* @PyDict_Copy(%struct._object* %12)
  store %struct._object* %call10, %struct._object** %temp, align 8
  br label %do.body.11

do.body.11:                                       ; preds = %if.else.9
  %13 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp12, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt13, align 8
  %dec14 = add i64 %15, -1
  store i64 %dec14, i64* %ob_refcnt13, align 8
  %cmp15 = icmp ne i64 %dec14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20

if.else.17:                                       ; preds = %do.body.11
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  call void %18(%struct._object* %19)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  %20 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %20, %struct._object** %dict, align 8
  br label %if.end.22

if.end.22:                                        ; preds = %do.end.21, %do.end
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.22, %if.then
  %21 = load %struct._object*, %struct._object** %dict, align 8
  %cmp24 = icmp eq %struct._object* %21, null
  br i1 %cmp24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.end.23
  br label %error

if.end.26:                                        ; preds = %if.end.23
  %22 = load %struct._object*, %struct._object** %self.addr, align 8
  %call27 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %22, %struct._Py_Identifier* @PyId___class__)
  store %struct._object* %call27, %struct._object** %itsclass, align 8
  %23 = load %struct._object*, %struct._object** %itsclass, align 8
  %cmp28 = icmp eq %struct._object* %23, null
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %if.end.26
  call void @PyErr_Clear()
  br label %if.end.35

if.else.30:                                       ; preds = %if.end.26
  %24 = load %struct._object*, %struct._object** %dict, align 8
  %25 = load %struct._object*, %struct._object** %itsclass, align 8
  %call31 = call i32 @merge_class_dict(%struct._object* %24, %struct._object* %25)
  %cmp32 = icmp ne i32 %call31, 0
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.else.30
  br label %error

if.end.34:                                        ; preds = %if.else.30
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.then.29
  %26 = load %struct._object*, %struct._object** %dict, align 8
  %call36 = call %struct._object* @PyDict_Keys(%struct._object* %26)
  store %struct._object* %call36, %struct._object** %result, align 8
  br label %error

error:                                            ; preds = %if.end.35, %if.then.33, %if.then.25
  br label %do.body.37

do.body.37:                                       ; preds = %error
  %27 = load %struct._object*, %struct._object** %itsclass, align 8
  store %struct._object* %27, %struct._object** %_py_xdecref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp38 = icmp ne %struct._object* %28, null
  br i1 %cmp38, label %if.then.39, label %if.end.51

if.then.39:                                       ; preds = %do.body.37
  br label %do.body.40

do.body.40:                                       ; preds = %if.then.39
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp41, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %31, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %34(%struct._object* %35)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %if.end.51

if.end.51:                                        ; preds = %do.end.50, %do.body.37
  br label %do.end.52

do.end.52:                                        ; preds = %if.end.51
  br label %do.body.53

do.body.53:                                       ; preds = %do.end.52
  %36 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %36, %struct._object** %_py_xdecref_tmp54, align 8
  %37 = load %struct._object*, %struct._object** %_py_xdecref_tmp54, align 8
  %cmp55 = icmp ne %struct._object* %37, null
  br i1 %cmp55, label %if.then.56, label %if.end.68

if.then.56:                                       ; preds = %do.body.53
  br label %do.body.57

do.body.57:                                       ; preds = %if.then.56
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp54, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp58, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt59, align 8
  %dec60 = add i64 %40, -1
  store i64 %dec60, i64* %ob_refcnt59, align 8
  %cmp61 = icmp ne i64 %dec60, 0
  br i1 %cmp61, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %do.body.57
  br label %if.end.66

if.else.63:                                       ; preds = %do.body.57
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  call void %43(%struct._object* %44)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  br label %if.end.68

if.end.68:                                        ; preds = %do.end.67, %do.body.53
  br label %do.end.69

do.end.69:                                        ; preds = %if.end.68
  %45 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %45
}

declare i32 @PyArg_ParseTuple(%struct._object*, i8*, ...) #1

declare %struct._object* @PyObject_CallObject(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @_common_reduce(%struct._object* %self, i32 %proto) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %proto.addr = alloca i32, align 4
  %copyreg = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 %proto, i32* %proto.addr, align 4
  %0 = load i32, i32* %proto.addr, align 4
  %cmp = icmp sge i32 %0, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @reduce_4(%struct._object* %1)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load i32, i32* %proto.addr, align 4
  %cmp1 = icmp sge i32 %2, 2
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.else
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %call3 = call %struct._object* @reduce_2(%struct._object* %3)
  store %struct._object* %call3, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end.4

if.end.4:                                         ; preds = %if.end
  %call5 = call %struct._object* @import_copyreg()
  store %struct._object* %call5, %struct._object** %copyreg, align 8
  %4 = load %struct._object*, %struct._object** %copyreg, align 8
  %tobool = icmp ne %struct._object* %4, null
  br i1 %tobool, label %if.end.7, label %if.then.6

if.then.6:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %5 = load %struct._object*, %struct._object** %copyreg, align 8
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = load i32, i32* %proto.addr, align 4
  %call8 = call %struct._object* (%struct._object*, i8*, i8*, ...) @PyEval_CallMethod(%struct._object* %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.271, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.272, i32 0, i32 0), %struct._object* %6, i32 %7)
  store %struct._object* %call8, %struct._object** %res, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.7
  %8 = load %struct._object*, %struct._object** %copyreg, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %do.body
  br label %if.end.12

if.else.11:                                       ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else.11, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.12
  %15 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.6, %if.then.2, %if.then
  %16 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %16
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @reduce_4(%struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %kwargs = alloca %struct._object*, align 8
  %copyreg = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %newargs = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %listitems = alloca %struct._object*, align 8
  %dictitems = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp22 = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp48 = alloca %struct._object*, align 8
  %_py_decref_tmp59 = alloca %struct._object*, align 8
  %_py_decref_tmp73 = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  %_py_decref_tmp112 = alloca %struct._object*, align 8
  %_py_decref_tmp123 = alloca %struct._object*, align 8
  %_py_decref_tmp138 = alloca %struct._object*, align 8
  %_py_decref_tmp149 = alloca %struct._object*, align 8
  %_py_decref_tmp160 = alloca %struct._object*, align 8
  %_py_decref_tmp173 = alloca %struct._object*, align 8
  %_py_decref_tmp184 = alloca %struct._object*, align 8
  %_py_decref_tmp195 = alloca %struct._object*, align 8
  %_py_decref_tmp206 = alloca %struct._object*, align 8
  %_py_decref_tmp217 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* null, %struct._object** %args, align 8
  store %struct._object* null, %struct._object** %kwargs, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @_PyObject_GetNewArguments(%struct._object* %0, %struct._object** %args, %struct._object** %kwargs)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %args, align 8
  %cmp1 = icmp eq %struct._object* %1, null
  br i1 %cmp1, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call3, %struct._object** %args, align 8
  %2 = load %struct._object*, %struct._object** %args, align 8
  %cmp4 = icmp eq %struct._object* %2, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6, %if.end
  %3 = load %struct._object*, %struct._object** %kwargs, align 8
  %cmp8 = icmp eq %struct._object* %3, null
  br i1 %cmp8, label %if.then.9, label %if.end.14

if.then.9:                                        ; preds = %if.end.7
  %call10 = call %struct._object* @PyDict_New()
  store %struct._object* %call10, %struct._object** %kwargs, align 8
  %4 = load %struct._object*, %struct._object** %kwargs, align 8
  %cmp11 = icmp eq %struct._object* %4, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.then.9
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %if.end.7
  %call15 = call %struct._object* @import_copyreg()
  store %struct._object* %call15, %struct._object** %copyreg, align 8
  %5 = load %struct._object*, %struct._object** %copyreg, align 8
  %cmp16 = icmp eq %struct._object* %5, null
  br i1 %cmp16, label %if.then.17, label %if.end.32

if.then.17:                                       ; preds = %if.end.14
  br label %do.body

do.body:                                          ; preds = %if.then.17
  %6 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp18 = icmp ne i64 %dec, 0
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %do.body
  br label %if.end.20

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.19
  br label %do.end

do.end:                                           ; preds = %if.end.20
  br label %do.body.21

do.body.21:                                       ; preds = %do.end
  %13 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp22, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt23, align 8
  %dec24 = add i64 %15, -1
  store i64 %dec24, i64* %ob_refcnt23, align 8
  %cmp25 = icmp ne i64 %dec24, 0
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %do.body.21
  br label %if.end.30

if.else.27:                                       ; preds = %do.body.21
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  call void %18(%struct._object* %19)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.32:                                        ; preds = %if.end.14
  %20 = load %struct._object*, %struct._object** %copyreg, align 8
  %call33 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %20, %struct._Py_Identifier* @reduce_4.PyId___newobj_ex__)
  store %struct._object* %call33, %struct._object** %newobj, align 8
  br label %do.body.34

do.body.34:                                       ; preds = %if.end.32
  %21 = load %struct._object*, %struct._object** %copyreg, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp35, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt36, align 8
  %dec37 = add i64 %23, -1
  store i64 %dec37, i64* %ob_refcnt36, align 8
  %cmp38 = icmp ne i64 %dec37, 0
  br i1 %cmp38, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %do.body.34
  br label %if.end.43

if.else.40:                                       ; preds = %do.body.34
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  call void %26(%struct._object* %27)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  %28 = load %struct._object*, %struct._object** %newobj, align 8
  %cmp45 = icmp eq %struct._object* %28, null
  br i1 %cmp45, label %if.then.46, label %if.end.69

if.then.46:                                       ; preds = %do.end.44
  br label %do.body.47

do.body.47:                                       ; preds = %if.then.46
  %29 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp48, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_refcnt49 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt49, align 8
  %dec50 = add i64 %31, -1
  store i64 %dec50, i64* %ob_refcnt49, align 8
  %cmp51 = icmp ne i64 %dec50, 0
  br i1 %cmp51, label %if.then.52, label %if.else.53

if.then.52:                                       ; preds = %do.body.47
  br label %if.end.56

if.else.53:                                       ; preds = %do.body.47
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_type54 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type54, align 8
  %tp_dealloc55 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc55, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  call void %34(%struct._object* %35)
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.53, %if.then.52
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  br label %do.body.58

do.body.58:                                       ; preds = %do.end.57
  %36 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp59, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt60, align 8
  %dec61 = add i64 %38, -1
  store i64 %dec61, i64* %ob_refcnt60, align 8
  %cmp62 = icmp ne i64 %dec61, 0
  br i1 %cmp62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %do.body.58
  br label %if.end.67

if.else.64:                                       ; preds = %do.body.58
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  call void %41(%struct._object* %42)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.69:                                        ; preds = %do.end.44
  %43 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8
  %45 = load %struct._object*, %struct._object** %args, align 8
  %46 = load %struct._object*, %struct._object** %kwargs, align 8
  %call71 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 3, %struct._typeobject* %44, %struct._object* %45, %struct._object* %46)
  store %struct._object* %call71, %struct._object** %newargs, align 8
  br label %do.body.72

do.body.72:                                       ; preds = %if.end.69
  %47 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp73, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8
  %ob_refcnt74 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt74, align 8
  %dec75 = add i64 %49, -1
  store i64 %dec75, i64* %ob_refcnt74, align 8
  %cmp76 = icmp ne i64 %dec75, 0
  br i1 %cmp76, label %if.then.77, label %if.else.78

if.then.77:                                       ; preds = %do.body.72
  br label %if.end.81

if.else.78:                                       ; preds = %do.body.72
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8
  %ob_type79 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type79, align 8
  %tp_dealloc80 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc80, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp73, align 8
  call void %52(%struct._object* %53)
  br label %if.end.81

if.end.81:                                        ; preds = %if.else.78, %if.then.77
  br label %do.end.82

do.end.82:                                        ; preds = %if.end.81
  br label %do.body.83

do.body.83:                                       ; preds = %do.end.82
  %54 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp84, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt85, align 8
  %dec86 = add i64 %56, -1
  store i64 %dec86, i64* %ob_refcnt85, align 8
  %cmp87 = icmp ne i64 %dec86, 0
  br i1 %cmp87, label %if.then.88, label %if.else.89

if.then.88:                                       ; preds = %do.body.83
  br label %if.end.92

if.else.89:                                       ; preds = %do.body.83
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_type90 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type90, align 8
  %tp_dealloc91 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc91, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  call void %59(%struct._object* %60)
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.89, %if.then.88
  br label %do.end.93

do.end.93:                                        ; preds = %if.end.92
  %61 = load %struct._object*, %struct._object** %newargs, align 8
  %cmp94 = icmp eq %struct._object* %61, null
  br i1 %cmp94, label %if.then.95, label %if.end.107

if.then.95:                                       ; preds = %do.end.93
  br label %do.body.96

do.body.96:                                       ; preds = %if.then.95
  %62 = load %struct._object*, %struct._object** %newobj, align 8
  store %struct._object* %62, %struct._object** %_py_decref_tmp97, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0
  %64 = load i64, i64* %ob_refcnt98, align 8
  %dec99 = add i64 %64, -1
  store i64 %dec99, i64* %ob_refcnt98, align 8
  %cmp100 = icmp ne i64 %dec99, 0
  br i1 %cmp100, label %if.then.101, label %if.else.102

if.then.101:                                      ; preds = %do.body.96
  br label %if.end.105

if.else.102:                                      ; preds = %do.body.96
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_type103 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type103, align 8
  %tp_dealloc104 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc104, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  call void %67(%struct._object* %68)
  br label %if.end.105

if.end.105:                                       ; preds = %if.else.102, %if.then.101
  br label %do.end.106

do.end.106:                                       ; preds = %if.end.105
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.107:                                       ; preds = %do.end.93
  %69 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call108 = call %struct._object* @_PyObject_GetState(%struct._object* %69)
  store %struct._object* %call108, %struct._object** %state, align 8
  %70 = load %struct._object*, %struct._object** %state, align 8
  %cmp109 = icmp eq %struct._object* %70, null
  br i1 %cmp109, label %if.then.110, label %if.end.133

if.then.110:                                      ; preds = %if.end.107
  br label %do.body.111

do.body.111:                                      ; preds = %if.then.110
  %71 = load %struct._object*, %struct._object** %newobj, align 8
  store %struct._object* %71, %struct._object** %_py_decref_tmp112, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  %ob_refcnt113 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0
  %73 = load i64, i64* %ob_refcnt113, align 8
  %dec114 = add i64 %73, -1
  store i64 %dec114, i64* %ob_refcnt113, align 8
  %cmp115 = icmp ne i64 %dec114, 0
  br i1 %cmp115, label %if.then.116, label %if.else.117

if.then.116:                                      ; preds = %do.body.111
  br label %if.end.120

if.else.117:                                      ; preds = %do.body.111
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  %ob_type118 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type118, align 8
  %tp_dealloc119 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc119, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  call void %76(%struct._object* %77)
  br label %if.end.120

if.end.120:                                       ; preds = %if.else.117, %if.then.116
  br label %do.end.121

do.end.121:                                       ; preds = %if.end.120
  br label %do.body.122

do.body.122:                                      ; preds = %do.end.121
  %78 = load %struct._object*, %struct._object** %newargs, align 8
  store %struct._object* %78, %struct._object** %_py_decref_tmp123, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_refcnt124 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 0
  %80 = load i64, i64* %ob_refcnt124, align 8
  %dec125 = add i64 %80, -1
  store i64 %dec125, i64* %ob_refcnt124, align 8
  %cmp126 = icmp ne i64 %dec125, 0
  br i1 %cmp126, label %if.then.127, label %if.else.128

if.then.127:                                      ; preds = %do.body.122
  br label %if.end.131

if.else.128:                                      ; preds = %do.body.122
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_type129 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 1
  %82 = load %struct._typeobject*, %struct._typeobject** %ob_type129, align 8
  %tp_dealloc130 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %82, i32 0, i32 4
  %83 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc130, align 8
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  call void %83(%struct._object* %84)
  br label %if.end.131

if.end.131:                                       ; preds = %if.else.128, %if.then.127
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.133:                                       ; preds = %if.end.107
  %85 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call134 = call i32 @_PyObject_GetItemsIter(%struct._object* %85, %struct._object** %listitems, %struct._object** %dictitems)
  %cmp135 = icmp slt i32 %call134, 0
  br i1 %cmp135, label %if.then.136, label %if.end.170

if.then.136:                                      ; preds = %if.end.133
  br label %do.body.137

do.body.137:                                      ; preds = %if.then.136
  %86 = load %struct._object*, %struct._object** %newobj, align 8
  store %struct._object* %86, %struct._object** %_py_decref_tmp138, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8
  %ob_refcnt139 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0
  %88 = load i64, i64* %ob_refcnt139, align 8
  %dec140 = add i64 %88, -1
  store i64 %dec140, i64* %ob_refcnt139, align 8
  %cmp141 = icmp ne i64 %dec140, 0
  br i1 %cmp141, label %if.then.142, label %if.else.143

if.then.142:                                      ; preds = %do.body.137
  br label %if.end.146

if.else.143:                                      ; preds = %do.body.137
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8
  %ob_type144 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type144, align 8
  %tp_dealloc145 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc145, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp138, align 8
  call void %91(%struct._object* %92)
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.143, %if.then.142
  br label %do.end.147

do.end.147:                                       ; preds = %if.end.146
  br label %do.body.148

do.body.148:                                      ; preds = %do.end.147
  %93 = load %struct._object*, %struct._object** %newargs, align 8
  store %struct._object* %93, %struct._object** %_py_decref_tmp149, align 8
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  %ob_refcnt150 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 0
  %95 = load i64, i64* %ob_refcnt150, align 8
  %dec151 = add i64 %95, -1
  store i64 %dec151, i64* %ob_refcnt150, align 8
  %cmp152 = icmp ne i64 %dec151, 0
  br i1 %cmp152, label %if.then.153, label %if.else.154

if.then.153:                                      ; preds = %do.body.148
  br label %if.end.157

if.else.154:                                      ; preds = %do.body.148
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  %ob_type155 = getelementptr inbounds %struct._object, %struct._object* %96, i32 0, i32 1
  %97 = load %struct._typeobject*, %struct._typeobject** %ob_type155, align 8
  %tp_dealloc156 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %97, i32 0, i32 4
  %98 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc156, align 8
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp149, align 8
  call void %98(%struct._object* %99)
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.154, %if.then.153
  br label %do.end.158

do.end.158:                                       ; preds = %if.end.157
  br label %do.body.159

do.body.159:                                      ; preds = %do.end.158
  %100 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %100, %struct._object** %_py_decref_tmp160, align 8
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8
  %ob_refcnt161 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 0
  %102 = load i64, i64* %ob_refcnt161, align 8
  %dec162 = add i64 %102, -1
  store i64 %dec162, i64* %ob_refcnt161, align 8
  %cmp163 = icmp ne i64 %dec162, 0
  br i1 %cmp163, label %if.then.164, label %if.else.165

if.then.164:                                      ; preds = %do.body.159
  br label %if.end.168

if.else.165:                                      ; preds = %do.body.159
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8
  %ob_type166 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 1
  %104 = load %struct._typeobject*, %struct._typeobject** %ob_type166, align 8
  %tp_dealloc167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %104, i32 0, i32 4
  %105 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc167, align 8
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8
  call void %105(%struct._object* %106)
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.165, %if.then.164
  br label %do.end.169

do.end.169:                                       ; preds = %if.end.168
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.170:                                       ; preds = %if.end.133
  %107 = load %struct._object*, %struct._object** %newobj, align 8
  %108 = load %struct._object*, %struct._object** %newargs, align 8
  %109 = load %struct._object*, %struct._object** %state, align 8
  %110 = load %struct._object*, %struct._object** %listitems, align 8
  %111 = load %struct._object*, %struct._object** %dictitems, align 8
  %call171 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 5, %struct._object* %107, %struct._object* %108, %struct._object* %109, %struct._object* %110, %struct._object* %111)
  store %struct._object* %call171, %struct._object** %result, align 8
  br label %do.body.172

do.body.172:                                      ; preds = %if.end.170
  %112 = load %struct._object*, %struct._object** %newobj, align 8
  store %struct._object* %112, %struct._object** %_py_decref_tmp173, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  %ob_refcnt174 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 0
  %114 = load i64, i64* %ob_refcnt174, align 8
  %dec175 = add i64 %114, -1
  store i64 %dec175, i64* %ob_refcnt174, align 8
  %cmp176 = icmp ne i64 %dec175, 0
  br i1 %cmp176, label %if.then.177, label %if.else.178

if.then.177:                                      ; preds = %do.body.172
  br label %if.end.181

if.else.178:                                      ; preds = %do.body.172
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  %ob_type179 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 1
  %116 = load %struct._typeobject*, %struct._typeobject** %ob_type179, align 8
  %tp_dealloc180 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %116, i32 0, i32 4
  %117 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc180, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  call void %117(%struct._object* %118)
  br label %if.end.181

if.end.181:                                       ; preds = %if.else.178, %if.then.177
  br label %do.end.182

do.end.182:                                       ; preds = %if.end.181
  br label %do.body.183

do.body.183:                                      ; preds = %do.end.182
  %119 = load %struct._object*, %struct._object** %newargs, align 8
  store %struct._object* %119, %struct._object** %_py_decref_tmp184, align 8
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp184, align 8
  %ob_refcnt185 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 0
  %121 = load i64, i64* %ob_refcnt185, align 8
  %dec186 = add i64 %121, -1
  store i64 %dec186, i64* %ob_refcnt185, align 8
  %cmp187 = icmp ne i64 %dec186, 0
  br i1 %cmp187, label %if.then.188, label %if.else.189

if.then.188:                                      ; preds = %do.body.183
  br label %if.end.192

if.else.189:                                      ; preds = %do.body.183
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp184, align 8
  %ob_type190 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type190, align 8
  %tp_dealloc191 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 4
  %124 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc191, align 8
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp184, align 8
  call void %124(%struct._object* %125)
  br label %if.end.192

if.end.192:                                       ; preds = %if.else.189, %if.then.188
  br label %do.end.193

do.end.193:                                       ; preds = %if.end.192
  br label %do.body.194

do.body.194:                                      ; preds = %do.end.193
  %126 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %126, %struct._object** %_py_decref_tmp195, align 8
  %127 = load %struct._object*, %struct._object** %_py_decref_tmp195, align 8
  %ob_refcnt196 = getelementptr inbounds %struct._object, %struct._object* %127, i32 0, i32 0
  %128 = load i64, i64* %ob_refcnt196, align 8
  %dec197 = add i64 %128, -1
  store i64 %dec197, i64* %ob_refcnt196, align 8
  %cmp198 = icmp ne i64 %dec197, 0
  br i1 %cmp198, label %if.then.199, label %if.else.200

if.then.199:                                      ; preds = %do.body.194
  br label %if.end.203

if.else.200:                                      ; preds = %do.body.194
  %129 = load %struct._object*, %struct._object** %_py_decref_tmp195, align 8
  %ob_type201 = getelementptr inbounds %struct._object, %struct._object* %129, i32 0, i32 1
  %130 = load %struct._typeobject*, %struct._typeobject** %ob_type201, align 8
  %tp_dealloc202 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %130, i32 0, i32 4
  %131 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc202, align 8
  %132 = load %struct._object*, %struct._object** %_py_decref_tmp195, align 8
  call void %131(%struct._object* %132)
  br label %if.end.203

if.end.203:                                       ; preds = %if.else.200, %if.then.199
  br label %do.end.204

do.end.204:                                       ; preds = %if.end.203
  br label %do.body.205

do.body.205:                                      ; preds = %do.end.204
  %133 = load %struct._object*, %struct._object** %listitems, align 8
  store %struct._object* %133, %struct._object** %_py_decref_tmp206, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp206, align 8
  %ob_refcnt207 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 0
  %135 = load i64, i64* %ob_refcnt207, align 8
  %dec208 = add i64 %135, -1
  store i64 %dec208, i64* %ob_refcnt207, align 8
  %cmp209 = icmp ne i64 %dec208, 0
  br i1 %cmp209, label %if.then.210, label %if.else.211

if.then.210:                                      ; preds = %do.body.205
  br label %if.end.214

if.else.211:                                      ; preds = %do.body.205
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp206, align 8
  %ob_type212 = getelementptr inbounds %struct._object, %struct._object* %136, i32 0, i32 1
  %137 = load %struct._typeobject*, %struct._typeobject** %ob_type212, align 8
  %tp_dealloc213 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %137, i32 0, i32 4
  %138 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc213, align 8
  %139 = load %struct._object*, %struct._object** %_py_decref_tmp206, align 8
  call void %138(%struct._object* %139)
  br label %if.end.214

if.end.214:                                       ; preds = %if.else.211, %if.then.210
  br label %do.end.215

do.end.215:                                       ; preds = %if.end.214
  br label %do.body.216

do.body.216:                                      ; preds = %do.end.215
  %140 = load %struct._object*, %struct._object** %dictitems, align 8
  store %struct._object* %140, %struct._object** %_py_decref_tmp217, align 8
  %141 = load %struct._object*, %struct._object** %_py_decref_tmp217, align 8
  %ob_refcnt218 = getelementptr inbounds %struct._object, %struct._object* %141, i32 0, i32 0
  %142 = load i64, i64* %ob_refcnt218, align 8
  %dec219 = add i64 %142, -1
  store i64 %dec219, i64* %ob_refcnt218, align 8
  %cmp220 = icmp ne i64 %dec219, 0
  br i1 %cmp220, label %if.then.221, label %if.else.222

if.then.221:                                      ; preds = %do.body.216
  br label %if.end.225

if.else.222:                                      ; preds = %do.body.216
  %143 = load %struct._object*, %struct._object** %_py_decref_tmp217, align 8
  %ob_type223 = getelementptr inbounds %struct._object, %struct._object* %143, i32 0, i32 1
  %144 = load %struct._typeobject*, %struct._typeobject** %ob_type223, align 8
  %tp_dealloc224 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %144, i32 0, i32 4
  %145 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc224, align 8
  %146 = load %struct._object*, %struct._object** %_py_decref_tmp217, align 8
  call void %145(%struct._object* %146)
  br label %if.end.225

if.end.225:                                       ; preds = %if.else.222, %if.then.221
  br label %do.end.226

do.end.226:                                       ; preds = %if.end.225
  %147 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %147, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.226, %do.end.169, %do.end.132, %do.end.106, %do.end.68, %do.end.31, %if.then.12, %if.then.5, %if.then
  %148 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %148
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @reduce_2(%struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %cls = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %args2 = alloca %struct._object*, align 8
  %kwargs = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %listitems = alloca %struct._object*, align 8
  %dictitems = alloca %struct._object*, align 8
  %copyreg = alloca %struct._object*, align 8
  %newobj = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp32 = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  %_py_xdecref_tmp95 = alloca %struct._object*, align 8
  %_py_decref_tmp99 = alloca %struct._object*, align 8
  %_py_xdecref_tmp112 = alloca %struct._object*, align 8
  %_py_decref_tmp116 = alloca %struct._object*, align 8
  %_py_xdecref_tmp129 = alloca %struct._object*, align 8
  %_py_decref_tmp133 = alloca %struct._object*, align 8
  %_py_xdecref_tmp146 = alloca %struct._object*, align 8
  %_py_decref_tmp150 = alloca %struct._object*, align 8
  %_py_xdecref_tmp163 = alloca %struct._object*, align 8
  %_py_decref_tmp167 = alloca %struct._object*, align 8
  %_py_xdecref_tmp180 = alloca %struct._object*, align 8
  %_py_decref_tmp184 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object* null, %struct._object** %args, align 8
  store %struct._object* null, %struct._object** %args2, align 8
  store %struct._object* null, %struct._object** %kwargs, align 8
  store %struct._object* null, %struct._object** %state, align 8
  store %struct._object* null, %struct._object** %listitems, align 8
  store %struct._object* null, %struct._object** %dictitems, align 8
  store %struct._object* null, %struct._object** %copyreg, align 8
  store %struct._object* null, %struct._object** %newobj, align 8
  store %struct._object* null, %struct._object** %res, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @_PyObject_GetNewArguments(%struct._object* %0, %struct._object** %args, %struct._object** %kwargs)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %args, align 8
  %cmp1 = icmp eq %struct._object* %1, null
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %call3 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call3, %struct._object** %args, align 8
  %2 = load %struct._object*, %struct._object** %args, align 8
  %cmp4 = icmp eq %struct._object* %2, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  br label %if.end.45

if.else:                                          ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %kwargs, align 8
  %cmp7 = icmp ne %struct._object* %3, null
  br i1 %cmp7, label %if.then.8, label %if.end.44

if.then.8:                                        ; preds = %if.else
  %4 = load %struct._object*, %struct._object** %kwargs, align 8
  %call9 = call i64 @PyDict_Size(%struct._object* %4)
  %cmp10 = icmp sgt i64 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.27

if.then.11:                                       ; preds = %if.then.8
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str.289, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %6 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body
  br label %if.end.15

if.else.14:                                       ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.14, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.15
  br label %do.body.16

do.body.16:                                       ; preds = %do.end
  %13 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp17, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %15, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %18(%struct._object* %19)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.then.8
  br label %do.body.28

do.body.28:                                       ; preds = %if.end.27
  %20 = load %struct._object*, %struct._object** %kwargs, align 8
  store %struct._object* %20, %struct._object** %_py_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp29 = icmp ne %struct._object* %21, null
  br i1 %cmp29, label %if.then.30, label %if.end.42

if.then.30:                                       ; preds = %do.body.28
  store %struct._object* null, %struct._object** %kwargs, align 8
  br label %do.body.31

do.body.31:                                       ; preds = %if.then.30
  %22 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp32, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_refcnt33 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt33, align 8
  %dec34 = add i64 %24, -1
  store i64 %dec34, i64* %ob_refcnt33, align 8
  %cmp35 = icmp ne i64 %dec34, 0
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body.31
  br label %if.end.40

if.else.37:                                       ; preds = %do.body.31
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp32, align 8
  call void %27(%struct._object* %28)
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end.41

do.end.41:                                        ; preds = %if.end.40
  br label %if.end.42

if.end.42:                                        ; preds = %do.end.41, %do.body.28
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  br label %if.end.44

if.end.44:                                        ; preds = %do.end.43, %if.else
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.end.6
  %29 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call46 = call %struct._object* @_PyObject_GetState(%struct._object* %29)
  store %struct._object* %call46, %struct._object** %state, align 8
  %30 = load %struct._object*, %struct._object** %state, align 8
  %cmp47 = icmp eq %struct._object* %30, null
  br i1 %cmp47, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.end.45
  br label %end

if.end.49:                                        ; preds = %if.end.45
  %31 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call50 = call i32 @_PyObject_GetItemsIter(%struct._object* %31, %struct._object** %listitems, %struct._object** %dictitems)
  %cmp51 = icmp slt i32 %call50, 0
  br i1 %cmp51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.49
  br label %end

if.end.53:                                        ; preds = %if.end.49
  %call54 = call %struct._object* @import_copyreg()
  store %struct._object* %call54, %struct._object** %copyreg, align 8
  %32 = load %struct._object*, %struct._object** %copyreg, align 8
  %cmp55 = icmp eq %struct._object* %32, null
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.53
  br label %end

if.end.57:                                        ; preds = %if.end.53
  %33 = load %struct._object*, %struct._object** %copyreg, align 8
  %call58 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %33, %struct._Py_Identifier* @reduce_2.PyId___newobj__)
  store %struct._object* %call58, %struct._object** %newobj, align 8
  %34 = load %struct._object*, %struct._object** %newobj, align 8
  %cmp59 = icmp eq %struct._object* %34, null
  br i1 %cmp59, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %if.end.57
  br label %end

if.end.61:                                        ; preds = %if.end.57
  %35 = load %struct._object*, %struct._object** %args, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %36, i32 0, i32 1
  %37 = load i64, i64* %ob_size, align 8
  store i64 %37, i64* %n, align 8
  %38 = load i64, i64* %n, align 8
  %add = add i64 %38, 1
  %call62 = call %struct._object* @PyTuple_New(i64 %add)
  store %struct._object* %call62, %struct._object** %args2, align 8
  %39 = load %struct._object*, %struct._object** %args2, align 8
  %cmp63 = icmp eq %struct._object* %39, null
  br i1 %cmp63, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %if.end.61
  br label %end

if.end.65:                                        ; preds = %if.end.61
  %40 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %42 = bitcast %struct._typeobject* %41 to %struct._object*
  store %struct._object* %42, %struct._object** %cls, align 8
  %43 = load %struct._object*, %struct._object** %cls, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt67, align 8
  %inc = add i64 %44, 1
  store i64 %inc, i64* %ob_refcnt67, align 8
  %45 = load %struct._object*, %struct._object** %cls, align 8
  %46 = load %struct._object*, %struct._object** %args2, align 8
  %47 = bitcast %struct._object* %46 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %47, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  store %struct._object* %45, %struct._object** %arrayidx, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.65
  %48 = load i64, i64* %i, align 8
  %49 = load i64, i64* %n, align 8
  %cmp68 = icmp slt i64 %48, %49
  br i1 %cmp68, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %50 = load i64, i64* %i, align 8
  %51 = load %struct._object*, %struct._object** %args, align 8
  %52 = bitcast %struct._object* %51 to %struct.PyTupleObject*
  %ob_item69 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %52, i32 0, i32 1
  %arrayidx70 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item69, i32 0, i64 %50
  %53 = load %struct._object*, %struct._object** %arrayidx70, align 8
  store %struct._object* %53, %struct._object** %v, align 8
  %54 = load %struct._object*, %struct._object** %v, align 8
  %ob_refcnt71 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0
  %55 = load i64, i64* %ob_refcnt71, align 8
  %inc72 = add i64 %55, 1
  store i64 %inc72, i64* %ob_refcnt71, align 8
  %56 = load %struct._object*, %struct._object** %v, align 8
  %57 = load i64, i64* %i, align 8
  %add73 = add i64 %57, 1
  %58 = load %struct._object*, %struct._object** %args2, align 8
  %59 = bitcast %struct._object* %58 to %struct.PyTupleObject*
  %ob_item74 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %59, i32 0, i32 1
  %arrayidx75 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item74, i32 0, i64 %add73
  store %struct._object* %56, %struct._object** %arrayidx75, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %60 = load i64, i64* %i, align 8
  %inc76 = add i64 %60, 1
  store i64 %inc76, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %61 = load %struct._object*, %struct._object** %newobj, align 8
  %62 = load %struct._object*, %struct._object** %args2, align 8
  %63 = load %struct._object*, %struct._object** %state, align 8
  %64 = load %struct._object*, %struct._object** %listitems, align 8
  %65 = load %struct._object*, %struct._object** %dictitems, align 8
  %call77 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 5, %struct._object* %61, %struct._object* %62, %struct._object* %63, %struct._object* %64, %struct._object* %65)
  store %struct._object* %call77, %struct._object** %res, align 8
  br label %end

end:                                              ; preds = %for.end, %if.then.64, %if.then.60, %if.then.56, %if.then.52, %if.then.48
  br label %do.body.78

do.body.78:                                       ; preds = %end
  %66 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %66, %struct._object** %_py_xdecref_tmp, align 8
  %67 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp79 = icmp ne %struct._object* %67, null
  br i1 %cmp79, label %if.then.80, label %if.end.92

if.then.80:                                       ; preds = %do.body.78
  br label %do.body.81

do.body.81:                                       ; preds = %if.then.80
  %68 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp82, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %70, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.86, label %if.else.87

if.then.86:                                       ; preds = %do.body.81
  br label %if.end.90

if.else.87:                                       ; preds = %do.body.81
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %73(%struct._object* %74)
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  br label %do.end.91

do.end.91:                                        ; preds = %if.end.90
  br label %if.end.92

if.end.92:                                        ; preds = %do.end.91, %do.body.78
  br label %do.end.93

do.end.93:                                        ; preds = %if.end.92
  br label %do.body.94

do.body.94:                                       ; preds = %do.end.93
  %75 = load %struct._object*, %struct._object** %args2, align 8
  store %struct._object* %75, %struct._object** %_py_xdecref_tmp95, align 8
  %76 = load %struct._object*, %struct._object** %_py_xdecref_tmp95, align 8
  %cmp96 = icmp ne %struct._object* %76, null
  br i1 %cmp96, label %if.then.97, label %if.end.109

if.then.97:                                       ; preds = %do.body.94
  br label %do.body.98

do.body.98:                                       ; preds = %if.then.97
  %77 = load %struct._object*, %struct._object** %_py_xdecref_tmp95, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp99, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  %ob_refcnt100 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt100, align 8
  %dec101 = add i64 %79, -1
  store i64 %dec101, i64* %ob_refcnt100, align 8
  %cmp102 = icmp ne i64 %dec101, 0
  br i1 %cmp102, label %if.then.103, label %if.else.104

if.then.103:                                      ; preds = %do.body.98
  br label %if.end.107

if.else.104:                                      ; preds = %do.body.98
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  %ob_type105 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type105, align 8
  %tp_dealloc106 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc106, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  call void %82(%struct._object* %83)
  br label %if.end.107

if.end.107:                                       ; preds = %if.else.104, %if.then.103
  br label %do.end.108

do.end.108:                                       ; preds = %if.end.107
  br label %if.end.109

if.end.109:                                       ; preds = %do.end.108, %do.body.94
  br label %do.end.110

do.end.110:                                       ; preds = %if.end.109
  br label %do.body.111

do.body.111:                                      ; preds = %do.end.110
  %84 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %84, %struct._object** %_py_xdecref_tmp112, align 8
  %85 = load %struct._object*, %struct._object** %_py_xdecref_tmp112, align 8
  %cmp113 = icmp ne %struct._object* %85, null
  br i1 %cmp113, label %if.then.114, label %if.end.126

if.then.114:                                      ; preds = %do.body.111
  br label %do.body.115

do.body.115:                                      ; preds = %if.then.114
  %86 = load %struct._object*, %struct._object** %_py_xdecref_tmp112, align 8
  store %struct._object* %86, %struct._object** %_py_decref_tmp116, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp116, align 8
  %ob_refcnt117 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0
  %88 = load i64, i64* %ob_refcnt117, align 8
  %dec118 = add i64 %88, -1
  store i64 %dec118, i64* %ob_refcnt117, align 8
  %cmp119 = icmp ne i64 %dec118, 0
  br i1 %cmp119, label %if.then.120, label %if.else.121

if.then.120:                                      ; preds = %do.body.115
  br label %if.end.124

if.else.121:                                      ; preds = %do.body.115
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp116, align 8
  %ob_type122 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type122, align 8
  %tp_dealloc123 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc123, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp116, align 8
  call void %91(%struct._object* %92)
  br label %if.end.124

if.end.124:                                       ; preds = %if.else.121, %if.then.120
  br label %do.end.125

do.end.125:                                       ; preds = %if.end.124
  br label %if.end.126

if.end.126:                                       ; preds = %do.end.125, %do.body.111
  br label %do.end.127

do.end.127:                                       ; preds = %if.end.126
  br label %do.body.128

do.body.128:                                      ; preds = %do.end.127
  %93 = load %struct._object*, %struct._object** %listitems, align 8
  store %struct._object* %93, %struct._object** %_py_xdecref_tmp129, align 8
  %94 = load %struct._object*, %struct._object** %_py_xdecref_tmp129, align 8
  %cmp130 = icmp ne %struct._object* %94, null
  br i1 %cmp130, label %if.then.131, label %if.end.143

if.then.131:                                      ; preds = %do.body.128
  br label %do.body.132

do.body.132:                                      ; preds = %if.then.131
  %95 = load %struct._object*, %struct._object** %_py_xdecref_tmp129, align 8
  store %struct._object* %95, %struct._object** %_py_decref_tmp133, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  %ob_refcnt134 = getelementptr inbounds %struct._object, %struct._object* %96, i32 0, i32 0
  %97 = load i64, i64* %ob_refcnt134, align 8
  %dec135 = add i64 %97, -1
  store i64 %dec135, i64* %ob_refcnt134, align 8
  %cmp136 = icmp ne i64 %dec135, 0
  br i1 %cmp136, label %if.then.137, label %if.else.138

if.then.137:                                      ; preds = %do.body.132
  br label %if.end.141

if.else.138:                                      ; preds = %do.body.132
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  %ob_type139 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 1
  %99 = load %struct._typeobject*, %struct._typeobject** %ob_type139, align 8
  %tp_dealloc140 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %99, i32 0, i32 4
  %100 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc140, align 8
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  call void %100(%struct._object* %101)
  br label %if.end.141

if.end.141:                                       ; preds = %if.else.138, %if.then.137
  br label %do.end.142

do.end.142:                                       ; preds = %if.end.141
  br label %if.end.143

if.end.143:                                       ; preds = %do.end.142, %do.body.128
  br label %do.end.144

do.end.144:                                       ; preds = %if.end.143
  br label %do.body.145

do.body.145:                                      ; preds = %do.end.144
  %102 = load %struct._object*, %struct._object** %dictitems, align 8
  store %struct._object* %102, %struct._object** %_py_xdecref_tmp146, align 8
  %103 = load %struct._object*, %struct._object** %_py_xdecref_tmp146, align 8
  %cmp147 = icmp ne %struct._object* %103, null
  br i1 %cmp147, label %if.then.148, label %if.end.160

if.then.148:                                      ; preds = %do.body.145
  br label %do.body.149

do.body.149:                                      ; preds = %if.then.148
  %104 = load %struct._object*, %struct._object** %_py_xdecref_tmp146, align 8
  store %struct._object* %104, %struct._object** %_py_decref_tmp150, align 8
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp150, align 8
  %ob_refcnt151 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 0
  %106 = load i64, i64* %ob_refcnt151, align 8
  %dec152 = add i64 %106, -1
  store i64 %dec152, i64* %ob_refcnt151, align 8
  %cmp153 = icmp ne i64 %dec152, 0
  br i1 %cmp153, label %if.then.154, label %if.else.155

if.then.154:                                      ; preds = %do.body.149
  br label %if.end.158

if.else.155:                                      ; preds = %do.body.149
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp150, align 8
  %ob_type156 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 1
  %108 = load %struct._typeobject*, %struct._typeobject** %ob_type156, align 8
  %tp_dealloc157 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %108, i32 0, i32 4
  %109 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc157, align 8
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp150, align 8
  call void %109(%struct._object* %110)
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.155, %if.then.154
  br label %do.end.159

do.end.159:                                       ; preds = %if.end.158
  br label %if.end.160

if.end.160:                                       ; preds = %do.end.159, %do.body.145
  br label %do.end.161

do.end.161:                                       ; preds = %if.end.160
  br label %do.body.162

do.body.162:                                      ; preds = %do.end.161
  %111 = load %struct._object*, %struct._object** %copyreg, align 8
  store %struct._object* %111, %struct._object** %_py_xdecref_tmp163, align 8
  %112 = load %struct._object*, %struct._object** %_py_xdecref_tmp163, align 8
  %cmp164 = icmp ne %struct._object* %112, null
  br i1 %cmp164, label %if.then.165, label %if.end.177

if.then.165:                                      ; preds = %do.body.162
  br label %do.body.166

do.body.166:                                      ; preds = %if.then.165
  %113 = load %struct._object*, %struct._object** %_py_xdecref_tmp163, align 8
  store %struct._object* %113, %struct._object** %_py_decref_tmp167, align 8
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp167, align 8
  %ob_refcnt168 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 0
  %115 = load i64, i64* %ob_refcnt168, align 8
  %dec169 = add i64 %115, -1
  store i64 %dec169, i64* %ob_refcnt168, align 8
  %cmp170 = icmp ne i64 %dec169, 0
  br i1 %cmp170, label %if.then.171, label %if.else.172

if.then.171:                                      ; preds = %do.body.166
  br label %if.end.175

if.else.172:                                      ; preds = %do.body.166
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp167, align 8
  %ob_type173 = getelementptr inbounds %struct._object, %struct._object* %116, i32 0, i32 1
  %117 = load %struct._typeobject*, %struct._typeobject** %ob_type173, align 8
  %tp_dealloc174 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %117, i32 0, i32 4
  %118 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc174, align 8
  %119 = load %struct._object*, %struct._object** %_py_decref_tmp167, align 8
  call void %118(%struct._object* %119)
  br label %if.end.175

if.end.175:                                       ; preds = %if.else.172, %if.then.171
  br label %do.end.176

do.end.176:                                       ; preds = %if.end.175
  br label %if.end.177

if.end.177:                                       ; preds = %do.end.176, %do.body.162
  br label %do.end.178

do.end.178:                                       ; preds = %if.end.177
  br label %do.body.179

do.body.179:                                      ; preds = %do.end.178
  %120 = load %struct._object*, %struct._object** %newobj, align 8
  store %struct._object* %120, %struct._object** %_py_xdecref_tmp180, align 8
  %121 = load %struct._object*, %struct._object** %_py_xdecref_tmp180, align 8
  %cmp181 = icmp ne %struct._object* %121, null
  br i1 %cmp181, label %if.then.182, label %if.end.194

if.then.182:                                      ; preds = %do.body.179
  br label %do.body.183

do.body.183:                                      ; preds = %if.then.182
  %122 = load %struct._object*, %struct._object** %_py_xdecref_tmp180, align 8
  store %struct._object* %122, %struct._object** %_py_decref_tmp184, align 8
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp184, align 8
  %ob_refcnt185 = getelementptr inbounds %struct._object, %struct._object* %123, i32 0, i32 0
  %124 = load i64, i64* %ob_refcnt185, align 8
  %dec186 = add i64 %124, -1
  store i64 %dec186, i64* %ob_refcnt185, align 8
  %cmp187 = icmp ne i64 %dec186, 0
  br i1 %cmp187, label %if.then.188, label %if.else.189

if.then.188:                                      ; preds = %do.body.183
  br label %if.end.192

if.else.189:                                      ; preds = %do.body.183
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp184, align 8
  %ob_type190 = getelementptr inbounds %struct._object, %struct._object* %125, i32 0, i32 1
  %126 = load %struct._typeobject*, %struct._typeobject** %ob_type190, align 8
  %tp_dealloc191 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %126, i32 0, i32 4
  %127 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc191, align 8
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp184, align 8
  call void %127(%struct._object* %128)
  br label %if.end.192

if.end.192:                                       ; preds = %if.else.189, %if.then.188
  br label %do.end.193

do.end.193:                                       ; preds = %if.end.192
  br label %if.end.194

if.end.194:                                       ; preds = %do.end.193, %do.body.179
  br label %do.end.195

do.end.195:                                       ; preds = %if.end.194
  %129 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %129, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.195, %do.end.26, %if.then.5, %if.then
  %130 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %130
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @import_copyreg() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %copyreg_str = alloca %struct._object*, align 8
  %copyreg_module = alloca %struct._object*, align 8
  %interp = alloca %struct._is*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  %interp4 = getelementptr inbounds %struct._ts, %struct._ts* %10, i32 0, i32 2
  %11 = load %struct._is*, %struct._is** %interp4, align 8
  store %struct._is* %11, %struct._is** %interp, align 8
  %call = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @import_copyreg.PyId_copyreg)
  store %struct._object* %call, %struct._object** %copyreg_str, align 8
  %12 = load %struct._object*, %struct._object** %copyreg_str, align 8
  %cmp = icmp eq %struct._object* %12, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog.3
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %sw.epilog.3
  %13 = load %struct._is*, %struct._is** %interp, align 8
  %modules = getelementptr inbounds %struct._is, %struct._is* %13, i32 0, i32 2
  %14 = load %struct._object*, %struct._object** %modules, align 8
  %15 = load %struct._object*, %struct._object** %copyreg_str, align 8
  %call5 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %14, %struct._object* %15)
  store %struct._object* %call5, %struct._object** %copyreg_module, align 8
  %16 = load %struct._object*, %struct._object** %copyreg_module, align 8
  %cmp6 = icmp ne %struct._object* %16, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  %17 = load %struct._object*, %struct._object** %copyreg_module, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %19 = load %struct._object*, %struct._object** %copyreg_module, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %call9 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call9, null
  br i1 %tobool, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %if.end.8
  %20 = load %struct._object*, %struct._object** %copyreg_str, align 8
  %call12 = call %struct._object* @PyImport_Import(%struct._object* %20)
  store %struct._object* %call12, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.10, %if.then.7, %if.then
  %21 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %21
}

declare %struct._object* @PyEval_CallMethod(%struct._object*, i8*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @_PyObject_GetNewArguments(%struct._object* %obj, %struct._object** %args, %struct._object** %kwargs) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object**, align 8
  %kwargs.addr = alloca %struct._object**, align 8
  %getnewargs = alloca %struct._object*, align 8
  %getnewargs_ex = alloca %struct._object*, align 8
  %newargs = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp50 = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  %_py_tmp85 = alloca %struct._object*, align 8
  %_py_decref_tmp89 = alloca %struct._object*, align 8
  %_py_tmp111 = alloca %struct._object*, align 8
  %_py_decref_tmp115 = alloca %struct._object*, align 8
  %_py_tmp128 = alloca %struct._object*, align 8
  %_py_decref_tmp132 = alloca %struct._object*, align 8
  %_py_decref_tmp155 = alloca %struct._object*, align 8
  %_py_tmp177 = alloca %struct._object*, align 8
  %_py_decref_tmp181 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object** %args, %struct._object*** %args.addr, align 8
  store %struct._object** %kwargs, %struct._object*** %kwargs.addr, align 8
  %0 = load %struct._object**, %struct._object*** %args.addr, align 8
  %cmp = icmp eq %struct._object** %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  %cmp1 = icmp eq %struct._object** %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @_PyErr_BadInternalCall(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 3718)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %2, %struct._Py_Identifier* @_PyObject_GetNewArguments.PyId___getnewargs_ex__)
  store %struct._object* %call, %struct._object** %getnewargs_ex, align 8
  %3 = load %struct._object*, %struct._object** %getnewargs_ex, align 8
  %cmp2 = icmp ne %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.else.145

if.then.3:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %getnewargs_ex, align 8
  %call4 = call %struct._object* @PyObject_CallObject(%struct._object* %4, %struct._object* null)
  store %struct._object* %call4, %struct._object** %newargs, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %5 = load %struct._object*, %struct._object** %getnewargs_ex, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %12 = load %struct._object*, %struct._object** %newargs, align 8
  %cmp8 = icmp eq %struct._object* %12, null
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %do.end
  %13 = load %struct._object*, %struct._object** %newargs, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 19
  %15 = load i64, i64* %tp_flags, align 8
  %and = and i64 %15, 67108864
  %cmp12 = icmp ne i64 %and, 0
  br i1 %cmp12, label %if.end.27, label %if.then.13

if.then.13:                                       ; preds = %if.end.10
  %16 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %17 = load %struct._object*, %struct._object** %newargs, align 8
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 1
  %19 = load i8*, i8** %tp_name, align 8
  %call15 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %16, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.276, i32 0, i32 0), i8* %19)
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.13
  %20 = load %struct._object*, %struct._object** %newargs, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %22, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %25(%struct._object* %26)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  store i32 -1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.end.10
  %27 = load %struct._object*, %struct._object** %newargs, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %28, i32 0, i32 1
  %29 = load i64, i64* %ob_size, align 8
  %cmp28 = icmp ne i64 %29, 2
  br i1 %cmp28, label %if.then.29, label %if.end.43

if.then.29:                                       ; preds = %if.end.27
  %30 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %31 = load %struct._object*, %struct._object** %newargs, align 8
  %32 = bitcast %struct._object* %31 to %struct.PyVarObject*
  %ob_size30 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %32, i32 0, i32 1
  %33 = load i64, i64* %ob_size30, align 8
  %call31 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %30, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.277, i32 0, i32 0), i64 %33)
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.29
  %34 = load %struct._object*, %struct._object** %newargs, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp33, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %36, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %39(%struct._object* %40)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  store i32 -1, i32* %retval
  br label %return

if.end.43:                                        ; preds = %if.end.27
  %41 = load %struct._object*, %struct._object** %newargs, align 8
  %42 = bitcast %struct._object* %41 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %42, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %43 = load %struct._object*, %struct._object** %arrayidx, align 8
  %44 = load %struct._object**, %struct._object*** %args.addr, align 8
  store %struct._object* %43, %struct._object** %44, align 8
  %45 = load %struct._object**, %struct._object*** %args.addr, align 8
  %46 = load %struct._object*, %struct._object** %45, align 8
  %ob_refcnt44 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt44, align 8
  %inc = add i64 %47, 1
  store i64 %inc, i64* %ob_refcnt44, align 8
  %48 = load %struct._object*, %struct._object** %newargs, align 8
  %49 = bitcast %struct._object* %48 to %struct.PyTupleObject*
  %ob_item45 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %49, i32 0, i32 1
  %arrayidx46 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item45, i32 0, i64 1
  %50 = load %struct._object*, %struct._object** %arrayidx46, align 8
  %51 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  store %struct._object* %50, %struct._object** %51, align 8
  %52 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  %53 = load %struct._object*, %struct._object** %52, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt47, align 8
  %inc48 = add i64 %54, 1
  store i64 %inc48, i64* %ob_refcnt47, align 8
  br label %do.body.49

do.body.49:                                       ; preds = %if.end.43
  %55 = load %struct._object*, %struct._object** %newargs, align 8
  store %struct._object* %55, %struct._object** %_py_decref_tmp50, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt51, align 8
  %dec52 = add i64 %57, -1
  store i64 %dec52, i64* %ob_refcnt51, align 8
  %cmp53 = icmp ne i64 %dec52, 0
  br i1 %cmp53, label %if.then.54, label %if.else.55

if.then.54:                                       ; preds = %do.body.49
  br label %if.end.58

if.else.55:                                       ; preds = %do.body.49
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_type56 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type56, align 8
  %tp_dealloc57 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc57, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  call void %60(%struct._object* %61)
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.55, %if.then.54
  br label %do.end.59

do.end.59:                                        ; preds = %if.end.58
  %62 = load %struct._object**, %struct._object*** %args.addr, align 8
  %63 = load %struct._object*, %struct._object** %62, align 8
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8
  %tp_flags61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 19
  %65 = load i64, i64* %tp_flags61, align 8
  %and62 = and i64 %65, 67108864
  %cmp63 = icmp ne i64 %and62, 0
  br i1 %cmp63, label %if.end.101, label %if.then.64

if.then.64:                                       ; preds = %do.end.59
  %66 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %67 = load %struct._object**, %struct._object*** %args.addr, align 8
  %68 = load %struct._object*, %struct._object** %67, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 1
  %69 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %tp_name66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 1
  %70 = load i8*, i8** %tp_name66, align 8
  %call67 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %66, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.278, i32 0, i32 0), i8* %70)
  br label %do.body.68

do.body.68:                                       ; preds = %if.then.64
  %71 = load %struct._object**, %struct._object*** %args.addr, align 8
  %72 = load %struct._object*, %struct._object** %71, align 8
  store %struct._object* %72, %struct._object** %_py_tmp, align 8
  %73 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp69 = icmp ne %struct._object* %73, null
  br i1 %cmp69, label %if.then.70, label %if.end.82

if.then.70:                                       ; preds = %do.body.68
  %74 = load %struct._object**, %struct._object*** %args.addr, align 8
  store %struct._object* null, %struct._object** %74, align 8
  br label %do.body.71

do.body.71:                                       ; preds = %if.then.70
  %75 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %75, %struct._object** %_py_decref_tmp72, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0
  %77 = load i64, i64* %ob_refcnt73, align 8
  %dec74 = add i64 %77, -1
  store i64 %dec74, i64* %ob_refcnt73, align 8
  %cmp75 = icmp ne i64 %dec74, 0
  br i1 %cmp75, label %if.then.76, label %if.else.77

if.then.76:                                       ; preds = %do.body.71
  br label %if.end.80

if.else.77:                                       ; preds = %do.body.71
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  call void %80(%struct._object* %81)
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  br label %if.end.82

if.end.82:                                        ; preds = %do.end.81, %do.body.68
  br label %do.end.83

do.end.83:                                        ; preds = %if.end.82
  br label %do.body.84

do.body.84:                                       ; preds = %do.end.83
  %82 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  %83 = load %struct._object*, %struct._object** %82, align 8
  store %struct._object* %83, %struct._object** %_py_tmp85, align 8
  %84 = load %struct._object*, %struct._object** %_py_tmp85, align 8
  %cmp86 = icmp ne %struct._object* %84, null
  br i1 %cmp86, label %if.then.87, label %if.end.99

if.then.87:                                       ; preds = %do.body.84
  %85 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %85, align 8
  br label %do.body.88

do.body.88:                                       ; preds = %if.then.87
  %86 = load %struct._object*, %struct._object** %_py_tmp85, align 8
  store %struct._object* %86, %struct._object** %_py_decref_tmp89, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_refcnt90 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0
  %88 = load i64, i64* %ob_refcnt90, align 8
  %dec91 = add i64 %88, -1
  store i64 %dec91, i64* %ob_refcnt90, align 8
  %cmp92 = icmp ne i64 %dec91, 0
  br i1 %cmp92, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %do.body.88
  br label %if.end.97

if.else.94:                                       ; preds = %do.body.88
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_type95 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type95, align 8
  %tp_dealloc96 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc96, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  call void %91(%struct._object* %92)
  br label %if.end.97

if.end.97:                                        ; preds = %if.else.94, %if.then.93
  br label %do.end.98

do.end.98:                                        ; preds = %if.end.97
  br label %if.end.99

if.end.99:                                        ; preds = %do.end.98, %do.body.84
  br label %do.end.100

do.end.100:                                       ; preds = %if.end.99
  store i32 -1, i32* %retval
  br label %return

if.end.101:                                       ; preds = %do.end.59
  %93 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  %94 = load %struct._object*, %struct._object** %93, align 8
  %ob_type102 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type102, align 8
  %tp_flags103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 19
  %96 = load i64, i64* %tp_flags103, align 8
  %and104 = and i64 %96, 536870912
  %cmp105 = icmp ne i64 %and104, 0
  br i1 %cmp105, label %if.end.144, label %if.then.106

if.then.106:                                      ; preds = %if.end.101
  %97 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %98 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  %99 = load %struct._object*, %struct._object** %98, align 8
  %ob_type107 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 1
  %100 = load %struct._typeobject*, %struct._typeobject** %ob_type107, align 8
  %tp_name108 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 1
  %101 = load i8*, i8** %tp_name108, align 8
  %call109 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %97, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.279, i32 0, i32 0), i8* %101)
  br label %do.body.110

do.body.110:                                      ; preds = %if.then.106
  %102 = load %struct._object**, %struct._object*** %args.addr, align 8
  %103 = load %struct._object*, %struct._object** %102, align 8
  store %struct._object* %103, %struct._object** %_py_tmp111, align 8
  %104 = load %struct._object*, %struct._object** %_py_tmp111, align 8
  %cmp112 = icmp ne %struct._object* %104, null
  br i1 %cmp112, label %if.then.113, label %if.end.125

if.then.113:                                      ; preds = %do.body.110
  %105 = load %struct._object**, %struct._object*** %args.addr, align 8
  store %struct._object* null, %struct._object** %105, align 8
  br label %do.body.114

do.body.114:                                      ; preds = %if.then.113
  %106 = load %struct._object*, %struct._object** %_py_tmp111, align 8
  store %struct._object* %106, %struct._object** %_py_decref_tmp115, align 8
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 0
  %108 = load i64, i64* %ob_refcnt116, align 8
  %dec117 = add i64 %108, -1
  store i64 %dec117, i64* %ob_refcnt116, align 8
  %cmp118 = icmp ne i64 %dec117, 0
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %do.body.114
  br label %if.end.123

if.else.120:                                      ; preds = %do.body.114
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_type121 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 1
  %110 = load %struct._typeobject*, %struct._typeobject** %ob_type121, align 8
  %tp_dealloc122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 4
  %111 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc122, align 8
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  call void %111(%struct._object* %112)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.120, %if.then.119
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  br label %if.end.125

if.end.125:                                       ; preds = %do.end.124, %do.body.110
  br label %do.end.126

do.end.126:                                       ; preds = %if.end.125
  br label %do.body.127

do.body.127:                                      ; preds = %do.end.126
  %113 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  %114 = load %struct._object*, %struct._object** %113, align 8
  store %struct._object* %114, %struct._object** %_py_tmp128, align 8
  %115 = load %struct._object*, %struct._object** %_py_tmp128, align 8
  %cmp129 = icmp ne %struct._object* %115, null
  br i1 %cmp129, label %if.then.130, label %if.end.142

if.then.130:                                      ; preds = %do.body.127
  %116 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %116, align 8
  br label %do.body.131

do.body.131:                                      ; preds = %if.then.130
  %117 = load %struct._object*, %struct._object** %_py_tmp128, align 8
  store %struct._object* %117, %struct._object** %_py_decref_tmp132, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  %ob_refcnt133 = getelementptr inbounds %struct._object, %struct._object* %118, i32 0, i32 0
  %119 = load i64, i64* %ob_refcnt133, align 8
  %dec134 = add i64 %119, -1
  store i64 %dec134, i64* %ob_refcnt133, align 8
  %cmp135 = icmp ne i64 %dec134, 0
  br i1 %cmp135, label %if.then.136, label %if.else.137

if.then.136:                                      ; preds = %do.body.131
  br label %if.end.140

if.else.137:                                      ; preds = %do.body.131
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  %ob_type138 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 1
  %121 = load %struct._typeobject*, %struct._typeobject** %ob_type138, align 8
  %tp_dealloc139 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %121, i32 0, i32 4
  %122 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc139, align 8
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  call void %122(%struct._object* %123)
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.137, %if.then.136
  br label %do.end.141

do.end.141:                                       ; preds = %if.end.140
  br label %if.end.142

if.end.142:                                       ; preds = %do.end.141, %do.body.127
  br label %do.end.143

do.end.143:                                       ; preds = %if.end.142
  store i32 -1, i32* %retval
  br label %return

if.end.144:                                       ; preds = %if.end.101
  store i32 0, i32* %retval
  br label %return

if.else.145:                                      ; preds = %if.end
  %call146 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call146, null
  br i1 %tobool, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %if.else.145
  store i32 -1, i32* %retval
  br label %return

if.end.148:                                       ; preds = %if.else.145
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148
  %124 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call150 = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %124, %struct._Py_Identifier* @_PyObject_GetNewArguments.PyId___getnewargs__)
  store %struct._object* %call150, %struct._object** %getnewargs, align 8
  %125 = load %struct._object*, %struct._object** %getnewargs, align 8
  %cmp151 = icmp ne %struct._object* %125, null
  br i1 %cmp151, label %if.then.152, label %if.else.194

if.then.152:                                      ; preds = %if.end.149
  %126 = load %struct._object*, %struct._object** %getnewargs, align 8
  %call153 = call %struct._object* @PyObject_CallObject(%struct._object* %126, %struct._object* null)
  %127 = load %struct._object**, %struct._object*** %args.addr, align 8
  store %struct._object* %call153, %struct._object** %127, align 8
  br label %do.body.154

do.body.154:                                      ; preds = %if.then.152
  %128 = load %struct._object*, %struct._object** %getnewargs, align 8
  store %struct._object* %128, %struct._object** %_py_decref_tmp155, align 8
  %129 = load %struct._object*, %struct._object** %_py_decref_tmp155, align 8
  %ob_refcnt156 = getelementptr inbounds %struct._object, %struct._object* %129, i32 0, i32 0
  %130 = load i64, i64* %ob_refcnt156, align 8
  %dec157 = add i64 %130, -1
  store i64 %dec157, i64* %ob_refcnt156, align 8
  %cmp158 = icmp ne i64 %dec157, 0
  br i1 %cmp158, label %if.then.159, label %if.else.160

if.then.159:                                      ; preds = %do.body.154
  br label %if.end.163

if.else.160:                                      ; preds = %do.body.154
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp155, align 8
  %ob_type161 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 1
  %132 = load %struct._typeobject*, %struct._typeobject** %ob_type161, align 8
  %tp_dealloc162 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %132, i32 0, i32 4
  %133 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc162, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp155, align 8
  call void %133(%struct._object* %134)
  br label %if.end.163

if.end.163:                                       ; preds = %if.else.160, %if.then.159
  br label %do.end.164

do.end.164:                                       ; preds = %if.end.163
  %135 = load %struct._object**, %struct._object*** %args.addr, align 8
  %136 = load %struct._object*, %struct._object** %135, align 8
  %cmp165 = icmp eq %struct._object* %136, null
  br i1 %cmp165, label %if.then.166, label %if.end.167

if.then.166:                                      ; preds = %do.end.164
  store i32 -1, i32* %retval
  br label %return

if.end.167:                                       ; preds = %do.end.164
  %137 = load %struct._object**, %struct._object*** %args.addr, align 8
  %138 = load %struct._object*, %struct._object** %137, align 8
  %ob_type168 = getelementptr inbounds %struct._object, %struct._object* %138, i32 0, i32 1
  %139 = load %struct._typeobject*, %struct._typeobject** %ob_type168, align 8
  %tp_flags169 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %139, i32 0, i32 19
  %140 = load i64, i64* %tp_flags169, align 8
  %and170 = and i64 %140, 67108864
  %cmp171 = icmp ne i64 %and170, 0
  br i1 %cmp171, label %if.end.193, label %if.then.172

if.then.172:                                      ; preds = %if.end.167
  %141 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %142 = load %struct._object**, %struct._object*** %args.addr, align 8
  %143 = load %struct._object*, %struct._object** %142, align 8
  %ob_type173 = getelementptr inbounds %struct._object, %struct._object* %143, i32 0, i32 1
  %144 = load %struct._typeobject*, %struct._typeobject** %ob_type173, align 8
  %tp_name174 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %144, i32 0, i32 1
  %145 = load i8*, i8** %tp_name174, align 8
  %call175 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %141, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.280, i32 0, i32 0), i8* %145)
  br label %do.body.176

do.body.176:                                      ; preds = %if.then.172
  %146 = load %struct._object**, %struct._object*** %args.addr, align 8
  %147 = load %struct._object*, %struct._object** %146, align 8
  store %struct._object* %147, %struct._object** %_py_tmp177, align 8
  %148 = load %struct._object*, %struct._object** %_py_tmp177, align 8
  %cmp178 = icmp ne %struct._object* %148, null
  br i1 %cmp178, label %if.then.179, label %if.end.191

if.then.179:                                      ; preds = %do.body.176
  %149 = load %struct._object**, %struct._object*** %args.addr, align 8
  store %struct._object* null, %struct._object** %149, align 8
  br label %do.body.180

do.body.180:                                      ; preds = %if.then.179
  %150 = load %struct._object*, %struct._object** %_py_tmp177, align 8
  store %struct._object* %150, %struct._object** %_py_decref_tmp181, align 8
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  %ob_refcnt182 = getelementptr inbounds %struct._object, %struct._object* %151, i32 0, i32 0
  %152 = load i64, i64* %ob_refcnt182, align 8
  %dec183 = add i64 %152, -1
  store i64 %dec183, i64* %ob_refcnt182, align 8
  %cmp184 = icmp ne i64 %dec183, 0
  br i1 %cmp184, label %if.then.185, label %if.else.186

if.then.185:                                      ; preds = %do.body.180
  br label %if.end.189

if.else.186:                                      ; preds = %do.body.180
  %153 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  %ob_type187 = getelementptr inbounds %struct._object, %struct._object* %153, i32 0, i32 1
  %154 = load %struct._typeobject*, %struct._typeobject** %ob_type187, align 8
  %tp_dealloc188 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %154, i32 0, i32 4
  %155 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc188, align 8
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  call void %155(%struct._object* %156)
  br label %if.end.189

if.end.189:                                       ; preds = %if.else.186, %if.then.185
  br label %do.end.190

do.end.190:                                       ; preds = %if.end.189
  br label %if.end.191

if.end.191:                                       ; preds = %do.end.190, %do.body.176
  br label %do.end.192

do.end.192:                                       ; preds = %if.end.191
  store i32 -1, i32* %retval
  br label %return

if.end.193:                                       ; preds = %if.end.167
  %157 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %157, align 8
  store i32 0, i32* %retval
  br label %return

if.else.194:                                      ; preds = %if.end.149
  %call195 = call %struct._object* @PyErr_Occurred()
  %tobool196 = icmp ne %struct._object* %call195, null
  br i1 %tobool196, label %if.then.197, label %if.end.198

if.then.197:                                      ; preds = %if.else.194
  store i32 -1, i32* %retval
  br label %return

if.end.198:                                       ; preds = %if.else.194
  br label %if.end.199

if.end.199:                                       ; preds = %if.end.198
  %158 = load %struct._object**, %struct._object*** %args.addr, align 8
  store %struct._object* null, %struct._object** %158, align 8
  %159 = load %struct._object**, %struct._object*** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %159, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.199, %if.then.197, %if.end.193, %do.end.192, %if.then.166, %if.then.147, %if.end.144, %do.end.143, %do.end.100, %do.end.42, %do.end.26, %if.then.9, %if.then
  %160 = load i32, i32* %retval
  ret i32 %160
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_PyObject_GetState(%struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %getstate = alloca %struct._object*, align 8
  %slotnames = alloca %struct._object*, align 8
  %dict = alloca %struct._object**, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %slots = alloca %struct._object*, align 8
  %slotnames_size = alloca i64, align 8
  %i = alloca i64, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp40 = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  %_py_decref_tmp95 = alloca %struct._object*, align 8
  %_py_decref_tmp106 = alloca %struct._object*, align 8
  %state2 = alloca %struct._object*, align 8
  %_py_decref_tmp123 = alloca %struct._object*, align 8
  %_py_decref_tmp136 = alloca %struct._object*, align 8
  %_py_decref_tmp147 = alloca %struct._object*, align 8
  %_py_decref_tmp160 = alloca %struct._object*, align 8
  %_py_decref_tmp172 = alloca %struct._object*, align 8
  %_py_decref_tmp185 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @_PyObject_GetState.PyId___getstate__)
  store %struct._object* %call, %struct._object** %getstate, align 8
  %1 = load %struct._object*, %struct._object** %getstate, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.else.182

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call1 = call i32 @PyErr_ExceptionMatches(%struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  call void @PyErr_Clear()
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call3 = call %struct._object** @_PyObject_GetDictPtr(%struct._object* %3)
  store %struct._object** %call3, %struct._object*** %dict, align 8
  %4 = load %struct._object**, %struct._object*** %dict, align 8
  %cmp4 = icmp ne %struct._object** %4, null
  br i1 %cmp4, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct._object**, %struct._object*** %dict, align 8
  %6 = load %struct._object*, %struct._object** %5, align 8
  %cmp5 = icmp ne %struct._object* %6, null
  br i1 %cmp5, label %land.lhs.true.6, label %if.else

land.lhs.true.6:                                  ; preds = %land.lhs.true
  %7 = load %struct._object**, %struct._object*** %dict, align 8
  %8 = load %struct._object*, %struct._object** %7, align 8
  %call7 = call i64 @PyDict_Size(%struct._object* %8)
  %cmp8 = icmp sgt i64 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %land.lhs.true.6
  %9 = load %struct._object**, %struct._object*** %dict, align 8
  %10 = load %struct._object*, %struct._object** %9, align 8
  store %struct._object* %10, %struct._object** %state, align 8
  br label %if.end.10

if.else:                                          ; preds = %land.lhs.true.6, %land.lhs.true, %if.end
  store %struct._object* @_Py_NoneStruct, %struct._object** %state, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  %11 = load %struct._object*, %struct._object** %state, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %call11 = call %struct._object* @_PyType_GetSlotNames(%struct._typeobject* %14)
  store %struct._object* %call11, %struct._object** %slotnames, align 8
  %15 = load %struct._object*, %struct._object** %slotnames, align 8
  %cmp12 = icmp eq %struct._object* %15, null
  br i1 %cmp12, label %if.then.13, label %if.end.20

if.then.13:                                       ; preds = %if.end.10
  br label %do.body

do.body:                                          ; preds = %if.then.13
  %16 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt14, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt14, align 8
  %cmp15 = icmp ne i64 %dec, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body
  br label %if.end.19

if.else.17:                                       ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end

do.end:                                           ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.10
  %23 = load %struct._object*, %struct._object** %slotnames, align 8
  %cmp21 = icmp ne %struct._object* %23, @_Py_NoneStruct
  br i1 %cmp21, label %land.lhs.true.22, label %if.end.170

land.lhs.true.22:                                 ; preds = %if.end.20
  %24 = load %struct._object*, %struct._object** %slotnames, align 8
  %25 = bitcast %struct._object* %24 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1
  %26 = load i64, i64* %ob_size, align 8
  %cmp23 = icmp sgt i64 %26, 0
  br i1 %cmp23, label %if.then.24, label %if.end.170

if.then.24:                                       ; preds = %land.lhs.true.22
  %call25 = call %struct._object* @PyDict_New()
  store %struct._object* %call25, %struct._object** %slots, align 8
  %27 = load %struct._object*, %struct._object** %slots, align 8
  %cmp26 = icmp eq %struct._object* %27, null
  br i1 %cmp26, label %if.then.27, label %if.end.50

if.then.27:                                       ; preds = %if.then.24
  br label %do.body.28

do.body.28:                                       ; preds = %if.then.27
  %28 = load %struct._object*, %struct._object** %slotnames, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp29, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt30, align 8
  %dec31 = add i64 %30, -1
  store i64 %dec31, i64* %ob_refcnt30, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.28
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.28
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  call void %33(%struct._object* %34)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  br label %do.body.39

do.body.39:                                       ; preds = %do.end.38
  %35 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp40, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt41, align 8
  %dec42 = add i64 %37, -1
  store i64 %dec42, i64* %ob_refcnt41, align 8
  %cmp43 = icmp ne i64 %dec42, 0
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %do.body.39
  br label %if.end.48

if.else.45:                                       ; preds = %do.body.39
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_dealloc47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc47, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  call void %40(%struct._object* %41)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.44
  br label %do.end.49

do.end.49:                                        ; preds = %if.end.48
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.50:                                        ; preds = %if.then.24
  %42 = load %struct._object*, %struct._object** %slotnames, align 8
  %43 = bitcast %struct._object* %42 to %struct.PyVarObject*
  %ob_size51 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %43, i32 0, i32 1
  %44 = load i64, i64* %ob_size51, align 8
  store i64 %44, i64* %slotnames_size, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.50
  %45 = load i64, i64* %i, align 8
  %46 = load i64, i64* %slotnames_size, align 8
  %cmp52 = icmp slt i64 %45, %46
  br i1 %cmp52, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %47 = load i64, i64* %i, align 8
  %48 = load %struct._object*, %struct._object** %slotnames, align 8
  %49 = bitcast %struct._object* %48 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %49, i32 0, i32 1
  %50 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %50, i64 %47
  %51 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %51, %struct._object** %name, align 8
  %52 = load %struct._object*, %struct._object** %obj.addr, align 8
  %53 = load %struct._object*, %struct._object** %name, align 8
  %call53 = call %struct._object* @PyObject_GetAttr(%struct._object* %52, %struct._object* %53)
  store %struct._object* %call53, %struct._object** %value, align 8
  %54 = load %struct._object*, %struct._object** %value, align 8
  %cmp54 = icmp eq %struct._object* %54, null
  br i1 %cmp54, label %if.then.55, label %if.else.60

if.then.55:                                       ; preds = %for.body
  %55 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call56 = call i32 @PyErr_ExceptionMatches(%struct._object* %55)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.end.59, label %if.then.58

if.then.58:                                       ; preds = %if.then.55
  br label %error

if.end.59:                                        ; preds = %if.then.55
  call void @PyErr_Clear()
  br label %if.end.76

if.else.60:                                       ; preds = %for.body
  %56 = load %struct._object*, %struct._object** %slots, align 8
  %57 = load %struct._object*, %struct._object** %name, align 8
  %58 = load %struct._object*, %struct._object** %value, align 8
  %call61 = call i32 @PyDict_SetItem(%struct._object* %56, %struct._object* %57, %struct._object* %58)
  store i32 %call61, i32* %err, align 4
  br label %do.body.62

do.body.62:                                       ; preds = %if.else.60
  %59 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp63, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %61, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.67, label %if.else.68

if.then.67:                                       ; preds = %do.body.62
  br label %if.end.71

if.else.68:                                       ; preds = %do.body.62
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type69 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type69, align 8
  %tp_dealloc70 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc70, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %64(%struct._object* %65)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.68, %if.then.67
  br label %do.end.72

do.end.72:                                        ; preds = %if.end.71
  %66 = load i32, i32* %err, align 4
  %tobool73 = icmp ne i32 %66, 0
  br i1 %tobool73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %do.end.72
  br label %error

if.end.75:                                        ; preds = %do.end.72
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.59
  %67 = load i64, i64* %slotnames_size, align 8
  %68 = load %struct._object*, %struct._object** %slotnames, align 8
  %69 = bitcast %struct._object* %68 to %struct.PyVarObject*
  %ob_size77 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %69, i32 0, i32 1
  %70 = load i64, i64* %ob_size77, align 8
  %cmp78 = icmp ne i64 %67, %70
  br i1 %cmp78, label %if.then.79, label %if.end.81

if.then.79:                                       ; preds = %if.end.76
  %71 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %call80 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %71, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.282, i32 0, i32 0))
  br label %error

if.end.81:                                        ; preds = %if.end.76
  br i1 false, label %if.then.82, label %if.end.116

if.then.82:                                       ; preds = %if.end.81
  br label %error

error:                                            ; preds = %if.then.82, %if.then.79, %if.then.74, %if.then.58
  br label %do.body.83

do.body.83:                                       ; preds = %error
  %72 = load %struct._object*, %struct._object** %slotnames, align 8
  store %struct._object* %72, %struct._object** %_py_decref_tmp84, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt85, align 8
  %dec86 = add i64 %74, -1
  store i64 %dec86, i64* %ob_refcnt85, align 8
  %cmp87 = icmp ne i64 %dec86, 0
  br i1 %cmp87, label %if.then.88, label %if.else.89

if.then.88:                                       ; preds = %do.body.83
  br label %if.end.92

if.else.89:                                       ; preds = %do.body.83
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_type90 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type90, align 8
  %tp_dealloc91 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 4
  %77 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc91, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  call void %77(%struct._object* %78)
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.89, %if.then.88
  br label %do.end.93

do.end.93:                                        ; preds = %if.end.92
  br label %do.body.94

do.body.94:                                       ; preds = %do.end.93
  %79 = load %struct._object*, %struct._object** %slots, align 8
  store %struct._object* %79, %struct._object** %_py_decref_tmp95, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  %ob_refcnt96 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 0
  %81 = load i64, i64* %ob_refcnt96, align 8
  %dec97 = add i64 %81, -1
  store i64 %dec97, i64* %ob_refcnt96, align 8
  %cmp98 = icmp ne i64 %dec97, 0
  br i1 %cmp98, label %if.then.99, label %if.else.100

if.then.99:                                       ; preds = %do.body.94
  br label %if.end.103

if.else.100:                                      ; preds = %do.body.94
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  %ob_type101 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type101, align 8
  %tp_dealloc102 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 4
  %84 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc102, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  call void %84(%struct._object* %85)
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.100, %if.then.99
  br label %do.end.104

do.end.104:                                       ; preds = %if.end.103
  br label %do.body.105

do.body.105:                                      ; preds = %do.end.104
  %86 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %86, %struct._object** %_py_decref_tmp106, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  %ob_refcnt107 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0
  %88 = load i64, i64* %ob_refcnt107, align 8
  %dec108 = add i64 %88, -1
  store i64 %dec108, i64* %ob_refcnt107, align 8
  %cmp109 = icmp ne i64 %dec108, 0
  br i1 %cmp109, label %if.then.110, label %if.else.111

if.then.110:                                      ; preds = %do.body.105
  br label %if.end.114

if.else.111:                                      ; preds = %do.body.105
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  %ob_type112 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type112, align 8
  %tp_dealloc113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc113, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  call void %91(%struct._object* %92)
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.111, %if.then.110
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.116:                                       ; preds = %if.end.81
  br label %for.inc

for.inc:                                          ; preds = %if.end.116
  %93 = load i64, i64* %i, align 8
  %inc117 = add i64 %93, 1
  store i64 %inc117, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %94 = load %struct._object*, %struct._object** %slots, align 8
  %call118 = call i64 @PyDict_Size(%struct._object* %94)
  %cmp119 = icmp sgt i64 %call118, 0
  br i1 %cmp119, label %if.then.120, label %if.end.158

if.then.120:                                      ; preds = %for.end
  %95 = load %struct._object*, %struct._object** %state, align 8
  %96 = load %struct._object*, %struct._object** %slots, align 8
  %call121 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %95, %struct._object* %96)
  store %struct._object* %call121, %struct._object** %state2, align 8
  br label %do.body.122

do.body.122:                                      ; preds = %if.then.120
  %97 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %97, %struct._object** %_py_decref_tmp123, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_refcnt124 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 0
  %99 = load i64, i64* %ob_refcnt124, align 8
  %dec125 = add i64 %99, -1
  store i64 %dec125, i64* %ob_refcnt124, align 8
  %cmp126 = icmp ne i64 %dec125, 0
  br i1 %cmp126, label %if.then.127, label %if.else.128

if.then.127:                                      ; preds = %do.body.122
  br label %if.end.131

if.else.128:                                      ; preds = %do.body.122
  %100 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  %ob_type129 = getelementptr inbounds %struct._object, %struct._object* %100, i32 0, i32 1
  %101 = load %struct._typeobject*, %struct._typeobject** %ob_type129, align 8
  %tp_dealloc130 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %101, i32 0, i32 4
  %102 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc130, align 8
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp123, align 8
  call void %102(%struct._object* %103)
  br label %if.end.131

if.end.131:                                       ; preds = %if.else.128, %if.then.127
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  %104 = load %struct._object*, %struct._object** %state2, align 8
  %cmp133 = icmp eq %struct._object* %104, null
  br i1 %cmp133, label %if.then.134, label %if.end.157

if.then.134:                                      ; preds = %do.end.132
  br label %do.body.135

do.body.135:                                      ; preds = %if.then.134
  %105 = load %struct._object*, %struct._object** %slotnames, align 8
  store %struct._object* %105, %struct._object** %_py_decref_tmp136, align 8
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8
  %ob_refcnt137 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 0
  %107 = load i64, i64* %ob_refcnt137, align 8
  %dec138 = add i64 %107, -1
  store i64 %dec138, i64* %ob_refcnt137, align 8
  %cmp139 = icmp ne i64 %dec138, 0
  br i1 %cmp139, label %if.then.140, label %if.else.141

if.then.140:                                      ; preds = %do.body.135
  br label %if.end.144

if.else.141:                                      ; preds = %do.body.135
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8
  %ob_type142 = getelementptr inbounds %struct._object, %struct._object* %108, i32 0, i32 1
  %109 = load %struct._typeobject*, %struct._typeobject** %ob_type142, align 8
  %tp_dealloc143 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %109, i32 0, i32 4
  %110 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc143, align 8
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp136, align 8
  call void %110(%struct._object* %111)
  br label %if.end.144

if.end.144:                                       ; preds = %if.else.141, %if.then.140
  br label %do.end.145

do.end.145:                                       ; preds = %if.end.144
  br label %do.body.146

do.body.146:                                      ; preds = %do.end.145
  %112 = load %struct._object*, %struct._object** %slots, align 8
  store %struct._object* %112, %struct._object** %_py_decref_tmp147, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_refcnt148 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 0
  %114 = load i64, i64* %ob_refcnt148, align 8
  %dec149 = add i64 %114, -1
  store i64 %dec149, i64* %ob_refcnt148, align 8
  %cmp150 = icmp ne i64 %dec149, 0
  br i1 %cmp150, label %if.then.151, label %if.else.152

if.then.151:                                      ; preds = %do.body.146
  br label %if.end.155

if.else.152:                                      ; preds = %do.body.146
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_type153 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 1
  %116 = load %struct._typeobject*, %struct._typeobject** %ob_type153, align 8
  %tp_dealloc154 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %116, i32 0, i32 4
  %117 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc154, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  call void %117(%struct._object* %118)
  br label %if.end.155

if.end.155:                                       ; preds = %if.else.152, %if.then.151
  br label %do.end.156

do.end.156:                                       ; preds = %if.end.155
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.157:                                       ; preds = %do.end.132
  %119 = load %struct._object*, %struct._object** %state2, align 8
  store %struct._object* %119, %struct._object** %state, align 8
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %for.end
  br label %do.body.159

do.body.159:                                      ; preds = %if.end.158
  %120 = load %struct._object*, %struct._object** %slots, align 8
  store %struct._object* %120, %struct._object** %_py_decref_tmp160, align 8
  %121 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8
  %ob_refcnt161 = getelementptr inbounds %struct._object, %struct._object* %121, i32 0, i32 0
  %122 = load i64, i64* %ob_refcnt161, align 8
  %dec162 = add i64 %122, -1
  store i64 %dec162, i64* %ob_refcnt161, align 8
  %cmp163 = icmp ne i64 %dec162, 0
  br i1 %cmp163, label %if.then.164, label %if.else.165

if.then.164:                                      ; preds = %do.body.159
  br label %if.end.168

if.else.165:                                      ; preds = %do.body.159
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8
  %ob_type166 = getelementptr inbounds %struct._object, %struct._object* %123, i32 0, i32 1
  %124 = load %struct._typeobject*, %struct._typeobject** %ob_type166, align 8
  %tp_dealloc167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %124, i32 0, i32 4
  %125 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc167, align 8
  %126 = load %struct._object*, %struct._object** %_py_decref_tmp160, align 8
  call void %125(%struct._object* %126)
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.165, %if.then.164
  br label %do.end.169

do.end.169:                                       ; preds = %if.end.168
  br label %if.end.170

if.end.170:                                       ; preds = %do.end.169, %land.lhs.true.22, %if.end.20
  br label %do.body.171

do.body.171:                                      ; preds = %if.end.170
  %127 = load %struct._object*, %struct._object** %slotnames, align 8
  store %struct._object* %127, %struct._object** %_py_decref_tmp172, align 8
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp172, align 8
  %ob_refcnt173 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 0
  %129 = load i64, i64* %ob_refcnt173, align 8
  %dec174 = add i64 %129, -1
  store i64 %dec174, i64* %ob_refcnt173, align 8
  %cmp175 = icmp ne i64 %dec174, 0
  br i1 %cmp175, label %if.then.176, label %if.else.177

if.then.176:                                      ; preds = %do.body.171
  br label %if.end.180

if.else.177:                                      ; preds = %do.body.171
  %130 = load %struct._object*, %struct._object** %_py_decref_tmp172, align 8
  %ob_type178 = getelementptr inbounds %struct._object, %struct._object* %130, i32 0, i32 1
  %131 = load %struct._typeobject*, %struct._typeobject** %ob_type178, align 8
  %tp_dealloc179 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %131, i32 0, i32 4
  %132 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc179, align 8
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp172, align 8
  call void %132(%struct._object* %133)
  br label %if.end.180

if.end.180:                                       ; preds = %if.else.177, %if.then.176
  br label %do.end.181

do.end.181:                                       ; preds = %if.end.180
  br label %if.end.198

if.else.182:                                      ; preds = %entry
  %134 = load %struct._object*, %struct._object** %getstate, align 8
  %call183 = call %struct._object* @PyObject_CallObject(%struct._object* %134, %struct._object* null)
  store %struct._object* %call183, %struct._object** %state, align 8
  br label %do.body.184

do.body.184:                                      ; preds = %if.else.182
  %135 = load %struct._object*, %struct._object** %getstate, align 8
  store %struct._object* %135, %struct._object** %_py_decref_tmp185, align 8
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8
  %ob_refcnt186 = getelementptr inbounds %struct._object, %struct._object* %136, i32 0, i32 0
  %137 = load i64, i64* %ob_refcnt186, align 8
  %dec187 = add i64 %137, -1
  store i64 %dec187, i64* %ob_refcnt186, align 8
  %cmp188 = icmp ne i64 %dec187, 0
  br i1 %cmp188, label %if.then.189, label %if.else.190

if.then.189:                                      ; preds = %do.body.184
  br label %if.end.193

if.else.190:                                      ; preds = %do.body.184
  %138 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8
  %ob_type191 = getelementptr inbounds %struct._object, %struct._object* %138, i32 0, i32 1
  %139 = load %struct._typeobject*, %struct._typeobject** %ob_type191, align 8
  %tp_dealloc192 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %139, i32 0, i32 4
  %140 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc192, align 8
  %141 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8
  call void %140(%struct._object* %141)
  br label %if.end.193

if.end.193:                                       ; preds = %if.else.190, %if.then.189
  br label %do.end.194

do.end.194:                                       ; preds = %if.end.193
  %142 = load %struct._object*, %struct._object** %state, align 8
  %cmp195 = icmp eq %struct._object* %142, null
  br i1 %cmp195, label %if.then.196, label %if.end.197

if.then.196:                                      ; preds = %do.end.194
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.197:                                       ; preds = %do.end.194
  br label %if.end.198

if.end.198:                                       ; preds = %if.end.197, %do.end.181
  %143 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %143, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.198, %if.then.196, %do.end.156, %do.end.115, %do.end.49, %do.end, %if.then.2
  %144 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %144
}

; Function Attrs: nounwind uwtable
define internal i32 @_PyObject_GetItemsIter(%struct._object* %obj, %struct._object** %listitems, %struct._object** %dictitems) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %listitems.addr = alloca %struct._object**, align 8
  %dictitems.addr = alloca %struct._object**, align 8
  %items = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_tmp46 = alloca %struct._object*, align 8
  %_py_decref_tmp50 = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._object** %listitems, %struct._object*** %listitems.addr, align 8
  store %struct._object** %dictitems, %struct._object*** %dictitems.addr, align 8
  %0 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  %cmp = icmp eq %struct._object** %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object**, %struct._object*** %dictitems.addr, align 8
  %cmp1 = icmp eq %struct._object** %1, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @_PyErr_BadInternalCall(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i32 0, i32 0), i32 3811)
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 33554432
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.else, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %5 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %5, align 8
  %6 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  %7 = load %struct._object*, %struct._object** %6, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.7

if.else:                                          ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call %struct._object* @PyObject_GetIter(%struct._object* %9)
  %10 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  store %struct._object* %call, %struct._object** %10, align 8
  %11 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  %12 = load %struct._object*, %struct._object** %11, align 8
  %cmp4 = icmp eq %struct._object* %12, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.else
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6, %if.then.3
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %tp_flags9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 19
  %15 = load i64, i64* %tp_flags9, align 8
  %and10 = and i64 %15, 536870912
  %cmp11 = icmp ne i64 %and10, 0
  br i1 %cmp11, label %if.else.15, label %if.then.12

if.then.12:                                       ; preds = %if.end.7
  %16 = load %struct._object**, %struct._object*** %dictitems.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %16, align 8
  %17 = load %struct._object**, %struct._object*** %dictitems.addr, align 8
  %18 = load %struct._object*, %struct._object** %17, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt13, align 8
  %inc14 = add i64 %19, 1
  store i64 %inc14, i64* %ob_refcnt13, align 8
  br label %if.end.63

if.else.15:                                       ; preds = %if.end.7
  %20 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call16 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, ...) @_PyObject_CallMethodIdObjArgs(%struct._object* %20, %struct._Py_Identifier* @_PyObject_GetItemsIter.PyId_items, i8* null)
  store %struct._object* %call16, %struct._object** %items, align 8
  %21 = load %struct._object*, %struct._object** %items, align 8
  %cmp17 = icmp eq %struct._object* %21, null
  br i1 %cmp17, label %if.then.18, label %if.end.30

if.then.18:                                       ; preds = %if.else.15
  br label %do.body

do.body:                                          ; preds = %if.then.18
  %22 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  %23 = load %struct._object*, %struct._object** %22, align 8
  store %struct._object* %23, %struct._object** %_py_tmp, align 8
  %24 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp19 = icmp ne %struct._object* %24, null
  br i1 %cmp19, label %if.then.20, label %if.end.28

if.then.20:                                       ; preds = %do.body
  %25 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  store %struct._object* null, %struct._object** %25, align 8
  br label %do.body.21

do.body.21:                                       ; preds = %if.then.20
  %26 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt22, align 8
  %dec = add i64 %28, -1
  store i64 %dec, i64* %ob_refcnt22, align 8
  %cmp23 = icmp ne i64 %dec, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.21
  br label %if.end.27

if.else.25:                                       ; preds = %do.body.21
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %31(%struct._object* %32)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end

do.end:                                           ; preds = %if.end.27
  br label %if.end.28

if.end.28:                                        ; preds = %do.end, %do.body
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  store i32 -1, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.else.15
  %33 = load %struct._object*, %struct._object** %items, align 8
  %call31 = call %struct._object* @PyObject_GetIter(%struct._object* %33)
  %34 = load %struct._object**, %struct._object*** %dictitems.addr, align 8
  store %struct._object* %call31, %struct._object** %34, align 8
  br label %do.body.32

do.body.32:                                       ; preds = %if.end.30
  %35 = load %struct._object*, %struct._object** %items, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp33, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %37, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %40(%struct._object* %41)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  %42 = load %struct._object**, %struct._object*** %dictitems.addr, align 8
  %43 = load %struct._object*, %struct._object** %42, align 8
  %cmp43 = icmp eq %struct._object* %43, null
  br i1 %cmp43, label %if.then.44, label %if.end.62

if.then.44:                                       ; preds = %do.end.42
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %44 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  %45 = load %struct._object*, %struct._object** %44, align 8
  store %struct._object* %45, %struct._object** %_py_tmp46, align 8
  %46 = load %struct._object*, %struct._object** %_py_tmp46, align 8
  %cmp47 = icmp ne %struct._object* %46, null
  br i1 %cmp47, label %if.then.48, label %if.end.60

if.then.48:                                       ; preds = %do.body.45
  %47 = load %struct._object**, %struct._object*** %listitems.addr, align 8
  store %struct._object* null, %struct._object** %47, align 8
  br label %do.body.49

do.body.49:                                       ; preds = %if.then.48
  %48 = load %struct._object*, %struct._object** %_py_tmp46, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp50, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt51, align 8
  %dec52 = add i64 %50, -1
  store i64 %dec52, i64* %ob_refcnt51, align 8
  %cmp53 = icmp ne i64 %dec52, 0
  br i1 %cmp53, label %if.then.54, label %if.else.55

if.then.54:                                       ; preds = %do.body.49
  br label %if.end.58

if.else.55:                                       ; preds = %do.body.49
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_type56 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type56, align 8
  %tp_dealloc57 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc57, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  call void %53(%struct._object* %54)
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.55, %if.then.54
  br label %do.end.59

do.end.59:                                        ; preds = %if.end.58
  br label %if.end.60

if.end.60:                                        ; preds = %do.end.59, %do.body.45
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  store i32 -1, i32* %retval
  br label %return

if.end.62:                                        ; preds = %do.end.42
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then.12
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.63, %do.end.61, %do.end.29, %if.then.5, %if.then
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @_PyType_GetSlotNames(%struct._typeobject* %cls) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._typeobject*, align 8
  %copyreg = alloca %struct._object*, align 8
  %slotnames = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  store %struct._typeobject* %cls, %struct._typeobject** %cls.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %cls.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call = call %struct._object* @_PyDict_GetItemIdWithError(%struct._object* %1, %struct._Py_Identifier* @_PyType_GetSlotNames.PyId___slotnames__)
  store %struct._object* %call, %struct._object** %slotnames, align 8
  %2 = load %struct._object*, %struct._object** %slotnames, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %slotnames, align 8
  %cmp1 = icmp ne %struct._object* %3, @_Py_NoneStruct
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %slotnames, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 33554432
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %8 = load %struct._typeobject*, %struct._typeobject** %cls.addr, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 1
  %9 = load i8*, i8** %tp_name, align 8
  %10 = load %struct._object*, %struct._object** %slotnames, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_name5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 1
  %12 = load i8*, i8** %tp_name5, align 8
  %call6 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.285, i32 0, i32 0), i8* %9, i8* %12)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %13 = load %struct._object*, %struct._object** %slotnames, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %14, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %15 = load %struct._object*, %struct._object** %slotnames, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %call7 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call7, null
  br i1 %tobool, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.else
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9
  %call11 = call %struct._object* @import_copyreg()
  store %struct._object* %call11, %struct._object** %copyreg, align 8
  %16 = load %struct._object*, %struct._object** %copyreg, align 8
  %cmp12 = icmp eq %struct._object* %16, null
  br i1 %cmp12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.10
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.14:                                        ; preds = %if.end.10
  %17 = load %struct._object*, %struct._object** %copyreg, align 8
  %18 = load %struct._typeobject*, %struct._typeobject** %cls.addr, align 8
  %call15 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, ...) @_PyObject_CallMethodIdObjArgs(%struct._object* %17, %struct._Py_Identifier* @_PyType_GetSlotNames.PyId__slotnames, %struct._typeobject* %18, i8* null)
  store %struct._object* %call15, %struct._object** %slotnames, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.14
  %19 = load %struct._object*, %struct._object** %copyreg, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt16, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt16, align 8
  %cmp17 = icmp ne i64 %dec, 0
  br i1 %cmp17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %do.body
  br label %if.end.21

if.else.19:                                       ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.19, %if.then.18
  br label %do.end

do.end:                                           ; preds = %if.end.21
  %26 = load %struct._object*, %struct._object** %slotnames, align 8
  %cmp22 = icmp eq %struct._object* %26, null
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %do.end
  %27 = load %struct._object*, %struct._object** %slotnames, align 8
  %cmp25 = icmp ne %struct._object* %27, @_Py_NoneStruct
  br i1 %cmp25, label %land.lhs.true.26, label %if.end.43

land.lhs.true.26:                                 ; preds = %if.end.24
  %28 = load %struct._object*, %struct._object** %slotnames, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_flags28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 19
  %30 = load i64, i64* %tp_flags28, align 8
  %and29 = and i64 %30, 33554432
  %cmp30 = icmp ne i64 %and29, 0
  br i1 %cmp30, label %if.end.43, label %if.then.31

if.then.31:                                       ; preds = %land.lhs.true.26
  %31 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %31, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.286, i32 0, i32 0))
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.31
  %32 = load %struct._object*, %struct._object** %slotnames, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp33, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %34, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %37(%struct._object* %38)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.43:                                        ; preds = %land.lhs.true.26, %if.end.24
  %39 = load %struct._object*, %struct._object** %slotnames, align 8
  store %struct._object* %39, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.43, %do.end.42, %if.then.23, %if.then.13, %if.then.8, %if.end, %if.then.3
  %40 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %40
}

declare %struct._object* @PyObject_GetAttr(%struct._object*, %struct._object*) #1

declare %struct._object* @_PyDict_GetItemIdWithError(%struct._object*, %struct._Py_Identifier*) #1

declare %struct._object* @_PyObject_CallMethodIdObjArgs(%struct._object*, %struct._Py_Identifier*, ...) #1

declare %struct._object* @PyObject_GetIter(%struct._object*) #1

declare %struct._object* @PyDict_GetItemWithError(%struct._object*, %struct._object*) #1

declare %struct._object* @PyImport_Import(%struct._object*) #1

declare %struct._object* @PyObject_Str(%struct._object*) #1

declare %struct._object* @PyObject_Format(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @object_get_class(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = bitcast %struct._typeobject* %1 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 0
  %3 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct._object*
  ret %struct._object* %6
}

; Function Attrs: nounwind uwtable
define internal i32 @object_set_class(%struct._object* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %oldto = alloca %struct._typeobject*, align 8
  %newto = alloca %struct._typeobject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  store %struct._typeobject* %1, %struct._typeobject** %oldto, align 8
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.296, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 2147483648
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.end.5, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 1
  %10 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.297, i32 0, i32 0), i8* %10)
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %value.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct._typeobject*
  store %struct._typeobject* %12, %struct._typeobject** %newto, align 8
  %13 = load %struct._typeobject*, %struct._typeobject** %newto, align 8
  %tp_flags6 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  %14 = load i64, i64* %tp_flags6, align 8
  %and7 = and i64 %14, 512
  %tobool = icmp ne i64 %and7, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then.11

lor.lhs.false:                                    ; preds = %if.end.5
  %15 = load %struct._typeobject*, %struct._typeobject** %oldto, align 8
  %tp_flags8 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 19
  %16 = load i64, i64* %tp_flags8, align 8
  %and9 = and i64 %16, 512
  %tobool10 = icmp ne i64 %and9, 0
  br i1 %tobool10, label %if.end.13, label %if.then.11

if.then.11:                                       ; preds = %lor.lhs.false, %if.end.5
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %call12 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %17, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.298, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %lor.lhs.false
  %18 = load %struct._typeobject*, %struct._typeobject** %oldto, align 8
  %19 = load %struct._typeobject*, %struct._typeobject** %newto, align 8
  %call14 = call i32 @compatible_for_assignment(%struct._typeobject* %18, %struct._typeobject* %19, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.294, i32 0, i32 0))
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.else.23

if.then.16:                                       ; preds = %if.end.13
  %20 = load %struct._typeobject*, %struct._typeobject** %newto, align 8
  %21 = bitcast %struct._typeobject* %20 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %22, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %23 = load %struct._typeobject*, %struct._typeobject** %newto, align 8
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  store %struct._typeobject* %23, %struct._typeobject** %ob_type17, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.16
  %25 = load %struct._typeobject*, %struct._typeobject** %oldto, align 8
  %26 = bitcast %struct._typeobject* %25 to %struct._object*
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt18, align 8
  %dec = add i64 %28, -1
  store i64 %dec, i64* %ob_refcnt18, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body
  br label %if.end.22

if.else:                                          ; preds = %do.body
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %31(%struct._object* %32)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.20
  br label %do.end

do.end:                                           ; preds = %if.end.22
  store i32 0, i32* %retval
  br label %return

if.else.23:                                       ; preds = %if.end.13
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.else.23, %do.end, %if.then.11, %if.then.3, %if.then
  %33 = load i32, i32* %retval
  ret i32 %33
}

; Function Attrs: nounwind uwtable
define internal i32 @excess_args(%struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %tobool1 = icmp ne %struct._object* %3, null
  br i1 %tobool1, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %lor.rhs
  %4 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 536870912
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i64 @PyDict_Size(%struct._object* %7)
  %tobool2 = icmp ne i64 %call, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.rhs
  %8 = phi i1 [ false, %land.lhs.true ], [ false, %lor.rhs ], [ %tobool2, %land.rhs ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %entry
  %9 = phi i1 [ true, %entry ], [ %8, %land.end ]
  %lor.ext = zext i1 %9 to i32
  ret i32 %lor.ext
}

declare %struct._object* @PyEval_GetBuiltins() #1

declare %struct._object* @PyUnicode_Join(%struct._object*, %struct._object*) #1

declare %struct._object* @PyDict_GetItemString(%struct._object*, i8*) #1

declare %struct._object* @PyDescr_NewClassMethod(%struct._typeobject*, %struct.PyMethodDef*) #1

declare %struct._object* @PyCFunction_NewEx(%struct.PyMethodDef*, %struct._object*, %struct._object*) #1

declare %struct._object* @PyDescr_NewMethod(%struct._typeobject*, %struct.PyMethodDef*) #1

declare i32 @PyDict_SetItemString(%struct._object*, i8*, %struct._object*) #1

declare %struct._object* @PyDescr_NewMember(%struct._typeobject*, %struct.PyMemberDef*) #1

declare %struct._object* @PyDescr_NewGetSet(%struct._typeobject*, %struct.PyGetSetDef*) #1

; Function Attrs: nounwind uwtable
define internal void @type_mro_modified(%struct._typeobject* %type, %struct._object* %bases) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %bases.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %clear = alloca i32, align 4
  %b = alloca %struct._object*, align 8
  %cls = alloca %struct._typeobject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %bases, %struct._object** %bases.addr, align 8
  store i32 0, i32* %clear, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 19
  %1 = load i64, i64* %tp_flags, align 8
  %and = and i64 %1, 262144
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end.11

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %bases.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  store i64 %4, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i64, i64* %i, align 8
  %6 = load i64, i64* %n, align 8
  %cmp1 = icmp slt i64 %5, %6
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %i, align 8
  %8 = load %struct._object*, %struct._object** %bases.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %9, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %7
  %10 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %10, %struct._object** %b, align 8
  %11 = load %struct._object*, %struct._object** %b, align 8
  %12 = bitcast %struct._object* %11 to %struct._typeobject*
  store %struct._typeobject* %12, %struct._typeobject** %cls, align 8
  %13 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %tp_flags2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  %14 = load i64, i64* %tp_flags2, align 8
  %and3 = and i64 %14, 262144
  %cmp4 = icmp ne i64 %and3, 0
  br i1 %cmp4, label %lor.lhs.false, label %if.then.5

lor.lhs.false:                                    ; preds = %for.body
  %15 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %16 = load %struct._typeobject*, %struct._typeobject** %cls, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %15, %struct._typeobject* %16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %lor.lhs.false, %for.body
  store i32 1, i32* %clear, align 4
  br label %for.end

if.end.6:                                         ; preds = %lor.lhs.false
  br label %for.inc

for.inc:                                          ; preds = %if.end.6
  %17 = load i64, i64* %i, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.5, %for.cond
  %18 = load i32, i32* %clear, align 4
  %tobool7 = icmp ne i32 %18, 0
  br i1 %tobool7, label %if.then.8, label %if.end.11

if.then.8:                                        ; preds = %for.end
  %19 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_flags9 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19
  %20 = load i64, i64* %tp_flags9, align 8
  %and10 = and i64 %20, -786433
  store i64 %and10, i64* %tp_flags9, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.then, %if.then.8, %for.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @overrides_hash(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %dict = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  %2 = load %struct._object*, %struct._object** %dict, align 8
  %call = call %struct._object* @_PyDict_GetItemId(%struct._object* %2, %struct._Py_Identifier* @overrides_hash.PyId___eq__)
  %cmp = icmp ne %struct._object* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %dict, align 8
  %call1 = call %struct._object* @_PyDict_GetItemId(%struct._object* %3, %struct._Py_Identifier* @PyId___hash__)
  %cmp2 = icmp ne %struct._object* %call1, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

declare %struct._object* @PyWeakref_NewRef(%struct._object*, %struct._object*) #1

declare %struct._object* @PyDescr_NewWrapper(%struct._typeobject*, %struct.wrapperbase*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @add_tp_new_wrapper(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %func = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call = call %struct._object* @_PyDict_GetItemId(%struct._object* %1, %struct._Py_Identifier* @PyId___new__)
  %cmp = icmp ne %struct._object* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = bitcast %struct._typeobject* %2 to %struct._object*
  %call1 = call %struct._object* @PyCFunction_NewEx(%struct.PyMethodDef* getelementptr inbounds ([2 x %struct.PyMethodDef], [2 x %struct.PyMethodDef]* @tp_new_methoddef, i32 0, i32 0), %struct._object* %3, %struct._object* null)
  store %struct._object* %call1, %struct._object** %func, align 8
  %4 = load %struct._object*, %struct._object** %func, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %5 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict5 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 31
  %6 = load %struct._object*, %struct._object** %tp_dict5, align 8
  %7 = load %struct._object*, %struct._object** %func, align 8
  %call6 = call i32 @_PyDict_SetItemId(%struct._object* %6, %struct._Py_Identifier* @PyId___new__, %struct._object* %7)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.then.7, label %if.end.11

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %8 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.4
  br label %do.body.12

do.body.12:                                       ; preds = %if.end.11
  %15 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp13, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.22, %do.end, %if.then.3, %if.then
  %22 = load i32, i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal %struct._typeobject* @supercheck(%struct._typeobject* %type, %struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._typeobject*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %class_attr = alloca %struct._object*, align 8
  %ok = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 2147483648
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct._typeobject*
  %5 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %4, %struct._typeobject* %5)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct._typeobject*
  store %struct._typeobject* %9, %struct._typeobject** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call2 = call i32 @PyType_IsSubtype(%struct._typeobject* %11, %struct._typeobject* %12)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %13 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %15 = bitcast %struct._typeobject* %14 to %struct._object*
  %ob_refcnt6 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt6, align 8
  %inc7 = add i64 %16, 1
  store i64 %inc7, i64* %ob_refcnt6, align 8
  %17 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  store %struct._typeobject* %18, %struct._typeobject** %retval
  br label %return

if.else:                                          ; preds = %if.end
  %19 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call9 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %19, %struct._Py_Identifier* @PyId___class__)
  store %struct._object* %call9, %struct._object** %class_attr, align 8
  %20 = load %struct._object*, %struct._object** %class_attr, align 8
  %cmp10 = icmp ne %struct._object* %20, null
  br i1 %cmp10, label %land.lhs.true.11, label %if.end.24

land.lhs.true.11:                                 ; preds = %if.else
  %21 = load %struct._object*, %struct._object** %class_attr, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_flags13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 19
  %23 = load i64, i64* %tp_flags13, align 8
  %and14 = and i64 %23, 2147483648
  %cmp15 = icmp ne i64 %and14, 0
  br i1 %cmp15, label %land.lhs.true.16, label %if.end.24

land.lhs.true.16:                                 ; preds = %land.lhs.true.11
  %24 = load %struct._object*, %struct._object** %class_attr, align 8
  %25 = bitcast %struct._object* %24 to %struct._typeobject*
  %26 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %cmp18 = icmp ne %struct._typeobject* %25, %27
  br i1 %cmp18, label %if.then.19, label %if.end.24

if.then.19:                                       ; preds = %land.lhs.true.16
  %28 = load %struct._object*, %struct._object** %class_attr, align 8
  %29 = bitcast %struct._object* %28 to %struct._typeobject*
  %30 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call20 = call i32 @PyType_IsSubtype(%struct._typeobject* %29, %struct._typeobject* %30)
  store i32 %call20, i32* %ok, align 4
  %31 = load i32, i32* %ok, align 4
  %tobool21 = icmp ne i32 %31, 0
  br i1 %tobool21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.19
  %32 = load %struct._object*, %struct._object** %class_attr, align 8
  %33 = bitcast %struct._object* %32 to %struct._typeobject*
  store %struct._typeobject* %33, %struct._typeobject** %retval
  br label %return

if.end.23:                                        ; preds = %if.then.19
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %land.lhs.true.16, %land.lhs.true.11, %if.else
  %34 = load %struct._object*, %struct._object** %class_attr, align 8
  %cmp25 = icmp eq %struct._object* %34, null
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %if.end.24
  call void @PyErr_Clear()
  br label %if.end.34

if.else.27:                                       ; preds = %if.end.24
  br label %do.body

do.body:                                          ; preds = %if.else.27
  %35 = load %struct._object*, %struct._object** %class_attr, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt28, align 8
  %dec = add i64 %37, -1
  store i64 %dec, i64* %ob_refcnt28, align 8
  %cmp29 = icmp ne i64 %dec, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body
  br label %if.end.33

if.else.31:                                       ; preds = %do.body
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %40(%struct._object* %41)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end

do.end:                                           ; preds = %if.end.33
  br label %if.end.34

if.end.34:                                        ; preds = %do.end, %if.then.26
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34
  %42 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %42, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.317, i32 0, i32 0))
  store %struct._typeobject* null, %struct._typeobject** %retval
  br label %return

return:                                           ; preds = %if.end.35, %if.then.22, %if.then.4, %if.then
  %43 = load %struct._typeobject*, %struct._typeobject** %retval
  ret %struct._typeobject* %43
}

declare i32 @_PyArg_NoKeywords(i8*, %struct._object*) #1

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }
attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { noreturn }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 139700}
!2 = !{i32 139540}
