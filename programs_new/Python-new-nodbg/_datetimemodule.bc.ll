; ModuleID = './_datetimemodule.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.PyModuleDef = type { %struct.PyModuleDef_Base, i8*, i8*, i64, %struct.PyMethodDef*, i32 (%struct._object*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, void (i8*)* }
%struct.PyModuleDef_Base = type { %struct._object, %struct._object* ()*, i64, %struct._object* }
%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyDateTime_CAPI = type { %struct._typeobject*, %struct._typeobject*, %struct._typeobject*, %struct._typeobject*, %struct._typeobject*, %struct._object* (i32, i32, i32, %struct._typeobject*)*, %struct._object* (i32, i32, i32, i32, i32, i32, i32, %struct._object*, %struct._typeobject*)*, %struct._object* (i32, i32, i32, i32, %struct._object*, %struct._typeobject*)*, %struct._object* (i32, i32, i32, i32, %struct._typeobject*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)* }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct.PyDateTime_Delta = type { %struct._object, i64, i32, i32, i32 }
%struct.PyDateTime_Date = type { %struct._object, i64, i8, [4 x i8] }
%struct.PyDateTime_Time = type { %struct._object, i64, i8, [6 x i8], %struct._object* }
%struct.PyDateTime_DateTime = type { %struct._object, i64, i8, [10 x i8], %struct._object* }
%struct.PyDateTime_TimeZone = type { %struct._object, %struct._object*, %struct._object* }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct._PyDateTime_BaseTZInfo = type { %struct._object, i64, i8 }
%struct.PyASCIIObject = type { %struct._object, i64, i64, %struct.anon, i32* }
%struct.anon = type { i32 }
%struct.timeval = type { i64, i64 }
%struct.PyDateTime_TZInfo = type { %struct._object }

@datetimemodule = internal global %struct.PyModuleDef { %struct.PyModuleDef_Base { %struct._object { i64 1, %struct._typeobject* null }, %struct._object* ()* null, i64 0, %struct._object* null }, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.15, i32 0, i32 0), i64 -1, %struct.PyMethodDef* getelementptr inbounds ([1 x %struct.PyMethodDef], [1 x %struct.PyMethodDef]* @module_methods, i32 0, i32 0), i32 (%struct._object*)* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, void (i8*)* null }, align 8
@PyDateTime_DateType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i32 0, i32 0), i64 32, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* @date_as_number, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* bitcast (i64 (%struct.PyDateTime_Date*)* @date_hash to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_str to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @date_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @date_richcompare, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([15 x %struct.PyMethodDef], [15 x %struct.PyMethodDef]* @date_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([4 x %struct.PyGetSetDef], [4 x %struct.PyGetSetDef]* @date_getset, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @date_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDateTime_DateTimeType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.103, i32 0, i32 0), i64 48, i64 0, void (%struct._object*)* bitcast (void (%struct.PyDateTime_DateTime*)* @datetime_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* @datetime_as_number, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* bitcast (i64 (%struct.PyDateTime_DateTime*)* @datetime_hash to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_str to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([223 x i8], [223 x i8]* @datetime_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @datetime_richcompare, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([21 x %struct.PyMethodDef], [21 x %struct.PyMethodDef]* @datetime_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([6 x %struct.PyGetSetDef], [6 x %struct.PyGetSetDef]* @datetime_getset, i32 0, i32 0), %struct._typeobject* @PyDateTime_DateType, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* @datetime_alloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @datetime_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDateTime_DeltaType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.173, i32 0, i32 0), i64 40, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Delta*)* @delta_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* @delta_as_number, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* bitcast (i64 (%struct.PyDateTime_Delta*)* @delta_hash to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Delta*)* @delta_str to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @delta_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @delta_richcompare, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([3 x %struct.PyMethodDef], [3 x %struct.PyMethodDef]* @delta_methods, i32 0, i32 0), %struct.PyMemberDef* getelementptr inbounds ([4 x %struct.PyMemberDef], [4 x %struct.PyMemberDef]* @delta_members, i32 0, i32 0), %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @delta_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDateTime_TimeType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.198, i32 0, i32 0), i64 40, i64 0, void (%struct._object*)* bitcast (void (%struct.PyDateTime_Time*)* @time_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Time*)* @time_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* @time_as_number, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* bitcast (i64 (%struct.PyDateTime_Time*)* @time_hash to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Time*)* @time_str to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @time_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @time_richcompare, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([9 x %struct.PyMethodDef], [9 x %struct.PyMethodDef]* @time_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([6 x %struct.PyGetSetDef], [6 x %struct.PyGetSetDef]* @time_getset, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* @time_alloc, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @time_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDateTime_TZInfoType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.209, i32 0, i32 0), i64 16, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @tzinfo_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([6 x %struct.PyMethodDef], [6 x %struct.PyMethodDef]* @tzinfo_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyType_GenericNew, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDateTime_TimeZoneType = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.224, i32 0, i32 0), i64 32, i64 0, void (%struct._object*)* bitcast (void (%struct.PyDateTime_TimeZone*)* @timezone_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TimeZone*)* @timezone_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* bitcast (i64 (%struct.PyDateTime_TimeZone*)* @timezone_hash to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TimeZone*)* @timezone_str to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 262144, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @timezone_doc, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* bitcast (%struct._object* (%struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone*, i32)* @timezone_richcompare to %struct._object* (%struct._object*, %struct._object*, i32)*), i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([6 x %struct.PyMethodDef], [6 x %struct.PyMethodDef]* @timezone_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* @PyDateTime_TZInfoType, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @timezone_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str = private unnamed_addr constant [11 x i8] c"resolution\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"max\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@.str.3 = private unnamed_addr constant [4 x i8] c"utc\00", align 1
@PyDateTime_TimeZone_UTC = internal global %struct._object* null, align 8
@PyDateTime_Epoch = internal global %struct._object* null, align 8
@.str.4 = private unnamed_addr constant [8 x i8] c"MINYEAR\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"MAXYEAR\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"date\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"datetime\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.9 = private unnamed_addr constant [10 x i8] c"timedelta\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"tzinfo\00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"timezone\00", align 1
@CAPI = internal global %struct.PyDateTime_CAPI { %struct._typeobject* @PyDateTime_DateType, %struct._typeobject* @PyDateTime_DateTimeType, %struct._typeobject* @PyDateTime_TimeType, %struct._typeobject* @PyDateTime_DeltaType, %struct._typeobject* @PyDateTime_TZInfoType, %struct._object* (i32, i32, i32, %struct._typeobject*)* @new_date_ex, %struct._object* (i32, i32, i32, i32, i32, i32, i32, %struct._object*, %struct._typeobject*)* @new_datetime_ex, %struct._object* (i32, i32, i32, i32, %struct._object*, %struct._typeobject*)* @new_time_ex, %struct._object* (i32, i32, i32, i32, %struct._typeobject*)* @new_delta_ex, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @datetime_fromtimestamp, %struct._object* (%struct._object*, %struct._object*)* @date_fromtimestamp }, align 8
@.str.12 = private unnamed_addr constant [23 x i8] c"datetime.datetime_CAPI\00", align 1
@.str.13 = private unnamed_addr constant [14 x i8] c"datetime_CAPI\00", align 1
@one = internal global %struct._object* null, align 8
@us_per_ms = internal global %struct._object* null, align 8
@us_per_second = internal global %struct._object* null, align 8
@us_per_minute = internal global %struct._object* null, align 8
@seconds_per_day = internal global %struct._object* null, align 8
@us_per_hour = internal global %struct._object* null, align 8
@us_per_day = internal global %struct._object* null, align 8
@us_per_week = internal global %struct._object* null, align 8
@.str.14 = private unnamed_addr constant [10 x i8] c"_datetime\00", align 1
@.str.15 = private unnamed_addr constant [42 x i8] c"Fast implementation of the datetime type.\00", align 1
@module_methods = internal global [1 x %struct.PyMethodDef] zeroinitializer, align 16
@.str.16 = private unnamed_addr constant [14 x i8] c"datetime.date\00", align 1
@date_as_number = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* @date_add, %struct._object* (%struct._object*, %struct._object*)* @date_subtract, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@date_doc = internal global [39 x i8] c"date(year, month, day) --> date object\00", align 16
@date_methods = internal global [15 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @date_fromtimestamp, i32 17, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.22, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @date_fromordinal, i32 17, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.24, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.25, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @date_today, i32 20, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.26, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_ctime to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.28, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, %struct._object*, %struct._object*)* @date_strftime to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.30, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, %struct._object*)* @date_format to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_timetuple to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.35, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_isocalendar to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.36, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_isoformat to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.37, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.38, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_isoweekday to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.39, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.40, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_toordinal to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.41, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*)* @date_weekday to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.43, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, %struct._object*, %struct._object*)* @date_replace to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.45, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, %struct._object*)* @date_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.47, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@date_getset = internal global [4 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, i8*)* @date_year to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, i8*)* @date_month to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, i8*)* @date_day to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.17 = private unnamed_addr constant [15 x i8] c"%s(%d, %d, %d)\00", align 1
@_Py_NotImplementedStruct = external global %struct._object, align 8
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.18 = private unnamed_addr constant [24 x i8] c"date value out of range\00", align 1
@_days_in_month = internal global [13 x i32] [i32 0, i32 31, i32 28, i32 31, i32 30, i32 31, i32 30, i32 31, i32 31, i32 30, i32 31, i32 30, i32 31], align 16
@_days_before_month = internal global [13 x i32] [i32 0, i32 0, i32 31, i32 59, i32 90, i32 120, i32 151, i32 181, i32 212, i32 243, i32 273, i32 304, i32 334], align 16
@PyId_isoformat = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), %struct._object* null }, align 8
@.str.19 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"isoformat\00", align 1
@_Py_TrueStruct = external global %struct._longobject, align 8
@_Py_FalseStruct = external global %struct._longobject, align 8
@.str.21 = private unnamed_addr constant [14 x i8] c"fromtimestamp\00", align 1
@.str.22 = private unnamed_addr constant [67 x i8] c"timestamp -> local date from a POSIX timestamp (like time.time()).\00", align 1
@.str.23 = private unnamed_addr constant [12 x i8] c"fromordinal\00", align 1
@.str.24 = private unnamed_addr constant [60 x i8] c"int -> date corresponding to a proleptic Gregorian ordinal.\00", align 1
@.str.25 = private unnamed_addr constant [6 x i8] c"today\00", align 1
@.str.26 = private unnamed_addr constant [78 x i8] c"Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"ctime\00", align 1
@.str.28 = private unnamed_addr constant [29 x i8] c"Return ctime() style string.\00", align 1
@.str.29 = private unnamed_addr constant [9 x i8] c"strftime\00", align 1
@.str.30 = private unnamed_addr constant [35 x i8] c"format -> strftime() style string.\00", align 1
@.str.31 = private unnamed_addr constant [11 x i8] c"__format__\00", align 1
@.str.32 = private unnamed_addr constant [28 x i8] c"Formats self with strftime.\00", align 1
@.str.33 = private unnamed_addr constant [10 x i8] c"timetuple\00", align 1
@.str.34 = private unnamed_addr constant [53 x i8] c"Return time tuple, compatible with time.localtime().\00", align 1
@.str.35 = private unnamed_addr constant [12 x i8] c"isocalendar\00", align 1
@.str.36 = private unnamed_addr constant [64 x i8] c"Return a 3-tuple containing ISO year, week number, and weekday.\00", align 1
@.str.37 = private unnamed_addr constant [46 x i8] c"Return string in ISO 8601 format, YYYY-MM-DD.\00", align 1
@.str.38 = private unnamed_addr constant [11 x i8] c"isoweekday\00", align 1
@.str.39 = private unnamed_addr constant [80 x i8] c"Return the day of the week represented by the date.\0AMonday == 1 ... Sunday == 7\00", align 1
@.str.40 = private unnamed_addr constant [10 x i8] c"toordinal\00", align 1
@.str.41 = private unnamed_addr constant [67 x i8] c"Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"weekday\00", align 1
@.str.43 = private unnamed_addr constant [80 x i8] c"Return the day of the week represented by the date.\0AMonday == 0 ... Sunday == 6\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"replace\00", align 1
@.str.45 = private unnamed_addr constant [39 x i8] c"Return date with new specified fields.\00", align 1
@.str.46 = private unnamed_addr constant [11 x i8] c"__reduce__\00", align 1
@.str.47 = private unnamed_addr constant [29 x i8] c"__reduce__() -> (cls, state)\00", align 1
@.str.48 = private unnamed_addr constant [16 x i8] c"O:fromtimestamp\00", align 1
@PyExc_OSError = external global %struct._object*, align 8
@.str.49 = private unnamed_addr constant [4 x i8] c"iii\00", align 1
@.str.50 = private unnamed_addr constant [14 x i8] c"i:fromordinal\00", align 1
@PyExc_ValueError = external global %struct._object*, align 8
@.str.51 = private unnamed_addr constant [21 x i8] c"ordinal must be >= 1\00", align 1
@date_today.PyId_fromtimestamp = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0), %struct._object* null }, align 8
@.str.52 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@time_time.PyId_time = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), %struct._object* null }, align 8
@format_ctime.DayNames = internal global [7 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.59, i32 0, i32 0)], align 16
@.str.53 = private unnamed_addr constant [4 x i8] c"Mon\00", align 1
@.str.54 = private unnamed_addr constant [4 x i8] c"Tue\00", align 1
@.str.55 = private unnamed_addr constant [4 x i8] c"Wed\00", align 1
@.str.56 = private unnamed_addr constant [4 x i8] c"Thu\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"Fri\00", align 1
@.str.58 = private unnamed_addr constant [4 x i8] c"Sat\00", align 1
@.str.59 = private unnamed_addr constant [4 x i8] c"Sun\00", align 1
@format_ctime.MonthNames = internal global [12 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.71, i32 0, i32 0)], align 16
@.str.60 = private unnamed_addr constant [4 x i8] c"Jan\00", align 1
@.str.61 = private unnamed_addr constant [4 x i8] c"Feb\00", align 1
@.str.62 = private unnamed_addr constant [4 x i8] c"Mar\00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"Apr\00", align 1
@.str.64 = private unnamed_addr constant [4 x i8] c"May\00", align 1
@.str.65 = private unnamed_addr constant [4 x i8] c"Jun\00", align 1
@.str.66 = private unnamed_addr constant [4 x i8] c"Jul\00", align 1
@.str.67 = private unnamed_addr constant [4 x i8] c"Aug\00", align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"Sep\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"Oct\00", align 1
@.str.70 = private unnamed_addr constant [4 x i8] c"Nov\00", align 1
@.str.71 = private unnamed_addr constant [4 x i8] c"Dec\00", align 1
@.str.72 = private unnamed_addr constant [30 x i8] c"%s %s %2d %02d:%02d:%02d %04d\00", align 1
@date_strftime.PyId_timetuple = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), %struct._object* null }, align 8
@date_strftime.keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.73, i32 0, i32 0), i8* null], align 16
@.str.73 = private unnamed_addr constant [7 x i8] c"format\00", align 1
@.str.74 = private unnamed_addr constant [11 x i8] c"U:strftime\00", align 1
@.str.75 = private unnamed_addr constant [32 x i8] c"strftime format ends with raw %\00", align 1
@.str.76 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@PyId_strftime = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29, i32 0, i32 0), %struct._object* null }, align 8
@.str.77 = private unnamed_addr constant [3 x i8] c"OO\00", align 1
@.str.78 = private unnamed_addr constant [13 x i8] c"%c%02d%s%02d\00", align 1
@.str.79 = private unnamed_addr constant [10 x i8] c"utcoffset\00", align 1
@.str.80 = private unnamed_addr constant [66 x i8] c"offset must be a timedelta representing a whole number of minutes\00", align 1
@.str.81 = private unnamed_addr constant [90 x i8] c"offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24).\00", align 1
@PyExc_TypeError = external global %struct._object*, align 8
@.str.82 = private unnamed_addr constant [56 x i8] c"tzinfo.%s() must return None or timedelta, not '%.200s'\00", align 1
@make_Zreplacement.PyId_replace = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), %struct._object* null }, align 8
@.str.83 = private unnamed_addr constant [3 x i8] c"ss\00", align 1
@.str.84 = private unnamed_addr constant [2 x i8] c"%\00", align 1
@.str.85 = private unnamed_addr constant [3 x i8] c"%%\00", align 1
@.str.86 = private unnamed_addr constant [41 x i8] c"tzname.replace() did not return a string\00", align 1
@call_tzname.PyId_tzname = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0), %struct._object* null }, align 8
@.str.87 = private unnamed_addr constant [7 x i8] c"tzname\00", align 1
@.str.88 = private unnamed_addr constant [55 x i8] c"tzinfo.tzname() must return None or a string, not '%s'\00", align 1
@.str.89 = private unnamed_addr constant [5 x i8] c"%06d\00", align 1
@.str.90 = private unnamed_addr constant [13 x i8] c"U:__format__\00", align 1
@build_struct_time.PyId_struct_time = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.91, i32 0, i32 0), %struct._object* null }, align 8
@.str.91 = private unnamed_addr constant [12 x i8] c"struct_time\00", align 1
@.str.92 = private unnamed_addr constant [14 x i8] c"((iiiiiiiii))\00", align 1
@.str.93 = private unnamed_addr constant [15 x i8] c"%04d-%02d-%02d\00", align 1
@.str.94 = private unnamed_addr constant [13 x i8] c"|iii:replace\00", align 1
@date_kws = internal global [4 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97, i32 0, i32 0), i8* null], align 16
@.str.95 = private unnamed_addr constant [5 x i8] c"year\00", align 1
@.str.96 = private unnamed_addr constant [6 x i8] c"month\00", align 1
@.str.97 = private unnamed_addr constant [4 x i8] c"day\00", align 1
@.str.98 = private unnamed_addr constant [5 x i8] c"(ON)\00", align 1
@.str.99 = private unnamed_addr constant [4 x i8] c"(N)\00", align 1
@.str.100 = private unnamed_addr constant [21 x i8] c"year is out of range\00", align 1
@.str.101 = private unnamed_addr constant [23 x i8] c"month must be in 1..12\00", align 1
@.str.102 = private unnamed_addr constant [30 x i8] c"day is out of range for month\00", align 1
@.str.103 = private unnamed_addr constant [18 x i8] c"datetime.datetime\00", align 1
@datetime_as_number = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* @datetime_add, %struct._object* (%struct._object*, %struct._object*)* @datetime_subtract, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@datetime_doc = internal global [223 x i8] c"datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])\0A\0AThe year, month and day arguments are required. tzinfo may be None, or an\0Ainstance of a tzinfo subclass. The remaining arguments may be ints.\0A\00", align 16
@datetime_methods = internal global [21 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.113, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @datetime_datetime_now to %struct._object* (%struct._object*, %struct._object*)*), i32 19, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @datetime_datetime_now__doc__, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.114, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @datetime_utcnow, i32 20, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.115, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.21, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @datetime_fromtimestamp to %struct._object* (%struct._object*, %struct._object*)*), i32 19, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.116, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.117, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @datetime_utcfromtimestamp, i32 17, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.118, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.119, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @datetime_strptime, i32 17, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.120, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.121, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @datetime_combine to %struct._object* (%struct._object*, %struct._object*)*), i32 19, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.122, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_getdate to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.123, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_gettime to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.124, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.125, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_gettimetz to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.126, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_ctime to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.28, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.33, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_timetuple to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.34, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.127, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_timestamp to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.128, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.129, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*)* @datetime_utctimetuple to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.130, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, %struct._object*, %struct._object*)* @datetime_isoformat to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([144 x i8], [144 x i8]* @.str.131, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @datetime_utcoffset, i32 4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.132, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @datetime_tzname, i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.133, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @datetime_dst, i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.135, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, %struct._object*, %struct._object*)* @datetime_replace to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.136, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.137, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct.PyDateTime_DateTime* (%struct.PyDateTime_DateTime*, %struct._object*, %struct._object*)* @datetime_astimezone to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.138, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, %struct._object*)* @datetime_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.47, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@datetime_getset = internal global [6 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.158, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, i8*)* @datetime_hour to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.159, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, i8*)* @datetime_minute to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.160, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, i8*)* @datetime_second to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.161, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, i8*)* @datetime_microsecond to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_DateTime*, i8*)* @datetime_tzinfo to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.104 = private unnamed_addr constant [31 x i8] c"%s(%d, %d, %d, %d, %d, %d, %d)\00", align 1
@.str.105 = private unnamed_addr constant [27 x i8] c"%s(%d, %d, %d, %d, %d, %d)\00", align 1
@.str.106 = private unnamed_addr constant [23 x i8] c"%s(%d, %d, %d, %d, %d)\00", align 1
@.str.107 = private unnamed_addr constant [15 x i8] c"%U, tzinfo=%R)\00", align 1
@.str.108 = private unnamed_addr constant [55 x i8] c"can't subtract offset-naive and offset-aware datetimes\00", align 1
@.str.109 = private unnamed_addr constant [4 x i8] c"(s)\00", align 1
@.str.110 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.111 = private unnamed_addr constant [54 x i8] c"can't compare offset-naive and offset-aware datetimes\00", align 1
@.str.112 = private unnamed_addr constant [23 x i8] c"can't compare %s to %s\00", align 1
@.str.113 = private unnamed_addr constant [4 x i8] c"now\00", align 1
@datetime_datetime_now__doc__ = internal global [166 x i8] c"now($type, /, tz=None)\0A--\0A\0AReturns new datetime object representing current time local to tz.\0A\0A  tz\0A    Timezone object.\0A\0AIf no tz is specified, uses local timezone.\00", align 16
@.str.114 = private unnamed_addr constant [7 x i8] c"utcnow\00", align 1
@.str.115 = private unnamed_addr constant [53 x i8] c"Return a new datetime representing UTC day and time.\00", align 1
@.str.116 = private unnamed_addr constant [57 x i8] c"timestamp[, tz] -> tz's local time from POSIX timestamp.\00", align 1
@.str.117 = private unnamed_addr constant [17 x i8] c"utcfromtimestamp\00", align 1
@.str.118 = private unnamed_addr constant [69 x i8] c"timestamp -> UTC datetime from a POSIX timestamp (like time.time()).\00", align 1
@.str.119 = private unnamed_addr constant [9 x i8] c"strptime\00", align 1
@.str.120 = private unnamed_addr constant [76 x i8] c"string, format -> new datetime parsed from a string (like time.strptime()).\00", align 1
@.str.121 = private unnamed_addr constant [8 x i8] c"combine\00", align 1
@.str.122 = private unnamed_addr constant [54 x i8] c"date, time -> datetime with same date and time fields\00", align 1
@.str.123 = private unnamed_addr constant [50 x i8] c"Return date object with same year, month and day.\00", align 1
@.str.124 = private unnamed_addr constant [56 x i8] c"Return time object with same time but with tzinfo=None.\00", align 1
@.str.125 = private unnamed_addr constant [7 x i8] c"timetz\00", align 1
@.str.126 = private unnamed_addr constant [46 x i8] c"Return time object with same time and tzinfo.\00", align 1
@.str.127 = private unnamed_addr constant [10 x i8] c"timestamp\00", align 1
@.str.128 = private unnamed_addr constant [33 x i8] c"Return POSIX timestamp as float.\00", align 1
@.str.129 = private unnamed_addr constant [13 x i8] c"utctimetuple\00", align 1
@.str.130 = private unnamed_addr constant [57 x i8] c"Return UTC time tuple, compatible with time.localtime().\00", align 1
@.str.131 = private unnamed_addr constant [144 x i8] c"[sep] -> string in ISO 8601 format, YYYY-MM-DDTHH:MM:SS[.mmmmmm][+HH:MM].\0A\0Asep is used to separate the year from the time, and defaults to 'T'.\00", align 1
@.str.132 = private unnamed_addr constant [36 x i8] c"Return self.tzinfo.utcoffset(self).\00", align 1
@.str.133 = private unnamed_addr constant [33 x i8] c"Return self.tzinfo.tzname(self).\00", align 1
@.str.134 = private unnamed_addr constant [4 x i8] c"dst\00", align 1
@.str.135 = private unnamed_addr constant [30 x i8] c"Return self.tzinfo.dst(self).\00", align 1
@.str.136 = private unnamed_addr constant [43 x i8] c"Return datetime with new specified fields.\00", align 1
@.str.137 = private unnamed_addr constant [11 x i8] c"astimezone\00", align 1
@.str.138 = private unnamed_addr constant [48 x i8] c"tz -> convert to local time in new timezone tz\0A\00", align 1
@datetime_datetime_now._keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0), i8* null], align 16
@.str.139 = private unnamed_addr constant [3 x i8] c"tz\00", align 1
@.str.140 = private unnamed_addr constant [7 x i8] c"|O:now\00", align 1
@PyId_fromutc = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.143, i32 0, i32 0), %struct._object* null }, align 8
@.str.141 = private unnamed_addr constant [68 x i8] c"tzinfo argument must be None or of a tzinfo subclass, not type '%s'\00", align 1
@.str.142 = private unnamed_addr constant [9 x i8] c"iiiiiiiO\00", align 1
@.str.143 = private unnamed_addr constant [8 x i8] c"fromutc\00", align 1
@datetime_fromtimestamp.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0), i8* null], align 16
@.str.144 = private unnamed_addr constant [18 x i8] c"O|O:fromtimestamp\00", align 1
@.str.145 = private unnamed_addr constant [19 x i8] c"O:utcfromtimestamp\00", align 1
@datetime_strptime.module = internal global %struct._object* null, align 8
@datetime_strptime.PyId__strptime_datetime = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.146, i32 0, i32 0), %struct._object* null }, align 8
@.str.146 = private unnamed_addr constant [19 x i8] c"_strptime_datetime\00", align 1
@.str.147 = private unnamed_addr constant [12 x i8] c"UU:strptime\00", align 1
@.str.148 = private unnamed_addr constant [10 x i8] c"_strptime\00", align 1
@.str.149 = private unnamed_addr constant [4 x i8] c"OOO\00", align 1
@datetime_combine.keywords = internal global [3 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* null], align 16
@.str.150 = private unnamed_addr constant [13 x i8] c"O!O!:combine\00", align 1
@.str.151 = private unnamed_addr constant [23 x i8] c"timestamp out of range\00", align 1
@datetime_isoformat.keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.152, i32 0, i32 0), i8* null], align 16
@.str.152 = private unnamed_addr constant [4 x i8] c"sep\00", align 1
@.str.153 = private unnamed_addr constant [13 x i8] c"|C:isoformat\00", align 1
@.str.154 = private unnamed_addr constant [36 x i8] c"%04d-%02d-%02d%c%02d:%02d:%02d.%06d\00", align 1
@.str.155 = private unnamed_addr constant [31 x i8] c"%04d-%02d-%02d%c%02d:%02d:%02d\00", align 1
@.str.156 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.157 = private unnamed_addr constant [18 x i8] c"|iiiiiiiO:replace\00", align 1
@datetime_kws = internal global [9 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* null], align 16
@.str.158 = private unnamed_addr constant [5 x i8] c"hour\00", align 1
@.str.159 = private unnamed_addr constant [7 x i8] c"minute\00", align 1
@.str.160 = private unnamed_addr constant [7 x i8] c"second\00", align 1
@.str.161 = private unnamed_addr constant [12 x i8] c"microsecond\00", align 1
@datetime_astimezone.keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.139, i32 0, i32 0), i8* null], align 16
@.str.162 = private unnamed_addr constant [14 x i8] c"|O:astimezone\00", align 1
@.str.163 = private unnamed_addr constant [51 x i8] c"astimezone() cannot be applied to a naive datetime\00", align 1
@.str.164 = private unnamed_addr constant [16 x i8] c"surrogateescape\00", align 1
@.str.165 = private unnamed_addr constant [75 x i8] c"offset must be a timedelta representing a whole number of minutes, not %R.\00", align 1
@.str.166 = private unnamed_addr constant [98 x i8] c"offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24), not %R.\00", align 1
@.str.167 = private unnamed_addr constant [21 x i8] c"bad tzinfo state arg\00", align 1
@.str.168 = private unnamed_addr constant [10 x i8] c"iii|iiiiO\00", align 1
@.str.169 = private unnamed_addr constant [22 x i8] c"hour must be in 0..23\00", align 1
@.str.170 = private unnamed_addr constant [24 x i8] c"minute must be in 0..59\00", align 1
@.str.171 = private unnamed_addr constant [24 x i8] c"second must be in 0..59\00", align 1
@.str.172 = private unnamed_addr constant [33 x i8] c"microsecond must be in 0..999999\00", align 1
@.str.173 = private unnamed_addr constant [19 x i8] c"datetime.timedelta\00", align 1
@delta_as_number = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* @delta_add, %struct._object* (%struct._object*, %struct._object*)* @delta_subtract, %struct._object* (%struct._object*, %struct._object*)* @delta_multiply, %struct._object* (%struct._object*, %struct._object*)* @delta_remainder, %struct._object* (%struct._object*, %struct._object*)* @delta_divmod, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Delta*)* @delta_negative to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Delta*)* @delta_positive to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Delta*)* @delta_abs to %struct._object* (%struct._object*)*), i32 (%struct._object*)* bitcast (i32 (%struct.PyDateTime_Delta*)* @delta_bool to i32 (%struct._object*)*), %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @delta_divide, %struct._object* (%struct._object*, %struct._object*)* @delta_truedivide, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@delta_doc = internal global [40 x i8] c"Difference between two datetime values.\00", align 16
@delta_methods = internal global [3 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.183, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @delta_total_seconds to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.184, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Delta*)* @delta_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.47, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@delta_members = internal global [4 x %struct.PyMemberDef] [%struct.PyMemberDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.186, i32 0, i32 0), i32 1, i64 24, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.187, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.188, i32 0, i32 0), i32 1, i64 28, i32 1, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.189, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.190, i32 0, i32 0), i32 1, i64 32, i32 1, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.191, i32 0, i32 0) }, %struct.PyMemberDef zeroinitializer], align 16
@.str.174 = private unnamed_addr constant [11 x i8] c"%s(%d, %d)\00", align 1
@.str.175 = private unnamed_addr constant [7 x i8] c"%s(%d)\00", align 1
@PyFloat_Type = external global %struct._typeobject, align 8
@.str.176 = private unnamed_addr constant [44 x i8] c"normalized days too large to fit in a C int\00", align 1
@PyId_as_integer_ratio = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.177, i32 0, i32 0), %struct._object* null }, align 8
@.str.177 = private unnamed_addr constant [17 x i8] c"as_integer_ratio\00", align 1
@.str.178 = private unnamed_addr constant [28 x i8] c"%d day%s, %d:%02d:%02d.%06d\00", align 1
@.str.179 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.180 = private unnamed_addr constant [23 x i8] c"%d day%s, %d:%02d:%02d\00", align 1
@.str.181 = private unnamed_addr constant [18 x i8] c"%d:%02d:%02d.%06d\00", align 1
@.str.182 = private unnamed_addr constant [13 x i8] c"%d:%02d:%02d\00", align 1
@.str.183 = private unnamed_addr constant [14 x i8] c"total_seconds\00", align 1
@.str.184 = private unnamed_addr constant [31 x i8] c"Total seconds in the duration.\00", align 1
@.str.185 = private unnamed_addr constant [3 x i8] c"ON\00", align 1
@.str.186 = private unnamed_addr constant [5 x i8] c"days\00", align 1
@.str.187 = private unnamed_addr constant [16 x i8] c"Number of days.\00", align 1
@.str.188 = private unnamed_addr constant [8 x i8] c"seconds\00", align 1
@.str.189 = private unnamed_addr constant [46 x i8] c"Number of seconds (>= 0 and less than 1 day).\00", align 1
@.str.190 = private unnamed_addr constant [13 x i8] c"microseconds\00", align 1
@.str.191 = private unnamed_addr constant [54 x i8] c"Number of microseconds (>= 0 and less than 1 second).\00", align 1
@delta_new.keywords = internal global [8 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.186, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.190, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.192, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.193, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.194, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.195, i32 0, i32 0), i8* null], align 16
@.str.192 = private unnamed_addr constant [13 x i8] c"milliseconds\00", align 1
@.str.193 = private unnamed_addr constant [8 x i8] c"minutes\00", align 1
@.str.194 = private unnamed_addr constant [6 x i8] c"hours\00", align 1
@.str.195 = private unnamed_addr constant [6 x i8] c"weeks\00", align 1
@.str.196 = private unnamed_addr constant [17 x i8] c"|OOOOOOO:__new__\00", align 1
@.str.197 = private unnamed_addr constant [48 x i8] c"unsupported type for timedelta %s component: %s\00", align 1
@.str.198 = private unnamed_addr constant [14 x i8] c"datetime.time\00", align 1
@time_as_number = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, i32 (%struct._object*)* @time_bool, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@time_doc = internal global [200 x i8] c"time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object\0A\0AAll arguments are optional. tzinfo may be None, or an instance of\0Aa tzinfo subclass. The remaining arguments may be ints.\0A\00", align 16
@time_methods = internal global [9 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, %struct._object*)* @time_isoformat to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.201, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, %struct._object*, %struct._object*)* @time_strftime to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.30, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.31, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Date*, %struct._object*)* @date_format to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @time_utcoffset, i32 4, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.132, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, %struct._object*)* @time_tzname to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.133, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @time_dst, i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.135, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, %struct._object*, %struct._object*)* @time_replace to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.202, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, %struct._object*)* @time_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.47, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@time_getset = internal global [6 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.158, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, i8*)* @time_hour to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.159, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, i8*)* @time_minute to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.160, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, i8*)* @py_time_second to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.161, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, i8*)* @time_microsecond to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyDateTime_Time*, i8*)* @time_tzinfo to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.199 = private unnamed_addr constant [19 x i8] c"%s(%d, %d, %d, %d)\00", align 1
@.str.200 = private unnamed_addr constant [50 x i8] c"can't compare offset-naive and offset-aware times\00", align 1
@.str.201 = private unnamed_addr constant [61 x i8] c"Return string in ISO 8601 format, HH:MM:SS[.mmmmmm][+HH:MM].\00", align 1
@.str.202 = private unnamed_addr constant [39 x i8] c"Return time with new specified fields.\00", align 1
@.str.203 = private unnamed_addr constant [20 x i8] c"%02d:%02d:%02d.%06d\00", align 1
@.str.204 = private unnamed_addr constant [15 x i8] c"%02d:%02d:%02d\00", align 1
@time_strftime.keywords = internal global [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.73, i32 0, i32 0), i8* null], align 16
@.str.205 = private unnamed_addr constant [10 x i8] c"iiiiiiiii\00", align 1
@.str.206 = private unnamed_addr constant [15 x i8] c"|iiiiO:replace\00", align 1
@time_kws = internal global [6 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), i8* null], align 16
@.str.207 = private unnamed_addr constant [6 x i8] c"iiiiO\00", align 1
@.str.208 = private unnamed_addr constant [7 x i8] c"|iiiiO\00", align 1
@.str.209 = private unnamed_addr constant [16 x i8] c"datetime.tzinfo\00", align 1
@tzinfo_doc = internal global [48 x i8] c"Abstract base class for time zone info objects.\00", align 16
@tzinfo_methods = internal global [6 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TZInfo*, %struct._object*)* @tzinfo_tzname to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.210, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TZInfo*, %struct._object*)* @tzinfo_utcoffset to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.211, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TZInfo*, %struct._object*)* @tzinfo_dst to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.212, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.143, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TZInfo*, %struct._object*)* @tzinfo_fromutc to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.213, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.46, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*)* @tzinfo_reduce to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.214, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.210 = private unnamed_addr constant [38 x i8] c"datetime -> string name of time zone.\00", align 1
@.str.211 = private unnamed_addr constant [86 x i8] c"datetime -> timedelta showing offset from UTC, negative values indicating West of UTC\00", align 1
@.str.212 = private unnamed_addr constant [47 x i8] c"datetime -> DST offset in minutes east of UTC.\00", align 1
@.str.213 = private unnamed_addr constant [43 x i8] c"datetime in UTC -> datetime in local time.\00", align 1
@.str.214 = private unnamed_addr constant [16 x i8] c"-> (cls, state)\00", align 1
@PyExc_NotImplementedError = external global %struct._object*, align 8
@.str.215 = private unnamed_addr constant [38 x i8] c"a tzinfo subclass must implement %s()\00", align 1
@.str.216 = private unnamed_addr constant [37 x i8] c"fromutc: argument must be a datetime\00", align 1
@.str.217 = private unnamed_addr constant [31 x i8] c"fromutc: dt.tzinfo is not self\00", align 1
@.str.218 = private unnamed_addr constant [46 x i8] c"fromutc: non-None utcoffset() result required\00", align 1
@.str.219 = private unnamed_addr constant [40 x i8] c"fromutc: non-None dst() result required\00", align 1
@.str.220 = private unnamed_addr constant [59 x i8] c"fromutc: tz.dst() gaveinconsistent results; cannot convert\00", align 1
@tzinfo_reduce.PyId___getinitargs__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.221, i32 0, i32 0), %struct._object* null }, align 8
@.str.221 = private unnamed_addr constant [16 x i8] c"__getinitargs__\00", align 1
@tzinfo_reduce.PyId___getstate__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.222, i32 0, i32 0), %struct._object* null }, align 8
@.str.222 = private unnamed_addr constant [13 x i8] c"__getstate__\00", align 1
@.str.223 = private unnamed_addr constant [6 x i8] c"(ONN)\00", align 1
@.str.224 = private unnamed_addr constant [18 x i8] c"datetime.timezone\00", align 1
@timezone_doc = internal global [48 x i8] c"Fixed offset from UTC implementation of tzinfo.\00", align 16
@timezone_methods = internal global [6 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TimeZone*, %struct._object*)* @timezone_tzname to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.229, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TimeZone*, %struct._object*)* @timezone_utcoffset to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.230, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @timezone_dst, i32 8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.231, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.143, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TimeZone*, %struct.PyDateTime_DateTime*)* @timezone_fromutc to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.213, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.221, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDateTime_TimeZone*)* @timezone_getinitargs to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.232, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@.str.225 = private unnamed_addr constant [7 x i8] c"%s.utc\00", align 1
@.str.226 = private unnamed_addr constant [7 x i8] c"%s(%R)\00", align 1
@.str.227 = private unnamed_addr constant [11 x i8] c"%s(%R, %R)\00", align 1
@.str.228 = private unnamed_addr constant [15 x i8] c"UTC%c%02d:%02d\00", align 1
@.str.229 = private unnamed_addr constant [111 x i8] c"If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'.\00", align 1
@.str.230 = private unnamed_addr constant [21 x i8] c"Return fixed offset.\00", align 1
@.str.231 = private unnamed_addr constant [13 x i8] c"Return None.\00", align 1
@.str.232 = private unnamed_addr constant [15 x i8] c"pickle support\00", align 1
@.str.233 = private unnamed_addr constant [64 x i8] c"%s(dt) argument must be a datetime instance or None, not %.200s\00", align 1
@.str.234 = private unnamed_addr constant [4 x i8] c"(O)\00", align 1
@.str.235 = private unnamed_addr constant [5 x i8] c"(OO)\00", align 1
@.str.236 = private unnamed_addr constant [15 x i8] c"O!|O!:timezone\00", align 1
@timezone_kws = internal global [3 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.237, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.238, i32 0, i32 0), i8* null], align 16
@PyUnicode_Type = external global %struct._typeobject, align 8
@.str.237 = private unnamed_addr constant [7 x i8] c"offset\00", align 1
@.str.238 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.239 = private unnamed_addr constant [35 x i8] c"days=%d; must have magnitude <= %d\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @PyInit__datetime() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m = alloca %struct._object*, align 8
  %d = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  %delta = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp60 = alloca %struct._object*, align 8
  %_py_decref_tmp78 = alloca %struct._object*, align 8
  %_py_decref_tmp96 = alloca %struct._object*, align 8
  %_py_decref_tmp114 = alloca %struct._object*, align 8
  %_py_decref_tmp132 = alloca %struct._object*, align 8
  %_py_decref_tmp150 = alloca %struct._object*, align 8
  %_py_decref_tmp168 = alloca %struct._object*, align 8
  %_py_decref_tmp186 = alloca %struct._object*, align 8
  %_py_decref_tmp204 = alloca %struct._object*, align 8
  %_py_decref_tmp222 = alloca %struct._object*, align 8
  %_py_decref_tmp238 = alloca %struct._object*, align 8
  %_py_decref_tmp260 = alloca %struct._object*, align 8
  %_py_decref_tmp277 = alloca %struct._object*, align 8
  %_py_decref_tmp293 = alloca %struct._object*, align 8
  %_py_decref_tmp310 = alloca %struct._object*, align 8
  %call = call %struct._object* @PyModule_Create2(%struct.PyModuleDef* @datetimemodule, i32 1013)
  store %struct._object* %call, %struct._object** %m, align 8
  %0 = load %struct._object*, %struct._object** %m, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call i32 @PyType_Ready(%struct._typeobject* @PyDateTime_DateType)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %call5 = call i32 @PyType_Ready(%struct._typeobject* @PyDateTime_DateTimeType)
  %cmp6 = icmp slt i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %call9 = call i32 @PyType_Ready(%struct._typeobject* @PyDateTime_DeltaType)
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  %call13 = call i32 @PyType_Ready(%struct._typeobject* @PyDateTime_TimeType)
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %call17 = call i32 @PyType_Ready(%struct._typeobject* @PyDateTime_TZInfoType)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.16
  %call21 = call i32 @PyType_Ready(%struct._typeobject* @PyDateTime_TimeZoneType)
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.20
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %if.end.20
  %1 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DeltaType, i32 0, i32 31), align 8
  store %struct._object* %1, %struct._object** %d, align 8
  %call25 = call %struct._object* @new_delta_ex(i32 0, i32 0, i32 1, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call25, %struct._object** %x, align 8
  %2 = load %struct._object*, %struct._object** %x, align 8
  %cmp26 = icmp eq %struct._object* %2, null
  br i1 %cmp26, label %if.then.29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.24
  %3 = load %struct._object*, %struct._object** %d, align 8
  %4 = load %struct._object*, %struct._object** %x, align 8
  %call27 = call i32 @PyDict_SetItemString(%struct._object* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), %struct._object* %4)
  %cmp28 = icmp slt i32 %call27, 0
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %lor.lhs.false, %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.30:                                        ; preds = %lor.lhs.false
  br label %do.body

do.body:                                          ; preds = %if.end.30
  %5 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp31 = icmp ne i64 %dec, 0
  br i1 %cmp31, label %if.then.32, label %if.else

if.then.32:                                       ; preds = %do.body
  br label %if.end.33

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else, %if.then.32
  br label %do.end

do.end:                                           ; preds = %if.end.33
  %call34 = call %struct._object* @new_delta_ex(i32 -999999999, i32 0, i32 0, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call34, %struct._object** %x, align 8
  %12 = load %struct._object*, %struct._object** %x, align 8
  %cmp35 = icmp eq %struct._object* %12, null
  br i1 %cmp35, label %if.then.39, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %do.end
  %13 = load %struct._object*, %struct._object** %d, align 8
  %14 = load %struct._object*, %struct._object** %x, align 8
  %call37 = call i32 @PyDict_SetItemString(%struct._object* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct._object* %14)
  %cmp38 = icmp slt i32 %call37, 0
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %lor.lhs.false.36, %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %lor.lhs.false.36
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.40
  %15 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp42, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %17, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %20(%struct._object* %21)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  %call52 = call %struct._object* @new_delta_ex(i32 999999999, i32 86399, i32 999999, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call52, %struct._object** %x, align 8
  %22 = load %struct._object*, %struct._object** %x, align 8
  %cmp53 = icmp eq %struct._object* %22, null
  br i1 %cmp53, label %if.then.57, label %lor.lhs.false.54

lor.lhs.false.54:                                 ; preds = %do.end.51
  %23 = load %struct._object*, %struct._object** %d, align 8
  %24 = load %struct._object*, %struct._object** %x, align 8
  %call55 = call i32 @PyDict_SetItemString(%struct._object* %23, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), %struct._object* %24)
  %cmp56 = icmp slt i32 %call55, 0
  br i1 %cmp56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %lor.lhs.false.54, %do.end.51
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.58:                                        ; preds = %lor.lhs.false.54
  br label %do.body.59

do.body.59:                                       ; preds = %if.end.58
  %25 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp60, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_refcnt61 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt61, align 8
  %dec62 = add i64 %27, -1
  store i64 %dec62, i64* %ob_refcnt61, align 8
  %cmp63 = icmp ne i64 %dec62, 0
  br i1 %cmp63, label %if.then.64, label %if.else.65

if.then.64:                                       ; preds = %do.body.59
  br label %if.end.68

if.else.65:                                       ; preds = %do.body.59
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_dealloc67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc67, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  call void %30(%struct._object* %31)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.65, %if.then.64
  br label %do.end.69

do.end.69:                                        ; preds = %if.end.68
  %32 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateType, i32 0, i32 31), align 8
  store %struct._object* %32, %struct._object** %d, align 8
  %call70 = call %struct._object* @new_date_ex(i32 1, i32 1, i32 1, %struct._typeobject* @PyDateTime_DateType)
  store %struct._object* %call70, %struct._object** %x, align 8
  %33 = load %struct._object*, %struct._object** %x, align 8
  %cmp71 = icmp eq %struct._object* %33, null
  br i1 %cmp71, label %if.then.75, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %do.end.69
  %34 = load %struct._object*, %struct._object** %d, align 8
  %35 = load %struct._object*, %struct._object** %x, align 8
  %call73 = call i32 @PyDict_SetItemString(%struct._object* %34, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct._object* %35)
  %cmp74 = icmp slt i32 %call73, 0
  br i1 %cmp74, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %lor.lhs.false.72, %do.end.69
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %lor.lhs.false.72
  br label %do.body.77

do.body.77:                                       ; preds = %if.end.76
  %36 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp78, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_refcnt79 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt79, align 8
  %dec80 = add i64 %38, -1
  store i64 %dec80, i64* %ob_refcnt79, align 8
  %cmp81 = icmp ne i64 %dec80, 0
  br i1 %cmp81, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %do.body.77
  br label %if.end.86

if.else.83:                                       ; preds = %do.body.77
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  call void %41(%struct._object* %42)
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  %call88 = call %struct._object* @new_date_ex(i32 9999, i32 12, i32 31, %struct._typeobject* @PyDateTime_DateType)
  store %struct._object* %call88, %struct._object** %x, align 8
  %43 = load %struct._object*, %struct._object** %x, align 8
  %cmp89 = icmp eq %struct._object* %43, null
  br i1 %cmp89, label %if.then.93, label %lor.lhs.false.90

lor.lhs.false.90:                                 ; preds = %do.end.87
  %44 = load %struct._object*, %struct._object** %d, align 8
  %45 = load %struct._object*, %struct._object** %x, align 8
  %call91 = call i32 @PyDict_SetItemString(%struct._object* %44, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), %struct._object* %45)
  %cmp92 = icmp slt i32 %call91, 0
  br i1 %cmp92, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %lor.lhs.false.90, %do.end.87
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.94:                                        ; preds = %lor.lhs.false.90
  br label %do.body.95

do.body.95:                                       ; preds = %if.end.94
  %46 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp96, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_refcnt97 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt97, align 8
  %dec98 = add i64 %48, -1
  store i64 %dec98, i64* %ob_refcnt97, align 8
  %cmp99 = icmp ne i64 %dec98, 0
  br i1 %cmp99, label %if.then.100, label %if.else.101

if.then.100:                                      ; preds = %do.body.95
  br label %if.end.104

if.else.101:                                      ; preds = %do.body.95
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_type102 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type102, align 8
  %tp_dealloc103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc103, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  call void %51(%struct._object* %52)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.101, %if.then.100
  br label %do.end.105

do.end.105:                                       ; preds = %if.end.104
  %call106 = call %struct._object* @new_delta_ex(i32 1, i32 0, i32 0, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call106, %struct._object** %x, align 8
  %53 = load %struct._object*, %struct._object** %x, align 8
  %cmp107 = icmp eq %struct._object* %53, null
  br i1 %cmp107, label %if.then.111, label %lor.lhs.false.108

lor.lhs.false.108:                                ; preds = %do.end.105
  %54 = load %struct._object*, %struct._object** %d, align 8
  %55 = load %struct._object*, %struct._object** %x, align 8
  %call109 = call i32 @PyDict_SetItemString(%struct._object* %54, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), %struct._object* %55)
  %cmp110 = icmp slt i32 %call109, 0
  br i1 %cmp110, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %lor.lhs.false.108, %do.end.105
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.112:                                       ; preds = %lor.lhs.false.108
  br label %do.body.113

do.body.113:                                      ; preds = %if.end.112
  %56 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp114, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_refcnt115 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt115, align 8
  %dec116 = add i64 %58, -1
  store i64 %dec116, i64* %ob_refcnt115, align 8
  %cmp117 = icmp ne i64 %dec116, 0
  br i1 %cmp117, label %if.then.118, label %if.else.119

if.then.118:                                      ; preds = %do.body.113
  br label %if.end.122

if.else.119:                                      ; preds = %do.body.113
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_type120 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type120, align 8
  %tp_dealloc121 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc121, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  call void %61(%struct._object* %62)
  br label %if.end.122

if.end.122:                                       ; preds = %if.else.119, %if.then.118
  br label %do.end.123

do.end.123:                                       ; preds = %if.end.122
  %63 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeType, i32 0, i32 31), align 8
  store %struct._object* %63, %struct._object** %d, align 8
  %call124 = call %struct._object* @new_time_ex(i32 0, i32 0, i32 0, i32 0, %struct._object* @_Py_NoneStruct, %struct._typeobject* @PyDateTime_TimeType)
  store %struct._object* %call124, %struct._object** %x, align 8
  %64 = load %struct._object*, %struct._object** %x, align 8
  %cmp125 = icmp eq %struct._object* %64, null
  br i1 %cmp125, label %if.then.129, label %lor.lhs.false.126

lor.lhs.false.126:                                ; preds = %do.end.123
  %65 = load %struct._object*, %struct._object** %d, align 8
  %66 = load %struct._object*, %struct._object** %x, align 8
  %call127 = call i32 @PyDict_SetItemString(%struct._object* %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct._object* %66)
  %cmp128 = icmp slt i32 %call127, 0
  br i1 %cmp128, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %lor.lhs.false.126, %do.end.123
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.130:                                       ; preds = %lor.lhs.false.126
  br label %do.body.131

do.body.131:                                      ; preds = %if.end.130
  %67 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %67, %struct._object** %_py_decref_tmp132, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  %ob_refcnt133 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0
  %69 = load i64, i64* %ob_refcnt133, align 8
  %dec134 = add i64 %69, -1
  store i64 %dec134, i64* %ob_refcnt133, align 8
  %cmp135 = icmp ne i64 %dec134, 0
  br i1 %cmp135, label %if.then.136, label %if.else.137

if.then.136:                                      ; preds = %do.body.131
  br label %if.end.140

if.else.137:                                      ; preds = %do.body.131
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  %ob_type138 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type138, align 8
  %tp_dealloc139 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc139, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp132, align 8
  call void %72(%struct._object* %73)
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.137, %if.then.136
  br label %do.end.141

do.end.141:                                       ; preds = %if.end.140
  %call142 = call %struct._object* @new_time_ex(i32 23, i32 59, i32 59, i32 999999, %struct._object* @_Py_NoneStruct, %struct._typeobject* @PyDateTime_TimeType)
  store %struct._object* %call142, %struct._object** %x, align 8
  %74 = load %struct._object*, %struct._object** %x, align 8
  %cmp143 = icmp eq %struct._object* %74, null
  br i1 %cmp143, label %if.then.147, label %lor.lhs.false.144

lor.lhs.false.144:                                ; preds = %do.end.141
  %75 = load %struct._object*, %struct._object** %d, align 8
  %76 = load %struct._object*, %struct._object** %x, align 8
  %call145 = call i32 @PyDict_SetItemString(%struct._object* %75, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), %struct._object* %76)
  %cmp146 = icmp slt i32 %call145, 0
  br i1 %cmp146, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %lor.lhs.false.144, %do.end.141
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.148:                                       ; preds = %lor.lhs.false.144
  br label %do.body.149

do.body.149:                                      ; preds = %if.end.148
  %77 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp150, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp150, align 8
  %ob_refcnt151 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt151, align 8
  %dec152 = add i64 %79, -1
  store i64 %dec152, i64* %ob_refcnt151, align 8
  %cmp153 = icmp ne i64 %dec152, 0
  br i1 %cmp153, label %if.then.154, label %if.else.155

if.then.154:                                      ; preds = %do.body.149
  br label %if.end.158

if.else.155:                                      ; preds = %do.body.149
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp150, align 8
  %ob_type156 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type156, align 8
  %tp_dealloc157 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc157, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp150, align 8
  call void %82(%struct._object* %83)
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.155, %if.then.154
  br label %do.end.159

do.end.159:                                       ; preds = %if.end.158
  %call160 = call %struct._object* @new_delta_ex(i32 0, i32 0, i32 1, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call160, %struct._object** %x, align 8
  %84 = load %struct._object*, %struct._object** %x, align 8
  %cmp161 = icmp eq %struct._object* %84, null
  br i1 %cmp161, label %if.then.165, label %lor.lhs.false.162

lor.lhs.false.162:                                ; preds = %do.end.159
  %85 = load %struct._object*, %struct._object** %d, align 8
  %86 = load %struct._object*, %struct._object** %x, align 8
  %call163 = call i32 @PyDict_SetItemString(%struct._object* %85, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), %struct._object* %86)
  %cmp164 = icmp slt i32 %call163, 0
  br i1 %cmp164, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %lor.lhs.false.162, %do.end.159
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.166:                                       ; preds = %lor.lhs.false.162
  br label %do.body.167

do.body.167:                                      ; preds = %if.end.166
  %87 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %87, %struct._object** %_py_decref_tmp168, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  %ob_refcnt169 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 0
  %89 = load i64, i64* %ob_refcnt169, align 8
  %dec170 = add i64 %89, -1
  store i64 %dec170, i64* %ob_refcnt169, align 8
  %cmp171 = icmp ne i64 %dec170, 0
  br i1 %cmp171, label %if.then.172, label %if.else.173

if.then.172:                                      ; preds = %do.body.167
  br label %if.end.176

if.else.173:                                      ; preds = %do.body.167
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  %ob_type174 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 1
  %91 = load %struct._typeobject*, %struct._typeobject** %ob_type174, align 8
  %tp_dealloc175 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %91, i32 0, i32 4
  %92 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc175, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  call void %92(%struct._object* %93)
  br label %if.end.176

if.end.176:                                       ; preds = %if.else.173, %if.then.172
  br label %do.end.177

do.end.177:                                       ; preds = %if.end.176
  %94 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateTimeType, i32 0, i32 31), align 8
  store %struct._object* %94, %struct._object** %d, align 8
  %call178 = call %struct._object* @new_datetime_ex(i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, %struct._object* @_Py_NoneStruct, %struct._typeobject* @PyDateTime_DateTimeType)
  store %struct._object* %call178, %struct._object** %x, align 8
  %95 = load %struct._object*, %struct._object** %x, align 8
  %cmp179 = icmp eq %struct._object* %95, null
  br i1 %cmp179, label %if.then.183, label %lor.lhs.false.180

lor.lhs.false.180:                                ; preds = %do.end.177
  %96 = load %struct._object*, %struct._object** %d, align 8
  %97 = load %struct._object*, %struct._object** %x, align 8
  %call181 = call i32 @PyDict_SetItemString(%struct._object* %96, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct._object* %97)
  %cmp182 = icmp slt i32 %call181, 0
  br i1 %cmp182, label %if.then.183, label %if.end.184

if.then.183:                                      ; preds = %lor.lhs.false.180, %do.end.177
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.184:                                       ; preds = %lor.lhs.false.180
  br label %do.body.185

do.body.185:                                      ; preds = %if.end.184
  %98 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %98, %struct._object** %_py_decref_tmp186, align 8
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  %ob_refcnt187 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0
  %100 = load i64, i64* %ob_refcnt187, align 8
  %dec188 = add i64 %100, -1
  store i64 %dec188, i64* %ob_refcnt187, align 8
  %cmp189 = icmp ne i64 %dec188, 0
  br i1 %cmp189, label %if.then.190, label %if.else.191

if.then.190:                                      ; preds = %do.body.185
  br label %if.end.194

if.else.191:                                      ; preds = %do.body.185
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  %ob_type192 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type192, align 8
  %tp_dealloc193 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc193, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  call void %103(%struct._object* %104)
  br label %if.end.194

if.end.194:                                       ; preds = %if.else.191, %if.then.190
  br label %do.end.195

do.end.195:                                       ; preds = %if.end.194
  %call196 = call %struct._object* @new_datetime_ex(i32 9999, i32 12, i32 31, i32 23, i32 59, i32 59, i32 999999, %struct._object* @_Py_NoneStruct, %struct._typeobject* @PyDateTime_DateTimeType)
  store %struct._object* %call196, %struct._object** %x, align 8
  %105 = load %struct._object*, %struct._object** %x, align 8
  %cmp197 = icmp eq %struct._object* %105, null
  br i1 %cmp197, label %if.then.201, label %lor.lhs.false.198

lor.lhs.false.198:                                ; preds = %do.end.195
  %106 = load %struct._object*, %struct._object** %d, align 8
  %107 = load %struct._object*, %struct._object** %x, align 8
  %call199 = call i32 @PyDict_SetItemString(%struct._object* %106, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), %struct._object* %107)
  %cmp200 = icmp slt i32 %call199, 0
  br i1 %cmp200, label %if.then.201, label %if.end.202

if.then.201:                                      ; preds = %lor.lhs.false.198, %do.end.195
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.202:                                       ; preds = %lor.lhs.false.198
  br label %do.body.203

do.body.203:                                      ; preds = %if.end.202
  %108 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %108, %struct._object** %_py_decref_tmp204, align 8
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp204, align 8
  %ob_refcnt205 = getelementptr inbounds %struct._object, %struct._object* %109, i32 0, i32 0
  %110 = load i64, i64* %ob_refcnt205, align 8
  %dec206 = add i64 %110, -1
  store i64 %dec206, i64* %ob_refcnt205, align 8
  %cmp207 = icmp ne i64 %dec206, 0
  br i1 %cmp207, label %if.then.208, label %if.else.209

if.then.208:                                      ; preds = %do.body.203
  br label %if.end.212

if.else.209:                                      ; preds = %do.body.203
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp204, align 8
  %ob_type210 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 1
  %112 = load %struct._typeobject*, %struct._typeobject** %ob_type210, align 8
  %tp_dealloc211 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %112, i32 0, i32 4
  %113 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc211, align 8
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp204, align 8
  call void %113(%struct._object* %114)
  br label %if.end.212

if.end.212:                                       ; preds = %if.else.209, %if.then.208
  br label %do.end.213

do.end.213:                                       ; preds = %if.end.212
  %call214 = call %struct._object* @new_delta_ex(i32 0, i32 0, i32 1, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call214, %struct._object** %x, align 8
  %115 = load %struct._object*, %struct._object** %x, align 8
  %cmp215 = icmp eq %struct._object* %115, null
  br i1 %cmp215, label %if.then.219, label %lor.lhs.false.216

lor.lhs.false.216:                                ; preds = %do.end.213
  %116 = load %struct._object*, %struct._object** %d, align 8
  %117 = load %struct._object*, %struct._object** %x, align 8
  %call217 = call i32 @PyDict_SetItemString(%struct._object* %116, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i32 0, i32 0), %struct._object* %117)
  %cmp218 = icmp slt i32 %call217, 0
  br i1 %cmp218, label %if.then.219, label %if.end.220

if.then.219:                                      ; preds = %lor.lhs.false.216, %do.end.213
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.220:                                       ; preds = %lor.lhs.false.216
  br label %do.body.221

do.body.221:                                      ; preds = %if.end.220
  %118 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %118, %struct._object** %_py_decref_tmp222, align 8
  %119 = load %struct._object*, %struct._object** %_py_decref_tmp222, align 8
  %ob_refcnt223 = getelementptr inbounds %struct._object, %struct._object* %119, i32 0, i32 0
  %120 = load i64, i64* %ob_refcnt223, align 8
  %dec224 = add i64 %120, -1
  store i64 %dec224, i64* %ob_refcnt223, align 8
  %cmp225 = icmp ne i64 %dec224, 0
  br i1 %cmp225, label %if.then.226, label %if.else.227

if.then.226:                                      ; preds = %do.body.221
  br label %if.end.230

if.else.227:                                      ; preds = %do.body.221
  %121 = load %struct._object*, %struct._object** %_py_decref_tmp222, align 8
  %ob_type228 = getelementptr inbounds %struct._object, %struct._object* %121, i32 0, i32 1
  %122 = load %struct._typeobject*, %struct._typeobject** %ob_type228, align 8
  %tp_dealloc229 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %122, i32 0, i32 4
  %123 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc229, align 8
  %124 = load %struct._object*, %struct._object** %_py_decref_tmp222, align 8
  call void %123(%struct._object* %124)
  br label %if.end.230

if.end.230:                                       ; preds = %if.else.227, %if.then.226
  br label %do.end.231

do.end.231:                                       ; preds = %if.end.230
  %125 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeZoneType, i32 0, i32 31), align 8
  store %struct._object* %125, %struct._object** %d, align 8
  %call232 = call %struct._object* @new_delta_ex(i32 0, i32 0, i32 0, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call232, %struct._object** %delta, align 8
  %126 = load %struct._object*, %struct._object** %delta, align 8
  %cmp233 = icmp eq %struct._object* %126, null
  br i1 %cmp233, label %if.then.234, label %if.end.235

if.then.234:                                      ; preds = %do.end.231
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.235:                                       ; preds = %do.end.231
  %127 = load %struct._object*, %struct._object** %delta, align 8
  %call236 = call %struct._object* @create_timezone(%struct._object* %127, %struct._object* null)
  store %struct._object* %call236, %struct._object** %x, align 8
  br label %do.body.237

do.body.237:                                      ; preds = %if.end.235
  %128 = load %struct._object*, %struct._object** %delta, align 8
  store %struct._object* %128, %struct._object** %_py_decref_tmp238, align 8
  %129 = load %struct._object*, %struct._object** %_py_decref_tmp238, align 8
  %ob_refcnt239 = getelementptr inbounds %struct._object, %struct._object* %129, i32 0, i32 0
  %130 = load i64, i64* %ob_refcnt239, align 8
  %dec240 = add i64 %130, -1
  store i64 %dec240, i64* %ob_refcnt239, align 8
  %cmp241 = icmp ne i64 %dec240, 0
  br i1 %cmp241, label %if.then.242, label %if.else.243

if.then.242:                                      ; preds = %do.body.237
  br label %if.end.246

if.else.243:                                      ; preds = %do.body.237
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp238, align 8
  %ob_type244 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 1
  %132 = load %struct._typeobject*, %struct._typeobject** %ob_type244, align 8
  %tp_dealloc245 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %132, i32 0, i32 4
  %133 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc245, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp238, align 8
  call void %133(%struct._object* %134)
  br label %if.end.246

if.end.246:                                       ; preds = %if.else.243, %if.then.242
  br label %do.end.247

do.end.247:                                       ; preds = %if.end.246
  %135 = load %struct._object*, %struct._object** %x, align 8
  %cmp248 = icmp eq %struct._object* %135, null
  br i1 %cmp248, label %if.then.252, label %lor.lhs.false.249

lor.lhs.false.249:                                ; preds = %do.end.247
  %136 = load %struct._object*, %struct._object** %d, align 8
  %137 = load %struct._object*, %struct._object** %x, align 8
  %call250 = call i32 @PyDict_SetItemString(%struct._object* %136, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i32 0, i32 0), %struct._object* %137)
  %cmp251 = icmp slt i32 %call250, 0
  br i1 %cmp251, label %if.then.252, label %if.end.253

if.then.252:                                      ; preds = %lor.lhs.false.249, %do.end.247
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.253:                                       ; preds = %lor.lhs.false.249
  %138 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %138, %struct._object** @PyDateTime_TimeZone_UTC, align 8
  %call254 = call %struct._object* @new_delta_ex(i32 -1, i32 60, i32 0, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call254, %struct._object** %delta, align 8
  %139 = load %struct._object*, %struct._object** %delta, align 8
  %cmp255 = icmp eq %struct._object* %139, null
  br i1 %cmp255, label %if.then.256, label %if.end.257

if.then.256:                                      ; preds = %if.end.253
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.257:                                       ; preds = %if.end.253
  %140 = load %struct._object*, %struct._object** %delta, align 8
  %call258 = call %struct._object* @create_timezone(%struct._object* %140, %struct._object* null)
  store %struct._object* %call258, %struct._object** %x, align 8
  br label %do.body.259

do.body.259:                                      ; preds = %if.end.257
  %141 = load %struct._object*, %struct._object** %delta, align 8
  store %struct._object* %141, %struct._object** %_py_decref_tmp260, align 8
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp260, align 8
  %ob_refcnt261 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 0
  %143 = load i64, i64* %ob_refcnt261, align 8
  %dec262 = add i64 %143, -1
  store i64 %dec262, i64* %ob_refcnt261, align 8
  %cmp263 = icmp ne i64 %dec262, 0
  br i1 %cmp263, label %if.then.264, label %if.else.265

if.then.264:                                      ; preds = %do.body.259
  br label %if.end.268

if.else.265:                                      ; preds = %do.body.259
  %144 = load %struct._object*, %struct._object** %_py_decref_tmp260, align 8
  %ob_type266 = getelementptr inbounds %struct._object, %struct._object* %144, i32 0, i32 1
  %145 = load %struct._typeobject*, %struct._typeobject** %ob_type266, align 8
  %tp_dealloc267 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %145, i32 0, i32 4
  %146 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc267, align 8
  %147 = load %struct._object*, %struct._object** %_py_decref_tmp260, align 8
  call void %146(%struct._object* %147)
  br label %if.end.268

if.end.268:                                       ; preds = %if.else.265, %if.then.264
  br label %do.end.269

do.end.269:                                       ; preds = %if.end.268
  %148 = load %struct._object*, %struct._object** %x, align 8
  %cmp270 = icmp eq %struct._object* %148, null
  br i1 %cmp270, label %if.then.274, label %lor.lhs.false.271

lor.lhs.false.271:                                ; preds = %do.end.269
  %149 = load %struct._object*, %struct._object** %d, align 8
  %150 = load %struct._object*, %struct._object** %x, align 8
  %call272 = call i32 @PyDict_SetItemString(%struct._object* %149, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), %struct._object* %150)
  %cmp273 = icmp slt i32 %call272, 0
  br i1 %cmp273, label %if.then.274, label %if.end.275

if.then.274:                                      ; preds = %lor.lhs.false.271, %do.end.269
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.275:                                       ; preds = %lor.lhs.false.271
  br label %do.body.276

do.body.276:                                      ; preds = %if.end.275
  %151 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %151, %struct._object** %_py_decref_tmp277, align 8
  %152 = load %struct._object*, %struct._object** %_py_decref_tmp277, align 8
  %ob_refcnt278 = getelementptr inbounds %struct._object, %struct._object* %152, i32 0, i32 0
  %153 = load i64, i64* %ob_refcnt278, align 8
  %dec279 = add i64 %153, -1
  store i64 %dec279, i64* %ob_refcnt278, align 8
  %cmp280 = icmp ne i64 %dec279, 0
  br i1 %cmp280, label %if.then.281, label %if.else.282

if.then.281:                                      ; preds = %do.body.276
  br label %if.end.285

if.else.282:                                      ; preds = %do.body.276
  %154 = load %struct._object*, %struct._object** %_py_decref_tmp277, align 8
  %ob_type283 = getelementptr inbounds %struct._object, %struct._object* %154, i32 0, i32 1
  %155 = load %struct._typeobject*, %struct._typeobject** %ob_type283, align 8
  %tp_dealloc284 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %155, i32 0, i32 4
  %156 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc284, align 8
  %157 = load %struct._object*, %struct._object** %_py_decref_tmp277, align 8
  call void %156(%struct._object* %157)
  br label %if.end.285

if.end.285:                                       ; preds = %if.else.282, %if.then.281
  br label %do.end.286

do.end.286:                                       ; preds = %if.end.285
  %call287 = call %struct._object* @new_delta_ex(i32 0, i32 86340, i32 0, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call287, %struct._object** %delta, align 8
  %158 = load %struct._object*, %struct._object** %delta, align 8
  %cmp288 = icmp eq %struct._object* %158, null
  br i1 %cmp288, label %if.then.289, label %if.end.290

if.then.289:                                      ; preds = %do.end.286
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.290:                                       ; preds = %do.end.286
  %159 = load %struct._object*, %struct._object** %delta, align 8
  %call291 = call %struct._object* @create_timezone(%struct._object* %159, %struct._object* null)
  store %struct._object* %call291, %struct._object** %x, align 8
  br label %do.body.292

do.body.292:                                      ; preds = %if.end.290
  %160 = load %struct._object*, %struct._object** %delta, align 8
  store %struct._object* %160, %struct._object** %_py_decref_tmp293, align 8
  %161 = load %struct._object*, %struct._object** %_py_decref_tmp293, align 8
  %ob_refcnt294 = getelementptr inbounds %struct._object, %struct._object* %161, i32 0, i32 0
  %162 = load i64, i64* %ob_refcnt294, align 8
  %dec295 = add i64 %162, -1
  store i64 %dec295, i64* %ob_refcnt294, align 8
  %cmp296 = icmp ne i64 %dec295, 0
  br i1 %cmp296, label %if.then.297, label %if.else.298

if.then.297:                                      ; preds = %do.body.292
  br label %if.end.301

if.else.298:                                      ; preds = %do.body.292
  %163 = load %struct._object*, %struct._object** %_py_decref_tmp293, align 8
  %ob_type299 = getelementptr inbounds %struct._object, %struct._object* %163, i32 0, i32 1
  %164 = load %struct._typeobject*, %struct._typeobject** %ob_type299, align 8
  %tp_dealloc300 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %164, i32 0, i32 4
  %165 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc300, align 8
  %166 = load %struct._object*, %struct._object** %_py_decref_tmp293, align 8
  call void %165(%struct._object* %166)
  br label %if.end.301

if.end.301:                                       ; preds = %if.else.298, %if.then.297
  br label %do.end.302

do.end.302:                                       ; preds = %if.end.301
  %167 = load %struct._object*, %struct._object** %x, align 8
  %cmp303 = icmp eq %struct._object* %167, null
  br i1 %cmp303, label %if.then.307, label %lor.lhs.false.304

lor.lhs.false.304:                                ; preds = %do.end.302
  %168 = load %struct._object*, %struct._object** %d, align 8
  %169 = load %struct._object*, %struct._object** %x, align 8
  %call305 = call i32 @PyDict_SetItemString(%struct._object* %168, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), %struct._object* %169)
  %cmp306 = icmp slt i32 %call305, 0
  br i1 %cmp306, label %if.then.307, label %if.end.308

if.then.307:                                      ; preds = %lor.lhs.false.304, %do.end.302
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.308:                                       ; preds = %lor.lhs.false.304
  br label %do.body.309

do.body.309:                                      ; preds = %if.end.308
  %170 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %170, %struct._object** %_py_decref_tmp310, align 8
  %171 = load %struct._object*, %struct._object** %_py_decref_tmp310, align 8
  %ob_refcnt311 = getelementptr inbounds %struct._object, %struct._object* %171, i32 0, i32 0
  %172 = load i64, i64* %ob_refcnt311, align 8
  %dec312 = add i64 %172, -1
  store i64 %dec312, i64* %ob_refcnt311, align 8
  %cmp313 = icmp ne i64 %dec312, 0
  br i1 %cmp313, label %if.then.314, label %if.else.315

if.then.314:                                      ; preds = %do.body.309
  br label %if.end.318

if.else.315:                                      ; preds = %do.body.309
  %173 = load %struct._object*, %struct._object** %_py_decref_tmp310, align 8
  %ob_type316 = getelementptr inbounds %struct._object, %struct._object* %173, i32 0, i32 1
  %174 = load %struct._typeobject*, %struct._typeobject** %ob_type316, align 8
  %tp_dealloc317 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %174, i32 0, i32 4
  %175 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc317, align 8
  %176 = load %struct._object*, %struct._object** %_py_decref_tmp310, align 8
  call void %175(%struct._object* %176)
  br label %if.end.318

if.end.318:                                       ; preds = %if.else.315, %if.then.314
  br label %do.end.319

do.end.319:                                       ; preds = %if.end.318
  %177 = load %struct._object*, %struct._object** @PyDateTime_TimeZone_UTC, align 8
  %call320 = call %struct._object* @new_datetime_ex(i32 1970, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, %struct._object* %177, %struct._typeobject* @PyDateTime_DateTimeType)
  store %struct._object* %call320, %struct._object** @PyDateTime_Epoch, align 8
  %178 = load %struct._object*, %struct._object** @PyDateTime_Epoch, align 8
  %cmp321 = icmp eq %struct._object* %178, null
  br i1 %cmp321, label %if.then.322, label %if.end.323

if.then.322:                                      ; preds = %do.end.319
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.323:                                       ; preds = %do.end.319
  %179 = load %struct._object*, %struct._object** %m, align 8
  %call324 = call i32 @PyModule_AddIntConstant(%struct._object* %179, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i32 0, i32 0), i64 1)
  %180 = load %struct._object*, %struct._object** %m, align 8
  %call325 = call i32 @PyModule_AddIntConstant(%struct._object* %180, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i32 0, i32 0), i64 9999)
  %181 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateType, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %181, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateType, i32 0, i32 0, i32 0, i32 0), align 8
  %182 = load %struct._object*, %struct._object** %m, align 8
  %call326 = call i32 @PyModule_AddObject(%struct._object* %182, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateType, i32 0, i32 0, i32 0))
  %183 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateTimeType, i32 0, i32 0, i32 0, i32 0), align 8
  %inc327 = add i64 %183, 1
  store i64 %inc327, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateTimeType, i32 0, i32 0, i32 0, i32 0), align 8
  %184 = load %struct._object*, %struct._object** %m, align 8
  %call328 = call i32 @PyModule_AddObject(%struct._object* %184, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DateTimeType, i32 0, i32 0, i32 0))
  %185 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeType, i32 0, i32 0, i32 0, i32 0), align 8
  %inc329 = add i64 %185, 1
  store i64 %inc329, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeType, i32 0, i32 0, i32 0, i32 0), align 8
  %186 = load %struct._object*, %struct._object** %m, align 8
  %call330 = call i32 @PyModule_AddObject(%struct._object* %186, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeType, i32 0, i32 0, i32 0))
  %187 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DeltaType, i32 0, i32 0, i32 0, i32 0), align 8
  %inc331 = add i64 %187, 1
  store i64 %inc331, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DeltaType, i32 0, i32 0, i32 0, i32 0), align 8
  %188 = load %struct._object*, %struct._object** %m, align 8
  %call332 = call i32 @PyModule_AddObject(%struct._object* %188, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_DeltaType, i32 0, i32 0, i32 0))
  %189 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TZInfoType, i32 0, i32 0, i32 0, i32 0), align 8
  %inc333 = add i64 %189, 1
  store i64 %inc333, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TZInfoType, i32 0, i32 0, i32 0, i32 0), align 8
  %190 = load %struct._object*, %struct._object** %m, align 8
  %call334 = call i32 @PyModule_AddObject(%struct._object* %190, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TZInfoType, i32 0, i32 0, i32 0))
  %191 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeZoneType, i32 0, i32 0, i32 0, i32 0), align 8
  %inc335 = add i64 %191, 1
  store i64 %inc335, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeZoneType, i32 0, i32 0, i32 0, i32 0), align 8
  %192 = load %struct._object*, %struct._object** %m, align 8
  %call336 = call i32 @PyModule_AddObject(%struct._object* %192, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDateTime_TimeZoneType, i32 0, i32 0, i32 0))
  %call337 = call %struct._object* @PyCapsule_New(i8* bitcast (%struct.PyDateTime_CAPI* @CAPI to i8*), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i32 0, i32 0), void (%struct._object*)* null)
  store %struct._object* %call337, %struct._object** %x, align 8
  %193 = load %struct._object*, %struct._object** %x, align 8
  %cmp338 = icmp eq %struct._object* %193, null
  br i1 %cmp338, label %if.then.339, label %if.end.340

if.then.339:                                      ; preds = %if.end.323
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.340:                                       ; preds = %if.end.323
  %194 = load %struct._object*, %struct._object** %m, align 8
  %195 = load %struct._object*, %struct._object** %x, align 8
  %call341 = call i32 @PyModule_AddObject(%struct._object* %194, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i32 0, i32 0), %struct._object* %195)
  %call342 = call %struct._object* @PyLong_FromLong(i64 1)
  store %struct._object* %call342, %struct._object** @one, align 8
  %call343 = call %struct._object* @PyLong_FromLong(i64 1000)
  store %struct._object* %call343, %struct._object** @us_per_ms, align 8
  %call344 = call %struct._object* @PyLong_FromLong(i64 1000000)
  store %struct._object* %call344, %struct._object** @us_per_second, align 8
  %call345 = call %struct._object* @PyLong_FromLong(i64 60000000)
  store %struct._object* %call345, %struct._object** @us_per_minute, align 8
  %call346 = call %struct._object* @PyLong_FromLong(i64 86400)
  store %struct._object* %call346, %struct._object** @seconds_per_day, align 8
  %196 = load %struct._object*, %struct._object** @one, align 8
  %cmp347 = icmp eq %struct._object* %196, null
  br i1 %cmp347, label %if.then.356, label %lor.lhs.false.348

lor.lhs.false.348:                                ; preds = %if.end.340
  %197 = load %struct._object*, %struct._object** @us_per_ms, align 8
  %cmp349 = icmp eq %struct._object* %197, null
  br i1 %cmp349, label %if.then.356, label %lor.lhs.false.350

lor.lhs.false.350:                                ; preds = %lor.lhs.false.348
  %198 = load %struct._object*, %struct._object** @us_per_second, align 8
  %cmp351 = icmp eq %struct._object* %198, null
  br i1 %cmp351, label %if.then.356, label %lor.lhs.false.352

lor.lhs.false.352:                                ; preds = %lor.lhs.false.350
  %199 = load %struct._object*, %struct._object** @us_per_minute, align 8
  %cmp353 = icmp eq %struct._object* %199, null
  br i1 %cmp353, label %if.then.356, label %lor.lhs.false.354

lor.lhs.false.354:                                ; preds = %lor.lhs.false.352
  %200 = load %struct._object*, %struct._object** @seconds_per_day, align 8
  %cmp355 = icmp eq %struct._object* %200, null
  br i1 %cmp355, label %if.then.356, label %if.end.357

if.then.356:                                      ; preds = %lor.lhs.false.354, %lor.lhs.false.352, %lor.lhs.false.350, %lor.lhs.false.348, %if.end.340
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.357:                                       ; preds = %lor.lhs.false.354
  %call358 = call %struct._object* @PyLong_FromDouble(double 3.600000e+09)
  store %struct._object* %call358, %struct._object** @us_per_hour, align 8
  %call359 = call %struct._object* @PyLong_FromDouble(double 8.640000e+10)
  store %struct._object* %call359, %struct._object** @us_per_day, align 8
  %call360 = call %struct._object* @PyLong_FromDouble(double 6.048000e+11)
  store %struct._object* %call360, %struct._object** @us_per_week, align 8
  %201 = load %struct._object*, %struct._object** @us_per_hour, align 8
  %cmp361 = icmp eq %struct._object* %201, null
  br i1 %cmp361, label %if.then.366, label %lor.lhs.false.362

lor.lhs.false.362:                                ; preds = %if.end.357
  %202 = load %struct._object*, %struct._object** @us_per_day, align 8
  %cmp363 = icmp eq %struct._object* %202, null
  br i1 %cmp363, label %if.then.366, label %lor.lhs.false.364

lor.lhs.false.364:                                ; preds = %lor.lhs.false.362
  %203 = load %struct._object*, %struct._object** @us_per_week, align 8
  %cmp365 = icmp eq %struct._object* %203, null
  br i1 %cmp365, label %if.then.366, label %if.end.367

if.then.366:                                      ; preds = %lor.lhs.false.364, %lor.lhs.false.362, %if.end.357
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.367:                                       ; preds = %lor.lhs.false.364
  %204 = load %struct._object*, %struct._object** %m, align 8
  store %struct._object* %204, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.367, %if.then.366, %if.then.356, %if.then.339, %if.then.322, %if.then.307, %if.then.289, %if.then.274, %if.then.256, %if.then.252, %if.then.234, %if.then.219, %if.then.201, %if.then.183, %if.then.165, %if.then.147, %if.then.129, %if.then.111, %if.then.93, %if.then.75, %if.then.57, %if.then.39, %if.then.29, %if.then.23, %if.then.19, %if.then.15, %if.then.11, %if.then.7, %if.then.3, %if.then
  %205 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %205
}

declare %struct._object* @PyModule_Create2(%struct.PyModuleDef*, i32) #1

declare i32 @PyType_Ready(%struct._typeobject*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @new_delta_ex(i32 %days, i32 %seconds, i32 %microseconds, i32 %normalize, %struct._typeobject* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %days.addr = alloca i32, align 4
  %seconds.addr = alloca i32, align 4
  %microseconds.addr = alloca i32, align 4
  %normalize.addr = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %self = alloca %struct.PyDateTime_Delta*, align 8
  store i32 %days, i32* %days.addr, align 4
  store i32 %seconds, i32* %seconds.addr, align 4
  store i32 %microseconds, i32* %microseconds.addr, align 4
  store i32 %normalize, i32* %normalize.addr, align 4
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load i32, i32* %normalize.addr, align 4
  %tobool = icmp ne i32 %0, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @normalize_d_s_us(i32* %days.addr, i32* %seconds.addr, i32* %microseconds.addr)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load i32, i32* %days.addr, align 4
  %call = call i32 @check_delta_day_range(i32 %1)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 36
  %3 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call3 = call %struct._object* %3(%struct._typeobject* %4, i64 0)
  %5 = bitcast %struct._object* %call3 to %struct.PyDateTime_Delta*
  store %struct.PyDateTime_Delta* %5, %struct.PyDateTime_Delta** %self, align 8
  %6 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self, align 8
  %cmp4 = icmp ne %struct.PyDateTime_Delta* %6, null
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %if.end.2
  %7 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %7, i32 0, i32 1
  store i64 -1, i64* %hashcode, align 8
  %8 = load i32, i32* %days.addr, align 4
  %9 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self, align 8
  %days6 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %9, i32 0, i32 2
  store i32 %8, i32* %days6, align 4
  %10 = load i32, i32* %seconds.addr, align 4
  %11 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self, align 8
  %seconds7 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %11, i32 0, i32 3
  store i32 %10, i32* %seconds7, align 4
  %12 = load i32, i32* %microseconds.addr, align 4
  %13 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self, align 8
  %microseconds8 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %13, i32 0, i32 4
  store i32 %12, i32* %microseconds8, align 4
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.5, %if.end.2
  %14 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self, align 8
  %15 = bitcast %struct.PyDateTime_Delta* %14 to %struct._object*
  store %struct._object* %15, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.1
  %16 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %16
}

declare i32 @PyDict_SetItemString(%struct._object*, i8*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @new_date_ex(i32 %year, i32 %month, i32 %day, %struct._typeobject* %type) #0 {
entry:
  %year.addr = alloca i32, align 4
  %month.addr = alloca i32, align 4
  %day.addr = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %self = alloca %struct.PyDateTime_Date*, align 8
  store i32 %year, i32* %year.addr, align 4
  store i32 %month, i32* %month.addr, align 4
  store i32 %day, i32* %day.addr, align 4
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 36
  %1 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* %1(%struct._typeobject* %2, i64 0)
  %3 = bitcast %struct._object* %call to %struct.PyDateTime_Date*
  store %struct.PyDateTime_Date* %3, %struct.PyDateTime_Date** %self, align 8
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self, align 8
  %cmp = icmp ne %struct.PyDateTime_Date* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self, align 8
  %6 = load i32, i32* %year.addr, align 4
  %7 = load i32, i32* %month.addr, align 4
  %8 = load i32, i32* %day.addr, align 4
  call void @set_date_fields(%struct.PyDateTime_Date* %5, i32 %6, i32 %7, i32 %8)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %9 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self, align 8
  %10 = bitcast %struct.PyDateTime_Date* %9 to %struct._object*
  ret %struct._object* %10
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @new_time_ex(i32 %hour, i32 %minute, i32 %second, i32 %usecond, %struct._object* %tzinfo, %struct._typeobject* %type) #0 {
entry:
  %hour.addr = alloca i32, align 4
  %minute.addr = alloca i32, align 4
  %second.addr = alloca i32, align 4
  %usecond.addr = alloca i32, align 4
  %tzinfo.addr = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %self = alloca %struct.PyDateTime_Time*, align 8
  %aware = alloca i8, align 1
  store i32 %hour, i32* %hour.addr, align 4
  store i32 %minute, i32* %minute.addr, align 4
  store i32 %second, i32* %second.addr, align 4
  store i32 %usecond, i32* %usecond.addr, align 4
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %cmp = icmp ne %struct._object* %0, @_Py_NoneStruct
  %conv = zext i1 %cmp to i32
  %conv1 = trunc i32 %conv to i8
  store i8 %conv1, i8* %aware, align 1
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 36
  %2 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = load i8, i8* %aware, align 1
  %conv2 = sext i8 %4 to i64
  %call = call %struct._object* %2(%struct._typeobject* %3, i64 %conv2)
  %5 = bitcast %struct._object* %call to %struct.PyDateTime_Time*
  store %struct.PyDateTime_Time* %5, %struct.PyDateTime_Time** %self, align 8
  %6 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %cmp3 = icmp ne %struct.PyDateTime_Time* %6, null
  br i1 %cmp3, label %if.then, label %if.end.26

if.then:                                          ; preds = %entry
  %7 = load i8, i8* %aware, align 1
  %8 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %hastzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %8, i32 0, i32 2
  store i8 %7, i8* %hastzinfo, align 1
  %9 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %9, i32 0, i32 1
  store i64 -1, i64* %hashcode, align 8
  %10 = load i32, i32* %hour.addr, align 4
  %conv5 = trunc i32 %10 to i8
  %11 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %11, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 0
  store i8 %conv5, i8* %arrayidx, align 1
  %12 = load i32, i32* %minute.addr, align 4
  %conv6 = trunc i32 %12 to i8
  %13 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %13, i32 0, i32 3
  %arrayidx8 = getelementptr [6 x i8], [6 x i8]* %data7, i32 0, i64 1
  store i8 %conv6, i8* %arrayidx8, align 1
  %14 = load i32, i32* %second.addr, align 4
  %conv9 = trunc i32 %14 to i8
  %15 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %15, i32 0, i32 3
  %arrayidx11 = getelementptr [6 x i8], [6 x i8]* %data10, i32 0, i64 2
  store i8 %conv9, i8* %arrayidx11, align 1
  %16 = load i32, i32* %usecond.addr, align 4
  %and = and i32 %16, 16711680
  %shr = ashr i32 %and, 16
  %conv12 = trunc i32 %shr to i8
  %17 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %data13 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %17, i32 0, i32 3
  %arrayidx14 = getelementptr [6 x i8], [6 x i8]* %data13, i32 0, i64 3
  store i8 %conv12, i8* %arrayidx14, align 1
  %18 = load i32, i32* %usecond.addr, align 4
  %and15 = and i32 %18, 65280
  %shr16 = ashr i32 %and15, 8
  %conv17 = trunc i32 %shr16 to i8
  %19 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %data18 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %19, i32 0, i32 3
  %arrayidx19 = getelementptr [6 x i8], [6 x i8]* %data18, i32 0, i64 4
  store i8 %conv17, i8* %arrayidx19, align 1
  %20 = load i32, i32* %usecond.addr, align 4
  %and20 = and i32 %20, 255
  %conv21 = trunc i32 %and20 to i8
  %21 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %data22 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %21, i32 0, i32 3
  %arrayidx23 = getelementptr [6 x i8], [6 x i8]* %data22, i32 0, i64 5
  store i8 %conv21, i8* %arrayidx23, align 1
  %22 = load i8, i8* %aware, align 1
  %tobool = icmp ne i8 %22, 0
  br i1 %tobool, label %if.then.24, label %if.end

if.then.24:                                       ; preds = %if.then
  %23 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %24, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %25 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %26 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %tzinfo25 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %26, i32 0, i32 4
  store %struct._object* %25, %struct._object** %tzinfo25, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.24, %if.then
  br label %if.end.26

if.end.26:                                        ; preds = %if.end, %entry
  %27 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self, align 8
  %28 = bitcast %struct.PyDateTime_Time* %27 to %struct._object*
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @new_datetime_ex(i32 %year, i32 %month, i32 %day, i32 %hour, i32 %minute, i32 %second, i32 %usecond, %struct._object* %tzinfo, %struct._typeobject* %type) #0 {
entry:
  %year.addr = alloca i32, align 4
  %month.addr = alloca i32, align 4
  %day.addr = alloca i32, align 4
  %hour.addr = alloca i32, align 4
  %minute.addr = alloca i32, align 4
  %second.addr = alloca i32, align 4
  %usecond.addr = alloca i32, align 4
  %tzinfo.addr = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %self = alloca %struct.PyDateTime_DateTime*, align 8
  %aware = alloca i8, align 1
  store i32 %year, i32* %year.addr, align 4
  store i32 %month, i32* %month.addr, align 4
  store i32 %day, i32* %day.addr, align 4
  store i32 %hour, i32* %hour.addr, align 4
  store i32 %minute, i32* %minute.addr, align 4
  store i32 %second, i32* %second.addr, align 4
  store i32 %usecond, i32* %usecond.addr, align 4
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %cmp = icmp ne %struct._object* %0, @_Py_NoneStruct
  %conv = zext i1 %cmp to i32
  %conv1 = trunc i32 %conv to i8
  store i8 %conv1, i8* %aware, align 1
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 36
  %2 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = load i8, i8* %aware, align 1
  %conv2 = sext i8 %4 to i64
  %call = call %struct._object* %2(%struct._typeobject* %3, i64 %conv2)
  %5 = bitcast %struct._object* %call to %struct.PyDateTime_DateTime*
  store %struct.PyDateTime_DateTime* %5, %struct.PyDateTime_DateTime** %self, align 8
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %cmp3 = icmp ne %struct.PyDateTime_DateTime* %6, null
  br i1 %cmp3, label %if.then, label %if.end.26

if.then:                                          ; preds = %entry
  %7 = load i8, i8* %aware, align 1
  %8 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %hastzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %8, i32 0, i32 2
  store i8 %7, i8* %hastzinfo, align 1
  %9 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %10 = bitcast %struct.PyDateTime_DateTime* %9 to %struct.PyDateTime_Date*
  %11 = load i32, i32* %year.addr, align 4
  %12 = load i32, i32* %month.addr, align 4
  %13 = load i32, i32* %day.addr, align 4
  call void @set_date_fields(%struct.PyDateTime_Date* %10, i32 %11, i32 %12, i32 %13)
  %14 = load i32, i32* %hour.addr, align 4
  %conv5 = trunc i32 %14 to i8
  %15 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %15, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 4
  store i8 %conv5, i8* %arrayidx, align 1
  %16 = load i32, i32* %minute.addr, align 4
  %conv6 = trunc i32 %16 to i8
  %17 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %17, i32 0, i32 3
  %arrayidx8 = getelementptr [10 x i8], [10 x i8]* %data7, i32 0, i64 5
  store i8 %conv6, i8* %arrayidx8, align 1
  %18 = load i32, i32* %second.addr, align 4
  %conv9 = trunc i32 %18 to i8
  %19 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %19, i32 0, i32 3
  %arrayidx11 = getelementptr [10 x i8], [10 x i8]* %data10, i32 0, i64 6
  store i8 %conv9, i8* %arrayidx11, align 1
  %20 = load i32, i32* %usecond.addr, align 4
  %and = and i32 %20, 16711680
  %shr = ashr i32 %and, 16
  %conv12 = trunc i32 %shr to i8
  %21 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %data13 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %21, i32 0, i32 3
  %arrayidx14 = getelementptr [10 x i8], [10 x i8]* %data13, i32 0, i64 7
  store i8 %conv12, i8* %arrayidx14, align 1
  %22 = load i32, i32* %usecond.addr, align 4
  %and15 = and i32 %22, 65280
  %shr16 = ashr i32 %and15, 8
  %conv17 = trunc i32 %shr16 to i8
  %23 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %data18 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %23, i32 0, i32 3
  %arrayidx19 = getelementptr [10 x i8], [10 x i8]* %data18, i32 0, i64 8
  store i8 %conv17, i8* %arrayidx19, align 1
  %24 = load i32, i32* %usecond.addr, align 4
  %and20 = and i32 %24, 255
  %conv21 = trunc i32 %and20 to i8
  %25 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %data22 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %25, i32 0, i32 3
  %arrayidx23 = getelementptr [10 x i8], [10 x i8]* %data22, i32 0, i64 9
  store i8 %conv21, i8* %arrayidx23, align 1
  %26 = load i8, i8* %aware, align 1
  %tobool = icmp ne i8 %26, 0
  br i1 %tobool, label %if.then.24, label %if.end

if.then.24:                                       ; preds = %if.then
  %27 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %28, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %29 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %30 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %tzinfo25 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %30, i32 0, i32 4
  store %struct._object* %29, %struct._object** %tzinfo25, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.24, %if.then
  br label %if.end.26

if.end.26:                                        ; preds = %if.end, %entry
  %31 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self, align 8
  %32 = bitcast %struct.PyDateTime_DateTime* %31 to %struct._object*
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @create_timezone(%struct._object* %offset, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %offset.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %self = alloca %struct.PyDateTime_TimeZone*, align 8
  %type = alloca %struct._typeobject*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  store %struct._object* %offset, %struct._object** %offset.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._typeobject* @PyDateTime_TimeZoneType, %struct._typeobject** %type, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 36
  %1 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %call = call %struct._object* %1(%struct._typeobject* %2, i64 0)
  %3 = bitcast %struct._object* %call to %struct.PyDateTime_TimeZone*
  store %struct.PyDateTime_TimeZone* %3, %struct.PyDateTime_TimeZone** %self, align 8
  %4 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self, align 8
  %cmp = icmp eq %struct.PyDateTime_TimeZone* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %offset.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %7 = load %struct._object*, %struct._object** %offset.addr, align 8
  %8 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self, align 8
  %offset1 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %8, i32 0, i32 1
  store %struct._object* %7, %struct._object** %offset1, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %name.addr, align 8
  store %struct._object* %9, %struct._object** %_py_xincref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp2 = icmp ne %struct._object* %10, null
  br i1 %cmp2, label %if.then.3, label %if.end.6

if.then.3:                                        ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt4 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt4, align 8
  %inc5 = add i64 %12, 1
  store i64 %inc5, i64* %ob_refcnt4, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.3, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.6
  %13 = load %struct._object*, %struct._object** %name.addr, align 8
  %14 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self, align 8
  %name7 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %14, i32 0, i32 2
  store %struct._object* %13, %struct._object** %name7, align 8
  %15 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self, align 8
  %16 = bitcast %struct.PyDateTime_TimeZone* %15 to %struct._object*
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

declare i32 @PyModule_AddIntConstant(%struct._object*, i8*, i64) #1

declare i32 @PyModule_AddObject(%struct._object*, i8*, %struct._object*) #1

declare %struct._object* @PyCapsule_New(i8*, i8*, void (%struct._object*)*) #1

declare %struct._object* @PyLong_FromLong(i64) #1

declare %struct._object* @PyLong_FromDouble(double) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_repr(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Date* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %shl = shl i32 %conv, 8
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %or = or i32 %shl, %conv3
  %8 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %8, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %9 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %9 to i32
  %10 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %10, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %11 to i32
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* %3, i32 %or, i32 %conv6, i32 %conv9)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i64 @date_hash(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 1
  %1 = load i64, i64* %hashcode, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %data, i32 0, i32 0
  %call = call i64 @generic_hash(i8* %arraydecay, i32 4)
  %3 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %hashcode1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %3, i32 0, i32 1
  store i64 %call, i64* %hashcode1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %hashcode2 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 1
  %5 = load i64, i64* %hashcode2, align 8
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_str(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Date* %0 to %struct._object*
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %1, %struct._Py_Identifier* @PyId_isoformat, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0))
  ret %struct._object* %call
}

declare %struct._object* @PyObject_GenericGetAttr(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_richcompare(%struct._object* %self, %struct._object* %other, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %diff = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %5, i32 0, i32 3
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %data, i32 0, i32 0
  %6 = load %struct._object*, %struct._object** %other.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDateTime_Date*
  %data2 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %7, i32 0, i32 3
  %arraydecay3 = getelementptr inbounds [4 x i8], [4 x i8]* %data2, i32 0, i32 0
  %call4 = call i32 @memcmp(i8* %arraydecay, i8* %arraydecay3, i64 4) #6
  store i32 %call4, i32* %diff, align 4
  %8 = load i32, i32* %diff, align 4
  %9 = load i32, i32* %op.addr, align 4
  %call5 = call %struct._object* @diff_to_bool(i32 %8, i32 %9)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %self = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %year = alloca i32, align 4
  %month = alloca i32, align 4
  %day = alloca i32, align 4
  %me = alloca %struct.PyDateTime_Date*, align 8
  %pdata = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %self, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %cmp = icmp eq i64 %2, 1
  br i1 %cmp, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %state, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19
  %7 = load i64, i64* %tp_flags, align 8
  %and = and i64 %7, 134217728
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %land.lhs.true.2, label %if.end.14

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %8 = load %struct._object*, %struct._object** %state, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyVarObject*
  %ob_size3 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %9, i32 0, i32 1
  %10 = load i64, i64* %ob_size3, align 8
  %cmp4 = icmp eq i64 %10, 4
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.14

land.lhs.true.5:                                  ; preds = %land.lhs.true.2
  %11 = load %struct._object*, %struct._object** %state, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %12, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %arrayidx6 = getelementptr i8, i8* %arraydecay, i64 2
  %13 = load i8, i8* %arrayidx6, align 1
  %conv = sext i8 %13 to i32
  %sub = sub i32 %conv, 1
  %cmp7 = icmp ult i32 %sub, 12
  br i1 %cmp7, label %if.then, label %if.end.14

if.then:                                          ; preds = %land.lhs.true.5
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 36
  %15 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %16 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* %15(%struct._typeobject* %16, i64 0)
  %17 = bitcast %struct._object* %call to %struct.PyDateTime_Date*
  store %struct.PyDateTime_Date* %17, %struct.PyDateTime_Date** %me, align 8
  %18 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %me, align 8
  %cmp9 = icmp ne %struct.PyDateTime_Date* %18, null
  br i1 %cmp9, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then
  %19 = load %struct._object*, %struct._object** %state, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyBytesObject*
  %ob_sval12 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %20, i32 0, i32 2
  %arraydecay13 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval12, i32 0, i32 0
  store i8* %arraydecay13, i8** %pdata, align 8
  %21 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %me, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %21, i32 0, i32 3
  %22 = bitcast [4 x i8]* %data to i8*
  %23 = load i8*, i8** %pdata, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %22, i8* %23, i64 4, i32 1, i1 false)
  %24 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %me, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %24, i32 0, i32 1
  store i64 -1, i64* %hashcode, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.11, %if.then
  %25 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %me, align 8
  %26 = bitcast %struct.PyDateTime_Date* %25 to %struct._object*
  store %struct._object* %26, %struct._object** %retval
  br label %return

if.end.14:                                        ; preds = %land.lhs.true.5, %land.lhs.true.2, %land.lhs.true, %entry
  %27 = load %struct._object*, %struct._object** %args.addr, align 8
  %28 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call15 = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %27, %struct._object* %28, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @date_kws, i32 0, i32 0), i32* %year, i32* %month, i32* %day)
  %tobool = icmp ne i32 %call15, 0
  br i1 %tobool, label %if.then.16, label %if.end.23

if.then.16:                                       ; preds = %if.end.14
  %29 = load i32, i32* %year, align 4
  %30 = load i32, i32* %month, align 4
  %31 = load i32, i32* %day, align 4
  %call17 = call i32 @check_date_args(i32 %29, i32 %30, i32 %31)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.then.16
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.21:                                        ; preds = %if.then.16
  %32 = load i32, i32* %year, align 4
  %33 = load i32, i32* %month, align 4
  %34 = load i32, i32* %day, align 4
  %35 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call22 = call %struct._object* @new_date_ex(i32 %32, i32 %33, i32 %34, %struct._typeobject* %35)
  store %struct._object* %call22, %struct._object** %self, align 8
  br label %if.end.23

if.end.23:                                        ; preds = %if.end.21, %if.end.14
  %36 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %36, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.23, %if.then.20, %if.end
  %37 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %37
}

declare %struct._object* @PyUnicode_FromFormat(i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_add(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateTimeType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %cmp4 = icmp eq %struct._typeobject* %5, @PyDateTime_DateTimeType
  br i1 %cmp4, label %if.then, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.2
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %call7 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.5, %lor.lhs.false.2, %lor.lhs.false, %entry
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.5
  %9 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %cmp10 = icmp eq %struct._typeobject* %10, @PyDateTime_DateType
  br i1 %cmp10, label %if.then.15, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %call13 = call i32 @PyType_IsSubtype(%struct._typeobject* %12, %struct._typeobject* @PyDateTime_DateType)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %lor.lhs.false.11, %if.end
  %13 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %cmp17 = icmp eq %struct._typeobject* %14, @PyDateTime_DeltaType
  br i1 %cmp17, label %if.then.22, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %if.then.15
  %15 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %call20 = call i32 @PyType_IsSubtype(%struct._typeobject* %16, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.24

if.then.22:                                       ; preds = %lor.lhs.false.18, %if.then.15
  %17 = load %struct._object*, %struct._object** %left.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Date*
  %19 = load %struct._object*, %struct._object** %right.addr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyDateTime_Delta*
  %call23 = call %struct._object* @add_date_timedelta(%struct.PyDateTime_Date* %18, %struct.PyDateTime_Delta* %20, i32 0)
  store %struct._object* %call23, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %lor.lhs.false.18
  br label %if.end.34

if.else:                                          ; preds = %lor.lhs.false.11
  %21 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %cmp26 = icmp eq %struct._typeobject* %22, @PyDateTime_DeltaType
  br i1 %cmp26, label %if.then.31, label %lor.lhs.false.27

lor.lhs.false.27:                                 ; preds = %if.else
  %23 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %call29 = call i32 @PyType_IsSubtype(%struct._typeobject* %24, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.33

if.then.31:                                       ; preds = %lor.lhs.false.27, %if.else
  %25 = load %struct._object*, %struct._object** %right.addr, align 8
  %26 = bitcast %struct._object* %25 to %struct.PyDateTime_Date*
  %27 = load %struct._object*, %struct._object** %left.addr, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyDateTime_Delta*
  %call32 = call %struct._object* @add_date_timedelta(%struct.PyDateTime_Date* %26, %struct.PyDateTime_Delta* %28, i32 0)
  store %struct._object* %call32, %struct._object** %retval
  br label %return

if.end.33:                                        ; preds = %lor.lhs.false.27
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end.24
  %29 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc35 = add i64 %29, 1
  store i64 %inc35, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %if.then.31, %if.then.22, %if.then
  %30 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %30
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_subtract(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %left_ord = alloca i32, align 4
  %right_ord = alloca i32, align 4
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateTimeType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %cmp4 = icmp eq %struct._typeobject* %5, @PyDateTime_DateTimeType
  br i1 %cmp4, label %if.then, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.2
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %call7 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.5, %lor.lhs.false.2, %lor.lhs.false, %entry
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.5
  %9 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %cmp10 = icmp eq %struct._typeobject* %10, @PyDateTime_DateType
  br i1 %cmp10, label %if.then.15, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %call13 = call i32 @PyType_IsSubtype(%struct._typeobject* %12, %struct._typeobject* @PyDateTime_DateType)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.60

if.then.15:                                       ; preds = %lor.lhs.false.11, %if.end
  %13 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %cmp17 = icmp eq %struct._typeobject* %14, @PyDateTime_DateType
  br i1 %cmp17, label %if.then.22, label %lor.lhs.false.18

lor.lhs.false.18:                                 ; preds = %if.then.15
  %15 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %call20 = call i32 @PyType_IsSubtype(%struct._typeobject* %16, %struct._typeobject* @PyDateTime_DateType)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.49

if.then.22:                                       ; preds = %lor.lhs.false.18, %if.then.15
  %17 = load %struct._object*, %struct._object** %left.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %18, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %19 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %19 to i32
  %shl = shl i32 %conv, 8
  %20 = load %struct._object*, %struct._object** %left.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDateTime_Date*
  %data23 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %21, i32 0, i32 3
  %arrayidx24 = getelementptr [4 x i8], [4 x i8]* %data23, i32 0, i64 1
  %22 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %22 to i32
  %or = or i32 %shl, %conv25
  %23 = load %struct._object*, %struct._object** %left.addr, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyDateTime_Date*
  %data26 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %24, i32 0, i32 3
  %arrayidx27 = getelementptr [4 x i8], [4 x i8]* %data26, i32 0, i64 2
  %25 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %25 to i32
  %26 = load %struct._object*, %struct._object** %left.addr, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDateTime_Date*
  %data29 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %27, i32 0, i32 3
  %arrayidx30 = getelementptr [4 x i8], [4 x i8]* %data29, i32 0, i64 3
  %28 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %28 to i32
  %call32 = call i32 @ymd_to_ord(i32 %or, i32 %conv28, i32 %conv31)
  store i32 %call32, i32* %left_ord, align 4
  %29 = load %struct._object*, %struct._object** %right.addr, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyDateTime_Date*
  %data33 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %30, i32 0, i32 3
  %arrayidx34 = getelementptr [4 x i8], [4 x i8]* %data33, i32 0, i64 0
  %31 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %31 to i32
  %shl36 = shl i32 %conv35, 8
  %32 = load %struct._object*, %struct._object** %right.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDateTime_Date*
  %data37 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %33, i32 0, i32 3
  %arrayidx38 = getelementptr [4 x i8], [4 x i8]* %data37, i32 0, i64 1
  %34 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %34 to i32
  %or40 = or i32 %shl36, %conv39
  %35 = load %struct._object*, %struct._object** %right.addr, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyDateTime_Date*
  %data41 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %36, i32 0, i32 3
  %arrayidx42 = getelementptr [4 x i8], [4 x i8]* %data41, i32 0, i64 2
  %37 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %37 to i32
  %38 = load %struct._object*, %struct._object** %right.addr, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDateTime_Date*
  %data44 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %39, i32 0, i32 3
  %arrayidx45 = getelementptr [4 x i8], [4 x i8]* %data44, i32 0, i64 3
  %40 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %40 to i32
  %call47 = call i32 @ymd_to_ord(i32 %or40, i32 %conv43, i32 %conv46)
  store i32 %call47, i32* %right_ord, align 4
  %41 = load i32, i32* %left_ord, align 4
  %42 = load i32, i32* %right_ord, align 4
  %sub = sub i32 %41, %42
  %call48 = call %struct._object* @new_delta_ex(i32 %sub, i32 0, i32 0, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call48, %struct._object** %retval
  br label %return

if.end.49:                                        ; preds = %lor.lhs.false.18
  %43 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %cmp51 = icmp eq %struct._typeobject* %44, @PyDateTime_DeltaType
  br i1 %cmp51, label %if.then.57, label %lor.lhs.false.53

lor.lhs.false.53:                                 ; preds = %if.end.49
  %45 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type54 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type54, align 8
  %call55 = call i32 @PyType_IsSubtype(%struct._typeobject* %46, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.then.57, label %if.end.59

if.then.57:                                       ; preds = %lor.lhs.false.53, %if.end.49
  %47 = load %struct._object*, %struct._object** %left.addr, align 8
  %48 = bitcast %struct._object* %47 to %struct.PyDateTime_Date*
  %49 = load %struct._object*, %struct._object** %right.addr, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyDateTime_Delta*
  %call58 = call %struct._object* @add_date_timedelta(%struct.PyDateTime_Date* %48, %struct.PyDateTime_Delta* %50, i32 1)
  store %struct._object* %call58, %struct._object** %retval
  br label %return

if.end.59:                                        ; preds = %lor.lhs.false.53
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %lor.lhs.false.11
  %51 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc61 = add i64 %51, 1
  store i64 %inc61, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.60, %if.then.57, %if.then.22, %if.then
  %52 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %52
}

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @add_date_timedelta(%struct.PyDateTime_Date* %date, %struct.PyDateTime_Delta* %delta, i32 %negate) #0 {
entry:
  %date.addr = alloca %struct.PyDateTime_Date*, align 8
  %delta.addr = alloca %struct.PyDateTime_Delta*, align 8
  %negate.addr = alloca i32, align 4
  %result = alloca %struct._object*, align 8
  %year = alloca i32, align 4
  %month = alloca i32, align 4
  %deltadays = alloca i32, align 4
  %day = alloca i32, align 4
  store %struct.PyDateTime_Date* %date, %struct.PyDateTime_Date** %date.addr, align 8
  store %struct.PyDateTime_Delta* %delta, %struct.PyDateTime_Delta** %delta.addr, align 8
  store i32 %negate, i32* %negate.addr, align 4
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  store i32 %or, i32* %year, align 4
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  store i32 %conv6, i32* %month, align 4
  %6 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %6, i32 0, i32 2
  %7 = load i32, i32* %days, align 4
  store i32 %7, i32* %deltadays, align 4
  %8 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %8, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %9 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %9 to i32
  %10 = load i32, i32* %negate.addr, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %11 = load i32, i32* %deltadays, align 4
  %sub = sub i32 0, %11
  br label %cond.end

cond.false:                                       ; preds = %entry
  %12 = load i32, i32* %deltadays, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %12, %cond.false ]
  %add = add i32 %conv9, %cond
  store i32 %add, i32* %day, align 4
  %call = call i32 @normalize_date(i32* %year, i32* %month, i32* %day)
  %cmp = icmp sge i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %13 = load i32, i32* %year, align 4
  %14 = load i32, i32* %month, align 4
  %15 = load i32, i32* %day, align 4
  %call11 = call %struct._object* @new_date_ex(i32 %13, i32 %14, i32 %15, %struct._typeobject* @PyDateTime_DateType)
  store %struct._object* %call11, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  %16 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %16
}

; Function Attrs: nounwind uwtable
define internal i32 @normalize_date(i32* %year, i32* %month, i32* %day) #0 {
entry:
  %year.addr = alloca i32*, align 8
  %month.addr = alloca i32*, align 8
  %day.addr = alloca i32*, align 8
  store i32* %year, i32** %year.addr, align 8
  store i32* %month, i32** %month.addr, align 8
  store i32* %day, i32** %day.addr, align 8
  %0 = load i32*, i32** %year.addr, align 8
  %1 = load i32*, i32** %month.addr, align 8
  %2 = load i32*, i32** %day.addr, align 8
  %call = call i32 @normalize_y_m_d(i32* %0, i32* %1, i32* %2)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @normalize_y_m_d(i32* %y, i32* %m, i32* %d) #0 {
entry:
  %retval = alloca i32, align 4
  %y.addr = alloca i32*, align 8
  %m.addr = alloca i32*, align 8
  %d.addr = alloca i32*, align 8
  %dim = alloca i32, align 4
  %ordinal = alloca i32, align 4
  store i32* %y, i32** %y.addr, align 8
  store i32* %m, i32** %m.addr, align 8
  store i32* %d, i32** %d.addr, align 8
  %0 = load i32*, i32** %y.addr, align 8
  %1 = load i32, i32* %0, align 4
  %2 = load i32*, i32** %m.addr, align 8
  %3 = load i32, i32* %2, align 4
  %call = call i32 @days_in_month(i32 %1, i32 %3)
  store i32 %call, i32* %dim, align 4
  %4 = load i32*, i32** %d.addr, align 8
  %5 = load i32, i32* %4, align 4
  %cmp = icmp slt i32 %5, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load i32*, i32** %d.addr, align 8
  %7 = load i32, i32* %6, align 4
  %8 = load i32, i32* %dim, align 4
  %cmp1 = icmp sgt i32 %7, %8
  br i1 %cmp1, label %if.then, label %if.end.25

if.then:                                          ; preds = %lor.lhs.false, %entry
  %9 = load i32*, i32** %d.addr, align 8
  %10 = load i32, i32* %9, align 4
  %cmp2 = icmp eq i32 %10, 0
  br i1 %cmp2, label %if.then.3, label %if.else.8

if.then.3:                                        ; preds = %if.then
  %11 = load i32*, i32** %m.addr, align 8
  %12 = load i32, i32* %11, align 4
  %dec = add i32 %12, -1
  store i32 %dec, i32* %11, align 4
  %13 = load i32*, i32** %m.addr, align 8
  %14 = load i32, i32* %13, align 4
  %cmp4 = icmp sgt i32 %14, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then.3
  %15 = load i32*, i32** %y.addr, align 8
  %16 = load i32, i32* %15, align 4
  %17 = load i32*, i32** %m.addr, align 8
  %18 = load i32, i32* %17, align 4
  %call6 = call i32 @days_in_month(i32 %16, i32 %18)
  %19 = load i32*, i32** %d.addr, align 8
  store i32 %call6, i32* %19, align 4
  br label %if.end

if.else:                                          ; preds = %if.then.3
  %20 = load i32*, i32** %y.addr, align 8
  %21 = load i32, i32* %20, align 4
  %dec7 = add i32 %21, -1
  store i32 %dec7, i32* %20, align 4
  %22 = load i32*, i32** %m.addr, align 8
  store i32 12, i32* %22, align 4
  %23 = load i32*, i32** %d.addr, align 8
  store i32 31, i32* %23, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  br label %if.end.24

if.else.8:                                        ; preds = %if.then
  %24 = load i32*, i32** %d.addr, align 8
  %25 = load i32, i32* %24, align 4
  %26 = load i32, i32* %dim, align 4
  %add = add i32 %26, 1
  %cmp9 = icmp eq i32 %25, %add
  br i1 %cmp9, label %if.then.10, label %if.else.15

if.then.10:                                       ; preds = %if.else.8
  %27 = load i32*, i32** %m.addr, align 8
  %28 = load i32, i32* %27, align 4
  %inc = add i32 %28, 1
  store i32 %inc, i32* %27, align 4
  %29 = load i32*, i32** %d.addr, align 8
  store i32 1, i32* %29, align 4
  %30 = load i32*, i32** %m.addr, align 8
  %31 = load i32, i32* %30, align 4
  %cmp11 = icmp sgt i32 %31, 12
  br i1 %cmp11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.then.10
  %32 = load i32*, i32** %m.addr, align 8
  store i32 1, i32* %32, align 4
  %33 = load i32*, i32** %y.addr, align 8
  %34 = load i32, i32* %33, align 4
  %inc13 = add i32 %34, 1
  store i32 %inc13, i32* %33, align 4
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.12, %if.then.10
  br label %if.end.23

if.else.15:                                       ; preds = %if.else.8
  %35 = load i32*, i32** %y.addr, align 8
  %36 = load i32, i32* %35, align 4
  %37 = load i32*, i32** %m.addr, align 8
  %38 = load i32, i32* %37, align 4
  %call16 = call i32 @ymd_to_ord(i32 %36, i32 %38, i32 1)
  %39 = load i32*, i32** %d.addr, align 8
  %40 = load i32, i32* %39, align 4
  %add17 = add i32 %call16, %40
  %sub = sub i32 %add17, 1
  store i32 %sub, i32* %ordinal, align 4
  %41 = load i32, i32* %ordinal, align 4
  %cmp18 = icmp slt i32 %41, 1
  br i1 %cmp18, label %if.then.21, label %lor.lhs.false.19

lor.lhs.false.19:                                 ; preds = %if.else.15
  %42 = load i32, i32* %ordinal, align 4
  %cmp20 = icmp sgt i32 %42, 3652059
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %lor.lhs.false.19, %if.else.15
  br label %error

if.else.22:                                       ; preds = %lor.lhs.false.19
  %43 = load i32, i32* %ordinal, align 4
  %44 = load i32*, i32** %y.addr, align 8
  %45 = load i32*, i32** %m.addr, align 8
  %46 = load i32*, i32** %d.addr, align 8
  call void @ord_to_ymd(i32 %43, i32* %44, i32* %45, i32* %46)
  store i32 0, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.end.14
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %lor.lhs.false
  %47 = load i32*, i32** %y.addr, align 8
  %48 = load i32, i32* %47, align 4
  %cmp26 = icmp sle i32 1, %48
  br i1 %cmp26, label %land.lhs.true, label %if.end.29

land.lhs.true:                                    ; preds = %if.end.25
  %49 = load i32*, i32** %y.addr, align 8
  %50 = load i32, i32* %49, align 4
  %cmp27 = icmp sle i32 %50, 9999
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %land.lhs.true, %if.end.25
  br label %error

error:                                            ; preds = %if.end.29, %if.then.21
  %51 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %51, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %error, %if.then.28, %if.else.22
  %52 = load i32, i32* %retval
  ret i32 %52
}

; Function Attrs: nounwind uwtable
define internal i32 @days_in_month(i32 %year, i32 %month) #0 {
entry:
  %retval = alloca i32, align 4
  %year.addr = alloca i32, align 4
  %month.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  store i32 %month, i32* %month.addr, align 4
  %0 = load i32, i32* %month.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %year.addr, align 4
  %call = call i32 @is_leap(i32 %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  store i32 29, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %2 = load i32, i32* %month.addr, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr [13 x i32], [13 x i32]* @_days_in_month, i32 0, i64 %idxprom
  %3 = load i32, i32* %arrayidx, align 4
  store i32 %3, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal i32 @ymd_to_ord(i32 %year, i32 %month, i32 %day) #0 {
entry:
  %year.addr = alloca i32, align 4
  %month.addr = alloca i32, align 4
  %day.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  store i32 %month, i32* %month.addr, align 4
  store i32 %day, i32* %day.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %call = call i32 @days_before_year(i32 %0)
  %1 = load i32, i32* %year.addr, align 4
  %2 = load i32, i32* %month.addr, align 4
  %call1 = call i32 @days_before_month(i32 %1, i32 %2)
  %add = add i32 %call, %call1
  %3 = load i32, i32* %day.addr, align 4
  %add2 = add i32 %add, %3
  ret i32 %add2
}

; Function Attrs: nounwind uwtable
define internal void @ord_to_ymd(i32 %ordinal, i32* %year, i32* %month, i32* %day) #0 {
entry:
  %ordinal.addr = alloca i32, align 4
  %year.addr = alloca i32*, align 8
  %month.addr = alloca i32*, align 8
  %day.addr = alloca i32*, align 8
  %n = alloca i32, align 4
  %n1 = alloca i32, align 4
  %n4 = alloca i32, align 4
  %n100 = alloca i32, align 4
  %n400 = alloca i32, align 4
  %leapyear = alloca i32, align 4
  %preceding = alloca i32, align 4
  store i32 %ordinal, i32* %ordinal.addr, align 4
  store i32* %year, i32** %year.addr, align 8
  store i32* %month, i32** %month.addr, align 8
  store i32* %day, i32** %day.addr, align 8
  %0 = load i32, i32* %ordinal.addr, align 4
  %dec = add i32 %0, -1
  store i32 %dec, i32* %ordinal.addr, align 4
  %1 = load i32, i32* %ordinal.addr, align 4
  %div = sdiv i32 %1, 146097
  store i32 %div, i32* %n400, align 4
  %2 = load i32, i32* %ordinal.addr, align 4
  %rem = srem i32 %2, 146097
  store i32 %rem, i32* %n, align 4
  %3 = load i32, i32* %n400, align 4
  %mul = mul i32 %3, 400
  %add = add i32 %mul, 1
  %4 = load i32*, i32** %year.addr, align 8
  store i32 %add, i32* %4, align 4
  %5 = load i32, i32* %n, align 4
  %div1 = sdiv i32 %5, 36524
  store i32 %div1, i32* %n100, align 4
  %6 = load i32, i32* %n, align 4
  %rem2 = srem i32 %6, 36524
  store i32 %rem2, i32* %n, align 4
  %7 = load i32, i32* %n, align 4
  %div3 = sdiv i32 %7, 1461
  store i32 %div3, i32* %n4, align 4
  %8 = load i32, i32* %n, align 4
  %rem4 = srem i32 %8, 1461
  store i32 %rem4, i32* %n, align 4
  %9 = load i32, i32* %n, align 4
  %div5 = sdiv i32 %9, 365
  store i32 %div5, i32* %n1, align 4
  %10 = load i32, i32* %n, align 4
  %rem6 = srem i32 %10, 365
  store i32 %rem6, i32* %n, align 4
  %11 = load i32, i32* %n100, align 4
  %mul7 = mul i32 %11, 100
  %12 = load i32, i32* %n4, align 4
  %mul8 = mul i32 %12, 4
  %add9 = add i32 %mul7, %mul8
  %13 = load i32, i32* %n1, align 4
  %add10 = add i32 %add9, %13
  %14 = load i32*, i32** %year.addr, align 8
  %15 = load i32, i32* %14, align 4
  %add11 = add i32 %15, %add10
  store i32 %add11, i32* %14, align 4
  %16 = load i32, i32* %n1, align 4
  %cmp = icmp eq i32 %16, 4
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %17 = load i32, i32* %n100, align 4
  %cmp12 = icmp eq i32 %17, 4
  br i1 %cmp12, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %18 = load i32*, i32** %year.addr, align 8
  %19 = load i32, i32* %18, align 4
  %sub = sub i32 %19, 1
  store i32 %sub, i32* %18, align 4
  %20 = load i32*, i32** %month.addr, align 8
  store i32 12, i32* %20, align 4
  %21 = load i32*, i32** %day.addr, align 8
  store i32 31, i32* %21, align 4
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %22 = load i32, i32* %n1, align 4
  %cmp13 = icmp eq i32 %22, 3
  br i1 %cmp13, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end
  %23 = load i32, i32* %n4, align 4
  %cmp14 = icmp ne i32 %23, 24
  br i1 %cmp14, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %24 = load i32, i32* %n100, align 4
  %cmp15 = icmp eq i32 %24, 3
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %25 = phi i1 [ true, %land.rhs ], [ %cmp15, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end
  %26 = phi i1 [ false, %if.end ], [ %25, %lor.end ]
  %land.ext = zext i1 %26 to i32
  store i32 %land.ext, i32* %leapyear, align 4
  %27 = load i32, i32* %n, align 4
  %add16 = add i32 %27, 50
  %shr = ashr i32 %add16, 5
  %28 = load i32*, i32** %month.addr, align 8
  store i32 %shr, i32* %28, align 4
  %29 = load i32*, i32** %month.addr, align 8
  %30 = load i32, i32* %29, align 4
  %idxprom = sext i32 %30 to i64
  %arrayidx = getelementptr [13 x i32], [13 x i32]* @_days_before_month, i32 0, i64 %idxprom
  %31 = load i32, i32* %arrayidx, align 4
  %32 = load i32*, i32** %month.addr, align 8
  %33 = load i32, i32* %32, align 4
  %cmp17 = icmp sgt i32 %33, 2
  br i1 %cmp17, label %land.rhs.18, label %land.end.19

land.rhs.18:                                      ; preds = %land.end
  %34 = load i32, i32* %leapyear, align 4
  %tobool = icmp ne i32 %34, 0
  br label %land.end.19

land.end.19:                                      ; preds = %land.rhs.18, %land.end
  %35 = phi i1 [ false, %land.end ], [ %tobool, %land.rhs.18 ]
  %land.ext20 = zext i1 %35 to i32
  %add21 = add i32 %31, %land.ext20
  store i32 %add21, i32* %preceding, align 4
  %36 = load i32, i32* %preceding, align 4
  %37 = load i32, i32* %n, align 4
  %cmp22 = icmp sgt i32 %36, %37
  br i1 %cmp22, label %if.then.23, label %if.end.26

if.then.23:                                       ; preds = %land.end.19
  %38 = load i32*, i32** %month.addr, align 8
  %39 = load i32, i32* %38, align 4
  %sub24 = sub i32 %39, 1
  store i32 %sub24, i32* %38, align 4
  %40 = load i32*, i32** %year.addr, align 8
  %41 = load i32, i32* %40, align 4
  %42 = load i32*, i32** %month.addr, align 8
  %43 = load i32, i32* %42, align 4
  %call = call i32 @days_in_month(i32 %41, i32 %43)
  %44 = load i32, i32* %preceding, align 4
  %sub25 = sub i32 %44, %call
  store i32 %sub25, i32* %preceding, align 4
  br label %if.end.26

if.end.26:                                        ; preds = %if.then.23, %land.end.19
  %45 = load i32, i32* %preceding, align 4
  %46 = load i32, i32* %n, align 4
  %sub27 = sub i32 %46, %45
  store i32 %sub27, i32* %n, align 4
  %47 = load i32, i32* %n, align 4
  %add28 = add i32 %47, 1
  %48 = load i32*, i32** %day.addr, align 8
  store i32 %add28, i32* %48, align 4
  br label %return

return:                                           ; preds = %if.end.26, %if.then
  ret void
}

declare void @PyErr_SetString(%struct._object*, i8*) #1

; Function Attrs: nounwind uwtable
define internal i32 @is_leap(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %ayear = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  store i32 %0, i32* %ayear, align 4
  %1 = load i32, i32* %ayear, align 4
  %rem = urem i32 %1, 4
  %cmp = icmp eq i32 %rem, 0
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %ayear, align 4
  %rem1 = urem i32 %2, 100
  %cmp2 = icmp ne i32 %rem1, 0
  br i1 %cmp2, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %land.rhs
  %3 = load i32, i32* %ayear, align 4
  %rem3 = urem i32 %3, 400
  %cmp4 = icmp eq i32 %rem3, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %4 = phi i1 [ true, %land.rhs ], [ %cmp4, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %5 = phi i1 [ false, %entry ], [ %4, %lor.end ]
  %land.ext = zext i1 %5 to i32
  ret i32 %land.ext
}

; Function Attrs: nounwind uwtable
define internal i32 @days_before_year(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %y = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %sub = sub i32 %0, 1
  store i32 %sub, i32* %y, align 4
  %1 = load i32, i32* %y, align 4
  %mul = mul i32 %1, 365
  %2 = load i32, i32* %y, align 4
  %div = sdiv i32 %2, 4
  %add = add i32 %mul, %div
  %3 = load i32, i32* %y, align 4
  %div1 = sdiv i32 %3, 100
  %sub2 = sub i32 %add, %div1
  %4 = load i32, i32* %y, align 4
  %div3 = sdiv i32 %4, 400
  %add4 = add i32 %sub2, %div3
  ret i32 %add4
}

; Function Attrs: nounwind uwtable
define internal i32 @days_before_month(i32 %year, i32 %month) #0 {
entry:
  %year.addr = alloca i32, align 4
  %month.addr = alloca i32, align 4
  %days = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  store i32 %month, i32* %month.addr, align 4
  %0 = load i32, i32* %month.addr, align 4
  %idxprom = sext i32 %0 to i64
  %arrayidx = getelementptr [13 x i32], [13 x i32]* @_days_before_month, i32 0, i64 %idxprom
  %1 = load i32, i32* %arrayidx, align 4
  store i32 %1, i32* %days, align 4
  %2 = load i32, i32* %month.addr, align 4
  %cmp = icmp sgt i32 %2, 2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load i32, i32* %year.addr, align 4
  %call = call i32 @is_leap(i32 %3)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load i32, i32* %days, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %days, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %5 = load i32, i32* %days, align 4
  ret i32 %5
}

; Function Attrs: nounwind uwtable
define internal i64 @generic_hash(i8* %data, i32 %len) #0 {
entry:
  %data.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  store i32 %len, i32* %len.addr, align 4
  %0 = load i8*, i8** %data.addr, align 8
  %1 = load i32, i32* %len.addr, align 4
  %conv = sext i32 %1 to i64
  %call = call i64 @_Py_HashBytes(i8* %0, i64 %conv)
  ret i64 %call
}

declare i64 @_Py_HashBytes(i8*, i64) #1

declare %struct._object* @_PyObject_CallMethodId(%struct._object*, %struct._Py_Identifier*, i8*, ...) #1

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @diff_to_bool(i32 %diff, i32 %op) #0 {
entry:
  %diff.addr = alloca i32, align 4
  %op.addr = alloca i32, align 4
  %result = alloca %struct._object*, align 8
  %istrue = alloca i32, align 4
  store i32 %diff, i32* %diff.addr, align 4
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.1
    i32 1, label %sw.bb.4
    i32 5, label %sw.bb.7
    i32 0, label %sw.bb.10
    i32 4, label %sw.bb.13
  ]

sw.bb:                                            ; preds = %entry
  %1 = load i32, i32* %diff.addr, align 4
  %cmp = icmp eq i32 %1, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %istrue, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %2 = load i32, i32* %diff.addr, align 4
  %cmp2 = icmp ne i32 %2, 0
  %conv3 = zext i1 %cmp2 to i32
  store i32 %conv3, i32* %istrue, align 4
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry
  %3 = load i32, i32* %diff.addr, align 4
  %cmp5 = icmp sle i32 %3, 0
  %conv6 = zext i1 %cmp5 to i32
  store i32 %conv6, i32* %istrue, align 4
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  %4 = load i32, i32* %diff.addr, align 4
  %cmp8 = icmp sge i32 %4, 0
  %conv9 = zext i1 %cmp8 to i32
  store i32 %conv9, i32* %istrue, align 4
  br label %sw.epilog

sw.bb.10:                                         ; preds = %entry
  %5 = load i32, i32* %diff.addr, align 4
  %cmp11 = icmp slt i32 %5, 0
  %conv12 = zext i1 %cmp11 to i32
  store i32 %conv12, i32* %istrue, align 4
  br label %sw.epilog

sw.bb.13:                                         ; preds = %entry
  %6 = load i32, i32* %diff.addr, align 4
  %cmp14 = icmp sgt i32 %6, 0
  %conv15 = zext i1 %cmp14 to i32
  store i32 %conv15, i32* %istrue, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  store i32 0, i32* %istrue, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.13, %sw.bb.10, %sw.bb.7, %sw.bb.4, %sw.bb.1, %sw.bb
  %7 = load i32, i32* %istrue, align 4
  %tobool = icmp ne i32 %7, 0
  %cond = select i1 %tobool, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  store %struct._object* %cond, %struct._object** %result, align 8
  %8 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %10 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %10
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_fromtimestamp(%struct._object* %cls, %struct._object* %args) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %timestamp = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i32 0, i32 0), %struct._object** %timestamp)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8
  %2 = load %struct._object*, %struct._object** %timestamp, align 8
  %call1 = call %struct._object* @date_local_from_object(%struct._object* %1, %struct._object* %2)
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_fromordinal(%struct._object* %cls, %struct._object* %args) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %ordinal = alloca i32, align 4
  %year = alloca i32, align 4
  %month = alloca i32, align 4
  %day = alloca i32, align 4
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.50, i32 0, i32 0), i32* %ordinal)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %ordinal, align 4
  %cmp = icmp slt i32 %1, 1
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.then
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.51, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %if.then
  %3 = load i32, i32* %ordinal, align 4
  call void @ord_to_ymd(i32 %3, i32* %year, i32* %month, i32* %day)
  %4 = load %struct._object*, %struct._object** %cls.addr, align 8
  %5 = load i32, i32* %year, align 4
  %6 = load i32, i32* %month, align 4
  %7 = load i32, i32* %day, align 4
  %call2 = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i32 %5, i32 %6, i32 %7)
  store %struct._object* %call2, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.1
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %8 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %8
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_today(%struct._object* %cls, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %time = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %call = call %struct._object* @time_time()
  store %struct._object* %call, %struct._object** %time, align 8
  %0 = load %struct._object*, %struct._object** %time, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8
  %2 = load %struct._object*, %struct._object** %time, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %1, %struct._Py_Identifier* @date_today.PyId_fromtimestamp, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), %struct._object* %2)
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %time, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %10 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %10, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_ctime(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %call = call %struct._object* @format_ctime(%struct.PyDateTime_Date* %0, i32 0, i32 0, i32 0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_strftime(%struct.PyDateTime_Date* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %tuple = alloca %struct._object*, align 8
  %format = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.74, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @date_strftime.keywords, i32 0, i32 0), %struct._object** %format)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %3 = bitcast %struct.PyDateTime_Date* %2 to %struct._object*
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %3, %struct._Py_Identifier* @date_strftime.PyId_timetuple, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0))
  store %struct._object* %call1, %struct._object** %tuple, align 8
  %4 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %5 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %6 = bitcast %struct.PyDateTime_Date* %5 to %struct._object*
  %7 = load %struct._object*, %struct._object** %format, align 8
  %8 = load %struct._object*, %struct._object** %tuple, align 8
  %9 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %10 = bitcast %struct.PyDateTime_Date* %9 to %struct._object*
  %call4 = call %struct._object* @wrap_strftime(%struct._object* %6, %struct._object* %7, %struct._object* %8, %struct._object* %10)
  store %struct._object* %call4, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.3
  %11 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %18 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %18, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.2, %if.then
  %19 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %19
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_format(%struct.PyDateTime_Date* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %args.addr = alloca %struct._object*, align 8
  %format = alloca %struct._object*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.90, i32 0, i32 0), %struct._object** %format)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %format, align 8
  %call1 = call i64 @PyUnicode_GetLength(%struct._object* %1)
  %cmp = icmp eq i64 %call1, 0
  br i1 %cmp, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %3 = bitcast %struct.PyDateTime_Date* %2 to %struct._object*
  %call3 = call %struct._object* @PyObject_Str(%struct._object* %3)
  store %struct._object* %call3, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %5 = bitcast %struct.PyDateTime_Date* %4 to %struct._object*
  %6 = load %struct._object*, %struct._object** %format, align 8
  %call5 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %5, %struct._Py_Identifier* @PyId_strftime, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), %struct._object* %6)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.2, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_timetuple(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %call = call %struct._object* @build_struct_time(i32 %or, i32 %conv6, i32 %conv9, i32 0, i32 0, i32 0, i32 -1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_isocalendar(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %year = alloca i32, align 4
  %week1_monday = alloca i32, align 4
  %today = alloca i32, align 4
  %week = alloca i32, align 4
  %day = alloca i32, align 4
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  store i32 %or, i32* %year, align 4
  %4 = load i32, i32* %year, align 4
  %call = call i32 @iso_week1_monday(i32 %4)
  store i32 %call, i32* %week1_monday, align 4
  %5 = load i32, i32* %year, align 4
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %7 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %7 to i32
  %8 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %8, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %9 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %9 to i32
  %call10 = call i32 @ymd_to_ord(i32 %5, i32 %conv6, i32 %conv9)
  store i32 %call10, i32* %today, align 4
  %10 = load i32, i32* %today, align 4
  %11 = load i32, i32* %week1_monday, align 4
  %sub = sub i32 %10, %11
  %call11 = call i32 @divmod(i32 %sub, i32 7, i32* %day)
  store i32 %call11, i32* %week, align 4
  %12 = load i32, i32* %week, align 4
  %cmp = icmp slt i32 %12, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %13 = load i32, i32* %year, align 4
  %dec = add i32 %13, -1
  store i32 %dec, i32* %year, align 4
  %14 = load i32, i32* %year, align 4
  %call13 = call i32 @iso_week1_monday(i32 %14)
  store i32 %call13, i32* %week1_monday, align 4
  %15 = load i32, i32* %today, align 4
  %16 = load i32, i32* %week1_monday, align 4
  %sub14 = sub i32 %15, %16
  %call15 = call i32 @divmod(i32 %sub14, i32 7, i32* %day)
  store i32 %call15, i32* %week, align 4
  br label %if.end.22

if.else:                                          ; preds = %entry
  %17 = load i32, i32* %week, align 4
  %cmp16 = icmp sge i32 %17, 52
  br i1 %cmp16, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.else
  %18 = load i32, i32* %today, align 4
  %19 = load i32, i32* %year, align 4
  %add = add i32 %19, 1
  %call18 = call i32 @iso_week1_monday(i32 %add)
  %cmp19 = icmp sge i32 %18, %call18
  br i1 %cmp19, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %land.lhs.true
  %20 = load i32, i32* %year, align 4
  %inc = add i32 %20, 1
  store i32 %inc, i32* %year, align 4
  store i32 0, i32* %week, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.21, %land.lhs.true, %if.else
  br label %if.end.22

if.end.22:                                        ; preds = %if.end, %if.then
  %21 = load i32, i32* %year, align 4
  %22 = load i32, i32* %week, align 4
  %add23 = add i32 %22, 1
  %23 = load i32, i32* %day, align 4
  %add24 = add i32 %23, 1
  %call25 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i32 %21, i32 %add23, i32 %add24)
  ret %struct._object* %call25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_isoformat(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.93, i32 0, i32 0), i32 %or, i32 %conv6, i32 %conv9)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_isoweekday(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %dow = alloca i32, align 4
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %call = call i32 @weekday(i32 %or, i32 %conv6, i32 %conv9)
  store i32 %call, i32* %dow, align 4
  %8 = load i32, i32* %dow, align 4
  %add = add i32 %8, 1
  %conv10 = sext i32 %add to i64
  %call11 = call %struct._object* @PyLong_FromLong(i64 %conv10)
  ret %struct._object* %call11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_toordinal(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %call = call i32 @ymd_to_ord(i32 %or, i32 %conv6, i32 %conv9)
  %conv10 = sext i32 %call to i64
  %call11 = call %struct._object* @PyLong_FromLong(i64 %conv10)
  ret %struct._object* %call11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_weekday(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %dow = alloca i32, align 4
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %call = call i32 @weekday(i32 %or, i32 %conv6, i32 %conv9)
  store i32 %call, i32* %dow, align 4
  %8 = load i32, i32* %dow, align 4
  %conv10 = sext i32 %8 to i64
  %call11 = call %struct._object* @PyLong_FromLong(i64 %conv10)
  ret %struct._object* %call11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_replace(%struct.PyDateTime_Date* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %clone = alloca %struct._object*, align 8
  %tuple = alloca %struct._object*, align 8
  %year = alloca i32, align 4
  %month = alloca i32, align 4
  %day = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  store i32 %or, i32* %year, align 4
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  store i32 %conv6, i32* %month, align 4
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  store i32 %conv9, i32* %day, align 4
  %8 = load %struct._object*, %struct._object** %args.addr, align 8
  %9 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %8, %struct._object* %9, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.94, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @date_kws, i32 0, i32 0), i32* %year, i32* %month, i32* %day)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %10 = load i32, i32* %year, align 4
  %11 = load i32, i32* %month, align 4
  %12 = load i32, i32* %day, align 4
  %call10 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i32 %10, i32 %11, i32 %12)
  store %struct._object* %call10, %struct._object** %tuple, align 8
  %13 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %13, null
  br i1 %cmp, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %14 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %15 = bitcast %struct.PyDateTime_Date* %14 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %17 = load %struct._object*, %struct._object** %tuple, align 8
  %call14 = call %struct._object* @date_new(%struct._typeobject* %16, %struct._object* %17, %struct._object* null)
  store %struct._object* %call14, %struct._object** %clone, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.13
  %18 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp15 = icmp ne i64 %dec, 0
  br i1 %cmp15, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body
  br label %if.end.19

if.else:                                          ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %25 = load %struct._object*, %struct._object** %clone, align 8
  store %struct._object* %25, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.12, %if.then
  %26 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %26
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_reduce(%struct.PyDateTime_Date* %self, %struct._object* %arg) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %arg.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Date* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %3 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %call = call %struct._object* @date_getstate(%struct.PyDateTime_Date* %3)
  %call1 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.98, i32 0, i32 0), %struct._typeobject* %2, %struct._object* %call)
  ret %struct._object* %call1
}

declare i32 @PyArg_ParseTuple(%struct._object*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_local_from_object(%struct._object* %cls, %struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %tm = alloca %struct.tm*, align 8
  %t = alloca i64, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i32 @_PyTime_ObjectToTime_t(%struct._object* %0, i64* %t, i32 0)
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct.tm* @localtime(i64* %t) #5
  store %struct.tm* %call1, %struct.tm** %tm, align 8
  %1 = load %struct.tm*, %struct.tm** %tm, align 8
  %cmp2 = icmp eq %struct.tm* %1, null
  br i1 %cmp2, label %if.then.3, label %if.end.10

if.then.3:                                        ; preds = %if.end
  %call4 = call i32* @__errno_location() #7
  %2 = load i32, i32* %call4, align 4
  %cmp5 = icmp eq i32 %2, 0
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %if.then.3
  %call7 = call i32* @__errno_location() #7
  store i32 22, i32* %call7, align 4
  br label %if.end.8

if.end.8:                                         ; preds = %if.then.6, %if.then.3
  %3 = load %struct._object*, %struct._object** @PyExc_OSError, align 8
  %call9 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %3)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %cls.addr, align 8
  %5 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %5, i32 0, i32 5
  %6 = load i32, i32* %tm_year, align 4
  %add = add i32 %6, 1900
  %7 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %7, i32 0, i32 4
  %8 = load i32, i32* %tm_mon, align 4
  %add11 = add i32 %8, 1
  %9 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %9, i32 0, i32 3
  %10 = load i32, i32* %tm_mday, align 4
  %call12 = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i32 %add, i32 %add11, i32 %10)
  store %struct._object* %call12, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.end.8, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

declare i32 @_PyTime_ObjectToTime_t(%struct._object*, i64*, i32) #1

; Function Attrs: nounwind
declare %struct.tm* @localtime(i64*) #3

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #4

declare %struct._object* @PyErr_SetFromErrno(%struct._object*) #1

declare %struct._object* @PyObject_CallFunction(%struct._object*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_time() #0 {
entry:
  %result = alloca %struct._object*, align 8
  %time = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %call = call %struct._object* @PyImport_ImportModuleNoBlock(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %time, align 8
  %0 = load %struct._object*, %struct._object** %time, align 8
  %cmp = icmp ne %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %time, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %1, %struct._Py_Identifier* @time_time.PyId_time, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0))
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct._object*, %struct._object** %time, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %entry
  %9 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %9
}

declare %struct._object* @PyImport_ImportModuleNoBlock(i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @format_ctime(%struct.PyDateTime_Date* %date, i32 %hours, i32 %minutes, i32 %seconds) #0 {
entry:
  %date.addr = alloca %struct.PyDateTime_Date*, align 8
  %hours.addr = alloca i32, align 4
  %minutes.addr = alloca i32, align 4
  %seconds.addr = alloca i32, align 4
  %wday = alloca i32, align 4
  store %struct.PyDateTime_Date* %date, %struct.PyDateTime_Date** %date.addr, align 8
  store i32 %hours, i32* %hours.addr, align 4
  store i32 %minutes, i32* %minutes.addr, align 4
  store i32 %seconds, i32* %seconds.addr, align 4
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %call = call i32 @weekday(i32 %or, i32 %conv6, i32 %conv9)
  store i32 %call, i32* %wday, align 4
  %8 = load i32, i32* %wday, align 4
  %idxprom = sext i32 %8 to i64
  %arrayidx10 = getelementptr [7 x i8*], [7 x i8*]* @format_ctime.DayNames, i32 0, i64 %idxprom
  %9 = load i8*, i8** %arrayidx10, align 8
  %10 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data11 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %10, i32 0, i32 3
  %arrayidx12 = getelementptr [4 x i8], [4 x i8]* %data11, i32 0, i64 2
  %11 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %11 to i32
  %sub = sub i32 %conv13, 1
  %idxprom14 = sext i32 %sub to i64
  %arrayidx15 = getelementptr [12 x i8*], [12 x i8*]* @format_ctime.MonthNames, i32 0, i64 %idxprom14
  %12 = load i8*, i8** %arrayidx15, align 8
  %13 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data16 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %13, i32 0, i32 3
  %arrayidx17 = getelementptr [4 x i8], [4 x i8]* %data16, i32 0, i64 3
  %14 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %14 to i32
  %15 = load i32, i32* %hours.addr, align 4
  %16 = load i32, i32* %minutes.addr, align 4
  %17 = load i32, i32* %seconds.addr, align 4
  %18 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data19 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %18, i32 0, i32 3
  %arrayidx20 = getelementptr [4 x i8], [4 x i8]* %data19, i32 0, i64 0
  %19 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %19 to i32
  %shl22 = shl i32 %conv21, 8
  %20 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %date.addr, align 8
  %data23 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %20, i32 0, i32 3
  %arrayidx24 = getelementptr [4 x i8], [4 x i8]* %data23, i32 0, i64 1
  %21 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %21 to i32
  %or26 = or i32 %shl22, %conv25
  %call27 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.72, i32 0, i32 0), i8* %9, i8* %12, i32 %conv18, i32 %15, i32 %16, i32 %17, i32 %or26)
  ret %struct._object* %call27
}

; Function Attrs: nounwind uwtable
define internal i32 @weekday(i32 %year, i32 %month, i32 %day) #0 {
entry:
  %year.addr = alloca i32, align 4
  %month.addr = alloca i32, align 4
  %day.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  store i32 %month, i32* %month.addr, align 4
  store i32 %day, i32* %day.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %1 = load i32, i32* %month.addr, align 4
  %2 = load i32, i32* %day.addr, align 4
  %call = call i32 @ymd_to_ord(i32 %0, i32 %1, i32 %2)
  %add = add i32 %call, 6
  %rem = srem i32 %add, 7
  ret i32 %rem
}

declare i32 @PyArg_ParseTupleAndKeywords(%struct._object*, %struct._object*, i8*, i8**, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @wrap_strftime(%struct._object* %object, %struct._object* %format, %struct._object* %timetuple, %struct._object* %tzinfoarg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %object.addr = alloca %struct._object*, align 8
  %format.addr = alloca %struct._object*, align 8
  %timetuple.addr = alloca %struct._object*, align 8
  %tzinfoarg.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %zreplacement = alloca %struct._object*, align 8
  %Zreplacement = alloca %struct._object*, align 8
  %freplacement = alloca %struct._object*, align 8
  %pin = alloca i8*, align 8
  %flen = alloca i64, align 8
  %ch = alloca i8, align 1
  %newfmt = alloca %struct._object*, align 8
  %pnew = alloca i8*, align 8
  %totalnew = alloca i64, align 8
  %usednew = alloca i64, align 8
  %ptoappend = alloca i8*, align 8
  %ntoappend = alloca i64, align 8
  %buf = alloca [100 x i8], align 16
  %tzinfo = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %format132 = alloca %struct._object*, align 8
  %time = alloca %struct._object*, align 8
  %_py_decref_tmp146 = alloca %struct._object*, align 8
  %_py_decref_tmp159 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp175 = alloca %struct._object*, align 8
  %_py_xdecref_tmp189 = alloca %struct._object*, align 8
  %_py_decref_tmp194 = alloca %struct._object*, align 8
  %_py_xdecref_tmp208 = alloca %struct._object*, align 8
  %_py_decref_tmp213 = alloca %struct._object*, align 8
  %_py_xdecref_tmp227 = alloca %struct._object*, align 8
  %_py_decref_tmp232 = alloca %struct._object*, align 8
  store %struct._object* %object, %struct._object** %object.addr, align 8
  store %struct._object* %format, %struct._object** %format.addr, align 8
  store %struct._object* %timetuple, %struct._object** %timetuple.addr, align 8
  store %struct._object* %tzinfoarg, %struct._object** %tzinfoarg.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %zreplacement, align 8
  store %struct._object* null, %struct._object** %Zreplacement, align 8
  store %struct._object* null, %struct._object** %freplacement, align 8
  store %struct._object* null, %struct._object** %newfmt, align 8
  %0 = load %struct._object*, %struct._object** %format.addr, align 8
  %call = call i8* @PyUnicode_AsUTF8AndSize(%struct._object* %0, i64* %flen)
  store i8* %call, i8** %pin, align 8
  %1 = load i8*, i8** %pin, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i64, i64* %flen, align 8
  %cmp = icmp sgt i64 %2, 2147483646
  br i1 %cmp, label %if.then.1, label %if.end.3

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @PyErr_NoMemory()
  br label %Done

if.end.3:                                         ; preds = %if.end
  %3 = load i64, i64* %flen, align 8
  %add = add i64 %3, 1
  store i64 %add, i64* %totalnew, align 8
  %4 = load i64, i64* %totalnew, align 8
  %call4 = call %struct._object* @PyBytes_FromStringAndSize(i8* null, i64 %4)
  store %struct._object* %call4, %struct._object** %newfmt, align 8
  %5 = load %struct._object*, %struct._object** %newfmt, align 8
  %cmp5 = icmp eq %struct._object* %5, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  br label %Done

if.end.7:                                         ; preds = %if.end.3
  %6 = load %struct._object*, %struct._object** %newfmt, align 8
  %call8 = call i8* @PyBytes_AsString(%struct._object* %6)
  store i8* %call8, i8** %pnew, align 8
  store i64 0, i64* %usednew, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.end, %if.then.105, %if.end.7
  %7 = load i8*, i8** %pin, align 8
  %incdec.ptr = getelementptr i8, i8* %7, i32 1
  store i8* %incdec.ptr, i8** %pin, align 8
  %8 = load i8, i8* %7, align 1
  store i8 %8, i8* %ch, align 1
  %conv = sext i8 %8 to i32
  %cmp9 = icmp ne i32 %conv, 0
  br i1 %cmp9, label %while.body, label %while.end.126

while.body:                                       ; preds = %while.cond
  %9 = load i8, i8* %ch, align 1
  %conv11 = sext i8 %9 to i32
  %cmp12 = icmp ne i32 %conv11, 37
  br i1 %cmp12, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %while.body
  %10 = load i8*, i8** %pin, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 -1
  store i8* %add.ptr, i8** %ptoappend, align 8
  store i64 1, i64* %ntoappend, align 8
  br label %if.end.102

if.else:                                          ; preds = %while.body
  %11 = load i8*, i8** %pin, align 8
  %incdec.ptr15 = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr15, i8** %pin, align 8
  %12 = load i8, i8* %11, align 1
  store i8 %12, i8* %ch, align 1
  %conv16 = sext i8 %12 to i32
  %cmp17 = icmp eq i32 %conv16, 0
  br i1 %cmp17, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %if.else
  %13 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.75, i32 0, i32 0))
  br label %Done

if.else.20:                                       ; preds = %if.else
  %14 = load i8, i8* %ch, align 1
  %conv21 = sext i8 %14 to i32
  %cmp22 = icmp eq i32 %conv21, 122
  br i1 %cmp22, label %if.then.24, label %if.else.60

if.then.24:                                       ; preds = %if.else.20
  %15 = load %struct._object*, %struct._object** %zreplacement, align 8
  %cmp25 = icmp eq %struct._object* %15, null
  br i1 %cmp25, label %if.then.27, label %if.end.58

if.then.27:                                       ; preds = %if.then.24
  %16 = load %struct._object*, %struct._object** %object.addr, align 8
  %call28 = call %struct._object* @get_tzinfo_member(%struct._object* %16)
  store %struct._object* %call28, %struct._object** %tzinfo, align 8
  %call29 = call %struct._object* @PyBytes_FromStringAndSize(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.76, i32 0, i32 0), i64 0)
  store %struct._object* %call29, %struct._object** %zreplacement, align 8
  %17 = load %struct._object*, %struct._object** %zreplacement, align 8
  %cmp30 = icmp eq %struct._object* %17, null
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.27
  br label %Done

if.end.33:                                        ; preds = %if.then.27
  %18 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp34 = icmp ne %struct._object* %18, @_Py_NoneStruct
  br i1 %cmp34, label %land.lhs.true, label %if.end.57

land.lhs.true:                                    ; preds = %if.end.33
  %19 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp36 = icmp ne %struct._object* %19, null
  br i1 %cmp36, label %if.then.38, label %if.end.57

if.then.38:                                       ; preds = %land.lhs.true
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %20 = load %struct._object*, %struct._object** %tzinfo, align 8
  %21 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call39 = call i32 @format_utcoffset(i8* %arraydecay, i64 100, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.76, i32 0, i32 0), %struct._object* %20, %struct._object* %21)
  %cmp40 = icmp slt i32 %call39, 0
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.then.38
  br label %Done

if.end.43:                                        ; preds = %if.then.38
  br label %do.body

do.body:                                          ; preds = %if.end.43
  %22 = load %struct._object*, %struct._object** %zreplacement, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %24, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp44 = icmp ne i64 %dec, 0
  br i1 %cmp44, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body
  br label %if.end.48

if.else.47:                                       ; preds = %do.body
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %27(%struct._object* %28)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end

do.end:                                           ; preds = %if.end.48
  %arraydecay49 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %arraydecay50 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call51 = call i64 @strlen(i8* %arraydecay50) #6
  %call52 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay49, i64 %call51)
  store %struct._object* %call52, %struct._object** %zreplacement, align 8
  %29 = load %struct._object*, %struct._object** %zreplacement, align 8
  %cmp53 = icmp eq %struct._object* %29, null
  br i1 %cmp53, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %do.end
  br label %Done

if.end.56:                                        ; preds = %do.end
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %land.lhs.true, %if.end.33
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %if.then.24
  %30 = load %struct._object*, %struct._object** %zreplacement, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %31, i32 0, i32 2
  %arraydecay59 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  store i8* %arraydecay59, i8** %ptoappend, align 8
  %32 = load %struct._object*, %struct._object** %zreplacement, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %33, i32 0, i32 1
  %34 = load i64, i64* %ob_size, align 8
  store i64 %34, i64* %ntoappend, align 8
  br label %if.end.100

if.else.60:                                       ; preds = %if.else.20
  %35 = load i8, i8* %ch, align 1
  %conv61 = sext i8 %35 to i32
  %cmp62 = icmp eq i32 %conv61, 90
  br i1 %cmp62, label %if.then.64, label %if.else.79

if.then.64:                                       ; preds = %if.else.60
  %36 = load %struct._object*, %struct._object** %Zreplacement, align 8
  %cmp65 = icmp eq %struct._object* %36, null
  br i1 %cmp65, label %if.then.67, label %if.end.73

if.then.67:                                       ; preds = %if.then.64
  %37 = load %struct._object*, %struct._object** %object.addr, align 8
  %38 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call68 = call %struct._object* @make_Zreplacement(%struct._object* %37, %struct._object* %38)
  store %struct._object* %call68, %struct._object** %Zreplacement, align 8
  %39 = load %struct._object*, %struct._object** %Zreplacement, align 8
  %cmp69 = icmp eq %struct._object* %39, null
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %if.then.67
  br label %Done

if.end.72:                                        ; preds = %if.then.67
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.then.64
  %40 = load %struct._object*, %struct._object** %Zreplacement, align 8
  %call74 = call i8* @PyUnicode_AsUTF8AndSize(%struct._object* %40, i64* %ntoappend)
  store i8* %call74, i8** %ptoappend, align 8
  %41 = load i8*, i8** %ptoappend, align 8
  %cmp75 = icmp eq i8* %41, null
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.end.73
  br label %Done

if.end.78:                                        ; preds = %if.end.73
  br label %if.end.99

if.else.79:                                       ; preds = %if.else.60
  %42 = load i8, i8* %ch, align 1
  %conv80 = sext i8 %42 to i32
  %cmp81 = icmp eq i32 %conv80, 102
  br i1 %cmp81, label %if.then.83, label %if.else.96

if.then.83:                                       ; preds = %if.else.79
  %43 = load %struct._object*, %struct._object** %freplacement, align 8
  %cmp84 = icmp eq %struct._object* %43, null
  br i1 %cmp84, label %if.then.86, label %if.end.92

if.then.86:                                       ; preds = %if.then.83
  %44 = load %struct._object*, %struct._object** %object.addr, align 8
  %call87 = call %struct._object* @make_freplacement(%struct._object* %44)
  store %struct._object* %call87, %struct._object** %freplacement, align 8
  %45 = load %struct._object*, %struct._object** %freplacement, align 8
  %cmp88 = icmp eq %struct._object* %45, null
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %if.then.86
  br label %Done

if.end.91:                                        ; preds = %if.then.86
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %if.then.83
  %46 = load %struct._object*, %struct._object** %freplacement, align 8
  %47 = bitcast %struct._object* %46 to %struct.PyBytesObject*
  %ob_sval93 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %47, i32 0, i32 2
  %arraydecay94 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval93, i32 0, i32 0
  store i8* %arraydecay94, i8** %ptoappend, align 8
  %48 = load %struct._object*, %struct._object** %freplacement, align 8
  %49 = bitcast %struct._object* %48 to %struct.PyVarObject*
  %ob_size95 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %49, i32 0, i32 1
  %50 = load i64, i64* %ob_size95, align 8
  store i64 %50, i64* %ntoappend, align 8
  br label %if.end.98

if.else.96:                                       ; preds = %if.else.79
  %51 = load i8*, i8** %pin, align 8
  %add.ptr97 = getelementptr i8, i8* %51, i64 -2
  store i8* %add.ptr97, i8** %ptoappend, align 8
  store i64 2, i64* %ntoappend, align 8
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.96, %if.end.92
  br label %if.end.99

if.end.99:                                        ; preds = %if.end.98, %if.end.78
  br label %if.end.100

if.end.100:                                       ; preds = %if.end.99, %if.end.58
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100
  br label %if.end.102

if.end.102:                                       ; preds = %if.end.101, %if.then.14
  %52 = load i64, i64* %ntoappend, align 8
  %cmp103 = icmp eq i64 %52, 0
  br i1 %cmp103, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %if.end.102
  br label %while.cond

if.end.106:                                       ; preds = %if.end.102
  br label %while.cond.107

while.cond.107:                                   ; preds = %if.end.121, %if.end.106
  %53 = load i64, i64* %usednew, align 8
  %54 = load i64, i64* %ntoappend, align 8
  %add108 = add i64 %53, %54
  %55 = load i64, i64* %totalnew, align 8
  %cmp109 = icmp ugt i64 %add108, %55
  br i1 %cmp109, label %while.body.111, label %while.end

while.body.111:                                   ; preds = %while.cond.107
  %56 = load i64, i64* %totalnew, align 8
  %cmp112 = icmp ugt i64 %56, 4611686018427387903
  br i1 %cmp112, label %if.then.114, label %if.end.116

if.then.114:                                      ; preds = %while.body.111
  %call115 = call %struct._object* @PyErr_NoMemory()
  br label %Done

if.end.116:                                       ; preds = %while.body.111
  %57 = load i64, i64* %totalnew, align 8
  %shl = shl i64 %57, 1
  store i64 %shl, i64* %totalnew, align 8
  %58 = load i64, i64* %totalnew, align 8
  %call117 = call i32 @_PyBytes_Resize(%struct._object** %newfmt, i64 %58)
  %cmp118 = icmp slt i32 %call117, 0
  br i1 %cmp118, label %if.then.120, label %if.end.121

if.then.120:                                      ; preds = %if.end.116
  br label %Done

if.end.121:                                       ; preds = %if.end.116
  %59 = load %struct._object*, %struct._object** %newfmt, align 8
  %call122 = call i8* @PyBytes_AsString(%struct._object* %59)
  %60 = load i64, i64* %usednew, align 8
  %add.ptr123 = getelementptr i8, i8* %call122, i64 %60
  store i8* %add.ptr123, i8** %pnew, align 8
  br label %while.cond.107

while.end:                                        ; preds = %while.cond.107
  %61 = load i8*, i8** %pnew, align 8
  %62 = load i8*, i8** %ptoappend, align 8
  %63 = load i64, i64* %ntoappend, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %61, i8* %62, i64 %63, i32 1, i1 false)
  %64 = load i64, i64* %ntoappend, align 8
  %65 = load i8*, i8** %pnew, align 8
  %add.ptr124 = getelementptr i8, i8* %65, i64 %64
  store i8* %add.ptr124, i8** %pnew, align 8
  %66 = load i64, i64* %ntoappend, align 8
  %67 = load i64, i64* %usednew, align 8
  %add125 = add i64 %67, %66
  store i64 %add125, i64* %usednew, align 8
  br label %while.cond

while.end.126:                                    ; preds = %while.cond
  %68 = load i64, i64* %usednew, align 8
  %call127 = call i32 @_PyBytes_Resize(%struct._object** %newfmt, i64 %68)
  %cmp128 = icmp slt i32 %call127, 0
  br i1 %cmp128, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %while.end.126
  br label %Done

if.end.131:                                       ; preds = %while.end.126
  %call133 = call %struct._object* @PyImport_ImportModuleNoBlock(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  store %struct._object* %call133, %struct._object** %time, align 8
  %69 = load %struct._object*, %struct._object** %time, align 8
  %cmp134 = icmp eq %struct._object* %69, null
  br i1 %cmp134, label %if.then.136, label %if.end.137

if.then.136:                                      ; preds = %if.end.131
  br label %Done

if.end.137:                                       ; preds = %if.end.131
  %70 = load %struct._object*, %struct._object** %newfmt, align 8
  %71 = bitcast %struct._object* %70 to %struct.PyBytesObject*
  %ob_sval138 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %71, i32 0, i32 2
  %arraydecay139 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval138, i32 0, i32 0
  %call140 = call %struct._object* @PyUnicode_FromString(i8* %arraydecay139)
  store %struct._object* %call140, %struct._object** %format132, align 8
  %72 = load %struct._object*, %struct._object** %format132, align 8
  %cmp141 = icmp ne %struct._object* %72, null
  br i1 %cmp141, label %if.then.143, label %if.end.157

if.then.143:                                      ; preds = %if.end.137
  %73 = load %struct._object*, %struct._object** %time, align 8
  %74 = load %struct._object*, %struct._object** %format132, align 8
  %75 = load %struct._object*, %struct._object** %timetuple.addr, align 8
  %call144 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %73, %struct._Py_Identifier* @PyId_strftime, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.77, i32 0, i32 0), %struct._object* %74, %struct._object* %75, i8* null)
  store %struct._object* %call144, %struct._object** %result, align 8
  br label %do.body.145

do.body.145:                                      ; preds = %if.then.143
  %76 = load %struct._object*, %struct._object** %format132, align 8
  store %struct._object* %76, %struct._object** %_py_decref_tmp146, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  %ob_refcnt147 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0
  %78 = load i64, i64* %ob_refcnt147, align 8
  %dec148 = add i64 %78, -1
  store i64 %dec148, i64* %ob_refcnt147, align 8
  %cmp149 = icmp ne i64 %dec148, 0
  br i1 %cmp149, label %if.then.151, label %if.else.152

if.then.151:                                      ; preds = %do.body.145
  br label %if.end.155

if.else.152:                                      ; preds = %do.body.145
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  %ob_type153 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type153, align 8
  %tp_dealloc154 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc154, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  call void %81(%struct._object* %82)
  br label %if.end.155

if.end.155:                                       ; preds = %if.else.152, %if.then.151
  br label %do.end.156

do.end.156:                                       ; preds = %if.end.155
  br label %if.end.157

if.end.157:                                       ; preds = %do.end.156, %if.end.137
  br label %do.body.158

do.body.158:                                      ; preds = %if.end.157
  %83 = load %struct._object*, %struct._object** %time, align 8
  store %struct._object* %83, %struct._object** %_py_decref_tmp159, align 8
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  %ob_refcnt160 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 0
  %85 = load i64, i64* %ob_refcnt160, align 8
  %dec161 = add i64 %85, -1
  store i64 %dec161, i64* %ob_refcnt160, align 8
  %cmp162 = icmp ne i64 %dec161, 0
  br i1 %cmp162, label %if.then.164, label %if.else.165

if.then.164:                                      ; preds = %do.body.158
  br label %if.end.168

if.else.165:                                      ; preds = %do.body.158
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  %ob_type166 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 1
  %87 = load %struct._typeobject*, %struct._typeobject** %ob_type166, align 8
  %tp_dealloc167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %87, i32 0, i32 4
  %88 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc167, align 8
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  call void %88(%struct._object* %89)
  br label %if.end.168

if.end.168:                                       ; preds = %if.else.165, %if.then.164
  br label %do.end.169

do.end.169:                                       ; preds = %if.end.168
  br label %Done

Done:                                             ; preds = %do.end.169, %if.then.136, %if.then.130, %if.then.120, %if.then.114, %if.then.90, %if.then.77, %if.then.71, %if.then.55, %if.then.42, %if.then.32, %if.then.19, %if.then.6, %if.then.1
  br label %do.body.170

do.body.170:                                      ; preds = %Done
  %90 = load %struct._object*, %struct._object** %freplacement, align 8
  store %struct._object* %90, %struct._object** %_py_xdecref_tmp, align 8
  %91 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp171 = icmp ne %struct._object* %91, null
  br i1 %cmp171, label %if.then.173, label %if.end.186

if.then.173:                                      ; preds = %do.body.170
  br label %do.body.174

do.body.174:                                      ; preds = %if.then.173
  %92 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %92, %struct._object** %_py_decref_tmp175, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp175, align 8
  %ob_refcnt176 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 0
  %94 = load i64, i64* %ob_refcnt176, align 8
  %dec177 = add i64 %94, -1
  store i64 %dec177, i64* %ob_refcnt176, align 8
  %cmp178 = icmp ne i64 %dec177, 0
  br i1 %cmp178, label %if.then.180, label %if.else.181

if.then.180:                                      ; preds = %do.body.174
  br label %if.end.184

if.else.181:                                      ; preds = %do.body.174
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp175, align 8
  %ob_type182 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type182, align 8
  %tp_dealloc183 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 4
  %97 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc183, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp175, align 8
  call void %97(%struct._object* %98)
  br label %if.end.184

if.end.184:                                       ; preds = %if.else.181, %if.then.180
  br label %do.end.185

do.end.185:                                       ; preds = %if.end.184
  br label %if.end.186

if.end.186:                                       ; preds = %do.end.185, %do.body.170
  br label %do.end.187

do.end.187:                                       ; preds = %if.end.186
  br label %do.body.188

do.body.188:                                      ; preds = %do.end.187
  %99 = load %struct._object*, %struct._object** %zreplacement, align 8
  store %struct._object* %99, %struct._object** %_py_xdecref_tmp189, align 8
  %100 = load %struct._object*, %struct._object** %_py_xdecref_tmp189, align 8
  %cmp190 = icmp ne %struct._object* %100, null
  br i1 %cmp190, label %if.then.192, label %if.end.205

if.then.192:                                      ; preds = %do.body.188
  br label %do.body.193

do.body.193:                                      ; preds = %if.then.192
  %101 = load %struct._object*, %struct._object** %_py_xdecref_tmp189, align 8
  store %struct._object* %101, %struct._object** %_py_decref_tmp194, align 8
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp194, align 8
  %ob_refcnt195 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0
  %103 = load i64, i64* %ob_refcnt195, align 8
  %dec196 = add i64 %103, -1
  store i64 %dec196, i64* %ob_refcnt195, align 8
  %cmp197 = icmp ne i64 %dec196, 0
  br i1 %cmp197, label %if.then.199, label %if.else.200

if.then.199:                                      ; preds = %do.body.193
  br label %if.end.203

if.else.200:                                      ; preds = %do.body.193
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp194, align 8
  %ob_type201 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type201, align 8
  %tp_dealloc202 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc202, align 8
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp194, align 8
  call void %106(%struct._object* %107)
  br label %if.end.203

if.end.203:                                       ; preds = %if.else.200, %if.then.199
  br label %do.end.204

do.end.204:                                       ; preds = %if.end.203
  br label %if.end.205

if.end.205:                                       ; preds = %do.end.204, %do.body.188
  br label %do.end.206

do.end.206:                                       ; preds = %if.end.205
  br label %do.body.207

do.body.207:                                      ; preds = %do.end.206
  %108 = load %struct._object*, %struct._object** %Zreplacement, align 8
  store %struct._object* %108, %struct._object** %_py_xdecref_tmp208, align 8
  %109 = load %struct._object*, %struct._object** %_py_xdecref_tmp208, align 8
  %cmp209 = icmp ne %struct._object* %109, null
  br i1 %cmp209, label %if.then.211, label %if.end.224

if.then.211:                                      ; preds = %do.body.207
  br label %do.body.212

do.body.212:                                      ; preds = %if.then.211
  %110 = load %struct._object*, %struct._object** %_py_xdecref_tmp208, align 8
  store %struct._object* %110, %struct._object** %_py_decref_tmp213, align 8
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp213, align 8
  %ob_refcnt214 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 0
  %112 = load i64, i64* %ob_refcnt214, align 8
  %dec215 = add i64 %112, -1
  store i64 %dec215, i64* %ob_refcnt214, align 8
  %cmp216 = icmp ne i64 %dec215, 0
  br i1 %cmp216, label %if.then.218, label %if.else.219

if.then.218:                                      ; preds = %do.body.212
  br label %if.end.222

if.else.219:                                      ; preds = %do.body.212
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp213, align 8
  %ob_type220 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type220, align 8
  %tp_dealloc221 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 4
  %115 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc221, align 8
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp213, align 8
  call void %115(%struct._object* %116)
  br label %if.end.222

if.end.222:                                       ; preds = %if.else.219, %if.then.218
  br label %do.end.223

do.end.223:                                       ; preds = %if.end.222
  br label %if.end.224

if.end.224:                                       ; preds = %do.end.223, %do.body.207
  br label %do.end.225

do.end.225:                                       ; preds = %if.end.224
  br label %do.body.226

do.body.226:                                      ; preds = %do.end.225
  %117 = load %struct._object*, %struct._object** %newfmt, align 8
  store %struct._object* %117, %struct._object** %_py_xdecref_tmp227, align 8
  %118 = load %struct._object*, %struct._object** %_py_xdecref_tmp227, align 8
  %cmp228 = icmp ne %struct._object* %118, null
  br i1 %cmp228, label %if.then.230, label %if.end.243

if.then.230:                                      ; preds = %do.body.226
  br label %do.body.231

do.body.231:                                      ; preds = %if.then.230
  %119 = load %struct._object*, %struct._object** %_py_xdecref_tmp227, align 8
  store %struct._object* %119, %struct._object** %_py_decref_tmp232, align 8
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp232, align 8
  %ob_refcnt233 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 0
  %121 = load i64, i64* %ob_refcnt233, align 8
  %dec234 = add i64 %121, -1
  store i64 %dec234, i64* %ob_refcnt233, align 8
  %cmp235 = icmp ne i64 %dec234, 0
  br i1 %cmp235, label %if.then.237, label %if.else.238

if.then.237:                                      ; preds = %do.body.231
  br label %if.end.241

if.else.238:                                      ; preds = %do.body.231
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp232, align 8
  %ob_type239 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type239, align 8
  %tp_dealloc240 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 4
  %124 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc240, align 8
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp232, align 8
  call void %124(%struct._object* %125)
  br label %if.end.241

if.end.241:                                       ; preds = %if.else.238, %if.then.237
  br label %do.end.242

do.end.242:                                       ; preds = %if.end.241
  br label %if.end.243

if.end.243:                                       ; preds = %do.end.242, %do.body.226
  br label %do.end.244

do.end.244:                                       ; preds = %if.end.243
  %126 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %126, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.244, %if.then
  %127 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %127
}

declare i8* @PyUnicode_AsUTF8AndSize(%struct._object*, i64*) #1

declare %struct._object* @PyErr_NoMemory() #1

declare %struct._object* @PyBytes_FromStringAndSize(i8*, i64) #1

declare i8* @PyBytes_AsString(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @get_tzinfo_member(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %tzinfo = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* null, %struct._object** %tzinfo, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateTimeType
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %5, i32 0, i32 2
  %6 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %6 to i32
  %tobool2 = icmp ne i32 %conv, 0
  br i1 %tobool2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDateTime_DateTime*
  %tzinfo3 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %8, i32 0, i32 4
  %9 = load %struct._object*, %struct._object** %tzinfo3, align 8
  store %struct._object* %9, %struct._object** %tzinfo, align 8
  br label %if.end.17

if.else:                                          ; preds = %land.lhs.true, %lor.lhs.false
  %10 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %cmp5 = icmp eq %struct._typeobject* %11, @PyDateTime_TimeType
  br i1 %cmp5, label %land.lhs.true.11, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %if.else
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %call9 = call i32 @PyType_IsSubtype(%struct._typeobject* %13, %struct._typeobject* @PyDateTime_TimeType)
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %land.lhs.true.11, label %if.end

land.lhs.true.11:                                 ; preds = %lor.lhs.false.7, %if.else
  %14 = load %struct._object*, %struct._object** %self.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo12 = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %15, i32 0, i32 2
  %16 = load i8, i8* %hastzinfo12, align 1
  %conv13 = sext i8 %16 to i32
  %tobool14 = icmp ne i32 %conv13, 0
  br i1 %tobool14, label %if.then.15, label %if.end

if.then.15:                                       ; preds = %land.lhs.true.11
  %17 = load %struct._object*, %struct._object** %self.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Time*
  %tzinfo16 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %18, i32 0, i32 4
  %19 = load %struct._object*, %struct._object** %tzinfo16, align 8
  store %struct._object* %19, %struct._object** %tzinfo, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.15, %land.lhs.true.11, %lor.lhs.false.7
  br label %if.end.17

if.end.17:                                        ; preds = %if.end, %if.then
  %20 = load %struct._object*, %struct._object** %tzinfo, align 8
  ret %struct._object* %20
}

; Function Attrs: nounwind uwtable
define internal i32 @format_utcoffset(i8* %buf, i64 %buflen, i8* %sep, %struct._object* %tzinfo, %struct._object* %tzinfoarg) #0 {
entry:
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %buflen.addr = alloca i64, align 8
  %sep.addr = alloca i8*, align 8
  %tzinfo.addr = alloca %struct._object*, align 8
  %tzinfoarg.addr = alloca %struct._object*, align 8
  %offset = alloca %struct._object*, align 8
  %hours = alloca i32, align 4
  %minutes = alloca i32, align 4
  %seconds = alloca i32, align 4
  %sign = alloca i8, align 1
  %_py_decref_tmp = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  store i64 %buflen, i64* %buflen.addr, align 8
  store i8* %sep, i8** %sep.addr, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  store %struct._object* %tzinfoarg, %struct._object** %tzinfoarg.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %1 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call = call %struct._object* @call_utcoffset(%struct._object* %0, %struct._object* %1)
  store %struct._object* %call, %struct._object** %offset, align 8
  %2 = load %struct._object*, %struct._object** %offset, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %offset, align 8
  %cmp1 = icmp eq %struct._object* %3, @_Py_NoneStruct
  br i1 %cmp1, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %4 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %11 = load i8*, i8** %buf.addr, align 8
  store i8 0, i8* %11, align 1
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %offset, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDateTime_Delta*
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %13, i32 0, i32 2
  %14 = load i32, i32* %days, align 4
  %cmp7 = icmp slt i32 %14, 0
  br i1 %cmp7, label %if.then.8, label %if.else.24

if.then.8:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %15, %struct._object** %temp, align 8
  store i8 45, i8* %sign, align 1
  %16 = load %struct._object*, %struct._object** %offset, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyDateTime_Delta*
  %call9 = call %struct._object* @delta_negative(%struct.PyDateTime_Delta* %17)
  store %struct._object* %call9, %struct._object** %offset, align 8
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.8
  %18 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp11, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %20, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %23(%struct._object* %24)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  %25 = load %struct._object*, %struct._object** %offset, align 8
  %cmp21 = icmp eq %struct._object* %25, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %do.end.20
  store i32 -1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %do.end.20
  br label %if.end.25

if.else.24:                                       ; preds = %if.end.6
  store i8 43, i8* %sign, align 1
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.24, %if.end.23
  %26 = load %struct._object*, %struct._object** %offset, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDateTime_Delta*
  %seconds26 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %27, i32 0, i32 3
  %28 = load i32, i32* %seconds26, align 4
  store i32 %28, i32* %seconds, align 4
  br label %do.body.27

do.body.27:                                       ; preds = %if.end.25
  %29 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp28, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %31, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.27
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %34(%struct._object* %35)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  %36 = load i32, i32* %seconds, align 4
  %call38 = call i32 @divmod(i32 %36, i32 60, i32* %seconds)
  store i32 %call38, i32* %minutes, align 4
  %37 = load i32, i32* %minutes, align 4
  %call39 = call i32 @divmod(i32 %37, i32 60, i32* %minutes)
  store i32 %call39, i32* %hours, align 4
  %38 = load i8*, i8** %buf.addr, align 8
  %39 = load i64, i64* %buflen.addr, align 8
  %40 = load i8, i8* %sign, align 1
  %conv = sext i8 %40 to i32
  %41 = load i32, i32* %hours, align 4
  %42 = load i8*, i8** %sep.addr, align 8
  %43 = load i32, i32* %minutes, align 4
  %call40 = call i32 (i8*, i64, i8*, ...) @PyOS_snprintf(i8* %38, i64 %39, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.78, i32 0, i32 0), i32 %conv, i32 %41, i8* %42, i32 %43)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.37, %if.then.22, %do.end, %if.then
  %44 = load i32, i32* %retval
  ret i32 %44
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @make_Zreplacement(%struct._object* %object, %struct._object* %tzinfoarg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %object.addr = alloca %struct._object*, align 8
  %tzinfoarg.addr = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %tzinfo = alloca %struct._object*, align 8
  %Zreplacement = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  store %struct._object* %object, %struct._object** %object.addr, align 8
  store %struct._object* %tzinfoarg, %struct._object** %tzinfoarg.addr, align 8
  %0 = load %struct._object*, %struct._object** %object.addr, align 8
  %call = call %struct._object* @get_tzinfo_member(%struct._object* %0)
  store %struct._object* %call, %struct._object** %tzinfo, align 8
  %call1 = call %struct._object* @PyUnicode_FromStringAndSize(i8* null, i64 0)
  store %struct._object* %call1, %struct._object** %Zreplacement, align 8
  %1 = load %struct._object*, %struct._object** %Zreplacement, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp2 = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp2, label %if.then.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  %4 = load %struct._object*, %struct._object** %Zreplacement, align 8
  store %struct._object* %4, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %tzinfo, align 8
  %6 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call6 = call %struct._object* @call_tzname(%struct._object* %5, %struct._object* %6)
  store %struct._object* %call6, %struct._object** %temp, align 8
  %7 = load %struct._object*, %struct._object** %temp, align 8
  %cmp7 = icmp eq %struct._object* %7, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  br label %Error

if.end.9:                                         ; preds = %if.end.5
  %8 = load %struct._object*, %struct._object** %temp, align 8
  %cmp10 = icmp eq %struct._object* %8, @_Py_NoneStruct
  br i1 %cmp10, label %if.then.11, label %if.end.15

if.then.11:                                       ; preds = %if.end.9
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %9 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.14

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.14
  %16 = load %struct._object*, %struct._object** %Zreplacement, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

if.end.15:                                        ; preds = %if.end.9
  br label %do.body.16

do.body.16:                                       ; preds = %if.end.15
  %17 = load %struct._object*, %struct._object** %Zreplacement, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp17, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %19, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %22(%struct._object* %23)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  %24 = load %struct._object*, %struct._object** %temp, align 8
  %call27 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %24, %struct._Py_Identifier* @make_Zreplacement.PyId_replace, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.85, i32 0, i32 0))
  store %struct._object* %call27, %struct._object** %Zreplacement, align 8
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.26
  %25 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp29, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt30, align 8
  %dec31 = add i64 %27, -1
  store i64 %dec31, i64* %ob_refcnt30, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.28
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.28
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  call void %30(%struct._object* %31)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  %32 = load %struct._object*, %struct._object** %Zreplacement, align 8
  %cmp39 = icmp eq %struct._object* %32, null
  br i1 %cmp39, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %do.end.38
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.41:                                        ; preds = %do.end.38
  %33 = load %struct._object*, %struct._object** %Zreplacement, align 8
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 19
  %35 = load i64, i64* %tp_flags, align 8
  %and = and i64 %35, 268435456
  %cmp43 = icmp ne i64 %and, 0
  br i1 %cmp43, label %if.end.45, label %if.then.44

if.then.44:                                       ; preds = %if.end.41
  %36 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %36, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.86, i32 0, i32 0))
  br label %Error

if.end.45:                                        ; preds = %if.end.41
  %37 = load %struct._object*, %struct._object** %Zreplacement, align 8
  store %struct._object* %37, %struct._object** %retval
  br label %return

Error:                                            ; preds = %if.then.44, %if.then.8
  br label %do.body.46

do.body.46:                                       ; preds = %Error
  %38 = load %struct._object*, %struct._object** %Zreplacement, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp47, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt48, align 8
  %dec49 = add i64 %40, -1
  store i64 %dec49, i64* %ob_refcnt48, align 8
  %cmp50 = icmp ne i64 %dec49, 0
  br i1 %cmp50, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %do.body.46
  br label %if.end.55

if.else.52:                                       ; preds = %do.body.46
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  call void %43(%struct._object* %44)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.56, %if.end.45, %if.then.40, %do.end, %if.then.4, %if.then
  %45 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %45
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @make_freplacement(%struct._object* %object) #0 {
entry:
  %object.addr = alloca %struct._object*, align 8
  %freplacement = alloca [64 x i8], align 16
  store %struct._object* %object, %struct._object** %object.addr, align 8
  %0 = load %struct._object*, %struct._object** %object.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_TimeType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %object.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_TimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %arraydecay = getelementptr inbounds [64 x i8], [64 x i8]* %freplacement, i32 0, i32 0
  %4 = load %struct._object*, %struct._object** %object.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDateTime_Time*
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %5, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 3
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  %shl = shl i32 %conv, 16
  %7 = load %struct._object*, %struct._object** %object.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDateTime_Time*
  %data2 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %8, i32 0, i32 3
  %arrayidx3 = getelementptr [6 x i8], [6 x i8]* %data2, i32 0, i64 4
  %9 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %9 to i32
  %shl5 = shl i32 %conv4, 8
  %or = or i32 %shl, %shl5
  %10 = load %struct._object*, %struct._object** %object.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDateTime_Time*
  %data6 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %11, i32 0, i32 3
  %arrayidx7 = getelementptr [6 x i8], [6 x i8]* %data6, i32 0, i64 5
  %12 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %12 to i32
  %or9 = or i32 %or, %conv8
  %call10 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0), i32 %or9) #5
  br label %if.end.37

if.else:                                          ; preds = %lor.lhs.false
  %13 = load %struct._object*, %struct._object** %object.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %cmp12 = icmp eq %struct._typeobject* %14, @PyDateTime_DateTimeType
  br i1 %cmp12, label %if.then.18, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %if.else
  %15 = load %struct._object*, %struct._object** %object.addr, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %call16 = call i32 @PyType_IsSubtype(%struct._typeobject* %16, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then.18, label %if.else.34

if.then.18:                                       ; preds = %lor.lhs.false.14, %if.else
  %arraydecay19 = getelementptr inbounds [64 x i8], [64 x i8]* %freplacement, i32 0, i32 0
  %17 = load %struct._object*, %struct._object** %object.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_DateTime*
  %data20 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %18, i32 0, i32 3
  %arrayidx21 = getelementptr [10 x i8], [10 x i8]* %data20, i32 0, i64 7
  %19 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %19 to i32
  %shl23 = shl i32 %conv22, 16
  %20 = load %struct._object*, %struct._object** %object.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDateTime_DateTime*
  %data24 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %21, i32 0, i32 3
  %arrayidx25 = getelementptr [10 x i8], [10 x i8]* %data24, i32 0, i64 8
  %22 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %22 to i32
  %shl27 = shl i32 %conv26, 8
  %or28 = or i32 %shl23, %shl27
  %23 = load %struct._object*, %struct._object** %object.addr, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyDateTime_DateTime*
  %data29 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %24, i32 0, i32 3
  %arrayidx30 = getelementptr [10 x i8], [10 x i8]* %data29, i32 0, i64 9
  %25 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %25 to i32
  %or32 = or i32 %or28, %conv31
  %call33 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0), i32 %or32) #5
  br label %if.end

if.else.34:                                       ; preds = %lor.lhs.false.14
  %arraydecay35 = getelementptr inbounds [64 x i8], [64 x i8]* %freplacement, i32 0, i32 0
  %call36 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0), i32 0) #5
  br label %if.end

if.end:                                           ; preds = %if.else.34, %if.then.18
  br label %if.end.37

if.end.37:                                        ; preds = %if.end, %if.then
  %arraydecay38 = getelementptr inbounds [64 x i8], [64 x i8]* %freplacement, i32 0, i32 0
  %arraydecay39 = getelementptr inbounds [64 x i8], [64 x i8]* %freplacement, i32 0, i32 0
  %call40 = call i64 @strlen(i8* %arraydecay39) #6
  %call41 = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay38, i64 %call40)
  ret %struct._object* %call41
}

declare i32 @_PyBytes_Resize(%struct._object**, i64) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #5

declare %struct._object* @PyUnicode_FromString(i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_utcoffset(%struct._object* %tzinfo, %struct._object* %tzinfoarg) #0 {
entry:
  %tzinfo.addr = alloca %struct._object*, align 8
  %tzinfoarg.addr = alloca %struct._object*, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  store %struct._object* %tzinfoarg, %struct._object** %tzinfoarg.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %1 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call = call %struct._object* @call_tzinfo_method(%struct._object* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_negative(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 2
  %1 = load i32, i32* %days, align 4
  %sub = sub i32 0, %1
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %2, i32 0, i32 3
  %3 = load i32, i32* %seconds, align 4
  %sub1 = sub i32 0, %3
  %4 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %4, i32 0, i32 4
  %5 = load i32, i32* %microseconds, align 4
  %sub2 = sub i32 0, %5
  %call = call %struct._object* @new_delta_ex(i32 %sub, i32 %sub1, i32 %sub2, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @divmod(i32 %x, i32 %y, i32* %r) #0 {
entry:
  %x.addr = alloca i32, align 4
  %y.addr = alloca i32, align 4
  %r.addr = alloca i32*, align 8
  %quo = alloca i32, align 4
  store i32 %x, i32* %x.addr, align 4
  store i32 %y, i32* %y.addr, align 4
  store i32* %r, i32** %r.addr, align 8
  %0 = load i32, i32* %x.addr, align 4
  %1 = load i32, i32* %y.addr, align 4
  %div = sdiv i32 %0, %1
  store i32 %div, i32* %quo, align 4
  %2 = load i32, i32* %x.addr, align 4
  %3 = load i32, i32* %quo, align 4
  %4 = load i32, i32* %y.addr, align 4
  %mul = mul i32 %3, %4
  %sub = sub i32 %2, %mul
  %5 = load i32*, i32** %r.addr, align 8
  store i32 %sub, i32* %5, align 4
  %6 = load i32*, i32** %r.addr, align 8
  %7 = load i32, i32* %6, align 4
  %cmp = icmp slt i32 %7, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %quo, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* %quo, align 4
  %9 = load i32, i32* %y.addr, align 4
  %10 = load i32*, i32** %r.addr, align 8
  %11 = load i32, i32* %10, align 4
  %add = add i32 %11, %9
  store i32 %add, i32* %10, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %12 = load i32, i32* %quo, align 4
  ret i32 %12
}

declare i32 @PyOS_snprintf(i8*, i64, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_tzinfo_method(%struct._object* %tzinfo, i8* %name, %struct._object* %tzinfoarg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %tzinfo.addr = alloca %struct._object*, align 8
  %name.addr = alloca i8*, align 8
  %tzinfoarg.addr = alloca %struct._object*, align 8
  %offset = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  store %struct._object* %tzinfoarg, %struct._object** %tzinfoarg.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %3 = load i8*, i8** %name.addr, align 8
  %4 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call = call %struct._object* (%struct._object*, i8*, i8*, ...) @PyObject_CallMethod(%struct._object* %2, i8* %3, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), %struct._object* %4)
  store %struct._object* %call, %struct._object** %offset, align 8
  %5 = load %struct._object*, %struct._object** %offset, align 8
  %cmp1 = icmp eq %struct._object* %5, @_Py_NoneStruct
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %offset, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  %7 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %7, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** %offset, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp5 = icmp eq %struct._typeobject* %9, @PyDateTime_DeltaType
  br i1 %cmp5, label %if.then.9, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %if.end.4
  %10 = load %struct._object*, %struct._object** %offset, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %11, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then.9, label %if.else.43

if.then.9:                                        ; preds = %lor.lhs.false.6, %if.end.4
  %12 = load %struct._object*, %struct._object** %offset, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDateTime_Delta*
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %13, i32 0, i32 4
  %14 = load i32, i32* %microseconds, align 4
  %cmp10 = icmp ne i32 %14, 0
  br i1 %cmp10, label %if.then.13, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %if.then.9
  %15 = load %struct._object*, %struct._object** %offset, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyDateTime_Delta*
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %16, i32 0, i32 3
  %17 = load i32, i32* %seconds, align 4
  %rem = srem i32 %17, 60
  %cmp12 = icmp ne i32 %rem, 0
  br i1 %cmp12, label %if.then.13, label %if.end.19

if.then.13:                                       ; preds = %lor.lhs.false.11, %if.then.9
  br label %do.body

do.body:                                          ; preds = %if.then.13
  %18 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp14 = icmp ne i64 %dec, 0
  br i1 %cmp14, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %do.body
  br label %if.end.17

if.else:                                          ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else, %if.then.15
  br label %do.end

do.end:                                           ; preds = %if.end.17
  %25 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call18 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %25, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.80, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %lor.lhs.false.11
  %26 = load %struct._object*, %struct._object** %offset, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDateTime_Delta*
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %27, i32 0, i32 2
  %28 = load i32, i32* %days, align 4
  %cmp20 = icmp eq i32 %28, -1
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false.23

land.lhs.true:                                    ; preds = %if.end.19
  %29 = load %struct._object*, %struct._object** %offset, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyDateTime_Delta*
  %seconds21 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %30, i32 0, i32 3
  %31 = load i32, i32* %seconds21, align 4
  %cmp22 = icmp eq i32 %31, 0
  br i1 %cmp22, label %if.then.29, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %land.lhs.true, %if.end.19
  %32 = load %struct._object*, %struct._object** %offset, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDateTime_Delta*
  %days24 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %33, i32 0, i32 2
  %34 = load i32, i32* %days24, align 4
  %cmp25 = icmp slt i32 %34, -1
  br i1 %cmp25, label %if.then.29, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %lor.lhs.false.23
  %35 = load %struct._object*, %struct._object** %offset, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyDateTime_Delta*
  %days27 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %36, i32 0, i32 2
  %37 = load i32, i32* %days27, align 4
  %cmp28 = icmp sge i32 %37, 1
  br i1 %cmp28, label %if.then.29, label %if.end.42

if.then.29:                                       ; preds = %lor.lhs.false.26, %lor.lhs.false.23, %land.lhs.true
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.29
  %38 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp31, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %40, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %43(%struct._object* %44)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  %45 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call41 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %45, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.81, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.42:                                        ; preds = %lor.lhs.false.26
  br label %if.end.57

if.else.43:                                       ; preds = %lor.lhs.false.6
  br label %do.body.44

do.body.44:                                       ; preds = %if.else.43
  %46 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp45, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %48, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.44
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %51(%struct._object* %52)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  %53 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %54 = load i8*, i8** %name.addr, align 8
  %55 = load %struct._object*, %struct._object** %offset, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 1
  %57 = load i8*, i8** %tp_name, align 8
  %call56 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %53, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.82, i32 0, i32 0), i8* %54, i8* %57)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.57:                                        ; preds = %if.end.42
  %58 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %58, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.57, %do.end.54, %do.end.40, %do.end, %if.then.3, %if.then
  %59 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %59
}

declare %struct._object* @PyObject_CallMethod(%struct._object*, i8*, i8*, ...) #1

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #1

declare %struct._object* @PyUnicode_FromStringAndSize(i8*, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_tzname(%struct._object* %tzinfo, %struct._object* %tzinfoarg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %tzinfo.addr = alloca %struct._object*, align 8
  %tzinfoarg.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  store %struct._object* %tzinfoarg, %struct._object** %tzinfoarg.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %3 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %2, %struct._Py_Identifier* @call_tzname.PyId_tzname, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), %struct._object* %3)
  store %struct._object* %call, %struct._object** %result, align 8
  %4 = load %struct._object*, %struct._object** %result, align 8
  %cmp1 = icmp eq %struct._object* %4, null
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %result, align 8
  %cmp2 = icmp eq %struct._object* %5, @_Py_NoneStruct
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  %6 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %lor.lhs.false
  %7 = load %struct._object*, %struct._object** %result, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 19
  %9 = load i64, i64* %tp_flags, align 8
  %and = and i64 %9, 268435456
  %cmp5 = icmp ne i64 %and, 0
  br i1 %cmp5, label %if.end.13, label %if.then.6

if.then.6:                                        ; preds = %if.end.4
  %10 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %11 = load %struct._object*, %struct._object** %result, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 1
  %13 = load i8*, i8** %tp_name, align 8
  %call8 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %10, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.88, i32 0, i32 0), i8* %13)
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %14 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.12
  store %struct._object* null, %struct._object** %result, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %if.end.4
  %21 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %21, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.3, %if.then
  %22 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %22
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

declare i64 @PyUnicode_GetLength(%struct._object*) #1

declare %struct._object* @PyObject_Str(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @build_struct_time(i32 %y, i32 %m, i32 %d, i32 %hh, i32 %mm, i32 %ss, i32 %dstflag) #0 {
entry:
  %y.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  %hh.addr = alloca i32, align 4
  %mm.addr = alloca i32, align 4
  %ss.addr = alloca i32, align 4
  %dstflag.addr = alloca i32, align 4
  %time = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 %y, i32* %y.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  store i32 %hh, i32* %hh.addr, align 4
  store i32 %mm, i32* %mm.addr, align 4
  store i32 %ss, i32* %ss.addr, align 4
  store i32 %dstflag, i32* %dstflag.addr, align 4
  store %struct._object* null, %struct._object** %result, align 8
  %call = call %struct._object* @PyImport_ImportModuleNoBlock(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %time, align 8
  %0 = load %struct._object*, %struct._object** %time, align 8
  %cmp = icmp ne %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %time, align 8
  %2 = load i32, i32* %y.addr, align 4
  %3 = load i32, i32* %m.addr, align 4
  %4 = load i32, i32* %d.addr, align 4
  %5 = load i32, i32* %hh.addr, align 4
  %6 = load i32, i32* %mm.addr, align 4
  %7 = load i32, i32* %ss.addr, align 4
  %8 = load i32, i32* %y.addr, align 4
  %9 = load i32, i32* %m.addr, align 4
  %10 = load i32, i32* %d.addr, align 4
  %call1 = call i32 @weekday(i32 %8, i32 %9, i32 %10)
  %11 = load i32, i32* %y.addr, align 4
  %12 = load i32, i32* %m.addr, align 4
  %call2 = call i32 @days_before_month(i32 %11, i32 %12)
  %13 = load i32, i32* %d.addr, align 4
  %add = add i32 %call2, %13
  %14 = load i32, i32* %dstflag.addr, align 4
  %call3 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %1, %struct._Py_Identifier* @build_struct_time.PyId_struct_time, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.92, i32 0, i32 0), i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %call1, i32 %add, i32 %14)
  store %struct._object* %call3, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.then
  %15 = load %struct._object*, %struct._object** %time, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.6

if.end.6:                                         ; preds = %do.end, %entry
  %22 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %22
}

; Function Attrs: nounwind uwtable
define internal i32 @iso_week1_monday(i32 %year) #0 {
entry:
  %year.addr = alloca i32, align 4
  %first_day = alloca i32, align 4
  %first_weekday = alloca i32, align 4
  %week1_monday = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %call = call i32 @ymd_to_ord(i32 %0, i32 1, i32 1)
  store i32 %call, i32* %first_day, align 4
  %1 = load i32, i32* %first_day, align 4
  %add = add i32 %1, 6
  %rem = srem i32 %add, 7
  store i32 %rem, i32* %first_weekday, align 4
  %2 = load i32, i32* %first_day, align 4
  %3 = load i32, i32* %first_weekday, align 4
  %sub = sub i32 %2, %3
  store i32 %sub, i32* %week1_monday, align 4
  %4 = load i32, i32* %first_weekday, align 4
  %cmp = icmp sgt i32 %4, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %week1_monday, align 4
  %add1 = add i32 %5, 7
  store i32 %add1, i32* %week1_monday, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %week1_monday, align 4
  ret i32 %6
}

declare %struct._object* @Py_BuildValue(i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_getstate(%struct.PyDateTime_Date* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %field = alloca %struct._object*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %data, i32 0, i32 0
  %call = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay, i64 4)
  store %struct._object* %call, %struct._object** %field, align 8
  %1 = load %struct._object*, %struct._object** %field, align 8
  %call1 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.99, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_year(%struct.PyDateTime_Date* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %or = or i32 %shl, %conv3
  %conv4 = sext i32 %or to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv4)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_month(%struct.PyDateTime_Date* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 2
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @date_day(%struct.PyDateTime_Date* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 3
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @check_date_args(i32 %year, i32 %month, i32 %day) #0 {
entry:
  %retval = alloca i32, align 4
  %year.addr = alloca i32, align 4
  %month.addr = alloca i32, align 4
  %day.addr = alloca i32, align 4
  store i32 %year, i32* %year.addr, align 4
  store i32 %month, i32* %month.addr, align 4
  store i32 %day, i32* %day.addr, align 4
  %0 = load i32, i32* %year.addr, align 4
  %cmp = icmp slt i32 %0, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %year.addr, align 4
  %cmp1 = icmp sgt i32 %1, 9999
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.100, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %month.addr, align 4
  %cmp2 = icmp slt i32 %3, 1
  br i1 %cmp2, label %if.then.5, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %if.end
  %4 = load i32, i32* %month.addr, align 4
  %cmp4 = icmp sgt i32 %4, 12
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %lor.lhs.false.3, %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.101, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %lor.lhs.false.3
  %6 = load i32, i32* %day.addr, align 4
  %cmp7 = icmp slt i32 %6, 1
  br i1 %cmp7, label %if.then.10, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end.6
  %7 = load i32, i32* %day.addr, align 4
  %8 = load i32, i32* %year.addr, align 4
  %9 = load i32, i32* %month.addr, align 4
  %call = call i32 @days_in_month(i32 %8, i32 %9)
  %cmp9 = icmp sgt i32 %7, %call
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %lor.lhs.false.8, %if.end.6
  %10 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.102, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false.8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.10, %if.then.5, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal void @datetime_dealloc(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  store %struct._object* %4, %struct._object** %_py_xdecref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %5, null
  br i1 %cmp, label %if.then.1, label %if.end.5

if.then.1:                                        ; preds = %do.body
  br label %do.body.2

do.body.2:                                        ; preds = %if.then.1
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %if.end.7

if.end.7:                                         ; preds = %do.end.6, %entry
  %13 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %14 = bitcast %struct.PyDateTime_DateTime* %13 to %struct._object*
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 38
  %16 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %17 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %18 = bitcast %struct.PyDateTime_DateTime* %17 to %struct._object*
  %19 = bitcast %struct._object* %18 to i8*
  call void %16(i8* %19)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_repr(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %type_name = alloca i8*, align 8
  %baserepr = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  store i8* %3, i8** %type_name, align 8
  %4 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 7
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  %shl = shl i32 %conv, 16
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %6, i32 0, i32 3
  %arrayidx2 = getelementptr [10 x i8], [10 x i8]* %data1, i32 0, i64 8
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %shl4 = shl i32 %conv3, 8
  %or = or i32 %shl, %shl4
  %8 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data5 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %8, i32 0, i32 3
  %arrayidx6 = getelementptr [10 x i8], [10 x i8]* %data5, i32 0, i64 9
  %9 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %9 to i32
  %or8 = or i32 %or, %conv7
  %tobool = icmp ne i32 %or8, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %10 = load i8*, i8** %type_name, align 8
  %11 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %12 = bitcast %struct.PyDateTime_DateTime* %11 to %struct.PyDateTime_Date*
  %data9 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %12, i32 0, i32 3
  %arrayidx10 = getelementptr [4 x i8], [4 x i8]* %data9, i32 0, i64 0
  %13 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %13 to i32
  %shl12 = shl i32 %conv11, 8
  %14 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %15 = bitcast %struct.PyDateTime_DateTime* %14 to %struct.PyDateTime_Date*
  %data13 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %15, i32 0, i32 3
  %arrayidx14 = getelementptr [4 x i8], [4 x i8]* %data13, i32 0, i64 1
  %16 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %16 to i32
  %or16 = or i32 %shl12, %conv15
  %17 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %18 = bitcast %struct.PyDateTime_DateTime* %17 to %struct.PyDateTime_Date*
  %data17 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %18, i32 0, i32 3
  %arrayidx18 = getelementptr [4 x i8], [4 x i8]* %data17, i32 0, i64 2
  %19 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %19 to i32
  %20 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %21 = bitcast %struct.PyDateTime_DateTime* %20 to %struct.PyDateTime_Date*
  %data20 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %21, i32 0, i32 3
  %arrayidx21 = getelementptr [4 x i8], [4 x i8]* %data20, i32 0, i64 3
  %22 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %22 to i32
  %23 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data23 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %23, i32 0, i32 3
  %arrayidx24 = getelementptr [10 x i8], [10 x i8]* %data23, i32 0, i64 4
  %24 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %24 to i32
  %25 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data26 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %25, i32 0, i32 3
  %arrayidx27 = getelementptr [10 x i8], [10 x i8]* %data26, i32 0, i64 5
  %26 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %26 to i32
  %27 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data29 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %27, i32 0, i32 3
  %arrayidx30 = getelementptr [10 x i8], [10 x i8]* %data29, i32 0, i64 6
  %28 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %28 to i32
  %29 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data32 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %29, i32 0, i32 3
  %arrayidx33 = getelementptr [10 x i8], [10 x i8]* %data32, i32 0, i64 7
  %30 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %30 to i32
  %shl35 = shl i32 %conv34, 16
  %31 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data36 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %31, i32 0, i32 3
  %arrayidx37 = getelementptr [10 x i8], [10 x i8]* %data36, i32 0, i64 8
  %32 = load i8, i8* %arrayidx37, align 1
  %conv38 = zext i8 %32 to i32
  %shl39 = shl i32 %conv38, 8
  %or40 = or i32 %shl35, %shl39
  %33 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data41 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %33, i32 0, i32 3
  %arrayidx42 = getelementptr [10 x i8], [10 x i8]* %data41, i32 0, i64 9
  %34 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %34 to i32
  %or44 = or i32 %or40, %conv43
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.104, i32 0, i32 0), i8* %10, i32 %or16, i32 %conv19, i32 %conv22, i32 %conv25, i32 %conv28, i32 %conv31, i32 %or44)
  store %struct._object* %call, %struct._object** %baserepr, align 8
  br label %if.end.95

if.else:                                          ; preds = %entry
  %35 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data45 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %35, i32 0, i32 3
  %arrayidx46 = getelementptr [10 x i8], [10 x i8]* %data45, i32 0, i64 6
  %36 = load i8, i8* %arrayidx46, align 1
  %tobool47 = icmp ne i8 %36, 0
  br i1 %tobool47, label %if.then.48, label %if.else.73

if.then.48:                                       ; preds = %if.else
  %37 = load i8*, i8** %type_name, align 8
  %38 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %39 = bitcast %struct.PyDateTime_DateTime* %38 to %struct.PyDateTime_Date*
  %data49 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %39, i32 0, i32 3
  %arrayidx50 = getelementptr [4 x i8], [4 x i8]* %data49, i32 0, i64 0
  %40 = load i8, i8* %arrayidx50, align 1
  %conv51 = zext i8 %40 to i32
  %shl52 = shl i32 %conv51, 8
  %41 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %42 = bitcast %struct.PyDateTime_DateTime* %41 to %struct.PyDateTime_Date*
  %data53 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %42, i32 0, i32 3
  %arrayidx54 = getelementptr [4 x i8], [4 x i8]* %data53, i32 0, i64 1
  %43 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %43 to i32
  %or56 = or i32 %shl52, %conv55
  %44 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %45 = bitcast %struct.PyDateTime_DateTime* %44 to %struct.PyDateTime_Date*
  %data57 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %45, i32 0, i32 3
  %arrayidx58 = getelementptr [4 x i8], [4 x i8]* %data57, i32 0, i64 2
  %46 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %46 to i32
  %47 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %48 = bitcast %struct.PyDateTime_DateTime* %47 to %struct.PyDateTime_Date*
  %data60 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %48, i32 0, i32 3
  %arrayidx61 = getelementptr [4 x i8], [4 x i8]* %data60, i32 0, i64 3
  %49 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %49 to i32
  %50 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data63 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %50, i32 0, i32 3
  %arrayidx64 = getelementptr [10 x i8], [10 x i8]* %data63, i32 0, i64 4
  %51 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %51 to i32
  %52 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data66 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %52, i32 0, i32 3
  %arrayidx67 = getelementptr [10 x i8], [10 x i8]* %data66, i32 0, i64 5
  %53 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %53 to i32
  %54 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data69 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %54, i32 0, i32 3
  %arrayidx70 = getelementptr [10 x i8], [10 x i8]* %data69, i32 0, i64 6
  %55 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %55 to i32
  %call72 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.105, i32 0, i32 0), i8* %37, i32 %or56, i32 %conv59, i32 %conv62, i32 %conv65, i32 %conv68, i32 %conv71)
  store %struct._object* %call72, %struct._object** %baserepr, align 8
  br label %if.end

if.else.73:                                       ; preds = %if.else
  %56 = load i8*, i8** %type_name, align 8
  %57 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %58 = bitcast %struct.PyDateTime_DateTime* %57 to %struct.PyDateTime_Date*
  %data74 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %58, i32 0, i32 3
  %arrayidx75 = getelementptr [4 x i8], [4 x i8]* %data74, i32 0, i64 0
  %59 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %59 to i32
  %shl77 = shl i32 %conv76, 8
  %60 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %61 = bitcast %struct.PyDateTime_DateTime* %60 to %struct.PyDateTime_Date*
  %data78 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %61, i32 0, i32 3
  %arrayidx79 = getelementptr [4 x i8], [4 x i8]* %data78, i32 0, i64 1
  %62 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %62 to i32
  %or81 = or i32 %shl77, %conv80
  %63 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %64 = bitcast %struct.PyDateTime_DateTime* %63 to %struct.PyDateTime_Date*
  %data82 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %64, i32 0, i32 3
  %arrayidx83 = getelementptr [4 x i8], [4 x i8]* %data82, i32 0, i64 2
  %65 = load i8, i8* %arrayidx83, align 1
  %conv84 = zext i8 %65 to i32
  %66 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %67 = bitcast %struct.PyDateTime_DateTime* %66 to %struct.PyDateTime_Date*
  %data85 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %67, i32 0, i32 3
  %arrayidx86 = getelementptr [4 x i8], [4 x i8]* %data85, i32 0, i64 3
  %68 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %68 to i32
  %69 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data88 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %69, i32 0, i32 3
  %arrayidx89 = getelementptr [10 x i8], [10 x i8]* %data88, i32 0, i64 4
  %70 = load i8, i8* %arrayidx89, align 1
  %conv90 = zext i8 %70 to i32
  %71 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data91 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %71, i32 0, i32 3
  %arrayidx92 = getelementptr [10 x i8], [10 x i8]* %data91, i32 0, i64 5
  %72 = load i8, i8* %arrayidx92, align 1
  %conv93 = zext i8 %72 to i32
  %call94 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.106, i32 0, i32 0), i8* %56, i32 %or81, i32 %conv84, i32 %conv87, i32 %conv90, i32 %conv93)
  store %struct._object* %call94, %struct._object** %baserepr, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.73, %if.then.48
  br label %if.end.95

if.end.95:                                        ; preds = %if.end, %if.then
  %73 = load %struct._object*, %struct._object** %baserepr, align 8
  %cmp = icmp eq %struct._object* %73, null
  br i1 %cmp, label %if.then.98, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.95
  %74 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %75 = bitcast %struct.PyDateTime_DateTime* %74 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %75, i32 0, i32 2
  %76 = load i8, i8* %hastzinfo, align 1
  %tobool97 = icmp ne i8 %76, 0
  br i1 %tobool97, label %if.end.99, label %if.then.98

if.then.98:                                       ; preds = %lor.lhs.false, %if.end.95
  %77 = load %struct._object*, %struct._object** %baserepr, align 8
  store %struct._object* %77, %struct._object** %retval
  br label %return

if.end.99:                                        ; preds = %lor.lhs.false
  %78 = load %struct._object*, %struct._object** %baserepr, align 8
  %79 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %79, i32 0, i32 4
  %80 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call100 = call %struct._object* @append_keyword_tzinfo(%struct._object* %78, %struct._object* %80)
  store %struct._object* %call100, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.99, %if.then.98
  %81 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %81
}

; Function Attrs: nounwind uwtable
define internal i64 @datetime_hash(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %offset = alloca %struct._object*, align 8
  %temp1 = alloca %struct._object*, align 8
  %temp2 = alloca %struct._object*, align 8
  %days = alloca i32, align 4
  %seconds = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp84 = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 1
  %1 = load i64, i64* %hashcode, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %if.then, label %if.end.108

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %3 = bitcast %struct.PyDateTime_DateTime* %2 to %struct._object*
  %call = call %struct._object* @datetime_utcoffset(%struct._object* %3, %struct._object* null)
  store %struct._object* %call, %struct._object** %offset, align 8
  %4 = load %struct._object*, %struct._object** %offset, align 8
  %cmp1 = icmp eq %struct._object* %4, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %offset, align 8
  %cmp3 = icmp eq %struct._object* %5, @_Py_NoneStruct
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %6, i32 0, i32 3
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %data, i32 0, i32 0
  %call5 = call i64 @generic_hash(i8* %arraydecay, i32 10)
  %7 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %hashcode6 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %7, i32 0, i32 1
  store i64 %call5, i64* %hashcode6, align 8
  br label %if.end.95

if.else:                                          ; preds = %if.end
  %8 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %9 = bitcast %struct.PyDateTime_DateTime* %8 to %struct.PyDateTime_Date*
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %9, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 0
  %10 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %10 to i32
  %shl = shl i32 %conv, 8
  %11 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %12 = bitcast %struct.PyDateTime_DateTime* %11 to %struct.PyDateTime_Date*
  %data8 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %12, i32 0, i32 3
  %arrayidx9 = getelementptr [4 x i8], [4 x i8]* %data8, i32 0, i64 1
  %13 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %13 to i32
  %or = or i32 %shl, %conv10
  %14 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %15 = bitcast %struct.PyDateTime_DateTime* %14 to %struct.PyDateTime_Date*
  %data11 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %15, i32 0, i32 3
  %arrayidx12 = getelementptr [4 x i8], [4 x i8]* %data11, i32 0, i64 2
  %16 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %16 to i32
  %17 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %18 = bitcast %struct.PyDateTime_DateTime* %17 to %struct.PyDateTime_Date*
  %data14 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %18, i32 0, i32 3
  %arrayidx15 = getelementptr [4 x i8], [4 x i8]* %data14, i32 0, i64 3
  %19 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %19 to i32
  %call17 = call i32 @ymd_to_ord(i32 %or, i32 %conv13, i32 %conv16)
  store i32 %call17, i32* %days, align 4
  %20 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data18 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %20, i32 0, i32 3
  %arrayidx19 = getelementptr [10 x i8], [10 x i8]* %data18, i32 0, i64 4
  %21 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %21 to i32
  %mul = mul i32 %conv20, 3600
  %22 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data21 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %22, i32 0, i32 3
  %arrayidx22 = getelementptr [10 x i8], [10 x i8]* %data21, i32 0, i64 5
  %23 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %23 to i32
  %mul24 = mul i32 %conv23, 60
  %add = add i32 %mul, %mul24
  %24 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data25 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %24, i32 0, i32 3
  %arrayidx26 = getelementptr [10 x i8], [10 x i8]* %data25, i32 0, i64 6
  %25 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %25 to i32
  %add28 = add i32 %add, %conv27
  store i32 %add28, i32* %seconds, align 4
  %26 = load i32, i32* %days, align 4
  %27 = load i32, i32* %seconds, align 4
  %28 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data29 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %28, i32 0, i32 3
  %arrayidx30 = getelementptr [10 x i8], [10 x i8]* %data29, i32 0, i64 7
  %29 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %29 to i32
  %shl32 = shl i32 %conv31, 16
  %30 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data33 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %30, i32 0, i32 3
  %arrayidx34 = getelementptr [10 x i8], [10 x i8]* %data33, i32 0, i64 8
  %31 = load i8, i8* %arrayidx34, align 1
  %conv35 = zext i8 %31 to i32
  %shl36 = shl i32 %conv35, 8
  %or37 = or i32 %shl32, %shl36
  %32 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data38 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %32, i32 0, i32 3
  %arrayidx39 = getelementptr [10 x i8], [10 x i8]* %data38, i32 0, i64 9
  %33 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %33 to i32
  %or41 = or i32 %or37, %conv40
  %call42 = call %struct._object* @new_delta_ex(i32 %26, i32 %27, i32 %or41, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call42, %struct._object** %temp1, align 8
  %34 = load %struct._object*, %struct._object** %temp1, align 8
  %cmp43 = icmp eq %struct._object* %34, null
  br i1 %cmp43, label %if.then.45, label %if.end.51

if.then.45:                                       ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.45
  %35 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %37, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp46 = icmp ne i64 %dec, 0
  br i1 %cmp46, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body
  br label %if.end.50

if.else.49:                                       ; preds = %do.body
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %40(%struct._object* %41)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.49, %if.then.48
  br label %do.end

do.end:                                           ; preds = %if.end.50
  store i64 -1, i64* %retval
  br label %return

if.end.51:                                        ; preds = %if.else
  %42 = load %struct._object*, %struct._object** %temp1, align 8
  %43 = load %struct._object*, %struct._object** %offset, align 8
  %call52 = call %struct._object* @delta_subtract(%struct._object* %42, %struct._object* %43)
  store %struct._object* %call52, %struct._object** %temp2, align 8
  br label %do.body.53

do.body.53:                                       ; preds = %if.end.51
  %44 = load %struct._object*, %struct._object** %temp1, align 8
  store %struct._object* %44, %struct._object** %_py_decref_tmp54, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0
  %46 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %46, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.53
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.53
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %49(%struct._object* %50)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  %51 = load %struct._object*, %struct._object** %temp2, align 8
  %cmp65 = icmp eq %struct._object* %51, null
  br i1 %cmp65, label %if.then.67, label %if.end.80

if.then.67:                                       ; preds = %do.end.64
  br label %do.body.68

do.body.68:                                       ; preds = %if.then.67
  %52 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp69, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %54, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.74, label %if.else.75

if.then.74:                                       ; preds = %do.body.68
  br label %if.end.78

if.else.75:                                       ; preds = %do.body.68
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type76 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type76, align 8
  %tp_dealloc77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc77, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %57(%struct._object* %58)
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.75, %if.then.74
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  store i64 -1, i64* %retval
  br label %return

if.end.80:                                        ; preds = %do.end.64
  %59 = load %struct._object*, %struct._object** %temp2, align 8
  %call81 = call i64 @PyObject_Hash(%struct._object* %59)
  %60 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %hashcode82 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %60, i32 0, i32 1
  store i64 %call81, i64* %hashcode82, align 8
  br label %do.body.83

do.body.83:                                       ; preds = %if.end.80
  %61 = load %struct._object*, %struct._object** %temp2, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp84, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_refcnt85 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt85, align 8
  %dec86 = add i64 %63, -1
  store i64 %dec86, i64* %ob_refcnt85, align 8
  %cmp87 = icmp ne i64 %dec86, 0
  br i1 %cmp87, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.83
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.83
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp84, align 8
  call void %66(%struct._object* %67)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %do.end.94, %if.then.4
  br label %do.body.96

do.body.96:                                       ; preds = %if.end.95
  %68 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp97, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt98, align 8
  %dec99 = add i64 %70, -1
  store i64 %dec99, i64* %ob_refcnt98, align 8
  %cmp100 = icmp ne i64 %dec99, 0
  br i1 %cmp100, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %do.body.96
  br label %if.end.106

if.else.103:                                      ; preds = %do.body.96
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  call void %73(%struct._object* %74)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  br label %if.end.108

if.end.108:                                       ; preds = %do.end.107, %entry
  %75 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %hashcode109 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %75, i32 0, i32 1
  %76 = load i64, i64* %hashcode109, align 8
  store i64 %76, i64* %retval
  br label %return

return:                                           ; preds = %if.end.108, %do.end.79, %do.end, %if.then.2
  %77 = load i64, i64* %retval
  ret i64 %77
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_str(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._object*
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %1, %struct._Py_Identifier* @PyId_isoformat, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.110, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_richcompare(%struct._object* %self, %struct._object* %other, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %result = alloca %struct._object*, align 8
  %offset1 = alloca %struct._object*, align 8
  %offset2 = alloca %struct._object*, align 8
  %diff = alloca i32, align 4
  %delta = alloca %struct.PyDateTime_Delta*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp114 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp130 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateTimeType
  br i1 %cmp, label %if.end.18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.18, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, @PyDateTime_DateType
  br i1 %cmp3, label %if.then.8, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DateType)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.16

if.then.8:                                        ; preds = %lor.lhs.false.4, %if.then
  %8 = load i32, i32* %op.addr, align 4
  %cmp9 = icmp eq i32 %8, 2
  br i1 %cmp9, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then.8
  %9 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.8
  %10 = load i32, i32* %op.addr, align 4
  %cmp11 = icmp eq i32 %10, 3
  br i1 %cmp11, label %if.then.12, label %if.end.14

if.then.12:                                       ; preds = %if.end
  %11 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc13 = add i64 %11, 1
  store i64 %inc13, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

if.end.14:                                        ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %13 = load %struct._object*, %struct._object** %other.addr, align 8
  %call15 = call %struct._object* @cmperror(%struct._object* %12, %struct._object* %13)
  store %struct._object* %call15, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %lor.lhs.false.4
  %14 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc17 = add i64 %14, 1
  store i64 %inc17, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %lor.lhs.false, %entry
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %16, i32 0, i32 2
  %17 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %17 to i32
  %tobool19 = icmp ne i32 %conv, 0
  br i1 %tobool19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.18
  %18 = load %struct._object*, %struct._object** %self.addr, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyDateTime_DateTime*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %19, i32 0, i32 4
  %20 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.18
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %20, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %21 = load %struct._object*, %struct._object** %other.addr, align 8
  %22 = bitcast %struct._object* %21 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo20 = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %22, i32 0, i32 2
  %23 = load i8, i8* %hastzinfo20, align 1
  %conv21 = sext i8 %23 to i32
  %tobool22 = icmp ne i32 %conv21, 0
  br i1 %tobool22, label %cond.true.23, label %cond.false.25

cond.true.23:                                     ; preds = %cond.end
  %24 = load %struct._object*, %struct._object** %other.addr, align 8
  %25 = bitcast %struct._object* %24 to %struct.PyDateTime_DateTime*
  %tzinfo24 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %25, i32 0, i32 4
  %26 = load %struct._object*, %struct._object** %tzinfo24, align 8
  br label %cond.end.26

cond.false.25:                                    ; preds = %cond.end
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.25, %cond.true.23
  %cond27 = phi %struct._object* [ %26, %cond.true.23 ], [ @_Py_NoneStruct, %cond.false.25 ]
  %cmp28 = icmp eq %struct._object* %cond, %cond27
  br i1 %cmp28, label %if.then.30, label %if.end.35

if.then.30:                                       ; preds = %cond.end.26
  %27 = load %struct._object*, %struct._object** %self.addr, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyDateTime_DateTime*
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %28, i32 0, i32 3
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %data, i32 0, i32 0
  %29 = load %struct._object*, %struct._object** %other.addr, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyDateTime_DateTime*
  %data31 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %30, i32 0, i32 3
  %arraydecay32 = getelementptr inbounds [10 x i8], [10 x i8]* %data31, i32 0, i32 0
  %call33 = call i32 @memcmp(i8* %arraydecay, i8* %arraydecay32, i64 10) #6
  store i32 %call33, i32* %diff, align 4
  %31 = load i32, i32* %diff, align 4
  %32 = load i32, i32* %op.addr, align 4
  %call34 = call %struct._object* @diff_to_bool(i32 %31, i32 %32)
  store %struct._object* %call34, %struct._object** %retval
  br label %return

if.end.35:                                        ; preds = %cond.end.26
  %33 = load %struct._object*, %struct._object** %self.addr, align 8
  %call36 = call %struct._object* @datetime_utcoffset(%struct._object* %33, %struct._object* null)
  store %struct._object* %call36, %struct._object** %offset1, align 8
  %34 = load %struct._object*, %struct._object** %offset1, align 8
  %cmp37 = icmp eq %struct._object* %34, null
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.35
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %if.end.35
  %35 = load %struct._object*, %struct._object** %other.addr, align 8
  %call41 = call %struct._object* @datetime_utcoffset(%struct._object* %35, %struct._object* null)
  store %struct._object* %call41, %struct._object** %offset2, align 8
  %36 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp42 = icmp eq %struct._object* %36, null
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.40
  br label %done

if.end.45:                                        ; preds = %if.end.40
  %37 = load %struct._object*, %struct._object** %offset1, align 8
  %38 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp46 = icmp eq %struct._object* %37, %38
  br i1 %cmp46, label %if.then.67, label %lor.lhs.false.48

lor.lhs.false.48:                                 ; preds = %if.end.45
  %39 = load %struct._object*, %struct._object** %offset1, align 8
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8
  %cmp50 = icmp eq %struct._typeobject* %40, @PyDateTime_DeltaType
  br i1 %cmp50, label %land.lhs.true, label %lor.lhs.false.52

lor.lhs.false.52:                                 ; preds = %lor.lhs.false.48
  %41 = load %struct._object*, %struct._object** %offset1, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %call54 = call i32 @PyType_IsSubtype(%struct._typeobject* %42, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false.52, %lor.lhs.false.48
  %43 = load %struct._object*, %struct._object** %offset2, align 8
  %ob_type56 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type56, align 8
  %cmp57 = icmp eq %struct._typeobject* %44, @PyDateTime_DeltaType
  br i1 %cmp57, label %land.lhs.true.63, label %lor.lhs.false.59

lor.lhs.false.59:                                 ; preds = %land.lhs.true
  %45 = load %struct._object*, %struct._object** %offset2, align 8
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8
  %call61 = call i32 @PyType_IsSubtype(%struct._typeobject* %46, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %land.lhs.true.63, label %if.else

land.lhs.true.63:                                 ; preds = %lor.lhs.false.59, %land.lhs.true
  %47 = load %struct._object*, %struct._object** %offset1, align 8
  %48 = load %struct._object*, %struct._object** %offset2, align 8
  %call64 = call i32 @delta_cmp(%struct._object* %47, %struct._object* %48)
  %cmp65 = icmp eq i32 %call64, 0
  br i1 %cmp65, label %if.then.67, label %if.else

if.then.67:                                       ; preds = %land.lhs.true.63, %if.end.45
  %49 = load %struct._object*, %struct._object** %self.addr, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyDateTime_DateTime*
  %data68 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %50, i32 0, i32 3
  %arraydecay69 = getelementptr inbounds [10 x i8], [10 x i8]* %data68, i32 0, i32 0
  %51 = load %struct._object*, %struct._object** %other.addr, align 8
  %52 = bitcast %struct._object* %51 to %struct.PyDateTime_DateTime*
  %data70 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %52, i32 0, i32 3
  %arraydecay71 = getelementptr inbounds [10 x i8], [10 x i8]* %data70, i32 0, i32 0
  %call72 = call i32 @memcmp(i8* %arraydecay69, i8* %arraydecay71, i64 10) #6
  store i32 %call72, i32* %diff, align 4
  %53 = load i32, i32* %diff, align 4
  %54 = load i32, i32* %op.addr, align 4
  %call73 = call %struct._object* @diff_to_bool(i32 %53, i32 %54)
  store %struct._object* %call73, %struct._object** %result, align 8
  br label %if.end.112

if.else:                                          ; preds = %land.lhs.true.63, %lor.lhs.false.59, %lor.lhs.false.52
  %55 = load %struct._object*, %struct._object** %offset1, align 8
  %cmp74 = icmp ne %struct._object* %55, @_Py_NoneStruct
  br i1 %cmp74, label %land.lhs.true.76, label %if.else.96

land.lhs.true.76:                                 ; preds = %if.else
  %56 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp77 = icmp ne %struct._object* %56, @_Py_NoneStruct
  br i1 %cmp77, label %if.then.79, label %if.else.96

if.then.79:                                       ; preds = %land.lhs.true.76
  %57 = load %struct._object*, %struct._object** %self.addr, align 8
  %58 = load %struct._object*, %struct._object** %other.addr, align 8
  %call80 = call %struct._object* @datetime_subtract(%struct._object* %57, %struct._object* %58)
  %59 = bitcast %struct._object* %call80 to %struct.PyDateTime_Delta*
  store %struct.PyDateTime_Delta* %59, %struct.PyDateTime_Delta** %delta, align 8
  %60 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %cmp81 = icmp eq %struct.PyDateTime_Delta* %60, null
  br i1 %cmp81, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %if.then.79
  br label %done

if.end.84:                                        ; preds = %if.then.79
  %61 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %61, i32 0, i32 2
  %62 = load i32, i32* %days, align 4
  store i32 %62, i32* %diff, align 4
  %63 = load i32, i32* %diff, align 4
  %cmp85 = icmp eq i32 %63, 0
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.end.84
  %64 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %64, i32 0, i32 3
  %65 = load i32, i32* %seconds, align 4
  %66 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %66, i32 0, i32 4
  %67 = load i32, i32* %microseconds, align 4
  %or = or i32 %65, %67
  store i32 %or, i32* %diff, align 4
  br label %if.end.88

if.end.88:                                        ; preds = %if.then.87, %if.end.84
  br label %do.body

do.body:                                          ; preds = %if.end.88
  %68 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %69 = bitcast %struct.PyDateTime_Delta* %68 to %struct._object*
  store %struct._object* %69, %struct._object** %_py_decref_tmp, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %71, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp89 = icmp ne i64 %dec, 0
  br i1 %cmp89, label %if.then.91, label %if.else.92

if.then.91:                                       ; preds = %do.body
  br label %if.end.94

if.else.92:                                       ; preds = %do.body
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type93 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type93, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 4
  %74 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %74(%struct._object* %75)
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.92, %if.then.91
  br label %do.end

do.end:                                           ; preds = %if.end.94
  %76 = load i32, i32* %diff, align 4
  %77 = load i32, i32* %op.addr, align 4
  %call95 = call %struct._object* @diff_to_bool(i32 %76, i32 %77)
  store %struct._object* %call95, %struct._object** %result, align 8
  br label %if.end.111

if.else.96:                                       ; preds = %land.lhs.true.76, %if.else
  %78 = load i32, i32* %op.addr, align 4
  %cmp97 = icmp eq i32 %78, 2
  br i1 %cmp97, label %if.then.99, label %if.else.102

if.then.99:                                       ; preds = %if.else.96
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %result, align 8
  %79 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt100 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 0
  %80 = load i64, i64* %ob_refcnt100, align 8
  %inc101 = add i64 %80, 1
  store i64 %inc101, i64* %ob_refcnt100, align 8
  br label %if.end.110

if.else.102:                                      ; preds = %if.else.96
  %81 = load i32, i32* %op.addr, align 4
  %cmp103 = icmp eq i32 %81, 3
  br i1 %cmp103, label %if.then.105, label %if.else.108

if.then.105:                                      ; preds = %if.else.102
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %result, align 8
  %82 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt106, align 8
  %inc107 = add i64 %83, 1
  store i64 %inc107, i64* %ob_refcnt106, align 8
  br label %if.end.109

if.else.108:                                      ; preds = %if.else.102
  %84 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %84, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.111, i32 0, i32 0))
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.108, %if.then.105
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.109, %if.then.99
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %do.end
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.then.67
  br label %done

done:                                             ; preds = %if.end.112, %if.then.83, %if.then.44
  br label %do.body.113

do.body.113:                                      ; preds = %done
  %85 = load %struct._object*, %struct._object** %offset1, align 8
  store %struct._object* %85, %struct._object** %_py_decref_tmp114, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_refcnt115 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 0
  %87 = load i64, i64* %ob_refcnt115, align 8
  %dec116 = add i64 %87, -1
  store i64 %dec116, i64* %ob_refcnt115, align 8
  %cmp117 = icmp ne i64 %dec116, 0
  br i1 %cmp117, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %do.body.113
  br label %if.end.123

if.else.120:                                      ; preds = %do.body.113
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  %ob_type121 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type121, align 8
  %tp_dealloc122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %89, i32 0, i32 4
  %90 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc122, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp114, align 8
  call void %90(%struct._object* %91)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.120, %if.then.119
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  br label %do.body.125

do.body.125:                                      ; preds = %do.end.124
  %92 = load %struct._object*, %struct._object** %offset2, align 8
  store %struct._object* %92, %struct._object** %_py_xdecref_tmp, align 8
  %93 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp126 = icmp ne %struct._object* %93, null
  br i1 %cmp126, label %if.then.128, label %if.end.141

if.then.128:                                      ; preds = %do.body.125
  br label %do.body.129

do.body.129:                                      ; preds = %if.then.128
  %94 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %94, %struct._object** %_py_decref_tmp130, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_refcnt131 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 0
  %96 = load i64, i64* %ob_refcnt131, align 8
  %dec132 = add i64 %96, -1
  store i64 %dec132, i64* %ob_refcnt131, align 8
  %cmp133 = icmp ne i64 %dec132, 0
  br i1 %cmp133, label %if.then.135, label %if.else.136

if.then.135:                                      ; preds = %do.body.129
  br label %if.end.139

if.else.136:                                      ; preds = %do.body.129
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_type137 = getelementptr inbounds %struct._object, %struct._object* %97, i32 0, i32 1
  %98 = load %struct._typeobject*, %struct._typeobject** %ob_type137, align 8
  %tp_dealloc138 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %98, i32 0, i32 4
  %99 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc138, align 8
  %100 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  call void %99(%struct._object* %100)
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.136, %if.then.135
  br label %do.end.140

do.end.140:                                       ; preds = %if.end.139
  br label %if.end.141

if.end.141:                                       ; preds = %do.end.140, %do.body.125
  br label %do.end.142

do.end.142:                                       ; preds = %if.end.141
  %101 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %101, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.142, %if.then.39, %if.then.30, %if.end.16, %if.end.14, %if.then.12, %if.then.10
  %102 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %102
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_alloc(%struct._typeobject* %type, i64 %aware) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %aware.addr = alloca i64, align 8
  %self = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i64 %aware, i64* %aware.addr, align 8
  %0 = load i64, i64* %aware.addr, align 8
  %tobool = icmp ne i64 %0, 0
  %cond = select i1 %tobool, i64 48, i64 40
  %call = call i8* @PyObject_Malloc(i64 %cond)
  %1 = bitcast i8* %call to %struct._object*
  store %struct._object* %1, %struct._object** %self, align 8
  %2 = load %struct._object*, %struct._object** %self, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call1, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = load %struct._object*, %struct._object** %self, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  store %struct._typeobject* %3, %struct._typeobject** %ob_type, align 8
  %5 = load %struct._object*, %struct._object** %self, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  store i64 1, i64* %ob_refcnt, align 8
  %6 = load %struct._object*, %struct._object** %self, align 8
  %7 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %self = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %year = alloca i32, align 4
  %month = alloca i32, align 4
  %day = alloca i32, align 4
  %hour = alloca i32, align 4
  %minute = alloca i32, align 4
  %second = alloca i32, align 4
  %usecond = alloca i32, align 4
  %tzinfo = alloca %struct._object*, align 8
  %me = alloca %struct.PyDateTime_DateTime*, align 8
  %aware = alloca i8, align 1
  %pdata = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %self, align 8
  store i32 0, i32* %hour, align 4
  store i32 0, i32* %minute, align 4
  store i32 0, i32* %second, align 4
  store i32 0, i32* %usecond, align 4
  store %struct._object* @_Py_NoneStruct, %struct._object** %tzinfo, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %cmp = icmp sge i64 %2, 1
  br i1 %cmp, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size1, align 8
  %cmp2 = icmp sle i64 %5, 2
  br i1 %cmp2, label %land.lhs.true.3, label %if.end.36

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** %args.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %7, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %8 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %8, %struct._object** %state, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 19
  %10 = load i64, i64* %tp_flags, align 8
  %and = and i64 %10, 134217728
  %cmp4 = icmp ne i64 %and, 0
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.36

land.lhs.true.5:                                  ; preds = %land.lhs.true.3
  %11 = load %struct._object*, %struct._object** %state, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1
  %13 = load i64, i64* %ob_size6, align 8
  %cmp7 = icmp eq i64 %13, 10
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.36

land.lhs.true.8:                                  ; preds = %land.lhs.true.5
  %14 = load %struct._object*, %struct._object** %state, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %15, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %arrayidx9 = getelementptr i8, i8* %arraydecay, i64 2
  %16 = load i8, i8* %arrayidx9, align 1
  %conv = sext i8 %16 to i32
  %sub = sub i32 %conv, 1
  %cmp10 = icmp ult i32 %sub, 12
  br i1 %cmp10, label %if.then, label %if.end.36

if.then:                                          ; preds = %land.lhs.true.8
  %17 = load %struct._object*, %struct._object** %args.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1
  %19 = load i64, i64* %ob_size12, align 8
  %cmp13 = icmp eq i64 %19, 2
  br i1 %cmp13, label %if.then.15, label %if.end.21

if.then.15:                                       ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %args.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyTupleObject*
  %ob_item16 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %21, i32 0, i32 1
  %arrayidx17 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item16, i32 0, i64 1
  %22 = load %struct._object*, %struct._object** %arrayidx17, align 8
  store %struct._object* %22, %struct._object** %tzinfo, align 8
  %23 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call = call i32 @check_tzinfo_subclass(%struct._object* %23)
  %cmp18 = icmp slt i32 %call, 0
  br i1 %cmp18, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %if.then.15
  %24 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.167, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.15
  br label %if.end.21

if.end.21:                                        ; preds = %if.end, %if.then
  %25 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp22 = icmp ne %struct._object* %25, @_Py_NoneStruct
  %conv23 = zext i1 %cmp22 to i32
  %conv24 = trunc i32 %conv23 to i8
  store i8 %conv24, i8* %aware, align 1
  %26 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 36
  %27 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %28 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %29 = load i8, i8* %aware, align 1
  %conv25 = sext i8 %29 to i64
  %call26 = call %struct._object* %27(%struct._typeobject* %28, i64 %conv25)
  %30 = bitcast %struct._object* %call26 to %struct.PyDateTime_DateTime*
  store %struct.PyDateTime_DateTime* %30, %struct.PyDateTime_DateTime** %me, align 8
  %31 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %me, align 8
  %cmp27 = icmp ne %struct.PyDateTime_DateTime* %31, null
  br i1 %cmp27, label %if.then.29, label %if.end.35

if.then.29:                                       ; preds = %if.end.21
  %32 = load %struct._object*, %struct._object** %state, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyBytesObject*
  %ob_sval30 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %33, i32 0, i32 2
  %arraydecay31 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval30, i32 0, i32 0
  store i8* %arraydecay31, i8** %pdata, align 8
  %34 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %me, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %34, i32 0, i32 3
  %35 = bitcast [10 x i8]* %data to i8*
  %36 = load i8*, i8** %pdata, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 10, i32 1, i1 false)
  %37 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %me, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %37, i32 0, i32 1
  store i64 -1, i64* %hashcode, align 8
  %38 = load i8, i8* %aware, align 1
  %39 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %me, align 8
  %hastzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %39, i32 0, i32 2
  store i8 %38, i8* %hastzinfo, align 1
  %40 = load i8, i8* %aware, align 1
  %tobool = icmp ne i8 %40, 0
  br i1 %tobool, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %if.then.29
  %41 = load %struct._object*, %struct._object** %tzinfo, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %42, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %43 = load %struct._object*, %struct._object** %tzinfo, align 8
  %44 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %me, align 8
  %tzinfo33 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %44, i32 0, i32 4
  store %struct._object* %43, %struct._object** %tzinfo33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %if.then.29
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.21
  %45 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %me, align 8
  %46 = bitcast %struct.PyDateTime_DateTime* %45 to %struct._object*
  store %struct._object* %46, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %land.lhs.true.8, %land.lhs.true.5, %land.lhs.true.3, %land.lhs.true, %entry
  %47 = load %struct._object*, %struct._object** %args.addr, align 8
  %48 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call37 = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %47, %struct._object* %48, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.168, i32 0, i32 0), i8** getelementptr inbounds ([9 x i8*], [9 x i8*]* @datetime_kws, i32 0, i32 0), i32* %year, i32* %month, i32* %day, i32* %hour, i32* %minute, i32* %second, i32* %usecond, %struct._object** %tzinfo)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.39, label %if.end.56

if.then.39:                                       ; preds = %if.end.36
  %49 = load i32, i32* %year, align 4
  %50 = load i32, i32* %month, align 4
  %51 = load i32, i32* %day, align 4
  %call40 = call i32 @check_date_args(i32 %49, i32 %50, i32 %51)
  %cmp41 = icmp slt i32 %call40, 0
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.then.39
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.44:                                        ; preds = %if.then.39
  %52 = load i32, i32* %hour, align 4
  %53 = load i32, i32* %minute, align 4
  %54 = load i32, i32* %second, align 4
  %55 = load i32, i32* %usecond, align 4
  %call45 = call i32 @check_time_args(i32 %52, i32 %53, i32 %54, i32 %55)
  %cmp46 = icmp slt i32 %call45, 0
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.end.44
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.49:                                        ; preds = %if.end.44
  %56 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call50 = call i32 @check_tzinfo_subclass(%struct._object* %56)
  %cmp51 = icmp slt i32 %call50, 0
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.54:                                        ; preds = %if.end.49
  %57 = load i32, i32* %year, align 4
  %58 = load i32, i32* %month, align 4
  %59 = load i32, i32* %day, align 4
  %60 = load i32, i32* %hour, align 4
  %61 = load i32, i32* %minute, align 4
  %62 = load i32, i32* %second, align 4
  %63 = load i32, i32* %usecond, align 4
  %64 = load %struct._object*, %struct._object** %tzinfo, align 8
  %65 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call55 = call %struct._object* @new_datetime_ex(i32 %57, i32 %58, i32 %59, i32 %60, i32 %61, i32 %62, i32 %63, %struct._object* %64, %struct._typeobject* %65)
  store %struct._object* %call55, %struct._object** %self, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.54, %if.end.36
  %66 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %66, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.56, %if.then.53, %if.then.48, %if.then.43, %if.end.35, %if.then.20
  %67 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %67
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @append_keyword_tzinfo(%struct._object* %repr, %struct._object* %tzinfo) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %repr.addr = alloca %struct._object*, align 8
  %tzinfo.addr = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp9 = alloca %struct._object*, align 8
  store %struct._object* %repr, %struct._object** %repr.addr, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %repr.addr, align 8
  store %struct._object* %1, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %repr.addr, align 8
  %3 = load %struct._object*, %struct._object** %repr.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %4, i32 0, i32 1
  %5 = load i64, i64* %length, align 8
  %sub = sub i64 %5, 1
  %call = call %struct._object* @PyUnicode_Substring(%struct._object* %2, i64 0, i64 %sub)
  store %struct._object* %call, %struct._object** %temp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %repr.addr, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp1 = icmp ne i64 %dec, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end.3

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end.3
  %13 = load %struct._object*, %struct._object** %temp, align 8
  %cmp4 = icmp eq %struct._object* %13, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %do.end
  %14 = load %struct._object*, %struct._object** %temp, align 8
  %15 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %call7 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.107, i32 0, i32 0), %struct._object* %14, %struct._object* %15)
  store %struct._object* %call7, %struct._object** %repr.addr, align 8
  br label %do.body.8

do.body.8:                                        ; preds = %if.end.6
  %16 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp9, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_refcnt10 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt10, align 8
  %dec11 = add i64 %18, -1
  store i64 %dec11, i64* %ob_refcnt10, align 8
  %cmp12 = icmp ne i64 %dec11, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.8
  br label %if.end.17

if.else.14:                                       ; preds = %do.body.8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_dealloc16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc16, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  call void %21(%struct._object* %22)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.14, %if.then.13
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  %23 = load %struct._object*, %struct._object** %repr.addr, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.18, %if.then.5, %if.then
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

declare %struct._object* @PyUnicode_Substring(%struct._object*, i64, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_add(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateTimeType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, @PyDateTime_DeltaType
  br i1 %cmp3, label %if.then.8, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end

if.then.8:                                        ; preds = %lor.lhs.false.4, %if.then
  %8 = load %struct._object*, %struct._object** %left.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_DateTime*
  %10 = load %struct._object*, %struct._object** %right.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDateTime_Delta*
  %call9 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %9, %struct.PyDateTime_Delta* %11, i32 1)
  store %struct._object* %call9, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.4
  br label %if.end.19

if.else:                                          ; preds = %lor.lhs.false
  %12 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %cmp11 = icmp eq %struct._typeobject* %13, @PyDateTime_DeltaType
  br i1 %cmp11, label %if.then.16, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %if.else
  %14 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %call14 = call i32 @PyType_IsSubtype(%struct._typeobject* %15, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %lor.lhs.false.12, %if.else
  %16 = load %struct._object*, %struct._object** %right.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyDateTime_DateTime*
  %18 = load %struct._object*, %struct._object** %left.addr, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyDateTime_Delta*
  %call17 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %17, %struct.PyDateTime_Delta* %19, i32 1)
  store %struct._object* %call17, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %lor.lhs.false.12
  br label %if.end.19

if.end.19:                                        ; preds = %if.end.18, %if.end
  %20 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %20, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.16, %if.then.8
  %21 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %21
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_subtract(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %offset1 = alloca %struct._object*, align 8
  %offset2 = alloca %struct._object*, align 8
  %offdiff = alloca %struct._object*, align 8
  %delta_d = alloca i32, align 4
  %delta_s = alloca i32, align 4
  %delta_us = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp47 = alloca %struct._object*, align 8
  %_py_decref_tmp59 = alloca %struct._object*, align 8
  %_py_decref_tmp83 = alloca %struct._object*, align 8
  %_py_decref_tmp95 = alloca %struct._object*, align 8
  %_py_decref_tmp109 = alloca %struct._object*, align 8
  %_py_decref_tmp121 = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp218 = alloca %struct._object*, align 8
  %_py_decref_tmp230 = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateTimeType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.254

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, @PyDateTime_DateTimeType
  br i1 %cmp3, label %if.then.8, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.else.242

if.then.8:                                        ; preds = %lor.lhs.false.4, %if.then
  store %struct._object* null, %struct._object** %offdiff, align 8
  %8 = load %struct._object*, %struct._object** %left.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %9, i32 0, i32 2
  %10 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %10 to i32
  %tobool9 = icmp ne i32 %conv, 0
  br i1 %tobool9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.8
  %11 = load %struct._object*, %struct._object** %left.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDateTime_DateTime*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %12, i32 0, i32 4
  %13 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %13, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %14 = load %struct._object*, %struct._object** %right.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo10 = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %15, i32 0, i32 2
  %16 = load i8, i8* %hastzinfo10, align 1
  %conv11 = sext i8 %16 to i32
  %tobool12 = icmp ne i32 %conv11, 0
  br i1 %tobool12, label %cond.true.13, label %cond.false.15

cond.true.13:                                     ; preds = %cond.end
  %17 = load %struct._object*, %struct._object** %right.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_DateTime*
  %tzinfo14 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %18, i32 0, i32 4
  %19 = load %struct._object*, %struct._object** %tzinfo14, align 8
  br label %cond.end.16

cond.false.15:                                    ; preds = %cond.end
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.13
  %cond17 = phi %struct._object* [ %19, %cond.true.13 ], [ @_Py_NoneStruct, %cond.false.15 ]
  %cmp18 = icmp eq %struct._object* %cond, %cond17
  br i1 %cmp18, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %cond.end.16
  store %struct._object* @_Py_NoneStruct, %struct._object** %offset1, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %offset2, align 8
  %20 = load %struct._object*, %struct._object** %offset1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %21, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %22 = load %struct._object*, %struct._object** %offset2, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt21, align 8
  %inc22 = add i64 %23, 1
  store i64 %inc22, i64* %ob_refcnt21, align 8
  br label %if.end.71

if.else:                                          ; preds = %cond.end.16
  %24 = load %struct._object*, %struct._object** %left.addr, align 8
  %call23 = call %struct._object* @datetime_utcoffset(%struct._object* %24, %struct._object* null)
  store %struct._object* %call23, %struct._object** %offset1, align 8
  %25 = load %struct._object*, %struct._object** %offset1, align 8
  %cmp24 = icmp eq %struct._object* %25, null
  br i1 %cmp24, label %if.then.26, label %if.end

if.then.26:                                       ; preds = %if.else
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.else
  %26 = load %struct._object*, %struct._object** %right.addr, align 8
  %call27 = call %struct._object* @datetime_utcoffset(%struct._object* %26, %struct._object* null)
  store %struct._object* %call27, %struct._object** %offset2, align 8
  %27 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp28 = icmp eq %struct._object* %27, null
  br i1 %cmp28, label %if.then.30, label %if.end.38

if.then.30:                                       ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.30
  %28 = load %struct._object*, %struct._object** %offset1, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt31, align 8
  %dec = add i64 %30, -1
  store i64 %dec, i64* %ob_refcnt31, align 8
  %cmp32 = icmp ne i64 %dec, 0
  br i1 %cmp32, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body
  br label %if.end.37

if.else.35:                                       ; preds = %do.body
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %33(%struct._object* %34)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end

do.end:                                           ; preds = %if.end.37
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.38:                                        ; preds = %if.end
  %35 = load %struct._object*, %struct._object** %offset1, align 8
  %cmp39 = icmp ne %struct._object* %35, @_Py_NoneStruct
  %conv40 = zext i1 %cmp39 to i32
  %36 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp41 = icmp ne %struct._object* %36, @_Py_NoneStruct
  %conv42 = zext i1 %cmp41 to i32
  %cmp43 = icmp ne i32 %conv40, %conv42
  br i1 %cmp43, label %if.then.45, label %if.end.70

if.then.45:                                       ; preds = %if.end.38
  %37 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %37, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.108, i32 0, i32 0))
  br label %do.body.46

do.body.46:                                       ; preds = %if.then.45
  %38 = load %struct._object*, %struct._object** %offset1, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp47, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_refcnt48 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt48, align 8
  %dec49 = add i64 %40, -1
  store i64 %dec49, i64* %ob_refcnt48, align 8
  %cmp50 = icmp ne i64 %dec49, 0
  br i1 %cmp50, label %if.then.52, label %if.else.53

if.then.52:                                       ; preds = %do.body.46
  br label %if.end.56

if.else.53:                                       ; preds = %do.body.46
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  %ob_type54 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type54, align 8
  %tp_dealloc55 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc55, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp47, align 8
  call void %43(%struct._object* %44)
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.53, %if.then.52
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  br label %do.body.58

do.body.58:                                       ; preds = %do.end.57
  %45 = load %struct._object*, %struct._object** %offset2, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp59, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt60, align 8
  %dec61 = add i64 %47, -1
  store i64 %dec61, i64* %ob_refcnt60, align 8
  %cmp62 = icmp ne i64 %dec61, 0
  br i1 %cmp62, label %if.then.64, label %if.else.65

if.then.64:                                       ; preds = %do.body.58
  br label %if.end.68

if.else.65:                                       ; preds = %do.body.58
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_dealloc67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc67, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  call void %50(%struct._object* %51)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.65, %if.then.64
  br label %do.end.69

do.end.69:                                        ; preds = %if.end.68
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.70:                                        ; preds = %if.end.38
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.then.20
  %52 = load %struct._object*, %struct._object** %offset1, align 8
  %53 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp72 = icmp ne %struct._object* %52, %53
  br i1 %cmp72, label %land.lhs.true, label %if.end.107

land.lhs.true:                                    ; preds = %if.end.71
  %54 = load %struct._object*, %struct._object** %offset1, align 8
  %55 = load %struct._object*, %struct._object** %offset2, align 8
  %call74 = call i32 @delta_cmp(%struct._object* %54, %struct._object* %55)
  %cmp75 = icmp ne i32 %call74, 0
  br i1 %cmp75, label %if.then.77, label %if.end.107

if.then.77:                                       ; preds = %land.lhs.true
  %56 = load %struct._object*, %struct._object** %offset1, align 8
  %57 = load %struct._object*, %struct._object** %offset2, align 8
  %call78 = call %struct._object* @delta_subtract(%struct._object* %56, %struct._object* %57)
  store %struct._object* %call78, %struct._object** %offdiff, align 8
  %58 = load %struct._object*, %struct._object** %offdiff, align 8
  %cmp79 = icmp eq %struct._object* %58, null
  br i1 %cmp79, label %if.then.81, label %if.end.106

if.then.81:                                       ; preds = %if.then.77
  br label %do.body.82

do.body.82:                                       ; preds = %if.then.81
  %59 = load %struct._object*, %struct._object** %offset1, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp83, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_refcnt84 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt84, align 8
  %dec85 = add i64 %61, -1
  store i64 %dec85, i64* %ob_refcnt84, align 8
  %cmp86 = icmp ne i64 %dec85, 0
  br i1 %cmp86, label %if.then.88, label %if.else.89

if.then.88:                                       ; preds = %do.body.82
  br label %if.end.92

if.else.89:                                       ; preds = %do.body.82
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_type90 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type90, align 8
  %tp_dealloc91 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc91, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  call void %64(%struct._object* %65)
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.89, %if.then.88
  br label %do.end.93

do.end.93:                                        ; preds = %if.end.92
  br label %do.body.94

do.body.94:                                       ; preds = %do.end.93
  %66 = load %struct._object*, %struct._object** %offset2, align 8
  store %struct._object* %66, %struct._object** %_py_decref_tmp95, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  %ob_refcnt96 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt96, align 8
  %dec97 = add i64 %68, -1
  store i64 %dec97, i64* %ob_refcnt96, align 8
  %cmp98 = icmp ne i64 %dec97, 0
  br i1 %cmp98, label %if.then.100, label %if.else.101

if.then.100:                                      ; preds = %do.body.94
  br label %if.end.104

if.else.101:                                      ; preds = %do.body.94
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  %ob_type102 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type102, align 8
  %tp_dealloc103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc103, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  call void %71(%struct._object* %72)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.101, %if.then.100
  br label %do.end.105

do.end.105:                                       ; preds = %if.end.104
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.106:                                       ; preds = %if.then.77
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %land.lhs.true, %if.end.71
  br label %do.body.108

do.body.108:                                      ; preds = %if.end.107
  %73 = load %struct._object*, %struct._object** %offset1, align 8
  store %struct._object* %73, %struct._object** %_py_decref_tmp109, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  %ob_refcnt110 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0
  %75 = load i64, i64* %ob_refcnt110, align 8
  %dec111 = add i64 %75, -1
  store i64 %dec111, i64* %ob_refcnt110, align 8
  %cmp112 = icmp ne i64 %dec111, 0
  br i1 %cmp112, label %if.then.114, label %if.else.115

if.then.114:                                      ; preds = %do.body.108
  br label %if.end.118

if.else.115:                                      ; preds = %do.body.108
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  %ob_type116 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type116, align 8
  %tp_dealloc117 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc117, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp109, align 8
  call void %78(%struct._object* %79)
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.115, %if.then.114
  br label %do.end.119

do.end.119:                                       ; preds = %if.end.118
  br label %do.body.120

do.body.120:                                      ; preds = %do.end.119
  %80 = load %struct._object*, %struct._object** %offset2, align 8
  store %struct._object* %80, %struct._object** %_py_decref_tmp121, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  %ob_refcnt122 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 0
  %82 = load i64, i64* %ob_refcnt122, align 8
  %dec123 = add i64 %82, -1
  store i64 %dec123, i64* %ob_refcnt122, align 8
  %cmp124 = icmp ne i64 %dec123, 0
  br i1 %cmp124, label %if.then.126, label %if.else.127

if.then.126:                                      ; preds = %do.body.120
  br label %if.end.130

if.else.127:                                      ; preds = %do.body.120
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  %ob_type128 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 1
  %84 = load %struct._typeobject*, %struct._typeobject** %ob_type128, align 8
  %tp_dealloc129 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %84, i32 0, i32 4
  %85 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc129, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  call void %85(%struct._object* %86)
  br label %if.end.130

if.end.130:                                       ; preds = %if.else.127, %if.then.126
  br label %do.end.131

do.end.131:                                       ; preds = %if.end.130
  %87 = load %struct._object*, %struct._object** %left.addr, align 8
  %88 = bitcast %struct._object* %87 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %88, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %89 = load i8, i8* %arrayidx, align 1
  %conv132 = zext i8 %89 to i32
  %shl = shl i32 %conv132, 8
  %90 = load %struct._object*, %struct._object** %left.addr, align 8
  %91 = bitcast %struct._object* %90 to %struct.PyDateTime_Date*
  %data133 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %91, i32 0, i32 3
  %arrayidx134 = getelementptr [4 x i8], [4 x i8]* %data133, i32 0, i64 1
  %92 = load i8, i8* %arrayidx134, align 1
  %conv135 = zext i8 %92 to i32
  %or = or i32 %shl, %conv135
  %93 = load %struct._object*, %struct._object** %left.addr, align 8
  %94 = bitcast %struct._object* %93 to %struct.PyDateTime_Date*
  %data136 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %94, i32 0, i32 3
  %arrayidx137 = getelementptr [4 x i8], [4 x i8]* %data136, i32 0, i64 2
  %95 = load i8, i8* %arrayidx137, align 1
  %conv138 = zext i8 %95 to i32
  %96 = load %struct._object*, %struct._object** %left.addr, align 8
  %97 = bitcast %struct._object* %96 to %struct.PyDateTime_Date*
  %data139 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %97, i32 0, i32 3
  %arrayidx140 = getelementptr [4 x i8], [4 x i8]* %data139, i32 0, i64 3
  %98 = load i8, i8* %arrayidx140, align 1
  %conv141 = zext i8 %98 to i32
  %call142 = call i32 @ymd_to_ord(i32 %or, i32 %conv138, i32 %conv141)
  %99 = load %struct._object*, %struct._object** %right.addr, align 8
  %100 = bitcast %struct._object* %99 to %struct.PyDateTime_Date*
  %data143 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %100, i32 0, i32 3
  %arrayidx144 = getelementptr [4 x i8], [4 x i8]* %data143, i32 0, i64 0
  %101 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %101 to i32
  %shl146 = shl i32 %conv145, 8
  %102 = load %struct._object*, %struct._object** %right.addr, align 8
  %103 = bitcast %struct._object* %102 to %struct.PyDateTime_Date*
  %data147 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %103, i32 0, i32 3
  %arrayidx148 = getelementptr [4 x i8], [4 x i8]* %data147, i32 0, i64 1
  %104 = load i8, i8* %arrayidx148, align 1
  %conv149 = zext i8 %104 to i32
  %or150 = or i32 %shl146, %conv149
  %105 = load %struct._object*, %struct._object** %right.addr, align 8
  %106 = bitcast %struct._object* %105 to %struct.PyDateTime_Date*
  %data151 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %106, i32 0, i32 3
  %arrayidx152 = getelementptr [4 x i8], [4 x i8]* %data151, i32 0, i64 2
  %107 = load i8, i8* %arrayidx152, align 1
  %conv153 = zext i8 %107 to i32
  %108 = load %struct._object*, %struct._object** %right.addr, align 8
  %109 = bitcast %struct._object* %108 to %struct.PyDateTime_Date*
  %data154 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %109, i32 0, i32 3
  %arrayidx155 = getelementptr [4 x i8], [4 x i8]* %data154, i32 0, i64 3
  %110 = load i8, i8* %arrayidx155, align 1
  %conv156 = zext i8 %110 to i32
  %call157 = call i32 @ymd_to_ord(i32 %or150, i32 %conv153, i32 %conv156)
  %sub = sub i32 %call142, %call157
  store i32 %sub, i32* %delta_d, align 4
  %111 = load %struct._object*, %struct._object** %left.addr, align 8
  %112 = bitcast %struct._object* %111 to %struct.PyDateTime_DateTime*
  %data158 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %112, i32 0, i32 3
  %arrayidx159 = getelementptr [10 x i8], [10 x i8]* %data158, i32 0, i64 4
  %113 = load i8, i8* %arrayidx159, align 1
  %conv160 = zext i8 %113 to i32
  %114 = load %struct._object*, %struct._object** %right.addr, align 8
  %115 = bitcast %struct._object* %114 to %struct.PyDateTime_DateTime*
  %data161 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %115, i32 0, i32 3
  %arrayidx162 = getelementptr [10 x i8], [10 x i8]* %data161, i32 0, i64 4
  %116 = load i8, i8* %arrayidx162, align 1
  %conv163 = zext i8 %116 to i32
  %sub164 = sub i32 %conv160, %conv163
  %mul = mul i32 %sub164, 3600
  %117 = load %struct._object*, %struct._object** %left.addr, align 8
  %118 = bitcast %struct._object* %117 to %struct.PyDateTime_DateTime*
  %data165 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %118, i32 0, i32 3
  %arrayidx166 = getelementptr [10 x i8], [10 x i8]* %data165, i32 0, i64 5
  %119 = load i8, i8* %arrayidx166, align 1
  %conv167 = zext i8 %119 to i32
  %120 = load %struct._object*, %struct._object** %right.addr, align 8
  %121 = bitcast %struct._object* %120 to %struct.PyDateTime_DateTime*
  %data168 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %121, i32 0, i32 3
  %arrayidx169 = getelementptr [10 x i8], [10 x i8]* %data168, i32 0, i64 5
  %122 = load i8, i8* %arrayidx169, align 1
  %conv170 = zext i8 %122 to i32
  %sub171 = sub i32 %conv167, %conv170
  %mul172 = mul i32 %sub171, 60
  %add = add i32 %mul, %mul172
  %123 = load %struct._object*, %struct._object** %left.addr, align 8
  %124 = bitcast %struct._object* %123 to %struct.PyDateTime_DateTime*
  %data173 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %124, i32 0, i32 3
  %arrayidx174 = getelementptr [10 x i8], [10 x i8]* %data173, i32 0, i64 6
  %125 = load i8, i8* %arrayidx174, align 1
  %conv175 = zext i8 %125 to i32
  %126 = load %struct._object*, %struct._object** %right.addr, align 8
  %127 = bitcast %struct._object* %126 to %struct.PyDateTime_DateTime*
  %data176 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %127, i32 0, i32 3
  %arrayidx177 = getelementptr [10 x i8], [10 x i8]* %data176, i32 0, i64 6
  %128 = load i8, i8* %arrayidx177, align 1
  %conv178 = zext i8 %128 to i32
  %sub179 = sub i32 %conv175, %conv178
  %add180 = add i32 %add, %sub179
  store i32 %add180, i32* %delta_s, align 4
  %129 = load %struct._object*, %struct._object** %left.addr, align 8
  %130 = bitcast %struct._object* %129 to %struct.PyDateTime_DateTime*
  %data181 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %130, i32 0, i32 3
  %arrayidx182 = getelementptr [10 x i8], [10 x i8]* %data181, i32 0, i64 7
  %131 = load i8, i8* %arrayidx182, align 1
  %conv183 = zext i8 %131 to i32
  %shl184 = shl i32 %conv183, 16
  %132 = load %struct._object*, %struct._object** %left.addr, align 8
  %133 = bitcast %struct._object* %132 to %struct.PyDateTime_DateTime*
  %data185 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %133, i32 0, i32 3
  %arrayidx186 = getelementptr [10 x i8], [10 x i8]* %data185, i32 0, i64 8
  %134 = load i8, i8* %arrayidx186, align 1
  %conv187 = zext i8 %134 to i32
  %shl188 = shl i32 %conv187, 8
  %or189 = or i32 %shl184, %shl188
  %135 = load %struct._object*, %struct._object** %left.addr, align 8
  %136 = bitcast %struct._object* %135 to %struct.PyDateTime_DateTime*
  %data190 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %136, i32 0, i32 3
  %arrayidx191 = getelementptr [10 x i8], [10 x i8]* %data190, i32 0, i64 9
  %137 = load i8, i8* %arrayidx191, align 1
  %conv192 = zext i8 %137 to i32
  %or193 = or i32 %or189, %conv192
  %138 = load %struct._object*, %struct._object** %right.addr, align 8
  %139 = bitcast %struct._object* %138 to %struct.PyDateTime_DateTime*
  %data194 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %139, i32 0, i32 3
  %arrayidx195 = getelementptr [10 x i8], [10 x i8]* %data194, i32 0, i64 7
  %140 = load i8, i8* %arrayidx195, align 1
  %conv196 = zext i8 %140 to i32
  %shl197 = shl i32 %conv196, 16
  %141 = load %struct._object*, %struct._object** %right.addr, align 8
  %142 = bitcast %struct._object* %141 to %struct.PyDateTime_DateTime*
  %data198 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %142, i32 0, i32 3
  %arrayidx199 = getelementptr [10 x i8], [10 x i8]* %data198, i32 0, i64 8
  %143 = load i8, i8* %arrayidx199, align 1
  %conv200 = zext i8 %143 to i32
  %shl201 = shl i32 %conv200, 8
  %or202 = or i32 %shl197, %shl201
  %144 = load %struct._object*, %struct._object** %right.addr, align 8
  %145 = bitcast %struct._object* %144 to %struct.PyDateTime_DateTime*
  %data203 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %145, i32 0, i32 3
  %arrayidx204 = getelementptr [10 x i8], [10 x i8]* %data203, i32 0, i64 9
  %146 = load i8, i8* %arrayidx204, align 1
  %conv205 = zext i8 %146 to i32
  %or206 = or i32 %or202, %conv205
  %sub207 = sub i32 %or193, %or206
  store i32 %sub207, i32* %delta_us, align 4
  %147 = load i32, i32* %delta_d, align 4
  %148 = load i32, i32* %delta_s, align 4
  %149 = load i32, i32* %delta_us, align 4
  %call208 = call %struct._object* @new_delta_ex(i32 %147, i32 %148, i32 %149, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call208, %struct._object** %result, align 8
  %150 = load %struct._object*, %struct._object** %result, align 8
  %cmp209 = icmp eq %struct._object* %150, null
  br i1 %cmp209, label %if.then.211, label %if.end.212

if.then.211:                                      ; preds = %do.end.131
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.212:                                       ; preds = %do.end.131
  %151 = load %struct._object*, %struct._object** %offdiff, align 8
  %cmp213 = icmp ne %struct._object* %151, null
  br i1 %cmp213, label %if.then.215, label %if.end.241

if.then.215:                                      ; preds = %if.end.212
  %152 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %152, %struct._object** %temp, align 8
  %153 = load %struct._object*, %struct._object** %result, align 8
  %154 = load %struct._object*, %struct._object** %offdiff, align 8
  %call216 = call %struct._object* @delta_subtract(%struct._object* %153, %struct._object* %154)
  store %struct._object* %call216, %struct._object** %result, align 8
  br label %do.body.217

do.body.217:                                      ; preds = %if.then.215
  %155 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %155, %struct._object** %_py_decref_tmp218, align 8
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp218, align 8
  %ob_refcnt219 = getelementptr inbounds %struct._object, %struct._object* %156, i32 0, i32 0
  %157 = load i64, i64* %ob_refcnt219, align 8
  %dec220 = add i64 %157, -1
  store i64 %dec220, i64* %ob_refcnt219, align 8
  %cmp221 = icmp ne i64 %dec220, 0
  br i1 %cmp221, label %if.then.223, label %if.else.224

if.then.223:                                      ; preds = %do.body.217
  br label %if.end.227

if.else.224:                                      ; preds = %do.body.217
  %158 = load %struct._object*, %struct._object** %_py_decref_tmp218, align 8
  %ob_type225 = getelementptr inbounds %struct._object, %struct._object* %158, i32 0, i32 1
  %159 = load %struct._typeobject*, %struct._typeobject** %ob_type225, align 8
  %tp_dealloc226 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %159, i32 0, i32 4
  %160 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc226, align 8
  %161 = load %struct._object*, %struct._object** %_py_decref_tmp218, align 8
  call void %160(%struct._object* %161)
  br label %if.end.227

if.end.227:                                       ; preds = %if.else.224, %if.then.223
  br label %do.end.228

do.end.228:                                       ; preds = %if.end.227
  br label %do.body.229

do.body.229:                                      ; preds = %do.end.228
  %162 = load %struct._object*, %struct._object** %offdiff, align 8
  store %struct._object* %162, %struct._object** %_py_decref_tmp230, align 8
  %163 = load %struct._object*, %struct._object** %_py_decref_tmp230, align 8
  %ob_refcnt231 = getelementptr inbounds %struct._object, %struct._object* %163, i32 0, i32 0
  %164 = load i64, i64* %ob_refcnt231, align 8
  %dec232 = add i64 %164, -1
  store i64 %dec232, i64* %ob_refcnt231, align 8
  %cmp233 = icmp ne i64 %dec232, 0
  br i1 %cmp233, label %if.then.235, label %if.else.236

if.then.235:                                      ; preds = %do.body.229
  br label %if.end.239

if.else.236:                                      ; preds = %do.body.229
  %165 = load %struct._object*, %struct._object** %_py_decref_tmp230, align 8
  %ob_type237 = getelementptr inbounds %struct._object, %struct._object* %165, i32 0, i32 1
  %166 = load %struct._typeobject*, %struct._typeobject** %ob_type237, align 8
  %tp_dealloc238 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %166, i32 0, i32 4
  %167 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc238, align 8
  %168 = load %struct._object*, %struct._object** %_py_decref_tmp230, align 8
  call void %167(%struct._object* %168)
  br label %if.end.239

if.end.239:                                       ; preds = %if.else.236, %if.then.235
  br label %do.end.240

do.end.240:                                       ; preds = %if.end.239
  br label %if.end.241

if.end.241:                                       ; preds = %do.end.240, %if.end.212
  br label %if.end.253

if.else.242:                                      ; preds = %lor.lhs.false.4
  %169 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type243 = getelementptr inbounds %struct._object, %struct._object* %169, i32 0, i32 1
  %170 = load %struct._typeobject*, %struct._typeobject** %ob_type243, align 8
  %cmp244 = icmp eq %struct._typeobject* %170, @PyDateTime_DeltaType
  br i1 %cmp244, label %if.then.250, label %lor.lhs.false.246

lor.lhs.false.246:                                ; preds = %if.else.242
  %171 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type247 = getelementptr inbounds %struct._object, %struct._object* %171, i32 0, i32 1
  %172 = load %struct._typeobject*, %struct._typeobject** %ob_type247, align 8
  %call248 = call i32 @PyType_IsSubtype(%struct._typeobject* %172, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool249 = icmp ne i32 %call248, 0
  br i1 %tobool249, label %if.then.250, label %if.end.252

if.then.250:                                      ; preds = %lor.lhs.false.246, %if.else.242
  %173 = load %struct._object*, %struct._object** %left.addr, align 8
  %174 = bitcast %struct._object* %173 to %struct.PyDateTime_DateTime*
  %175 = load %struct._object*, %struct._object** %right.addr, align 8
  %176 = bitcast %struct._object* %175 to %struct.PyDateTime_Delta*
  %call251 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %174, %struct.PyDateTime_Delta* %176, i32 -1)
  store %struct._object* %call251, %struct._object** %result, align 8
  br label %if.end.252

if.end.252:                                       ; preds = %if.then.250, %lor.lhs.false.246
  br label %if.end.253

if.end.253:                                       ; preds = %if.end.252, %if.end.241
  br label %if.end.254

if.end.254:                                       ; preds = %if.end.253, %lor.lhs.false
  %177 = load %struct._object*, %struct._object** %result, align 8
  %cmp255 = icmp eq %struct._object* %177, @_Py_NotImplementedStruct
  br i1 %cmp255, label %if.then.257, label %if.end.260

if.then.257:                                      ; preds = %if.end.254
  %178 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt258 = getelementptr inbounds %struct._object, %struct._object* %178, i32 0, i32 0
  %179 = load i64, i64* %ob_refcnt258, align 8
  %inc259 = add i64 %179, 1
  store i64 %inc259, i64* %ob_refcnt258, align 8
  br label %if.end.260

if.end.260:                                       ; preds = %if.then.257, %if.end.254
  %180 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %180, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.260, %if.then.211, %do.end.105, %do.end.69, %do.end, %if.then.26
  %181 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %181
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %date, %struct.PyDateTime_Delta* %delta, i32 %factor) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %date.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %delta.addr = alloca %struct.PyDateTime_Delta*, align 8
  %factor.addr = alloca i32, align 4
  %year = alloca i32, align 4
  %month = alloca i32, align 4
  %day = alloca i32, align 4
  %hour = alloca i32, align 4
  %minute = alloca i32, align 4
  %second = alloca i32, align 4
  %microsecond = alloca i32, align 4
  store %struct.PyDateTime_DateTime* %date, %struct.PyDateTime_DateTime** %date.addr, align 8
  store %struct.PyDateTime_Delta* %delta, %struct.PyDateTime_Delta** %delta.addr, align 8
  store i32 %factor, i32* %factor.addr, align 4
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %1, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %shl = shl i32 %conv, 8
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %4 = bitcast %struct.PyDateTime_DateTime* %3 to %struct.PyDateTime_Date*
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %5 to i32
  %or = or i32 %shl, %conv3
  store i32 %or, i32* %year, align 4
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %7 = bitcast %struct.PyDateTime_DateTime* %6 to %struct.PyDateTime_Date*
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %7, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %8 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %8 to i32
  store i32 %conv6, i32* %month, align 4
  %9 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %10 = bitcast %struct.PyDateTime_DateTime* %9 to %struct.PyDateTime_Date*
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %10, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %11 to i32
  %12 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %12, i32 0, i32 2
  %13 = load i32, i32* %days, align 4
  %14 = load i32, i32* %factor.addr, align 4
  %mul = mul i32 %13, %14
  %add = add i32 %conv9, %mul
  store i32 %add, i32* %day, align 4
  %15 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %15, i32 0, i32 3
  %arrayidx11 = getelementptr [10 x i8], [10 x i8]* %data10, i32 0, i64 4
  %16 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %16 to i32
  store i32 %conv12, i32* %hour, align 4
  %17 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %data13 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %17, i32 0, i32 3
  %arrayidx14 = getelementptr [10 x i8], [10 x i8]* %data13, i32 0, i64 5
  %18 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %18 to i32
  store i32 %conv15, i32* %minute, align 4
  %19 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %data16 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %19, i32 0, i32 3
  %arrayidx17 = getelementptr [10 x i8], [10 x i8]* %data16, i32 0, i64 6
  %20 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %20 to i32
  %21 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %21, i32 0, i32 3
  %22 = load i32, i32* %seconds, align 4
  %23 = load i32, i32* %factor.addr, align 4
  %mul19 = mul i32 %22, %23
  %add20 = add i32 %conv18, %mul19
  store i32 %add20, i32* %second, align 4
  %24 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %data21 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %24, i32 0, i32 3
  %arrayidx22 = getelementptr [10 x i8], [10 x i8]* %data21, i32 0, i64 7
  %25 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %25 to i32
  %shl24 = shl i32 %conv23, 16
  %26 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %data25 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %26, i32 0, i32 3
  %arrayidx26 = getelementptr [10 x i8], [10 x i8]* %data25, i32 0, i64 8
  %27 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %27 to i32
  %shl28 = shl i32 %conv27, 8
  %or29 = or i32 %shl24, %shl28
  %28 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %data30 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %28, i32 0, i32 3
  %arrayidx31 = getelementptr [10 x i8], [10 x i8]* %data30, i32 0, i64 9
  %29 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %29 to i32
  %or33 = or i32 %or29, %conv32
  %30 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %30, i32 0, i32 4
  %31 = load i32, i32* %microseconds, align 4
  %32 = load i32, i32* %factor.addr, align 4
  %mul34 = mul i32 %31, %32
  %add35 = add i32 %or33, %mul34
  store i32 %add35, i32* %microsecond, align 4
  %call = call i32 @normalize_datetime(i32* %year, i32* %month, i32* %day, i32* %hour, i32* %minute, i32* %second, i32* %microsecond)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %33 = load i32, i32* %year, align 4
  %34 = load i32, i32* %month, align 4
  %35 = load i32, i32* %day, align 4
  %36 = load i32, i32* %hour, align 4
  %37 = load i32, i32* %minute, align 4
  %38 = load i32, i32* %second, align 4
  %39 = load i32, i32* %microsecond, align 4
  %40 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %41 = bitcast %struct.PyDateTime_DateTime* %40 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %41, i32 0, i32 2
  %42 = load i8, i8* %hastzinfo, align 1
  %conv37 = sext i8 %42 to i32
  %tobool = icmp ne i32 %conv37, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %43 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %date.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %43, i32 0, i32 4
  %44 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %44, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %call38 = call %struct._object* @new_datetime_ex(i32 %33, i32 %34, i32 %35, i32 %36, i32 %37, i32 %38, i32 %39, %struct._object* %cond, %struct._typeobject* @PyDateTime_DateTimeType)
  store %struct._object* %call38, %struct._object** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %45 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %45
}

; Function Attrs: nounwind uwtable
define internal i32 @normalize_datetime(i32* %year, i32* %month, i32* %day, i32* %hour, i32* %minute, i32* %second, i32* %microsecond) #0 {
entry:
  %year.addr = alloca i32*, align 8
  %month.addr = alloca i32*, align 8
  %day.addr = alloca i32*, align 8
  %hour.addr = alloca i32*, align 8
  %minute.addr = alloca i32*, align 8
  %second.addr = alloca i32*, align 8
  %microsecond.addr = alloca i32*, align 8
  store i32* %year, i32** %year.addr, align 8
  store i32* %month, i32** %month.addr, align 8
  store i32* %day, i32** %day.addr, align 8
  store i32* %hour, i32** %hour.addr, align 8
  store i32* %minute, i32** %minute.addr, align 8
  store i32* %second, i32** %second.addr, align 8
  store i32* %microsecond, i32** %microsecond.addr, align 8
  %0 = load i32*, i32** %second.addr, align 8
  %1 = load i32*, i32** %microsecond.addr, align 8
  call void @normalize_pair(i32* %0, i32* %1, i32 1000000)
  %2 = load i32*, i32** %minute.addr, align 8
  %3 = load i32*, i32** %second.addr, align 8
  call void @normalize_pair(i32* %2, i32* %3, i32 60)
  %4 = load i32*, i32** %hour.addr, align 8
  %5 = load i32*, i32** %minute.addr, align 8
  call void @normalize_pair(i32* %4, i32* %5, i32 60)
  %6 = load i32*, i32** %day.addr, align 8
  %7 = load i32*, i32** %hour.addr, align 8
  call void @normalize_pair(i32* %6, i32* %7, i32 24)
  %8 = load i32*, i32** %year.addr, align 8
  %9 = load i32*, i32** %month.addr, align 8
  %10 = load i32*, i32** %day.addr, align 8
  %call = call i32 @normalize_date(i32* %8, i32* %9, i32* %10)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @normalize_pair(i32* %hi, i32* %lo, i32 %factor) #0 {
entry:
  %hi.addr = alloca i32*, align 8
  %lo.addr = alloca i32*, align 8
  %factor.addr = alloca i32, align 4
  %num_hi = alloca i32, align 4
  %new_hi = alloca i32, align 4
  store i32* %hi, i32** %hi.addr, align 8
  store i32* %lo, i32** %lo.addr, align 8
  store i32 %factor, i32* %factor.addr, align 4
  %0 = load i32*, i32** %lo.addr, align 8
  %1 = load i32, i32* %0, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32*, i32** %lo.addr, align 8
  %3 = load i32, i32* %2, align 4
  %4 = load i32, i32* %factor.addr, align 4
  %cmp1 = icmp sge i32 %3, %4
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load i32*, i32** %lo.addr, align 8
  %6 = load i32, i32* %5, align 4
  %7 = load i32, i32* %factor.addr, align 4
  %8 = load i32*, i32** %lo.addr, align 8
  %call = call i32 @divmod(i32 %6, i32 %7, i32* %8)
  store i32 %call, i32* %num_hi, align 4
  %9 = load i32*, i32** %hi.addr, align 8
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %num_hi, align 4
  %add = add i32 %10, %11
  store i32 %add, i32* %new_hi, align 4
  %12 = load i32, i32* %new_hi, align 4
  %13 = load i32*, i32** %hi.addr, align 8
  store i32 %12, i32* %13, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_utcoffset(%struct._object* %self, %struct._object* %unused) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %unused.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %unused, %struct._object** %unused.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDateTime_DateTime*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 4
  %5 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %5, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @call_utcoffset(%struct._object* %cond, %struct._object* %6)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @delta_cmp(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %diff = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDateTime_Delta*
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %1, i32 0, i32 2
  %2 = load i32, i32* %days, align 4
  %3 = load %struct._object*, %struct._object** %other.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDateTime_Delta*
  %days1 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %4, i32 0, i32 2
  %5 = load i32, i32* %days1, align 4
  %sub = sub i32 %2, %5
  store i32 %sub, i32* %diff, align 4
  %6 = load i32, i32* %diff, align 4
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDateTime_Delta*
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %8, i32 0, i32 3
  %9 = load i32, i32* %seconds, align 4
  %10 = load %struct._object*, %struct._object** %other.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDateTime_Delta*
  %seconds2 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %11, i32 0, i32 3
  %12 = load i32, i32* %seconds2, align 4
  %sub3 = sub i32 %9, %12
  store i32 %sub3, i32* %diff, align 4
  %13 = load i32, i32* %diff, align 4
  %cmp4 = icmp eq i32 %13, 0
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  %14 = load %struct._object*, %struct._object** %self.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDateTime_Delta*
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %15, i32 0, i32 4
  %16 = load i32, i32* %microseconds, align 4
  %17 = load %struct._object*, %struct._object** %other.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Delta*
  %microseconds6 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %18, i32 0, i32 4
  %19 = load i32, i32* %microseconds6, align 4
  %sub7 = sub i32 %16, %19
  store i32 %sub7, i32* %diff, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.5, %if.then
  br label %if.end.8

if.end.8:                                         ; preds = %if.end, %entry
  %20 = load i32, i32* %diff, align 4
  ret i32 %20
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_subtract(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %days = alloca i32, align 4
  %seconds = alloca i32, align 4
  %microseconds = alloca i32, align 4
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, @PyDateTime_DeltaType
  br i1 %cmp3, label %if.then, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.4, %land.lhs.true
  %8 = load %struct._object*, %struct._object** %left.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_Delta*
  %days8 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %9, i32 0, i32 2
  %10 = load i32, i32* %days8, align 4
  %11 = load %struct._object*, %struct._object** %right.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDateTime_Delta*
  %days9 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %12, i32 0, i32 2
  %13 = load i32, i32* %days9, align 4
  %sub = sub i32 %10, %13
  store i32 %sub, i32* %days, align 4
  %14 = load %struct._object*, %struct._object** %left.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDateTime_Delta*
  %seconds10 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %15, i32 0, i32 3
  %16 = load i32, i32* %seconds10, align 4
  %17 = load %struct._object*, %struct._object** %right.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Delta*
  %seconds11 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %18, i32 0, i32 3
  %19 = load i32, i32* %seconds11, align 4
  %sub12 = sub i32 %16, %19
  store i32 %sub12, i32* %seconds, align 4
  %20 = load %struct._object*, %struct._object** %left.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDateTime_Delta*
  %microseconds13 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %21, i32 0, i32 4
  %22 = load i32, i32* %microseconds13, align 4
  %23 = load %struct._object*, %struct._object** %right.addr, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyDateTime_Delta*
  %microseconds14 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %24, i32 0, i32 4
  %25 = load i32, i32* %microseconds14, align 4
  %sub15 = sub i32 %22, %25
  store i32 %sub15, i32* %microseconds, align 4
  %26 = load i32, i32* %days, align 4
  %27 = load i32, i32* %seconds, align 4
  %28 = load i32, i32* %microseconds, align 4
  %call16 = call %struct._object* @new_delta_ex(i32 %26, i32 %27, i32 %28, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call16, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.4, %lor.lhs.false
  %29 = load %struct._object*, %struct._object** %result, align 8
  %cmp17 = icmp eq %struct._object* %29, @_Py_NotImplementedStruct
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %31, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.end
  %32 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %32
}

declare i64 @PyObject_Hash(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @cmperror(%struct._object* %a, %struct._object* %b) #0 {
entry:
  %a.addr = alloca %struct._object*, align 8
  %b.addr = alloca %struct._object*, align 8
  store %struct._object* %a, %struct._object** %a.addr, align 8
  store %struct._object* %b, %struct._object** %b.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %1 = load %struct._object*, %struct._object** %a.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  %4 = load %struct._object*, %struct._object** %b.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_name2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 1
  %6 = load i8*, i8** %tp_name2, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %0, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.112, i32 0, i32 0), i8* %3, i8* %6)
  ret %struct._object* null
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_datetime_now(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwargs) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwargs.addr = alloca %struct._object*, align 8
  %return_value = alloca %struct._object*, align 8
  %tz = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwargs, %struct._object** %kwargs.addr, align 8
  store %struct._object* null, %struct._object** %return_value, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %tz, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwargs.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.140, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @datetime_datetime_now._keywords, i32 0, i32 0), %struct._object** %tz)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %exit

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = load %struct._object*, %struct._object** %tz, align 8
  %call1 = call %struct._object* @datetime_datetime_now_impl(%struct._typeobject* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %return_value, align 8
  br label %exit

exit:                                             ; preds = %if.end, %if.then
  %4 = load %struct._object*, %struct._object** %return_value, align 8
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_utcnow(%struct._object* %cls, %struct._object* %dummy) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %cls.addr, align 8
  %call = call %struct._object* @datetime_best_possible(%struct._object* %0, %struct.tm* (i64*)* @gmtime, %struct._object* @_Py_NoneStruct)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_fromtimestamp(%struct._object* %cls, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %self = alloca %struct._object*, align 8
  %timestamp = alloca %struct._object*, align 8
  %tzinfo = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %tzinfo, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.144, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @datetime_fromtimestamp.keywords, i32 0, i32 0), %struct._object** %timestamp, %struct._object** %tzinfo)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call1 = call i32 @check_tzinfo_subclass(%struct._object* %2)
  %cmp = icmp slt i32 %call1, 0
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %cls.addr, align 8
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp4 = icmp eq %struct._object* %4, @_Py_NoneStruct
  %cond = select i1 %cmp4, %struct.tm* (i64*)* @localtime, %struct.tm* (i64*)* @gmtime
  %5 = load %struct._object*, %struct._object** %timestamp, align 8
  %6 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call5 = call %struct._object* @datetime_from_timestamp(%struct._object* %3, %struct.tm* (i64*)* %cond, %struct._object* %5, %struct._object* %6)
  store %struct._object* %call5, %struct._object** %self, align 8
  %7 = load %struct._object*, %struct._object** %self, align 8
  %cmp6 = icmp ne %struct._object* %7, null
  br i1 %cmp6, label %land.lhs.true, label %if.end.13

land.lhs.true:                                    ; preds = %if.end.3
  %8 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp7 = icmp ne %struct._object* %8, @_Py_NoneStruct
  br i1 %cmp7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %land.lhs.true
  %9 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %9, %struct._object** %temp, align 8
  %10 = load %struct._object*, %struct._object** %tzinfo, align 8
  %11 = load %struct._object*, %struct._object** %self, align 8
  %call9 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %10, %struct._Py_Identifier* @PyId_fromutc, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), %struct._object* %11)
  store %struct._object* %call9, %struct._object** %self, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %12 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %land.lhs.true, %if.end.3
  %19 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.2, %if.then
  %20 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %20
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_utcfromtimestamp(%struct._object* %cls, %struct._object* %args) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %timestamp = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.145, i32 0, i32 0), %struct._object** %timestamp)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8
  %2 = load %struct._object*, %struct._object** %timestamp, align 8
  %call1 = call %struct._object* @datetime_from_timestamp(%struct._object* %1, %struct.tm* (i64*)* @gmtime, %struct._object* %2, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_strptime(%struct._object* %cls, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %string = alloca %struct._object*, align 8
  %format = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.147, i32 0, i32 0), %struct._object** %string, %struct._object** %format)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** @datetime_strptime.module, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @PyImport_ImportModuleNoBlock(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.148, i32 0, i32 0))
  store %struct._object* %call2, %struct._object** @datetime_strptime.module, align 8
  %2 = load %struct._object*, %struct._object** @datetime_strptime.module, align 8
  %cmp3 = icmp eq %struct._object* %2, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %3 = load %struct._object*, %struct._object** @datetime_strptime.module, align 8
  %4 = load %struct._object*, %struct._object** %cls.addr, align 8
  %5 = load %struct._object*, %struct._object** %string, align 8
  %6 = load %struct._object*, %struct._object** %format, align 8
  %call7 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %3, %struct._Py_Identifier* @datetime_strptime.PyId__strptime_datetime, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.149, i32 0, i32 0), %struct._object* %4, %struct._object* %5, %struct._object* %6)
  store %struct._object* %call7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.4, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_combine(%struct._object* %cls, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %date = alloca %struct._object*, align 8
  %time = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %tzinfo = alloca %struct._object*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.150, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @datetime_combine.keywords, i32 0, i32 0), %struct._typeobject* @PyDateTime_DateType, %struct._object** %date, %struct._typeobject* @PyDateTime_TimeType, %struct._object** %time)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.36

if.then:                                          ; preds = %entry
  store %struct._object* @_Py_NoneStruct, %struct._object** %tzinfo, align 8
  %2 = load %struct._object*, %struct._object** %time, align 8
  %3 = bitcast %struct._object* %2 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %3, i32 0, i32 2
  %4 = load i8, i8* %hastzinfo, align 1
  %tobool1 = icmp ne i8 %4, 0
  br i1 %tobool1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %time, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDateTime_Time*
  %tzinfo3 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %6, i32 0, i32 4
  %7 = load %struct._object*, %struct._object** %tzinfo3, align 8
  store %struct._object* %7, %struct._object** %tzinfo, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.2, %if.then
  %8 = load %struct._object*, %struct._object** %cls.addr, align 8
  %9 = load %struct._object*, %struct._object** %date, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %10, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %11 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %11 to i32
  %shl = shl i32 %conv, 8
  %12 = load %struct._object*, %struct._object** %date, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDateTime_Date*
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %13, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 1
  %14 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %14 to i32
  %or = or i32 %shl, %conv6
  %15 = load %struct._object*, %struct._object** %date, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyDateTime_Date*
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %16, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 2
  %17 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %17 to i32
  %18 = load %struct._object*, %struct._object** %date, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyDateTime_Date*
  %data10 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %19, i32 0, i32 3
  %arrayidx11 = getelementptr [4 x i8], [4 x i8]* %data10, i32 0, i64 3
  %20 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %20 to i32
  %21 = load %struct._object*, %struct._object** %time, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyDateTime_Time*
  %data13 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %22, i32 0, i32 3
  %arrayidx14 = getelementptr [6 x i8], [6 x i8]* %data13, i32 0, i64 0
  %23 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %23 to i32
  %24 = load %struct._object*, %struct._object** %time, align 8
  %25 = bitcast %struct._object* %24 to %struct.PyDateTime_Time*
  %data16 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %25, i32 0, i32 3
  %arrayidx17 = getelementptr [6 x i8], [6 x i8]* %data16, i32 0, i64 1
  %26 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %26 to i32
  %27 = load %struct._object*, %struct._object** %time, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyDateTime_Time*
  %data19 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %28, i32 0, i32 3
  %arrayidx20 = getelementptr [6 x i8], [6 x i8]* %data19, i32 0, i64 2
  %29 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %29 to i32
  %30 = load %struct._object*, %struct._object** %time, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDateTime_Time*
  %data22 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %31, i32 0, i32 3
  %arrayidx23 = getelementptr [6 x i8], [6 x i8]* %data22, i32 0, i64 3
  %32 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %32 to i32
  %shl25 = shl i32 %conv24, 16
  %33 = load %struct._object*, %struct._object** %time, align 8
  %34 = bitcast %struct._object* %33 to %struct.PyDateTime_Time*
  %data26 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %34, i32 0, i32 3
  %arrayidx27 = getelementptr [6 x i8], [6 x i8]* %data26, i32 0, i64 4
  %35 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %35 to i32
  %shl29 = shl i32 %conv28, 8
  %or30 = or i32 %shl25, %shl29
  %36 = load %struct._object*, %struct._object** %time, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDateTime_Time*
  %data31 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %37, i32 0, i32 3
  %arrayidx32 = getelementptr [6 x i8], [6 x i8]* %data31, i32 0, i64 5
  %38 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %38 to i32
  %or34 = or i32 %or30, %conv33
  %39 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call35 = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* %8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.142, i32 0, i32 0), i32 %or, i32 %conv9, i32 %conv12, i32 %conv15, i32 %conv18, i32 %conv21, i32 %or34, %struct._object* %39)
  store %struct._object* %call35, %struct._object** %result, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.end, %entry
  %40 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %40
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_getdate(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %1, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %shl = shl i32 %conv, 8
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %4 = bitcast %struct.PyDateTime_DateTime* %3 to %struct.PyDateTime_Date*
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %5 to i32
  %or = or i32 %shl, %conv3
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %7 = bitcast %struct.PyDateTime_DateTime* %6 to %struct.PyDateTime_Date*
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %7, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %8 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %8 to i32
  %9 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %10 = bitcast %struct.PyDateTime_DateTime* %9 to %struct.PyDateTime_Date*
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %10, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %11 to i32
  %call = call %struct._object* @new_date_ex(i32 %or, i32 %conv6, i32 %conv9, %struct._typeobject* @PyDateTime_DateType)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_gettime(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 4
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %2 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [10 x i8], [10 x i8]* %data1, i32 0, i64 5
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %4 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [10 x i8], [10 x i8]* %data4, i32 0, i64 6
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [10 x i8], [10 x i8]* %data7, i32 0, i64 7
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %shl = shl i32 %conv9, 16
  %8 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %8, i32 0, i32 3
  %arrayidx11 = getelementptr [10 x i8], [10 x i8]* %data10, i32 0, i64 8
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %9 to i32
  %shl13 = shl i32 %conv12, 8
  %or = or i32 %shl, %shl13
  %10 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data14 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %10, i32 0, i32 3
  %arrayidx15 = getelementptr [10 x i8], [10 x i8]* %data14, i32 0, i64 9
  %11 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %11 to i32
  %or17 = or i32 %or, %conv16
  %call = call %struct._object* @new_time_ex(i32 %conv, i32 %conv3, i32 %conv6, i32 %or17, %struct._object* @_Py_NoneStruct, %struct._typeobject* @PyDateTime_TimeType)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_gettimetz(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 4
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %2 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [10 x i8], [10 x i8]* %data1, i32 0, i64 5
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %4 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [10 x i8], [10 x i8]* %data4, i32 0, i64 6
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [10 x i8], [10 x i8]* %data7, i32 0, i64 7
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %shl = shl i32 %conv9, 16
  %8 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %8, i32 0, i32 3
  %arrayidx11 = getelementptr [10 x i8], [10 x i8]* %data10, i32 0, i64 8
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %9 to i32
  %shl13 = shl i32 %conv12, 8
  %or = or i32 %shl, %shl13
  %10 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data14 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %10, i32 0, i32 3
  %arrayidx15 = getelementptr [10 x i8], [10 x i8]* %data14, i32 0, i64 9
  %11 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %11 to i32
  %or17 = or i32 %or, %conv16
  %12 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %13 = bitcast %struct.PyDateTime_DateTime* %12 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %13, i32 0, i32 2
  %14 = load i8, i8* %hastzinfo, align 1
  %conv18 = sext i8 %14 to i32
  %tobool = icmp ne i32 %conv18, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %15 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %15, i32 0, i32 4
  %16 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %16, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %call = call %struct._object* @new_time_ex(i32 %conv, i32 %conv3, i32 %conv6, i32 %or17, %struct._object* %cond, %struct._typeobject* @PyDateTime_TimeType)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_ctime(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct.PyDateTime_Date*
  %2 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %2, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 4
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %4 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 3
  %arrayidx2 = getelementptr [10 x i8], [10 x i8]* %data1, i32 0, i64 5
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %6, i32 0, i32 3
  %arrayidx5 = getelementptr [10 x i8], [10 x i8]* %data4, i32 0, i64 6
  %7 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %7 to i32
  %call = call %struct._object* @format_ctime(%struct.PyDateTime_Date* %1, i32 %conv, i32 %conv3, i32 %conv6)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_timetuple(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %dstflag = alloca i32, align 4
  %dst = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store i32 -1, i32* %dstflag, align 4
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp = icmp ne %struct._object* %4, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end.15

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo2 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %5, i32 0, i32 4
  %6 = load %struct._object*, %struct._object** %tzinfo2, align 8
  %7 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %8 = bitcast %struct.PyDateTime_DateTime* %7 to %struct._object*
  %call = call %struct._object* @call_dst(%struct._object* %6, %struct._object* %8)
  store %struct._object* %call, %struct._object** %dst, align 8
  %9 = load %struct._object*, %struct._object** %dst, align 8
  %cmp3 = icmp eq %struct._object* %9, null
  br i1 %cmp3, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %10 = load %struct._object*, %struct._object** %dst, align 8
  %cmp6 = icmp ne %struct._object* %10, @_Py_NoneStruct
  br i1 %cmp6, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %dst, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDateTime_Delta*
  %call9 = call i32 @delta_bool(%struct.PyDateTime_Delta* %12)
  store i32 %call9, i32* %dstflag, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.10
  %13 = load %struct._object*, %struct._object** %dst, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.14

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.14
  br label %if.end.15

if.end.15:                                        ; preds = %do.end, %land.lhs.true, %entry
  %20 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %21 = bitcast %struct.PyDateTime_DateTime* %20 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %21, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %22 = load i8, i8* %arrayidx, align 1
  %conv16 = zext i8 %22 to i32
  %shl = shl i32 %conv16, 8
  %23 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %24 = bitcast %struct.PyDateTime_DateTime* %23 to %struct.PyDateTime_Date*
  %data17 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %24, i32 0, i32 3
  %arrayidx18 = getelementptr [4 x i8], [4 x i8]* %data17, i32 0, i64 1
  %25 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %25 to i32
  %or = or i32 %shl, %conv19
  %26 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %27 = bitcast %struct.PyDateTime_DateTime* %26 to %struct.PyDateTime_Date*
  %data20 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %27, i32 0, i32 3
  %arrayidx21 = getelementptr [4 x i8], [4 x i8]* %data20, i32 0, i64 2
  %28 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %28 to i32
  %29 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %30 = bitcast %struct.PyDateTime_DateTime* %29 to %struct.PyDateTime_Date*
  %data23 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %30, i32 0, i32 3
  %arrayidx24 = getelementptr [4 x i8], [4 x i8]* %data23, i32 0, i64 3
  %31 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %31 to i32
  %32 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data26 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %32, i32 0, i32 3
  %arrayidx27 = getelementptr [10 x i8], [10 x i8]* %data26, i32 0, i64 4
  %33 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %33 to i32
  %34 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data29 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %34, i32 0, i32 3
  %arrayidx30 = getelementptr [10 x i8], [10 x i8]* %data29, i32 0, i64 5
  %35 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %35 to i32
  %36 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data32 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %36, i32 0, i32 3
  %arrayidx33 = getelementptr [10 x i8], [10 x i8]* %data32, i32 0, i64 6
  %37 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %37 to i32
  %38 = load i32, i32* %dstflag, align 4
  %call35 = call %struct._object* @build_struct_time(i32 %or, i32 %conv22, i32 %conv25, i32 %conv28, i32 %conv31, i32 %conv34, i32 %38)
  store %struct._object* %call35, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then.5
  %39 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %39
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_timestamp(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %result = alloca %struct._object*, align 8
  %delta = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %time = alloca %struct.tm, align 8
  %timestamp = alloca i64, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %land.lhs.true, label %if.else.10

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp = icmp ne %struct._object* %4, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.else.10

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %6 = bitcast %struct.PyDateTime_DateTime* %5 to %struct._object*
  %7 = load %struct._object*, %struct._object** @PyDateTime_Epoch, align 8
  %call = call %struct._object* @datetime_subtract(%struct._object* %6, %struct._object* %7)
  store %struct._object* %call, %struct._object** %delta, align 8
  %8 = load %struct._object*, %struct._object** %delta, align 8
  %cmp2 = icmp eq %struct._object* %8, null
  br i1 %cmp2, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %9 = load %struct._object*, %struct._object** %delta, align 8
  %call5 = call %struct._object* @delta_total_seconds(%struct._object* %9)
  store %struct._object* %call5, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %delta, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %if.end.56

if.else.10:                                       ; preds = %land.lhs.true, %entry
  %17 = bitcast %struct.tm* %time to i8*
  call void @llvm.memset.p0i8.i64(i8* %17, i8 0, i64 56, i32 1, i1 false)
  %18 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %19 = bitcast %struct.PyDateTime_DateTime* %18 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %19, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %20 = load i8, i8* %arrayidx, align 1
  %conv11 = zext i8 %20 to i32
  %shl = shl i32 %conv11, 8
  %21 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %22 = bitcast %struct.PyDateTime_DateTime* %21 to %struct.PyDateTime_Date*
  %data12 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %22, i32 0, i32 3
  %arrayidx13 = getelementptr [4 x i8], [4 x i8]* %data12, i32 0, i64 1
  %23 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %23 to i32
  %or = or i32 %shl, %conv14
  %sub = sub i32 %or, 1900
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 5
  store i32 %sub, i32* %tm_year, align 4
  %24 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %25 = bitcast %struct.PyDateTime_DateTime* %24 to %struct.PyDateTime_Date*
  %data15 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %25, i32 0, i32 3
  %arrayidx16 = getelementptr [4 x i8], [4 x i8]* %data15, i32 0, i64 2
  %26 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %26 to i32
  %sub18 = sub i32 %conv17, 1
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 4
  store i32 %sub18, i32* %tm_mon, align 4
  %27 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %28 = bitcast %struct.PyDateTime_DateTime* %27 to %struct.PyDateTime_Date*
  %data19 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %28, i32 0, i32 3
  %arrayidx20 = getelementptr [4 x i8], [4 x i8]* %data19, i32 0, i64 3
  %29 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %29 to i32
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 3
  store i32 %conv21, i32* %tm_mday, align 4
  %30 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data22 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %30, i32 0, i32 3
  %arrayidx23 = getelementptr [10 x i8], [10 x i8]* %data22, i32 0, i64 4
  %31 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %31 to i32
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 2
  store i32 %conv24, i32* %tm_hour, align 4
  %32 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data25 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %32, i32 0, i32 3
  %arrayidx26 = getelementptr [10 x i8], [10 x i8]* %data25, i32 0, i64 5
  %33 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %33 to i32
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 1
  store i32 %conv27, i32* %tm_min, align 4
  %34 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data28 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %34, i32 0, i32 3
  %arrayidx29 = getelementptr [10 x i8], [10 x i8]* %data28, i32 0, i64 6
  %35 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %35 to i32
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 0
  store i32 %conv30, i32* %tm_sec, align 4
  %tm_wday = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 6
  store i32 -1, i32* %tm_wday, align 4
  %tm_isdst = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 8
  store i32 -1, i32* %tm_isdst, align 4
  %call31 = call i64 @mktime(%struct.tm* %time) #5
  store i64 %call31, i64* %timestamp, align 8
  %36 = load i64, i64* %timestamp, align 8
  %cmp32 = icmp eq i64 %36, -1
  br i1 %cmp32, label %land.lhs.true.34, label %if.end.39

land.lhs.true.34:                                 ; preds = %if.else.10
  %tm_wday35 = getelementptr inbounds %struct.tm, %struct.tm* %time, i32 0, i32 6
  %37 = load i32, i32* %tm_wday35, align 4
  %cmp36 = icmp eq i32 %37, -1
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %land.lhs.true.34
  %38 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %38, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.151, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.39:                                        ; preds = %land.lhs.true.34, %if.else.10
  %39 = load i64, i64* %timestamp, align 8
  %conv40 = sitofp i64 %39 to double
  %40 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data41 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %40, i32 0, i32 3
  %arrayidx42 = getelementptr [10 x i8], [10 x i8]* %data41, i32 0, i64 7
  %41 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %41 to i32
  %shl44 = shl i32 %conv43, 16
  %42 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data45 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %42, i32 0, i32 3
  %arrayidx46 = getelementptr [10 x i8], [10 x i8]* %data45, i32 0, i64 8
  %43 = load i8, i8* %arrayidx46, align 1
  %conv47 = zext i8 %43 to i32
  %shl48 = shl i32 %conv47, 8
  %or49 = or i32 %shl44, %shl48
  %44 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data50 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %44, i32 0, i32 3
  %arrayidx51 = getelementptr [10 x i8], [10 x i8]* %data50, i32 0, i64 9
  %45 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %45 to i32
  %or53 = or i32 %or49, %conv52
  %conv54 = sitofp i32 %or53 to double
  %div = fdiv double %conv54, 1.000000e+06
  %add = fadd double %conv40, %div
  %call55 = call %struct._object* @PyFloat_FromDouble(double %add)
  store %struct._object* %call55, %struct._object** %result, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.39, %do.end
  %46 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %46, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.56, %if.then.38, %if.then.4
  %47 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %47
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_utctimetuple(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %y = alloca i32, align 4
  %m = alloca i32, align 4
  %d = alloca i32, align 4
  %hh = alloca i32, align 4
  %mm = alloca i32, align 4
  %ss = alloca i32, align 4
  %tzinfo = alloca %struct._object*, align 8
  %utcself = alloca %struct.PyDateTime_DateTime*, align 8
  %offset = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo1 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo1, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %4, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %tzinfo, align 8
  %5 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp = icmp eq %struct._object* %5, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %cond.end
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct.PyDateTime_DateTime* %6, %struct.PyDateTime_DateTime** %utcself, align 8
  %7 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %8 = bitcast %struct.PyDateTime_DateTime* %7 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.36

if.else:                                          ; preds = %cond.end
  %10 = load %struct._object*, %struct._object** %tzinfo, align 8
  %11 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %12 = bitcast %struct.PyDateTime_DateTime* %11 to %struct._object*
  %call = call %struct._object* @call_utcoffset(%struct._object* %10, %struct._object* %12)
  store %struct._object* %call, %struct._object** %offset, align 8
  %13 = load %struct._object*, %struct._object** %offset, align 8
  %cmp3 = icmp eq %struct._object* %13, null
  br i1 %cmp3, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.else
  %14 = load %struct._object*, %struct._object** %offset, align 8
  %cmp6 = icmp eq %struct._object* %14, @_Py_NoneStruct
  br i1 %cmp6, label %if.then.8, label %if.else.17

if.then.8:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %15 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt9, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt9, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.12, label %if.else.13

if.then.12:                                       ; preds = %do.body
  br label %if.end.14

if.else.13:                                       ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else.13, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.14
  %22 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct.PyDateTime_DateTime* %22, %struct.PyDateTime_DateTime** %utcself, align 8
  %23 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %24 = bitcast %struct.PyDateTime_DateTime* %23 to %struct._object*
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt15, align 8
  %inc16 = add i64 %25, 1
  store i64 %inc16, i64* %ob_refcnt15, align 8
  br label %if.end.35

if.else.17:                                       ; preds = %if.end
  %26 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %27 = load %struct._object*, %struct._object** %offset, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyDateTime_Delta*
  %call18 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %26, %struct.PyDateTime_Delta* %28, i32 -1)
  %29 = bitcast %struct._object* %call18 to %struct.PyDateTime_DateTime*
  store %struct.PyDateTime_DateTime* %29, %struct.PyDateTime_DateTime** %utcself, align 8
  br label %do.body.19

do.body.19:                                       ; preds = %if.else.17
  %30 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp20, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt21, align 8
  %dec22 = add i64 %32, -1
  store i64 %dec22, i64* %ob_refcnt21, align 8
  %cmp23 = icmp ne i64 %dec22, 0
  br i1 %cmp23, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %do.body.19
  br label %if.end.29

if.else.26:                                       ; preds = %do.body.19
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_dealloc28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc28, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  call void %35(%struct._object* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.26, %if.then.25
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  %37 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %cmp31 = icmp eq %struct.PyDateTime_DateTime* %37, null
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %do.end.30
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.30
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %do.end
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %if.then
  %38 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %39 = bitcast %struct.PyDateTime_DateTime* %38 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %39, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %40 = load i8, i8* %arrayidx, align 1
  %conv37 = zext i8 %40 to i32
  %shl = shl i32 %conv37, 8
  %41 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %42 = bitcast %struct.PyDateTime_DateTime* %41 to %struct.PyDateTime_Date*
  %data38 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %42, i32 0, i32 3
  %arrayidx39 = getelementptr [4 x i8], [4 x i8]* %data38, i32 0, i64 1
  %43 = load i8, i8* %arrayidx39, align 1
  %conv40 = zext i8 %43 to i32
  %or = or i32 %shl, %conv40
  store i32 %or, i32* %y, align 4
  %44 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %45 = bitcast %struct.PyDateTime_DateTime* %44 to %struct.PyDateTime_Date*
  %data41 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %45, i32 0, i32 3
  %arrayidx42 = getelementptr [4 x i8], [4 x i8]* %data41, i32 0, i64 2
  %46 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %46 to i32
  store i32 %conv43, i32* %m, align 4
  %47 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %48 = bitcast %struct.PyDateTime_DateTime* %47 to %struct.PyDateTime_Date*
  %data44 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %48, i32 0, i32 3
  %arrayidx45 = getelementptr [4 x i8], [4 x i8]* %data44, i32 0, i64 3
  %49 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %49 to i32
  store i32 %conv46, i32* %d, align 4
  %50 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %data47 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %50, i32 0, i32 3
  %arrayidx48 = getelementptr [10 x i8], [10 x i8]* %data47, i32 0, i64 4
  %51 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %51 to i32
  store i32 %conv49, i32* %hh, align 4
  %52 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %data50 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %52, i32 0, i32 3
  %arrayidx51 = getelementptr [10 x i8], [10 x i8]* %data50, i32 0, i64 5
  %53 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %53 to i32
  store i32 %conv52, i32* %mm, align 4
  %54 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %data53 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %54, i32 0, i32 3
  %arrayidx54 = getelementptr [10 x i8], [10 x i8]* %data53, i32 0, i64 6
  %55 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %55 to i32
  store i32 %conv55, i32* %ss, align 4
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.36
  %56 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utcself, align 8
  %57 = bitcast %struct.PyDateTime_DateTime* %56 to %struct._object*
  store %struct._object* %57, %struct._object** %_py_decref_tmp57, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 0
  %59 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %59, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %do.body.56
  br label %if.end.66

if.else.63:                                       ; preds = %do.body.56
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 1
  %61 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %61, i32 0, i32 4
  %62 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %62(%struct._object* %63)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  %64 = load i32, i32* %y, align 4
  %65 = load i32, i32* %m, align 4
  %66 = load i32, i32* %d, align 4
  %67 = load i32, i32* %hh, align 4
  %68 = load i32, i32* %mm, align 4
  %69 = load i32, i32* %ss, align 4
  %call68 = call %struct._object* @build_struct_time(i32 %64, i32 %65, i32 %66, i32 %67, i32 %68, i32 %69, i32 0)
  store %struct._object* %call68, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.67, %if.then.33, %if.then.5
  %70 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %70
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_isoformat(%struct.PyDateTime_DateTime* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %sep = alloca i32, align 4
  %buffer = alloca [100 x i8], align 16
  %result = alloca %struct._object*, align 8
  %us = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store i32 84, i32* %sep, align 4
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 7
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 16
  %2 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [10 x i8], [10 x i8]* %data1, i32 0, i64 8
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %shl4 = shl i32 %conv3, 8
  %or = or i32 %shl, %shl4
  %4 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data5 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 3
  %arrayidx6 = getelementptr [10 x i8], [10 x i8]* %data5, i32 0, i64 9
  %5 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %5 to i32
  %or8 = or i32 %or, %conv7
  store i32 %or8, i32* %us, align 4
  %6 = load %struct._object*, %struct._object** %args.addr, align 8
  %7 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %6, %struct._object* %7, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.153, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @datetime_isoformat.keywords, i32 0, i32 0), i32* %sep)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %us, align 4
  %tobool9 = icmp ne i32 %8, 0
  br i1 %tobool9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %if.end
  %9 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %10 = bitcast %struct.PyDateTime_DateTime* %9 to %struct.PyDateTime_Date*
  %data11 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %10, i32 0, i32 3
  %arrayidx12 = getelementptr [4 x i8], [4 x i8]* %data11, i32 0, i64 0
  %11 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %11 to i32
  %shl14 = shl i32 %conv13, 8
  %12 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %13 = bitcast %struct.PyDateTime_DateTime* %12 to %struct.PyDateTime_Date*
  %data15 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %13, i32 0, i32 3
  %arrayidx16 = getelementptr [4 x i8], [4 x i8]* %data15, i32 0, i64 1
  %14 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %14 to i32
  %or18 = or i32 %shl14, %conv17
  %15 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %16 = bitcast %struct.PyDateTime_DateTime* %15 to %struct.PyDateTime_Date*
  %data19 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %16, i32 0, i32 3
  %arrayidx20 = getelementptr [4 x i8], [4 x i8]* %data19, i32 0, i64 2
  %17 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %17 to i32
  %18 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %19 = bitcast %struct.PyDateTime_DateTime* %18 to %struct.PyDateTime_Date*
  %data22 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %19, i32 0, i32 3
  %arrayidx23 = getelementptr [4 x i8], [4 x i8]* %data22, i32 0, i64 3
  %20 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %20 to i32
  %21 = load i32, i32* %sep, align 4
  %22 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data25 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %22, i32 0, i32 3
  %arrayidx26 = getelementptr [10 x i8], [10 x i8]* %data25, i32 0, i64 4
  %23 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %23 to i32
  %24 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data28 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %24, i32 0, i32 3
  %arrayidx29 = getelementptr [10 x i8], [10 x i8]* %data28, i32 0, i64 5
  %25 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %25 to i32
  %26 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data31 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %26, i32 0, i32 3
  %arrayidx32 = getelementptr [10 x i8], [10 x i8]* %data31, i32 0, i64 6
  %27 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %27 to i32
  %28 = load i32, i32* %us, align 4
  %call34 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.154, i32 0, i32 0), i32 %or18, i32 %conv21, i32 %conv24, i32 %21, i32 %conv27, i32 %conv30, i32 %conv33, i32 %28)
  store %struct._object* %call34, %struct._object** %result, align 8
  br label %if.end.59

if.else:                                          ; preds = %if.end
  %29 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %30 = bitcast %struct.PyDateTime_DateTime* %29 to %struct.PyDateTime_Date*
  %data35 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %30, i32 0, i32 3
  %arrayidx36 = getelementptr [4 x i8], [4 x i8]* %data35, i32 0, i64 0
  %31 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %31 to i32
  %shl38 = shl i32 %conv37, 8
  %32 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %33 = bitcast %struct.PyDateTime_DateTime* %32 to %struct.PyDateTime_Date*
  %data39 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %33, i32 0, i32 3
  %arrayidx40 = getelementptr [4 x i8], [4 x i8]* %data39, i32 0, i64 1
  %34 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %34 to i32
  %or42 = or i32 %shl38, %conv41
  %35 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %36 = bitcast %struct.PyDateTime_DateTime* %35 to %struct.PyDateTime_Date*
  %data43 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %36, i32 0, i32 3
  %arrayidx44 = getelementptr [4 x i8], [4 x i8]* %data43, i32 0, i64 2
  %37 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %37 to i32
  %38 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %39 = bitcast %struct.PyDateTime_DateTime* %38 to %struct.PyDateTime_Date*
  %data46 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %39, i32 0, i32 3
  %arrayidx47 = getelementptr [4 x i8], [4 x i8]* %data46, i32 0, i64 3
  %40 = load i8, i8* %arrayidx47, align 1
  %conv48 = zext i8 %40 to i32
  %41 = load i32, i32* %sep, align 4
  %42 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data49 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %42, i32 0, i32 3
  %arrayidx50 = getelementptr [10 x i8], [10 x i8]* %data49, i32 0, i64 4
  %43 = load i8, i8* %arrayidx50, align 1
  %conv51 = zext i8 %43 to i32
  %44 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data52 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %44, i32 0, i32 3
  %arrayidx53 = getelementptr [10 x i8], [10 x i8]* %data52, i32 0, i64 5
  %45 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %45 to i32
  %46 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data55 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %46, i32 0, i32 3
  %arrayidx56 = getelementptr [10 x i8], [10 x i8]* %data55, i32 0, i64 6
  %47 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %47 to i32
  %call58 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.155, i32 0, i32 0), i32 %or42, i32 %conv45, i32 %conv48, i32 %41, i32 %conv51, i32 %conv54, i32 %conv57)
  store %struct._object* %call58, %struct._object** %result, align 8
  br label %if.end.59

if.end.59:                                        ; preds = %if.else, %if.then.10
  %48 = load %struct._object*, %struct._object** %result, align 8
  %tobool60 = icmp ne %struct._object* %48, null
  br i1 %tobool60, label %lor.lhs.false, label %if.then.62

lor.lhs.false:                                    ; preds = %if.end.59
  %49 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %50 = bitcast %struct.PyDateTime_DateTime* %49 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %50, i32 0, i32 2
  %51 = load i8, i8* %hastzinfo, align 1
  %tobool61 = icmp ne i8 %51, 0
  br i1 %tobool61, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %lor.lhs.false, %if.end.59
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %retval
  br label %return

if.end.63:                                        ; preds = %lor.lhs.false
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buffer, i32 0, i32 0
  %53 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %53, i32 0, i32 4
  %54 = load %struct._object*, %struct._object** %tzinfo, align 8
  %55 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %56 = bitcast %struct.PyDateTime_DateTime* %55 to %struct._object*
  %call64 = call i32 @format_utcoffset(i8* %arraydecay, i64 100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.156, i32 0, i32 0), %struct._object* %54, %struct._object* %56)
  %cmp = icmp slt i32 %call64, 0
  br i1 %cmp, label %if.then.66, label %if.end.72

if.then.66:                                       ; preds = %if.end.63
  br label %do.body

do.body:                                          ; preds = %if.then.66
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %_py_decref_tmp, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 0
  %59 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %59, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp67 = icmp ne i64 %dec, 0
  br i1 %cmp67, label %if.then.69, label %if.else.70

if.then.69:                                       ; preds = %do.body
  br label %if.end.71

if.else.70:                                       ; preds = %do.body
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 1
  %61 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %61, i32 0, i32 4
  %62 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %62(%struct._object* %63)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.70, %if.then.69
  br label %do.end

do.end:                                           ; preds = %if.end.71
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.72:                                        ; preds = %if.end.63
  %arraydecay73 = getelementptr inbounds [100 x i8], [100 x i8]* %buffer, i32 0, i32 0
  %call74 = call %struct._object* @PyUnicode_FromString(i8* %arraydecay73)
  call void @PyUnicode_AppendAndDel(%struct._object** %result, %struct._object* %call74)
  %64 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %64, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.72, %do.end, %if.then.62, %if.then
  %65 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %65
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_tzname(%struct._object* %self, %struct._object* %unused) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %unused.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %unused, %struct._object** %unused.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDateTime_DateTime*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 4
  %5 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %5, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @call_tzname(%struct._object* %cond, %struct._object* %6)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_dst(%struct._object* %self, %struct._object* %unused) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %unused.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %unused, %struct._object** %unused.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDateTime_DateTime*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 4
  %5 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %5, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @call_dst(%struct._object* %cond, %struct._object* %6)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_replace(%struct.PyDateTime_DateTime* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %clone = alloca %struct._object*, align 8
  %tuple = alloca %struct._object*, align 8
  %y = alloca i32, align 4
  %m = alloca i32, align 4
  %d = alloca i32, align 4
  %hh = alloca i32, align 4
  %mm = alloca i32, align 4
  %ss = alloca i32, align 4
  %us = alloca i32, align 4
  %tzinfo = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct.PyDateTime_Date*
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %1, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %shl = shl i32 %conv, 8
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %4 = bitcast %struct.PyDateTime_DateTime* %3 to %struct.PyDateTime_Date*
  %data1 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx2 = getelementptr [4 x i8], [4 x i8]* %data1, i32 0, i64 1
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %5 to i32
  %or = or i32 %shl, %conv3
  store i32 %or, i32* %y, align 4
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %7 = bitcast %struct.PyDateTime_DateTime* %6 to %struct.PyDateTime_Date*
  %data4 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %7, i32 0, i32 3
  %arrayidx5 = getelementptr [4 x i8], [4 x i8]* %data4, i32 0, i64 2
  %8 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %8 to i32
  store i32 %conv6, i32* %m, align 4
  %9 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %10 = bitcast %struct.PyDateTime_DateTime* %9 to %struct.PyDateTime_Date*
  %data7 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %10, i32 0, i32 3
  %arrayidx8 = getelementptr [4 x i8], [4 x i8]* %data7, i32 0, i64 3
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %11 to i32
  store i32 %conv9, i32* %d, align 4
  %12 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %12, i32 0, i32 3
  %arrayidx11 = getelementptr [10 x i8], [10 x i8]* %data10, i32 0, i64 4
  %13 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %13 to i32
  store i32 %conv12, i32* %hh, align 4
  %14 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data13 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %14, i32 0, i32 3
  %arrayidx14 = getelementptr [10 x i8], [10 x i8]* %data13, i32 0, i64 5
  %15 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %15 to i32
  store i32 %conv15, i32* %mm, align 4
  %16 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data16 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %16, i32 0, i32 3
  %arrayidx17 = getelementptr [10 x i8], [10 x i8]* %data16, i32 0, i64 6
  %17 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %17 to i32
  store i32 %conv18, i32* %ss, align 4
  %18 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data19 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %18, i32 0, i32 3
  %arrayidx20 = getelementptr [10 x i8], [10 x i8]* %data19, i32 0, i64 7
  %19 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %19 to i32
  %shl22 = shl i32 %conv21, 16
  %20 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data23 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %20, i32 0, i32 3
  %arrayidx24 = getelementptr [10 x i8], [10 x i8]* %data23, i32 0, i64 8
  %21 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %21 to i32
  %shl26 = shl i32 %conv25, 8
  %or27 = or i32 %shl22, %shl26
  %22 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data28 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %22, i32 0, i32 3
  %arrayidx29 = getelementptr [10 x i8], [10 x i8]* %data28, i32 0, i64 9
  %23 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %23 to i32
  %or31 = or i32 %or27, %conv30
  store i32 %or31, i32* %us, align 4
  %24 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %25 = bitcast %struct.PyDateTime_DateTime* %24 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %25, i32 0, i32 2
  %26 = load i8, i8* %hastzinfo, align 1
  %conv32 = sext i8 %26 to i32
  %tobool = icmp ne i32 %conv32, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %27 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo33 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %27, i32 0, i32 4
  %28 = load %struct._object*, %struct._object** %tzinfo33, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %28, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %tzinfo, align 8
  %29 = load %struct._object*, %struct._object** %args.addr, align 8
  %30 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %29, %struct._object* %30, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.157, i32 0, i32 0), i8** getelementptr inbounds ([9 x i8*], [9 x i8*]* @datetime_kws, i32 0, i32 0), i32* %y, i32* %m, i32* %d, i32* %hh, i32* %mm, i32* %ss, i32* %us, %struct._object** %tzinfo)
  %tobool34 = icmp ne i32 %call, 0
  br i1 %tobool34, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %31 = load i32, i32* %y, align 4
  %32 = load i32, i32* %m, align 4
  %33 = load i32, i32* %d, align 4
  %34 = load i32, i32* %hh, align 4
  %35 = load i32, i32* %mm, align 4
  %36 = load i32, i32* %ss, align 4
  %37 = load i32, i32* %us, align 4
  %38 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call35 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.142, i32 0, i32 0), i32 %31, i32 %32, i32 %33, i32 %34, i32 %35, i32 %36, i32 %37, %struct._object* %38)
  store %struct._object* %call35, %struct._object** %tuple, align 8
  %39 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %39, null
  br i1 %cmp, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.38:                                        ; preds = %if.end
  %40 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %41 = bitcast %struct.PyDateTime_DateTime* %40 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %43 = load %struct._object*, %struct._object** %tuple, align 8
  %call39 = call %struct._object* @datetime_new(%struct._typeobject* %42, %struct._object* %43, %struct._object* null)
  store %struct._object* %call39, %struct._object** %clone, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.38
  %44 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %44, %struct._object** %_py_decref_tmp, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0
  %46 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %46, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp40 = icmp ne i64 %dec, 0
  br i1 %cmp40, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %do.body
  br label %if.end.44

if.else:                                          ; preds = %do.body
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %49(%struct._object* %50)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.42
  br label %do.end

do.end:                                           ; preds = %if.end.44
  %51 = load %struct._object*, %struct._object** %clone, align 8
  store %struct._object* %51, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.37, %if.then
  %52 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %52
}

; Function Attrs: nounwind uwtable
define internal %struct.PyDateTime_DateTime* @datetime_astimezone(%struct.PyDateTime_DateTime* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct.PyDateTime_DateTime*, align 8
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %result = alloca %struct.PyDateTime_DateTime*, align 8
  %offset = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %tzinfo = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp75 = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %tzinfo, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.162, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @datetime_astimezone.keywords, i32 0, i32 0), %struct._object** %tzinfo)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct.PyDateTime_DateTime* null, %struct.PyDateTime_DateTime** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call1 = call i32 @check_tzinfo_subclass(%struct._object* %2)
  %cmp = icmp eq i32 %call1, -1
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct.PyDateTime_DateTime* null, %struct.PyDateTime_DateTime** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %4 = bitcast %struct.PyDateTime_DateTime* %3 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %4, i32 0, i32 2
  %5 = load i8, i8* %hastzinfo, align 1
  %tobool4 = icmp ne i8 %5, 0
  br i1 %tobool4, label %lor.lhs.false, label %if.then.7

lor.lhs.false:                                    ; preds = %if.end.3
  %6 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo5 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %6, i32 0, i32 4
  %7 = load %struct._object*, %struct._object** %tzinfo5, align 8
  %cmp6 = icmp eq %struct._object* %7, @_Py_NoneStruct
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %lor.lhs.false, %if.end.3
  br label %NeedAware

if.end.8:                                         ; preds = %lor.lhs.false
  %8 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo9 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %8, i32 0, i32 4
  %9 = load %struct._object*, %struct._object** %tzinfo9, align 8
  %10 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp10 = icmp eq %struct._object* %9, %10
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  %11 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %12 = bitcast %struct.PyDateTime_DateTime* %11 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %13, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %14 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct.PyDateTime_DateTime* %14, %struct.PyDateTime_DateTime** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  %15 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %16 = bitcast %struct.PyDateTime_DateTime* %15 to %struct._object*
  %call13 = call %struct._object* @datetime_utcoffset(%struct._object* %16, %struct._object* null)
  store %struct._object* %call13, %struct._object** %offset, align 8
  %17 = load %struct._object*, %struct._object** %offset, align 8
  %cmp14 = icmp eq %struct._object* %17, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct.PyDateTime_DateTime* null, %struct.PyDateTime_DateTime** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %18 = load %struct._object*, %struct._object** %offset, align 8
  %cmp17 = icmp eq %struct._object* %18, @_Py_NoneStruct
  br i1 %cmp17, label %if.then.18, label %if.end.23

if.then.18:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.18
  %19 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt19, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt19, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %do.body
  br label %if.end.22

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.22
  br label %NeedAware

NeedAware:                                        ; preds = %do.end, %if.then.7
  %26 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %26, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.163, i32 0, i32 0))
  store %struct.PyDateTime_DateTime* null, %struct.PyDateTime_DateTime** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.16
  %27 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %28 = load %struct._object*, %struct._object** %offset, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDateTime_Delta*
  %call24 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %27, %struct.PyDateTime_Delta* %29, i32 -1)
  %30 = bitcast %struct._object* %call24 to %struct.PyDateTime_DateTime*
  store %struct.PyDateTime_DateTime* %30, %struct.PyDateTime_DateTime** %result, align 8
  br label %do.body.25

do.body.25:                                       ; preds = %if.end.23
  %31 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp26, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %33, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %36(%struct._object* %37)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  %38 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %result, align 8
  %cmp36 = icmp eq %struct.PyDateTime_DateTime* %38, null
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %do.end.35
  store %struct.PyDateTime_DateTime* null, %struct.PyDateTime_DateTime** %retval
  br label %return

if.end.38:                                        ; preds = %do.end.35
  %39 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %result, align 8
  %tzinfo39 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %39, i32 0, i32 4
  %40 = load %struct._object*, %struct._object** %tzinfo39, align 8
  store %struct._object* %40, %struct._object** %temp, align 8
  %41 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp40 = icmp eq %struct._object* %41, @_Py_NoneStruct
  br i1 %cmp40, label %if.then.41, label %if.else.57

if.then.41:                                       ; preds = %if.end.38
  %42 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %result, align 8
  %call42 = call %struct._object* @local_timezone(%struct.PyDateTime_DateTime* %42)
  store %struct._object* %call42, %struct._object** %tzinfo, align 8
  %43 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp43 = icmp eq %struct._object* %43, null
  br i1 %cmp43, label %if.then.44, label %if.end.56

if.then.44:                                       ; preds = %if.then.41
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %44 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %result, align 8
  %45 = bitcast %struct.PyDateTime_DateTime* %44 to %struct._object*
  store %struct._object* %45, %struct._object** %_py_decref_tmp46, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt47, align 8
  %dec48 = add i64 %47, -1
  store i64 %dec48, i64* %ob_refcnt47, align 8
  %cmp49 = icmp ne i64 %dec48, 0
  br i1 %cmp49, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.45
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  call void %50(%struct._object* %51)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  store %struct.PyDateTime_DateTime* null, %struct.PyDateTime_DateTime** %retval
  br label %return

if.end.56:                                        ; preds = %if.then.41
  br label %if.end.60

if.else.57:                                       ; preds = %if.end.38
  %52 = load %struct._object*, %struct._object** %tzinfo, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt58, align 8
  %inc59 = add i64 %53, 1
  store i64 %inc59, i64* %ob_refcnt58, align 8
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.end.56
  %54 = load %struct._object*, %struct._object** %tzinfo, align 8
  %55 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %result, align 8
  %tzinfo61 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %55, i32 0, i32 4
  store %struct._object* %54, %struct._object** %tzinfo61, align 8
  br label %do.body.62

do.body.62:                                       ; preds = %if.end.60
  %56 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp63, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %58, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.67, label %if.else.68

if.then.67:                                       ; preds = %do.body.62
  br label %if.end.71

if.else.68:                                       ; preds = %do.body.62
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type69 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type69, align 8
  %tp_dealloc70 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc70, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %61(%struct._object* %62)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.68, %if.then.67
  br label %do.end.72

do.end.72:                                        ; preds = %if.end.71
  %63 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %result, align 8
  %64 = bitcast %struct.PyDateTime_DateTime* %63 to %struct._object*
  store %struct._object* %64, %struct._object** %temp, align 8
  %65 = load %struct._object*, %struct._object** %tzinfo, align 8
  %66 = load %struct._object*, %struct._object** %temp, align 8
  %call73 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %65, %struct._Py_Identifier* @PyId_fromutc, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), %struct._object* %66)
  %67 = bitcast %struct._object* %call73 to %struct.PyDateTime_DateTime*
  store %struct.PyDateTime_DateTime* %67, %struct.PyDateTime_DateTime** %result, align 8
  br label %do.body.74

do.body.74:                                       ; preds = %do.end.72
  %68 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp75, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_refcnt76 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt76, align 8
  %dec77 = add i64 %70, -1
  store i64 %dec77, i64* %ob_refcnt76, align 8
  %cmp78 = icmp ne i64 %dec77, 0
  br i1 %cmp78, label %if.then.79, label %if.else.80

if.then.79:                                       ; preds = %do.body.74
  br label %if.end.83

if.else.80:                                       ; preds = %do.body.74
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_type81 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type81, align 8
  %tp_dealloc82 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc82, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  call void %73(%struct._object* %74)
  br label %if.end.83

if.end.83:                                        ; preds = %if.else.80, %if.then.79
  br label %do.end.84

do.end.84:                                        ; preds = %if.end.83
  %75 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %result, align 8
  store %struct.PyDateTime_DateTime* %75, %struct.PyDateTime_DateTime** %retval
  br label %return

return:                                           ; preds = %do.end.84, %do.end.55, %if.then.37, %NeedAware, %if.then.15, %if.then.11, %if.then.2, %if.then
  %76 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %retval
  ret %struct.PyDateTime_DateTime* %76
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_reduce(%struct.PyDateTime_DateTime* %self, %struct._object* %arg) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %arg.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %call = call %struct._object* @datetime_getstate(%struct.PyDateTime_DateTime* %3)
  %call1 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.98, i32 0, i32 0), %struct._typeobject* %2, %struct._object* %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_datetime_now_impl(%struct._typeobject* %type, %struct._object* %tz) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %tz.addr = alloca %struct._object*, align 8
  %self = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %tz, %struct._object** %tz.addr, align 8
  %0 = load %struct._object*, %struct._object** %tz.addr, align 8
  %call = call i32 @check_tzinfo_subclass(%struct._object* %0)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %2 = bitcast %struct._typeobject* %1 to %struct._object*
  %3 = load %struct._object*, %struct._object** %tz.addr, align 8
  %cmp1 = icmp eq %struct._object* %3, @_Py_NoneStruct
  %cond = select i1 %cmp1, %struct.tm* (i64*)* @localtime, %struct.tm* (i64*)* @gmtime
  %4 = load %struct._object*, %struct._object** %tz.addr, align 8
  %call2 = call %struct._object* @datetime_best_possible(%struct._object* %2, %struct.tm* (i64*)* %cond, %struct._object* %4)
  store %struct._object* %call2, %struct._object** %self, align 8
  %5 = load %struct._object*, %struct._object** %self, align 8
  %cmp3 = icmp ne %struct._object* %5, null
  br i1 %cmp3, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %tz.addr, align 8
  %cmp4 = icmp ne %struct._object* %6, @_Py_NoneStruct
  br i1 %cmp4, label %if.then.5, label %if.end.10

if.then.5:                                        ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %7, %struct._object** %temp, align 8
  %8 = load %struct._object*, %struct._object** %tz.addr, align 8
  %9 = load %struct._object*, %struct._object** %self, align 8
  %call6 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %8, %struct._Py_Identifier* @PyId_fromutc, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.52, i32 0, i32 0), %struct._object* %9)
  store %struct._object* %call6, %struct._object** %self, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %10 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %land.lhs.true, %if.end
  %17 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %17, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then
  %18 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %18
}

; Function Attrs: nounwind uwtable
define internal i32 @check_tzinfo_subclass(%struct._object* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct._object*, align 8
  store %struct._object* %p, %struct._object** %p.addr, align 8
  %0 = load %struct._object*, %struct._object** %p.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %p.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %2, @PyDateTime_TZInfoType
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load %struct._object*, %struct._object** %p.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %4, %struct._typeobject* @PyDateTime_TZInfoType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.2
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %6 = load %struct._object*, %struct._object** %p.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 1
  %8 = load i8*, i8** %tp_name, align 8
  %call5 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.141, i32 0, i32 0), i8* %8)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_best_possible(%struct._object* %cls, %struct.tm* (i64*)* %f, %struct._object* %tzinfo) #0 {
entry:
  %cls.addr = alloca %struct._object*, align 8
  %f.addr = alloca %struct.tm* (i64*)*, align 8
  %tzinfo.addr = alloca %struct._object*, align 8
  %t = alloca %struct.timeval, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct.tm* (i64*)* %f, %struct.tm* (i64*)** %f.addr, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  call void @_PyTime_gettimeofday(%struct.timeval* %t)
  %0 = load %struct._object*, %struct._object** %cls.addr, align 8
  %1 = load %struct.tm* (i64*)*, %struct.tm* (i64*)** %f.addr, align 8
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %t, i32 0, i32 0
  %2 = load i64, i64* %tv_sec, align 8
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %t, i32 0, i32 1
  %3 = load i64, i64* %tv_usec, align 8
  %conv = trunc i64 %3 to i32
  %4 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %call = call %struct._object* @datetime_from_timet_and_us(%struct._object* %0, %struct.tm* (i64*)* %1, i64 %2, i32 %conv, %struct._object* %4)
  ret %struct._object* %call
}

; Function Attrs: nounwind
declare %struct.tm* @gmtime(i64*) #3

declare void @_PyTime_gettimeofday(%struct.timeval*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_from_timet_and_us(%struct._object* %cls, %struct.tm* (i64*)* %f, i64 %timet, i32 %us, %struct._object* %tzinfo) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %f.addr = alloca %struct.tm* (i64*)*, align 8
  %timet.addr = alloca i64, align 8
  %us.addr = alloca i32, align 4
  %tzinfo.addr = alloca %struct._object*, align 8
  %tm = alloca %struct.tm*, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct.tm* (i64*)* %f, %struct.tm* (i64*)** %f.addr, align 8
  store i64 %timet, i64* %timet.addr, align 8
  store i32 %us, i32* %us.addr, align 4
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  %0 = load %struct.tm* (i64*)*, %struct.tm* (i64*)** %f.addr, align 8
  %call = call %struct.tm* %0(i64* %timet.addr)
  store %struct.tm* %call, %struct.tm** %tm, align 8
  %1 = load %struct.tm*, %struct.tm** %tm, align 8
  %cmp = icmp eq %struct.tm* %1, null
  br i1 %cmp, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %call1 = call i32* @__errno_location() #7
  %2 = load i32, i32* %call1, align 4
  %cmp2 = icmp eq i32 %2, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %call4 = call i32* @__errno_location() #7
  store i32 22, i32* %call4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  %3 = load %struct._object*, %struct._object** @PyExc_OSError, align 8
  %call5 = call %struct._object* @PyErr_SetFromErrno(%struct._object* %3)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %entry
  %4 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_sec = getelementptr inbounds %struct.tm, %struct.tm* %4, i32 0, i32 0
  %5 = load i32, i32* %tm_sec, align 4
  %cmp7 = icmp sgt i32 %5, 59
  br i1 %cmp7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end.6
  %6 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_sec9 = getelementptr inbounds %struct.tm, %struct.tm* %6, i32 0, i32 0
  store i32 59, i32* %tm_sec9, align 4
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %if.end.6
  %7 = load %struct._object*, %struct._object** %cls.addr, align 8
  %8 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_year = getelementptr inbounds %struct.tm, %struct.tm* %8, i32 0, i32 5
  %9 = load i32, i32* %tm_year, align 4
  %add = add i32 %9, 1900
  %10 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_mon = getelementptr inbounds %struct.tm, %struct.tm* %10, i32 0, i32 4
  %11 = load i32, i32* %tm_mon, align 4
  %add11 = add i32 %11, 1
  %12 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_mday = getelementptr inbounds %struct.tm, %struct.tm* %12, i32 0, i32 3
  %13 = load i32, i32* %tm_mday, align 4
  %14 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_hour = getelementptr inbounds %struct.tm, %struct.tm* %14, i32 0, i32 2
  %15 = load i32, i32* %tm_hour, align 4
  %16 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_min = getelementptr inbounds %struct.tm, %struct.tm* %16, i32 0, i32 1
  %17 = load i32, i32* %tm_min, align 4
  %18 = load %struct.tm*, %struct.tm** %tm, align 8
  %tm_sec12 = getelementptr inbounds %struct.tm, %struct.tm* %18, i32 0, i32 0
  %19 = load i32, i32* %tm_sec12, align 4
  %20 = load i32, i32* %us.addr, align 4
  %21 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %call13 = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.142, i32 0, i32 0), i32 %add, i32 %add11, i32 %13, i32 %15, i32 %17, i32 %19, i32 %20, %struct._object* %21)
  store %struct._object* %call13, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.end
  %22 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %22
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_from_timestamp(%struct._object* %cls, %struct.tm* (i64*)* %f, %struct._object* %timestamp, %struct._object* %tzinfo) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %cls.addr = alloca %struct._object*, align 8
  %f.addr = alloca %struct.tm* (i64*)*, align 8
  %timestamp.addr = alloca %struct._object*, align 8
  %tzinfo.addr = alloca %struct._object*, align 8
  %timet = alloca i64, align 8
  %us = alloca i64, align 8
  store %struct._object* %cls, %struct._object** %cls.addr, align 8
  store %struct.tm* (i64*)* %f, %struct.tm* (i64*)** %f.addr, align 8
  store %struct._object* %timestamp, %struct._object** %timestamp.addr, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  %0 = load %struct._object*, %struct._object** %timestamp.addr, align 8
  %call = call i32 @_PyTime_ObjectToTimeval(%struct._object* %0, i64* %timet, i64* %us, i32 0)
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %cls.addr, align 8
  %2 = load %struct.tm* (i64*)*, %struct.tm* (i64*)** %f.addr, align 8
  %3 = load i64, i64* %timet, align 8
  %4 = load i64, i64* %us, align 8
  %conv = trunc i64 %4 to i32
  %5 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %call1 = call %struct._object* @datetime_from_timet_and_us(%struct._object* %1, %struct.tm* (i64*)* %2, i64 %3, i32 %conv, %struct._object* %5)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %6
}

declare i32 @_PyTime_ObjectToTimeval(%struct._object*, i64*, i64*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_dst(%struct._object* %tzinfo, %struct._object* %tzinfoarg) #0 {
entry:
  %tzinfo.addr = alloca %struct._object*, align 8
  %tzinfoarg.addr = alloca %struct._object*, align 8
  store %struct._object* %tzinfo, %struct._object** %tzinfo.addr, align 8
  store %struct._object* %tzinfoarg, %struct._object** %tzinfoarg.addr, align 8
  %0 = load %struct._object*, %struct._object** %tzinfo.addr, align 8
  %1 = load %struct._object*, %struct._object** %tzinfoarg.addr, align 8
  %call = call %struct._object* @call_tzinfo_method(%struct._object* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0), %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @delta_bool(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 2
  %1 = load i32, i32* %days, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %2, i32 0, i32 3
  %3 = load i32, i32* %seconds, align 4
  %cmp1 = icmp ne i32 %3, 0
  br i1 %cmp1, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %4, i32 0, i32 4
  %5 = load i32, i32* %microseconds, align 4
  %cmp2 = icmp ne i32 %5, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_total_seconds(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %total_seconds = alloca %struct._object*, align 8
  %total_microseconds = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDateTime_Delta*
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %1)
  store %struct._object* %call, %struct._object** %total_microseconds, align 8
  %2 = load %struct._object*, %struct._object** %total_microseconds, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %total_microseconds, align 8
  %4 = load %struct._object*, %struct._object** @us_per_second, align 8
  %call1 = call %struct._object* @PyNumber_TrueDivide(%struct._object* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %total_seconds, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %total_microseconds, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %12 = load %struct._object*, %struct._object** %total_seconds, align 8
  store %struct._object* %12, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #5

; Function Attrs: nounwind
declare i64 @mktime(%struct.tm*) #3

declare %struct._object* @PyFloat_FromDouble(double) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  %x1 = alloca %struct._object*, align 8
  %x2 = alloca %struct._object*, align 8
  %x3 = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp75 = alloca %struct._object*, align 8
  %_py_xdecref_tmp89 = alloca %struct._object*, align 8
  %_py_decref_tmp94 = alloca %struct._object*, align 8
  %_py_xdecref_tmp108 = alloca %struct._object*, align 8
  %_py_decref_tmp113 = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  store %struct._object* null, %struct._object** %x1, align 8
  store %struct._object* null, %struct._object** %x2, align 8
  store %struct._object* null, %struct._object** %x3, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 2
  %1 = load i32, i32* %days, align 4
  %conv = sext i32 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  store %struct._object* %call, %struct._object** %x1, align 8
  %2 = load %struct._object*, %struct._object** %x1, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %Done

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %x1, align 8
  %4 = load %struct._object*, %struct._object** @seconds_per_day, align 8
  %call2 = call %struct._object* @PyNumber_Multiply(%struct._object* %3, %struct._object* %4)
  store %struct._object* %call2, %struct._object** %x2, align 8
  %5 = load %struct._object*, %struct._object** %x2, align 8
  %cmp3 = icmp eq %struct._object* %5, null
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  br label %Done

if.end.6:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.6
  %6 = load %struct._object*, %struct._object** %x1, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  store %struct._object* null, %struct._object** %x1, align 8
  %13 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %13, i32 0, i32 3
  %14 = load i32, i32* %seconds, align 4
  %conv11 = sext i32 %14 to i64
  %call12 = call %struct._object* @PyLong_FromLong(i64 %conv11)
  store %struct._object* %call12, %struct._object** %x1, align 8
  %15 = load %struct._object*, %struct._object** %x1, align 8
  %cmp13 = icmp eq %struct._object* %15, null
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %do.end
  br label %Done

if.end.16:                                        ; preds = %do.end
  %16 = load %struct._object*, %struct._object** %x1, align 8
  %17 = load %struct._object*, %struct._object** %x2, align 8
  %call17 = call %struct._object* @PyNumber_Add(%struct._object* %16, %struct._object* %17)
  store %struct._object* %call17, %struct._object** %x3, align 8
  %18 = load %struct._object*, %struct._object** %x3, align 8
  %cmp18 = icmp eq %struct._object* %18, null
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.16
  br label %Done

if.end.21:                                        ; preds = %if.end.16
  br label %do.body.22

do.body.22:                                       ; preds = %if.end.21
  %19 = load %struct._object*, %struct._object** %x1, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp23, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %21, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.22
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.22
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %24(%struct._object* %25)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %do.body.34

do.body.34:                                       ; preds = %do.end.33
  %26 = load %struct._object*, %struct._object** %x2, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp35, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt36, align 8
  %dec37 = add i64 %28, -1
  store i64 %dec37, i64* %ob_refcnt36, align 8
  %cmp38 = icmp ne i64 %dec37, 0
  br i1 %cmp38, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %do.body.34
  br label %if.end.44

if.else.41:                                       ; preds = %do.body.34
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  call void %31(%struct._object* %32)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  store %struct._object* null, %struct._object** %x2, align 8
  %33 = load %struct._object*, %struct._object** %x3, align 8
  %34 = load %struct._object*, %struct._object** @us_per_second, align 8
  %call46 = call %struct._object* @PyNumber_Multiply(%struct._object* %33, %struct._object* %34)
  store %struct._object* %call46, %struct._object** %x1, align 8
  %35 = load %struct._object*, %struct._object** %x1, align 8
  %cmp47 = icmp eq %struct._object* %35, null
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %do.end.45
  br label %Done

if.end.50:                                        ; preds = %do.end.45
  br label %do.body.51

do.body.51:                                       ; preds = %if.end.50
  %36 = load %struct._object*, %struct._object** %x3, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp52, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %38, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.51
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.51
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %41(%struct._object* %42)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  store %struct._object* null, %struct._object** %x3, align 8
  %43 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %43, i32 0, i32 4
  %44 = load i32, i32* %microseconds, align 4
  %conv63 = sext i32 %44 to i64
  %call64 = call %struct._object* @PyLong_FromLong(i64 %conv63)
  store %struct._object* %call64, %struct._object** %x2, align 8
  %45 = load %struct._object*, %struct._object** %x2, align 8
  %cmp65 = icmp eq %struct._object* %45, null
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %do.end.62
  br label %Done

if.end.68:                                        ; preds = %do.end.62
  %46 = load %struct._object*, %struct._object** %x1, align 8
  %47 = load %struct._object*, %struct._object** %x2, align 8
  %call69 = call %struct._object* @PyNumber_Add(%struct._object* %46, %struct._object* %47)
  store %struct._object* %call69, %struct._object** %result, align 8
  br label %Done

Done:                                             ; preds = %if.end.68, %if.then.67, %if.then.49, %if.then.20, %if.then.15, %if.then.5, %if.then
  br label %do.body.70

do.body.70:                                       ; preds = %Done
  %48 = load %struct._object*, %struct._object** %x1, align 8
  store %struct._object* %48, %struct._object** %_py_xdecref_tmp, align 8
  %49 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp71 = icmp ne %struct._object* %49, null
  br i1 %cmp71, label %if.then.73, label %if.end.86

if.then.73:                                       ; preds = %do.body.70
  br label %do.body.74

do.body.74:                                       ; preds = %if.then.73
  %50 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp75, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_refcnt76 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt76, align 8
  %dec77 = add i64 %52, -1
  store i64 %dec77, i64* %ob_refcnt76, align 8
  %cmp78 = icmp ne i64 %dec77, 0
  br i1 %cmp78, label %if.then.80, label %if.else.81

if.then.80:                                       ; preds = %do.body.74
  br label %if.end.84

if.else.81:                                       ; preds = %do.body.74
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  %ob_type82 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type82, align 8
  %tp_dealloc83 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc83, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp75, align 8
  call void %55(%struct._object* %56)
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.81, %if.then.80
  br label %do.end.85

do.end.85:                                        ; preds = %if.end.84
  br label %if.end.86

if.end.86:                                        ; preds = %do.end.85, %do.body.70
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  br label %do.body.88

do.body.88:                                       ; preds = %do.end.87
  %57 = load %struct._object*, %struct._object** %x2, align 8
  store %struct._object* %57, %struct._object** %_py_xdecref_tmp89, align 8
  %58 = load %struct._object*, %struct._object** %_py_xdecref_tmp89, align 8
  %cmp90 = icmp ne %struct._object* %58, null
  br i1 %cmp90, label %if.then.92, label %if.end.105

if.then.92:                                       ; preds = %do.body.88
  br label %do.body.93

do.body.93:                                       ; preds = %if.then.92
  %59 = load %struct._object*, %struct._object** %_py_xdecref_tmp89, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp94, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_refcnt95 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt95, align 8
  %dec96 = add i64 %61, -1
  store i64 %dec96, i64* %ob_refcnt95, align 8
  %cmp97 = icmp ne i64 %dec96, 0
  br i1 %cmp97, label %if.then.99, label %if.else.100

if.then.99:                                       ; preds = %do.body.93
  br label %if.end.103

if.else.100:                                      ; preds = %do.body.93
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_type101 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type101, align 8
  %tp_dealloc102 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc102, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  call void %64(%struct._object* %65)
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.100, %if.then.99
  br label %do.end.104

do.end.104:                                       ; preds = %if.end.103
  br label %if.end.105

if.end.105:                                       ; preds = %do.end.104, %do.body.88
  br label %do.end.106

do.end.106:                                       ; preds = %if.end.105
  br label %do.body.107

do.body.107:                                      ; preds = %do.end.106
  %66 = load %struct._object*, %struct._object** %x3, align 8
  store %struct._object* %66, %struct._object** %_py_xdecref_tmp108, align 8
  %67 = load %struct._object*, %struct._object** %_py_xdecref_tmp108, align 8
  %cmp109 = icmp ne %struct._object* %67, null
  br i1 %cmp109, label %if.then.111, label %if.end.124

if.then.111:                                      ; preds = %do.body.107
  br label %do.body.112

do.body.112:                                      ; preds = %if.then.111
  %68 = load %struct._object*, %struct._object** %_py_xdecref_tmp108, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp113, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp113, align 8
  %ob_refcnt114 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt114, align 8
  %dec115 = add i64 %70, -1
  store i64 %dec115, i64* %ob_refcnt114, align 8
  %cmp116 = icmp ne i64 %dec115, 0
  br i1 %cmp116, label %if.then.118, label %if.else.119

if.then.118:                                      ; preds = %do.body.112
  br label %if.end.122

if.else.119:                                      ; preds = %do.body.112
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp113, align 8
  %ob_type120 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type120, align 8
  %tp_dealloc121 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc121, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp113, align 8
  call void %73(%struct._object* %74)
  br label %if.end.122

if.end.122:                                       ; preds = %if.else.119, %if.then.118
  br label %do.end.123

do.end.123:                                       ; preds = %if.end.122
  br label %if.end.124

if.end.124:                                       ; preds = %do.end.123, %do.body.107
  br label %do.end.125

do.end.125:                                       ; preds = %if.end.124
  %75 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %75
}

declare %struct._object* @PyNumber_TrueDivide(%struct._object*, %struct._object*) #1

declare %struct._object* @PyNumber_Multiply(%struct._object*, %struct._object*) #1

declare %struct._object* @PyNumber_Add(%struct._object*, %struct._object*) #1

declare void @PyUnicode_AppendAndDel(%struct._object**, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @local_timezone(%struct.PyDateTime_DateTime* %utc_time) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %utc_time.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %result = alloca %struct._object*, align 8
  %timep = alloca %struct.tm*, align 8
  %timestamp = alloca i64, align 8
  %delta = alloca %struct._object*, align 8
  %one_second = alloca %struct._object*, align 8
  %seconds = alloca %struct._object*, align 8
  %nameo = alloca %struct._object*, align 8
  %zone = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp70 = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %utc_time, %struct.PyDateTime_DateTime** %utc_time.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %nameo, align 8
  store i8* null, i8** %zone, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %utc_time.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._object*
  %2 = load %struct._object*, %struct._object** @PyDateTime_Epoch, align 8
  %call = call %struct._object* @datetime_subtract(%struct._object* %1, %struct._object* %2)
  store %struct._object* %call, %struct._object** %delta, align 8
  %3 = load %struct._object*, %struct._object** %delta, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @new_delta_ex(i32 0, i32 1, i32 0, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call1, %struct._object** %one_second, align 8
  %4 = load %struct._object*, %struct._object** %one_second, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %error

if.end.4:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %delta, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDateTime_Delta*
  %7 = load %struct._object*, %struct._object** %one_second, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDateTime_Delta*
  %call5 = call %struct._object* @divide_timedelta_timedelta(%struct.PyDateTime_Delta* %6, %struct.PyDateTime_Delta* %8)
  store %struct._object* %call5, %struct._object** %seconds, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %9 = load %struct._object*, %struct._object** %one_second, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  %16 = load %struct._object*, %struct._object** %seconds, align 8
  %cmp9 = icmp eq %struct._object* %16, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.end
  br label %error

if.end.11:                                        ; preds = %do.end
  br label %do.body.12

do.body.12:                                       ; preds = %if.end.11
  %17 = load %struct._object*, %struct._object** %delta, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp13, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %19, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %22(%struct._object* %23)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  %24 = load %struct._object*, %struct._object** %seconds, align 8
  %call23 = call i64 @PyLong_AsLong(%struct._object* %24)
  store i64 %call23, i64* %timestamp, align 8
  br label %do.body.24

do.body.24:                                       ; preds = %do.end.22
  %25 = load %struct._object*, %struct._object** %seconds, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp25, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %27, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body.24
  br label %if.end.33

if.else.30:                                       ; preds = %do.body.24
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc32, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %30(%struct._object* %31)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end.34

do.end.34:                                        ; preds = %if.end.33
  %32 = load i64, i64* %timestamp, align 8
  %cmp35 = icmp eq i64 %32, -1
  br i1 %cmp35, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %do.end.34
  %call36 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call36, null
  br i1 %tobool, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.38:                                        ; preds = %land.lhs.true, %do.end.34
  %call39 = call %struct.tm* @localtime(i64* %timestamp) #5
  store %struct.tm* %call39, %struct.tm** %timep, align 8
  %33 = load %struct.tm*, %struct.tm** %timep, align 8
  %tm_zone = getelementptr inbounds %struct.tm, %struct.tm* %33, i32 0, i32 10
  %34 = load i8*, i8** %tm_zone, align 8
  store i8* %34, i8** %zone, align 8
  %35 = load %struct.tm*, %struct.tm** %timep, align 8
  %tm_gmtoff = getelementptr inbounds %struct.tm, %struct.tm* %35, i32 0, i32 9
  %36 = load i64, i64* %tm_gmtoff, align 8
  %conv = trunc i64 %36 to i32
  %call40 = call %struct._object* @new_delta_ex(i32 0, i32 %conv, i32 0, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call40, %struct._object** %delta, align 8
  %37 = load i8*, i8** %zone, align 8
  %cmp41 = icmp ne i8* %37, null
  br i1 %cmp41, label %if.then.43, label %if.end.49

if.then.43:                                       ; preds = %if.end.38
  %38 = load i8*, i8** %zone, align 8
  %call44 = call %struct._object* @PyUnicode_DecodeLocale(i8* %38, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.164, i32 0, i32 0))
  store %struct._object* %call44, %struct._object** %nameo, align 8
  %39 = load %struct._object*, %struct._object** %nameo, align 8
  %cmp45 = icmp eq %struct._object* %39, null
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.then.43
  br label %error

if.end.48:                                        ; preds = %if.then.43
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.end.38
  %40 = load %struct._object*, %struct._object** %delta, align 8
  %41 = load %struct._object*, %struct._object** %nameo, align 8
  %call50 = call %struct._object* @new_timezone(%struct._object* %40, %struct._object* %41)
  store %struct._object* %call50, %struct._object** %result, align 8
  br label %do.body.51

do.body.51:                                       ; preds = %if.end.49
  %42 = load %struct._object*, %struct._object** %nameo, align 8
  store %struct._object* %42, %struct._object** %_py_xdecref_tmp, align 8
  %43 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp52 = icmp ne %struct._object* %43, null
  br i1 %cmp52, label %if.then.54, label %if.end.67

if.then.54:                                       ; preds = %do.body.51
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.54
  %44 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %44, %struct._object** %_py_decref_tmp56, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0
  %46 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %46, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.55
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.55
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %49(%struct._object* %50)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %if.end.67

if.end.67:                                        ; preds = %do.end.66, %do.body.51
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  br label %error

error:                                            ; preds = %do.end.68, %if.then.47, %if.then.10, %if.then.3
  br label %do.body.69

do.body.69:                                       ; preds = %error
  %51 = load %struct._object*, %struct._object** %delta, align 8
  store %struct._object* %51, %struct._object** %_py_decref_tmp70, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_refcnt71 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt71, align 8
  %dec72 = add i64 %53, -1
  store i64 %dec72, i64* %ob_refcnt71, align 8
  %cmp73 = icmp ne i64 %dec72, 0
  br i1 %cmp73, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.69
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.69
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  call void %56(%struct._object* %57)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.80, %if.then.37, %if.then
  %59 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %59
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @divide_timedelta_timedelta(%struct.PyDateTime_Delta* %left, %struct.PyDateTime_Delta* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct.PyDateTime_Delta*, align 8
  %right.addr = alloca %struct.PyDateTime_Delta*, align 8
  %pyus_left = alloca %struct._object*, align 8
  %pyus_right = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp21 = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %left, %struct.PyDateTime_Delta** %left.addr, align 8
  store %struct.PyDateTime_Delta* %right, %struct.PyDateTime_Delta** %right.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %left.addr, align 8
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %0)
  store %struct._object* %call, %struct._object** %pyus_left, align 8
  %1 = load %struct._object*, %struct._object** %pyus_left, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %right.addr, align 8
  %call1 = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %2)
  store %struct._object* %call1, %struct._object** %pyus_right, align 8
  %3 = load %struct._object*, %struct._object** %pyus_right, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %4 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %pyus_left, align 8
  %12 = load %struct._object*, %struct._object** %pyus_right, align 8
  %call8 = call %struct._object* @PyNumber_FloorDivide(%struct._object* %11, %struct._object* %12)
  store %struct._object* %call8, %struct._object** %result, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.7
  %13 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %15, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %18(%struct._object* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.19
  %20 = load %struct._object*, %struct._object** %pyus_right, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp21, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt22, align 8
  %dec23 = add i64 %22, -1
  store i64 %dec23, i64* %ob_refcnt22, align 8
  %cmp24 = icmp ne i64 %dec23, 0
  br i1 %cmp24, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %do.body.20
  br label %if.end.29

if.else.26:                                       ; preds = %do.body.20
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_dealloc28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc28, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  call void %25(%struct._object* %26)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.26, %if.then.25
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  %27 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %27, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.30, %do.end, %if.then
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

declare i64 @PyLong_AsLong(%struct._object*) #1

declare %struct._object* @PyErr_Occurred() #1

declare %struct._object* @PyUnicode_DecodeLocale(i8*, i8*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @new_timezone(%struct._object* %offset, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %offset.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  store %struct._object* %offset, %struct._object** %offset.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %name.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %offset.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDateTime_Delta*
  %call = call i32 @delta_bool(%struct.PyDateTime_Delta* %2)
  %cmp1 = icmp eq i32 %call, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._object*, %struct._object** @PyDateTime_TimeZone_UTC, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct._object*, %struct._object** @PyDateTime_TimeZone_UTC, align 8
  store %struct._object* %5, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct._object*, %struct._object** %offset.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDateTime_Delta*
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %7, i32 0, i32 4
  %8 = load i32, i32* %microseconds, align 4
  %cmp2 = icmp ne i32 %8, 0
  br i1 %cmp2, label %if.then.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %offset.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDateTime_Delta*
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %10, i32 0, i32 3
  %11 = load i32, i32* %seconds, align 4
  %rem = srem i32 %11, 60
  %cmp3 = icmp ne i32 %rem, 0
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %lor.lhs.false, %if.end
  %12 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %13 = load %struct._object*, %struct._object** %offset.addr, align 8
  %call5 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %12, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.165, i32 0, i32 0), %struct._object* %13)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %lor.lhs.false
  %14 = load %struct._object*, %struct._object** %offset.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDateTime_Delta*
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %15, i32 0, i32 2
  %16 = load i32, i32* %days, align 4
  %cmp7 = icmp eq i32 %16, -1
  br i1 %cmp7, label %land.lhs.true.8, label %lor.lhs.false.11

land.lhs.true.8:                                  ; preds = %if.end.6
  %17 = load %struct._object*, %struct._object** %offset.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Delta*
  %seconds9 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %18, i32 0, i32 3
  %19 = load i32, i32* %seconds9, align 4
  %cmp10 = icmp eq i32 %19, 0
  br i1 %cmp10, label %if.then.17, label %lor.lhs.false.11

lor.lhs.false.11:                                 ; preds = %land.lhs.true.8, %if.end.6
  %20 = load %struct._object*, %struct._object** %offset.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDateTime_Delta*
  %days12 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %21, i32 0, i32 2
  %22 = load i32, i32* %days12, align 4
  %cmp13 = icmp slt i32 %22, -1
  br i1 %cmp13, label %if.then.17, label %lor.lhs.false.14

lor.lhs.false.14:                                 ; preds = %lor.lhs.false.11
  %23 = load %struct._object*, %struct._object** %offset.addr, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyDateTime_Delta*
  %days15 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %24, i32 0, i32 2
  %25 = load i32, i32* %days15, align 4
  %cmp16 = icmp sge i32 %25, 1
  br i1 %cmp16, label %if.then.17, label %if.end.19

if.then.17:                                       ; preds = %lor.lhs.false.14, %lor.lhs.false.11, %land.lhs.true.8
  %26 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %27 = load %struct._object*, %struct._object** %offset.addr, align 8
  %call18 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %26, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.166, i32 0, i32 0), %struct._object* %27)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %lor.lhs.false.14
  %28 = load %struct._object*, %struct._object** %offset.addr, align 8
  %29 = load %struct._object*, %struct._object** %name.addr, align 8
  %call20 = call %struct._object* @create_timezone(%struct._object* %28, %struct._object* %29)
  store %struct._object* %call20, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.17, %if.then.4, %if.then
  %30 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %30
}

declare %struct._object* @PyNumber_FloorDivide(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_getstate(%struct.PyDateTime_DateTime* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %basestate = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arraydecay = getelementptr inbounds [10 x i8], [10 x i8]* %data, i32 0, i32 0
  %call = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay, i64 10)
  store %struct._object* %call, %struct._object** %basestate, align 8
  %1 = load %struct._object*, %struct._object** %basestate, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %3 = bitcast %struct.PyDateTime_DateTime* %2 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %3, i32 0, i32 2
  %4 = load i8, i8* %hastzinfo, align 1
  %tobool = icmp ne i8 %4, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then.2

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %5, i32 0, i32 4
  %6 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp1 = icmp eq %struct._object* %6, @_Py_NoneStruct
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %lor.lhs.false, %if.then
  %7 = load %struct._object*, %struct._object** %basestate, align 8
  %call3 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %7)
  store %struct._object* %call3, %struct._object** %result, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** %basestate, align 8
  %9 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo4 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %9, i32 0, i32 4
  %10 = load %struct._object*, %struct._object** %tzinfo4, align 8
  %call5 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %8, %struct._object* %10)
  store %struct._object* %call5, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %do.body

do.body:                                          ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %basestate, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else.8

if.then.7:                                        ; preds = %do.body
  br label %if.end.9

if.else.8:                                        ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else.8, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %entry
  %18 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %18
}

declare %struct._object* @PyTuple_Pack(i64, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_hour(%struct.PyDateTime_DateTime* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 4
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_minute(%struct.PyDateTime_DateTime* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 5
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_second(%struct.PyDateTime_DateTime* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 6
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_microsecond(%struct.PyDateTime_DateTime* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %0, i32 0, i32 3
  %arrayidx = getelementptr [10 x i8], [10 x i8]* %data, i32 0, i64 7
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 16
  %2 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [10 x i8], [10 x i8]* %data1, i32 0, i64 8
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %shl4 = shl i32 %conv3, 8
  %or = or i32 %shl, %shl4
  %4 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %data5 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %4, i32 0, i32 3
  %arrayidx6 = getelementptr [10 x i8], [10 x i8]* %data5, i32 0, i64 9
  %5 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %5 to i32
  %or8 = or i32 %or, %conv7
  %conv9 = sext i32 %or8 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv9)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @datetime_tzinfo(%struct.PyDateTime_DateTime* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_DateTime*, align 8
  %unused.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  store %struct.PyDateTime_DateTime* %self, %struct.PyDateTime_DateTime** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %4, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %result, align 8
  %5 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %7 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %7
}

declare i8* @PyObject_Malloc(i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @check_time_args(i32 %h, i32 %m, i32 %s, i32 %us) #0 {
entry:
  %retval = alloca i32, align 4
  %h.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %s.addr = alloca i32, align 4
  %us.addr = alloca i32, align 4
  store i32 %h, i32* %h.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %s, i32* %s.addr, align 4
  store i32 %us, i32* %us.addr, align 4
  %0 = load i32, i32* %h.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %h.addr, align 4
  %cmp1 = icmp sgt i32 %1, 23
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.169, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %m.addr, align 4
  %cmp2 = icmp slt i32 %3, 0
  br i1 %cmp2, label %if.then.5, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %if.end
  %4 = load i32, i32* %m.addr, align 4
  %cmp4 = icmp sgt i32 %4, 59
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %lor.lhs.false.3, %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %lor.lhs.false.3
  %6 = load i32, i32* %s.addr, align 4
  %cmp7 = icmp slt i32 %6, 0
  br i1 %cmp7, label %if.then.10, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end.6
  %7 = load i32, i32* %s.addr, align 4
  %cmp9 = icmp sgt i32 %7, 59
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %lor.lhs.false.8, %if.end.6
  %8 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.171, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false.8
  %9 = load i32, i32* %us.addr, align 4
  %cmp12 = icmp slt i32 %9, 0
  br i1 %cmp12, label %if.then.15, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %if.end.11
  %10 = load i32, i32* %us.addr, align 4
  %cmp14 = icmp sgt i32 %10, 999999
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %lor.lhs.false.13, %if.end.11
  %11 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %11, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.172, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %lor.lhs.false.13
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.then.15, %if.then.10, %if.then.5, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_repr(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 4
  %1 = load i32, i32* %microseconds, align 4
  %cmp = icmp ne i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %3 = bitcast %struct.PyDateTime_Delta* %2 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 1
  %5 = load i8*, i8** %tp_name, align 8
  %6 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %6, i32 0, i32 2
  %7 = load i32, i32* %days, align 4
  %8 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %8, i32 0, i32 3
  %9 = load i32, i32* %seconds, align 4
  %10 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds1 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %10, i32 0, i32 4
  %11 = load i32, i32* %microseconds1, align 4
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* %5, i32 %7, i32 %9, i32 %11)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %12 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds2 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %12, i32 0, i32 3
  %13 = load i32, i32* %seconds2, align 4
  %cmp3 = icmp ne i32 %13, 0
  br i1 %cmp3, label %if.then.4, label %if.end.10

if.then.4:                                        ; preds = %if.end
  %14 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %15 = bitcast %struct.PyDateTime_Delta* %14 to %struct._object*
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %tp_name6 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 1
  %17 = load i8*, i8** %tp_name6, align 8
  %18 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days7 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %18, i32 0, i32 2
  %19 = load i32, i32* %days7, align 4
  %20 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds8 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %20, i32 0, i32 3
  %21 = load i32, i32* %seconds8, align 4
  %call9 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.174, i32 0, i32 0), i8* %17, i32 %19, i32 %21)
  store %struct._object* %call9, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  %22 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %23 = bitcast %struct.PyDateTime_Delta* %22 to %struct._object*
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_name12 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 1
  %25 = load i8*, i8** %tp_name12, align 8
  %26 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days13 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %26, i32 0, i32 2
  %27 = load i32, i32* %days13, align 4
  %call14 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.175, i32 0, i32 0), i8* %25, i32 %27)
  store %struct._object* %call14, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.4, %if.then
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal i64 @delta_hash(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 1
  %1 = load i64, i64* %hashcode, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %call = call %struct._object* @delta_getstate(%struct.PyDateTime_Delta* %2)
  store %struct._object* %call, %struct._object** %temp, align 8
  %3 = load %struct._object*, %struct._object** %temp, align 8
  %cmp1 = icmp ne %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %temp, align 8
  %call3 = call i64 @PyObject_Hash(%struct._object* %4)
  %5 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %hashcode4 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %5, i32 0, i32 1
  store i64 %call3, i64* %hashcode4, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %6 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %if.then
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.7, %entry
  %13 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %hashcode9 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %13, i32 0, i32 1
  %14 = load i64, i64* %hashcode9, align 8
  ret i64 %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_str(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  %us = alloca i32, align 4
  %seconds = alloca i32, align 4
  %minutes = alloca i32, align 4
  %hours = alloca i32, align 4
  %days = alloca i32, align 4
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 4
  %1 = load i32, i32* %microseconds, align 4
  store i32 %1, i32* %us, align 4
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds1 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %2, i32 0, i32 3
  %3 = load i32, i32* %seconds1, align 4
  store i32 %3, i32* %seconds, align 4
  %4 = load i32, i32* %seconds, align 4
  %call = call i32 @divmod(i32 %4, i32 60, i32* %seconds)
  store i32 %call, i32* %minutes, align 4
  %5 = load i32, i32* %minutes, align 4
  %call2 = call i32 @divmod(i32 %5, i32 60, i32* %minutes)
  store i32 %call2, i32* %hours, align 4
  %6 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days3 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %6, i32 0, i32 2
  %7 = load i32, i32* %days3, align 4
  store i32 %7, i32* %days, align 4
  %8 = load i32, i32* %days, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %if.then, label %if.else.14

if.then:                                          ; preds = %entry
  %9 = load i32, i32* %us, align 4
  %tobool4 = icmp ne i32 %9, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then
  %10 = load i32, i32* %days, align 4
  %11 = load i32, i32* %days, align 4
  %cmp = icmp eq i32 %11, 1
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.then.5
  %12 = load i32, i32* %days, align 4
  %cmp6 = icmp eq i32 %12, -1
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.then.5
  %13 = phi i1 [ true, %if.then.5 ], [ %cmp6, %lor.rhs ]
  %cond = select i1 %13, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.179, i32 0, i32 0)
  %14 = load i32, i32* %hours, align 4
  %15 = load i32, i32* %minutes, align 4
  %16 = load i32, i32* %seconds, align 4
  %17 = load i32, i32* %us, align 4
  %call7 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.178, i32 0, i32 0), i32 %10, i8* %cond, i32 %14, i32 %15, i32 %16, i32 %17)
  store %struct._object* %call7, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %if.then
  %18 = load i32, i32* %days, align 4
  %19 = load i32, i32* %days, align 4
  %cmp8 = icmp eq i32 %19, 1
  br i1 %cmp8, label %lor.end.11, label %lor.rhs.9

lor.rhs.9:                                        ; preds = %if.else
  %20 = load i32, i32* %days, align 4
  %cmp10 = icmp eq i32 %20, -1
  br label %lor.end.11

lor.end.11:                                       ; preds = %lor.rhs.9, %if.else
  %21 = phi i1 [ true, %if.else ], [ %cmp10, %lor.rhs.9 ]
  %cond12 = select i1 %21, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.179, i32 0, i32 0)
  %22 = load i32, i32* %hours, align 4
  %23 = load i32, i32* %minutes, align 4
  %24 = load i32, i32* %seconds, align 4
  %call13 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.180, i32 0, i32 0), i32 %18, i8* %cond12, i32 %22, i32 %23, i32 %24)
  store %struct._object* %call13, %struct._object** %retval
  br label %return

if.else.14:                                       ; preds = %entry
  %25 = load i32, i32* %us, align 4
  %tobool15 = icmp ne i32 %25, 0
  br i1 %tobool15, label %if.then.16, label %if.else.18

if.then.16:                                       ; preds = %if.else.14
  %26 = load i32, i32* %hours, align 4
  %27 = load i32, i32* %minutes, align 4
  %28 = load i32, i32* %seconds, align 4
  %29 = load i32, i32* %us, align 4
  %call17 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.181, i32 0, i32 0), i32 %26, i32 %27, i32 %28, i32 %29)
  store %struct._object* %call17, %struct._object** %retval
  br label %return

if.else.18:                                       ; preds = %if.else.14
  %30 = load i32, i32* %hours, align 4
  %31 = load i32, i32* %minutes, align 4
  %32 = load i32, i32* %seconds, align 4
  %call19 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.182, i32 0, i32 0), i32 %30, i32 %31, i32 %32)
  store %struct._object* %call19, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else.18, %if.then.16, %lor.end.11, %lor.end
  %33 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %33
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_richcompare(%struct._object* %self, %struct._object* %other, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %diff = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = load %struct._object*, %struct._object** %other.addr, align 8
  %call2 = call i32 @delta_cmp(%struct._object* %4, %struct._object* %5)
  store i32 %call2, i32* %diff, align 4
  %6 = load i32, i32* %diff, align 4
  %7 = load i32, i32* %op.addr, align 4
  %call3 = call %struct._object* @diff_to_bool(i32 %6, i32 %7)
  store %struct._object* %call3, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %lor.lhs.false
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %self = alloca %struct._object*, align 8
  %day = alloca %struct._object*, align 8
  %second = alloca %struct._object*, align 8
  %us = alloca %struct._object*, align 8
  %ms = alloca %struct._object*, align 8
  %minute = alloca %struct._object*, align 8
  %hour = alloca %struct._object*, align 8
  %week = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  %y = alloca %struct._object*, align 8
  %leftover_us = alloca double, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %_py_decref_tmp72 = alloca %struct._object*, align 8
  %_py_decref_tmp90 = alloca %struct._object*, align 8
  %_py_decref_tmp108 = alloca %struct._object*, align 8
  %whole_us = alloca double, align 8
  %x_is_odd = alloca i32, align 4
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp133 = alloca %struct._object*, align 8
  %_py_decref_tmp146 = alloca %struct._object*, align 8
  %_py_decref_tmp159 = alloca %struct._object*, align 8
  %_py_decref_tmp181 = alloca %struct._object*, align 8
  %_py_decref_tmp195 = alloca %struct._object*, align 8
  %_py_decref_tmp207 = alloca %struct._object*, align 8
  %_py_decref_tmp225 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %self, align 8
  store %struct._object* null, %struct._object** %day, align 8
  store %struct._object* null, %struct._object** %second, align 8
  store %struct._object* null, %struct._object** %us, align 8
  store %struct._object* null, %struct._object** %ms, align 8
  store %struct._object* null, %struct._object** %minute, align 8
  store %struct._object* null, %struct._object** %hour, align 8
  store %struct._object* null, %struct._object** %week, align 8
  store %struct._object* null, %struct._object** %x, align 8
  store %struct._object* null, %struct._object** %y, align 8
  store double 0.000000e+00, double* %leftover_us, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.196, i32 0, i32 0), i8** getelementptr inbounds ([8 x i8*], [8 x i8*]* @delta_new.keywords, i32 0, i32 0), %struct._object** %day, %struct._object** %second, %struct._object** %us, %struct._object** %ms, %struct._object** %minute, %struct._object** %hour, %struct._object** %week)
  %cmp = icmp eq i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %Done

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyLong_FromLong(i64 0)
  store %struct._object* %call1, %struct._object** %x, align 8
  %2 = load %struct._object*, %struct._object** %x, align 8
  %cmp2 = icmp eq %struct._object* %2, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %Done

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %us, align 8
  %tobool = icmp ne %struct._object* %3, null
  br i1 %tobool, label %if.then.5, label %if.end.13

if.then.5:                                        ; preds = %if.end.4
  %4 = load %struct._object*, %struct._object** %x, align 8
  %5 = load %struct._object*, %struct._object** %us, align 8
  %6 = load %struct._object*, %struct._object** @one, align 8
  %call6 = call %struct._object* @accum(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.190, i32 0, i32 0), %struct._object* %4, %struct._object* %5, %struct._object* %6, double* %leftover_us)
  store %struct._object* %call6, %struct._object** %y, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %7 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %14 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %14, %struct._object** %x, align 8
  %15 = load %struct._object*, %struct._object** %x, align 8
  %cmp10 = icmp eq %struct._object* %15, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %do.end
  br label %Done

if.end.12:                                        ; preds = %do.end
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.12, %if.end.4
  %16 = load %struct._object*, %struct._object** %ms, align 8
  %tobool14 = icmp ne %struct._object* %16, null
  br i1 %tobool14, label %if.then.15, label %if.end.31

if.then.15:                                       ; preds = %if.end.13
  %17 = load %struct._object*, %struct._object** %x, align 8
  %18 = load %struct._object*, %struct._object** %ms, align 8
  %19 = load %struct._object*, %struct._object** @us_per_ms, align 8
  %call16 = call %struct._object* @accum(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.192, i32 0, i32 0), %struct._object* %17, %struct._object* %18, %struct._object* %19, double* %leftover_us)
  store %struct._object* %call16, %struct._object** %y, align 8
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.15
  %20 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp18, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %22, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %25(%struct._object* %26)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  %27 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %27, %struct._object** %x, align 8
  %28 = load %struct._object*, %struct._object** %x, align 8
  %cmp28 = icmp eq %struct._object* %28, null
  br i1 %cmp28, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %do.end.27
  br label %Done

if.end.30:                                        ; preds = %do.end.27
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.end.13
  %29 = load %struct._object*, %struct._object** %second, align 8
  %tobool32 = icmp ne %struct._object* %29, null
  br i1 %tobool32, label %if.then.33, label %if.end.49

if.then.33:                                       ; preds = %if.end.31
  %30 = load %struct._object*, %struct._object** %x, align 8
  %31 = load %struct._object*, %struct._object** %second, align 8
  %32 = load %struct._object*, %struct._object** @us_per_second, align 8
  %call34 = call %struct._object* @accum(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.188, i32 0, i32 0), %struct._object* %30, %struct._object* %31, %struct._object* %32, double* %leftover_us)
  store %struct._object* %call34, %struct._object** %y, align 8
  br label %do.body.35

do.body.35:                                       ; preds = %if.then.33
  %33 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %33, %struct._object** %_py_decref_tmp36, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt37, align 8
  %dec38 = add i64 %35, -1
  store i64 %dec38, i64* %ob_refcnt37, align 8
  %cmp39 = icmp ne i64 %dec38, 0
  br i1 %cmp39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %do.body.35
  br label %if.end.44

if.else.41:                                       ; preds = %do.body.35
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_type42 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type42, align 8
  %tp_dealloc43 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc43, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  call void %38(%struct._object* %39)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.41, %if.then.40
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  %40 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %40, %struct._object** %x, align 8
  %41 = load %struct._object*, %struct._object** %x, align 8
  %cmp46 = icmp eq %struct._object* %41, null
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %do.end.45
  br label %Done

if.end.48:                                        ; preds = %do.end.45
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %if.end.31
  %42 = load %struct._object*, %struct._object** %minute, align 8
  %tobool50 = icmp ne %struct._object* %42, null
  br i1 %tobool50, label %if.then.51, label %if.end.67

if.then.51:                                       ; preds = %if.end.49
  %43 = load %struct._object*, %struct._object** %x, align 8
  %44 = load %struct._object*, %struct._object** %minute, align 8
  %45 = load %struct._object*, %struct._object** @us_per_minute, align 8
  %call52 = call %struct._object* @accum(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.193, i32 0, i32 0), %struct._object* %43, %struct._object* %44, %struct._object* %45, double* %leftover_us)
  store %struct._object* %call52, %struct._object** %y, align 8
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.51
  %46 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp54, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %48, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.58, label %if.else.59

if.then.58:                                       ; preds = %do.body.53
  br label %if.end.62

if.else.59:                                       ; preds = %do.body.53
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8
  %tp_dealloc61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc61, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %51(%struct._object* %52)
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.59, %if.then.58
  br label %do.end.63

do.end.63:                                        ; preds = %if.end.62
  %53 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %53, %struct._object** %x, align 8
  %54 = load %struct._object*, %struct._object** %x, align 8
  %cmp64 = icmp eq %struct._object* %54, null
  br i1 %cmp64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %do.end.63
  br label %Done

if.end.66:                                        ; preds = %do.end.63
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %if.end.49
  %55 = load %struct._object*, %struct._object** %hour, align 8
  %tobool68 = icmp ne %struct._object* %55, null
  br i1 %tobool68, label %if.then.69, label %if.end.85

if.then.69:                                       ; preds = %if.end.67
  %56 = load %struct._object*, %struct._object** %x, align 8
  %57 = load %struct._object*, %struct._object** %hour, align 8
  %58 = load %struct._object*, %struct._object** @us_per_hour, align 8
  %call70 = call %struct._object* @accum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.194, i32 0, i32 0), %struct._object* %56, %struct._object* %57, %struct._object* %58, double* %leftover_us)
  store %struct._object* %call70, %struct._object** %y, align 8
  br label %do.body.71

do.body.71:                                       ; preds = %if.then.69
  %59 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp72, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt73, align 8
  %dec74 = add i64 %61, -1
  store i64 %dec74, i64* %ob_refcnt73, align 8
  %cmp75 = icmp ne i64 %dec74, 0
  br i1 %cmp75, label %if.then.76, label %if.else.77

if.then.76:                                       ; preds = %do.body.71
  br label %if.end.80

if.else.77:                                       ; preds = %do.body.71
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp72, align 8
  call void %64(%struct._object* %65)
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  %66 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %66, %struct._object** %x, align 8
  %67 = load %struct._object*, %struct._object** %x, align 8
  %cmp82 = icmp eq %struct._object* %67, null
  br i1 %cmp82, label %if.then.83, label %if.end.84

if.then.83:                                       ; preds = %do.end.81
  br label %Done

if.end.84:                                        ; preds = %do.end.81
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.end.67
  %68 = load %struct._object*, %struct._object** %day, align 8
  %tobool86 = icmp ne %struct._object* %68, null
  br i1 %tobool86, label %if.then.87, label %if.end.103

if.then.87:                                       ; preds = %if.end.85
  %69 = load %struct._object*, %struct._object** %x, align 8
  %70 = load %struct._object*, %struct._object** %day, align 8
  %71 = load %struct._object*, %struct._object** @us_per_day, align 8
  %call88 = call %struct._object* @accum(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.186, i32 0, i32 0), %struct._object* %69, %struct._object* %70, %struct._object* %71, double* %leftover_us)
  store %struct._object* %call88, %struct._object** %y, align 8
  br label %do.body.89

do.body.89:                                       ; preds = %if.then.87
  %72 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %72, %struct._object** %_py_decref_tmp90, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_refcnt91 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt91, align 8
  %dec92 = add i64 %74, -1
  store i64 %dec92, i64* %ob_refcnt91, align 8
  %cmp93 = icmp ne i64 %dec92, 0
  br i1 %cmp93, label %if.then.94, label %if.else.95

if.then.94:                                       ; preds = %do.body.89
  br label %if.end.98

if.else.95:                                       ; preds = %do.body.89
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_type96 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type96, align 8
  %tp_dealloc97 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 4
  %77 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc97, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  call void %77(%struct._object* %78)
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.95, %if.then.94
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  %79 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %79, %struct._object** %x, align 8
  %80 = load %struct._object*, %struct._object** %x, align 8
  %cmp100 = icmp eq %struct._object* %80, null
  br i1 %cmp100, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %do.end.99
  br label %Done

if.end.102:                                       ; preds = %do.end.99
  br label %if.end.103

if.end.103:                                       ; preds = %if.end.102, %if.end.85
  %81 = load %struct._object*, %struct._object** %week, align 8
  %tobool104 = icmp ne %struct._object* %81, null
  br i1 %tobool104, label %if.then.105, label %if.end.121

if.then.105:                                      ; preds = %if.end.103
  %82 = load %struct._object*, %struct._object** %x, align 8
  %83 = load %struct._object*, %struct._object** %week, align 8
  %84 = load %struct._object*, %struct._object** @us_per_week, align 8
  %call106 = call %struct._object* @accum(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.195, i32 0, i32 0), %struct._object* %82, %struct._object* %83, %struct._object* %84, double* %leftover_us)
  store %struct._object* %call106, %struct._object** %y, align 8
  br label %do.body.107

do.body.107:                                      ; preds = %if.then.105
  %85 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %85, %struct._object** %_py_decref_tmp108, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8
  %ob_refcnt109 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 0
  %87 = load i64, i64* %ob_refcnt109, align 8
  %dec110 = add i64 %87, -1
  store i64 %dec110, i64* %ob_refcnt109, align 8
  %cmp111 = icmp ne i64 %dec110, 0
  br i1 %cmp111, label %if.then.112, label %if.else.113

if.then.112:                                      ; preds = %do.body.107
  br label %if.end.116

if.else.113:                                      ; preds = %do.body.107
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8
  %ob_type114 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type114, align 8
  %tp_dealloc115 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %89, i32 0, i32 4
  %90 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc115, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8
  call void %90(%struct._object* %91)
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.113, %if.then.112
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  %92 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %92, %struct._object** %x, align 8
  %93 = load %struct._object*, %struct._object** %x, align 8
  %cmp118 = icmp eq %struct._object* %93, null
  br i1 %cmp118, label %if.then.119, label %if.end.120

if.then.119:                                      ; preds = %do.end.117
  br label %Done

if.end.120:                                       ; preds = %do.end.117
  br label %if.end.121

if.end.121:                                       ; preds = %if.end.120, %if.end.103
  %94 = load double, double* %leftover_us, align 8
  %tobool122 = fcmp une double %94, 0.000000e+00
  br i1 %tobool122, label %if.then.123, label %if.end.222

if.then.123:                                      ; preds = %if.end.121
  %95 = load double, double* %leftover_us, align 8
  %call124 = call double @round(double %95) #7
  store double %call124, double* %whole_us, align 8
  %96 = load double, double* %leftover_us, align 8
  %call125 = call double @round(double %96) #7
  store double %call125, double* %whole_us, align 8
  %97 = load double, double* %whole_us, align 8
  %98 = load double, double* %leftover_us, align 8
  %sub = fsub double %97, %98
  %call126 = call double @fabs(double %sub) #7
  %cmp127 = fcmp oeq double %call126, 5.000000e-01
  br i1 %cmp127, label %if.then.128, label %if.end.174

if.then.128:                                      ; preds = %if.then.123
  %99 = load %struct._object*, %struct._object** %x, align 8
  %100 = load %struct._object*, %struct._object** @one, align 8
  %call129 = call %struct._object* @PyNumber_And(%struct._object* %99, %struct._object* %100)
  store %struct._object* %call129, %struct._object** %temp, align 8
  %101 = load %struct._object*, %struct._object** %temp, align 8
  %cmp130 = icmp eq %struct._object* %101, null
  br i1 %cmp130, label %if.then.131, label %if.end.143

if.then.131:                                      ; preds = %if.then.128
  br label %do.body.132

do.body.132:                                      ; preds = %if.then.131
  %102 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %102, %struct._object** %_py_decref_tmp133, align 8
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  %ob_refcnt134 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 0
  %104 = load i64, i64* %ob_refcnt134, align 8
  %dec135 = add i64 %104, -1
  store i64 %dec135, i64* %ob_refcnt134, align 8
  %cmp136 = icmp ne i64 %dec135, 0
  br i1 %cmp136, label %if.then.137, label %if.else.138

if.then.137:                                      ; preds = %do.body.132
  br label %if.end.141

if.else.138:                                      ; preds = %do.body.132
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  %ob_type139 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 1
  %106 = load %struct._typeobject*, %struct._typeobject** %ob_type139, align 8
  %tp_dealloc140 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %106, i32 0, i32 4
  %107 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc140, align 8
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp133, align 8
  call void %107(%struct._object* %108)
  br label %if.end.141

if.end.141:                                       ; preds = %if.else.138, %if.then.137
  br label %do.end.142

do.end.142:                                       ; preds = %if.end.141
  br label %Done

if.end.143:                                       ; preds = %if.then.128
  %109 = load %struct._object*, %struct._object** %temp, align 8
  %call144 = call i32 @PyObject_IsTrue(%struct._object* %109)
  store i32 %call144, i32* %x_is_odd, align 4
  br label %do.body.145

do.body.145:                                      ; preds = %if.end.143
  %110 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %110, %struct._object** %_py_decref_tmp146, align 8
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  %ob_refcnt147 = getelementptr inbounds %struct._object, %struct._object* %111, i32 0, i32 0
  %112 = load i64, i64* %ob_refcnt147, align 8
  %dec148 = add i64 %112, -1
  store i64 %dec148, i64* %ob_refcnt147, align 8
  %cmp149 = icmp ne i64 %dec148, 0
  br i1 %cmp149, label %if.then.150, label %if.else.151

if.then.150:                                      ; preds = %do.body.145
  br label %if.end.154

if.else.151:                                      ; preds = %do.body.145
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  %ob_type152 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 1
  %114 = load %struct._typeobject*, %struct._typeobject** %ob_type152, align 8
  %tp_dealloc153 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %114, i32 0, i32 4
  %115 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc153, align 8
  %116 = load %struct._object*, %struct._object** %_py_decref_tmp146, align 8
  call void %115(%struct._object* %116)
  br label %if.end.154

if.end.154:                                       ; preds = %if.else.151, %if.then.150
  br label %do.end.155

do.end.155:                                       ; preds = %if.end.154
  %117 = load i32, i32* %x_is_odd, align 4
  %cmp156 = icmp eq i32 %117, -1
  br i1 %cmp156, label %if.then.157, label %if.end.169

if.then.157:                                      ; preds = %do.end.155
  br label %do.body.158

do.body.158:                                      ; preds = %if.then.157
  %118 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %118, %struct._object** %_py_decref_tmp159, align 8
  %119 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  %ob_refcnt160 = getelementptr inbounds %struct._object, %struct._object* %119, i32 0, i32 0
  %120 = load i64, i64* %ob_refcnt160, align 8
  %dec161 = add i64 %120, -1
  store i64 %dec161, i64* %ob_refcnt160, align 8
  %cmp162 = icmp ne i64 %dec161, 0
  br i1 %cmp162, label %if.then.163, label %if.else.164

if.then.163:                                      ; preds = %do.body.158
  br label %if.end.167

if.else.164:                                      ; preds = %do.body.158
  %121 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  %ob_type165 = getelementptr inbounds %struct._object, %struct._object* %121, i32 0, i32 1
  %122 = load %struct._typeobject*, %struct._typeobject** %ob_type165, align 8
  %tp_dealloc166 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %122, i32 0, i32 4
  %123 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc166, align 8
  %124 = load %struct._object*, %struct._object** %_py_decref_tmp159, align 8
  call void %123(%struct._object* %124)
  br label %if.end.167

if.end.167:                                       ; preds = %if.else.164, %if.then.163
  br label %do.end.168

do.end.168:                                       ; preds = %if.end.167
  br label %Done

if.end.169:                                       ; preds = %do.end.155
  %125 = load double, double* %leftover_us, align 8
  %126 = load i32, i32* %x_is_odd, align 4
  %conv = sitofp i32 %126 to double
  %add = fadd double %125, %conv
  %mul = fmul double %add, 5.000000e-01
  %call170 = call double @round(double %mul) #7
  %mul171 = fmul double 2.000000e+00, %call170
  %127 = load i32, i32* %x_is_odd, align 4
  %conv172 = sitofp i32 %127 to double
  %sub173 = fsub double %mul171, %conv172
  store double %sub173, double* %whole_us, align 8
  br label %if.end.174

if.end.174:                                       ; preds = %if.end.169, %if.then.123
  %128 = load double, double* %whole_us, align 8
  %conv175 = fptosi double %128 to i64
  %call176 = call %struct._object* @PyLong_FromLong(i64 %conv175)
  store %struct._object* %call176, %struct._object** %temp, align 8
  %129 = load %struct._object*, %struct._object** %temp, align 8
  %cmp177 = icmp eq %struct._object* %129, null
  br i1 %cmp177, label %if.then.179, label %if.end.192

if.then.179:                                      ; preds = %if.end.174
  br label %do.body.180

do.body.180:                                      ; preds = %if.then.179
  %130 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %130, %struct._object** %_py_decref_tmp181, align 8
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  %ob_refcnt182 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 0
  %132 = load i64, i64* %ob_refcnt182, align 8
  %dec183 = add i64 %132, -1
  store i64 %dec183, i64* %ob_refcnt182, align 8
  %cmp184 = icmp ne i64 %dec183, 0
  br i1 %cmp184, label %if.then.186, label %if.else.187

if.then.186:                                      ; preds = %do.body.180
  br label %if.end.190

if.else.187:                                      ; preds = %do.body.180
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  %ob_type188 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 1
  %134 = load %struct._typeobject*, %struct._typeobject** %ob_type188, align 8
  %tp_dealloc189 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %134, i32 0, i32 4
  %135 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc189, align 8
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  call void %135(%struct._object* %136)
  br label %if.end.190

if.end.190:                                       ; preds = %if.else.187, %if.then.186
  br label %do.end.191

do.end.191:                                       ; preds = %if.end.190
  br label %Done

if.end.192:                                       ; preds = %if.end.174
  %137 = load %struct._object*, %struct._object** %x, align 8
  %138 = load %struct._object*, %struct._object** %temp, align 8
  %call193 = call %struct._object* @PyNumber_Add(%struct._object* %137, %struct._object* %138)
  store %struct._object* %call193, %struct._object** %y, align 8
  br label %do.body.194

do.body.194:                                      ; preds = %if.end.192
  %139 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %139, %struct._object** %_py_decref_tmp195, align 8
  %140 = load %struct._object*, %struct._object** %_py_decref_tmp195, align 8
  %ob_refcnt196 = getelementptr inbounds %struct._object, %struct._object* %140, i32 0, i32 0
  %141 = load i64, i64* %ob_refcnt196, align 8
  %dec197 = add i64 %141, -1
  store i64 %dec197, i64* %ob_refcnt196, align 8
  %cmp198 = icmp ne i64 %dec197, 0
  br i1 %cmp198, label %if.then.200, label %if.else.201

if.then.200:                                      ; preds = %do.body.194
  br label %if.end.204

if.else.201:                                      ; preds = %do.body.194
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp195, align 8
  %ob_type202 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 1
  %143 = load %struct._typeobject*, %struct._typeobject** %ob_type202, align 8
  %tp_dealloc203 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %143, i32 0, i32 4
  %144 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc203, align 8
  %145 = load %struct._object*, %struct._object** %_py_decref_tmp195, align 8
  call void %144(%struct._object* %145)
  br label %if.end.204

if.end.204:                                       ; preds = %if.else.201, %if.then.200
  br label %do.end.205

do.end.205:                                       ; preds = %if.end.204
  br label %do.body.206

do.body.206:                                      ; preds = %do.end.205
  %146 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %146, %struct._object** %_py_decref_tmp207, align 8
  %147 = load %struct._object*, %struct._object** %_py_decref_tmp207, align 8
  %ob_refcnt208 = getelementptr inbounds %struct._object, %struct._object* %147, i32 0, i32 0
  %148 = load i64, i64* %ob_refcnt208, align 8
  %dec209 = add i64 %148, -1
  store i64 %dec209, i64* %ob_refcnt208, align 8
  %cmp210 = icmp ne i64 %dec209, 0
  br i1 %cmp210, label %if.then.212, label %if.else.213

if.then.212:                                      ; preds = %do.body.206
  br label %if.end.216

if.else.213:                                      ; preds = %do.body.206
  %149 = load %struct._object*, %struct._object** %_py_decref_tmp207, align 8
  %ob_type214 = getelementptr inbounds %struct._object, %struct._object* %149, i32 0, i32 1
  %150 = load %struct._typeobject*, %struct._typeobject** %ob_type214, align 8
  %tp_dealloc215 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %150, i32 0, i32 4
  %151 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc215, align 8
  %152 = load %struct._object*, %struct._object** %_py_decref_tmp207, align 8
  call void %151(%struct._object* %152)
  br label %if.end.216

if.end.216:                                       ; preds = %if.else.213, %if.then.212
  br label %do.end.217

do.end.217:                                       ; preds = %if.end.216
  %153 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %153, %struct._object** %x, align 8
  %154 = load %struct._object*, %struct._object** %x, align 8
  %cmp218 = icmp eq %struct._object* %154, null
  br i1 %cmp218, label %if.then.220, label %if.end.221

if.then.220:                                      ; preds = %do.end.217
  br label %Done

if.end.221:                                       ; preds = %do.end.217
  br label %if.end.222

if.end.222:                                       ; preds = %if.end.221, %if.end.121
  %155 = load %struct._object*, %struct._object** %x, align 8
  %156 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call223 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %155, %struct._typeobject* %156)
  store %struct._object* %call223, %struct._object** %self, align 8
  br label %do.body.224

do.body.224:                                      ; preds = %if.end.222
  %157 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %157, %struct._object** %_py_decref_tmp225, align 8
  %158 = load %struct._object*, %struct._object** %_py_decref_tmp225, align 8
  %ob_refcnt226 = getelementptr inbounds %struct._object, %struct._object* %158, i32 0, i32 0
  %159 = load i64, i64* %ob_refcnt226, align 8
  %dec227 = add i64 %159, -1
  store i64 %dec227, i64* %ob_refcnt226, align 8
  %cmp228 = icmp ne i64 %dec227, 0
  br i1 %cmp228, label %if.then.230, label %if.else.231

if.then.230:                                      ; preds = %do.body.224
  br label %if.end.234

if.else.231:                                      ; preds = %do.body.224
  %160 = load %struct._object*, %struct._object** %_py_decref_tmp225, align 8
  %ob_type232 = getelementptr inbounds %struct._object, %struct._object* %160, i32 0, i32 1
  %161 = load %struct._typeobject*, %struct._typeobject** %ob_type232, align 8
  %tp_dealloc233 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %161, i32 0, i32 4
  %162 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc233, align 8
  %163 = load %struct._object*, %struct._object** %_py_decref_tmp225, align 8
  call void %162(%struct._object* %163)
  br label %if.end.234

if.end.234:                                       ; preds = %if.else.231, %if.then.230
  br label %do.end.235

do.end.235:                                       ; preds = %if.end.234
  br label %Done

Done:                                             ; preds = %do.end.235, %if.then.220, %do.end.191, %do.end.168, %do.end.142, %if.then.119, %if.then.101, %if.then.83, %if.then.65, %if.then.47, %if.then.29, %if.then.11, %if.then.3, %if.then
  %164 = load %struct._object*, %struct._object** %self, align 8
  ret %struct._object* %164
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_add(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %days = alloca i32, align 4
  %seconds = alloca i32, align 4
  %microseconds = alloca i32, align 4
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, @PyDateTime_DeltaType
  br i1 %cmp3, label %if.then, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.4, %land.lhs.true
  %8 = load %struct._object*, %struct._object** %left.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_Delta*
  %days8 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %9, i32 0, i32 2
  %10 = load i32, i32* %days8, align 4
  %11 = load %struct._object*, %struct._object** %right.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDateTime_Delta*
  %days9 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %12, i32 0, i32 2
  %13 = load i32, i32* %days9, align 4
  %add = add i32 %10, %13
  store i32 %add, i32* %days, align 4
  %14 = load %struct._object*, %struct._object** %left.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDateTime_Delta*
  %seconds10 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %15, i32 0, i32 3
  %16 = load i32, i32* %seconds10, align 4
  %17 = load %struct._object*, %struct._object** %right.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Delta*
  %seconds11 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %18, i32 0, i32 3
  %19 = load i32, i32* %seconds11, align 4
  %add12 = add i32 %16, %19
  store i32 %add12, i32* %seconds, align 4
  %20 = load %struct._object*, %struct._object** %left.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDateTime_Delta*
  %microseconds13 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %21, i32 0, i32 4
  %22 = load i32, i32* %microseconds13, align 4
  %23 = load %struct._object*, %struct._object** %right.addr, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyDateTime_Delta*
  %microseconds14 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %24, i32 0, i32 4
  %25 = load i32, i32* %microseconds14, align 4
  %add15 = add i32 %22, %25
  store i32 %add15, i32* %microseconds, align 4
  %26 = load i32, i32* %days, align 4
  %27 = load i32, i32* %seconds, align 4
  %28 = load i32, i32* %microseconds, align 4
  %call16 = call %struct._object* @new_delta_ex(i32 %26, i32 %27, i32 %28, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call16, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false.4, %lor.lhs.false
  %29 = load %struct._object*, %struct._object** %result, align 8
  %cmp17 = icmp eq %struct._object* %29, @_Py_NotImplementedStruct
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  %30 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %31, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.18, %if.end
  %32 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_multiply(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else.15

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 16777216
  %cmp3 = icmp ne i64 %and, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %7 = load %struct._object*, %struct._object** %right.addr, align 8
  %8 = load %struct._object*, %struct._object** %left.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_Delta*
  %call5 = call %struct._object* @multiply_int_timedelta(%struct._object* %7, %struct.PyDateTime_Delta* %9)
  store %struct._object* %call5, %struct._object** %result, align 8
  br label %if.end.14

if.else:                                          ; preds = %if.then
  %10 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %cmp7 = icmp eq %struct._typeobject* %11, @PyFloat_Type
  br i1 %cmp7, label %if.then.12, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.else
  %12 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %call10 = call i32 @PyType_IsSubtype(%struct._typeobject* %13, %struct._typeobject* @PyFloat_Type)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %lor.lhs.false.8, %if.else
  %14 = load %struct._object*, %struct._object** %right.addr, align 8
  %15 = load %struct._object*, %struct._object** %left.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyDateTime_Delta*
  %call13 = call %struct._object* @multiply_float_timedelta(%struct._object* %14, %struct.PyDateTime_Delta* %16)
  store %struct._object* %call13, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.12, %lor.lhs.false.8
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %if.then.4
  br label %if.end.33

if.else.15:                                       ; preds = %lor.lhs.false
  %17 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_flags17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 19
  %19 = load i64, i64* %tp_flags17, align 8
  %and18 = and i64 %19, 16777216
  %cmp19 = icmp ne i64 %and18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.22

if.then.20:                                       ; preds = %if.else.15
  %20 = load %struct._object*, %struct._object** %left.addr, align 8
  %21 = load %struct._object*, %struct._object** %right.addr, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyDateTime_Delta*
  %call21 = call %struct._object* @multiply_int_timedelta(%struct._object* %20, %struct.PyDateTime_Delta* %22)
  store %struct._object* %call21, %struct._object** %result, align 8
  br label %if.end.32

if.else.22:                                       ; preds = %if.else.15
  %23 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %cmp24 = icmp eq %struct._typeobject* %24, @PyFloat_Type
  br i1 %cmp24, label %if.then.29, label %lor.lhs.false.25

lor.lhs.false.25:                                 ; preds = %if.else.22
  %25 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %call27 = call i32 @PyType_IsSubtype(%struct._typeobject* %26, %struct._typeobject* @PyFloat_Type)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %lor.lhs.false.25, %if.else.22
  %27 = load %struct._object*, %struct._object** %left.addr, align 8
  %28 = load %struct._object*, %struct._object** %right.addr, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDateTime_Delta*
  %call30 = call %struct._object* @multiply_float_timedelta(%struct._object* %27, %struct.PyDateTime_Delta* %29)
  store %struct._object* %call30, %struct._object** %result, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.29, %lor.lhs.false.25
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %if.then.20
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %if.end.14
  %30 = load %struct._object*, %struct._object** %result, align 8
  %cmp34 = icmp eq %struct._object* %30, @_Py_NotImplementedStruct
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.33
  %31 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %32, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.35, %if.end.33
  %33 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %33
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_remainder(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %pyus_left = alloca %struct._object*, align 8
  %pyus_right = alloca %struct._object*, align 8
  %pyus_remainder = alloca %struct._object*, align 8
  %remainder = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %lor.lhs.false.2, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false.2, label %if.then

lor.lhs.false.2:                                  ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %cmp4 = icmp eq %struct._typeobject* %5, @PyDateTime_DeltaType
  br i1 %cmp4, label %if.end, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.2
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %call7 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.5, %lor.lhs.false
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.5, %lor.lhs.false.2
  %9 = load %struct._object*, %struct._object** %left.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDateTime_Delta*
  %call9 = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %10)
  store %struct._object* %call9, %struct._object** %pyus_left, align 8
  %11 = load %struct._object*, %struct._object** %pyus_left, align 8
  %cmp10 = icmp eq %struct._object* %11, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %right.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDateTime_Delta*
  %call13 = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %13)
  store %struct._object* %call13, %struct._object** %pyus_right, align 8
  %14 = load %struct._object*, %struct._object** %pyus_right, align 8
  %cmp14 = icmp eq %struct._object* %14, null
  br i1 %cmp14, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.then.15
  %15 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body
  br label %if.end.19

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.12
  %22 = load %struct._object*, %struct._object** %pyus_left, align 8
  %23 = load %struct._object*, %struct._object** %pyus_right, align 8
  %call21 = call %struct._object* @PyNumber_Remainder(%struct._object* %22, %struct._object* %23)
  store %struct._object* %call21, %struct._object** %pyus_remainder, align 8
  br label %do.body.22

do.body.22:                                       ; preds = %if.end.20
  %24 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp23, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %26, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.22
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.22
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %29(%struct._object* %30)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  br label %do.body.33

do.body.33:                                       ; preds = %do.end.32
  %31 = load %struct._object*, %struct._object** %pyus_right, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp34, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %33, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %36(%struct._object* %37)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  %38 = load %struct._object*, %struct._object** %pyus_remainder, align 8
  %cmp44 = icmp eq %struct._object* %38, null
  br i1 %cmp44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %do.end.43
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.46:                                        ; preds = %do.end.43
  %39 = load %struct._object*, %struct._object** %pyus_remainder, align 8
  %call47 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %39, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call47, %struct._object** %remainder, align 8
  br label %do.body.48

do.body.48:                                       ; preds = %if.end.46
  %40 = load %struct._object*, %struct._object** %pyus_remainder, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp49, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %42, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.48
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %45(%struct._object* %46)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  %47 = load %struct._object*, %struct._object** %remainder, align 8
  %cmp59 = icmp eq %struct._object* %47, null
  br i1 %cmp59, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %do.end.58
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.61:                                        ; preds = %do.end.58
  %48 = load %struct._object*, %struct._object** %remainder, align 8
  store %struct._object* %48, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.61, %if.then.60, %if.then.45, %do.end, %if.then.11, %if.then
  %49 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %49
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_divmod(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %pyus_left = alloca %struct._object*, align 8
  %pyus_right = alloca %struct._object*, align 8
  %divmod = alloca %struct._object*, align 8
  %delta = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_decref_tmp51 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %lor.lhs.false.2, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false.2, label %if.then

lor.lhs.false.2:                                  ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %cmp4 = icmp eq %struct._typeobject* %5, @PyDateTime_DeltaType
  br i1 %cmp4, label %if.end, label %lor.lhs.false.5

lor.lhs.false.5:                                  ; preds = %lor.lhs.false.2
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %call7 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false.5, %lor.lhs.false
  %8 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.5, %lor.lhs.false.2
  %9 = load %struct._object*, %struct._object** %left.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDateTime_Delta*
  %call9 = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %10)
  store %struct._object* %call9, %struct._object** %pyus_left, align 8
  %11 = load %struct._object*, %struct._object** %pyus_left, align 8
  %cmp10 = icmp eq %struct._object* %11, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %right.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDateTime_Delta*
  %call13 = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %13)
  store %struct._object* %call13, %struct._object** %pyus_right, align 8
  %14 = load %struct._object*, %struct._object** %pyus_right, align 8
  %cmp14 = icmp eq %struct._object* %14, null
  br i1 %cmp14, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.then.15
  %15 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body
  br label %if.end.19

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.12
  %22 = load %struct._object*, %struct._object** %pyus_left, align 8
  %23 = load %struct._object*, %struct._object** %pyus_right, align 8
  %call21 = call %struct._object* @PyNumber_Divmod(%struct._object* %22, %struct._object* %23)
  store %struct._object* %call21, %struct._object** %divmod, align 8
  br label %do.body.22

do.body.22:                                       ; preds = %if.end.20
  %24 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp23, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %26, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.22
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.22
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %29(%struct._object* %30)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  br label %do.body.33

do.body.33:                                       ; preds = %do.end.32
  %31 = load %struct._object*, %struct._object** %pyus_right, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp34, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %33, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %36(%struct._object* %37)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  %38 = load %struct._object*, %struct._object** %divmod, align 8
  %cmp44 = icmp eq %struct._object* %38, null
  br i1 %cmp44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %do.end.43
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.46:                                        ; preds = %do.end.43
  %39 = load %struct._object*, %struct._object** %divmod, align 8
  %40 = bitcast %struct._object* %39 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %40, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 1
  %41 = load %struct._object*, %struct._object** %arrayidx, align 8
  %call47 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %41, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call47, %struct._object** %delta, align 8
  %42 = load %struct._object*, %struct._object** %delta, align 8
  %cmp48 = icmp eq %struct._object* %42, null
  br i1 %cmp48, label %if.then.49, label %if.end.61

if.then.49:                                       ; preds = %if.end.46
  br label %do.body.50

do.body.50:                                       ; preds = %if.then.49
  %43 = load %struct._object*, %struct._object** %divmod, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp51, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt52, align 8
  %dec53 = add i64 %45, -1
  store i64 %dec53, i64* %ob_refcnt52, align 8
  %cmp54 = icmp ne i64 %dec53, 0
  br i1 %cmp54, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %do.body.50
  br label %if.end.59

if.else.56:                                       ; preds = %do.body.50
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  call void %48(%struct._object* %49)
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.61:                                        ; preds = %if.end.46
  %50 = load %struct._object*, %struct._object** %divmod, align 8
  %51 = bitcast %struct._object* %50 to %struct.PyTupleObject*
  %ob_item62 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %51, i32 0, i32 1
  %arrayidx63 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item62, i32 0, i64 0
  %52 = load %struct._object*, %struct._object** %arrayidx63, align 8
  %53 = load %struct._object*, %struct._object** %delta, align 8
  %call64 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %52, %struct._object* %53)
  store %struct._object* %call64, %struct._object** %result, align 8
  br label %do.body.65

do.body.65:                                       ; preds = %if.end.61
  %54 = load %struct._object*, %struct._object** %delta, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp66, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %56, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %59(%struct._object* %60)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  br label %do.body.76

do.body.76:                                       ; preds = %do.end.75
  %61 = load %struct._object*, %struct._object** %divmod, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp77, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt78, align 8
  %dec79 = add i64 %63, -1
  store i64 %dec79, i64* %ob_refcnt78, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.76
  br label %if.end.85

if.else.82:                                       ; preds = %do.body.76
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %66(%struct._object* %67)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  %68 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %68, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.86, %do.end.60, %if.then.45, %do.end, %if.then.11, %if.then
  %69 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %69
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_positive(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 2
  %1 = load i32, i32* %days, align 4
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %2, i32 0, i32 3
  %3 = load i32, i32* %seconds, align 4
  %4 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %4, i32 0, i32 4
  %5 = load i32, i32* %microseconds, align 4
  %call = call %struct._object* @new_delta_ex(i32 %1, i32 %3, i32 %5, i32 0, %struct._typeobject* @PyDateTime_DeltaType)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_abs(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  %result = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 2
  %1 = load i32, i32* %days, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %call = call %struct._object* @delta_negative(%struct.PyDateTime_Delta* %2)
  store %struct._object* %call, %struct._object** %result, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %call1 = call %struct._object* @delta_positive(%struct.PyDateTime_Delta* %3)
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_divide(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.15

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 16777216
  %cmp3 = icmp ne i64 %and, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.then
  %7 = load %struct._object*, %struct._object** %left.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDateTime_Delta*
  %9 = load %struct._object*, %struct._object** %right.addr, align 8
  %call5 = call %struct._object* @divide_timedelta_int(%struct.PyDateTime_Delta* %8, %struct._object* %9)
  store %struct._object* %call5, %struct._object** %result, align 8
  br label %if.end.14

if.else:                                          ; preds = %if.then
  %10 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %cmp7 = icmp eq %struct._typeobject* %11, @PyDateTime_DeltaType
  br i1 %cmp7, label %if.then.12, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.else
  %12 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %call10 = call i32 @PyType_IsSubtype(%struct._typeobject* %13, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then.12, label %if.end

if.then.12:                                       ; preds = %lor.lhs.false.8, %if.else
  %14 = load %struct._object*, %struct._object** %left.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDateTime_Delta*
  %16 = load %struct._object*, %struct._object** %right.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyDateTime_Delta*
  %call13 = call %struct._object* @divide_timedelta_timedelta(%struct.PyDateTime_Delta* %15, %struct.PyDateTime_Delta* %17)
  store %struct._object* %call13, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.12, %lor.lhs.false.8
  br label %if.end.14

if.end.14:                                        ; preds = %if.end, %if.then.4
  br label %if.end.15

if.end.15:                                        ; preds = %if.end.14, %lor.lhs.false
  %18 = load %struct._object*, %struct._object** %result, align 8
  %cmp16 = icmp eq %struct._object* %18, @_Py_NotImplementedStruct
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.15
  %19 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %20, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end.15
  %21 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %21
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_truedivide(%struct._object* %left, %struct._object* %right) #0 {
entry:
  %left.addr = alloca %struct._object*, align 8
  %right.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %left, %struct._object** %left.addr, align 8
  store %struct._object* %right, %struct._object** %right.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DeltaType
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %left.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.25

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, @PyDateTime_DeltaType
  br i1 %cmp3, label %if.then.8, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %lor.lhs.false.4, %if.then
  %8 = load %struct._object*, %struct._object** %left.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_Delta*
  %10 = load %struct._object*, %struct._object** %right.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDateTime_Delta*
  %call9 = call %struct._object* @truedivide_timedelta_timedelta(%struct.PyDateTime_Delta* %9, %struct.PyDateTime_Delta* %11)
  store %struct._object* %call9, %struct._object** %result, align 8
  br label %if.end.24

if.else:                                          ; preds = %lor.lhs.false.4
  %12 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %cmp11 = icmp eq %struct._typeobject* %13, @PyFloat_Type
  br i1 %cmp11, label %if.then.16, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %if.else
  %14 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %call14 = call i32 @PyType_IsSubtype(%struct._typeobject* %15, %struct._typeobject* @PyFloat_Type)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.else.18

if.then.16:                                       ; preds = %lor.lhs.false.12, %if.else
  %16 = load %struct._object*, %struct._object** %left.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyDateTime_Delta*
  %18 = load %struct._object*, %struct._object** %right.addr, align 8
  %call17 = call %struct._object* @truedivide_timedelta_float(%struct.PyDateTime_Delta* %17, %struct._object* %18)
  store %struct._object* %call17, %struct._object** %result, align 8
  br label %if.end.23

if.else.18:                                       ; preds = %lor.lhs.false.12
  %19 = load %struct._object*, %struct._object** %right.addr, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 19
  %21 = load i64, i64* %tp_flags, align 8
  %and = and i64 %21, 16777216
  %cmp20 = icmp ne i64 %and, 0
  br i1 %cmp20, label %if.then.21, label %if.end

if.then.21:                                       ; preds = %if.else.18
  %22 = load %struct._object*, %struct._object** %left.addr, align 8
  %23 = bitcast %struct._object* %22 to %struct.PyDateTime_Delta*
  %24 = load %struct._object*, %struct._object** %right.addr, align 8
  %call22 = call %struct._object* @truedivide_timedelta_int(%struct.PyDateTime_Delta* %23, %struct._object* %24)
  store %struct._object* %call22, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.then.21, %if.else.18
  br label %if.end.23

if.end.23:                                        ; preds = %if.end, %if.then.16
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.then.8
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %lor.lhs.false
  %25 = load %struct._object*, %struct._object** %result, align 8
  %cmp26 = icmp eq %struct._object* %25, @_Py_NotImplementedStruct
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.25
  %26 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %27, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.then.27, %if.end.25
  %28 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @multiply_int_timedelta(%struct._object* %intobj, %struct.PyDateTime_Delta* %delta) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %intobj.addr = alloca %struct._object*, align 8
  %delta.addr = alloca %struct.PyDateTime_Delta*, align 8
  %pyus_in = alloca %struct._object*, align 8
  %pyus_out = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  store %struct._object* %intobj, %struct._object** %intobj.addr, align 8
  store %struct.PyDateTime_Delta* %delta, %struct.PyDateTime_Delta** %delta.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %0)
  store %struct._object* %call, %struct._object** %pyus_in, align 8
  %1 = load %struct._object*, %struct._object** %pyus_in, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %pyus_in, align 8
  %3 = load %struct._object*, %struct._object** %intobj.addr, align 8
  %call1 = call %struct._object* @PyNumber_Multiply(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %pyus_out, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %pyus_in, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %11 = load %struct._object*, %struct._object** %pyus_out, align 8
  %cmp5 = icmp eq %struct._object* %11, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %do.end
  %12 = load %struct._object*, %struct._object** %pyus_out, align 8
  %call8 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %12, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call8, %struct._object** %result, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.7
  %13 = load %struct._object*, %struct._object** %pyus_out, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %15, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %18(%struct._object* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %20 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %20, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.19, %if.then.6, %if.then
  %21 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %21
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @multiply_float_timedelta(%struct._object* %floatobj, %struct.PyDateTime_Delta* %delta) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %floatobj.addr = alloca %struct._object*, align 8
  %delta.addr = alloca %struct.PyDateTime_Delta*, align 8
  %result = alloca %struct._object*, align 8
  %pyus_in = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %pyus_out = alloca %struct._object*, align 8
  %ratio = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_xdecref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  store %struct._object* %floatobj, %struct._object** %floatobj.addr, align 8
  store %struct.PyDateTime_Delta* %delta, %struct.PyDateTime_Delta** %delta.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %pyus_in, align 8
  store %struct._object* null, %struct._object** %ratio, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %0)
  store %struct._object* %call, %struct._object** %pyus_in, align 8
  %1 = load %struct._object*, %struct._object** %pyus_in, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %floatobj.addr, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %2, %struct._Py_Identifier* @PyId_as_integer_ratio, i8* null)
  store %struct._object* %call1, %struct._object** %ratio, align 8
  %3 = load %struct._object*, %struct._object** %ratio, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %error

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %pyus_in, align 8
  %5 = load %struct._object*, %struct._object** %ratio, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %6, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8
  %call5 = call %struct._object* @PyNumber_Multiply(%struct._object* %4, %struct._object* %7)
  store %struct._object* %call5, %struct._object** %temp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %8 = load %struct._object*, %struct._object** %pyus_in, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store %struct._object* null, %struct._object** %pyus_in, align 8
  %15 = load %struct._object*, %struct._object** %temp, align 8
  %cmp9 = icmp eq %struct._object* %15, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.end
  br label %error

if.end.11:                                        ; preds = %do.end
  %16 = load %struct._object*, %struct._object** %temp, align 8
  %17 = load %struct._object*, %struct._object** %ratio, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyTupleObject*
  %ob_item12 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %18, i32 0, i32 1
  %arrayidx13 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item12, i32 0, i64 1
  %19 = load %struct._object*, %struct._object** %arrayidx13, align 8
  %call14 = call %struct._object* @divide_nearest(%struct._object* %16, %struct._object* %19)
  store %struct._object* %call14, %struct._object** %pyus_out, align 8
  br label %do.body.15

do.body.15:                                       ; preds = %if.end.11
  %20 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp16, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %22, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %25(%struct._object* %26)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  %27 = load %struct._object*, %struct._object** %pyus_out, align 8
  %cmp26 = icmp eq %struct._object* %27, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %do.end.25
  br label %error

if.end.28:                                        ; preds = %do.end.25
  %28 = load %struct._object*, %struct._object** %pyus_out, align 8
  %call29 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %28, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call29, %struct._object** %result, align 8
  br label %do.body.30

do.body.30:                                       ; preds = %if.end.28
  %29 = load %struct._object*, %struct._object** %pyus_out, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %31, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %34(%struct._object* %35)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %error

error:                                            ; preds = %do.end.40, %if.then.27, %if.then.10, %if.then.3
  br label %do.body.41

do.body.41:                                       ; preds = %error
  %36 = load %struct._object*, %struct._object** %pyus_in, align 8
  store %struct._object* %36, %struct._object** %_py_xdecref_tmp, align 8
  %37 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp42 = icmp ne %struct._object* %37, null
  br i1 %cmp42, label %if.then.43, label %if.end.55

if.then.43:                                       ; preds = %do.body.41
  br label %do.body.44

do.body.44:                                       ; preds = %if.then.43
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp45, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %40, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.44
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %43(%struct._object* %44)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  br label %if.end.55

if.end.55:                                        ; preds = %do.end.54, %do.body.41
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  %45 = load %struct._object*, %struct._object** %ratio, align 8
  store %struct._object* %45, %struct._object** %_py_xdecref_tmp58, align 8
  %46 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  %cmp59 = icmp ne %struct._object* %46, null
  br i1 %cmp59, label %if.then.60, label %if.end.72

if.then.60:                                       ; preds = %do.body.57
  br label %do.body.61

do.body.61:                                       ; preds = %if.then.60
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp62, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt63, align 8
  %dec64 = add i64 %49, -1
  store i64 %dec64, i64* %ob_refcnt63, align 8
  %cmp65 = icmp ne i64 %dec64, 0
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %do.body.61
  br label %if.end.70

if.else.67:                                       ; preds = %do.body.61
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  call void %52(%struct._object* %53)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %if.end.72

if.end.72:                                        ; preds = %do.end.71, %do.body.57
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  %54 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %54, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.73, %if.then
  %55 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %55
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @microseconds_to_delta_ex(%struct._object* %pyus, %struct._typeobject* %type) #0 {
entry:
  %pyus.addr = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %us = alloca i32, align 4
  %s = alloca i32, align 4
  %d = alloca i32, align 4
  %temp = alloca i64, align 8
  %tuple = alloca %struct._object*, align 8
  %num = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp86 = alloca %struct._object*, align 8
  %_py_xdecref_tmp100 = alloca %struct._object*, align 8
  %_py_decref_tmp105 = alloca %struct._object*, align 8
  store %struct._object* %pyus, %struct._object** %pyus.addr, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* null, %struct._object** %tuple, align 8
  store %struct._object* null, %struct._object** %num, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %pyus.addr, align 8
  %1 = load %struct._object*, %struct._object** @us_per_second, align 8
  %call = call %struct._object* @PyNumber_Divmod(%struct._object* %0, %struct._object* %1)
  store %struct._object* %call, %struct._object** %tuple, align 8
  %2 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %Done

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %tuple, align 8
  %call1 = call %struct._object* @PyTuple_GetItem(%struct._object* %3, i64 1)
  store %struct._object* %call1, %struct._object** %num, align 8
  %4 = load %struct._object*, %struct._object** %num, align 8
  %cmp2 = icmp eq %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %Done

if.end.4:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %num, align 8
  %call5 = call i64 @PyLong_AsLong(%struct._object* %5)
  store i64 %call5, i64* %temp, align 8
  store %struct._object* null, %struct._object** %num, align 8
  %6 = load i64, i64* %temp, align 8
  %cmp6 = icmp eq i64 %6, -1
  br i1 %cmp6, label %land.lhs.true, label %if.end.9

land.lhs.true:                                    ; preds = %if.end.4
  %call7 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call7, null
  br i1 %tobool, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %land.lhs.true
  br label %Done

if.end.9:                                         ; preds = %land.lhs.true, %if.end.4
  %7 = load i64, i64* %temp, align 8
  %conv = trunc i64 %7 to i32
  store i32 %conv, i32* %us, align 4
  %8 = load i32, i32* %us, align 4
  %cmp10 = icmp slt i32 %8, 0
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.9
  br label %Done

if.end.13:                                        ; preds = %if.end.9
  %9 = load %struct._object*, %struct._object** %tuple, align 8
  %call14 = call %struct._object* @PyTuple_GetItem(%struct._object* %9, i64 0)
  store %struct._object* %call14, %struct._object** %num, align 8
  %10 = load %struct._object*, %struct._object** %num, align 8
  %cmp15 = icmp eq %struct._object* %10, null
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.13
  br label %Done

if.end.18:                                        ; preds = %if.end.13
  %11 = load %struct._object*, %struct._object** %num, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.18
  %13 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt19, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt19, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %do.body
  br label %if.end.23

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else, %if.then.22
  br label %do.end

do.end:                                           ; preds = %if.end.23
  %20 = load %struct._object*, %struct._object** %num, align 8
  %21 = load %struct._object*, %struct._object** @seconds_per_day, align 8
  %call24 = call %struct._object* @PyNumber_Divmod(%struct._object* %20, %struct._object* %21)
  store %struct._object* %call24, %struct._object** %tuple, align 8
  %22 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp25 = icmp eq %struct._object* %22, null
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %do.end
  br label %Done

if.end.28:                                        ; preds = %do.end
  br label %do.body.29

do.body.29:                                       ; preds = %if.end.28
  %23 = load %struct._object*, %struct._object** %num, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp30, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %25, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.29
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.29
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %28(%struct._object* %29)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  %30 = load %struct._object*, %struct._object** %tuple, align 8
  %call41 = call %struct._object* @PyTuple_GetItem(%struct._object* %30, i64 1)
  store %struct._object* %call41, %struct._object** %num, align 8
  %31 = load %struct._object*, %struct._object** %num, align 8
  %cmp42 = icmp eq %struct._object* %31, null
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %do.end.40
  br label %Done

if.end.45:                                        ; preds = %do.end.40
  %32 = load %struct._object*, %struct._object** %num, align 8
  %call46 = call i64 @PyLong_AsLong(%struct._object* %32)
  store i64 %call46, i64* %temp, align 8
  store %struct._object* null, %struct._object** %num, align 8
  %33 = load i64, i64* %temp, align 8
  %cmp47 = icmp eq i64 %33, -1
  br i1 %cmp47, label %land.lhs.true.49, label %if.end.53

land.lhs.true.49:                                 ; preds = %if.end.45
  %call50 = call %struct._object* @PyErr_Occurred()
  %tobool51 = icmp ne %struct._object* %call50, null
  br i1 %tobool51, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %land.lhs.true.49
  br label %Done

if.end.53:                                        ; preds = %land.lhs.true.49, %if.end.45
  %34 = load i64, i64* %temp, align 8
  %conv54 = trunc i64 %34 to i32
  store i32 %conv54, i32* %s, align 4
  %35 = load i32, i32* %s, align 4
  %cmp55 = icmp slt i32 %35, 0
  br i1 %cmp55, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.end.53
  br label %Done

if.end.58:                                        ; preds = %if.end.53
  %36 = load %struct._object*, %struct._object** %tuple, align 8
  %call59 = call %struct._object* @PyTuple_GetItem(%struct._object* %36, i64 0)
  store %struct._object* %call59, %struct._object** %num, align 8
  %37 = load %struct._object*, %struct._object** %num, align 8
  %cmp60 = icmp eq %struct._object* %37, null
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.58
  br label %Done

if.end.63:                                        ; preds = %if.end.58
  %38 = load %struct._object*, %struct._object** %num, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt64, align 8
  %inc65 = add i64 %39, 1
  store i64 %inc65, i64* %ob_refcnt64, align 8
  %40 = load %struct._object*, %struct._object** %num, align 8
  %call66 = call i64 @PyLong_AsLong(%struct._object* %40)
  store i64 %call66, i64* %temp, align 8
  %41 = load i64, i64* %temp, align 8
  %cmp67 = icmp eq i64 %41, -1
  br i1 %cmp67, label %land.lhs.true.69, label %if.end.73

land.lhs.true.69:                                 ; preds = %if.end.63
  %call70 = call %struct._object* @PyErr_Occurred()
  %tobool71 = icmp ne %struct._object* %call70, null
  br i1 %tobool71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %land.lhs.true.69
  br label %Done

if.end.73:                                        ; preds = %land.lhs.true.69, %if.end.63
  %42 = load i64, i64* %temp, align 8
  %conv74 = trunc i64 %42 to i32
  store i32 %conv74, i32* %d, align 4
  %43 = load i32, i32* %d, align 4
  %conv75 = sext i32 %43 to i64
  %44 = load i64, i64* %temp, align 8
  %cmp76 = icmp ne i64 %conv75, %44
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.73
  %45 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %45, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.176, i32 0, i32 0))
  br label %Done

if.end.79:                                        ; preds = %if.end.73
  %46 = load i32, i32* %d, align 4
  %47 = load i32, i32* %s, align 4
  %48 = load i32, i32* %us, align 4
  %49 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call80 = call %struct._object* @new_delta_ex(i32 %46, i32 %47, i32 %48, i32 0, %struct._typeobject* %49)
  store %struct._object* %call80, %struct._object** %result, align 8
  br label %Done

Done:                                             ; preds = %if.end.79, %if.then.78, %if.then.72, %if.then.62, %if.then.57, %if.then.52, %if.then.44, %if.then.27, %if.then.17, %if.then.12, %if.then.8, %if.then.3, %if.then
  br label %do.body.81

do.body.81:                                       ; preds = %Done
  %50 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %50, %struct._object** %_py_xdecref_tmp, align 8
  %51 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp82 = icmp ne %struct._object* %51, null
  br i1 %cmp82, label %if.then.84, label %if.end.97

if.then.84:                                       ; preds = %do.body.81
  br label %do.body.85

do.body.85:                                       ; preds = %if.then.84
  %52 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp86, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8
  %ob_refcnt87 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt87, align 8
  %dec88 = add i64 %54, -1
  store i64 %dec88, i64* %ob_refcnt87, align 8
  %cmp89 = icmp ne i64 %dec88, 0
  br i1 %cmp89, label %if.then.91, label %if.else.92

if.then.91:                                       ; preds = %do.body.85
  br label %if.end.95

if.else.92:                                       ; preds = %do.body.85
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8
  %ob_type93 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type93, align 8
  %tp_dealloc94 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc94, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8
  call void %57(%struct._object* %58)
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.92, %if.then.91
  br label %do.end.96

do.end.96:                                        ; preds = %if.end.95
  br label %if.end.97

if.end.97:                                        ; preds = %do.end.96, %do.body.81
  br label %do.end.98

do.end.98:                                        ; preds = %if.end.97
  br label %do.body.99

do.body.99:                                       ; preds = %do.end.98
  %59 = load %struct._object*, %struct._object** %num, align 8
  store %struct._object* %59, %struct._object** %_py_xdecref_tmp100, align 8
  %60 = load %struct._object*, %struct._object** %_py_xdecref_tmp100, align 8
  %cmp101 = icmp ne %struct._object* %60, null
  br i1 %cmp101, label %if.then.103, label %if.end.116

if.then.103:                                      ; preds = %do.body.99
  br label %do.body.104

do.body.104:                                      ; preds = %if.then.103
  %61 = load %struct._object*, %struct._object** %_py_xdecref_tmp100, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp105, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt106, align 8
  %dec107 = add i64 %63, -1
  store i64 %dec107, i64* %ob_refcnt106, align 8
  %cmp108 = icmp ne i64 %dec107, 0
  br i1 %cmp108, label %if.then.110, label %if.else.111

if.then.110:                                      ; preds = %do.body.104
  br label %if.end.114

if.else.111:                                      ; preds = %do.body.104
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_type112 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type112, align 8
  %tp_dealloc113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc113, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  call void %66(%struct._object* %67)
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.111, %if.then.110
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  br label %if.end.116

if.end.116:                                       ; preds = %do.end.115, %do.body.99
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  %68 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %68
}

declare %struct._object* @PyNumber_Divmod(%struct._object*, %struct._object*) #1

declare %struct._object* @PyTuple_GetItem(%struct._object*, i64) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @divide_nearest(%struct._object* %m, %struct._object* %n) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m.addr = alloca %struct._object*, align 8
  %n.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %m, %struct._object** %m.addr, align 8
  store %struct._object* %n, %struct._object** %n.addr, align 8
  %0 = load %struct._object*, %struct._object** %m.addr, align 8
  %1 = load %struct._object*, %struct._object** %n.addr, align 8
  %call = call %struct._object* @_PyLong_DivmodNear(%struct._object* %0, %struct._object* %1)
  store %struct._object* %call, %struct._object** %temp, align 8
  %2 = load %struct._object*, %struct._object** %temp, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %temp, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %5 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %5, %struct._object** %result, align 8
  %6 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt1 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt1, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt1, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %15 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %16 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %16
}

declare %struct._object* @_PyLong_DivmodNear(%struct._object*, %struct._object*) #1

declare %struct._object* @PyNumber_Remainder(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @divide_timedelta_int(%struct.PyDateTime_Delta* %delta, %struct._object* %intobj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %delta.addr = alloca %struct.PyDateTime_Delta*, align 8
  %intobj.addr = alloca %struct._object*, align 8
  %pyus_in = alloca %struct._object*, align 8
  %pyus_out = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %delta, %struct.PyDateTime_Delta** %delta.addr, align 8
  store %struct._object* %intobj, %struct._object** %intobj.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %0)
  store %struct._object* %call, %struct._object** %pyus_in, align 8
  %1 = load %struct._object*, %struct._object** %pyus_in, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %pyus_in, align 8
  %3 = load %struct._object*, %struct._object** %intobj.addr, align 8
  %call1 = call %struct._object* @PyNumber_FloorDivide(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %pyus_out, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %pyus_in, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %11 = load %struct._object*, %struct._object** %pyus_out, align 8
  %cmp5 = icmp eq %struct._object* %11, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %do.end
  %12 = load %struct._object*, %struct._object** %pyus_out, align 8
  %call8 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %12, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call8, %struct._object** %result, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.7
  %13 = load %struct._object*, %struct._object** %pyus_out, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %15, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %18(%struct._object* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %20 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %20, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.19, %if.then.6, %if.then
  %21 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %21
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @truedivide_timedelta_timedelta(%struct.PyDateTime_Delta* %left, %struct.PyDateTime_Delta* %right) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %left.addr = alloca %struct.PyDateTime_Delta*, align 8
  %right.addr = alloca %struct.PyDateTime_Delta*, align 8
  %pyus_left = alloca %struct._object*, align 8
  %pyus_right = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp21 = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %left, %struct.PyDateTime_Delta** %left.addr, align 8
  store %struct.PyDateTime_Delta* %right, %struct.PyDateTime_Delta** %right.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %left.addr, align 8
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %0)
  store %struct._object* %call, %struct._object** %pyus_left, align 8
  %1 = load %struct._object*, %struct._object** %pyus_left, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %right.addr, align 8
  %call1 = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %2)
  store %struct._object* %call1, %struct._object** %pyus_right, align 8
  %3 = load %struct._object*, %struct._object** %pyus_right, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %4 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %pyus_left, align 8
  %12 = load %struct._object*, %struct._object** %pyus_right, align 8
  %call8 = call %struct._object* @PyNumber_TrueDivide(%struct._object* %11, %struct._object* %12)
  store %struct._object* %call8, %struct._object** %result, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.7
  %13 = load %struct._object*, %struct._object** %pyus_left, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %15, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %18(%struct._object* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.19
  %20 = load %struct._object*, %struct._object** %pyus_right, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp21, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt22, align 8
  %dec23 = add i64 %22, -1
  store i64 %dec23, i64* %ob_refcnt22, align 8
  %cmp24 = icmp ne i64 %dec23, 0
  br i1 %cmp24, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %do.body.20
  br label %if.end.29

if.else.26:                                       ; preds = %do.body.20
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_dealloc28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc28, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  call void %25(%struct._object* %26)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.26, %if.then.25
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  %27 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %27, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.30, %do.end, %if.then
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @truedivide_timedelta_float(%struct.PyDateTime_Delta* %delta, %struct._object* %f) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %delta.addr = alloca %struct.PyDateTime_Delta*, align 8
  %f.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %pyus_in = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %pyus_out = alloca %struct._object*, align 8
  %ratio = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_xdecref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp62 = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %delta, %struct.PyDateTime_Delta** %delta.addr, align 8
  store %struct._object* %f, %struct._object** %f.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %pyus_in, align 8
  store %struct._object* null, %struct._object** %ratio, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %0)
  store %struct._object* %call, %struct._object** %pyus_in, align 8
  %1 = load %struct._object*, %struct._object** %pyus_in, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %f.addr, align 8
  %call1 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %2, %struct._Py_Identifier* @PyId_as_integer_ratio, i8* null)
  store %struct._object* %call1, %struct._object** %ratio, align 8
  %3 = load %struct._object*, %struct._object** %ratio, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  br label %error

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %pyus_in, align 8
  %5 = load %struct._object*, %struct._object** %ratio, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %6, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 1
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8
  %call5 = call %struct._object* @PyNumber_Multiply(%struct._object* %4, %struct._object* %7)
  store %struct._object* %call5, %struct._object** %temp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %8 = load %struct._object*, %struct._object** %pyus_in, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store %struct._object* null, %struct._object** %pyus_in, align 8
  %15 = load %struct._object*, %struct._object** %temp, align 8
  %cmp9 = icmp eq %struct._object* %15, null
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.end
  br label %error

if.end.11:                                        ; preds = %do.end
  %16 = load %struct._object*, %struct._object** %temp, align 8
  %17 = load %struct._object*, %struct._object** %ratio, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyTupleObject*
  %ob_item12 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %18, i32 0, i32 1
  %arrayidx13 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item12, i32 0, i64 0
  %19 = load %struct._object*, %struct._object** %arrayidx13, align 8
  %call14 = call %struct._object* @divide_nearest(%struct._object* %16, %struct._object* %19)
  store %struct._object* %call14, %struct._object** %pyus_out, align 8
  br label %do.body.15

do.body.15:                                       ; preds = %if.end.11
  %20 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp16, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %22, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %25(%struct._object* %26)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  %27 = load %struct._object*, %struct._object** %pyus_out, align 8
  %cmp26 = icmp eq %struct._object* %27, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %do.end.25
  br label %error

if.end.28:                                        ; preds = %do.end.25
  %28 = load %struct._object*, %struct._object** %pyus_out, align 8
  %call29 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %28, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call29, %struct._object** %result, align 8
  br label %do.body.30

do.body.30:                                       ; preds = %if.end.28
  %29 = load %struct._object*, %struct._object** %pyus_out, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %31, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %34(%struct._object* %35)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %error

error:                                            ; preds = %do.end.40, %if.then.27, %if.then.10, %if.then.3
  br label %do.body.41

do.body.41:                                       ; preds = %error
  %36 = load %struct._object*, %struct._object** %pyus_in, align 8
  store %struct._object* %36, %struct._object** %_py_xdecref_tmp, align 8
  %37 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp42 = icmp ne %struct._object* %37, null
  br i1 %cmp42, label %if.then.43, label %if.end.55

if.then.43:                                       ; preds = %do.body.41
  br label %do.body.44

do.body.44:                                       ; preds = %if.then.43
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp45, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %40, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.44
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %43(%struct._object* %44)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  br label %if.end.55

if.end.55:                                        ; preds = %do.end.54, %do.body.41
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  br label %do.body.57

do.body.57:                                       ; preds = %do.end.56
  %45 = load %struct._object*, %struct._object** %ratio, align 8
  store %struct._object* %45, %struct._object** %_py_xdecref_tmp58, align 8
  %46 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  %cmp59 = icmp ne %struct._object* %46, null
  br i1 %cmp59, label %if.then.60, label %if.end.72

if.then.60:                                       ; preds = %do.body.57
  br label %do.body.61

do.body.61:                                       ; preds = %if.then.60
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp58, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp62, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_refcnt63 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt63, align 8
  %dec64 = add i64 %49, -1
  store i64 %dec64, i64* %ob_refcnt63, align 8
  %cmp65 = icmp ne i64 %dec64, 0
  br i1 %cmp65, label %if.then.66, label %if.else.67

if.then.66:                                       ; preds = %do.body.61
  br label %if.end.70

if.else.67:                                       ; preds = %do.body.61
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8
  %tp_dealloc69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc69, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp62, align 8
  call void %52(%struct._object* %53)
  br label %if.end.70

if.end.70:                                        ; preds = %if.else.67, %if.then.66
  br label %do.end.71

do.end.71:                                        ; preds = %if.end.70
  br label %if.end.72

if.end.72:                                        ; preds = %do.end.71, %do.body.57
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  %54 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %54, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.73, %if.then
  %55 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %55
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @truedivide_timedelta_int(%struct.PyDateTime_Delta* %delta, %struct._object* %i) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %delta.addr = alloca %struct.PyDateTime_Delta*, align 8
  %i.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %pyus_in = alloca %struct._object*, align 8
  %pyus_out = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  store %struct.PyDateTime_Delta* %delta, %struct.PyDateTime_Delta** %delta.addr, align 8
  store %struct._object* %i, %struct._object** %i.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta.addr, align 8
  %call = call %struct._object* @delta_to_microseconds(%struct.PyDateTime_Delta* %0)
  store %struct._object* %call, %struct._object** %pyus_in, align 8
  %1 = load %struct._object*, %struct._object** %pyus_in, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %pyus_in, align 8
  %3 = load %struct._object*, %struct._object** %i.addr, align 8
  %call1 = call %struct._object* @divide_nearest(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %pyus_out, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %pyus_in, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %11 = load %struct._object*, %struct._object** %pyus_out, align 8
  %cmp5 = icmp eq %struct._object* %11, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %do.end
  %12 = load %struct._object*, %struct._object** %pyus_out, align 8
  %call8 = call %struct._object* @microseconds_to_delta_ex(%struct._object* %12, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call8, %struct._object** %result, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.7
  %13 = load %struct._object*, %struct._object** %pyus_out, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %15, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %18(%struct._object* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %20 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %20, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.19, %if.then.6, %if.then
  %21 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %21
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_getstate(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %0, i32 0, i32 2
  %1 = load i32, i32* %days, align 4
  %2 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %2, i32 0, i32 3
  %3 = load i32, i32* %seconds, align 4
  %4 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %microseconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %4, i32 0, i32 4
  %5 = load i32, i32* %microseconds, align 4
  %call = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.49, i32 0, i32 0), i32 %1, i32 %3, i32 %5)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @delta_reduce(%struct.PyDateTime_Delta* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Delta*, align 8
  store %struct.PyDateTime_Delta* %self, %struct.PyDateTime_Delta** %self.addr, align 8
  %0 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Delta* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %3 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %self.addr, align 8
  %call = call %struct._object* @delta_getstate(%struct.PyDateTime_Delta* %3)
  %call1 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.185, i32 0, i32 0), %struct._typeobject* %2, %struct._object* %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @accum(i8* %tag, %struct._object* %sofar, %struct._object* %num, %struct._object* %factor, double* %leftover) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %tag.addr = alloca i8*, align 8
  %sofar.addr = alloca %struct._object*, align 8
  %num.addr = alloca %struct._object*, align 8
  %factor.addr = alloca %struct._object*, align 8
  %leftover.addr = alloca double*, align 8
  %prod = alloca %struct._object*, align 8
  %sum = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %dnum = alloca double, align 8
  %fracpart = alloca double, align 8
  %intpart = alloca double, align 8
  %x = alloca %struct._object*, align 8
  %y = alloca %struct._object*, align 8
  %_py_decref_tmp27 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp64 = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  %_py_decref_tmp88 = alloca %struct._object*, align 8
  store i8* %tag, i8** %tag.addr, align 8
  store %struct._object* %sofar, %struct._object** %sofar.addr, align 8
  store %struct._object* %num, %struct._object** %num.addr, align 8
  store %struct._object* %factor, %struct._object** %factor.addr, align 8
  store double* %leftover, double** %leftover.addr, align 8
  %0 = load %struct._object*, %struct._object** %num.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 16777216
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %num.addr, align 8
  %4 = load %struct._object*, %struct._object** %factor.addr, align 8
  %call = call %struct._object* @PyNumber_Multiply(%struct._object* %3, %struct._object* %4)
  store %struct._object* %call, %struct._object** %prod, align 8
  %5 = load %struct._object*, %struct._object** %prod, align 8
  %cmp1 = icmp eq %struct._object* %5, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load %struct._object*, %struct._object** %sofar.addr, align 8
  %7 = load %struct._object*, %struct._object** %prod, align 8
  %call3 = call %struct._object* @PyNumber_Add(%struct._object* %6, %struct._object* %7)
  store %struct._object* %call3, %struct._object** %sum, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %prod, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %15 = load %struct._object*, %struct._object** %sum, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %entry
  %16 = load %struct._object*, %struct._object** %num.addr, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %cmp10 = icmp eq %struct._typeobject* %17, @PyFloat_Type
  br i1 %cmp10, label %if.then.13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.8
  %18 = load %struct._object*, %struct._object** %num.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %call12 = call i32 @PyType_IsSubtype(%struct._typeobject* %19, %struct._typeobject* @PyFloat_Type)
  %tobool = icmp ne i32 %call12, 0
  br i1 %tobool, label %if.then.13, label %if.end.98

if.then.13:                                       ; preds = %lor.lhs.false, %if.end.8
  %20 = load %struct._object*, %struct._object** %num.addr, align 8
  %call14 = call double @PyFloat_AsDouble(%struct._object* %20)
  store double %call14, double* %dnum, align 8
  %21 = load double, double* %dnum, align 8
  %cmp15 = fcmp oeq double %21, -1.000000e+00
  br i1 %cmp15, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.then.13
  %call16 = call %struct._object* @PyErr_Occurred()
  %tobool17 = icmp ne %struct._object* %call16, null
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %land.lhs.true, %if.then.13
  %22 = load double, double* %dnum, align 8
  %call20 = call double @modf(double %22, double* %intpart) #5
  store double %call20, double* %fracpart, align 8
  %23 = load double, double* %intpart, align 8
  %call21 = call %struct._object* @PyLong_FromDouble(double %23)
  store %struct._object* %call21, %struct._object** %x, align 8
  %24 = load %struct._object*, %struct._object** %x, align 8
  %cmp22 = icmp eq %struct._object* %24, null
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %if.end.19
  %25 = load %struct._object*, %struct._object** %x, align 8
  %26 = load %struct._object*, %struct._object** %factor.addr, align 8
  %call25 = call %struct._object* @PyNumber_Multiply(%struct._object* %25, %struct._object* %26)
  store %struct._object* %call25, %struct._object** %prod, align 8
  br label %do.body.26

do.body.26:                                       ; preds = %if.end.24
  %27 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp27, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt28, align 8
  %dec29 = add i64 %29, -1
  store i64 %dec29, i64* %ob_refcnt28, align 8
  %cmp30 = icmp ne i64 %dec29, 0
  br i1 %cmp30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %do.body.26
  br label %if.end.35

if.else.32:                                       ; preds = %do.body.26
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_dealloc34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc34, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  call void %32(%struct._object* %33)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %if.then.31
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  %34 = load %struct._object*, %struct._object** %prod, align 8
  %cmp37 = icmp eq %struct._object* %34, null
  br i1 %cmp37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %do.end.36
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.39:                                        ; preds = %do.end.36
  %35 = load %struct._object*, %struct._object** %sofar.addr, align 8
  %36 = load %struct._object*, %struct._object** %prod, align 8
  %call40 = call %struct._object* @PyNumber_Add(%struct._object* %35, %struct._object* %36)
  store %struct._object* %call40, %struct._object** %sum, align 8
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.39
  %37 = load %struct._object*, %struct._object** %prod, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp42, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %39, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %42(%struct._object* %43)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  %44 = load %struct._object*, %struct._object** %sum, align 8
  %cmp52 = icmp eq %struct._object* %44, null
  br i1 %cmp52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %do.end.51
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.54:                                        ; preds = %do.end.51
  %45 = load double, double* %fracpart, align 8
  %cmp55 = fcmp oeq double %45, 0.000000e+00
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.54
  %46 = load %struct._object*, %struct._object** %sum, align 8
  store %struct._object* %46, %struct._object** %retval
  br label %return

if.end.57:                                        ; preds = %if.end.54
  %47 = load %struct._object*, %struct._object** %factor.addr, align 8
  %call58 = call double @PyLong_AsDouble(%struct._object* %47)
  store double %call58, double* %dnum, align 8
  %48 = load double, double* %fracpart, align 8
  %49 = load double, double* %dnum, align 8
  %mul = fmul double %49, %48
  store double %mul, double* %dnum, align 8
  %50 = load double, double* %dnum, align 8
  %call59 = call double @modf(double %50, double* %intpart) #5
  store double %call59, double* %fracpart, align 8
  %51 = load double, double* %intpart, align 8
  %call60 = call %struct._object* @PyLong_FromDouble(double %51)
  store %struct._object* %call60, %struct._object** %x, align 8
  %52 = load %struct._object*, %struct._object** %x, align 8
  %cmp61 = icmp eq %struct._object* %52, null
  br i1 %cmp61, label %if.then.62, label %if.end.74

if.then.62:                                       ; preds = %if.end.57
  br label %do.body.63

do.body.63:                                       ; preds = %if.then.62
  %53 = load %struct._object*, %struct._object** %sum, align 8
  store %struct._object* %53, %struct._object** %_py_decref_tmp64, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  %ob_refcnt65 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0
  %55 = load i64, i64* %ob_refcnt65, align 8
  %dec66 = add i64 %55, -1
  store i64 %dec66, i64* %ob_refcnt65, align 8
  %cmp67 = icmp ne i64 %dec66, 0
  br i1 %cmp67, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %do.body.63
  br label %if.end.72

if.else.69:                                       ; preds = %do.body.63
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 1
  %57 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8
  %tp_dealloc71 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %57, i32 0, i32 4
  %58 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc71, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  call void %58(%struct._object* %59)
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.68
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.74:                                        ; preds = %if.end.57
  %60 = load %struct._object*, %struct._object** %sum, align 8
  %61 = load %struct._object*, %struct._object** %x, align 8
  %call75 = call %struct._object* @PyNumber_Add(%struct._object* %60, %struct._object* %61)
  store %struct._object* %call75, %struct._object** %y, align 8
  br label %do.body.76

do.body.76:                                       ; preds = %if.end.74
  %62 = load %struct._object*, %struct._object** %sum, align 8
  store %struct._object* %62, %struct._object** %_py_decref_tmp77, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0
  %64 = load i64, i64* %ob_refcnt78, align 8
  %dec79 = add i64 %64, -1
  store i64 %dec79, i64* %ob_refcnt78, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.76
  br label %if.end.85

if.else.82:                                       ; preds = %do.body.76
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %67(%struct._object* %68)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  br label %do.body.87

do.body.87:                                       ; preds = %do.end.86
  %69 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %69, %struct._object** %_py_decref_tmp88, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  %ob_refcnt89 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt89, align 8
  %dec90 = add i64 %71, -1
  store i64 %dec90, i64* %ob_refcnt89, align 8
  %cmp91 = icmp ne i64 %dec90, 0
  br i1 %cmp91, label %if.then.92, label %if.else.93

if.then.92:                                       ; preds = %do.body.87
  br label %if.end.96

if.else.93:                                       ; preds = %do.body.87
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  %ob_type94 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type94, align 8
  %tp_dealloc95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 4
  %74 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc95, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  call void %74(%struct._object* %75)
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.93, %if.then.92
  br label %do.end.97

do.end.97:                                        ; preds = %if.end.96
  %76 = load double, double* %fracpart, align 8
  %77 = load double*, double** %leftover.addr, align 8
  %78 = load double, double* %77, align 8
  %add = fadd double %78, %76
  store double %add, double* %77, align 8
  %79 = load %struct._object*, %struct._object** %y, align 8
  store %struct._object* %79, %struct._object** %retval
  br label %return

if.end.98:                                        ; preds = %lor.lhs.false
  %80 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %81 = load i8*, i8** %tag.addr, align 8
  %82 = load %struct._object*, %struct._object** %num.addr, align 8
  %ob_type99 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type99, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 1
  %84 = load i8*, i8** %tp_name, align 8
  %call100 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %80, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.197, i32 0, i32 0), i8* %81, i8* %84)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.98, %do.end.97, %do.end.73, %if.then.56, %if.then.53, %if.then.38, %if.then.23, %if.then.18, %do.end, %if.then.2
  %85 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %85
}

; Function Attrs: nounwind readnone
declare double @round(double) #4

; Function Attrs: nounwind readnone
declare double @fabs(double) #4

declare %struct._object* @PyNumber_And(%struct._object*, %struct._object*) #1

declare i32 @PyObject_IsTrue(%struct._object*) #1

declare double @PyFloat_AsDouble(%struct._object*) #1

; Function Attrs: nounwind
declare double @modf(double, double*) #3

declare double @PyLong_AsDouble(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal void @time_dealloc(%struct.PyDateTime_Time* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Time* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %tobool = icmp ne i8 %2, 0
  br i1 %tobool, label %if.then, label %if.end.7

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  store %struct._object* %4, %struct._object** %_py_xdecref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %5, null
  br i1 %cmp, label %if.then.1, label %if.end.5

if.then.1:                                        ; preds = %do.body
  br label %do.body.2

do.body.2:                                        ; preds = %if.then.1
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %if.end.7

if.end.7:                                         ; preds = %do.end.6, %entry
  %13 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %14 = bitcast %struct.PyDateTime_Time* %13 to %struct._object*
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 38
  %16 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %17 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %18 = bitcast %struct.PyDateTime_Time* %17 to %struct._object*
  %19 = bitcast %struct._object* %18 to i8*
  call void %16(i8* %19)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_repr(%struct.PyDateTime_Time* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %type_name = alloca i8*, align 8
  %h = alloca i32, align 4
  %m = alloca i32, align 4
  %s = alloca i32, align 4
  %us = alloca i32, align 4
  %result = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Time* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  store i8* %3, i8** %type_name, align 8
  %4 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  store i32 %conv, i32* %h, align 4
  %6 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %6, i32 0, i32 3
  %arrayidx2 = getelementptr [6 x i8], [6 x i8]* %data1, i32 0, i64 1
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  store i32 %conv3, i32* %m, align 4
  %8 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %8, i32 0, i32 3
  %arrayidx5 = getelementptr [6 x i8], [6 x i8]* %data4, i32 0, i64 2
  %9 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %9 to i32
  store i32 %conv6, i32* %s, align 4
  %10 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %10, i32 0, i32 3
  %arrayidx8 = getelementptr [6 x i8], [6 x i8]* %data7, i32 0, i64 3
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %11 to i32
  %shl = shl i32 %conv9, 16
  %12 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %12, i32 0, i32 3
  %arrayidx11 = getelementptr [6 x i8], [6 x i8]* %data10, i32 0, i64 4
  %13 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %13 to i32
  %shl13 = shl i32 %conv12, 8
  %or = or i32 %shl, %shl13
  %14 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data14 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %14, i32 0, i32 3
  %arrayidx15 = getelementptr [6 x i8], [6 x i8]* %data14, i32 0, i64 5
  %15 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %15 to i32
  %or17 = or i32 %or, %conv16
  store i32 %or17, i32* %us, align 4
  store %struct._object* null, %struct._object** %result, align 8
  %16 = load i32, i32* %us, align 4
  %tobool = icmp ne i32 %16, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %17 = load i8*, i8** %type_name, align 8
  %18 = load i32, i32* %h, align 4
  %19 = load i32, i32* %m, align 4
  %20 = load i32, i32* %s, align 4
  %21 = load i32, i32* %us, align 4
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.199, i32 0, i32 0), i8* %17, i32 %18, i32 %19, i32 %20, i32 %21)
  store %struct._object* %call, %struct._object** %result, align 8
  br label %if.end.23

if.else:                                          ; preds = %entry
  %22 = load i32, i32* %s, align 4
  %tobool18 = icmp ne i32 %22, 0
  br i1 %tobool18, label %if.then.19, label %if.else.21

if.then.19:                                       ; preds = %if.else
  %23 = load i8*, i8** %type_name, align 8
  %24 = load i32, i32* %h, align 4
  %25 = load i32, i32* %m, align 4
  %26 = load i32, i32* %s, align 4
  %call20 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.17, i32 0, i32 0), i8* %23, i32 %24, i32 %25, i32 %26)
  store %struct._object* %call20, %struct._object** %result, align 8
  br label %if.end

if.else.21:                                       ; preds = %if.else
  %27 = load i8*, i8** %type_name, align 8
  %28 = load i32, i32* %h, align 4
  %29 = load i32, i32* %m, align 4
  %call22 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.174, i32 0, i32 0), i8* %27, i32 %28, i32 %29)
  store %struct._object* %call22, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.21, %if.then.19
  br label %if.end.23

if.end.23:                                        ; preds = %if.end, %if.then
  %30 = load %struct._object*, %struct._object** %result, align 8
  %cmp = icmp ne %struct._object* %30, null
  br i1 %cmp, label %land.lhs.true, label %if.end.29

land.lhs.true:                                    ; preds = %if.end.23
  %31 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %32 = bitcast %struct.PyDateTime_Time* %31 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %32, i32 0, i32 2
  %33 = load i8, i8* %hastzinfo, align 1
  %conv25 = sext i8 %33 to i32
  %tobool26 = icmp ne i32 %conv25, 0
  br i1 %tobool26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %land.lhs.true
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %35, i32 0, i32 4
  %36 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call28 = call %struct._object* @append_keyword_tzinfo(%struct._object* %34, %struct._object* %36)
  store %struct._object* %call28, %struct._object** %result, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.27, %land.lhs.true, %if.end.23
  %37 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %37
}

; Function Attrs: nounwind uwtable
define internal i64 @time_hash(%struct.PyDateTime_Time* %self) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %offset = alloca %struct._object*, align 8
  %temp1 = alloca %struct._object*, align 8
  %temp2 = alloca %struct._object*, align 8
  %seconds = alloca i32, align 4
  %microseconds = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 1
  %1 = load i64, i64* %hashcode, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %if.then, label %if.end.93

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %3 = bitcast %struct.PyDateTime_Time* %2 to %struct._object*
  %call = call %struct._object* @time_utcoffset(%struct._object* %3, %struct._object* null)
  store %struct._object* %call, %struct._object** %offset, align 8
  %4 = load %struct._object*, %struct._object** %offset, align 8
  %cmp1 = icmp eq %struct._object* %4, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %offset, align 8
  %cmp3 = icmp eq %struct._object* %5, @_Py_NoneStruct
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %6 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %6, i32 0, i32 3
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %data, i32 0, i32 0
  %call5 = call i64 @generic_hash(i8* %arraydecay, i32 6)
  %7 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %hashcode6 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %7, i32 0, i32 1
  store i64 %call5, i64* %hashcode6, align 8
  br label %if.end.80

if.else:                                          ; preds = %if.end
  %8 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %8, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data7, i32 0, i64 0
  %9 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %9 to i32
  %mul = mul i32 %conv, 3600
  %10 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data8 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %10, i32 0, i32 3
  %arrayidx9 = getelementptr [6 x i8], [6 x i8]* %data8, i32 0, i64 1
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %mul11 = mul i32 %conv10, 60
  %add = add i32 %mul, %mul11
  %12 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data12 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %12, i32 0, i32 3
  %arrayidx13 = getelementptr [6 x i8], [6 x i8]* %data12, i32 0, i64 2
  %13 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %13 to i32
  %add15 = add i32 %add, %conv14
  store i32 %add15, i32* %seconds, align 4
  %14 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data16 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %14, i32 0, i32 3
  %arrayidx17 = getelementptr [6 x i8], [6 x i8]* %data16, i32 0, i64 3
  %15 = load i8, i8* %arrayidx17, align 1
  %conv18 = zext i8 %15 to i32
  %shl = shl i32 %conv18, 16
  %16 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data19 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %16, i32 0, i32 3
  %arrayidx20 = getelementptr [6 x i8], [6 x i8]* %data19, i32 0, i64 4
  %17 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %17 to i32
  %shl22 = shl i32 %conv21, 8
  %or = or i32 %shl, %shl22
  %18 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data23 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %18, i32 0, i32 3
  %arrayidx24 = getelementptr [6 x i8], [6 x i8]* %data23, i32 0, i64 5
  %19 = load i8, i8* %arrayidx24, align 1
  %conv25 = zext i8 %19 to i32
  %or26 = or i32 %or, %conv25
  store i32 %or26, i32* %microseconds, align 4
  %20 = load i32, i32* %seconds, align 4
  %21 = load i32, i32* %microseconds, align 4
  %call27 = call %struct._object* @new_delta_ex(i32 0, i32 %20, i32 %21, i32 1, %struct._typeobject* @PyDateTime_DeltaType)
  store %struct._object* %call27, %struct._object** %temp1, align 8
  %22 = load %struct._object*, %struct._object** %temp1, align 8
  %cmp28 = icmp eq %struct._object* %22, null
  br i1 %cmp28, label %if.then.30, label %if.end.36

if.then.30:                                       ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.30
  %23 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %25, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp31 = icmp ne i64 %dec, 0
  br i1 %cmp31, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body
  br label %if.end.35

if.else.34:                                       ; preds = %do.body
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %28(%struct._object* %29)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end

do.end:                                           ; preds = %if.end.35
  store i64 -1, i64* %retval
  br label %return

if.end.36:                                        ; preds = %if.else
  %30 = load %struct._object*, %struct._object** %temp1, align 8
  %31 = load %struct._object*, %struct._object** %offset, align 8
  %call37 = call %struct._object* @delta_subtract(%struct._object* %30, %struct._object* %31)
  store %struct._object* %call37, %struct._object** %temp2, align 8
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.36
  %32 = load %struct._object*, %struct._object** %temp1, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp39, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %34, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %do.body.38
  br label %if.end.48

if.else.45:                                       ; preds = %do.body.38
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_dealloc47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc47, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %37(%struct._object* %38)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.44
  br label %do.end.49

do.end.49:                                        ; preds = %if.end.48
  %39 = load %struct._object*, %struct._object** %temp2, align 8
  %cmp50 = icmp eq %struct._object* %39, null
  br i1 %cmp50, label %if.then.52, label %if.end.65

if.then.52:                                       ; preds = %do.end.49
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.52
  %40 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp54, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %42, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.53
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.53
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %45(%struct._object* %46)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  store i64 -1, i64* %retval
  br label %return

if.end.65:                                        ; preds = %do.end.49
  %47 = load %struct._object*, %struct._object** %temp2, align 8
  %call66 = call i64 @PyObject_Hash(%struct._object* %47)
  %48 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %hashcode67 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %48, i32 0, i32 1
  store i64 %call66, i64* %hashcode67, align 8
  br label %do.body.68

do.body.68:                                       ; preds = %if.end.65
  %49 = load %struct._object*, %struct._object** %temp2, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp69, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %51, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.74, label %if.else.75

if.then.74:                                       ; preds = %do.body.68
  br label %if.end.78

if.else.75:                                       ; preds = %do.body.68
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type76 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type76, align 8
  %tp_dealloc77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc77, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %54(%struct._object* %55)
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.75, %if.then.74
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  br label %if.end.80

if.end.80:                                        ; preds = %do.end.79, %if.then.4
  br label %do.body.81

do.body.81:                                       ; preds = %if.end.80
  %56 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp82, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %58, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.87, label %if.else.88

if.then.87:                                       ; preds = %do.body.81
  br label %if.end.91

if.else.88:                                       ; preds = %do.body.81
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type89 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type89, align 8
  %tp_dealloc90 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc90, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %61(%struct._object* %62)
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.88, %if.then.87
  br label %do.end.92

do.end.92:                                        ; preds = %if.end.91
  br label %if.end.93

if.end.93:                                        ; preds = %do.end.92, %entry
  %63 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %hashcode94 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %63, i32 0, i32 1
  %64 = load i64, i64* %hashcode94, align 8
  store i64 %64, i64* %retval
  br label %return

return:                                           ; preds = %if.end.93, %do.end.64, %do.end, %if.then.2
  %65 = load i64, i64* %retval
  ret i64 %65
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_str(%struct.PyDateTime_Time* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Time* %0 to %struct._object*
  %call = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %1, %struct._Py_Identifier* @PyId_isoformat, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_richcompare(%struct._object* %self, %struct._object* %other, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %result = alloca %struct._object*, align 8
  %offset1 = alloca %struct._object*, align 8
  %offset2 = alloca %struct._object*, align 8
  %diff = alloca i32, align 4
  %offsecs1 = alloca i32, align 4
  %offsecs2 = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp152 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_TimeType
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %other.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_TimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %4 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %6, i32 0, i32 2
  %7 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %7 to i32
  %tobool2 = icmp ne i32 %conv, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %self.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_Time*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %9, i32 0, i32 4
  %10 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %10, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %11 = load %struct._object*, %struct._object** %other.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo3 = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %12, i32 0, i32 2
  %13 = load i8, i8* %hastzinfo3, align 1
  %conv4 = sext i8 %13 to i32
  %tobool5 = icmp ne i32 %conv4, 0
  br i1 %tobool5, label %cond.true.6, label %cond.false.8

cond.true.6:                                      ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %other.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDateTime_Time*
  %tzinfo7 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %15, i32 0, i32 4
  %16 = load %struct._object*, %struct._object** %tzinfo7, align 8
  br label %cond.end.9

cond.false.8:                                     ; preds = %cond.end
  br label %cond.end.9

cond.end.9:                                       ; preds = %cond.false.8, %cond.true.6
  %cond10 = phi %struct._object* [ %16, %cond.true.6 ], [ @_Py_NoneStruct, %cond.false.8 ]
  %cmp11 = icmp eq %struct._object* %cond, %cond10
  br i1 %cmp11, label %if.then.13, label %if.end.18

if.then.13:                                       ; preds = %cond.end.9
  %17 = load %struct._object*, %struct._object** %self.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Time*
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %18, i32 0, i32 3
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %data, i32 0, i32 0
  %19 = load %struct._object*, %struct._object** %other.addr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyDateTime_Time*
  %data14 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %20, i32 0, i32 3
  %arraydecay15 = getelementptr inbounds [6 x i8], [6 x i8]* %data14, i32 0, i32 0
  %call16 = call i32 @memcmp(i8* %arraydecay, i8* %arraydecay15, i64 6) #6
  store i32 %call16, i32* %diff, align 4
  %21 = load i32, i32* %diff, align 4
  %22 = load i32, i32* %op.addr, align 4
  %call17 = call %struct._object* @diff_to_bool(i32 %21, i32 %22)
  store %struct._object* %call17, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %cond.end.9
  %23 = load %struct._object*, %struct._object** %self.addr, align 8
  %call19 = call %struct._object* @time_utcoffset(%struct._object* %23, %struct._object* null)
  store %struct._object* %call19, %struct._object** %offset1, align 8
  %24 = load %struct._object*, %struct._object** %offset1, align 8
  %cmp20 = icmp eq %struct._object* %24, null
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.end.18
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.18
  %25 = load %struct._object*, %struct._object** %other.addr, align 8
  %call24 = call %struct._object* @time_utcoffset(%struct._object* %25, %struct._object* null)
  store %struct._object* %call24, %struct._object** %offset2, align 8
  %26 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp25 = icmp eq %struct._object* %26, null
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.23
  br label %done

if.end.28:                                        ; preds = %if.end.23
  %27 = load %struct._object*, %struct._object** %offset1, align 8
  %28 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp29 = icmp eq %struct._object* %27, %28
  br i1 %cmp29, label %if.then.50, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %if.end.28
  %29 = load %struct._object*, %struct._object** %offset1, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %cmp33 = icmp eq %struct._typeobject* %30, @PyDateTime_DeltaType
  br i1 %cmp33, label %land.lhs.true, label %lor.lhs.false.35

lor.lhs.false.35:                                 ; preds = %lor.lhs.false.31
  %31 = load %struct._object*, %struct._object** %offset1, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %call37 = call i32 @PyType_IsSubtype(%struct._typeobject* %32, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %lor.lhs.false.35, %lor.lhs.false.31
  %33 = load %struct._object*, %struct._object** %offset2, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %cmp40 = icmp eq %struct._typeobject* %34, @PyDateTime_DeltaType
  br i1 %cmp40, label %land.lhs.true.46, label %lor.lhs.false.42

lor.lhs.false.42:                                 ; preds = %land.lhs.true
  %35 = load %struct._object*, %struct._object** %offset2, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %call44 = call i32 @PyType_IsSubtype(%struct._typeobject* %36, %struct._typeobject* @PyDateTime_DeltaType)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %land.lhs.true.46, label %if.else

land.lhs.true.46:                                 ; preds = %lor.lhs.false.42, %land.lhs.true
  %37 = load %struct._object*, %struct._object** %offset1, align 8
  %38 = load %struct._object*, %struct._object** %offset2, align 8
  %call47 = call i32 @delta_cmp(%struct._object* %37, %struct._object* %38)
  %cmp48 = icmp eq i32 %call47, 0
  br i1 %cmp48, label %if.then.50, label %if.else

if.then.50:                                       ; preds = %land.lhs.true.46, %if.end.28
  %39 = load %struct._object*, %struct._object** %self.addr, align 8
  %40 = bitcast %struct._object* %39 to %struct.PyDateTime_Time*
  %data51 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %40, i32 0, i32 3
  %arraydecay52 = getelementptr inbounds [6 x i8], [6 x i8]* %data51, i32 0, i32 0
  %41 = load %struct._object*, %struct._object** %other.addr, align 8
  %42 = bitcast %struct._object* %41 to %struct.PyDateTime_Time*
  %data53 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %42, i32 0, i32 3
  %arraydecay54 = getelementptr inbounds [6 x i8], [6 x i8]* %data53, i32 0, i32 0
  %call55 = call i32 @memcmp(i8* %arraydecay52, i8* %arraydecay54, i64 6) #6
  store i32 %call55, i32* %diff, align 4
  %43 = load i32, i32* %diff, align 4
  %44 = load i32, i32* %op.addr, align 4
  %call56 = call %struct._object* @diff_to_bool(i32 %43, i32 %44)
  store %struct._object* %call56, %struct._object** %result, align 8
  br label %if.end.139

if.else:                                          ; preds = %land.lhs.true.46, %lor.lhs.false.42, %lor.lhs.false.35
  %45 = load %struct._object*, %struct._object** %offset1, align 8
  %cmp57 = icmp ne %struct._object* %45, @_Py_NoneStruct
  br i1 %cmp57, label %land.lhs.true.59, label %if.else.124

land.lhs.true.59:                                 ; preds = %if.else
  %46 = load %struct._object*, %struct._object** %offset2, align 8
  %cmp60 = icmp ne %struct._object* %46, @_Py_NoneStruct
  br i1 %cmp60, label %if.then.62, label %if.else.124

if.then.62:                                       ; preds = %land.lhs.true.59
  %47 = load %struct._object*, %struct._object** %self.addr, align 8
  %48 = bitcast %struct._object* %47 to %struct.PyDateTime_Time*
  %data63 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %48, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data63, i32 0, i64 0
  %49 = load i8, i8* %arrayidx, align 1
  %conv64 = zext i8 %49 to i32
  %mul = mul i32 %conv64, 3600
  %50 = load %struct._object*, %struct._object** %self.addr, align 8
  %51 = bitcast %struct._object* %50 to %struct.PyDateTime_Time*
  %data65 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %51, i32 0, i32 3
  %arrayidx66 = getelementptr [6 x i8], [6 x i8]* %data65, i32 0, i64 1
  %52 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %52 to i32
  %mul68 = mul i32 %conv67, 60
  %add = add i32 %mul, %mul68
  %53 = load %struct._object*, %struct._object** %self.addr, align 8
  %54 = bitcast %struct._object* %53 to %struct.PyDateTime_Time*
  %data69 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %54, i32 0, i32 3
  %arrayidx70 = getelementptr [6 x i8], [6 x i8]* %data69, i32 0, i64 2
  %55 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %55 to i32
  %add72 = add i32 %add, %conv71
  %56 = load %struct._object*, %struct._object** %offset1, align 8
  %57 = bitcast %struct._object* %56 to %struct.PyDateTime_Delta*
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %57, i32 0, i32 2
  %58 = load i32, i32* %days, align 4
  %mul73 = mul i32 %58, 86400
  %sub = sub i32 %add72, %mul73
  %59 = load %struct._object*, %struct._object** %offset1, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyDateTime_Delta*
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %60, i32 0, i32 3
  %61 = load i32, i32* %seconds, align 4
  %sub74 = sub i32 %sub, %61
  store i32 %sub74, i32* %offsecs1, align 4
  %62 = load %struct._object*, %struct._object** %other.addr, align 8
  %63 = bitcast %struct._object* %62 to %struct.PyDateTime_Time*
  %data75 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %63, i32 0, i32 3
  %arrayidx76 = getelementptr [6 x i8], [6 x i8]* %data75, i32 0, i64 0
  %64 = load i8, i8* %arrayidx76, align 1
  %conv77 = zext i8 %64 to i32
  %mul78 = mul i32 %conv77, 3600
  %65 = load %struct._object*, %struct._object** %other.addr, align 8
  %66 = bitcast %struct._object* %65 to %struct.PyDateTime_Time*
  %data79 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %66, i32 0, i32 3
  %arrayidx80 = getelementptr [6 x i8], [6 x i8]* %data79, i32 0, i64 1
  %67 = load i8, i8* %arrayidx80, align 1
  %conv81 = zext i8 %67 to i32
  %mul82 = mul i32 %conv81, 60
  %add83 = add i32 %mul78, %mul82
  %68 = load %struct._object*, %struct._object** %other.addr, align 8
  %69 = bitcast %struct._object* %68 to %struct.PyDateTime_Time*
  %data84 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %69, i32 0, i32 3
  %arrayidx85 = getelementptr [6 x i8], [6 x i8]* %data84, i32 0, i64 2
  %70 = load i8, i8* %arrayidx85, align 1
  %conv86 = zext i8 %70 to i32
  %add87 = add i32 %add83, %conv86
  %71 = load %struct._object*, %struct._object** %offset2, align 8
  %72 = bitcast %struct._object* %71 to %struct.PyDateTime_Delta*
  %days88 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %72, i32 0, i32 2
  %73 = load i32, i32* %days88, align 4
  %mul89 = mul i32 %73, 86400
  %sub90 = sub i32 %add87, %mul89
  %74 = load %struct._object*, %struct._object** %offset2, align 8
  %75 = bitcast %struct._object* %74 to %struct.PyDateTime_Delta*
  %seconds91 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %75, i32 0, i32 3
  %76 = load i32, i32* %seconds91, align 4
  %sub92 = sub i32 %sub90, %76
  store i32 %sub92, i32* %offsecs2, align 4
  %77 = load i32, i32* %offsecs1, align 4
  %78 = load i32, i32* %offsecs2, align 4
  %sub93 = sub i32 %77, %78
  store i32 %sub93, i32* %diff, align 4
  %79 = load i32, i32* %diff, align 4
  %cmp94 = icmp eq i32 %79, 0
  br i1 %cmp94, label %if.then.96, label %if.end.122

if.then.96:                                       ; preds = %if.then.62
  %80 = load %struct._object*, %struct._object** %self.addr, align 8
  %81 = bitcast %struct._object* %80 to %struct.PyDateTime_Time*
  %data97 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %81, i32 0, i32 3
  %arrayidx98 = getelementptr [6 x i8], [6 x i8]* %data97, i32 0, i64 3
  %82 = load i8, i8* %arrayidx98, align 1
  %conv99 = zext i8 %82 to i32
  %shl = shl i32 %conv99, 16
  %83 = load %struct._object*, %struct._object** %self.addr, align 8
  %84 = bitcast %struct._object* %83 to %struct.PyDateTime_Time*
  %data100 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %84, i32 0, i32 3
  %arrayidx101 = getelementptr [6 x i8], [6 x i8]* %data100, i32 0, i64 4
  %85 = load i8, i8* %arrayidx101, align 1
  %conv102 = zext i8 %85 to i32
  %shl103 = shl i32 %conv102, 8
  %or = or i32 %shl, %shl103
  %86 = load %struct._object*, %struct._object** %self.addr, align 8
  %87 = bitcast %struct._object* %86 to %struct.PyDateTime_Time*
  %data104 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %87, i32 0, i32 3
  %arrayidx105 = getelementptr [6 x i8], [6 x i8]* %data104, i32 0, i64 5
  %88 = load i8, i8* %arrayidx105, align 1
  %conv106 = zext i8 %88 to i32
  %or107 = or i32 %or, %conv106
  %89 = load %struct._object*, %struct._object** %other.addr, align 8
  %90 = bitcast %struct._object* %89 to %struct.PyDateTime_Time*
  %data108 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %90, i32 0, i32 3
  %arrayidx109 = getelementptr [6 x i8], [6 x i8]* %data108, i32 0, i64 3
  %91 = load i8, i8* %arrayidx109, align 1
  %conv110 = zext i8 %91 to i32
  %shl111 = shl i32 %conv110, 16
  %92 = load %struct._object*, %struct._object** %other.addr, align 8
  %93 = bitcast %struct._object* %92 to %struct.PyDateTime_Time*
  %data112 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %93, i32 0, i32 3
  %arrayidx113 = getelementptr [6 x i8], [6 x i8]* %data112, i32 0, i64 4
  %94 = load i8, i8* %arrayidx113, align 1
  %conv114 = zext i8 %94 to i32
  %shl115 = shl i32 %conv114, 8
  %or116 = or i32 %shl111, %shl115
  %95 = load %struct._object*, %struct._object** %other.addr, align 8
  %96 = bitcast %struct._object* %95 to %struct.PyDateTime_Time*
  %data117 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %96, i32 0, i32 3
  %arrayidx118 = getelementptr [6 x i8], [6 x i8]* %data117, i32 0, i64 5
  %97 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %97 to i32
  %or120 = or i32 %or116, %conv119
  %sub121 = sub i32 %or107, %or120
  store i32 %sub121, i32* %diff, align 4
  br label %if.end.122

if.end.122:                                       ; preds = %if.then.96, %if.then.62
  %98 = load i32, i32* %diff, align 4
  %99 = load i32, i32* %op.addr, align 4
  %call123 = call %struct._object* @diff_to_bool(i32 %98, i32 %99)
  store %struct._object* %call123, %struct._object** %result, align 8
  br label %if.end.138

if.else.124:                                      ; preds = %land.lhs.true.59, %if.else
  %100 = load i32, i32* %op.addr, align 4
  %cmp125 = icmp eq i32 %100, 2
  br i1 %cmp125, label %if.then.127, label %if.else.129

if.then.127:                                      ; preds = %if.else.124
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %result, align 8
  %101 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 0
  %102 = load i64, i64* %ob_refcnt, align 8
  %inc128 = add i64 %102, 1
  store i64 %inc128, i64* %ob_refcnt, align 8
  br label %if.end.137

if.else.129:                                      ; preds = %if.else.124
  %103 = load i32, i32* %op.addr, align 4
  %cmp130 = icmp eq i32 %103, 3
  br i1 %cmp130, label %if.then.132, label %if.else.135

if.then.132:                                      ; preds = %if.else.129
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %result, align 8
  %104 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt133 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0
  %105 = load i64, i64* %ob_refcnt133, align 8
  %inc134 = add i64 %105, 1
  store i64 %inc134, i64* %ob_refcnt133, align 8
  br label %if.end.136

if.else.135:                                      ; preds = %if.else.129
  %106 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %106, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.200, i32 0, i32 0))
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.135, %if.then.132
  br label %if.end.137

if.end.137:                                       ; preds = %if.end.136, %if.then.127
  br label %if.end.138

if.end.138:                                       ; preds = %if.end.137, %if.end.122
  br label %if.end.139

if.end.139:                                       ; preds = %if.end.138, %if.then.50
  br label %done

done:                                             ; preds = %if.end.139, %if.then.27
  br label %do.body

do.body:                                          ; preds = %done
  %107 = load %struct._object*, %struct._object** %offset1, align 8
  store %struct._object* %107, %struct._object** %_py_decref_tmp, align 8
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt140 = getelementptr inbounds %struct._object, %struct._object* %108, i32 0, i32 0
  %109 = load i64, i64* %ob_refcnt140, align 8
  %dec = add i64 %109, -1
  store i64 %dec, i64* %ob_refcnt140, align 8
  %cmp141 = icmp ne i64 %dec, 0
  br i1 %cmp141, label %if.then.143, label %if.else.144

if.then.143:                                      ; preds = %do.body
  br label %if.end.146

if.else.144:                                      ; preds = %do.body
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type145 = getelementptr inbounds %struct._object, %struct._object* %110, i32 0, i32 1
  %111 = load %struct._typeobject*, %struct._typeobject** %ob_type145, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %111, i32 0, i32 4
  %112 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %112(%struct._object* %113)
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.144, %if.then.143
  br label %do.end

do.end:                                           ; preds = %if.end.146
  br label %do.body.147

do.body.147:                                      ; preds = %do.end
  %114 = load %struct._object*, %struct._object** %offset2, align 8
  store %struct._object* %114, %struct._object** %_py_xdecref_tmp, align 8
  %115 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp148 = icmp ne %struct._object* %115, null
  br i1 %cmp148, label %if.then.150, label %if.end.163

if.then.150:                                      ; preds = %do.body.147
  br label %do.body.151

do.body.151:                                      ; preds = %if.then.150
  %116 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %116, %struct._object** %_py_decref_tmp152, align 8
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp152, align 8
  %ob_refcnt153 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 0
  %118 = load i64, i64* %ob_refcnt153, align 8
  %dec154 = add i64 %118, -1
  store i64 %dec154, i64* %ob_refcnt153, align 8
  %cmp155 = icmp ne i64 %dec154, 0
  br i1 %cmp155, label %if.then.157, label %if.else.158

if.then.157:                                      ; preds = %do.body.151
  br label %if.end.161

if.else.158:                                      ; preds = %do.body.151
  %119 = load %struct._object*, %struct._object** %_py_decref_tmp152, align 8
  %ob_type159 = getelementptr inbounds %struct._object, %struct._object* %119, i32 0, i32 1
  %120 = load %struct._typeobject*, %struct._typeobject** %ob_type159, align 8
  %tp_dealloc160 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %120, i32 0, i32 4
  %121 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc160, align 8
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp152, align 8
  call void %121(%struct._object* %122)
  br label %if.end.161

if.end.161:                                       ; preds = %if.else.158, %if.then.157
  br label %do.end.162

do.end.162:                                       ; preds = %if.end.161
  br label %if.end.163

if.end.163:                                       ; preds = %do.end.162, %do.body.147
  br label %do.end.164

do.end.164:                                       ; preds = %if.end.163
  %123 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %123, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.164, %if.then.22, %if.then.13, %if.then
  %124 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %124
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_alloc(%struct._typeobject* %type, i64 %aware) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %aware.addr = alloca i64, align 8
  %self = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i64 %aware, i64* %aware.addr, align 8
  %0 = load i64, i64* %aware.addr, align 8
  %tobool = icmp ne i64 %0, 0
  %cond = select i1 %tobool, i64 40, i64 32
  %call = call i8* @PyObject_Malloc(i64 %cond)
  %1 = bitcast i8* %call to %struct._object*
  store %struct._object* %1, %struct._object** %self, align 8
  %2 = load %struct._object*, %struct._object** %self, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call1, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = load %struct._object*, %struct._object** %self, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  store %struct._typeobject* %3, %struct._typeobject** %ob_type, align 8
  %5 = load %struct._object*, %struct._object** %self, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  store i64 1, i64* %ob_refcnt, align 8
  %6 = load %struct._object*, %struct._object** %self, align 8
  %7 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %self = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %hour = alloca i32, align 4
  %minute = alloca i32, align 4
  %second = alloca i32, align 4
  %usecond = alloca i32, align 4
  %tzinfo = alloca %struct._object*, align 8
  %me = alloca %struct.PyDateTime_Time*, align 8
  %aware = alloca i8, align 1
  %pdata = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %self, align 8
  store i32 0, i32* %hour, align 4
  store i32 0, i32* %minute, align 4
  store i32 0, i32* %second, align 4
  store i32 0, i32* %usecond, align 4
  store %struct._object* @_Py_NoneStruct, %struct._object** %tzinfo, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %cmp = icmp sge i64 %2, 1
  br i1 %cmp, label %land.lhs.true, label %if.end.36

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size1, align 8
  %cmp2 = icmp sle i64 %5, 2
  br i1 %cmp2, label %land.lhs.true.3, label %if.end.36

land.lhs.true.3:                                  ; preds = %land.lhs.true
  %6 = load %struct._object*, %struct._object** %args.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %7, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %8 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %8, %struct._object** %state, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 19
  %10 = load i64, i64* %tp_flags, align 8
  %and = and i64 %10, 134217728
  %cmp4 = icmp ne i64 %and, 0
  br i1 %cmp4, label %land.lhs.true.5, label %if.end.36

land.lhs.true.5:                                  ; preds = %land.lhs.true.3
  %11 = load %struct._object*, %struct._object** %state, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1
  %13 = load i64, i64* %ob_size6, align 8
  %cmp7 = icmp eq i64 %13, 6
  br i1 %cmp7, label %land.lhs.true.8, label %if.end.36

land.lhs.true.8:                                  ; preds = %land.lhs.true.5
  %14 = load %struct._object*, %struct._object** %state, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %15, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %arrayidx9 = getelementptr i8, i8* %arraydecay, i64 0
  %16 = load i8, i8* %arrayidx9, align 1
  %conv = zext i8 %16 to i32
  %cmp10 = icmp slt i32 %conv, 24
  br i1 %cmp10, label %if.then, label %if.end.36

if.then:                                          ; preds = %land.lhs.true.8
  %17 = load %struct._object*, %struct._object** %args.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*
  %ob_size12 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1
  %19 = load i64, i64* %ob_size12, align 8
  %cmp13 = icmp eq i64 %19, 2
  br i1 %cmp13, label %if.then.15, label %if.end.21

if.then.15:                                       ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %args.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyTupleObject*
  %ob_item16 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %21, i32 0, i32 1
  %arrayidx17 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item16, i32 0, i64 1
  %22 = load %struct._object*, %struct._object** %arrayidx17, align 8
  store %struct._object* %22, %struct._object** %tzinfo, align 8
  %23 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call = call i32 @check_tzinfo_subclass(%struct._object* %23)
  %cmp18 = icmp slt i32 %call, 0
  br i1 %cmp18, label %if.then.20, label %if.end

if.then.20:                                       ; preds = %if.then.15
  %24 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %24, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.167, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.15
  br label %if.end.21

if.end.21:                                        ; preds = %if.end, %if.then
  %25 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp22 = icmp ne %struct._object* %25, @_Py_NoneStruct
  %conv23 = zext i1 %cmp22 to i32
  %conv24 = trunc i32 %conv23 to i8
  store i8 %conv24, i8* %aware, align 1
  %26 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 36
  %27 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %28 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %29 = load i8, i8* %aware, align 1
  %conv25 = sext i8 %29 to i64
  %call26 = call %struct._object* %27(%struct._typeobject* %28, i64 %conv25)
  %30 = bitcast %struct._object* %call26 to %struct.PyDateTime_Time*
  store %struct.PyDateTime_Time* %30, %struct.PyDateTime_Time** %me, align 8
  %31 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %me, align 8
  %cmp27 = icmp ne %struct.PyDateTime_Time* %31, null
  br i1 %cmp27, label %if.then.29, label %if.end.35

if.then.29:                                       ; preds = %if.end.21
  %32 = load %struct._object*, %struct._object** %state, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyBytesObject*
  %ob_sval30 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %33, i32 0, i32 2
  %arraydecay31 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval30, i32 0, i32 0
  store i8* %arraydecay31, i8** %pdata, align 8
  %34 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %me, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %34, i32 0, i32 3
  %35 = bitcast [6 x i8]* %data to i8*
  %36 = load i8*, i8** %pdata, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %35, i8* %36, i64 6, i32 1, i1 false)
  %37 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %me, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %37, i32 0, i32 1
  store i64 -1, i64* %hashcode, align 8
  %38 = load i8, i8* %aware, align 1
  %39 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %me, align 8
  %hastzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %39, i32 0, i32 2
  store i8 %38, i8* %hastzinfo, align 1
  %40 = load i8, i8* %aware, align 1
  %tobool = icmp ne i8 %40, 0
  br i1 %tobool, label %if.then.32, label %if.end.34

if.then.32:                                       ; preds = %if.then.29
  %41 = load %struct._object*, %struct._object** %tzinfo, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %42, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %43 = load %struct._object*, %struct._object** %tzinfo, align 8
  %44 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %me, align 8
  %tzinfo33 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %44, i32 0, i32 4
  store %struct._object* %43, %struct._object** %tzinfo33, align 8
  br label %if.end.34

if.end.34:                                        ; preds = %if.then.32, %if.then.29
  br label %if.end.35

if.end.35:                                        ; preds = %if.end.34, %if.end.21
  %45 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %me, align 8
  %46 = bitcast %struct.PyDateTime_Time* %45 to %struct._object*
  store %struct._object* %46, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %land.lhs.true.8, %land.lhs.true.5, %land.lhs.true.3, %land.lhs.true, %entry
  %47 = load %struct._object*, %struct._object** %args.addr, align 8
  %48 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call37 = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %47, %struct._object* %48, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.208, i32 0, i32 0), i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @time_kws, i32 0, i32 0), i32* %hour, i32* %minute, i32* %second, i32* %usecond, %struct._object** %tzinfo)
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.39, label %if.end.51

if.then.39:                                       ; preds = %if.end.36
  %49 = load i32, i32* %hour, align 4
  %50 = load i32, i32* %minute, align 4
  %51 = load i32, i32* %second, align 4
  %52 = load i32, i32* %usecond, align 4
  %call40 = call i32 @check_time_args(i32 %49, i32 %50, i32 %51, i32 %52)
  %cmp41 = icmp slt i32 %call40, 0
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.then.39
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.44:                                        ; preds = %if.then.39
  %53 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call45 = call i32 @check_tzinfo_subclass(%struct._object* %53)
  %cmp46 = icmp slt i32 %call45, 0
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.end.44
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.49:                                        ; preds = %if.end.44
  %54 = load i32, i32* %hour, align 4
  %55 = load i32, i32* %minute, align 4
  %56 = load i32, i32* %second, align 4
  %57 = load i32, i32* %usecond, align 4
  %58 = load %struct._object*, %struct._object** %tzinfo, align 8
  %59 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call50 = call %struct._object* @new_time_ex(i32 %54, i32 %55, i32 %56, i32 %57, %struct._object* %58, %struct._typeobject* %59)
  store %struct._object* %call50, %struct._object** %self, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.49, %if.end.36
  %60 = load %struct._object*, %struct._object** %self, align 8
  store %struct._object* %60, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.51, %if.then.48, %if.then.43, %if.end.35, %if.then.20
  %61 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %61
}

; Function Attrs: nounwind uwtable
define internal i32 @time_bool(%struct._object* %self) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %offset = alloca %struct._object*, align 8
  %tzinfo = alloca %struct._object*, align 8
  %offsecs = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 0, i32* %offsecs, align 4
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDateTime_Time*
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %1, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 2
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDateTime_Time*
  %data1 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 3
  %arrayidx2 = getelementptr [6 x i8], [6 x i8]* %data1, i32 0, i64 3
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %5 to i32
  %shl = shl i32 %conv3, 16
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDateTime_Time*
  %data4 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %7, i32 0, i32 3
  %arrayidx5 = getelementptr [6 x i8], [6 x i8]* %data4, i32 0, i64 4
  %8 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %8 to i32
  %shl7 = shl i32 %conv6, 8
  %or = or i32 %shl, %shl7
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDateTime_Time*
  %data8 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %10, i32 0, i32 3
  %arrayidx9 = getelementptr [6 x i8], [6 x i8]* %data8, i32 0, i64 5
  %11 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %11 to i32
  %or11 = or i32 %or, %conv10
  %tobool12 = icmp ne i32 %or11, 0
  br i1 %tobool12, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %13, i32 0, i32 2
  %14 = load i8, i8* %hastzinfo, align 1
  %conv13 = sext i8 %14 to i32
  %tobool14 = icmp ne i32 %conv13, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyDateTime_Time*
  %tzinfo15 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %16, i32 0, i32 4
  %17 = load %struct._object*, %struct._object** %tzinfo15, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %17, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %tzinfo, align 8
  %18 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp = icmp ne %struct._object* %18, @_Py_NoneStruct
  br i1 %cmp, label %if.then.17, label %if.end.26

if.then.17:                                       ; preds = %cond.end
  %19 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call = call %struct._object* @call_utcoffset(%struct._object* %19, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call, %struct._object** %offset, align 8
  %20 = load %struct._object*, %struct._object** %offset, align 8
  %cmp18 = icmp eq %struct._object* %20, null
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.then.17
  store i32 -1, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.then.17
  %21 = load %struct._object*, %struct._object** %offset, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyDateTime_Delta*
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %22, i32 0, i32 2
  %23 = load i32, i32* %days, align 4
  %mul = mul i32 %23, 86400
  %24 = load %struct._object*, %struct._object** %offset, align 8
  %25 = bitcast %struct._object* %24 to %struct.PyDateTime_Delta*
  %seconds = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %25, i32 0, i32 3
  %26 = load i32, i32* %seconds, align 4
  %add = add i32 %mul, %26
  store i32 %add, i32* %offsecs, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.21
  %27 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %29, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec, 0
  br i1 %cmp22, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %do.body
  br label %if.end.25

if.else:                                          ; preds = %do.body
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %32(%struct._object* %33)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.24
  br label %do.end

do.end:                                           ; preds = %if.end.25
  br label %if.end.26

if.end.26:                                        ; preds = %do.end, %cond.end
  %34 = load %struct._object*, %struct._object** %self.addr, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDateTime_Time*
  %data27 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %35, i32 0, i32 3
  %arrayidx28 = getelementptr [6 x i8], [6 x i8]* %data27, i32 0, i64 1
  %36 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %36 to i32
  %mul30 = mul i32 %conv29, 60
  %37 = load i32, i32* %offsecs, align 4
  %sub = sub i32 %mul30, %37
  %38 = load %struct._object*, %struct._object** %self.addr, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDateTime_Time*
  %data31 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %39, i32 0, i32 3
  %arrayidx32 = getelementptr [6 x i8], [6 x i8]* %data31, i32 0, i64 0
  %40 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %40 to i32
  %mul34 = mul i32 %conv33, 3600
  %add35 = add i32 %sub, %mul34
  %cmp36 = icmp ne i32 %add35, 0
  %conv37 = zext i1 %cmp36 to i32
  store i32 %conv37, i32* %retval
  br label %return

return:                                           ; preds = %if.end.26, %if.then.20, %if.then
  %41 = load i32, i32* %retval
  ret i32 %41
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_utcoffset(%struct._object* %self, %struct._object* %unused) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %unused.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %unused, %struct._object** %unused.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDateTime_Time*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 4
  %5 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %5, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %call = call %struct._object* @call_utcoffset(%struct._object* %cond, %struct._object* @_Py_NoneStruct)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_isoformat(%struct.PyDateTime_Time* %self, %struct._object* %unused) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %unused.addr = alloca %struct._object*, align 8
  %buf = alloca [100 x i8], align 16
  %result = alloca %struct._object*, align 8
  %us = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store %struct._object* %unused, %struct._object** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 3
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 16
  %2 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [6 x i8], [6 x i8]* %data1, i32 0, i64 4
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %shl4 = shl i32 %conv3, 8
  %or = or i32 %shl, %shl4
  %4 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data5 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 3
  %arrayidx6 = getelementptr [6 x i8], [6 x i8]* %data5, i32 0, i64 5
  %5 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %5 to i32
  %or8 = or i32 %or, %conv7
  store i32 %or8, i32* %us, align 4
  %6 = load i32, i32* %us, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data9 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %7, i32 0, i32 3
  %arrayidx10 = getelementptr [6 x i8], [6 x i8]* %data9, i32 0, i64 0
  %8 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %8 to i32
  %9 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data12 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %9, i32 0, i32 3
  %arrayidx13 = getelementptr [6 x i8], [6 x i8]* %data12, i32 0, i64 1
  %10 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %10 to i32
  %11 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data15 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %11, i32 0, i32 3
  %arrayidx16 = getelementptr [6 x i8], [6 x i8]* %data15, i32 0, i64 2
  %12 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %12 to i32
  %13 = load i32, i32* %us, align 4
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.203, i32 0, i32 0), i32 %conv11, i32 %conv14, i32 %conv17, i32 %13)
  store %struct._object* %call, %struct._object** %result, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %14 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data18 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %14, i32 0, i32 3
  %arrayidx19 = getelementptr [6 x i8], [6 x i8]* %data18, i32 0, i64 0
  %15 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %15 to i32
  %16 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data21 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %16, i32 0, i32 3
  %arrayidx22 = getelementptr [6 x i8], [6 x i8]* %data21, i32 0, i64 1
  %17 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %17 to i32
  %18 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data24 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %18, i32 0, i32 3
  %arrayidx25 = getelementptr [6 x i8], [6 x i8]* %data24, i32 0, i64 2
  %19 = load i8, i8* %arrayidx25, align 1
  %conv26 = zext i8 %19 to i32
  %call27 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.204, i32 0, i32 0), i32 %conv20, i32 %conv23, i32 %conv26)
  store %struct._object* %call27, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %20 = load %struct._object*, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %20, null
  br i1 %cmp, label %if.then.33, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %21 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %22 = bitcast %struct.PyDateTime_Time* %21 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %22, i32 0, i32 2
  %23 = load i8, i8* %hastzinfo, align 1
  %tobool29 = icmp ne i8 %23, 0
  br i1 %tobool29, label %lor.lhs.false.30, label %if.then.33

lor.lhs.false.30:                                 ; preds = %lor.lhs.false
  %24 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %24, i32 0, i32 4
  %25 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp31 = icmp eq %struct._object* %25, @_Py_NoneStruct
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %lor.lhs.false.30, %lor.lhs.false, %if.end
  %26 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %26, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %lor.lhs.false.30
  %arraydecay = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %27 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo35 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %27, i32 0, i32 4
  %28 = load %struct._object*, %struct._object** %tzinfo35, align 8
  %call36 = call i32 @format_utcoffset(i8* %arraydecay, i64 100, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.156, i32 0, i32 0), %struct._object* %28, %struct._object* @_Py_NoneStruct)
  %cmp37 = icmp slt i32 %call36, 0
  br i1 %cmp37, label %if.then.39, label %if.end.45

if.then.39:                                       ; preds = %if.end.34
  br label %do.body

do.body:                                          ; preds = %if.then.39
  %29 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %31, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp40 = icmp ne i64 %dec, 0
  br i1 %cmp40, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body
  br label %if.end.44

if.else.43:                                       ; preds = %do.body
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %34(%struct._object* %35)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else.43, %if.then.42
  br label %do.end

do.end:                                           ; preds = %if.end.44
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.45:                                        ; preds = %if.end.34
  %arraydecay46 = getelementptr inbounds [100 x i8], [100 x i8]* %buf, i32 0, i32 0
  %call47 = call %struct._object* @PyUnicode_FromString(i8* %arraydecay46)
  call void @PyUnicode_AppendAndDel(%struct._object** %result, %struct._object* %call47)
  %36 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %36, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.45, %do.end, %if.then.33
  %37 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %37
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_strftime(%struct.PyDateTime_Time* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %tuple = alloca %struct._object*, align 8
  %format = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.74, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @time_strftime.keywords, i32 0, i32 0), %struct._object** %format)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %2, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  %4 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 3
  %arrayidx2 = getelementptr [6 x i8], [6 x i8]* %data1, i32 0, i64 1
  %5 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %5 to i32
  %6 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %6, i32 0, i32 3
  %arrayidx5 = getelementptr [6 x i8], [6 x i8]* %data4, i32 0, i64 2
  %7 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %7 to i32
  %call7 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.205, i32 0, i32 0), i32 1900, i32 1, i32 1, i32 %conv, i32 %conv3, i32 %conv6, i32 0, i32 1, i32 -1)
  store %struct._object* %call7, %struct._object** %tuple, align 8
  %8 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %8, null
  br i1 %cmp, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  %9 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %10 = bitcast %struct.PyDateTime_Time* %9 to %struct._object*
  %11 = load %struct._object*, %struct._object** %format, align 8
  %12 = load %struct._object*, %struct._object** %tuple, align 8
  %call11 = call %struct._object* @wrap_strftime(%struct._object* %10, %struct._object* %11, %struct._object* %12, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call11, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.10
  %13 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.14
  br label %do.end

do.end:                                           ; preds = %if.end.15
  %20 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %20, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.9, %if.then
  %21 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %21
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_tzname(%struct.PyDateTime_Time* %self, %struct._object* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %unused.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store %struct._object* %unused, %struct._object** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Time* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %4, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %call = call %struct._object* @call_tzname(%struct._object* %cond, %struct._object* @_Py_NoneStruct)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_dst(%struct._object* %self, %struct._object* %unused) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %unused.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %unused, %struct._object** %unused.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDateTime_Time*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 4
  %5 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %5, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %call = call %struct._object* @call_dst(%struct._object* %cond, %struct._object* @_Py_NoneStruct)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_replace(%struct.PyDateTime_Time* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %clone = alloca %struct._object*, align 8
  %tuple = alloca %struct._object*, align 8
  %hh = alloca i32, align 4
  %mm = alloca i32, align 4
  %ss = alloca i32, align 4
  %us = alloca i32, align 4
  %tzinfo = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  store i32 %conv, i32* %hh, align 4
  %2 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [6 x i8], [6 x i8]* %data1, i32 0, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  store i32 %conv3, i32* %mm, align 4
  %4 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data4 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 3
  %arrayidx5 = getelementptr [6 x i8], [6 x i8]* %data4, i32 0, i64 2
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  store i32 %conv6, i32* %ss, align 4
  %6 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data7 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %6, i32 0, i32 3
  %arrayidx8 = getelementptr [6 x i8], [6 x i8]* %data7, i32 0, i64 3
  %7 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %7 to i32
  %shl = shl i32 %conv9, 16
  %8 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data10 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %8, i32 0, i32 3
  %arrayidx11 = getelementptr [6 x i8], [6 x i8]* %data10, i32 0, i64 4
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %9 to i32
  %shl13 = shl i32 %conv12, 8
  %or = or i32 %shl, %shl13
  %10 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data14 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %10, i32 0, i32 3
  %arrayidx15 = getelementptr [6 x i8], [6 x i8]* %data14, i32 0, i64 5
  %11 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %11 to i32
  %or17 = or i32 %or, %conv16
  store i32 %or17, i32* %us, align 4
  %12 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %13 = bitcast %struct.PyDateTime_Time* %12 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %13, i32 0, i32 2
  %14 = load i8, i8* %hastzinfo, align 1
  %conv18 = sext i8 %14 to i32
  %tobool = icmp ne i32 %conv18, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %15 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo19 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %15, i32 0, i32 4
  %16 = load %struct._object*, %struct._object** %tzinfo19, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %16, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %tzinfo, align 8
  %17 = load %struct._object*, %struct._object** %args.addr, align 8
  %18 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %17, %struct._object* %18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.206, i32 0, i32 0), i8** getelementptr inbounds ([6 x i8*], [6 x i8*]* @time_kws, i32 0, i32 0), i32* %hh, i32* %mm, i32* %ss, i32* %us, %struct._object** %tzinfo)
  %tobool20 = icmp ne i32 %call, 0
  br i1 %tobool20, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %19 = load i32, i32* %hh, align 4
  %20 = load i32, i32* %mm, align 4
  %21 = load i32, i32* %ss, align 4
  %22 = load i32, i32* %us, align 4
  %23 = load %struct._object*, %struct._object** %tzinfo, align 8
  %call21 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.207, i32 0, i32 0), i32 %19, i32 %20, i32 %21, i32 %22, %struct._object* %23)
  store %struct._object* %call21, %struct._object** %tuple, align 8
  %24 = load %struct._object*, %struct._object** %tuple, align 8
  %cmp = icmp eq %struct._object* %24, null
  br i1 %cmp, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %if.end
  %25 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %26 = bitcast %struct.PyDateTime_Time* %25 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %28 = load %struct._object*, %struct._object** %tuple, align 8
  %call25 = call %struct._object* @time_new(%struct._typeobject* %27, %struct._object* %28, %struct._object* null)
  store %struct._object* %call25, %struct._object** %clone, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.24
  %29 = load %struct._object*, %struct._object** %tuple, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %31, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp26 = icmp ne i64 %dec, 0
  br i1 %cmp26, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %do.body
  br label %if.end.30

if.else:                                          ; preds = %do.body
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %34(%struct._object* %35)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.28
  br label %do.end

do.end:                                           ; preds = %if.end.30
  %36 = load %struct._object*, %struct._object** %clone, align 8
  store %struct._object* %36, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.23, %if.then
  %37 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %37
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_reduce(%struct.PyDateTime_Time* %self, %struct._object* %arg) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %arg.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Time* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %3 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %call = call %struct._object* @time_getstate(%struct.PyDateTime_Time* %3)
  %call1 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.98, i32 0, i32 0), %struct._typeobject* %2, %struct._object* %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_getstate(%struct.PyDateTime_Time* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %basestate = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 3
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %data, i32 0, i32 0
  %call = call %struct._object* @PyBytes_FromStringAndSize(i8* %arraydecay, i64 6)
  store %struct._object* %call, %struct._object** %basestate, align 8
  %1 = load %struct._object*, %struct._object** %basestate, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %3 = bitcast %struct.PyDateTime_Time* %2 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %3, i32 0, i32 2
  %4 = load i8, i8* %hastzinfo, align 1
  %tobool = icmp ne i8 %4, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then.2

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %5, i32 0, i32 4
  %6 = load %struct._object*, %struct._object** %tzinfo, align 8
  %cmp1 = icmp eq %struct._object* %6, @_Py_NoneStruct
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %lor.lhs.false, %if.then
  %7 = load %struct._object*, %struct._object** %basestate, align 8
  %call3 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %7)
  store %struct._object* %call3, %struct._object** %result, align 8
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** %basestate, align 8
  %9 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo4 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %9, i32 0, i32 4
  %10 = load %struct._object*, %struct._object** %tzinfo4, align 8
  %call5 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %8, %struct._object* %10)
  store %struct._object* %call5, %struct._object** %result, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %do.body

do.body:                                          ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %basestate, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else.8

if.then.7:                                        ; preds = %do.body
  br label %if.end.9

if.else.8:                                        ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else.8, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %entry
  %18 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %18
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_hour(%struct.PyDateTime_Time* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_minute(%struct.PyDateTime_Time* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 1
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @py_time_second(%struct.PyDateTime_Time* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 2
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_microsecond(%struct.PyDateTime_Time* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %unused.addr = alloca i8*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %0, i32 0, i32 3
  %arrayidx = getelementptr [6 x i8], [6 x i8]* %data, i32 0, i64 3
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shl = shl i32 %conv, 16
  %2 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data1 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %2, i32 0, i32 3
  %arrayidx2 = getelementptr [6 x i8], [6 x i8]* %data1, i32 0, i64 4
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %shl4 = shl i32 %conv3, 8
  %or = or i32 %shl, %shl4
  %4 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %data5 = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %4, i32 0, i32 3
  %arrayidx6 = getelementptr [6 x i8], [6 x i8]* %data5, i32 0, i64 5
  %5 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %5 to i32
  %or8 = or i32 %or, %conv7
  %conv9 = sext i32 %or8 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv9)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @time_tzinfo(%struct.PyDateTime_Time* %self, i8* %unused) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Time*, align 8
  %unused.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  store %struct.PyDateTime_Time* %self, %struct.PyDateTime_Time** %self.addr, align 8
  store i8* %unused, i8** %unused.addr, align 8
  %0 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_Time* %0 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %1, i32 0, i32 2
  %2 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %2 to i32
  %tobool = icmp ne i32 %conv, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %3 = load %struct.PyDateTime_Time*, %struct.PyDateTime_Time** %self.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_Time, %struct.PyDateTime_Time* %3, i32 0, i32 4
  %4 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %4, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %result, align 8
  %5 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %7 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %7
}

declare %struct._object* @PyType_GenericNew(%struct._typeobject*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @tzinfo_tzname(%struct.PyDateTime_TZInfo* %self, %struct._object* %dt) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_TZInfo*, align 8
  %dt.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_TZInfo* %self, %struct.PyDateTime_TZInfo** %self.addr, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  %call = call %struct._object* @tzinfo_nogo(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @tzinfo_utcoffset(%struct.PyDateTime_TZInfo* %self, %struct._object* %dt) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_TZInfo*, align 8
  %dt.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_TZInfo* %self, %struct.PyDateTime_TZInfo** %self.addr, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  %call = call %struct._object* @tzinfo_nogo(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @tzinfo_dst(%struct.PyDateTime_TZInfo* %self, %struct._object* %dt) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_TZInfo*, align 8
  %dt.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_TZInfo* %self, %struct.PyDateTime_TZInfo** %self.addr, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  %call = call %struct._object* @tzinfo_nogo(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0))
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @tzinfo_fromutc(%struct.PyDateTime_TZInfo* %self, %struct._object* %dt) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TZInfo*, align 8
  %dt.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %off = alloca %struct._object*, align 8
  %dst = alloca %struct._object*, align 8
  %delta = alloca %struct.PyDateTime_Delta*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp80 = alloca %struct._object*, align 8
  %_py_decref_tmp92 = alloca %struct._object*, align 8
  %_py_decref_tmp104 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp120 = alloca %struct._object*, align 8
  %_py_xdecref_tmp134 = alloca %struct._object*, align 8
  %_py_decref_tmp139 = alloca %struct._object*, align 8
  %_py_xdecref_tmp153 = alloca %struct._object*, align 8
  %_py_decref_tmp158 = alloca %struct._object*, align 8
  %_py_xdecref_tmp172 = alloca %struct._object*, align 8
  %_py_decref_tmp177 = alloca %struct._object*, align 8
  store %struct.PyDateTime_TZInfo* %self, %struct.PyDateTime_TZInfo** %self.addr, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %off, align 8
  store %struct._object* null, %struct._object** %dst, align 8
  store %struct.PyDateTime_Delta* null, %struct.PyDateTime_Delta** %delta, align 8
  %0 = load %struct._object*, %struct._object** %dt.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDateTime_DateTimeType
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dt.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.216, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %5 = load %struct._object*, %struct._object** %dt.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %6, i32 0, i32 2
  %7 = load i8, i8* %hastzinfo, align 1
  %conv = sext i8 %7 to i32
  %tobool2 = icmp ne i32 %conv, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %dt.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_DateTime*
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %9, i32 0, i32 4
  %10 = load %struct._object*, %struct._object** %tzinfo, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %10, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  %11 = load %struct.PyDateTime_TZInfo*, %struct.PyDateTime_TZInfo** %self.addr, align 8
  %12 = bitcast %struct.PyDateTime_TZInfo* %11 to %struct._object*
  %cmp3 = icmp ne %struct._object* %cond, %12
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %cond.end
  %13 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.217, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %cond.end
  %14 = load %struct._object*, %struct._object** %dt.addr, align 8
  %call7 = call %struct._object* @datetime_utcoffset(%struct._object* %14, %struct._object* null)
  store %struct._object* %call7, %struct._object** %off, align 8
  %15 = load %struct._object*, %struct._object** %off, align 8
  %cmp8 = icmp eq %struct._object* %15, null
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %if.end.6
  %16 = load %struct._object*, %struct._object** %off, align 8
  %cmp12 = icmp eq %struct._object* %16, @_Py_NoneStruct
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.11
  %17 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.218, i32 0, i32 0))
  br label %Fail

if.end.15:                                        ; preds = %if.end.11
  %18 = load %struct._object*, %struct._object** %dt.addr, align 8
  %call16 = call %struct._object* @datetime_dst(%struct._object* %18, %struct._object* null)
  store %struct._object* %call16, %struct._object** %dst, align 8
  %19 = load %struct._object*, %struct._object** %dst, align 8
  %cmp17 = icmp eq %struct._object* %19, null
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.15
  br label %Fail

if.end.20:                                        ; preds = %if.end.15
  %20 = load %struct._object*, %struct._object** %dst, align 8
  %cmp21 = icmp eq %struct._object* %20, @_Py_NoneStruct
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.20
  %21 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %21, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.219, i32 0, i32 0))
  br label %Fail

if.end.24:                                        ; preds = %if.end.20
  %22 = load %struct._object*, %struct._object** %off, align 8
  %23 = load %struct._object*, %struct._object** %dst, align 8
  %call25 = call %struct._object* @delta_subtract(%struct._object* %22, %struct._object* %23)
  %24 = bitcast %struct._object* %call25 to %struct.PyDateTime_Delta*
  store %struct.PyDateTime_Delta* %24, %struct.PyDateTime_Delta** %delta, align 8
  %25 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %cmp26 = icmp eq %struct.PyDateTime_Delta* %25, null
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.24
  br label %Fail

if.end.29:                                        ; preds = %if.end.24
  %26 = load %struct._object*, %struct._object** %dt.addr, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDateTime_DateTime*
  %28 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %call30 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %27, %struct.PyDateTime_Delta* %28, i32 1)
  store %struct._object* %call30, %struct._object** %result, align 8
  %29 = load %struct._object*, %struct._object** %result, align 8
  %cmp31 = icmp eq %struct._object* %29, null
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.end.29
  br label %Fail

if.end.34:                                        ; preds = %if.end.29
  br label %do.body

do.body:                                          ; preds = %if.end.34
  %30 = load %struct._object*, %struct._object** %dst, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp35 = icmp ne i64 %dec, 0
  br i1 %cmp35, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %do.body
  br label %if.end.39

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else, %if.then.37
  br label %do.end

do.end:                                           ; preds = %if.end.39
  %37 = load %struct._object*, %struct._object** %dt.addr, align 8
  %38 = bitcast %struct._object* %37 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo40 = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %38, i32 0, i32 2
  %39 = load i8, i8* %hastzinfo40, align 1
  %conv41 = sext i8 %39 to i32
  %tobool42 = icmp ne i32 %conv41, 0
  br i1 %tobool42, label %cond.true.43, label %cond.false.45

cond.true.43:                                     ; preds = %do.end
  %40 = load %struct._object*, %struct._object** %dt.addr, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDateTime_DateTime*
  %tzinfo44 = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %41, i32 0, i32 4
  %42 = load %struct._object*, %struct._object** %tzinfo44, align 8
  br label %cond.end.46

cond.false.45:                                    ; preds = %do.end
  br label %cond.end.46

cond.end.46:                                      ; preds = %cond.false.45, %cond.true.43
  %cond47 = phi %struct._object* [ %42, %cond.true.43 ], [ @_Py_NoneStruct, %cond.false.45 ]
  %43 = load %struct._object*, %struct._object** %result, align 8
  %call48 = call %struct._object* @call_dst(%struct._object* %cond47, %struct._object* %43)
  store %struct._object* %call48, %struct._object** %dst, align 8
  %44 = load %struct._object*, %struct._object** %dst, align 8
  %cmp49 = icmp eq %struct._object* %44, null
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %cond.end.46
  br label %Fail

if.end.52:                                        ; preds = %cond.end.46
  %45 = load %struct._object*, %struct._object** %dst, align 8
  %cmp53 = icmp eq %struct._object* %45, @_Py_NoneStruct
  br i1 %cmp53, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %if.end.52
  br label %Inconsistent

if.end.56:                                        ; preds = %if.end.52
  %46 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %call57 = call i32 @delta_bool(%struct.PyDateTime_Delta* %46)
  %cmp58 = icmp ne i32 %call57, 0
  br i1 %cmp58, label %if.then.60, label %if.end.78

if.then.60:                                       ; preds = %if.end.56
  %47 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %47, %struct._object** %temp, align 8
  %48 = load %struct._object*, %struct._object** %result, align 8
  %49 = bitcast %struct._object* %48 to %struct.PyDateTime_DateTime*
  %50 = load %struct._object*, %struct._object** %dst, align 8
  %51 = bitcast %struct._object* %50 to %struct.PyDateTime_Delta*
  %call61 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %49, %struct.PyDateTime_Delta* %51, i32 1)
  store %struct._object* %call61, %struct._object** %result, align 8
  br label %do.body.62

do.body.62:                                       ; preds = %if.then.60
  %52 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp63, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %54, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %do.body.62
  br label %if.end.72

if.else.69:                                       ; preds = %do.body.62
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8
  %tp_dealloc71 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc71, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %57(%struct._object* %58)
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.68
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  %59 = load %struct._object*, %struct._object** %result, align 8
  %cmp74 = icmp eq %struct._object* %59, null
  br i1 %cmp74, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %do.end.73
  br label %Fail

if.end.77:                                        ; preds = %do.end.73
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.end.56
  br label %do.body.79

do.body.79:                                       ; preds = %if.end.78
  %60 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %61 = bitcast %struct.PyDateTime_Delta* %60 to %struct._object*
  store %struct._object* %61, %struct._object** %_py_decref_tmp80, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  %ob_refcnt81 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt81, align 8
  %dec82 = add i64 %63, -1
  store i64 %dec82, i64* %ob_refcnt81, align 8
  %cmp83 = icmp ne i64 %dec82, 0
  br i1 %cmp83, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.79
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.79
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  call void %66(%struct._object* %67)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  br label %do.body.91

do.body.91:                                       ; preds = %do.end.90
  %68 = load %struct._object*, %struct._object** %dst, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp92, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_refcnt93 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt93, align 8
  %dec94 = add i64 %70, -1
  store i64 %dec94, i64* %ob_refcnt93, align 8
  %cmp95 = icmp ne i64 %dec94, 0
  br i1 %cmp95, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %do.body.91
  br label %if.end.101

if.else.98:                                       ; preds = %do.body.91
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_type99 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type99, align 8
  %tp_dealloc100 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc100, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  call void %73(%struct._object* %74)
  br label %if.end.101

if.end.101:                                       ; preds = %if.else.98, %if.then.97
  br label %do.end.102

do.end.102:                                       ; preds = %if.end.101
  br label %do.body.103

do.body.103:                                      ; preds = %do.end.102
  %75 = load %struct._object*, %struct._object** %off, align 8
  store %struct._object* %75, %struct._object** %_py_decref_tmp104, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_refcnt105 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0
  %77 = load i64, i64* %ob_refcnt105, align 8
  %dec106 = add i64 %77, -1
  store i64 %dec106, i64* %ob_refcnt105, align 8
  %cmp107 = icmp ne i64 %dec106, 0
  br i1 %cmp107, label %if.then.109, label %if.else.110

if.then.109:                                      ; preds = %do.body.103
  br label %if.end.113

if.else.110:                                      ; preds = %do.body.103
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_type111 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type111, align 8
  %tp_dealloc112 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc112, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  call void %80(%struct._object* %81)
  br label %if.end.113

if.end.113:                                       ; preds = %if.else.110, %if.then.109
  br label %do.end.114

do.end.114:                                       ; preds = %if.end.113
  %82 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %82, %struct._object** %retval
  br label %return

Inconsistent:                                     ; preds = %if.then.55
  %83 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %83, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.220, i32 0, i32 0))
  br label %Fail

Fail:                                             ; preds = %Inconsistent, %if.then.76, %if.then.51, %if.then.33, %if.then.28, %if.then.23, %if.then.19, %if.then.14
  br label %do.body.115

do.body.115:                                      ; preds = %Fail
  %84 = load %struct._object*, %struct._object** %off, align 8
  store %struct._object* %84, %struct._object** %_py_xdecref_tmp, align 8
  %85 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp116 = icmp ne %struct._object* %85, null
  br i1 %cmp116, label %if.then.118, label %if.end.131

if.then.118:                                      ; preds = %do.body.115
  br label %do.body.119

do.body.119:                                      ; preds = %if.then.118
  %86 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %86, %struct._object** %_py_decref_tmp120, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8
  %ob_refcnt121 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0
  %88 = load i64, i64* %ob_refcnt121, align 8
  %dec122 = add i64 %88, -1
  store i64 %dec122, i64* %ob_refcnt121, align 8
  %cmp123 = icmp ne i64 %dec122, 0
  br i1 %cmp123, label %if.then.125, label %if.else.126

if.then.125:                                      ; preds = %do.body.119
  br label %if.end.129

if.else.126:                                      ; preds = %do.body.119
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8
  %ob_type127 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type127, align 8
  %tp_dealloc128 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc128, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8
  call void %91(%struct._object* %92)
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.126, %if.then.125
  br label %do.end.130

do.end.130:                                       ; preds = %if.end.129
  br label %if.end.131

if.end.131:                                       ; preds = %do.end.130, %do.body.115
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  br label %do.body.133

do.body.133:                                      ; preds = %do.end.132
  %93 = load %struct._object*, %struct._object** %dst, align 8
  store %struct._object* %93, %struct._object** %_py_xdecref_tmp134, align 8
  %94 = load %struct._object*, %struct._object** %_py_xdecref_tmp134, align 8
  %cmp135 = icmp ne %struct._object* %94, null
  br i1 %cmp135, label %if.then.137, label %if.end.150

if.then.137:                                      ; preds = %do.body.133
  br label %do.body.138

do.body.138:                                      ; preds = %if.then.137
  %95 = load %struct._object*, %struct._object** %_py_xdecref_tmp134, align 8
  store %struct._object* %95, %struct._object** %_py_decref_tmp139, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_refcnt140 = getelementptr inbounds %struct._object, %struct._object* %96, i32 0, i32 0
  %97 = load i64, i64* %ob_refcnt140, align 8
  %dec141 = add i64 %97, -1
  store i64 %dec141, i64* %ob_refcnt140, align 8
  %cmp142 = icmp ne i64 %dec141, 0
  br i1 %cmp142, label %if.then.144, label %if.else.145

if.then.144:                                      ; preds = %do.body.138
  br label %if.end.148

if.else.145:                                      ; preds = %do.body.138
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_type146 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 1
  %99 = load %struct._typeobject*, %struct._typeobject** %ob_type146, align 8
  %tp_dealloc147 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %99, i32 0, i32 4
  %100 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc147, align 8
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  call void %100(%struct._object* %101)
  br label %if.end.148

if.end.148:                                       ; preds = %if.else.145, %if.then.144
  br label %do.end.149

do.end.149:                                       ; preds = %if.end.148
  br label %if.end.150

if.end.150:                                       ; preds = %do.end.149, %do.body.133
  br label %do.end.151

do.end.151:                                       ; preds = %if.end.150
  br label %do.body.152

do.body.152:                                      ; preds = %do.end.151
  %102 = load %struct.PyDateTime_Delta*, %struct.PyDateTime_Delta** %delta, align 8
  %103 = bitcast %struct.PyDateTime_Delta* %102 to %struct._object*
  store %struct._object* %103, %struct._object** %_py_xdecref_tmp153, align 8
  %104 = load %struct._object*, %struct._object** %_py_xdecref_tmp153, align 8
  %cmp154 = icmp ne %struct._object* %104, null
  br i1 %cmp154, label %if.then.156, label %if.end.169

if.then.156:                                      ; preds = %do.body.152
  br label %do.body.157

do.body.157:                                      ; preds = %if.then.156
  %105 = load %struct._object*, %struct._object** %_py_xdecref_tmp153, align 8
  store %struct._object* %105, %struct._object** %_py_decref_tmp158, align 8
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp158, align 8
  %ob_refcnt159 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 0
  %107 = load i64, i64* %ob_refcnt159, align 8
  %dec160 = add i64 %107, -1
  store i64 %dec160, i64* %ob_refcnt159, align 8
  %cmp161 = icmp ne i64 %dec160, 0
  br i1 %cmp161, label %if.then.163, label %if.else.164

if.then.163:                                      ; preds = %do.body.157
  br label %if.end.167

if.else.164:                                      ; preds = %do.body.157
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp158, align 8
  %ob_type165 = getelementptr inbounds %struct._object, %struct._object* %108, i32 0, i32 1
  %109 = load %struct._typeobject*, %struct._typeobject** %ob_type165, align 8
  %tp_dealloc166 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %109, i32 0, i32 4
  %110 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc166, align 8
  %111 = load %struct._object*, %struct._object** %_py_decref_tmp158, align 8
  call void %110(%struct._object* %111)
  br label %if.end.167

if.end.167:                                       ; preds = %if.else.164, %if.then.163
  br label %do.end.168

do.end.168:                                       ; preds = %if.end.167
  br label %if.end.169

if.end.169:                                       ; preds = %do.end.168, %do.body.152
  br label %do.end.170

do.end.170:                                       ; preds = %if.end.169
  br label %do.body.171

do.body.171:                                      ; preds = %do.end.170
  %112 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %112, %struct._object** %_py_xdecref_tmp172, align 8
  %113 = load %struct._object*, %struct._object** %_py_xdecref_tmp172, align 8
  %cmp173 = icmp ne %struct._object* %113, null
  br i1 %cmp173, label %if.then.175, label %if.end.188

if.then.175:                                      ; preds = %do.body.171
  br label %do.body.176

do.body.176:                                      ; preds = %if.then.175
  %114 = load %struct._object*, %struct._object** %_py_xdecref_tmp172, align 8
  store %struct._object* %114, %struct._object** %_py_decref_tmp177, align 8
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp177, align 8
  %ob_refcnt178 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 0
  %116 = load i64, i64* %ob_refcnt178, align 8
  %dec179 = add i64 %116, -1
  store i64 %dec179, i64* %ob_refcnt178, align 8
  %cmp180 = icmp ne i64 %dec179, 0
  br i1 %cmp180, label %if.then.182, label %if.else.183

if.then.182:                                      ; preds = %do.body.176
  br label %if.end.186

if.else.183:                                      ; preds = %do.body.176
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp177, align 8
  %ob_type184 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 1
  %118 = load %struct._typeobject*, %struct._typeobject** %ob_type184, align 8
  %tp_dealloc185 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %118, i32 0, i32 4
  %119 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc185, align 8
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp177, align 8
  call void %119(%struct._object* %120)
  br label %if.end.186

if.end.186:                                       ; preds = %if.else.183, %if.then.182
  br label %do.end.187

do.end.187:                                       ; preds = %if.end.186
  br label %if.end.188

if.end.188:                                       ; preds = %do.end.187, %do.body.171
  br label %do.end.189

do.end.189:                                       ; preds = %if.end.188
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.189, %do.end.114, %if.then.10, %if.then.5, %if.then
  %121 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %121
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @tzinfo_reduce(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %state = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %getinitargs = alloca %struct._object*, align 8
  %getstate = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  %_py_decref_tmp61 = alloca %struct._object*, align 8
  %dictptr = alloca %struct._object**, align 8
  %_py_decref_tmp86 = alloca %struct._object*, align 8
  %_py_decref_tmp100 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %call = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call, %struct._object** %tmp, align 8
  %0 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %call3 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %1, %struct._Py_Identifier* @tzinfo_reduce.PyId___getinitargs__)
  store %struct._object* %call3, %struct._object** %getinitargs, align 8
  %2 = load %struct._object*, %struct._object** %getinitargs, align 8
  %cmp4 = icmp ne %struct._object* %2, null
  br i1 %cmp4, label %if.then.5, label %if.else.26

if.then.5:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %getinitargs, align 8
  %4 = load %struct._object*, %struct._object** %tmp, align 8
  %call6 = call %struct._object* @PyObject_CallObject(%struct._object* %3, %struct._object* %4)
  store %struct._object* %call6, %struct._object** %args, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %5 = load %struct._object*, %struct._object** %getinitargs, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %12 = load %struct._object*, %struct._object** %args, align 8
  %cmp11 = icmp eq %struct._object* %12, null
  br i1 %cmp11, label %if.then.12, label %if.end.25

if.then.12:                                       ; preds = %do.end
  br label %do.body.13

do.body.13:                                       ; preds = %if.then.12
  %13 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp15, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %15, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.13
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.13
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %18(%struct._object* %19)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %do.end
  br label %if.end.28

if.else.26:                                       ; preds = %if.end
  call void @PyErr_Clear()
  %20 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %20, %struct._object** %args, align 8
  %21 = load %struct._object*, %struct._object** %args, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt27, align 8
  %inc = add i64 %22, 1
  store i64 %inc, i64* %ob_refcnt27, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.26, %if.end.25
  %23 = load %struct._object*, %struct._object** %self.addr, align 8
  %call29 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %23, %struct._Py_Identifier* @tzinfo_reduce.PyId___getstate__)
  store %struct._object* %call29, %struct._object** %getstate, align 8
  %24 = load %struct._object*, %struct._object** %getstate, align 8
  %cmp30 = icmp ne %struct._object* %24, null
  br i1 %cmp30, label %if.then.31, label %if.else.72

if.then.31:                                       ; preds = %if.end.28
  %25 = load %struct._object*, %struct._object** %getstate, align 8
  %26 = load %struct._object*, %struct._object** %tmp, align 8
  %call32 = call %struct._object* @PyObject_CallObject(%struct._object* %25, %struct._object* %26)
  store %struct._object* %call32, %struct._object** %state, align 8
  br label %do.body.33

do.body.33:                                       ; preds = %if.then.31
  %27 = load %struct._object*, %struct._object** %getstate, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp35, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_refcnt36 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt36, align 8
  %dec37 = add i64 %29, -1
  store i64 %dec37, i64* %ob_refcnt36, align 8
  %cmp38 = icmp ne i64 %dec37, 0
  br i1 %cmp38, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %do.body.33
  br label %if.end.43

if.else.40:                                       ; preds = %do.body.33
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8
  %tp_dealloc42 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc42, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp35, align 8
  call void %32(%struct._object* %33)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else.40, %if.then.39
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  %34 = load %struct._object*, %struct._object** %state, align 8
  %cmp45 = icmp eq %struct._object* %34, null
  br i1 %cmp45, label %if.then.46, label %if.end.71

if.then.46:                                       ; preds = %do.end.44
  br label %do.body.47

do.body.47:                                       ; preds = %if.then.46
  %35 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp49, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %37, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.47
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.47
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %40(%struct._object* %41)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %do.body.59

do.body.59:                                       ; preds = %do.end.58
  %42 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp61, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8
  %ob_refcnt62 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt62, align 8
  %dec63 = add i64 %44, -1
  store i64 %dec63, i64* %ob_refcnt62, align 8
  %cmp64 = icmp ne i64 %dec63, 0
  br i1 %cmp64, label %if.then.65, label %if.else.66

if.then.65:                                       ; preds = %do.body.59
  br label %if.end.69

if.else.66:                                       ; preds = %do.body.59
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8
  %ob_type67 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type67, align 8
  %tp_dealloc68 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc68, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp61, align 8
  call void %47(%struct._object* %48)
  br label %if.end.69

if.end.69:                                        ; preds = %if.else.66, %if.then.65
  br label %do.end.70

do.end.70:                                        ; preds = %if.end.69
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.71:                                        ; preds = %do.end.44
  br label %if.end.83

if.else.72:                                       ; preds = %if.end.28
  call void @PyErr_Clear()
  store %struct._object* @_Py_NoneStruct, %struct._object** %state, align 8
  %49 = load %struct._object*, %struct._object** %self.addr, align 8
  %call74 = call %struct._object** @_PyObject_GetDictPtr(%struct._object* %49)
  store %struct._object** %call74, %struct._object*** %dictptr, align 8
  %50 = load %struct._object**, %struct._object*** %dictptr, align 8
  %tobool = icmp ne %struct._object** %50, null
  br i1 %tobool, label %land.lhs.true, label %if.end.80

land.lhs.true:                                    ; preds = %if.else.72
  %51 = load %struct._object**, %struct._object*** %dictptr, align 8
  %52 = load %struct._object*, %struct._object** %51, align 8
  %tobool75 = icmp ne %struct._object* %52, null
  br i1 %tobool75, label %land.lhs.true.76, label %if.end.80

land.lhs.true.76:                                 ; preds = %land.lhs.true
  %53 = load %struct._object**, %struct._object*** %dictptr, align 8
  %54 = load %struct._object*, %struct._object** %53, align 8
  %call77 = call i64 @PyDict_Size(%struct._object* %54)
  %tobool78 = icmp ne i64 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %land.lhs.true.76
  %55 = load %struct._object**, %struct._object*** %dictptr, align 8
  %56 = load %struct._object*, %struct._object** %55, align 8
  store %struct._object* %56, %struct._object** %state, align 8
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %land.lhs.true.76, %land.lhs.true, %if.else.72
  %57 = load %struct._object*, %struct._object** %state, align 8
  %ob_refcnt81 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt81, align 8
  %inc82 = add i64 %58, 1
  store i64 %inc82, i64* %ob_refcnt81, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.end.80, %if.end.71
  br label %do.body.84

do.body.84:                                       ; preds = %if.end.83
  %59 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp86, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8
  %ob_refcnt87 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt87, align 8
  %dec88 = add i64 %61, -1
  store i64 %dec88, i64* %ob_refcnt87, align 8
  %cmp89 = icmp ne i64 %dec88, 0
  br i1 %cmp89, label %if.then.90, label %if.else.91

if.then.90:                                       ; preds = %do.body.84
  br label %if.end.94

if.else.91:                                       ; preds = %do.body.84
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8
  %ob_type92 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type92, align 8
  %tp_dealloc93 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc93, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp86, align 8
  call void %64(%struct._object* %65)
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.91, %if.then.90
  br label %do.end.95

do.end.95:                                        ; preds = %if.end.94
  %66 = load %struct._object*, %struct._object** %state, align 8
  %cmp96 = icmp eq %struct._object* %66, @_Py_NoneStruct
  br i1 %cmp96, label %if.then.97, label %if.else.112

if.then.97:                                       ; preds = %do.end.95
  br label %do.body.98

do.body.98:                                       ; preds = %if.then.97
  %67 = load %struct._object*, %struct._object** %state, align 8
  store %struct._object* %67, %struct._object** %_py_decref_tmp100, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  %ob_refcnt101 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0
  %69 = load i64, i64* %ob_refcnt101, align 8
  %dec102 = add i64 %69, -1
  store i64 %dec102, i64* %ob_refcnt101, align 8
  %cmp103 = icmp ne i64 %dec102, 0
  br i1 %cmp103, label %if.then.104, label %if.else.105

if.then.104:                                      ; preds = %do.body.98
  br label %if.end.108

if.else.105:                                      ; preds = %do.body.98
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  %ob_type106 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type106, align 8
  %tp_dealloc107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc107, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  call void %72(%struct._object* %73)
  br label %if.end.108

if.end.108:                                       ; preds = %if.else.105, %if.then.104
  br label %do.end.109

do.end.109:                                       ; preds = %if.end.108
  %74 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type110 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type110, align 8
  %76 = load %struct._object*, %struct._object** %args, align 8
  %call111 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.98, i32 0, i32 0), %struct._typeobject* %75, %struct._object* %76)
  store %struct._object* %call111, %struct._object** %retval
  br label %return

if.else.112:                                      ; preds = %do.end.95
  %77 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type113 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type113, align 8
  %79 = load %struct._object*, %struct._object** %args, align 8
  %80 = load %struct._object*, %struct._object** %state, align 8
  %call114 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.223, i32 0, i32 0), %struct._typeobject* %78, %struct._object* %79, %struct._object* %80)
  store %struct._object* %call114, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else.112, %do.end.109, %do.end.70, %do.end.24, %if.then
  %81 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %81
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @tzinfo_nogo(i8* %methodname) #0 {
entry:
  %methodname.addr = alloca i8*, align 8
  store i8* %methodname, i8** %methodname.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_NotImplementedError, align 8
  %1 = load i8*, i8** %methodname.addr, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.215, i32 0, i32 0), i8* %1)
  ret %struct._object* null
}

declare %struct._object* @PyTuple_New(i64) #1

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #1

declare %struct._object* @PyObject_CallObject(%struct._object*, %struct._object*) #1

declare void @PyErr_Clear() #1

declare %struct._object** @_PyObject_GetDictPtr(%struct._object*) #1

declare i64 @PyDict_Size(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal void @timezone_dealloc(%struct.PyDateTime_TimeZone* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp8 = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %0, i32 0, i32 1
  %1 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %1, %struct._object** %_py_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset1 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %3, i32 0, i32 1
  store %struct._object* null, %struct._object** %offset1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %do.body.7

do.body.7:                                        ; preds = %do.end.6
  %11 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %11, i32 0, i32 2
  %12 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %12, %struct._object** %_py_tmp8, align 8
  %13 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  %cmp9 = icmp ne %struct._object* %13, null
  br i1 %cmp9, label %if.then.10, label %if.end.23

if.then.10:                                       ; preds = %do.body.7
  %14 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name11 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %14, i32 0, i32 2
  store %struct._object* null, %struct._object** %name11, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.then.10
  %15 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp13, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %if.end.23

if.end.23:                                        ; preds = %do.end.22, %do.body.7
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  %22 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %23 = bitcast %struct.PyDateTime_TimeZone* %22 to %struct._object*
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 38
  %25 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %26 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %27 = bitcast %struct.PyDateTime_TimeZone* %26 to %struct._object*
  %28 = bitcast %struct._object* %27 to i8*
  call void %25(i8* %28)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_repr(%struct.PyDateTime_TimeZone* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %type_name = alloca i8*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %0 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %1 = bitcast %struct.PyDateTime_TimeZone* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  store i8* %3, i8** %type_name, align 8
  %4 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %5 = bitcast %struct.PyDateTime_TimeZone* %4 to %struct._object*
  %6 = load %struct._object*, %struct._object** @PyDateTime_TimeZone_UTC, align 8
  %cmp = icmp eq %struct._object* %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %7 = load i8*, i8** %type_name, align 8
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.225, i32 0, i32 0), i8* %7)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %8, i32 0, i32 2
  %9 = load %struct._object*, %struct._object** %name, align 8
  %cmp1 = icmp eq %struct._object* %9, null
  br i1 %cmp1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %10 = load i8*, i8** %type_name, align 8
  %11 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %11, i32 0, i32 1
  %12 = load %struct._object*, %struct._object** %offset, align 8
  %call3 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.226, i32 0, i32 0), i8* %10, %struct._object* %12)
  store %struct._object* %call3, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %13 = load i8*, i8** %type_name, align 8
  %14 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset5 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %14, i32 0, i32 1
  %15 = load %struct._object*, %struct._object** %offset5, align 8
  %16 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name6 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %16, i32 0, i32 2
  %17 = load %struct._object*, %struct._object** %name6, align 8
  %call7 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.227, i32 0, i32 0), i8* %13, %struct._object* %15, %struct._object* %17)
  store %struct._object* %call7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.2, %if.then
  %18 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %18
}

; Function Attrs: nounwind uwtable
define internal i64 @timezone_hash(%struct.PyDateTime_TimeZone* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %0 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %0, i32 0, i32 1
  %1 = load %struct._object*, %struct._object** %offset, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDateTime_Delta*
  %call = call i64 @delta_hash(%struct.PyDateTime_Delta* %2)
  ret i64 %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_str(%struct.PyDateTime_TimeZone* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %hours = alloca i32, align 4
  %minutes = alloca i32, align 4
  %seconds = alloca i32, align 4
  %offset = alloca %struct._object*, align 8
  %sign = alloca i8, align 1
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %0 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %0, i32 0, i32 2
  %1 = load %struct._object*, %struct._object** %name, align 8
  %cmp = icmp ne %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name1 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %name1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name2 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %name2, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset3 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %7, i32 0, i32 1
  %8 = load %struct._object*, %struct._object** %offset3, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDateTime_Delta*
  %days = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %9, i32 0, i32 2
  %10 = load i32, i32* %days, align 4
  %cmp4 = icmp slt i32 %10, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  store i8 45, i8* %sign, align 1
  %11 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset6 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %11, i32 0, i32 1
  %12 = load %struct._object*, %struct._object** %offset6, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDateTime_Delta*
  %call = call %struct._object* @delta_negative(%struct.PyDateTime_Delta* %13)
  store %struct._object* %call, %struct._object** %offset, align 8
  %14 = load %struct._object*, %struct._object** %offset, align 8
  %cmp7 = icmp eq %struct._object* %14, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.then.5
  br label %if.end.13

if.else:                                          ; preds = %if.end
  store i8 43, i8* %sign, align 1
  %15 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset10 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %15, i32 0, i32 1
  %16 = load %struct._object*, %struct._object** %offset10, align 8
  store %struct._object* %16, %struct._object** %offset, align 8
  %17 = load %struct._object*, %struct._object** %offset, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt11, align 8
  %inc12 = add i64 %18, 1
  store i64 %inc12, i64* %ob_refcnt11, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.end.9
  %19 = load %struct._object*, %struct._object** %offset, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyDateTime_Delta*
  %seconds14 = getelementptr inbounds %struct.PyDateTime_Delta, %struct.PyDateTime_Delta* %20, i32 0, i32 3
  %21 = load i32, i32* %seconds14, align 4
  store i32 %21, i32* %seconds, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.13
  %22 = load %struct._object*, %struct._object** %offset, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt15, align 8
  %dec = add i64 %24, -1
  store i64 %dec, i64* %ob_refcnt15, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body
  br label %if.end.19

if.else.18:                                       ; preds = %do.body
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %27(%struct._object* %28)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.19
  %29 = load i32, i32* %seconds, align 4
  %call20 = call i32 @divmod(i32 %29, i32 60, i32* %seconds)
  store i32 %call20, i32* %minutes, align 4
  %30 = load i32, i32* %minutes, align 4
  %call21 = call i32 @divmod(i32 %30, i32 60, i32* %minutes)
  store i32 %call21, i32* %hours, align 4
  %31 = load i8, i8* %sign, align 1
  %conv = sext i8 %31 to i32
  %32 = load i32, i32* %hours, align 4
  %33 = load i32, i32* %minutes, align 4
  %call22 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.228, i32 0, i32 0), i32 %conv, i32 %32, i32 %33)
  store %struct._object* %call22, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.8, %if.then
  %34 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %34
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_richcompare(%struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone* %other, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %other.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %op.addr = alloca i32, align 4
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  store %struct.PyDateTime_TimeZone* %other, %struct.PyDateTime_TimeZone** %other.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  %0 = load i32, i32* %op.addr, align 4
  %cmp = icmp ne i32 %0, 2
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %op.addr, align 4
  %cmp1 = icmp ne i32 %1, 3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %other.addr, align 8
  %4 = bitcast %struct.PyDateTime_TimeZone* %3 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp2 = icmp ne %struct._typeobject* %5, @PyDateTime_TimeZoneType
  br i1 %cmp2, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %if.end
  %6 = load i32, i32* %op.addr, align 4
  %cmp4 = icmp eq i32 %6, 2
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then.3
  %7 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc6 = add i64 %7, 1
  store i64 %inc6, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

if.else:                                          ; preds = %if.then.3
  %8 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc7 = add i64 %8, 1
  store i64 %inc7, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %9 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %9, i32 0, i32 1
  %10 = load %struct._object*, %struct._object** %offset, align 8
  %11 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %other.addr, align 8
  %offset9 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %11, i32 0, i32 1
  %12 = load %struct._object*, %struct._object** %offset9, align 8
  %13 = load i32, i32* %op.addr, align 4
  %call = call %struct._object* @delta_richcompare(%struct._object* %10, %struct._object* %12, i32 %13)
  store %struct._object* %call, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.else, %if.then.5, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %offset = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %name, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.236, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @timezone_kws, i32 0, i32 0), %struct._typeobject* @PyDateTime_DeltaType, %struct._object** %offset, %struct._typeobject* @PyUnicode_Type, %struct._object** %name)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %offset, align 8
  %3 = load %struct._object*, %struct._object** %name, align 8
  %call1 = call %struct._object* @new_timezone(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_tzname(%struct.PyDateTime_TimeZone* %self, %struct._object* %dt) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %dt.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  %0 = load %struct._object*, %struct._object** %dt.addr, align 8
  %call = call i32 @_timezone_check_argument(%struct._object* %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0))
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %call1 = call %struct._object* @timezone_str(%struct.PyDateTime_TimeZone* %1)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %2
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_utcoffset(%struct.PyDateTime_TimeZone* %self, %struct._object* %dt) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %dt.addr = alloca %struct._object*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  %0 = load %struct._object*, %struct._object** %dt.addr, align 8
  %call = call i32 @_timezone_check_argument(%struct._object* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0))
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %1, i32 0, i32 1
  %2 = load %struct._object*, %struct._object** %offset, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 0
  %3 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %3, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %4 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset1 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %4, i32 0, i32 1
  %5 = load %struct._object*, %struct._object** %offset1, align 8
  store %struct._object* %5, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_dst(%struct._object* %self, %struct._object* %dt) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dt.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  %0 = load %struct._object*, %struct._object** %dt.addr, align 8
  %call = call i32 @_timezone_check_argument(%struct._object* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.134, i32 0, i32 0))
  %cmp = icmp eq i32 %call, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %2
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_fromutc(%struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_DateTime* %dt) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  %dt.addr = alloca %struct.PyDateTime_DateTime*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  store %struct.PyDateTime_DateTime* %dt, %struct.PyDateTime_DateTime** %dt.addr, align 8
  %0 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %dt.addr, align 8
  %1 = bitcast %struct.PyDateTime_DateTime* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %2, @PyDateTime_DateTimeType
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %dt.addr, align 8
  %4 = bitcast %struct.PyDateTime_DateTime* %3 to %struct._object*
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %5, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.216, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %7 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %dt.addr, align 8
  %8 = bitcast %struct.PyDateTime_DateTime* %7 to %struct._PyDateTime_BaseTZInfo*
  %hastzinfo = getelementptr inbounds %struct._PyDateTime_BaseTZInfo, %struct._PyDateTime_BaseTZInfo* %8, i32 0, i32 2
  %9 = load i8, i8* %hastzinfo, align 1
  %tobool2 = icmp ne i8 %9, 0
  br i1 %tobool2, label %lor.lhs.false.3, label %if.then.5

lor.lhs.false.3:                                  ; preds = %if.end
  %10 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %dt.addr, align 8
  %tzinfo = getelementptr inbounds %struct.PyDateTime_DateTime, %struct.PyDateTime_DateTime* %10, i32 0, i32 4
  %11 = load %struct._object*, %struct._object** %tzinfo, align 8
  %12 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %13 = bitcast %struct.PyDateTime_TimeZone* %12 to %struct._object*
  %cmp4 = icmp ne %struct._object* %11, %13
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %lor.lhs.false.3, %if.end
  %14 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %14, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.217, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %lor.lhs.false.3
  %15 = load %struct.PyDateTime_DateTime*, %struct.PyDateTime_DateTime** %dt.addr, align 8
  %16 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %16, i32 0, i32 1
  %17 = load %struct._object*, %struct._object** %offset, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDateTime_Delta*
  %call7 = call %struct._object* @add_datetime_timedelta(%struct.PyDateTime_DateTime* %15, %struct.PyDateTime_Delta* %18, i32 1)
  store %struct._object* %call7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5, %if.then
  %19 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %19
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @timezone_getinitargs(%struct.PyDateTime_TimeZone* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDateTime_TimeZone*, align 8
  store %struct.PyDateTime_TimeZone* %self, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %0 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %0, i32 0, i32 2
  %1 = load %struct._object*, %struct._object** %name, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %2, i32 0, i32 1
  %3 = load %struct._object*, %struct._object** %offset, align 8
  %call = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.234, i32 0, i32 0), %struct._object* %3)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %offset1 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %4, i32 0, i32 1
  %5 = load %struct._object*, %struct._object** %offset1, align 8
  %6 = load %struct.PyDateTime_TimeZone*, %struct.PyDateTime_TimeZone** %self.addr, align 8
  %name2 = getelementptr inbounds %struct.PyDateTime_TimeZone, %struct.PyDateTime_TimeZone* %6, i32 0, i32 2
  %7 = load %struct._object*, %struct._object** %name2, align 8
  %call3 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.235, i32 0, i32 0), %struct._object* %5, %struct._object* %7)
  store %struct._object* %call3, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: nounwind uwtable
define internal i32 @_timezone_check_argument(%struct._object* %dt, i8* %meth) #0 {
entry:
  %retval = alloca i32, align 4
  %dt.addr = alloca %struct._object*, align 8
  %meth.addr = alloca i8*, align 8
  store %struct._object* %dt, %struct._object** %dt.addr, align 8
  store i8* %meth, i8** %meth.addr, align 8
  %0 = load %struct._object*, %struct._object** %dt.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %dt.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %2, @PyDateTime_DateTimeType
  br i1 %cmp1, label %if.then, label %lor.lhs.false.2

lor.lhs.false.2:                                  ; preds = %lor.lhs.false
  %3 = load %struct._object*, %struct._object** %dt.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %4, %struct._typeobject* @PyDateTime_DateTimeType)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.2, %lor.lhs.false, %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.2
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %6 = load i8*, i8** %meth.addr, align 8
  %7 = load %struct._object*, %struct._object** %dt.addr, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 1
  %9 = load i8*, i8** %tp_name, align 8
  %call5 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.233, i32 0, i32 0), i8* %6, i8* %9)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal void @normalize_d_s_us(i32* %d, i32* %s, i32* %us) #0 {
entry:
  %d.addr = alloca i32*, align 8
  %s.addr = alloca i32*, align 8
  %us.addr = alloca i32*, align 8
  store i32* %d, i32** %d.addr, align 8
  store i32* %s, i32** %s.addr, align 8
  store i32* %us, i32** %us.addr, align 8
  %0 = load i32*, i32** %us.addr, align 8
  %1 = load i32, i32* %0, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i32*, i32** %us.addr, align 8
  %3 = load i32, i32* %2, align 4
  %cmp1 = icmp sge i32 %3, 1000000
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load i32*, i32** %s.addr, align 8
  %5 = load i32*, i32** %us.addr, align 8
  call void @normalize_pair(i32* %4, i32* %5, i32 1000000)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %6 = load i32*, i32** %s.addr, align 8
  %7 = load i32, i32* %6, align 4
  %cmp2 = icmp slt i32 %7, 0
  br i1 %cmp2, label %if.then.5, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %if.end
  %8 = load i32*, i32** %s.addr, align 8
  %9 = load i32, i32* %8, align 4
  %cmp4 = icmp sge i32 %9, 86400
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %lor.lhs.false.3, %if.end
  %10 = load i32*, i32** %d.addr, align 8
  %11 = load i32*, i32** %s.addr, align 8
  call void @normalize_pair(i32* %10, i32* %11, i32 86400)
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %lor.lhs.false.3
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @check_delta_day_range(i32 %days) #0 {
entry:
  %retval = alloca i32, align 4
  %days.addr = alloca i32, align 4
  store i32 %days, i32* %days.addr, align 4
  %0 = load i32, i32* %days.addr, align 4
  %cmp = icmp sle i32 -999999999, %0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %days.addr, align 4
  %cmp1 = icmp sle i32 %1, 999999999
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  %3 = load i32, i32* %days.addr, align 4
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.239, i32 0, i32 0), i32 %3, i32 999999999)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: nounwind uwtable
define internal void @set_date_fields(%struct.PyDateTime_Date* %self, i32 %y, i32 %m, i32 %d) #0 {
entry:
  %self.addr = alloca %struct.PyDateTime_Date*, align 8
  %y.addr = alloca i32, align 4
  %m.addr = alloca i32, align 4
  %d.addr = alloca i32, align 4
  store %struct.PyDateTime_Date* %self, %struct.PyDateTime_Date** %self.addr, align 8
  store i32 %y, i32* %y.addr, align 4
  store i32 %m, i32* %m.addr, align 4
  store i32 %d, i32* %d.addr, align 4
  %0 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %hashcode = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %0, i32 0, i32 1
  store i64 -1, i64* %hashcode, align 8
  %1 = load i32, i32* %y.addr, align 4
  %and = and i32 %1, 65280
  %shr = ashr i32 %and, 8
  %conv = trunc i32 %shr to i8
  %2 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %2, i32 0, i32 3
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %data, i32 0, i64 0
  store i8 %conv, i8* %arrayidx, align 1
  %3 = load i32, i32* %y.addr, align 4
  %and1 = and i32 %3, 255
  %conv2 = trunc i32 %and1 to i8
  %4 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data3 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %4, i32 0, i32 3
  %arrayidx4 = getelementptr [4 x i8], [4 x i8]* %data3, i32 0, i64 1
  store i8 %conv2, i8* %arrayidx4, align 1
  %5 = load i32, i32* %m.addr, align 4
  %conv5 = trunc i32 %5 to i8
  %6 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data6 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %6, i32 0, i32 3
  %arrayidx7 = getelementptr [4 x i8], [4 x i8]* %data6, i32 0, i64 2
  store i8 %conv5, i8* %arrayidx7, align 1
  %7 = load i32, i32* %d.addr, align 4
  %conv8 = trunc i32 %7 to i8
  %8 = load %struct.PyDateTime_Date*, %struct.PyDateTime_Date** %self.addr, align 8
  %data9 = getelementptr inbounds %struct.PyDateTime_Date, %struct.PyDateTime_Date* %8, i32 0, i32 3
  %arrayidx10 = getelementptr [4 x i8], [4 x i8]* %data9, i32 0, i64 3
  store i8 %conv8, i8* %arrayidx10, align 1
  ret void
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }
attributes #7 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
