; ModuleID = './_decimal.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mpd_context_t = type { i64, i64, i64, i32, i32, i32, i32, i32, i32 }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._object = type { i64, %struct._typeobject* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.PyModuleDef = type { %struct.PyModuleDef_Base, i8*, i8*, i64, %struct.PyMethodDef*, i32 (%struct._object*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, void (i8*)* }
%struct.PyModuleDef_Base = type { %struct._object, %struct._object* ()*, i64, %struct._object* }
%struct.DecCondMap = type { i8*, i8*, i32, %struct._object* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%struct.ssize_constmap = type { i8*, i64 }
%struct.int_constmap = type { i8*, i32 }
%struct._Py_atomic_address = type { i8* }
%struct.PyDecContextObject = type { %struct._object, %struct.mpd_context_t, %struct._object*, %struct._object*, i32, %struct._ts* }
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type opaque
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyDecObject = type { %struct._object, i64, %struct.mpd_t, [4 x i64] }
%struct.mpd_t = type { i8, i64, i64, i64, i64, i64* }
%struct.PyASCIIObject = type { %struct._object, i64, i64, %struct.anon, i32* }
%struct.anon = type { i32 }
%struct.PyCompactUnicodeObject = type { %struct.PyASCIIObject, i64, i8*, i64 }
%struct.PyUnicodeObject = type { %struct.PyCompactUnicodeObject, %union.anon }
%union.anon = type { i8* }
%struct.Py_complex = type { double, double }
%struct.mpd_spec_t = type { i64, i64, i8, i8, i8, [5 x i8], i8*, i8*, i8* }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct.PyDecSignalDictObject = type { %struct._object, i32* }
%struct.PyDecContextManagerObject = type { %struct._object, %struct._object*, %struct._object* }

@mpd_traphandler = external hidden global void (%struct.mpd_context_t*)*, align 8
@mpd_mallocfunc = external hidden global i8* (i64)*, align 8
@mpd_reallocfunc = external hidden global i8* (i8*, i64)*, align 8
@mpd_callocfunc = external hidden global i8* (i64, i64)*, align 8
@mpd_free = external hidden global void (i8*)*, align 8
@PyBaseObject_Type = external global %struct._typeobject, align 8
@PyDec_Type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.27, i32 0, i32 0), i64 104, i64 0, void (%struct._object*)* @dec_dealloc, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* @dec_repr, %struct.PyNumberMethods* @dec_number_methods, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* bitcast (i64 (%struct.PyDecObject*)* @dec_hash to i64 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* @dec_str, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([294 x i8], [294 x i8]* @doc_decimal, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @dec_richcompare, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([63 x %struct.PyMethodDef], [63 x %struct.PyMethodDef]* @dec_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([3 x %struct.PyGetSetDef], [3 x %struct.PyGetSetDef]* @dec_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @dec_new, void (i8*)* @PyObject_Free, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDecContext_Type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.154, i32 0, i32 0), i64 96, i64 0, void (%struct._object*)* bitcast (void (%struct.PyDecContextObject*)* @context_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDecContextObject*)* @context_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyDecContextObject*)* @context_repr to %struct._object* (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*)* @context_getattr, i32 (%struct._object*, %struct._object*, %struct._object*)* @context_setattr, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([407 x i8], [407 x i8]* @doc_context, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([72 x %struct.PyMethodDef], [72 x %struct.PyMethodDef]* @context_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([7 x %struct.PyGetSetDef], [7 x %struct.PyGetSetDef]* @context_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @context_init, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @context_new, void (i8*)* @PyObject_Free, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDecContextManager_Type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.216, i32 0, i32 0), i64 32, i64 0, void (%struct._object*)* bitcast (void (%struct.PyDecContextManagerObject*)* @ctxmanager_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 262144, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([3 x %struct.PyMethodDef], [3 x %struct.PyMethodDef]* @ctxmanager_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyDecSignalDictMixin_Type = internal global %struct._typeobject { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.219, i32 0, i32 0), i64 24, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* @signaldict_repr, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* @signaldict_as_mapping, i64 (%struct._object*)* @PyObject_HashNotImplemented, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @PyObject_GenericGetAttr, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* @signaldict_richcompare, i64 0, %struct._object* (%struct._object*)* @signaldict_iter, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([2 x %struct.PyMethodDef], [2 x %struct.PyMethodDef]* @signaldict_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @signaldict_init, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyType_GenericNew, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str = private unnamed_addr constant [8 x i8] c"decimal\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"__module__\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"numbers\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Number\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"register\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"(O)\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"Rational\00", align 1
@Rational = internal global %struct._object* null, align 8
@.str.7 = private unnamed_addr constant [12 x i8] c"collections\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"namedtuple\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"(ss)\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"DecimalTuple\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"sign digits exponent\00", align 1
@DecimalTuple = internal global %struct._typeobject* null, align 8
@.str.12 = private unnamed_addr constant [15 x i8] c"MutableMapping\00", align 1
@PyType_Type = external global %struct._typeobject, align 8
@.str.13 = private unnamed_addr constant [8 x i8] c"s(OO){}\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"SignalDict\00", align 1
@PyDecSignalDict_Type = internal global %struct._typeobject* null, align 8
@_decimal_module = internal global %struct.PyModuleDef { %struct.PyModuleDef_Base { %struct._object { i64 1, %struct._typeobject* null }, %struct._object* ()* null, i64 0, %struct._object* null }, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @doc__decimal, i32 0, i32 0), i64 -1, %struct.PyMethodDef* getelementptr inbounds ([4 x %struct.PyMethodDef], [4 x %struct.PyMethodDef]* @_decimal_methods, i32 0, i32 0), i32 (%struct._object*)* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, void (i8*)* null }, align 8
@.str.15 = private unnamed_addr constant [8 x i8] c"Decimal\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"Context\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"decimal.DecimalException\00", align 1
@PyExc_ArithmeticError = external global %struct._object*, align 8
@DecimalException = internal global %struct._object* null, align 8
@.str.18 = private unnamed_addr constant [17 x i8] c"DecimalException\00", align 1
@SignalTuple = internal global %struct._object* null, align 8
@signal_map = internal global [10 x %struct.DecCondMap] [%struct.DecCondMap { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.228, i32 0, i32 0), i32 954, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.229, i32 0, i32 0), i32 1024, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.230, i32 0, i32 0), i32 4, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.231, i32 0, i32 0), i32 2048, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.165, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.232, i32 0, i32 0), i32 16384, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.233, i32 0, i32 0), i32 8192, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.234, i32 0, i32 0), i32 64, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.235, i32 0, i32 0), i32 4096, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.236, i32 0, i32 0), i32 1, %struct._object* null }, %struct.DecCondMap zeroinitializer], align 16
@PyExc_TypeError = external global %struct._object*, align 8
@PyExc_ZeroDivisionError = external global %struct._object*, align 8
@cond_map = internal global [6 x %struct.DecCondMap] [%struct.DecCondMap { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.228, i32 0, i32 0), i32 256, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.237, i32 0, i32 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.238, i32 0, i32 0), i32 2, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.239, i32 0, i32 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.240, i32 0, i32 0), i32 8, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.241, i32 0, i32 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.242, i32 0, i32 0), i32 16, %struct._object* null }, %struct.DecCondMap { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.243, i32 0, i32 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.244, i32 0, i32 0), i32 128, %struct._object* null }, %struct.DecCondMap zeroinitializer], align 16
@default_context_template = internal global %struct._object* null, align 8
@.str.19 = private unnamed_addr constant [15 x i8] c"DefaultContext\00", align 1
@.str.20 = private unnamed_addr constant [17 x i8] c"___DECIMAL_CTX__\00", align 1
@tls_context_key = internal global %struct._object* null, align 8
@_Py_TrueStruct = external global %struct._longobject, align 8
@.str.21 = private unnamed_addr constant [13 x i8] c"HAVE_THREADS\00", align 1
@basic_context_template = internal global %struct._object* null, align 8
@.str.22 = private unnamed_addr constant [13 x i8] c"BasicContext\00", align 1
@extended_context_template = internal global %struct._object* null, align 8
@.str.23 = private unnamed_addr constant [16 x i8] c"ExtendedContext\00", align 1
@ssize_constants = internal global [5 x %struct.ssize_constmap] [%struct.ssize_constmap { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.245, i32 0, i32 0), i64 999999999999999999 }, %struct.ssize_constmap { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.246, i32 0, i32 0), i64 999999999999999999 }, %struct.ssize_constmap { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.247, i32 0, i32 0), i64 -999999999999999999 }, %struct.ssize_constmap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.248, i32 0, i32 0), i64 -1999999999999999997 }, %struct.ssize_constmap zeroinitializer], align 16
@int_constants = internal global [1 x %struct.int_constmap] zeroinitializer, align 16
@mpd_round_string = external hidden global [9 x i8*], align 16
@round_map = internal global [8 x %struct._object*] zeroinitializer, align 16
@.str.24 = private unnamed_addr constant [12 x i8] c"__version__\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"1.70\00", align 1
@.str.26 = private unnamed_addr constant [21 x i8] c"__libmpdec_version__\00", align 1
@.str.27 = private unnamed_addr constant [16 x i8] c"decimal.Decimal\00", align 1
@dec_number_methods = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* @nm_mpd_qadd, %struct._object* (%struct._object*, %struct._object*)* @nm_mpd_qsub, %struct._object* (%struct._object*, %struct._object*)* @nm_mpd_qmul, %struct._object* (%struct._object*, %struct._object*)* @nm_mpd_qrem, %struct._object* (%struct._object*, %struct._object*)* @nm_mpd_qdivmod, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @nm_mpd_qpow, %struct._object* (%struct._object*)* @nm_mpd_qminus, %struct._object* (%struct._object*)* @nm_mpd_qplus, %struct._object* (%struct._object*)* @nm_mpd_qabs, i32 (%struct._object*)* @nm_nonzero, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* @nm_dec_as_long, i8* null, %struct._object* (%struct._object*)* @PyDec_AsFloat, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @nm_mpd_qdivint, %struct._object* (%struct._object*, %struct._object*)* @nm_mpd_qdiv, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@doc_decimal = internal global [294 x i8] c"\0ADecimal(value=\220\22, context=None): Construct a new Decimal object.\0Avalue can be an integer, string, tuple, or another Decimal object.\0AIf no value is given, return Decimal('0'). The context does not affect\0Athe conversion and is only passed to determine if the InvalidOperation\0Atrap is active.\0A\0A\00", align 16
@dec_methods = internal global [63 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qexp to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([191 x i8], [191 x i8]* @doc_exp, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qln to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @doc_ln, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qlog10 to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([158 x i8], [158 x i8]* @doc_log10, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qnext_minus to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([190 x i8], [190 x i8]* @doc_next_minus, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qnext_plus to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([189 x i8], [189 x i8]* @doc_next_plus, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qreduce to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([346 x i8], [346 x i8]* @doc_normalize, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @PyDec_ToIntegralValue to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @doc_to_integral, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @PyDec_ToIntegralExact to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([335 x i8], [335 x i8]* @doc_to_integral_exact, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.56, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @PyDec_ToIntegralValue to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([308 x i8], [308 x i8]* @doc_to_integral_value, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qsqrt to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([155 x i8], [155 x i8]* @doc_sqrt, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qcompare to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([233 x i8], [233 x i8]* @doc_compare, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.59, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qcompare_signal to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @doc_compare_signal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qmax to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([146 x i8], [146 x i8]* @doc_max, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qmax_mag to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @doc_max_mag, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.62, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qmin to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([146 x i8], [146 x i8]* @doc_min, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qmin_mag to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @doc_min_mag, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qnext_toward to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([301 x i8], [301 x i8]* @doc_next_toward, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qquantize to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([943 x i8], [943 x i8]* @doc_quantize, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qrem_near to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([453 x i8], [453 x i8]* @doc_remainder_near, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qfma to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([187 x i8], [187 x i8]* @doc_fma, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.68, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_iscanonical, i32 4, i8* getelementptr inbounds ([172 x i8], [172 x i8]* @doc_is_canonical, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.69, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_isfinite, i32 4, i8* getelementptr inbounds ([113 x i8], [113 x i8]* @doc_is_finite, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_isinfinite, i32 4, i8* getelementptr inbounds ([108 x i8], [108 x i8]* @doc_is_infinite, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_isnan, i32 4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @doc_is_nan, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_isqnan, i32 4, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @doc_is_qnan, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_issnan, i32 4, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @doc_is_snan, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_issigned, i32 4, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @doc_is_signed, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.75, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_iszero, i32 4, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @doc_is_zero, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_isnormal to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([217 x i8], [217 x i8]* @doc_is_normal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.77, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_issubnormal to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([189 x i8], [189 x i8]* @doc_is_subnormal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.78, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_adjexp, i32 4, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @doc_adjusted, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_canonical, i32 4, i8* getelementptr inbounds ([181 x i8], [181 x i8]* @doc_canonical, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.80, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_conjugate, i32 4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @doc_conjugate, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_radix, i32 4, i8* getelementptr inbounds ([153 x i8], [153 x i8]* @doc_radix, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.82, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_qcopy_abs, i32 4, i8* getelementptr inbounds ([164 x i8], [164 x i8]* @doc_copy_abs, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_mpd_qcopy_negate, i32 4, i8* getelementptr inbounds ([161 x i8], [161 x i8]* @doc_copy_negate, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.84, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qlogb to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([290 x i8], [290 x i8]* @doc_logb, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.85, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qinvert to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @doc_logical_invert, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.86, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_class to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([839 x i8], [839 x i8]* @doc_number_class, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.87, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_to_eng to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([403 x i8], [403 x i8]* @doc_to_eng_string, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.88, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_compare_total to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([1010 x i8], [1010 x i8]* @doc_compare_total, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.89, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_compare_total_mag to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([484 x i8], [484 x i8]* @doc_compare_total_mag, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.90, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qcopy_sign to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([438 x i8], [438 x i8]* @doc_copy_sign, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.91, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_same_quantum to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([330 x i8], [330 x i8]* @doc_same_quantum, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.92, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qand to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @doc_logical_and, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qor to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @doc_logical_or, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qxor to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([104 x i8], [104 x i8]* @doc_logical_xor, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.95, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qrotate to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([563 x i8], [563 x i8]* @doc_rotate, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.96, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qscaleb to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([200 x i8], [200 x i8]* @doc_scaleb, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.97, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @dec_mpd_qshift to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([507 x i8], [507 x i8]* @doc_shift, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.98, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_from_float, i32 24, i8* getelementptr inbounds ([507 x i8], [507 x i8]* @doc_from_float, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.99, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyDec_AsTuple, i32 4, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @doc_as_tuple, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.100, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_copy, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.101, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_copy, i32 8, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.102, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_format, i32 1, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.103, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_reduce, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.104, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyDec_Round, i32 1, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.105, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_ceil, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.106, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_floor, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.107, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_trunc, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.108, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_complex, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.109, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @dec_sizeof, i32 4, i8* null }, %struct.PyMethodDef { i8* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 1, i8* null }], align 16
@dec_getsets = internal global [3 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.139, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @dec_real, i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.140, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @dec_imag, i32 (%struct._object*, %struct._object*, i8*)* null, i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.28 = private unnamed_addr constant [14 x i8] c"Decimal('%s')\00", align 1
@_PyThreadState_Current = external global %struct._Py_atomic_address, align 8
@cached_context = internal global %struct.PyDecContextObject* null, align 8
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.29 = private unnamed_addr constant [24 x i8] c"cannot get thread state\00", align 1
@.str.30 = private unnamed_addr constant [27 x i8] c"argument must be a context\00", align 1
@.str.31 = private unnamed_addr constant [47 x i8] c"conversion from %s to Decimal is not supported\00", align 1
@_Py_NotImplementedStruct = external global %struct._object, align 8
@.str.32 = private unnamed_addr constant [37 x i8] c"internal error in flags_as_exception\00", align 1
@.str.33 = private unnamed_addr constant [5 x i8] c"(OO)\00", align 1
@_Py_NoneStruct = external global %struct._object, align 8
@PyExc_ValueError = external global %struct._object*, align 8
@.str.34 = private unnamed_addr constant [30 x i8] c"cannot convert NaN to integer\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.35 = private unnamed_addr constant [35 x i8] c"cannot convert Infinity to integer\00", align 1
@.str.36 = private unnamed_addr constant [38 x i8] c"cannot convert signaling NaN to float\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"-nan\00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"nan\00", align 1
@_dec_hash.p_data = private unnamed_addr constant [1 x i64] [i64 2305843009213693951], align 8
@_dec_hash.inv10_p_data = private unnamed_addr constant [1 x i64] [i64 2075258708292324556], align 8
@_dec_hash.ten_data = private unnamed_addr constant [1 x i64] [i64 10], align 8
@.str.39 = private unnamed_addr constant [34 x i8] c"Cannot hash a signaling NaN value\00", align 1
@.str.40 = private unnamed_addr constant [40 x i8] c"dec_hash: internal error: please report\00", align 1
@PyFloat_Type = external global %struct._typeobject, align 8
@PyComplex_Type = external global %struct._typeobject, align 8
@.str.41 = private unnamed_addr constant [30 x i8] c"argument must be int of float\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"__abs__\00", align 1
@.str.43 = private unnamed_addr constant [17 x i8] c"as_integer_ratio\00", align 1
@.str.44 = private unnamed_addr constant [11 x i8] c"bit_length\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"numerator\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"denominator\00", align 1
@.str.47 = private unnamed_addr constant [39 x i8] c"exact conversion for comparison failed\00", align 1
@_Py_FalseStruct = external global %struct._longobject, align 8
@.str.48 = private unnamed_addr constant [4 x i8] c"exp\00", align 1
@doc_exp = internal global [191 x i8] c"\0Aexp(context=None) - Return the value of the (natural) exponential function\0Ae**x at the given number. The function always uses the ROUND_HALF_EVEN mode\0Aand the result is correctly rounded.\0A\0A\00", align 16
@.str.49 = private unnamed_addr constant [3 x i8] c"ln\00", align 1
@doc_ln = internal global [163 x i8] c"\0Aln(context=None) - Return the natural (base e) logarithm of the operand.\0AThe function always uses the ROUND_HALF_EVEN mode and the result is\0Acorrectly rounded.\0A\0A\00", align 16
@.str.50 = private unnamed_addr constant [6 x i8] c"log10\00", align 1
@doc_log10 = internal global [158 x i8] c"\0Alog10(context=None) - Return the base ten logarithm of the operand.\0AThe function always uses the ROUND_HALF_EVEN mode and the result is\0Acorrectly rounded.\0A\0A\00", align 16
@.str.51 = private unnamed_addr constant [11 x i8] c"next_minus\00", align 1
@doc_next_minus = internal global [190 x i8] c"\0Anext_minus(context=None) - Return the largest number representable in the\0Agiven context (or in the current default context if no context is given) that\0Ais smaller than the given operand.\0A\0A\00", align 16
@.str.52 = private unnamed_addr constant [10 x i8] c"next_plus\00", align 1
@doc_next_plus = internal global [189 x i8] c"\0Anext_plus(context=None) - Return the smallest number representable in the\0Agiven context (or in the current default context if no context is given) that\0Ais larger than the given operand.\0A\0A\00", align 16
@.str.53 = private unnamed_addr constant [10 x i8] c"normalize\00", align 1
@doc_normalize = internal global [346 x i8] c"\0Anormalize(context=None) - Normalize the number by stripping the rightmost\0Atrailing zeros and converting any result equal to Decimal('0') to Decimal('0e0').\0AUsed for producing canonical values for members of an equivalence class. For\0Aexample, Decimal('32.100') and Decimal('0.321000e+2') both normalize to the\0Aequivalent value Decimal('32.1').\0A\0A\00", align 16
@.str.54 = private unnamed_addr constant [12 x i8] c"to_integral\00", align 1
@doc_to_integral = internal global [167 x i8] c"\0Ato_integral(rounding=None, context=None) - Identical to the\0Ato_integral_value() method. The to_integral() name has been kept\0Afor compatibility with older versions.\0A\0A\00", align 16
@.str.55 = private unnamed_addr constant [18 x i8] c"to_integral_exact\00", align 1
@doc_to_integral_exact = internal global [335 x i8] c"\0Ato_integral_exact(rounding=None, context=None) - Round to the nearest\0Ainteger, signaling Inexact or Rounded as appropriate if rounding occurs.\0AThe rounding mode is determined by the rounding parameter if given, else\0Aby the given context. If neither parameter is given, then the rounding mode\0Aof the current default context is used.\0A\0A\00", align 16
@.str.56 = private unnamed_addr constant [18 x i8] c"to_integral_value\00", align 1
@doc_to_integral_value = internal global [308 x i8] c"\0Ato_integral_value(rounding=None, context=None) - Round to the nearest\0Ainteger without signaling Inexact or Rounded. The rounding mode is determined\0Aby the rounding parameter if given, else by the given context. If neither\0Aparameter is given, then the rounding mode of the current default context is\0Aused.\0A\0A\00", align 16
@.str.57 = private unnamed_addr constant [5 x i8] c"sqrt\00", align 1
@doc_sqrt = internal global [155 x i8] c"\0Asqrt(context=None) - Return the square root of the argument to full precision.\0AThe result is correctly rounded using the ROUND_HALF_EVEN rounding mode.\0A\0A\00", align 16
@.str.58 = private unnamed_addr constant [8 x i8] c"compare\00", align 1
@doc_compare = internal global [233 x i8] c"\0Acompare(other, context=None) - Compare self to other. Return a decimal value:\0A\0A    a or b is a NaN ==> Decimal('NaN')\0A    a < b           ==> Decimal('-1')\0A    a == b          ==> Decimal('0')\0A    a > b           ==> Decimal('1')\0A\0A\00", align 16
@.str.59 = private unnamed_addr constant [15 x i8] c"compare_signal\00", align 1
@doc_compare_signal = internal global [92 x i8] c"\0Acompare_signal(other, context=None) - Identical to compare, except that\0Aall NaNs signal.\0A\0A\00", align 16
@.str.60 = private unnamed_addr constant [4 x i8] c"max\00", align 1
@doc_max = internal global [146 x i8] c"\0Amax(other, context=None) - Maximum of self and other. If one operand is a\0Aquiet NaN and the other is numeric, the numeric operand is returned.\0A\0A\00", align 16
@.str.61 = private unnamed_addr constant [8 x i8] c"max_mag\00", align 1
@doc_max_mag = internal global [133 x i8] c"\0Amax_mag(other, context=None) - Similar to the max() method, but the\0Acomparison is done using the absolute values of the operands.\0A\0A\00", align 16
@.str.62 = private unnamed_addr constant [4 x i8] c"min\00", align 1
@doc_min = internal global [146 x i8] c"\0Amin(other, context=None) - Minimum of self and other. If one operand is a\0Aquiet NaN and the other is numeric, the numeric operand is returned.\0A\0A\00", align 16
@.str.63 = private unnamed_addr constant [8 x i8] c"min_mag\00", align 1
@doc_min_mag = internal global [133 x i8] c"\0Amin_mag(other, context=None) - Similar to the min() method, but the\0Acomparison is done using the absolute values of the operands.\0A\0A\00", align 16
@.str.64 = private unnamed_addr constant [12 x i8] c"next_toward\00", align 1
@doc_next_toward = internal global [301 x i8] c"\0Anext_toward(other, context=None) - If the two operands are unequal, return\0Athe number closest to the first operand in the direction of the second operand.\0AIf both operands are numerically equal, return a copy of the first operand\0Awith the sign set to be the same as the sign of the second operand.\0A\0A\00", align 16
@.str.65 = private unnamed_addr constant [9 x i8] c"quantize\00", align 1
@doc_quantize = internal global [943 x i8] c"\0Aquantize(exp, rounding=None, context=None) - Return a value equal to the\0Afirst operand after rounding and having the exponent of the second operand.\0A\0A    >>> Decimal('1.41421356').quantize(Decimal('1.000'))\0A    Decimal('1.414')\0A\0AUnlike other operations, if the length of the coefficient after the quantize\0Aoperation would be greater than precision, then an InvalidOperation is signaled.\0AThis guarantees that, unless there is an error condition, the quantized exponent\0Ais always equal to that of the right-hand operand.\0A\0AAlso unlike other operations, quantize never signals Underflow, even if the\0Aresult is subnormal and inexact.\0A\0AIf the exponent of the second operand is larger than that of the first, then\0Arounding may be necessary. In this case, the rounding mode is determined by the\0Arounding argument if given, else by the given context argument; if neither\0Aargument is given, the rounding mode of the current thread's context is used.\0A\0A\00", align 16
@.str.66 = private unnamed_addr constant [15 x i8] c"remainder_near\00", align 1
@doc_remainder_near = internal global [453 x i8] c"\0Aremainder_near(other, context=None) - Return the remainder from dividing\0Aself by other. This differs from self % other in that the sign of the\0Aremainder is chosen so as to minimize its absolute value. More precisely, the\0Areturn value is self - n * other where n is the integer nearest to the exact\0Avalue of self / other, and if two integers are equally near then the even one\0Ais chosen.\0A\0AIf the result is zero then its sign will be the sign of self.\0A\0A\00", align 16
@.str.67 = private unnamed_addr constant [4 x i8] c"fma\00", align 1
@doc_fma = internal global [187 x i8] c"\0Afma(other, third, context=None) - Fused multiply-add. Return self*other+third\0Awith no rounding of the intermediate product self*other.\0A\0A    >>> Decimal(2).fma(3, 5)\0A    Decimal('11')\0A\0A\0A\00", align 16
@.str.68 = private unnamed_addr constant [13 x i8] c"is_canonical\00", align 1
@doc_is_canonical = internal global [172 x i8] c"\0Ais_canonical() - Return True if the argument is canonical and False otherwise.\0ACurrently, a Decimal instance is always canonical, so this operation always\0Areturns True.\0A\0A\00", align 16
@.str.69 = private unnamed_addr constant [10 x i8] c"is_finite\00", align 1
@doc_is_finite = internal global [113 x i8] c"\0Ais_finite() - Return True if the argument is a finite number, and False if the\0Aargument is infinite or a NaN.\0A\0A\00", align 16
@.str.70 = private unnamed_addr constant [12 x i8] c"is_infinite\00", align 1
@doc_is_infinite = internal global [108 x i8] c"\0Ais_infinite() - Return True if the argument is either positive or negative\0Ainfinity and False otherwise.\0A\0A\00", align 16
@.str.71 = private unnamed_addr constant [7 x i8] c"is_nan\00", align 1
@doc_is_nan = internal global [93 x i8] c"\0Ais_nan() - Return True if the argument is a (quiet or signaling) NaN and\0AFalse otherwise.\0A\0A\00", align 16
@.str.72 = private unnamed_addr constant [8 x i8] c"is_qnan\00", align 1
@doc_is_qnan = internal global [80 x i8] c"\0Ais_qnan() - Return True if the argument is a quiet NaN, and False otherwise.\0A\0A\00", align 16
@.str.73 = private unnamed_addr constant [8 x i8] c"is_snan\00", align 1
@doc_is_snan = internal global [83 x i8] c"\0Ais_snan() - Return True if the argument is a signaling NaN and False otherwise.\0A\0A\00", align 16
@.str.74 = private unnamed_addr constant [10 x i8] c"is_signed\00", align 1
@doc_is_signed = internal global [133 x i8] c"\0Ais_signed() - Return True if the argument has a negative sign and\0AFalse otherwise. Note that both zeros and NaNs can carry signs.\0A\0A\00", align 16
@.str.75 = private unnamed_addr constant [8 x i8] c"is_zero\00", align 1
@doc_is_zero = internal global [97 x i8] c"\0Ais_zero() - Return True if the argument is a (positive or negative) zero and\0AFalse otherwise.\0A\0A\00", align 16
@.str.76 = private unnamed_addr constant [10 x i8] c"is_normal\00", align 1
@doc_is_normal = internal global [217 x i8] c"\0Ais_normal(context=None) - Return True if the argument is a normal finite\0Anon-zero number with an adjusted exponent greater than or equal to Emin.\0AReturn False if the argument is zero, subnormal, infinite or a NaN.\0A\0A\00", align 16
@.str.77 = private unnamed_addr constant [13 x i8] c"is_subnormal\00", align 1
@doc_is_subnormal = internal global [189 x i8] c"\0Ais_subnormal(context=None) - Return True if the argument is subnormal, and\0AFalse otherwise. A number is subnormal if it is non-zero, finite, and has an\0Aadjusted exponent less than Emin.\0A\0A\00", align 16
@.str.78 = private unnamed_addr constant [9 x i8] c"adjusted\00", align 1
@doc_adjusted = internal global [90 x i8] c"\0Aadjusted() - Return the adjusted exponent of the number.\0A\0ADefined as exp + digits - 1.\0A\0A\00", align 16
@.str.79 = private unnamed_addr constant [10 x i8] c"canonical\00", align 1
@doc_canonical = internal global [181 x i8] c"\0Acanonical() - Return the canonical encoding of the argument. Currently,\0Athe encoding of a Decimal instance is always canonical, so this operation\0Areturns its argument unchanged.\0A\0A\00", align 16
@.str.80 = private unnamed_addr constant [10 x i8] c"conjugate\00", align 1
@doc_conjugate = internal global [30 x i8] c"\0Aconjugate() - Return self.\0A\0A\00", align 16
@.str.81 = private unnamed_addr constant [6 x i8] c"radix\00", align 1
@doc_radix = internal global [153 x i8] c"\0Aradix() - Return Decimal(10), the radix (base) in which the Decimal class does\0Aall its arithmetic. Included for compatibility with the specification.\0A\0A\00", align 16
@.str.82 = private unnamed_addr constant [9 x i8] c"copy_abs\00", align 1
@doc_copy_abs = internal global [164 x i8] c"\0Acopy_abs() - Return the absolute value of the argument. This operation\0Ais unaffected by context and is quiet: no flags are changed and no rounding\0Ais performed.\0A\0A\00", align 16
@.str.83 = private unnamed_addr constant [12 x i8] c"copy_negate\00", align 1
@doc_copy_negate = internal global [161 x i8] c"\0Acopy_negate() - Return the negation of the argument. This operation is\0Aunaffected by context and is quiet: no flags are changed and no rounding\0Ais performed.\0A\0A\00", align 16
@.str.84 = private unnamed_addr constant [5 x i8] c"logb\00", align 1
@doc_logb = internal global [290 x i8] c"\0Alogb(context=None) - For a non-zero number, return the adjusted exponent\0Aof the operand as a Decimal instance. If the operand is a zero, then\0ADecimal('-Infinity') is returned and the DivisionByZero condition is\0Araised. If the operand is an infinity then Decimal('Infinity') is returned.\0A\0A\00", align 16
@.str.85 = private unnamed_addr constant [15 x i8] c"logical_invert\00", align 1
@doc_logical_invert = internal global [92 x i8] c"\0Alogical_invert(context=None) - Return the digit-wise inversion of the\0A(logical) operand.\0A\0A\00", align 16
@.str.86 = private unnamed_addr constant [13 x i8] c"number_class\00", align 1
@doc_number_class = internal global [839 x i8] c"\0Anumber_class(context=None) - Return a string describing the class of the\0Aoperand. The returned value is one of the following ten strings:\0A\0A    * '-Infinity', indicating that the operand is negative infinity.\0A    * '-Normal', indicating that the operand is a negative normal number.\0A    * '-Subnormal', indicating that the operand is negative and subnormal.\0A    * '-Zero', indicating that the operand is a negative zero.\0A    * '+Zero', indicating that the operand is a positive zero.\0A    * '+Subnormal', indicating that the operand is positive and subnormal.\0A    * '+Normal', indicating that the operand is a positive normal number.\0A    * '+Infinity', indicating that the operand is positive infinity.\0A    * 'NaN', indicating that the operand is a quiet NaN (Not a Number).\0A    * 'sNaN', indicating that the operand is a signaling NaN.\0A\0A\0A\00", align 16
@.str.87 = private unnamed_addr constant [14 x i8] c"to_eng_string\00", align 1
@doc_to_eng_string = internal global [403 x i8] c"\0Ato_eng_string(context=None) - Convert to an engineering-type string.\0AEngineering notation has an exponent which is a multiple of 3, so there\0Aare up to 3 digits left of the decimal place. For example, Decimal('123E+1')\0Ais converted to Decimal('1.23E+3').\0A\0AThe value of context.capitals determines whether the exponent sign is lower\0Aor upper case. Otherwise, the context does not affect the operation.\0A\0A\00", align 16
@.str.88 = private unnamed_addr constant [14 x i8] c"compare_total\00", align 1
@doc_compare_total = internal global [1010 x i8] c"\0Acompare_total(other, context=None) - Compare two operands using their\0Aabstract representation rather than their numerical value. Similar to the\0Acompare() method, but the result gives a total ordering on Decimal instances.\0ATwo Decimal instances with the same numeric value but different representations\0Acompare unequal in this ordering:\0A\0A    >>> Decimal('12.0').compare_total(Decimal('12'))\0A    Decimal('-1')\0A\0AQuiet and signaling NaNs are also included in the total ordering. The result\0Aof this function is Decimal('0') if both operands have the same representation,\0ADecimal('-1') if the first operand is lower in the total order than the second,\0Aand Decimal('1') if the first operand is higher in the total order than the\0Asecond operand. See the specification for details of the total order.\0A\0AThis operation is unaffected by context and is quiet: no flags are changed\0Aand no rounding is performed. As an exception, the C version may raise\0AInvalidOperation if the second operand cannot be converted exactly.\0A\0A\00", align 16
@.str.89 = private unnamed_addr constant [18 x i8] c"compare_total_mag\00", align 1
@doc_compare_total_mag = internal global [484 x i8] c"\0Acompare_total_mag(other, context=None) - Compare two operands using their\0Aabstract representation rather than their value as in compare_total(), but\0Aignoring the sign of each operand. x.compare_total_mag(y) is equivalent to\0Ax.copy_abs().compare_total(y.copy_abs()).\0A\0AThis operation is unaffected by context and is quiet: no flags are changed\0Aand no rounding is performed. As an exception, the C version may raise\0AInvalidOperation if the second operand cannot be converted exactly.\0A\0A\00", align 16
@.str.90 = private unnamed_addr constant [10 x i8] c"copy_sign\00", align 1
@doc_copy_sign = internal global [438 x i8] c"\0Acopy_sign(other, context=None) - Return a copy of the first operand with\0Athe sign set to be the same as the sign of the second operand. For example:\0A\0A    >>> Decimal('2.3').copy_sign(Decimal('-1.5'))\0A    Decimal('-2.3')\0A\0AThis operation is unaffected by context and is quiet: no flags are changed\0Aand no rounding is performed. As an exception, the C version may raise\0AInvalidOperation if the second operand cannot be converted exactly.\0A\0A\00", align 16
@.str.91 = private unnamed_addr constant [13 x i8] c"same_quantum\00", align 1
@doc_same_quantum = internal global [330 x i8] c"\0Asame_quantum(other, context=None) - Test whether self and other have the\0Asame exponent or whether both are NaN.\0A\0AThis operation is unaffected by context and is quiet: no flags are changed\0Aand no rounding is performed. As an exception, the C version may raise\0AInvalidOperation if the second operand cannot be converted exactly.\0A\0A\00", align 16
@.str.92 = private unnamed_addr constant [12 x i8] c"logical_and\00", align 1
@doc_logical_and = internal global [95 x i8] c"\0Alogical_and(other, context=None) - Return the digit-wise and of the two\0A(logical) operands.\0A\0A\00", align 16
@.str.93 = private unnamed_addr constant [11 x i8] c"logical_or\00", align 1
@doc_logical_or = internal global [93 x i8] c"\0Alogical_or(other, context=None) - Return the digit-wise or of the two\0A(logical) operands.\0A\0A\00", align 16
@.str.94 = private unnamed_addr constant [12 x i8] c"logical_xor\00", align 1
@doc_logical_xor = internal global [104 x i8] c"\0Alogical_xor(other, context=None) - Return the digit-wise exclusive or of the\0Atwo (logical) operands.\0A\0A\00", align 16
@.str.95 = private unnamed_addr constant [7 x i8] c"rotate\00", align 1
@doc_rotate = internal global [563 x i8] c"\0Arotate(other, context=None) - Return the result of rotating the digits of the\0Afirst operand by an amount specified by the second operand. The second operand\0Amust be an integer in the range -precision through precision. The absolute\0Avalue of the second operand gives the number of places to rotate. If the second\0Aoperand is positive then rotation is to the left; otherwise rotation is to the\0Aright. The coefficient of the first operand is padded on the left with zeros to\0Alength precision if necessary. The sign and exponent of the first operand are\0Aunchanged.\0A\0A\00", align 16
@.str.96 = private unnamed_addr constant [7 x i8] c"scaleb\00", align 1
@doc_scaleb = internal global [200 x i8] c"\0Ascaleb(other, context=None) - Return the first operand with the exponent\0Aadjusted the second. Equivalently, return the first operand multiplied by\0A10**other. The second operand must be an integer.\0A\0A\00", align 16
@.str.97 = private unnamed_addr constant [6 x i8] c"shift\00", align 1
@doc_shift = internal global [507 x i8] c"\0Ashift(other, context=None) - Return the result of shifting the digits of\0Athe first operand by an amount specified by the second operand. The second\0Aoperand must be an integer in the range -precision through precision. The\0Aabsolute value of the second operand gives the number of places to shift.\0AIf the second operand is positive, then the shift is to the left; otherwise\0Athe shift is to the right. Digits shifted into the coefficient are zeros.\0AThe sign and exponent of the first operand are unchanged.\0A\0A\00", align 16
@.str.98 = private unnamed_addr constant [11 x i8] c"from_float\00", align 1
@doc_from_float = internal global [507 x i8] c"\0Afrom_float(f) - Class method that converts a float to a decimal number, exactly.\0ASince 0.1 is not exactly representable in binary floating point,\0ADecimal.from_float(0.1) is not the same as Decimal('0.1').\0A\0A    >>> Decimal.from_float(0.1)\0A    Decimal('0.1000000000000000055511151231257827021181583404541015625')\0A    >>> Decimal.from_float(float('nan'))\0A    Decimal('NaN')\0A    >>> Decimal.from_float(float('inf'))\0A    Decimal('Infinity')\0A    >>> Decimal.from_float(float('-inf'))\0A    Decimal('-Infinity')\0A\0A\0A\00", align 16
@.str.99 = private unnamed_addr constant [9 x i8] c"as_tuple\00", align 1
@doc_as_tuple = internal global [61 x i8] c"\0Aas_tuple() - Return a tuple representation of the number.\0A\0A\00", align 16
@.str.100 = private unnamed_addr constant [9 x i8] c"__copy__\00", align 1
@.str.101 = private unnamed_addr constant [13 x i8] c"__deepcopy__\00", align 1
@.str.102 = private unnamed_addr constant [11 x i8] c"__format__\00", align 1
@.str.103 = private unnamed_addr constant [11 x i8] c"__reduce__\00", align 1
@.str.104 = private unnamed_addr constant [10 x i8] c"__round__\00", align 1
@.str.105 = private unnamed_addr constant [9 x i8] c"__ceil__\00", align 1
@.str.106 = private unnamed_addr constant [10 x i8] c"__floor__\00", align 1
@.str.107 = private unnamed_addr constant [10 x i8] c"__trunc__\00", align 1
@.str.108 = private unnamed_addr constant [12 x i8] c"__complex__\00", align 1
@.str.109 = private unnamed_addr constant [11 x i8] c"__sizeof__\00", align 1
@dec_mpd_qexp.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.110 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@.str.111 = private unnamed_addr constant [3 x i8] c"|O\00", align 1
@.str.112 = private unnamed_addr constant [36 x i8] c"optional argument must be a context\00", align 1
@dec_mpd_qln.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qlog10.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qnext_minus.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qnext_plus.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qreduce.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@PyDec_ToIntegralValue.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.113 = private unnamed_addr constant [9 x i8] c"rounding\00", align 1
@.str.114 = private unnamed_addr constant [4 x i8] c"|OO\00", align 1
@.str.115 = private unnamed_addr constant [40 x i8] c"internal error in PyDec_ToIntegralValue\00", align 1
@invalid_rounding_err = internal global i8* getelementptr inbounds ([151 x i8], [151 x i8]* @.str.116, i32 0, i32 0), align 8
@.str.116 = private unnamed_addr constant [151 x i8] c"valid values for rounding are:\0A  [ROUND_CEILING, ROUND_FLOOR, ROUND_UP, ROUND_DOWN,\0A   ROUND_HALF_UP, ROUND_HALF_DOWN, ROUND_HALF_EVEN,\0A   ROUND_05UP]\00", align 1
@PyDec_ToIntegralExact.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.117 = private unnamed_addr constant [40 x i8] c"internal error in PyDec_ToIntegralExact\00", align 1
@dec_mpd_qsqrt.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qcompare.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.118 = private unnamed_addr constant [6 x i8] c"other\00", align 1
@.str.119 = private unnamed_addr constant [4 x i8] c"O|O\00", align 1
@dec_mpd_qcompare_signal.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qmax.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qmax_mag.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qmin.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qmin_mag.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qnext_toward.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qquantize.kwlist = internal global [4 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.120 = private unnamed_addr constant [5 x i8] c"O|OO\00", align 1
@.str.121 = private unnamed_addr constant [36 x i8] c"internal error in dec_mpd_qquantize\00", align 1
@dec_mpd_qrem_near.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qfma.kwlist = internal global [4 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.122 = private unnamed_addr constant [6 x i8] c"third\00", align 1
@.str.123 = private unnamed_addr constant [5 x i8] c"OO|O\00", align 1
@dec_mpd_isnormal.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_issubnormal.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qlogb.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qinvert.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_class.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_to_eng.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_compare_total.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_compare_total_mag.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qcopy_sign.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_same_quantum.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qand.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qor.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qxor.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qrotate.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qscaleb.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@dec_mpd_qshift.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.124 = private unnamed_addr constant [2 x i8] c"F\00", align 1
@.str.125 = private unnamed_addr constant [4 x i8] c"(i)\00", align 1
@.str.126 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.127 = private unnamed_addr constant [2 x i8] c"N\00", align 1
@.str.128 = private unnamed_addr constant [23 x i8] c"format arg must be str\00", align 1
@.str.129 = private unnamed_addr constant [22 x i8] c"invalid format string\00", align 1
@.str.130 = private unnamed_addr constant [33 x i8] c"optional argument must be a dict\00", align 1
@.str.131 = private unnamed_addr constant [14 x i8] c"decimal_point\00", align 1
@.str.132 = private unnamed_addr constant [14 x i8] c"thousands_sep\00", align 1
@.str.133 = private unnamed_addr constant [9 x i8] c"grouping\00", align 1
@.str.134 = private unnamed_addr constant [22 x i8] c"invalid override dict\00", align 1
@.str.135 = private unnamed_addr constant [57 x i8] c"format specification exceeds internal limits of _decimal\00", align 1
@.str.136 = private unnamed_addr constant [76 x i8] c"invalid decimal point or unsupported combination of LC_CTYPE and LC_NUMERIC\00", align 1
@.str.137 = private unnamed_addr constant [5 x i8] c"O(O)\00", align 1
@PyDec_Round.dq = private unnamed_addr constant [1 x i64] [i64 1], align 8
@.str.138 = private unnamed_addr constant [32 x i8] c"optional arg must be an integer\00", align 1
@.str.139 = private unnamed_addr constant [5 x i8] c"real\00", align 1
@.str.140 = private unnamed_addr constant [5 x i8] c"imag\00", align 1
@dec_new.kwlist = internal global [3 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.110, i32 0, i32 0), i8* null], align 16
@.str.141 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@_Py_ascii_whitespace = external constant [0 x i8], align 1
@.str.142 = private unnamed_addr constant [33 x i8] c"argument must be a tuple or list\00", align 1
@.str.143 = private unnamed_addr constant [40 x i8] c"argument must be a sequence of length 3\00", align 1
@.str.144 = private unnamed_addr constant [46 x i8] c"sign must be an integer with the value 0 or 1\00", align 1
@.str.145 = private unnamed_addr constant [4 x i8] c"Inf\00", align 1
@.str.146 = private unnamed_addr constant [4 x i8] c"NaN\00", align 1
@.str.147 = private unnamed_addr constant [5 x i8] c"sNaN\00", align 1
@.str.148 = private unnamed_addr constant [62 x i8] c"string argument in the third position must be 'F', 'n' or 'N'\00", align 1
@.str.149 = private unnamed_addr constant [28 x i8] c"exponent must be an integer\00", align 1
@.str.150 = private unnamed_addr constant [38 x i8] c"coefficient must be a tuple of digits\00", align 1
@.str.151 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.152 = private unnamed_addr constant [38 x i8] c"internal error in dec_sequence_as_str\00", align 1
@.str.153 = private unnamed_addr constant [4 x i8] c"%li\00", align 1
@.str.154 = private unnamed_addr constant [16 x i8] c"decimal.Context\00", align 1
@doc_context = internal global [407 x i8] c"\0AThe context affects almost all operations and controls rounding,\0AOver/Underflow, raising of exceptions and much more. A new context\0Acan be constructed as follows:\0A\0A    >>> c = Context(prec=28, Emin=-425000000, Emax=425000000,\0A    ...             rounding=ROUND_HALF_EVEN, capitals=1, clamp=1,\0A    ...             traps=[InvalidOperation, DivisionByZero, Overflow],\0A    ...             flags=[])\0A    >>>\0A\0A\0A\00", align 16
@context_methods = internal global [72 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.173, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qabs, i32 8, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @doc_ctx_abs, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.48, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qexp, i32 8, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @doc_ctx_exp, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.49, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qln, i32 8, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @doc_ctx_ln, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.50, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qlog10, i32 8, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @doc_ctx_log10, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.174, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qminus, i32 8, i8* getelementptr inbounds ([117 x i8], [117 x i8]* @doc_ctx_minus, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.51, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qnext_minus, i32 8, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @doc_ctx_next_minus, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.52, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qnext_plus, i32 8, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @doc_ctx_next_plus, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qreduce, i32 8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @doc_ctx_normalize, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.175, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qplus, i32 8, i8* getelementptr inbounds ([114 x i8], [114 x i8]* @doc_ctx_plus, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.54, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qround_to_int, i32 8, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @doc_ctx_to_integral, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.55, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qround_to_intx, i32 8, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @doc_ctx_to_integral_exact, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.56, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qround_to_int, i32 8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @doc_ctx_to_integral_value, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.57, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qsqrt, i32 8, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @doc_ctx_sqrt, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.176, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qadd, i32 1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @doc_ctx_add, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.58, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qcompare, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @doc_ctx_compare, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.59, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qcompare_signal, i32 1, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @doc_ctx_compare_signal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.177, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qdiv, i32 1, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @doc_ctx_divide, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.178, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qdivint, i32 1, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @doc_ctx_divide_int, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.179, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qdivmod, i32 1, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @doc_ctx_divmod, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.60, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qmax, i32 1, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @doc_ctx_max, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.61, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qmax_mag, i32 1, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @doc_ctx_max_mag, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.62, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qmin, i32 1, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @doc_ctx_min, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qmin_mag, i32 1, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @doc_ctx_min_mag, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.180, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qmul, i32 1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @doc_ctx_multiply, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.64, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qnext_toward, i32 1, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @doc_ctx_next_toward, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qquantize, i32 1, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @doc_ctx_quantize, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.181, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qrem, i32 1, i8* getelementptr inbounds ([148 x i8], [148 x i8]* @doc_ctx_remainder, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qrem_near, i32 1, i8* getelementptr inbounds ([158 x i8], [158 x i8]* @doc_ctx_remainder_near, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.182, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qsub, i32 1, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @doc_ctx_subtract, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.183, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._object*, %struct._object*, %struct._object*)* @ctx_mpd_qpow to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([579 x i8], [579 x i8]* @doc_ctx_power, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qfma, i32 1, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @doc_ctx_fma, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.184, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @context_getetiny, i32 4, i8* getelementptr inbounds ([166 x i8], [166 x i8]* @doc_ctx_Etiny, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.185, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @context_getetop, i32 4, i8* getelementptr inbounds ([177 x i8], [177 x i8]* @doc_ctx_Etop, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_radix, i32 4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @doc_ctx_radix, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.68, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_iscanonical, i32 8, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @doc_ctx_is_canonical, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.69, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_isfinite, i32 8, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @doc_ctx_is_finite, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_isinfinite, i32 8, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @doc_ctx_is_infinite, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.71, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_isnan, i32 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @doc_ctx_is_nan, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_isnormal, i32 8, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @doc_ctx_is_normal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.72, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_isqnan, i32 8, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @doc_ctx_is_qnan, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.74, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_issigned, i32 8, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @doc_ctx_is_signed, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_issnan, i32 8, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @doc_ctx_is_snan, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.77, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_issubnormal, i32 8, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @doc_ctx_is_subnormal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.75, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_iszero, i32 8, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @doc_ctx_is_zero, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.186, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyDecContext_Apply, i32 8, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.79, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_canonical, i32 8, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @doc_ctx_canonical, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.82, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qcopy_abs, i32 8, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @doc_ctx_copy_abs, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.187, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_copy_decimal, i32 8, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @doc_ctx_copy_decimal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.83, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qcopy_negate, i32 8, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @doc_ctx_copy_negate, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.84, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qlogb, i32 8, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @doc_ctx_logb, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.85, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qinvert, i32 8, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @doc_ctx_logical_invert, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.86, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_class, i32 8, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @doc_ctx_number_class, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.188, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_to_sci, i32 8, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @doc_ctx_to_sci_string, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.87, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_to_eng, i32 8, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @doc_ctx_to_eng_string, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.88, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_compare_total, i32 1, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @doc_ctx_compare_total, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.89, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_compare_total_mag, i32 1, i8* getelementptr inbounds ([97 x i8], [97 x i8]* @doc_ctx_compare_total_mag, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.90, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qcopy_sign, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @doc_ctx_copy_sign, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.92, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qand, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @doc_ctx_logical_and, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qor, i32 1, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @doc_ctx_logical_or, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qxor, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @doc_ctx_logical_xor, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.95, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qrotate, i32 1, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @doc_ctx_rotate, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.91, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_same_quantum, i32 1, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @doc_ctx_same_quantum, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.96, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qscaleb, i32 1, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @doc_ctx_scaleb, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.97, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_mpd_qshift, i32 1, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @doc_ctx_shift, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.189, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @context_clear_flags, i32 4, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @doc_ctx_clear_flags, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.190, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @context_clear_traps, i32 4, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @doc_ctx_clear_traps, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.100, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @context_copy, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.103, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @context_reduce, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.191, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @context_copy, i32 4, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @doc_ctx_copy, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.192, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_create_decimal, i32 1, i8* getelementptr inbounds ([163 x i8], [163 x i8]* @doc_ctx_create_decimal, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.193, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @ctx_from_float, i32 8, i8* getelementptr inbounds ([167 x i8], [167 x i8]* @doc_ctx_create_decimal_from_float, i32 0, i32 0) }, %struct.PyMethodDef { i8* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 1, i8* null }], align 16
@context_getsets = internal global [7 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.201, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @context_getprec, i32 (%struct._object*, %struct._object*, i8*)* @context_setprec, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.202, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @context_getemax, i32 (%struct._object*, %struct._object*, i8*)* @context_setemax, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.203, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @context_getemin, i32 (%struct._object*, %struct._object*, i8*)* @context_setemin, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @context_getround, i32 (%struct._object*, %struct._object*, i8*)* @context_setround, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.204, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @context_getcapitals, i32 (%struct._object*, %struct._object*, i8*)* @context_setcapitals, i8* null, i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.205, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* @context_getclamp, i32 (%struct._object*, %struct._object*, i8*)* @context_setclamp, i8* null, i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@dec_signal_string = internal global [15 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.157, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.159, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.160, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.158, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.161, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.162, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.163, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.164, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.165, i32 0, i32 0)], align 16
@.str.155 = private unnamed_addr constant [31 x i8] c"internal error in context_repr\00", align 1
@.str.156 = private unnamed_addr constant [94 x i8] c"Context(prec=%zd, rounding=%s, Emin=%zd, Emax=%zd, capitals=%d, clamp=%d, flags=%s, traps=%s)\00", align 1
@.str.157 = private unnamed_addr constant [8 x i8] c"Clamped\00", align 1
@.str.158 = private unnamed_addr constant [17 x i8] c"InvalidOperation\00", align 1
@.str.159 = private unnamed_addr constant [15 x i8] c"DivisionByZero\00", align 1
@.str.160 = private unnamed_addr constant [8 x i8] c"Inexact\00", align 1
@.str.161 = private unnamed_addr constant [15 x i8] c"FloatOperation\00", align 1
@.str.162 = private unnamed_addr constant [9 x i8] c"Overflow\00", align 1
@.str.163 = private unnamed_addr constant [8 x i8] c"Rounded\00", align 1
@.str.164 = private unnamed_addr constant [10 x i8] c"Subnormal\00", align 1
@.str.165 = private unnamed_addr constant [10 x i8] c"Underflow\00", align 1
@.str.166 = private unnamed_addr constant [6 x i8] c"traps\00", align 1
@.str.167 = private unnamed_addr constant [6 x i8] c"flags\00", align 1
@PyExc_AttributeError = external global %struct._object*, align 8
@.str.168 = private unnamed_addr constant [37 x i8] c"context attributes cannot be deleted\00", align 1
@.str.169 = private unnamed_addr constant [40 x i8] c"internal error in context_settraps_dict\00", align 1
@.str.170 = private unnamed_addr constant [31 x i8] c"argument must be a signal dict\00", align 1
@PyExc_KeyError = external global %struct._object*, align 8
@.str.171 = private unnamed_addr constant [20 x i8] c"invalid signal dict\00", align 1
@.str.172 = private unnamed_addr constant [41 x i8] c"internal error in context_setstatus_dict\00", align 1
@.str.173 = private unnamed_addr constant [4 x i8] c"abs\00", align 1
@doc_ctx_abs = internal global [44 x i8] c"\0Aabs(x) - Return the absolute value of x.\0A\0A\00", align 16
@doc_ctx_exp = internal global [27 x i8] c"\0Aexp(x) - Return e ** x.\0A\0A\00", align 16
@doc_ctx_ln = internal global [55 x i8] c"\0Aln(x) - Return the natural (base e) logarithm of x.\0A\0A\00", align 16
@doc_ctx_log10 = internal global [49 x i8] c"\0Alog10(x) - Return the base 10 logarithm of x.\0A\0A\00", align 16
@.str.174 = private unnamed_addr constant [6 x i8] c"minus\00", align 1
@doc_ctx_minus = internal global [117 x i8] c"\0Aminus(x) - Minus corresponds to the unary prefix minus operator in Python,\0Abut applies the context to the result.\0A\0A\00", align 16
@doc_ctx_next_minus = internal global [75 x i8] c"\0Anext_minus(x) - Return the largest representable number smaller than x.\0A\0A\00", align 16
@doc_ctx_next_plus = internal global [74 x i8] c"\0Anext_plus(x) - Return the smallest representable number larger than x.\0A\0A\00", align 16
@doc_ctx_normalize = internal global [70 x i8] c"\0Anormalize(x) - Reduce x to its simplest form. Alias for reduce(x).\0A\0A\00", align 16
@.str.175 = private unnamed_addr constant [5 x i8] c"plus\00", align 1
@doc_ctx_plus = internal global [114 x i8] c"\0Aplus(x) - Plus corresponds to the unary prefix plus operator in Python,\0Abut applies the context to the result.\0A\0A\00", align 16
@doc_ctx_to_integral = internal global [55 x i8] c"\0Ato_integral(x) - Identical to to_integral_value(x).\0A\0A\00", align 16
@doc_ctx_to_integral_exact = internal global [91 x i8] c"\0Ato_integral_exact(x) - Round to an integer. Signal if the result is\0Arounded or inexact.\0A\0A\00", align 16
@doc_ctx_to_integral_value = internal global [47 x i8] c"\0Ato_integral_value(x) - Round to an integer.\0A\0A\00", align 16
@doc_ctx_sqrt = internal global [72 x i8] c"\0Asqrt(x) - Square root of a non-negative number to context precision.\0A\0A\00", align 16
@.str.176 = private unnamed_addr constant [4 x i8] c"add\00", align 1
@doc_ctx_add = internal global [42 x i8] c"\0Aadd(x, y) - Return the sum of x and y.\0A\0A\00", align 16
@doc_ctx_compare = internal global [48 x i8] c"\0Acompare(x, y) - Compare x and y numerically.\0A\0A\00", align 16
@doc_ctx_compare_signal = internal global [72 x i8] c"\0Acompare_signal(x, y) - Compare x and y numerically. All NaNs signal.\0A\0A\00", align 16
@.str.177 = private unnamed_addr constant [7 x i8] c"divide\00", align 1
@doc_ctx_divide = internal global [41 x i8] c"\0Adivide(x, y) - Return x divided by y.\0A\0A\00", align 16
@.str.178 = private unnamed_addr constant [11 x i8] c"divide_int\00", align 1
@doc_ctx_divide_int = internal global [70 x i8] c"\0Adivide_int(x, y) - Return x divided by y, truncated to an integer.\0A\0A\00", align 16
@.str.179 = private unnamed_addr constant [7 x i8] c"divmod\00", align 1
@doc_ctx_divmod = internal global [71 x i8] c"\0Adivmod(x, y) - Return quotient and remainder of the division x / y.\0A\0A\00", align 16
@doc_ctx_max = internal global [70 x i8] c"\0Amax(x, y) - Compare the values numerically and return the maximum.\0A\0A\00", align 16
@doc_ctx_max_mag = internal global [75 x i8] c"\0Amax_mag(x, y) - Compare the values numerically with their sign ignored.\0A\0A\00", align 16
@doc_ctx_min = internal global [70 x i8] c"\0Amin(x, y) - Compare the values numerically and return the minimum.\0A\0A\00", align 16
@doc_ctx_min_mag = internal global [75 x i8] c"\0Amin_mag(x, y) - Compare the values numerically with their sign ignored.\0A\0A\00", align 16
@.str.180 = private unnamed_addr constant [9 x i8] c"multiply\00", align 1
@doc_ctx_multiply = internal global [51 x i8] c"\0Amultiply(x, y) - Return the product of x and y.\0A\0A\00", align 16
@doc_ctx_next_toward = internal global [80 x i8] c"\0Anext_toward(x) - Return the number closest to x, in the direction towards y.\0A\0A\00", align 16
@doc_ctx_quantize = internal global [83 x i8] c"\0Aquantize(x, y) - Return a value equal to x (rounded), having the exponent of y.\0A\0A\00", align 16
@.str.181 = private unnamed_addr constant [10 x i8] c"remainder\00", align 1
@doc_ctx_remainder = internal global [148 x i8] c"\0Aremainder(x, y) - Return the remainder from integer division. The sign of\0Athe result, if non-zero, is the same as that of the original dividend.\0A\0A\00", align 16
@doc_ctx_remainder_near = internal global [158 x i8] c"\0Aremainder_near(x, y) - Return x - y * n, where n is the integer nearest the\0Aexact value of x / y (if the result is 0 then its sign will be the sign of x).\0A\0A\00", align 16
@.str.182 = private unnamed_addr constant [9 x i8] c"subtract\00", align 1
@doc_ctx_subtract = internal global [59 x i8] c"\0Asubtract(x, y) - Return the difference between x and y.\0A\0A\00", align 16
@.str.183 = private unnamed_addr constant [6 x i8] c"power\00", align 1
@doc_ctx_power = internal global [579 x i8] c"\0Apower(x, y) - Compute x**y. If x is negative, then y must be integral.\0AThe result will be inexact unless y is integral and the result is finite\0Aand can be expressed exactly in 'precision' digits. In the Python version\0Athe result is always correctly rounded, in the C version the result is\0Aalmost always correctly rounded.\0A\0Apower(x, y, m) - Compute (x**y) % m. The following restrictions hold:\0A\0A    * all three arguments must be integral\0A    * y must be nonnegative\0A    * at least one of x or y must be nonzero\0A    * m must be nonzero and less than 10**prec in absolute value\0A\0A\0A\00", align 16
@doc_ctx_fma = internal global [52 x i8] c"\0Afma(x, y, z) - Return x multiplied by y, plus z.\0A\0A\00", align 16
@.str.184 = private unnamed_addr constant [6 x i8] c"Etiny\00", align 1
@doc_ctx_Etiny = internal global [166 x i8] c"\0AEtiny() - Return a value equal to Emin - prec + 1, which is the minimum\0Aexponent value for subnormal results. When underflow occurs, the exponent\0Ais set to Etiny.\0A\0A\00", align 16
@.str.185 = private unnamed_addr constant [5 x i8] c"Etop\00", align 1
@doc_ctx_Etop = internal global [177 x i8] c"\0AEtop() - Return a value equal to Emax - prec + 1. This is the maximum exponent\0Aif the _clamp field of the context is set to 1 (IEEE clamp mode). Etop() must\0Anot be negative.\0A\0A\00", align 16
@doc_ctx_radix = internal global [24 x i8] c"\0Aradix() - Return 10.\0A\0A\00", align 16
@doc_ctx_is_canonical = internal global [69 x i8] c"\0Ais_canonical(x) - Return True if x is canonical, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_finite = internal global [63 x i8] c"\0Ais_finite(x) - Return True if x is finite, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_infinite = internal global [67 x i8] c"\0Ais_infinite(x) - Return True if x is infinite, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_nan = internal global [68 x i8] c"\0Ais_nan(x) - Return True if x is a qNaN or sNaN, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_normal = internal global [72 x i8] c"\0Ais_normal(x) - Return True if x is a normal number, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_qnan = internal global [66 x i8] c"\0Ais_qnan(x) - Return True if x is a quiet NaN, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_signed = internal global [65 x i8] c"\0Ais_signed(x) - Return True if x is negative, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_snan = internal global [69 x i8] c"\0Ais_snan() - Return True if x is a signaling NaN, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_subnormal = internal global [69 x i8] c"\0Ais_subnormal(x) - Return True if x is subnormal, False otherwise.\0A\0A\00", align 16
@doc_ctx_is_zero = internal global [61 x i8] c"\0Ais_zero(x) - Return True if x is a zero, False otherwise.\0A\0A\00", align 16
@.str.186 = private unnamed_addr constant [7 x i8] c"_apply\00", align 1
@doc_ctx_canonical = internal global [46 x i8] c"\0Acanonical(x) - Return a new instance of x.\0A\0A\00", align 16
@doc_ctx_copy_abs = internal global [60 x i8] c"\0Acopy_abs(x) - Return a copy of x with the sign set to 0.\0A\0A\00", align 16
@.str.187 = private unnamed_addr constant [13 x i8] c"copy_decimal\00", align 1
@doc_ctx_copy_decimal = internal global [49 x i8] c"\0Acopy_decimal(x) - Return a copy of Decimal x.\0A\0A\00", align 16
@doc_ctx_copy_negate = internal global [63 x i8] c"\0Acopy_negate(x) - Return a copy of x with the sign inverted.\0A\0A\00", align 16
@doc_ctx_logb = internal global [72 x i8] c"\0Alogb(x) - Return the exponent of the magnitude of the operand's MSD.\0A\0A\00", align 16
@doc_ctx_logical_invert = internal global [47 x i8] c"\0Alogical_invert(x) - Invert all digits of x.\0A\0A\00", align 16
@doc_ctx_number_class = internal global [61 x i8] c"\0Anumber_class(x) - Return an indication of the class of x.\0A\0A\00", align 16
@.str.188 = private unnamed_addr constant [14 x i8] c"to_sci_string\00", align 1
@doc_ctx_to_sci_string = internal global [78 x i8] c"\0Ato_sci_string(x) - Convert a number to a string using scientific notation.\0A\0A\00", align 16
@doc_ctx_to_eng_string = internal global [80 x i8] c"\0Ato_eng_string(x) - Convert a number to a string, using engineering notation.\0A\0A\00", align 16
@doc_ctx_compare_total = internal global [78 x i8] c"\0Acompare_total(x, y) - Compare x and y using their abstract representation.\0A\0A\00", align 16
@doc_ctx_compare_total_mag = internal global [97 x i8] c"\0Acompare_total_mag(x, y) - Compare x and y using their abstract representation,\0Aignoring sign.\0A\0A\00", align 16
@doc_ctx_copy_sign = internal global [48 x i8] c"\0Acopy_sign(x, y) - Copy the sign from y to x.\0A\0A\00", align 16
@doc_ctx_logical_and = internal global [50 x i8] c"\0Alogical_and(x, y) - Digit-wise and of x and y.\0A\0A\00", align 16
@doc_ctx_logical_or = internal global [48 x i8] c"\0Alogical_or(x, y) - Digit-wise or of x and y.\0A\0A\00", align 16
@doc_ctx_logical_xor = internal global [50 x i8] c"\0Alogical_xor(x, y) - Digit-wise xor of x and y.\0A\0A\00", align 16
@doc_ctx_rotate = internal global [59 x i8] c"\0Arotate(x, y) - Return a copy of x, rotated by y places.\0A\0A\00", align 16
@doc_ctx_same_quantum = internal global [80 x i8] c"\0Asame_quantum(x, y) - Return True if the two operands have the same exponent.\0A\0A\00", align 16
@doc_ctx_scaleb = internal global [85 x i8] c"\0Ascaleb(x, y) - Return the first operand after adding the second value\0Ato its exp.\0A\0A\00", align 16
@doc_ctx_shift = internal global [58 x i8] c"\0Ashift(x, y) - Return a copy of x, shifted by y places.\0A\0A\00", align 16
@.str.189 = private unnamed_addr constant [12 x i8] c"clear_flags\00", align 1
@doc_ctx_clear_flags = internal global [45 x i8] c"\0Aclear_flags() - Reset all flags to False.\0A\0A\00", align 16
@.str.190 = private unnamed_addr constant [12 x i8] c"clear_traps\00", align 1
@doc_ctx_clear_traps = internal global [43 x i8] c"\0Aclear_traps() - Set all traps to False.\0A\0A\00", align 16
@.str.191 = private unnamed_addr constant [5 x i8] c"copy\00", align 1
@doc_ctx_copy = internal global [70 x i8] c"\0Acopy() - Return a duplicate of the context with all flags cleared.\0A\0A\00", align 16
@.str.192 = private unnamed_addr constant [15 x i8] c"create_decimal\00", align 1
@doc_ctx_create_decimal = internal global [163 x i8] c"\0Acreate_decimal(x) - Create a new Decimal instance from x, using self as the\0Acontext. Unlike the Decimal constructor, this function observes the context\0Alimits.\0A\0A\00", align 16
@.str.193 = private unnamed_addr constant [26 x i8] c"create_decimal_from_float\00", align 1
@doc_ctx_create_decimal_from_float = internal global [167 x i8] c"\0Acreate_decimal_from_float(f) - Create a new Decimal instance from float f.\0AUnlike the Decimal.from_float() class method, this function observes the\0Acontext limits.\0A\0A\00", align 16
@.str.194 = private unnamed_addr constant [3 x i8] c"OO\00", align 1
@ctx_mpd_qpow.kwlist = internal global [4 x i8*] [i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.195, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.196, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.197, i32 0, i32 0), i8* null], align 16
@.str.195 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.196 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.197 = private unnamed_addr constant [7 x i8] c"modulo\00", align 1
@.str.198 = private unnamed_addr constant [4 x i8] c"OOO\00", align 1
@.str.199 = private unnamed_addr constant [27 x i8] c"argument must be a Decimal\00", align 1
@.str.200 = private unnamed_addr constant [12 x i8] c"O(nsnniiOO)\00", align 1
@.str.201 = private unnamed_addr constant [5 x i8] c"prec\00", align 1
@.str.202 = private unnamed_addr constant [5 x i8] c"Emax\00", align 1
@.str.203 = private unnamed_addr constant [5 x i8] c"Emin\00", align 1
@.str.204 = private unnamed_addr constant [9 x i8] c"capitals\00", align 1
@.str.205 = private unnamed_addr constant [6 x i8] c"clamp\00", align 1
@.str.206 = private unnamed_addr constant [38 x i8] c"valid range for prec is [1, MAX_PREC]\00", align 1
@.str.207 = private unnamed_addr constant [38 x i8] c"valid range for Emax is [0, MAX_EMAX]\00", align 1
@.str.208 = private unnamed_addr constant [38 x i8] c"valid range for Emin is [MIN_EMIN, 0]\00", align 1
@.str.209 = private unnamed_addr constant [35 x i8] c"internal error in context_setround\00", align 1
@.str.210 = private unnamed_addr constant [37 x i8] c"valid values for capitals are 0 or 1\00", align 1
@.str.211 = private unnamed_addr constant [34 x i8] c"valid values for clamp are 0 or 1\00", align 1
@context_init.kwlist = internal global [9 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.201, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.203, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.202, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.204, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.205, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.167, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.166, i32 0, i32 0), i8* null], align 16
@.str.212 = private unnamed_addr constant [10 x i8] c"|OOOOOOOO\00", align 1
@.str.213 = private unnamed_addr constant [40 x i8] c"internal error in context_settraps_list\00", align 1
@invalid_signals_err = internal global i8* getelementptr inbounds ([148 x i8], [148 x i8]* @.str.214, i32 0, i32 0), align 8
@.str.214 = private unnamed_addr constant [148 x i8] c"valid values for signals are:\0A  [InvalidOperation, FloatOperation, DivisionByZero,\0A   Overflow, Underflow, Subnormal, Inexact, Rounded,\0A   Clamped]\00", align 1
@.str.215 = private unnamed_addr constant [41 x i8] c"internal error in context_setstatus_list\00", align 1
@dflt_ctx = internal global %struct.mpd_context_t { i64 28, i64 999999, i64 -999999, i32 3006, i32 0, i32 0, i32 6, i32 0, i32 1 }, align 8
@.str.216 = private unnamed_addr constant [23 x i8] c"decimal.ContextManager\00", align 1
@ctxmanager_methods = internal global [3 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.217, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDecContextManagerObject*, %struct._object*)* @ctxmanager_set_local to %struct._object* (%struct._object*, %struct._object*)*), i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.218, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyDecContextManagerObject*, %struct._object*)* @ctxmanager_restore_global to %struct._object* (%struct._object*, %struct._object*)*), i32 1, i8* null }, %struct.PyMethodDef zeroinitializer], align 16
@.str.217 = private unnamed_addr constant [10 x i8] c"__enter__\00", align 1
@.str.218 = private unnamed_addr constant [9 x i8] c"__exit__\00", align 1
@.str.219 = private unnamed_addr constant [24 x i8] c"decimal.SignalDictMixin\00", align 1
@signaldict_as_mapping = internal global %struct.PyMappingMethods { i64 (%struct._object*)* @signaldict_len, %struct._object* (%struct._object*, %struct._object*)* @signaldict_getitem, i32 (%struct._object*, %struct._object*, %struct._object*)* @signaldict_setitem }, align 8
@signaldict_methods = internal global [2 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.191, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @signaldict_copy, i32 4, i8* null }, %struct.PyMethodDef zeroinitializer], align 16
@.str.220 = private unnamed_addr constant [5 x i8] c"True\00", align 1
@.str.221 = private unnamed_addr constant [6 x i8] c"False\00", align 1
@.str.222 = private unnamed_addr constant [154 x i8] c"{<class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s, <class '%s'>:%s}\00", align 1
@.str.223 = private unnamed_addr constant [30 x i8] c"signal keys cannot be deleted\00", align 1
@PyTuple_Type = external global %struct._typeobject, align 8
@doc__decimal = internal global [28 x i8] c"C decimal arithmetic module\00", align 16
@_decimal_methods = internal global [4 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.224, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyDec_GetCurrentContext, i32 4, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @doc_getcontext, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.225, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyDec_SetCurrentContext, i32 8, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @doc_setcontext, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.226, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @ctxmanager_new to %struct._object* (%struct._object*, %struct._object*)*), i32 3, i8* getelementptr inbounds ([284 x i8], [284 x i8]* @doc_localcontext, i32 0, i32 0) }, %struct.PyMethodDef { i8* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 1, i8* null }], align 16
@.str.224 = private unnamed_addr constant [11 x i8] c"getcontext\00", align 1
@doc_getcontext = internal global [51 x i8] c"\0Agetcontext() - Get the current default context.\0A\0A\00", align 16
@.str.225 = private unnamed_addr constant [11 x i8] c"setcontext\00", align 1
@doc_setcontext = internal global [46 x i8] c"\0Asetcontext(c) - Set a new default context.\0A\0A\00", align 16
@.str.226 = private unnamed_addr constant [13 x i8] c"localcontext\00", align 1
@doc_localcontext = internal global [284 x i8] c"\0Alocalcontext(ctx=None) - Return a context manager that will set the default\0Acontext to a copy of ctx on entry to the with-statement and restore the\0Aprevious default context when exiting the with-statement. If no context is\0Aspecified, a copy of the current default context is used.\0A\0A\00", align 16
@ctxmanager_new.kwlist = internal global [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.227, i32 0, i32 0), i8* null], align 16
@.str.227 = private unnamed_addr constant [4 x i8] c"ctx\00", align 1
@.str.228 = private unnamed_addr constant [25 x i8] c"decimal.InvalidOperation\00", align 1
@.str.229 = private unnamed_addr constant [23 x i8] c"decimal.FloatOperation\00", align 1
@.str.230 = private unnamed_addr constant [23 x i8] c"decimal.DivisionByZero\00", align 1
@.str.231 = private unnamed_addr constant [17 x i8] c"decimal.Overflow\00", align 1
@.str.232 = private unnamed_addr constant [18 x i8] c"decimal.Underflow\00", align 1
@.str.233 = private unnamed_addr constant [18 x i8] c"decimal.Subnormal\00", align 1
@.str.234 = private unnamed_addr constant [16 x i8] c"decimal.Inexact\00", align 1
@.str.235 = private unnamed_addr constant [16 x i8] c"decimal.Rounded\00", align 1
@.str.236 = private unnamed_addr constant [16 x i8] c"decimal.Clamped\00", align 1
@.str.237 = private unnamed_addr constant [17 x i8] c"ConversionSyntax\00", align 1
@.str.238 = private unnamed_addr constant [25 x i8] c"decimal.ConversionSyntax\00", align 1
@.str.239 = private unnamed_addr constant [19 x i8] c"DivisionImpossible\00", align 1
@.str.240 = private unnamed_addr constant [27 x i8] c"decimal.DivisionImpossible\00", align 1
@.str.241 = private unnamed_addr constant [18 x i8] c"DivisionUndefined\00", align 1
@.str.242 = private unnamed_addr constant [26 x i8] c"decimal.DivisionUndefined\00", align 1
@.str.243 = private unnamed_addr constant [15 x i8] c"InvalidContext\00", align 1
@.str.244 = private unnamed_addr constant [23 x i8] c"decimal.InvalidContext\00", align 1
@.str.245 = private unnamed_addr constant [9 x i8] c"MAX_PREC\00", align 1
@.str.246 = private unnamed_addr constant [9 x i8] c"MAX_EMAX\00", align 1
@.str.247 = private unnamed_addr constant [9 x i8] c"MIN_EMIN\00", align 1
@.str.248 = private unnamed_addr constant [10 x i8] c"MIN_ETINY\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @PyInit__decimal() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m = alloca %struct._object*, align 8
  %numbers = alloca %struct._object*, align 8
  %Number = alloca %struct._object*, align 8
  %collections = alloca %struct._object*, align 8
  %MutableMapping = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %cm = alloca %struct.DecCondMap*, align 8
  %ssize_cm = alloca %struct.ssize_constmap*, align 8
  %int_cm = alloca %struct.int_constmap*, align 8
  %i = alloca i32, align 4
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp66 = alloca %struct._object*, align 8
  %_py_decref_tmp70 = alloca %struct._object*, align 8
  %_py_tmp89 = alloca %struct._object*, align 8
  %_py_decref_tmp93 = alloca %struct._object*, align 8
  %_py_tmp106 = alloca %struct._object*, align 8
  %_py_decref_tmp110 = alloca %struct._object*, align 8
  %_py_tmp147 = alloca %struct._object*, align 8
  %_py_decref_tmp151 = alloca %struct._object*, align 8
  %_py_tmp176 = alloca %struct._object*, align 8
  %_py_decref_tmp180 = alloca %struct._object*, align 8
  %_py_tmp193 = alloca %struct._object*, align 8
  %_py_decref_tmp197 = alloca %struct._object*, align 8
  %base = alloca %struct._object*, align 8
  %_py_decref_tmp276 = alloca %struct._object*, align 8
  %base305 = alloca %struct._object*, align 8
  %_py_decref_tmp326 = alloca %struct._object*, align 8
  %_py_tmp491 = alloca %struct._object*, align 8
  %_py_decref_tmp496 = alloca %struct._object*, align 8
  %_py_tmp510 = alloca %struct._object*, align 8
  %_py_decref_tmp515 = alloca %struct._object*, align 8
  %_py_tmp529 = alloca %struct._object*, align 8
  %_py_decref_tmp534 = alloca %struct._object*, align 8
  %_py_tmp548 = alloca %struct._object*, align 8
  %_py_decref_tmp553 = alloca %struct._object*, align 8
  %_py_tmp567 = alloca %struct._object*, align 8
  %_py_decref_tmp572 = alloca %struct._object*, align 8
  %_py_tmp586 = alloca %struct._object*, align 8
  %_py_decref_tmp591 = alloca %struct._object*, align 8
  %_py_tmp605 = alloca %struct._object*, align 8
  %_py_decref_tmp610 = alloca %struct._object*, align 8
  %_py_tmp624 = alloca %struct._object*, align 8
  %_py_decref_tmp629 = alloca %struct._object*, align 8
  %_py_tmp643 = alloca %struct._object*, align 8
  %_py_decref_tmp648 = alloca %struct._object*, align 8
  %_py_tmp662 = alloca %struct._object*, align 8
  %_py_decref_tmp667 = alloca %struct._object*, align 8
  %_py_tmp681 = alloca %struct._object*, align 8
  %_py_decref_tmp686 = alloca %struct._object*, align 8
  %_py_tmp700 = alloca %struct._object*, align 8
  %_py_decref_tmp705 = alloca %struct._object*, align 8
  %_py_tmp719 = alloca %struct._object*, align 8
  %_py_decref_tmp724 = alloca %struct._object*, align 8
  store %struct._object* null, %struct._object** %m, align 8
  store %struct._object* null, %struct._object** %numbers, align 8
  store %struct._object* null, %struct._object** %Number, align 8
  store %struct._object* null, %struct._object** %collections, align 8
  store %struct._object* null, %struct._object** %MutableMapping, align 8
  store %struct._object* null, %struct._object** %obj, align 8
  store void (%struct.mpd_context_t*)* @dec_traphandler, void (%struct.mpd_context_t*)** @mpd_traphandler, align 8
  store i8* (i64)* @PyMem_Malloc, i8* (i64)** @mpd_mallocfunc, align 8
  store i8* (i8*, i64)* @PyMem_Realloc, i8* (i8*, i64)** @mpd_reallocfunc, align 8
  store i8* (i64, i64)* @mpd_callocfunc_em, i8* (i64, i64)** @mpd_callocfunc, align 8
  store void (i8*)* @PyMem_Free, void (i8*)** @mpd_free, align 8
  call void @mpd_setminalloc(i64 4)
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDec_Type, i32 0, i32 30), align 8
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 30), align 8
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContextManager_Type, i32 0, i32 30), align 8
  store %struct._typeobject* @PyBaseObject_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecSignalDictMixin_Type, i32 0, i32 30), align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %call = call i32 @PyType_Ready(%struct._typeobject* @PyDec_Type)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  br label %error

if.end:                                           ; preds = %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  %call2 = call i32 @PyType_Ready(%struct._typeobject* @PyDecContext_Type)
  %cmp3 = icmp slt i32 %call2, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %do.body.1
  br label %error

if.end.5:                                         ; preds = %do.body.1
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %do.body.7

do.body.7:                                        ; preds = %do.end.6
  %call8 = call i32 @PyType_Ready(%struct._typeobject* @PyDecSignalDictMixin_Type)
  %cmp9 = icmp slt i32 %call8, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.body.7
  br label %error

if.end.11:                                        ; preds = %do.body.7
  br label %do.end.12

do.end.12:                                        ; preds = %if.end.11
  br label %do.body.13

do.body.13:                                       ; preds = %do.end.12
  %call14 = call i32 @PyType_Ready(%struct._typeobject* @PyDecContextManager_Type)
  %cmp15 = icmp slt i32 %call14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %do.body.13
  br label %error

if.end.17:                                        ; preds = %do.body.13
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  br label %do.body.19

do.body.19:                                       ; preds = %do.end.18
  %call20 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0))
  store %struct._object* %call20, %struct._object** %obj, align 8
  %0 = load %struct._object*, %struct._object** %obj, align 8
  %cmp21 = icmp eq %struct._object* %0, null
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %do.body.19
  br label %error

if.end.23:                                        ; preds = %do.body.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %1 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDec_Type, i32 0, i32 31), align 8
  %2 = load %struct._object*, %struct._object** %obj, align 8
  %call26 = call i32 @PyDict_SetItemString(%struct._object* %1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), %struct._object* %2)
  %cmp27 = icmp slt i32 %call26, 0
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %do.body.25
  br label %error

if.end.29:                                        ; preds = %do.body.25
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  br label %do.body.31

do.body.31:                                       ; preds = %do.end.30
  %3 = load %struct._object*, %struct._object** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 31), align 8
  %4 = load %struct._object*, %struct._object** %obj, align 8
  %call32 = call i32 @PyDict_SetItemString(%struct._object* %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), %struct._object* %4)
  %cmp33 = icmp slt i32 %call32, 0
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %do.body.31
  br label %error

if.end.35:                                        ; preds = %do.body.31
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  br label %do.body.37

do.body.37:                                       ; preds = %do.end.36
  %5 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %5, %struct._object** %_py_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp38 = icmp ne %struct._object* %6, null
  br i1 %cmp38, label %if.then.39, label %if.end.45

if.then.39:                                       ; preds = %do.body.37
  store %struct._object* null, %struct._object** %obj, align 8
  br label %do.body.40

do.body.40:                                       ; preds = %if.then.39
  %7 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp41 = icmp ne i64 %dec, 0
  br i1 %cmp41, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %do.body.40
  br label %if.end.43

if.else:                                          ; preds = %do.body.40
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else, %if.then.42
  br label %do.end.44

do.end.44:                                        ; preds = %if.end.43
  br label %if.end.45

if.end.45:                                        ; preds = %do.end.44, %do.body.37
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  br label %do.body.47

do.body.47:                                       ; preds = %do.end.46
  %call48 = call %struct._object* @PyImport_ImportModule(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0))
  store %struct._object* %call48, %struct._object** %numbers, align 8
  %14 = load %struct._object*, %struct._object** %numbers, align 8
  %cmp49 = icmp eq %struct._object* %14, null
  br i1 %cmp49, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %do.body.47
  br label %error

if.end.51:                                        ; preds = %do.body.47
  br label %do.end.52

do.end.52:                                        ; preds = %if.end.51
  br label %do.body.53

do.body.53:                                       ; preds = %do.end.52
  %15 = load %struct._object*, %struct._object** %numbers, align 8
  %call54 = call %struct._object* @PyObject_GetAttrString(%struct._object* %15, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i32 0, i32 0))
  store %struct._object* %call54, %struct._object** %Number, align 8
  %16 = load %struct._object*, %struct._object** %Number, align 8
  %cmp55 = icmp eq %struct._object* %16, null
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %do.body.53
  br label %error

if.end.57:                                        ; preds = %do.body.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %do.body.59

do.body.59:                                       ; preds = %do.end.58
  %17 = load %struct._object*, %struct._object** %Number, align 8
  %call60 = call %struct._object* (%struct._object*, i8*, i8*, ...) @PyObject_CallMethod(%struct._object* %17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDec_Type, i32 0, i32 0, i32 0))
  store %struct._object* %call60, %struct._object** %obj, align 8
  %18 = load %struct._object*, %struct._object** %obj, align 8
  %cmp61 = icmp eq %struct._object* %18, null
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %do.body.59
  br label %error

if.end.63:                                        ; preds = %do.body.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  br label %do.body.65

do.body.65:                                       ; preds = %do.end.64
  %19 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %19, %struct._object** %_py_tmp66, align 8
  %20 = load %struct._object*, %struct._object** %_py_tmp66, align 8
  %cmp67 = icmp ne %struct._object* %20, null
  br i1 %cmp67, label %if.then.68, label %if.end.80

if.then.68:                                       ; preds = %do.body.65
  store %struct._object* null, %struct._object** %obj, align 8
  br label %do.body.69

do.body.69:                                       ; preds = %if.then.68
  %21 = load %struct._object*, %struct._object** %_py_tmp66, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp70, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_refcnt71 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt71, align 8
  %dec72 = add i64 %23, -1
  store i64 %dec72, i64* %ob_refcnt71, align 8
  %cmp73 = icmp ne i64 %dec72, 0
  br i1 %cmp73, label %if.then.74, label %if.else.75

if.then.74:                                       ; preds = %do.body.69
  br label %if.end.78

if.else.75:                                       ; preds = %do.body.69
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  %ob_type76 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type76, align 8
  %tp_dealloc77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc77, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp70, align 8
  call void %26(%struct._object* %27)
  br label %if.end.78

if.end.78:                                        ; preds = %if.else.75, %if.then.74
  br label %do.end.79

do.end.79:                                        ; preds = %if.end.78
  br label %if.end.80

if.end.80:                                        ; preds = %do.end.79, %do.body.65
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  br label %do.body.82

do.body.82:                                       ; preds = %do.end.81
  %28 = load %struct._object*, %struct._object** %numbers, align 8
  %call83 = call %struct._object* @PyObject_GetAttrString(%struct._object* %28, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i32 0, i32 0))
  store %struct._object* %call83, %struct._object** @Rational, align 8
  %29 = load %struct._object*, %struct._object** @Rational, align 8
  %cmp84 = icmp eq %struct._object* %29, null
  br i1 %cmp84, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %do.body.82
  br label %error

if.end.86:                                        ; preds = %do.body.82
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  br label %do.body.88

do.body.88:                                       ; preds = %do.end.87
  %30 = load %struct._object*, %struct._object** %numbers, align 8
  store %struct._object* %30, %struct._object** %_py_tmp89, align 8
  %31 = load %struct._object*, %struct._object** %_py_tmp89, align 8
  %cmp90 = icmp ne %struct._object* %31, null
  br i1 %cmp90, label %if.then.91, label %if.end.103

if.then.91:                                       ; preds = %do.body.88
  store %struct._object* null, %struct._object** %numbers, align 8
  br label %do.body.92

do.body.92:                                       ; preds = %if.then.91
  %32 = load %struct._object*, %struct._object** %_py_tmp89, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp93, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  %ob_refcnt94 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt94, align 8
  %dec95 = add i64 %34, -1
  store i64 %dec95, i64* %ob_refcnt94, align 8
  %cmp96 = icmp ne i64 %dec95, 0
  br i1 %cmp96, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %do.body.92
  br label %if.end.101

if.else.98:                                       ; preds = %do.body.92
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  %ob_type99 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type99, align 8
  %tp_dealloc100 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc100, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  call void %37(%struct._object* %38)
  br label %if.end.101

if.end.101:                                       ; preds = %if.else.98, %if.then.97
  br label %do.end.102

do.end.102:                                       ; preds = %if.end.101
  br label %if.end.103

if.end.103:                                       ; preds = %do.end.102, %do.body.88
  br label %do.end.104

do.end.104:                                       ; preds = %if.end.103
  br label %do.body.105

do.body.105:                                      ; preds = %do.end.104
  %39 = load %struct._object*, %struct._object** %Number, align 8
  store %struct._object* %39, %struct._object** %_py_tmp106, align 8
  %40 = load %struct._object*, %struct._object** %_py_tmp106, align 8
  %cmp107 = icmp ne %struct._object* %40, null
  br i1 %cmp107, label %if.then.108, label %if.end.120

if.then.108:                                      ; preds = %do.body.105
  store %struct._object* null, %struct._object** %Number, align 8
  br label %do.body.109

do.body.109:                                      ; preds = %if.then.108
  %41 = load %struct._object*, %struct._object** %_py_tmp106, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp110, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  %ob_refcnt111 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt111, align 8
  %dec112 = add i64 %43, -1
  store i64 %dec112, i64* %ob_refcnt111, align 8
  %cmp113 = icmp ne i64 %dec112, 0
  br i1 %cmp113, label %if.then.114, label %if.else.115

if.then.114:                                      ; preds = %do.body.109
  br label %if.end.118

if.else.115:                                      ; preds = %do.body.109
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  %ob_type116 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type116, align 8
  %tp_dealloc117 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc117, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  call void %46(%struct._object* %47)
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.115, %if.then.114
  br label %do.end.119

do.end.119:                                       ; preds = %if.end.118
  br label %if.end.120

if.end.120:                                       ; preds = %do.end.119, %do.body.105
  br label %do.end.121

do.end.121:                                       ; preds = %if.end.120
  br label %do.body.122

do.body.122:                                      ; preds = %do.end.121
  %call123 = call %struct._object* @PyImport_ImportModule(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i32 0, i32 0))
  store %struct._object* %call123, %struct._object** %collections, align 8
  %48 = load %struct._object*, %struct._object** %collections, align 8
  %cmp124 = icmp eq %struct._object* %48, null
  br i1 %cmp124, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %do.body.122
  br label %error

if.end.126:                                       ; preds = %do.body.122
  br label %do.end.127

do.end.127:                                       ; preds = %if.end.126
  br label %do.body.128

do.body.128:                                      ; preds = %do.end.127
  %49 = load %struct._object*, %struct._object** %collections, align 8
  %call129 = call %struct._object* (%struct._object*, i8*, i8*, ...) @PyObject_CallMethod(%struct._object* %49, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i32 0, i32 0))
  %50 = bitcast %struct._object* %call129 to %struct._typeobject*
  store %struct._typeobject* %50, %struct._typeobject** @DecimalTuple, align 8
  %51 = load %struct._typeobject*, %struct._typeobject** @DecimalTuple, align 8
  %cmp130 = icmp eq %struct._typeobject* %51, null
  br i1 %cmp130, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %do.body.128
  br label %error

if.end.132:                                       ; preds = %do.body.128
  br label %do.end.133

do.end.133:                                       ; preds = %if.end.132
  br label %do.body.134

do.body.134:                                      ; preds = %do.end.133
  %call135 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i32 0, i32 0))
  store %struct._object* %call135, %struct._object** %obj, align 8
  %52 = load %struct._object*, %struct._object** %obj, align 8
  %cmp136 = icmp eq %struct._object* %52, null
  br i1 %cmp136, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %do.body.134
  br label %error

if.end.138:                                       ; preds = %do.body.134
  br label %do.end.139

do.end.139:                                       ; preds = %if.end.138
  br label %do.body.140

do.body.140:                                      ; preds = %do.end.139
  %53 = load %struct._typeobject*, %struct._typeobject** @DecimalTuple, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 31
  %54 = load %struct._object*, %struct._object** %tp_dict, align 8
  %55 = load %struct._object*, %struct._object** %obj, align 8
  %call141 = call i32 @PyDict_SetItemString(%struct._object* %54, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i32 0, i32 0), %struct._object* %55)
  %cmp142 = icmp slt i32 %call141, 0
  br i1 %cmp142, label %if.then.143, label %if.end.144

if.then.143:                                      ; preds = %do.body.140
  br label %error

if.end.144:                                       ; preds = %do.body.140
  br label %do.end.145

do.end.145:                                       ; preds = %if.end.144
  br label %do.body.146

do.body.146:                                      ; preds = %do.end.145
  %56 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %56, %struct._object** %_py_tmp147, align 8
  %57 = load %struct._object*, %struct._object** %_py_tmp147, align 8
  %cmp148 = icmp ne %struct._object* %57, null
  br i1 %cmp148, label %if.then.149, label %if.end.161

if.then.149:                                      ; preds = %do.body.146
  store %struct._object* null, %struct._object** %obj, align 8
  br label %do.body.150

do.body.150:                                      ; preds = %if.then.149
  %58 = load %struct._object*, %struct._object** %_py_tmp147, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp151, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp151, align 8
  %ob_refcnt152 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt152, align 8
  %dec153 = add i64 %60, -1
  store i64 %dec153, i64* %ob_refcnt152, align 8
  %cmp154 = icmp ne i64 %dec153, 0
  br i1 %cmp154, label %if.then.155, label %if.else.156

if.then.155:                                      ; preds = %do.body.150
  br label %if.end.159

if.else.156:                                      ; preds = %do.body.150
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp151, align 8
  %ob_type157 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type157, align 8
  %tp_dealloc158 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc158, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp151, align 8
  call void %63(%struct._object* %64)
  br label %if.end.159

if.end.159:                                       ; preds = %if.else.156, %if.then.155
  br label %do.end.160

do.end.160:                                       ; preds = %if.end.159
  br label %if.end.161

if.end.161:                                       ; preds = %do.end.160, %do.body.146
  br label %do.end.162

do.end.162:                                       ; preds = %if.end.161
  br label %do.body.163

do.body.163:                                      ; preds = %do.end.162
  %65 = load %struct._object*, %struct._object** %collections, align 8
  %call164 = call %struct._object* @PyObject_GetAttrString(%struct._object* %65, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i32 0, i32 0))
  store %struct._object* %call164, %struct._object** %MutableMapping, align 8
  %66 = load %struct._object*, %struct._object** %MutableMapping, align 8
  %cmp165 = icmp eq %struct._object* %66, null
  br i1 %cmp165, label %if.then.166, label %if.end.167

if.then.166:                                      ; preds = %do.body.163
  br label %error

if.end.167:                                       ; preds = %do.body.163
  br label %do.end.168

do.end.168:                                       ; preds = %if.end.167
  br label %do.body.169

do.body.169:                                      ; preds = %do.end.168
  %67 = load %struct._object*, %struct._object** %MutableMapping, align 8
  %call170 = call %struct._object* (%struct._object*, i8*, ...) @PyObject_CallFunction(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i32 0, i32 0), %struct._typeobject* @PyDecSignalDictMixin_Type, %struct._object* %67)
  %68 = bitcast %struct._object* %call170 to %struct._typeobject*
  store %struct._typeobject* %68, %struct._typeobject** @PyDecSignalDict_Type, align 8
  %69 = load %struct._typeobject*, %struct._typeobject** @PyDecSignalDict_Type, align 8
  %cmp171 = icmp eq %struct._typeobject* %69, null
  br i1 %cmp171, label %if.then.172, label %if.end.173

if.then.172:                                      ; preds = %do.body.169
  br label %error

if.end.173:                                       ; preds = %do.body.169
  br label %do.end.174

do.end.174:                                       ; preds = %if.end.173
  br label %do.body.175

do.body.175:                                      ; preds = %do.end.174
  %70 = load %struct._object*, %struct._object** %collections, align 8
  store %struct._object* %70, %struct._object** %_py_tmp176, align 8
  %71 = load %struct._object*, %struct._object** %_py_tmp176, align 8
  %cmp177 = icmp ne %struct._object* %71, null
  br i1 %cmp177, label %if.then.178, label %if.end.190

if.then.178:                                      ; preds = %do.body.175
  store %struct._object* null, %struct._object** %collections, align 8
  br label %do.body.179

do.body.179:                                      ; preds = %if.then.178
  %72 = load %struct._object*, %struct._object** %_py_tmp176, align 8
  store %struct._object* %72, %struct._object** %_py_decref_tmp180, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  %ob_refcnt181 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt181, align 8
  %dec182 = add i64 %74, -1
  store i64 %dec182, i64* %ob_refcnt181, align 8
  %cmp183 = icmp ne i64 %dec182, 0
  br i1 %cmp183, label %if.then.184, label %if.else.185

if.then.184:                                      ; preds = %do.body.179
  br label %if.end.188

if.else.185:                                      ; preds = %do.body.179
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  %ob_type186 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type186, align 8
  %tp_dealloc187 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 4
  %77 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc187, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp180, align 8
  call void %77(%struct._object* %78)
  br label %if.end.188

if.end.188:                                       ; preds = %if.else.185, %if.then.184
  br label %do.end.189

do.end.189:                                       ; preds = %if.end.188
  br label %if.end.190

if.end.190:                                       ; preds = %do.end.189, %do.body.175
  br label %do.end.191

do.end.191:                                       ; preds = %if.end.190
  br label %do.body.192

do.body.192:                                      ; preds = %do.end.191
  %79 = load %struct._object*, %struct._object** %MutableMapping, align 8
  store %struct._object* %79, %struct._object** %_py_tmp193, align 8
  %80 = load %struct._object*, %struct._object** %_py_tmp193, align 8
  %cmp194 = icmp ne %struct._object* %80, null
  br i1 %cmp194, label %if.then.195, label %if.end.207

if.then.195:                                      ; preds = %do.body.192
  store %struct._object* null, %struct._object** %MutableMapping, align 8
  br label %do.body.196

do.body.196:                                      ; preds = %if.then.195
  %81 = load %struct._object*, %struct._object** %_py_tmp193, align 8
  store %struct._object* %81, %struct._object** %_py_decref_tmp197, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp197, align 8
  %ob_refcnt198 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt198, align 8
  %dec199 = add i64 %83, -1
  store i64 %dec199, i64* %ob_refcnt198, align 8
  %cmp200 = icmp ne i64 %dec199, 0
  br i1 %cmp200, label %if.then.201, label %if.else.202

if.then.201:                                      ; preds = %do.body.196
  br label %if.end.205

if.else.202:                                      ; preds = %do.body.196
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp197, align 8
  %ob_type203 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type203, align 8
  %tp_dealloc204 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 4
  %86 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc204, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp197, align 8
  call void %86(%struct._object* %87)
  br label %if.end.205

if.end.205:                                       ; preds = %if.else.202, %if.then.201
  br label %do.end.206

do.end.206:                                       ; preds = %if.end.205
  br label %if.end.207

if.end.207:                                       ; preds = %do.end.206, %do.body.192
  br label %do.end.208

do.end.208:                                       ; preds = %if.end.207
  br label %do.body.209

do.body.209:                                      ; preds = %do.end.208
  %call210 = call %struct._object* @PyModule_Create2(%struct.PyModuleDef* @_decimal_module, i32 1013)
  store %struct._object* %call210, %struct._object** %m, align 8
  %88 = load %struct._object*, %struct._object** %m, align 8
  %cmp211 = icmp eq %struct._object* %88, null
  br i1 %cmp211, label %if.then.212, label %if.end.213

if.then.212:                                      ; preds = %do.body.209
  br label %error

if.end.213:                                       ; preds = %do.body.209
  br label %do.end.214

do.end.214:                                       ; preds = %if.end.213
  %89 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDec_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %89, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDec_Type, i32 0, i32 0, i32 0, i32 0), align 8
  br label %do.body.215

do.body.215:                                      ; preds = %do.end.214
  %90 = load %struct._object*, %struct._object** %m, align 8
  %call216 = call i32 @PyModule_AddObject(%struct._object* %90, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDec_Type, i32 0, i32 0, i32 0))
  %cmp217 = icmp slt i32 %call216, 0
  br i1 %cmp217, label %if.then.218, label %if.end.219

if.then.218:                                      ; preds = %do.body.215
  br label %error

if.end.219:                                       ; preds = %do.body.215
  br label %do.end.220

do.end.220:                                       ; preds = %if.end.219
  %91 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc221 = add i64 %91, 1
  store i64 %inc221, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 0, i32 0, i32 0), align 8
  br label %do.body.222

do.body.222:                                      ; preds = %do.end.220
  %92 = load %struct._object*, %struct._object** %m, align 8
  %call223 = call i32 @PyModule_AddObject(%struct._object* %92, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 0, i32 0))
  %cmp224 = icmp slt i32 %call223, 0
  br i1 %cmp224, label %if.then.225, label %if.end.226

if.then.225:                                      ; preds = %do.body.222
  br label %error

if.end.226:                                       ; preds = %do.body.222
  br label %do.end.227

do.end.227:                                       ; preds = %if.end.226
  %93 = load %struct._typeobject*, %struct._typeobject** @DecimalTuple, align 8
  %94 = bitcast %struct._typeobject* %93 to %struct._object*
  %ob_refcnt228 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 0
  %95 = load i64, i64* %ob_refcnt228, align 8
  %inc229 = add i64 %95, 1
  store i64 %inc229, i64* %ob_refcnt228, align 8
  br label %do.body.230

do.body.230:                                      ; preds = %do.end.227
  %96 = load %struct._object*, %struct._object** %m, align 8
  %97 = load %struct._typeobject*, %struct._typeobject** @DecimalTuple, align 8
  %98 = bitcast %struct._typeobject* %97 to %struct._object*
  %call231 = call i32 @PyModule_AddObject(%struct._object* %96, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i32 0, i32 0), %struct._object* %98)
  %cmp232 = icmp slt i32 %call231, 0
  br i1 %cmp232, label %if.then.233, label %if.end.234

if.then.233:                                      ; preds = %do.body.230
  br label %error

if.end.234:                                       ; preds = %do.body.230
  br label %do.end.235

do.end.235:                                       ; preds = %if.end.234
  br label %do.body.236

do.body.236:                                      ; preds = %do.end.235
  %99 = load %struct._object*, %struct._object** @PyExc_ArithmeticError, align 8
  %call237 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i32 0, i32 0), %struct._object* %99, %struct._object* null)
  store %struct._object* %call237, %struct._object** @DecimalException, align 8
  %100 = load %struct._object*, %struct._object** @DecimalException, align 8
  %cmp238 = icmp eq %struct._object* %100, null
  br i1 %cmp238, label %if.then.239, label %if.end.240

if.then.239:                                      ; preds = %do.body.236
  br label %error

if.end.240:                                       ; preds = %do.body.236
  br label %do.end.241

do.end.241:                                       ; preds = %if.end.240
  %101 = load %struct._object*, %struct._object** @DecimalException, align 8
  %ob_refcnt242 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 0
  %102 = load i64, i64* %ob_refcnt242, align 8
  %inc243 = add i64 %102, 1
  store i64 %inc243, i64* %ob_refcnt242, align 8
  br label %do.body.244

do.body.244:                                      ; preds = %do.end.241
  %103 = load %struct._object*, %struct._object** %m, align 8
  %104 = load %struct._object*, %struct._object** @DecimalException, align 8
  %call245 = call i32 @PyModule_AddObject(%struct._object* %103, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0), %struct._object* %104)
  %cmp246 = icmp slt i32 %call245, 0
  br i1 %cmp246, label %if.then.247, label %if.end.248

if.then.247:                                      ; preds = %do.body.244
  br label %error

if.end.248:                                       ; preds = %do.body.244
  br label %do.end.249

do.end.249:                                       ; preds = %if.end.248
  br label %do.body.250

do.body.250:                                      ; preds = %do.end.249
  %call251 = call %struct._object* @PyTuple_New(i64 9)
  store %struct._object* %call251, %struct._object** @SignalTuple, align 8
  %105 = load %struct._object*, %struct._object** @SignalTuple, align 8
  %cmp252 = icmp eq %struct._object* %105, null
  br i1 %cmp252, label %if.then.253, label %if.end.254

if.then.253:                                      ; preds = %do.body.250
  br label %error

if.end.254:                                       ; preds = %do.body.250
  br label %do.end.255

do.end.255:                                       ; preds = %if.end.254
  store i32 8, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end.255
  %106 = load i32, i32* %i, align 4
  %cmp256 = icmp sge i32 %106, 0
  br i1 %cmp256, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %107 = load i32, i32* %i, align 4
  %idx.ext = sext i32 %107 to i64
  %add.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i32 0), i64 %idx.ext
  store %struct.DecCondMap* %add.ptr, %struct.DecCondMap** %cm, align 8
  %108 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %108, i32 0, i32 2
  %109 = load i32, i32* %flag, align 4
  switch i32 %109, label %sw.default [
    i32 1024, label %sw.bb
    i32 4, label %sw.bb.258
    i32 2048, label %sw.bb.260
    i32 16384, label %sw.bb.262
  ]

sw.bb:                                            ; preds = %for.body
  %110 = load %struct._object*, %struct._object** @DecimalException, align 8
  %111 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %call257 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %110, %struct._object* %111)
  store %struct._object* %call257, %struct._object** %base, align 8
  br label %sw.epilog

sw.bb.258:                                        ; preds = %for.body
  %112 = load %struct._object*, %struct._object** @DecimalException, align 8
  %113 = load %struct._object*, %struct._object** @PyExc_ZeroDivisionError, align 8
  %call259 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %112, %struct._object* %113)
  store %struct._object* %call259, %struct._object** %base, align 8
  br label %sw.epilog

sw.bb.260:                                        ; preds = %for.body
  %114 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 6, i32 3), align 8
  %115 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 7, i32 3), align 8
  %call261 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %114, %struct._object* %115)
  store %struct._object* %call261, %struct._object** %base, align 8
  br label %sw.epilog

sw.bb.262:                                        ; preds = %for.body
  %116 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 6, i32 3), align 8
  %117 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 7, i32 3), align 8
  %118 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 5, i32 3), align 8
  %call263 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 3, %struct._object* %116, %struct._object* %117, %struct._object* %118)
  store %struct._object* %call263, %struct._object** %base, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %119 = load %struct._object*, %struct._object** @DecimalException, align 8
  %call264 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %119)
  store %struct._object* %call264, %struct._object** %base, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.262, %sw.bb.260, %sw.bb.258, %sw.bb
  %120 = load %struct._object*, %struct._object** %base, align 8
  %cmp265 = icmp eq %struct._object* %120, null
  br i1 %cmp265, label %if.then.266, label %if.end.267

if.then.266:                                      ; preds = %sw.epilog
  br label %error

if.end.267:                                       ; preds = %sw.epilog
  br label %do.body.268

do.body.268:                                      ; preds = %if.end.267
  %121 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %fqname = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %121, i32 0, i32 1
  %122 = load i8*, i8** %fqname, align 8
  %123 = load %struct._object*, %struct._object** %base, align 8
  %call269 = call %struct._object* @PyErr_NewException(i8* %122, %struct._object* %123, %struct._object* null)
  %124 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %124, i32 0, i32 3
  store %struct._object* %call269, %struct._object** %ex, align 8
  %125 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex270 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %125, i32 0, i32 3
  %126 = load %struct._object*, %struct._object** %ex270, align 8
  %cmp271 = icmp eq %struct._object* %126, null
  br i1 %cmp271, label %if.then.272, label %if.end.273

if.then.272:                                      ; preds = %do.body.268
  br label %error

if.end.273:                                       ; preds = %do.body.268
  br label %do.end.274

do.end.274:                                       ; preds = %if.end.273
  br label %do.body.275

do.body.275:                                      ; preds = %do.end.274
  %127 = load %struct._object*, %struct._object** %base, align 8
  store %struct._object* %127, %struct._object** %_py_decref_tmp276, align 8
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp276, align 8
  %ob_refcnt277 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 0
  %129 = load i64, i64* %ob_refcnt277, align 8
  %dec278 = add i64 %129, -1
  store i64 %dec278, i64* %ob_refcnt277, align 8
  %cmp279 = icmp ne i64 %dec278, 0
  br i1 %cmp279, label %if.then.280, label %if.else.281

if.then.280:                                      ; preds = %do.body.275
  br label %if.end.284

if.else.281:                                      ; preds = %do.body.275
  %130 = load %struct._object*, %struct._object** %_py_decref_tmp276, align 8
  %ob_type282 = getelementptr inbounds %struct._object, %struct._object* %130, i32 0, i32 1
  %131 = load %struct._typeobject*, %struct._typeobject** %ob_type282, align 8
  %tp_dealloc283 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %131, i32 0, i32 4
  %132 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc283, align 8
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp276, align 8
  call void %132(%struct._object* %133)
  br label %if.end.284

if.end.284:                                       ; preds = %if.else.281, %if.then.280
  br label %do.end.285

do.end.285:                                       ; preds = %if.end.284
  %134 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex286 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %134, i32 0, i32 3
  %135 = load %struct._object*, %struct._object** %ex286, align 8
  %ob_refcnt287 = getelementptr inbounds %struct._object, %struct._object* %135, i32 0, i32 0
  %136 = load i64, i64* %ob_refcnt287, align 8
  %inc288 = add i64 %136, 1
  store i64 %inc288, i64* %ob_refcnt287, align 8
  br label %do.body.289

do.body.289:                                      ; preds = %do.end.285
  %137 = load %struct._object*, %struct._object** %m, align 8
  %138 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %138, i32 0, i32 0
  %139 = load i8*, i8** %name, align 8
  %140 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex290 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %140, i32 0, i32 3
  %141 = load %struct._object*, %struct._object** %ex290, align 8
  %call291 = call i32 @PyModule_AddObject(%struct._object* %137, i8* %139, %struct._object* %141)
  %cmp292 = icmp slt i32 %call291, 0
  br i1 %cmp292, label %if.then.293, label %if.end.294

if.then.293:                                      ; preds = %do.body.289
  br label %error

if.end.294:                                       ; preds = %do.body.289
  br label %do.end.295

do.end.295:                                       ; preds = %if.end.294
  %142 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex296 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %142, i32 0, i32 3
  %143 = load %struct._object*, %struct._object** %ex296, align 8
  %ob_refcnt297 = getelementptr inbounds %struct._object, %struct._object* %143, i32 0, i32 0
  %144 = load i64, i64* %ob_refcnt297, align 8
  %inc298 = add i64 %144, 1
  store i64 %inc298, i64* %ob_refcnt297, align 8
  %145 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex299 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %145, i32 0, i32 3
  %146 = load %struct._object*, %struct._object** %ex299, align 8
  %147 = load i32, i32* %i, align 4
  %idxprom = sext i32 %147 to i64
  %148 = load %struct._object*, %struct._object** @SignalTuple, align 8
  %149 = bitcast %struct._object* %148 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %149, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom
  store %struct._object* %146, %struct._object** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %do.end.295
  %150 = load i32, i32* %i, align 4
  %dec300 = add i32 %150, -1
  store i32 %dec300, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %151 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 0, i32 3), align 8
  store %struct._object* %151, %struct._object** getelementptr inbounds ([6 x %struct.DecCondMap], [6 x %struct.DecCondMap]* @cond_map, i32 0, i64 0, i32 3), align 8
  store %struct.DecCondMap* getelementptr inbounds ([6 x %struct.DecCondMap], [6 x %struct.DecCondMap]* @cond_map, i32 0, i64 1), %struct.DecCondMap** %cm, align 8
  br label %for.cond.301

for.cond.301:                                     ; preds = %for.inc.347, %for.end
  %152 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name302 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %152, i32 0, i32 0
  %153 = load i8*, i8** %name302, align 8
  %cmp303 = icmp ne i8* %153, null
  br i1 %cmp303, label %for.body.304, label %for.end.348

for.body.304:                                     ; preds = %for.cond.301
  %154 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag306 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %154, i32 0, i32 2
  %155 = load i32, i32* %flag306, align 4
  %cmp307 = icmp eq i32 %155, 16
  br i1 %cmp307, label %if.then.308, label %if.else.310

if.then.308:                                      ; preds = %for.body.304
  %156 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 0, i32 3), align 8
  %157 = load %struct._object*, %struct._object** @PyExc_ZeroDivisionError, align 8
  %call309 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %156, %struct._object* %157)
  store %struct._object* %call309, %struct._object** %base305, align 8
  br label %if.end.312

if.else.310:                                      ; preds = %for.body.304
  %158 = load %struct._object*, %struct._object** getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 0, i32 3), align 8
  %call311 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 1, %struct._object* %158)
  store %struct._object* %call311, %struct._object** %base305, align 8
  br label %if.end.312

if.end.312:                                       ; preds = %if.else.310, %if.then.308
  %159 = load %struct._object*, %struct._object** %base305, align 8
  %cmp313 = icmp eq %struct._object* %159, null
  br i1 %cmp313, label %if.then.314, label %if.end.315

if.then.314:                                      ; preds = %if.end.312
  br label %error

if.end.315:                                       ; preds = %if.end.312
  br label %do.body.316

do.body.316:                                      ; preds = %if.end.315
  %160 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %fqname317 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %160, i32 0, i32 1
  %161 = load i8*, i8** %fqname317, align 8
  %162 = load %struct._object*, %struct._object** %base305, align 8
  %call318 = call %struct._object* @PyErr_NewException(i8* %161, %struct._object* %162, %struct._object* null)
  %163 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex319 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %163, i32 0, i32 3
  store %struct._object* %call318, %struct._object** %ex319, align 8
  %164 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex320 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %164, i32 0, i32 3
  %165 = load %struct._object*, %struct._object** %ex320, align 8
  %cmp321 = icmp eq %struct._object* %165, null
  br i1 %cmp321, label %if.then.322, label %if.end.323

if.then.322:                                      ; preds = %do.body.316
  br label %error

if.end.323:                                       ; preds = %do.body.316
  br label %do.end.324

do.end.324:                                       ; preds = %if.end.323
  br label %do.body.325

do.body.325:                                      ; preds = %do.end.324
  %166 = load %struct._object*, %struct._object** %base305, align 8
  store %struct._object* %166, %struct._object** %_py_decref_tmp326, align 8
  %167 = load %struct._object*, %struct._object** %_py_decref_tmp326, align 8
  %ob_refcnt327 = getelementptr inbounds %struct._object, %struct._object* %167, i32 0, i32 0
  %168 = load i64, i64* %ob_refcnt327, align 8
  %dec328 = add i64 %168, -1
  store i64 %dec328, i64* %ob_refcnt327, align 8
  %cmp329 = icmp ne i64 %dec328, 0
  br i1 %cmp329, label %if.then.330, label %if.else.331

if.then.330:                                      ; preds = %do.body.325
  br label %if.end.334

if.else.331:                                      ; preds = %do.body.325
  %169 = load %struct._object*, %struct._object** %_py_decref_tmp326, align 8
  %ob_type332 = getelementptr inbounds %struct._object, %struct._object* %169, i32 0, i32 1
  %170 = load %struct._typeobject*, %struct._typeobject** %ob_type332, align 8
  %tp_dealloc333 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %170, i32 0, i32 4
  %171 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc333, align 8
  %172 = load %struct._object*, %struct._object** %_py_decref_tmp326, align 8
  call void %171(%struct._object* %172)
  br label %if.end.334

if.end.334:                                       ; preds = %if.else.331, %if.then.330
  br label %do.end.335

do.end.335:                                       ; preds = %if.end.334
  %173 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex336 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %173, i32 0, i32 3
  %174 = load %struct._object*, %struct._object** %ex336, align 8
  %ob_refcnt337 = getelementptr inbounds %struct._object, %struct._object* %174, i32 0, i32 0
  %175 = load i64, i64* %ob_refcnt337, align 8
  %inc338 = add i64 %175, 1
  store i64 %inc338, i64* %ob_refcnt337, align 8
  br label %do.body.339

do.body.339:                                      ; preds = %do.end.335
  %176 = load %struct._object*, %struct._object** %m, align 8
  %177 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name340 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %177, i32 0, i32 0
  %178 = load i8*, i8** %name340, align 8
  %179 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex341 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %179, i32 0, i32 3
  %180 = load %struct._object*, %struct._object** %ex341, align 8
  %call342 = call i32 @PyModule_AddObject(%struct._object* %176, i8* %178, %struct._object* %180)
  %cmp343 = icmp slt i32 %call342, 0
  br i1 %cmp343, label %if.then.344, label %if.end.345

if.then.344:                                      ; preds = %do.body.339
  br label %error

if.end.345:                                       ; preds = %do.body.339
  br label %do.end.346

do.end.346:                                       ; preds = %if.end.345
  br label %for.inc.347

for.inc.347:                                      ; preds = %do.end.346
  %181 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %181, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  br label %for.cond.301

for.end.348:                                      ; preds = %for.cond.301
  br label %do.body.349

do.body.349:                                      ; preds = %for.end.348
  %call350 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 0, i32 0), %struct._object* null)
  store %struct._object* %call350, %struct._object** @default_context_template, align 8
  %182 = load %struct._object*, %struct._object** @default_context_template, align 8
  %cmp351 = icmp eq %struct._object* %182, null
  br i1 %cmp351, label %if.then.352, label %if.end.353

if.then.352:                                      ; preds = %do.body.349
  br label %error

if.end.353:                                       ; preds = %do.body.349
  br label %do.end.354

do.end.354:                                       ; preds = %if.end.353
  %183 = load %struct._object*, %struct._object** @default_context_template, align 8
  %ob_refcnt355 = getelementptr inbounds %struct._object, %struct._object* %183, i32 0, i32 0
  %184 = load i64, i64* %ob_refcnt355, align 8
  %inc356 = add i64 %184, 1
  store i64 %inc356, i64* %ob_refcnt355, align 8
  br label %do.body.357

do.body.357:                                      ; preds = %do.end.354
  %185 = load %struct._object*, %struct._object** %m, align 8
  %186 = load %struct._object*, %struct._object** @default_context_template, align 8
  %call358 = call i32 @PyModule_AddObject(%struct._object* %185, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i32 0, i32 0), %struct._object* %186)
  %cmp359 = icmp slt i32 %call358, 0
  br i1 %cmp359, label %if.then.360, label %if.end.361

if.then.360:                                      ; preds = %do.body.357
  br label %error

if.end.361:                                       ; preds = %do.body.357
  br label %do.end.362

do.end.362:                                       ; preds = %if.end.361
  br label %do.body.363

do.body.363:                                      ; preds = %do.end.362
  %call364 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.20, i32 0, i32 0))
  store %struct._object* %call364, %struct._object** @tls_context_key, align 8
  %187 = load %struct._object*, %struct._object** @tls_context_key, align 8
  %cmp365 = icmp eq %struct._object* %187, null
  br i1 %cmp365, label %if.then.366, label %if.end.367

if.then.366:                                      ; preds = %do.body.363
  br label %error

if.end.367:                                       ; preds = %do.body.363
  br label %do.end.368

do.end.368:                                       ; preds = %if.end.367
  %188 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc369 = add i64 %188, 1
  store i64 %inc369, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  br label %do.body.370

do.body.370:                                      ; preds = %do.end.368
  %189 = load %struct._object*, %struct._object** %m, align 8
  %call371 = call i32 @PyModule_AddObject(%struct._object* %189, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0))
  %cmp372 = icmp slt i32 %call371, 0
  br i1 %cmp372, label %if.then.373, label %if.end.374

if.then.373:                                      ; preds = %do.body.370
  br label %error

if.end.374:                                       ; preds = %do.body.370
  br label %do.end.375

do.end.375:                                       ; preds = %if.end.374
  br label %do.body.376

do.body.376:                                      ; preds = %do.end.375
  %call377 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 0, i32 0), %struct._object* null)
  store %struct._object* %call377, %struct._object** @basic_context_template, align 8
  %190 = load %struct._object*, %struct._object** @basic_context_template, align 8
  %cmp378 = icmp eq %struct._object* %190, null
  br i1 %cmp378, label %if.then.379, label %if.end.380

if.then.379:                                      ; preds = %do.body.376
  br label %error

if.end.380:                                       ; preds = %do.body.376
  br label %do.end.381

do.end.381:                                       ; preds = %if.end.380
  %191 = load %struct._object*, %struct._object** @basic_context_template, align 8
  call void @init_basic_context(%struct._object* %191)
  %192 = load %struct._object*, %struct._object** @basic_context_template, align 8
  %ob_refcnt382 = getelementptr inbounds %struct._object, %struct._object* %192, i32 0, i32 0
  %193 = load i64, i64* %ob_refcnt382, align 8
  %inc383 = add i64 %193, 1
  store i64 %inc383, i64* %ob_refcnt382, align 8
  br label %do.body.384

do.body.384:                                      ; preds = %do.end.381
  %194 = load %struct._object*, %struct._object** %m, align 8
  %195 = load %struct._object*, %struct._object** @basic_context_template, align 8
  %call385 = call i32 @PyModule_AddObject(%struct._object* %194, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), %struct._object* %195)
  %cmp386 = icmp slt i32 %call385, 0
  br i1 %cmp386, label %if.then.387, label %if.end.388

if.then.387:                                      ; preds = %do.body.384
  br label %error

if.end.388:                                       ; preds = %do.body.384
  br label %do.end.389

do.end.389:                                       ; preds = %if.end.388
  br label %do.body.390

do.body.390:                                      ; preds = %do.end.389
  %call391 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 0, i32 0), %struct._object* null)
  store %struct._object* %call391, %struct._object** @extended_context_template, align 8
  %196 = load %struct._object*, %struct._object** @extended_context_template, align 8
  %cmp392 = icmp eq %struct._object* %196, null
  br i1 %cmp392, label %if.then.393, label %if.end.394

if.then.393:                                      ; preds = %do.body.390
  br label %error

if.end.394:                                       ; preds = %do.body.390
  br label %do.end.395

do.end.395:                                       ; preds = %if.end.394
  %197 = load %struct._object*, %struct._object** @extended_context_template, align 8
  call void @init_extended_context(%struct._object* %197)
  %198 = load %struct._object*, %struct._object** @extended_context_template, align 8
  %ob_refcnt396 = getelementptr inbounds %struct._object, %struct._object* %198, i32 0, i32 0
  %199 = load i64, i64* %ob_refcnt396, align 8
  %inc397 = add i64 %199, 1
  store i64 %inc397, i64* %ob_refcnt396, align 8
  br label %do.body.398

do.body.398:                                      ; preds = %do.end.395
  %200 = load %struct._object*, %struct._object** %m, align 8
  %201 = load %struct._object*, %struct._object** @extended_context_template, align 8
  %call399 = call i32 @PyModule_AddObject(%struct._object* %200, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23, i32 0, i32 0), %struct._object* %201)
  %cmp400 = icmp slt i32 %call399, 0
  br i1 %cmp400, label %if.then.401, label %if.end.402

if.then.401:                                      ; preds = %do.body.398
  br label %error

if.end.402:                                       ; preds = %do.body.398
  br label %do.end.403

do.end.403:                                       ; preds = %if.end.402
  store %struct.ssize_constmap* getelementptr inbounds ([5 x %struct.ssize_constmap], [5 x %struct.ssize_constmap]* @ssize_constants, i32 0, i32 0), %struct.ssize_constmap** %ssize_cm, align 8
  br label %for.cond.404

for.cond.404:                                     ; preds = %for.inc.421, %do.end.403
  %202 = load %struct.ssize_constmap*, %struct.ssize_constmap** %ssize_cm, align 8
  %name405 = getelementptr inbounds %struct.ssize_constmap, %struct.ssize_constmap* %202, i32 0, i32 0
  %203 = load i8*, i8** %name405, align 8
  %cmp406 = icmp ne i8* %203, null
  br i1 %cmp406, label %for.body.407, label %for.end.423

for.body.407:                                     ; preds = %for.cond.404
  br label %do.body.408

do.body.408:                                      ; preds = %for.body.407
  %204 = load %struct.ssize_constmap*, %struct.ssize_constmap** %ssize_cm, align 8
  %val = getelementptr inbounds %struct.ssize_constmap, %struct.ssize_constmap* %204, i32 0, i32 1
  %205 = load i64, i64* %val, align 8
  %call409 = call %struct._object* @PyLong_FromSsize_t(i64 %205)
  store %struct._object* %call409, %struct._object** %obj, align 8
  %206 = load %struct._object*, %struct._object** %obj, align 8
  %cmp410 = icmp eq %struct._object* %206, null
  br i1 %cmp410, label %if.then.411, label %if.end.412

if.then.411:                                      ; preds = %do.body.408
  br label %error

if.end.412:                                       ; preds = %do.body.408
  br label %do.end.413

do.end.413:                                       ; preds = %if.end.412
  br label %do.body.414

do.body.414:                                      ; preds = %do.end.413
  %207 = load %struct._object*, %struct._object** %m, align 8
  %208 = load %struct.ssize_constmap*, %struct.ssize_constmap** %ssize_cm, align 8
  %name415 = getelementptr inbounds %struct.ssize_constmap, %struct.ssize_constmap* %208, i32 0, i32 0
  %209 = load i8*, i8** %name415, align 8
  %210 = load %struct._object*, %struct._object** %obj, align 8
  %call416 = call i32 @PyModule_AddObject(%struct._object* %207, i8* %209, %struct._object* %210)
  %cmp417 = icmp slt i32 %call416, 0
  br i1 %cmp417, label %if.then.418, label %if.end.419

if.then.418:                                      ; preds = %do.body.414
  br label %error

if.end.419:                                       ; preds = %do.body.414
  br label %do.end.420

do.end.420:                                       ; preds = %if.end.419
  store %struct._object* null, %struct._object** %obj, align 8
  br label %for.inc.421

for.inc.421:                                      ; preds = %do.end.420
  %211 = load %struct.ssize_constmap*, %struct.ssize_constmap** %ssize_cm, align 8
  %incdec.ptr422 = getelementptr %struct.ssize_constmap, %struct.ssize_constmap* %211, i32 1
  store %struct.ssize_constmap* %incdec.ptr422, %struct.ssize_constmap** %ssize_cm, align 8
  br label %for.cond.404

for.end.423:                                      ; preds = %for.cond.404
  store %struct.int_constmap* getelementptr inbounds ([1 x %struct.int_constmap], [1 x %struct.int_constmap]* @int_constants, i32 0, i32 0), %struct.int_constmap** %int_cm, align 8
  br label %for.cond.424

for.cond.424:                                     ; preds = %for.inc.437, %for.end.423
  %212 = load %struct.int_constmap*, %struct.int_constmap** %int_cm, align 8
  %name425 = getelementptr inbounds %struct.int_constmap, %struct.int_constmap* %212, i32 0, i32 0
  %213 = load i8*, i8** %name425, align 8
  %cmp426 = icmp ne i8* %213, null
  br i1 %cmp426, label %for.body.427, label %for.end.439

for.body.427:                                     ; preds = %for.cond.424
  br label %do.body.428

do.body.428:                                      ; preds = %for.body.427
  %214 = load %struct._object*, %struct._object** %m, align 8
  %215 = load %struct.int_constmap*, %struct.int_constmap** %int_cm, align 8
  %name429 = getelementptr inbounds %struct.int_constmap, %struct.int_constmap* %215, i32 0, i32 0
  %216 = load i8*, i8** %name429, align 8
  %217 = load %struct.int_constmap*, %struct.int_constmap** %int_cm, align 8
  %val430 = getelementptr inbounds %struct.int_constmap, %struct.int_constmap* %217, i32 0, i32 1
  %218 = load i32, i32* %val430, align 4
  %conv = sext i32 %218 to i64
  %call431 = call i32 @PyModule_AddIntConstant(%struct._object* %214, i8* %216, i64 %conv)
  %cmp432 = icmp slt i32 %call431, 0
  br i1 %cmp432, label %if.then.434, label %if.end.435

if.then.434:                                      ; preds = %do.body.428
  br label %error

if.end.435:                                       ; preds = %do.body.428
  br label %do.end.436

do.end.436:                                       ; preds = %if.end.435
  br label %for.inc.437

for.inc.437:                                      ; preds = %do.end.436
  %219 = load %struct.int_constmap*, %struct.int_constmap** %int_cm, align 8
  %incdec.ptr438 = getelementptr %struct.int_constmap, %struct.int_constmap* %219, i32 1
  store %struct.int_constmap* %incdec.ptr438, %struct.int_constmap** %int_cm, align 8
  br label %for.cond.424

for.end.439:                                      ; preds = %for.cond.424
  store i32 0, i32* %i, align 4
  br label %for.cond.440

for.cond.440:                                     ; preds = %for.inc.472, %for.end.439
  %220 = load i32, i32* %i, align 4
  %cmp441 = icmp slt i32 %220, 8
  br i1 %cmp441, label %for.body.443, label %for.end.474

for.body.443:                                     ; preds = %for.cond.440
  br label %do.body.444

do.body.444:                                      ; preds = %for.body.443
  %221 = load i32, i32* %i, align 4
  %idxprom445 = sext i32 %221 to i64
  %arrayidx446 = getelementptr [9 x i8*], [9 x i8*]* @mpd_round_string, i32 0, i64 %idxprom445
  %222 = load i8*, i8** %arrayidx446, align 8
  %call447 = call %struct._object* @PyUnicode_InternFromString(i8* %222)
  %223 = load i32, i32* %i, align 4
  %idxprom448 = sext i32 %223 to i64
  %arrayidx449 = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom448
  store %struct._object* %call447, %struct._object** %arrayidx449, align 8
  %224 = load i32, i32* %i, align 4
  %idxprom450 = sext i32 %224 to i64
  %arrayidx451 = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom450
  %225 = load %struct._object*, %struct._object** %arrayidx451, align 8
  %cmp452 = icmp eq %struct._object* %225, null
  br i1 %cmp452, label %if.then.454, label %if.end.455

if.then.454:                                      ; preds = %do.body.444
  br label %error

if.end.455:                                       ; preds = %do.body.444
  br label %do.end.456

do.end.456:                                       ; preds = %if.end.455
  %226 = load i32, i32* %i, align 4
  %idxprom457 = sext i32 %226 to i64
  %arrayidx458 = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom457
  %227 = load %struct._object*, %struct._object** %arrayidx458, align 8
  %ob_refcnt459 = getelementptr inbounds %struct._object, %struct._object* %227, i32 0, i32 0
  %228 = load i64, i64* %ob_refcnt459, align 8
  %inc460 = add i64 %228, 1
  store i64 %inc460, i64* %ob_refcnt459, align 8
  br label %do.body.461

do.body.461:                                      ; preds = %do.end.456
  %229 = load %struct._object*, %struct._object** %m, align 8
  %230 = load i32, i32* %i, align 4
  %idxprom462 = sext i32 %230 to i64
  %arrayidx463 = getelementptr [9 x i8*], [9 x i8*]* @mpd_round_string, i32 0, i64 %idxprom462
  %231 = load i8*, i8** %arrayidx463, align 8
  %232 = load i32, i32* %i, align 4
  %idxprom464 = sext i32 %232 to i64
  %arrayidx465 = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom464
  %233 = load %struct._object*, %struct._object** %arrayidx465, align 8
  %call466 = call i32 @PyModule_AddObject(%struct._object* %229, i8* %231, %struct._object* %233)
  %cmp467 = icmp slt i32 %call466, 0
  br i1 %cmp467, label %if.then.469, label %if.end.470

if.then.469:                                      ; preds = %do.body.461
  br label %error

if.end.470:                                       ; preds = %do.body.461
  br label %do.end.471

do.end.471:                                       ; preds = %if.end.470
  br label %for.inc.472

for.inc.472:                                      ; preds = %do.end.471
  %234 = load i32, i32* %i, align 4
  %inc473 = add i32 %234, 1
  store i32 %inc473, i32* %i, align 4
  br label %for.cond.440

for.end.474:                                      ; preds = %for.cond.440
  br label %do.body.475

do.body.475:                                      ; preds = %for.end.474
  %235 = load %struct._object*, %struct._object** %m, align 8
  %call476 = call i32 @PyModule_AddStringConstant(%struct._object* %235, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0))
  %cmp477 = icmp slt i32 %call476, 0
  br i1 %cmp477, label %if.then.479, label %if.end.480

if.then.479:                                      ; preds = %do.body.475
  br label %error

if.end.480:                                       ; preds = %do.body.475
  br label %do.end.481

do.end.481:                                       ; preds = %if.end.480
  br label %do.body.482

do.body.482:                                      ; preds = %do.end.481
  %236 = load %struct._object*, %struct._object** %m, align 8
  %call483 = call i8* @mpd_version()
  %call484 = call i32 @PyModule_AddStringConstant(%struct._object* %236, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.26, i32 0, i32 0), i8* %call483)
  %cmp485 = icmp slt i32 %call484, 0
  br i1 %cmp485, label %if.then.487, label %if.end.488

if.then.487:                                      ; preds = %do.body.482
  br label %error

if.end.488:                                       ; preds = %do.body.482
  br label %do.end.489

do.end.489:                                       ; preds = %if.end.488
  %237 = load %struct._object*, %struct._object** %m, align 8
  store %struct._object* %237, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.487, %if.then.479, %if.then.469, %if.then.454, %if.then.434, %if.then.418, %if.then.411, %if.then.401, %if.then.393, %if.then.387, %if.then.379, %if.then.373, %if.then.366, %if.then.360, %if.then.352, %if.then.344, %if.then.322, %if.then.314, %if.then.293, %if.then.272, %if.then.266, %if.then.253, %if.then.247, %if.then.239, %if.then.233, %if.then.225, %if.then.218, %if.then.212, %if.then.172, %if.then.166, %if.then.143, %if.then.137, %if.then.131, %if.then.125, %if.then.85, %if.then.62, %if.then.56, %if.then.50, %if.then.34, %if.then.28, %if.then.22, %if.then.16, %if.then.10, %if.then.4, %if.then
  br label %do.body.490

do.body.490:                                      ; preds = %error
  %238 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %238, %struct._object** %_py_tmp491, align 8
  %239 = load %struct._object*, %struct._object** %_py_tmp491, align 8
  %cmp492 = icmp ne %struct._object* %239, null
  br i1 %cmp492, label %if.then.494, label %if.end.507

if.then.494:                                      ; preds = %do.body.490
  store %struct._object* null, %struct._object** %obj, align 8
  br label %do.body.495

do.body.495:                                      ; preds = %if.then.494
  %240 = load %struct._object*, %struct._object** %_py_tmp491, align 8
  store %struct._object* %240, %struct._object** %_py_decref_tmp496, align 8
  %241 = load %struct._object*, %struct._object** %_py_decref_tmp496, align 8
  %ob_refcnt497 = getelementptr inbounds %struct._object, %struct._object* %241, i32 0, i32 0
  %242 = load i64, i64* %ob_refcnt497, align 8
  %dec498 = add i64 %242, -1
  store i64 %dec498, i64* %ob_refcnt497, align 8
  %cmp499 = icmp ne i64 %dec498, 0
  br i1 %cmp499, label %if.then.501, label %if.else.502

if.then.501:                                      ; preds = %do.body.495
  br label %if.end.505

if.else.502:                                      ; preds = %do.body.495
  %243 = load %struct._object*, %struct._object** %_py_decref_tmp496, align 8
  %ob_type503 = getelementptr inbounds %struct._object, %struct._object* %243, i32 0, i32 1
  %244 = load %struct._typeobject*, %struct._typeobject** %ob_type503, align 8
  %tp_dealloc504 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %244, i32 0, i32 4
  %245 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc504, align 8
  %246 = load %struct._object*, %struct._object** %_py_decref_tmp496, align 8
  call void %245(%struct._object* %246)
  br label %if.end.505

if.end.505:                                       ; preds = %if.else.502, %if.then.501
  br label %do.end.506

do.end.506:                                       ; preds = %if.end.505
  br label %if.end.507

if.end.507:                                       ; preds = %do.end.506, %do.body.490
  br label %do.end.508

do.end.508:                                       ; preds = %if.end.507
  br label %do.body.509

do.body.509:                                      ; preds = %do.end.508
  %247 = load %struct._object*, %struct._object** %numbers, align 8
  store %struct._object* %247, %struct._object** %_py_tmp510, align 8
  %248 = load %struct._object*, %struct._object** %_py_tmp510, align 8
  %cmp511 = icmp ne %struct._object* %248, null
  br i1 %cmp511, label %if.then.513, label %if.end.526

if.then.513:                                      ; preds = %do.body.509
  store %struct._object* null, %struct._object** %numbers, align 8
  br label %do.body.514

do.body.514:                                      ; preds = %if.then.513
  %249 = load %struct._object*, %struct._object** %_py_tmp510, align 8
  store %struct._object* %249, %struct._object** %_py_decref_tmp515, align 8
  %250 = load %struct._object*, %struct._object** %_py_decref_tmp515, align 8
  %ob_refcnt516 = getelementptr inbounds %struct._object, %struct._object* %250, i32 0, i32 0
  %251 = load i64, i64* %ob_refcnt516, align 8
  %dec517 = add i64 %251, -1
  store i64 %dec517, i64* %ob_refcnt516, align 8
  %cmp518 = icmp ne i64 %dec517, 0
  br i1 %cmp518, label %if.then.520, label %if.else.521

if.then.520:                                      ; preds = %do.body.514
  br label %if.end.524

if.else.521:                                      ; preds = %do.body.514
  %252 = load %struct._object*, %struct._object** %_py_decref_tmp515, align 8
  %ob_type522 = getelementptr inbounds %struct._object, %struct._object* %252, i32 0, i32 1
  %253 = load %struct._typeobject*, %struct._typeobject** %ob_type522, align 8
  %tp_dealloc523 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %253, i32 0, i32 4
  %254 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc523, align 8
  %255 = load %struct._object*, %struct._object** %_py_decref_tmp515, align 8
  call void %254(%struct._object* %255)
  br label %if.end.524

if.end.524:                                       ; preds = %if.else.521, %if.then.520
  br label %do.end.525

do.end.525:                                       ; preds = %if.end.524
  br label %if.end.526

if.end.526:                                       ; preds = %do.end.525, %do.body.509
  br label %do.end.527

do.end.527:                                       ; preds = %if.end.526
  br label %do.body.528

do.body.528:                                      ; preds = %do.end.527
  %256 = load %struct._object*, %struct._object** %Number, align 8
  store %struct._object* %256, %struct._object** %_py_tmp529, align 8
  %257 = load %struct._object*, %struct._object** %_py_tmp529, align 8
  %cmp530 = icmp ne %struct._object* %257, null
  br i1 %cmp530, label %if.then.532, label %if.end.545

if.then.532:                                      ; preds = %do.body.528
  store %struct._object* null, %struct._object** %Number, align 8
  br label %do.body.533

do.body.533:                                      ; preds = %if.then.532
  %258 = load %struct._object*, %struct._object** %_py_tmp529, align 8
  store %struct._object* %258, %struct._object** %_py_decref_tmp534, align 8
  %259 = load %struct._object*, %struct._object** %_py_decref_tmp534, align 8
  %ob_refcnt535 = getelementptr inbounds %struct._object, %struct._object* %259, i32 0, i32 0
  %260 = load i64, i64* %ob_refcnt535, align 8
  %dec536 = add i64 %260, -1
  store i64 %dec536, i64* %ob_refcnt535, align 8
  %cmp537 = icmp ne i64 %dec536, 0
  br i1 %cmp537, label %if.then.539, label %if.else.540

if.then.539:                                      ; preds = %do.body.533
  br label %if.end.543

if.else.540:                                      ; preds = %do.body.533
  %261 = load %struct._object*, %struct._object** %_py_decref_tmp534, align 8
  %ob_type541 = getelementptr inbounds %struct._object, %struct._object* %261, i32 0, i32 1
  %262 = load %struct._typeobject*, %struct._typeobject** %ob_type541, align 8
  %tp_dealloc542 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %262, i32 0, i32 4
  %263 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc542, align 8
  %264 = load %struct._object*, %struct._object** %_py_decref_tmp534, align 8
  call void %263(%struct._object* %264)
  br label %if.end.543

if.end.543:                                       ; preds = %if.else.540, %if.then.539
  br label %do.end.544

do.end.544:                                       ; preds = %if.end.543
  br label %if.end.545

if.end.545:                                       ; preds = %do.end.544, %do.body.528
  br label %do.end.546

do.end.546:                                       ; preds = %if.end.545
  br label %do.body.547

do.body.547:                                      ; preds = %do.end.546
  %265 = load %struct._object*, %struct._object** @Rational, align 8
  store %struct._object* %265, %struct._object** %_py_tmp548, align 8
  %266 = load %struct._object*, %struct._object** %_py_tmp548, align 8
  %cmp549 = icmp ne %struct._object* %266, null
  br i1 %cmp549, label %if.then.551, label %if.end.564

if.then.551:                                      ; preds = %do.body.547
  store %struct._object* null, %struct._object** @Rational, align 8
  br label %do.body.552

do.body.552:                                      ; preds = %if.then.551
  %267 = load %struct._object*, %struct._object** %_py_tmp548, align 8
  store %struct._object* %267, %struct._object** %_py_decref_tmp553, align 8
  %268 = load %struct._object*, %struct._object** %_py_decref_tmp553, align 8
  %ob_refcnt554 = getelementptr inbounds %struct._object, %struct._object* %268, i32 0, i32 0
  %269 = load i64, i64* %ob_refcnt554, align 8
  %dec555 = add i64 %269, -1
  store i64 %dec555, i64* %ob_refcnt554, align 8
  %cmp556 = icmp ne i64 %dec555, 0
  br i1 %cmp556, label %if.then.558, label %if.else.559

if.then.558:                                      ; preds = %do.body.552
  br label %if.end.562

if.else.559:                                      ; preds = %do.body.552
  %270 = load %struct._object*, %struct._object** %_py_decref_tmp553, align 8
  %ob_type560 = getelementptr inbounds %struct._object, %struct._object* %270, i32 0, i32 1
  %271 = load %struct._typeobject*, %struct._typeobject** %ob_type560, align 8
  %tp_dealloc561 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %271, i32 0, i32 4
  %272 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc561, align 8
  %273 = load %struct._object*, %struct._object** %_py_decref_tmp553, align 8
  call void %272(%struct._object* %273)
  br label %if.end.562

if.end.562:                                       ; preds = %if.else.559, %if.then.558
  br label %do.end.563

do.end.563:                                       ; preds = %if.end.562
  br label %if.end.564

if.end.564:                                       ; preds = %do.end.563, %do.body.547
  br label %do.end.565

do.end.565:                                       ; preds = %if.end.564
  br label %do.body.566

do.body.566:                                      ; preds = %do.end.565
  %274 = load %struct._object*, %struct._object** %collections, align 8
  store %struct._object* %274, %struct._object** %_py_tmp567, align 8
  %275 = load %struct._object*, %struct._object** %_py_tmp567, align 8
  %cmp568 = icmp ne %struct._object* %275, null
  br i1 %cmp568, label %if.then.570, label %if.end.583

if.then.570:                                      ; preds = %do.body.566
  store %struct._object* null, %struct._object** %collections, align 8
  br label %do.body.571

do.body.571:                                      ; preds = %if.then.570
  %276 = load %struct._object*, %struct._object** %_py_tmp567, align 8
  store %struct._object* %276, %struct._object** %_py_decref_tmp572, align 8
  %277 = load %struct._object*, %struct._object** %_py_decref_tmp572, align 8
  %ob_refcnt573 = getelementptr inbounds %struct._object, %struct._object* %277, i32 0, i32 0
  %278 = load i64, i64* %ob_refcnt573, align 8
  %dec574 = add i64 %278, -1
  store i64 %dec574, i64* %ob_refcnt573, align 8
  %cmp575 = icmp ne i64 %dec574, 0
  br i1 %cmp575, label %if.then.577, label %if.else.578

if.then.577:                                      ; preds = %do.body.571
  br label %if.end.581

if.else.578:                                      ; preds = %do.body.571
  %279 = load %struct._object*, %struct._object** %_py_decref_tmp572, align 8
  %ob_type579 = getelementptr inbounds %struct._object, %struct._object* %279, i32 0, i32 1
  %280 = load %struct._typeobject*, %struct._typeobject** %ob_type579, align 8
  %tp_dealloc580 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %280, i32 0, i32 4
  %281 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc580, align 8
  %282 = load %struct._object*, %struct._object** %_py_decref_tmp572, align 8
  call void %281(%struct._object* %282)
  br label %if.end.581

if.end.581:                                       ; preds = %if.else.578, %if.then.577
  br label %do.end.582

do.end.582:                                       ; preds = %if.end.581
  br label %if.end.583

if.end.583:                                       ; preds = %do.end.582, %do.body.566
  br label %do.end.584

do.end.584:                                       ; preds = %if.end.583
  br label %do.body.585

do.body.585:                                      ; preds = %do.end.584
  %283 = load %struct._object*, %struct._object** %MutableMapping, align 8
  store %struct._object* %283, %struct._object** %_py_tmp586, align 8
  %284 = load %struct._object*, %struct._object** %_py_tmp586, align 8
  %cmp587 = icmp ne %struct._object* %284, null
  br i1 %cmp587, label %if.then.589, label %if.end.602

if.then.589:                                      ; preds = %do.body.585
  store %struct._object* null, %struct._object** %MutableMapping, align 8
  br label %do.body.590

do.body.590:                                      ; preds = %if.then.589
  %285 = load %struct._object*, %struct._object** %_py_tmp586, align 8
  store %struct._object* %285, %struct._object** %_py_decref_tmp591, align 8
  %286 = load %struct._object*, %struct._object** %_py_decref_tmp591, align 8
  %ob_refcnt592 = getelementptr inbounds %struct._object, %struct._object* %286, i32 0, i32 0
  %287 = load i64, i64* %ob_refcnt592, align 8
  %dec593 = add i64 %287, -1
  store i64 %dec593, i64* %ob_refcnt592, align 8
  %cmp594 = icmp ne i64 %dec593, 0
  br i1 %cmp594, label %if.then.596, label %if.else.597

if.then.596:                                      ; preds = %do.body.590
  br label %if.end.600

if.else.597:                                      ; preds = %do.body.590
  %288 = load %struct._object*, %struct._object** %_py_decref_tmp591, align 8
  %ob_type598 = getelementptr inbounds %struct._object, %struct._object* %288, i32 0, i32 1
  %289 = load %struct._typeobject*, %struct._typeobject** %ob_type598, align 8
  %tp_dealloc599 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %289, i32 0, i32 4
  %290 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc599, align 8
  %291 = load %struct._object*, %struct._object** %_py_decref_tmp591, align 8
  call void %290(%struct._object* %291)
  br label %if.end.600

if.end.600:                                       ; preds = %if.else.597, %if.then.596
  br label %do.end.601

do.end.601:                                       ; preds = %if.end.600
  br label %if.end.602

if.end.602:                                       ; preds = %do.end.601, %do.body.585
  br label %do.end.603

do.end.603:                                       ; preds = %if.end.602
  br label %do.body.604

do.body.604:                                      ; preds = %do.end.603
  %292 = load %struct._object*, %struct._object** @SignalTuple, align 8
  store %struct._object* %292, %struct._object** %_py_tmp605, align 8
  %293 = load %struct._object*, %struct._object** %_py_tmp605, align 8
  %cmp606 = icmp ne %struct._object* %293, null
  br i1 %cmp606, label %if.then.608, label %if.end.621

if.then.608:                                      ; preds = %do.body.604
  store %struct._object* null, %struct._object** @SignalTuple, align 8
  br label %do.body.609

do.body.609:                                      ; preds = %if.then.608
  %294 = load %struct._object*, %struct._object** %_py_tmp605, align 8
  store %struct._object* %294, %struct._object** %_py_decref_tmp610, align 8
  %295 = load %struct._object*, %struct._object** %_py_decref_tmp610, align 8
  %ob_refcnt611 = getelementptr inbounds %struct._object, %struct._object* %295, i32 0, i32 0
  %296 = load i64, i64* %ob_refcnt611, align 8
  %dec612 = add i64 %296, -1
  store i64 %dec612, i64* %ob_refcnt611, align 8
  %cmp613 = icmp ne i64 %dec612, 0
  br i1 %cmp613, label %if.then.615, label %if.else.616

if.then.615:                                      ; preds = %do.body.609
  br label %if.end.619

if.else.616:                                      ; preds = %do.body.609
  %297 = load %struct._object*, %struct._object** %_py_decref_tmp610, align 8
  %ob_type617 = getelementptr inbounds %struct._object, %struct._object* %297, i32 0, i32 1
  %298 = load %struct._typeobject*, %struct._typeobject** %ob_type617, align 8
  %tp_dealloc618 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %298, i32 0, i32 4
  %299 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc618, align 8
  %300 = load %struct._object*, %struct._object** %_py_decref_tmp610, align 8
  call void %299(%struct._object* %300)
  br label %if.end.619

if.end.619:                                       ; preds = %if.else.616, %if.then.615
  br label %do.end.620

do.end.620:                                       ; preds = %if.end.619
  br label %if.end.621

if.end.621:                                       ; preds = %do.end.620, %do.body.604
  br label %do.end.622

do.end.622:                                       ; preds = %if.end.621
  br label %do.body.623

do.body.623:                                      ; preds = %do.end.622
  %301 = load %struct._typeobject*, %struct._typeobject** @DecimalTuple, align 8
  %302 = bitcast %struct._typeobject* %301 to %struct._object*
  store %struct._object* %302, %struct._object** %_py_tmp624, align 8
  %303 = load %struct._object*, %struct._object** %_py_tmp624, align 8
  %cmp625 = icmp ne %struct._object* %303, null
  br i1 %cmp625, label %if.then.627, label %if.end.640

if.then.627:                                      ; preds = %do.body.623
  store %struct._typeobject* null, %struct._typeobject** @DecimalTuple, align 8
  br label %do.body.628

do.body.628:                                      ; preds = %if.then.627
  %304 = load %struct._object*, %struct._object** %_py_tmp624, align 8
  store %struct._object* %304, %struct._object** %_py_decref_tmp629, align 8
  %305 = load %struct._object*, %struct._object** %_py_decref_tmp629, align 8
  %ob_refcnt630 = getelementptr inbounds %struct._object, %struct._object* %305, i32 0, i32 0
  %306 = load i64, i64* %ob_refcnt630, align 8
  %dec631 = add i64 %306, -1
  store i64 %dec631, i64* %ob_refcnt630, align 8
  %cmp632 = icmp ne i64 %dec631, 0
  br i1 %cmp632, label %if.then.634, label %if.else.635

if.then.634:                                      ; preds = %do.body.628
  br label %if.end.638

if.else.635:                                      ; preds = %do.body.628
  %307 = load %struct._object*, %struct._object** %_py_decref_tmp629, align 8
  %ob_type636 = getelementptr inbounds %struct._object, %struct._object* %307, i32 0, i32 1
  %308 = load %struct._typeobject*, %struct._typeobject** %ob_type636, align 8
  %tp_dealloc637 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %308, i32 0, i32 4
  %309 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc637, align 8
  %310 = load %struct._object*, %struct._object** %_py_decref_tmp629, align 8
  call void %309(%struct._object* %310)
  br label %if.end.638

if.end.638:                                       ; preds = %if.else.635, %if.then.634
  br label %do.end.639

do.end.639:                                       ; preds = %if.end.638
  br label %if.end.640

if.end.640:                                       ; preds = %do.end.639, %do.body.623
  br label %do.end.641

do.end.641:                                       ; preds = %if.end.640
  br label %do.body.642

do.body.642:                                      ; preds = %do.end.641
  %311 = load %struct._object*, %struct._object** @default_context_template, align 8
  store %struct._object* %311, %struct._object** %_py_tmp643, align 8
  %312 = load %struct._object*, %struct._object** %_py_tmp643, align 8
  %cmp644 = icmp ne %struct._object* %312, null
  br i1 %cmp644, label %if.then.646, label %if.end.659

if.then.646:                                      ; preds = %do.body.642
  store %struct._object* null, %struct._object** @default_context_template, align 8
  br label %do.body.647

do.body.647:                                      ; preds = %if.then.646
  %313 = load %struct._object*, %struct._object** %_py_tmp643, align 8
  store %struct._object* %313, %struct._object** %_py_decref_tmp648, align 8
  %314 = load %struct._object*, %struct._object** %_py_decref_tmp648, align 8
  %ob_refcnt649 = getelementptr inbounds %struct._object, %struct._object* %314, i32 0, i32 0
  %315 = load i64, i64* %ob_refcnt649, align 8
  %dec650 = add i64 %315, -1
  store i64 %dec650, i64* %ob_refcnt649, align 8
  %cmp651 = icmp ne i64 %dec650, 0
  br i1 %cmp651, label %if.then.653, label %if.else.654

if.then.653:                                      ; preds = %do.body.647
  br label %if.end.657

if.else.654:                                      ; preds = %do.body.647
  %316 = load %struct._object*, %struct._object** %_py_decref_tmp648, align 8
  %ob_type655 = getelementptr inbounds %struct._object, %struct._object* %316, i32 0, i32 1
  %317 = load %struct._typeobject*, %struct._typeobject** %ob_type655, align 8
  %tp_dealloc656 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %317, i32 0, i32 4
  %318 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc656, align 8
  %319 = load %struct._object*, %struct._object** %_py_decref_tmp648, align 8
  call void %318(%struct._object* %319)
  br label %if.end.657

if.end.657:                                       ; preds = %if.else.654, %if.then.653
  br label %do.end.658

do.end.658:                                       ; preds = %if.end.657
  br label %if.end.659

if.end.659:                                       ; preds = %do.end.658, %do.body.642
  br label %do.end.660

do.end.660:                                       ; preds = %if.end.659
  br label %do.body.661

do.body.661:                                      ; preds = %do.end.660
  %320 = load %struct._object*, %struct._object** @tls_context_key, align 8
  store %struct._object* %320, %struct._object** %_py_tmp662, align 8
  %321 = load %struct._object*, %struct._object** %_py_tmp662, align 8
  %cmp663 = icmp ne %struct._object* %321, null
  br i1 %cmp663, label %if.then.665, label %if.end.678

if.then.665:                                      ; preds = %do.body.661
  store %struct._object* null, %struct._object** @tls_context_key, align 8
  br label %do.body.666

do.body.666:                                      ; preds = %if.then.665
  %322 = load %struct._object*, %struct._object** %_py_tmp662, align 8
  store %struct._object* %322, %struct._object** %_py_decref_tmp667, align 8
  %323 = load %struct._object*, %struct._object** %_py_decref_tmp667, align 8
  %ob_refcnt668 = getelementptr inbounds %struct._object, %struct._object* %323, i32 0, i32 0
  %324 = load i64, i64* %ob_refcnt668, align 8
  %dec669 = add i64 %324, -1
  store i64 %dec669, i64* %ob_refcnt668, align 8
  %cmp670 = icmp ne i64 %dec669, 0
  br i1 %cmp670, label %if.then.672, label %if.else.673

if.then.672:                                      ; preds = %do.body.666
  br label %if.end.676

if.else.673:                                      ; preds = %do.body.666
  %325 = load %struct._object*, %struct._object** %_py_decref_tmp667, align 8
  %ob_type674 = getelementptr inbounds %struct._object, %struct._object* %325, i32 0, i32 1
  %326 = load %struct._typeobject*, %struct._typeobject** %ob_type674, align 8
  %tp_dealloc675 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %326, i32 0, i32 4
  %327 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc675, align 8
  %328 = load %struct._object*, %struct._object** %_py_decref_tmp667, align 8
  call void %327(%struct._object* %328)
  br label %if.end.676

if.end.676:                                       ; preds = %if.else.673, %if.then.672
  br label %do.end.677

do.end.677:                                       ; preds = %if.end.676
  br label %if.end.678

if.end.678:                                       ; preds = %do.end.677, %do.body.661
  br label %do.end.679

do.end.679:                                       ; preds = %if.end.678
  br label %do.body.680

do.body.680:                                      ; preds = %do.end.679
  %329 = load %struct._object*, %struct._object** @basic_context_template, align 8
  store %struct._object* %329, %struct._object** %_py_tmp681, align 8
  %330 = load %struct._object*, %struct._object** %_py_tmp681, align 8
  %cmp682 = icmp ne %struct._object* %330, null
  br i1 %cmp682, label %if.then.684, label %if.end.697

if.then.684:                                      ; preds = %do.body.680
  store %struct._object* null, %struct._object** @basic_context_template, align 8
  br label %do.body.685

do.body.685:                                      ; preds = %if.then.684
  %331 = load %struct._object*, %struct._object** %_py_tmp681, align 8
  store %struct._object* %331, %struct._object** %_py_decref_tmp686, align 8
  %332 = load %struct._object*, %struct._object** %_py_decref_tmp686, align 8
  %ob_refcnt687 = getelementptr inbounds %struct._object, %struct._object* %332, i32 0, i32 0
  %333 = load i64, i64* %ob_refcnt687, align 8
  %dec688 = add i64 %333, -1
  store i64 %dec688, i64* %ob_refcnt687, align 8
  %cmp689 = icmp ne i64 %dec688, 0
  br i1 %cmp689, label %if.then.691, label %if.else.692

if.then.691:                                      ; preds = %do.body.685
  br label %if.end.695

if.else.692:                                      ; preds = %do.body.685
  %334 = load %struct._object*, %struct._object** %_py_decref_tmp686, align 8
  %ob_type693 = getelementptr inbounds %struct._object, %struct._object* %334, i32 0, i32 1
  %335 = load %struct._typeobject*, %struct._typeobject** %ob_type693, align 8
  %tp_dealloc694 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %335, i32 0, i32 4
  %336 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc694, align 8
  %337 = load %struct._object*, %struct._object** %_py_decref_tmp686, align 8
  call void %336(%struct._object* %337)
  br label %if.end.695

if.end.695:                                       ; preds = %if.else.692, %if.then.691
  br label %do.end.696

do.end.696:                                       ; preds = %if.end.695
  br label %if.end.697

if.end.697:                                       ; preds = %do.end.696, %do.body.680
  br label %do.end.698

do.end.698:                                       ; preds = %if.end.697
  br label %do.body.699

do.body.699:                                      ; preds = %do.end.698
  %338 = load %struct._object*, %struct._object** @extended_context_template, align 8
  store %struct._object* %338, %struct._object** %_py_tmp700, align 8
  %339 = load %struct._object*, %struct._object** %_py_tmp700, align 8
  %cmp701 = icmp ne %struct._object* %339, null
  br i1 %cmp701, label %if.then.703, label %if.end.716

if.then.703:                                      ; preds = %do.body.699
  store %struct._object* null, %struct._object** @extended_context_template, align 8
  br label %do.body.704

do.body.704:                                      ; preds = %if.then.703
  %340 = load %struct._object*, %struct._object** %_py_tmp700, align 8
  store %struct._object* %340, %struct._object** %_py_decref_tmp705, align 8
  %341 = load %struct._object*, %struct._object** %_py_decref_tmp705, align 8
  %ob_refcnt706 = getelementptr inbounds %struct._object, %struct._object* %341, i32 0, i32 0
  %342 = load i64, i64* %ob_refcnt706, align 8
  %dec707 = add i64 %342, -1
  store i64 %dec707, i64* %ob_refcnt706, align 8
  %cmp708 = icmp ne i64 %dec707, 0
  br i1 %cmp708, label %if.then.710, label %if.else.711

if.then.710:                                      ; preds = %do.body.704
  br label %if.end.714

if.else.711:                                      ; preds = %do.body.704
  %343 = load %struct._object*, %struct._object** %_py_decref_tmp705, align 8
  %ob_type712 = getelementptr inbounds %struct._object, %struct._object* %343, i32 0, i32 1
  %344 = load %struct._typeobject*, %struct._typeobject** %ob_type712, align 8
  %tp_dealloc713 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %344, i32 0, i32 4
  %345 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc713, align 8
  %346 = load %struct._object*, %struct._object** %_py_decref_tmp705, align 8
  call void %345(%struct._object* %346)
  br label %if.end.714

if.end.714:                                       ; preds = %if.else.711, %if.then.710
  br label %do.end.715

do.end.715:                                       ; preds = %if.end.714
  br label %if.end.716

if.end.716:                                       ; preds = %do.end.715, %do.body.699
  br label %do.end.717

do.end.717:                                       ; preds = %if.end.716
  br label %do.body.718

do.body.718:                                      ; preds = %do.end.717
  %347 = load %struct._object*, %struct._object** %m, align 8
  store %struct._object* %347, %struct._object** %_py_tmp719, align 8
  %348 = load %struct._object*, %struct._object** %_py_tmp719, align 8
  %cmp720 = icmp ne %struct._object* %348, null
  br i1 %cmp720, label %if.then.722, label %if.end.735

if.then.722:                                      ; preds = %do.body.718
  store %struct._object* null, %struct._object** %m, align 8
  br label %do.body.723

do.body.723:                                      ; preds = %if.then.722
  %349 = load %struct._object*, %struct._object** %_py_tmp719, align 8
  store %struct._object* %349, %struct._object** %_py_decref_tmp724, align 8
  %350 = load %struct._object*, %struct._object** %_py_decref_tmp724, align 8
  %ob_refcnt725 = getelementptr inbounds %struct._object, %struct._object* %350, i32 0, i32 0
  %351 = load i64, i64* %ob_refcnt725, align 8
  %dec726 = add i64 %351, -1
  store i64 %dec726, i64* %ob_refcnt725, align 8
  %cmp727 = icmp ne i64 %dec726, 0
  br i1 %cmp727, label %if.then.729, label %if.else.730

if.then.729:                                      ; preds = %do.body.723
  br label %if.end.733

if.else.730:                                      ; preds = %do.body.723
  %352 = load %struct._object*, %struct._object** %_py_decref_tmp724, align 8
  %ob_type731 = getelementptr inbounds %struct._object, %struct._object* %352, i32 0, i32 1
  %353 = load %struct._typeobject*, %struct._typeobject** %ob_type731, align 8
  %tp_dealloc732 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %353, i32 0, i32 4
  %354 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc732, align 8
  %355 = load %struct._object*, %struct._object** %_py_decref_tmp724, align 8
  call void %354(%struct._object* %355)
  br label %if.end.733

if.end.733:                                       ; preds = %if.else.730, %if.then.729
  br label %do.end.734

do.end.734:                                       ; preds = %if.end.733
  br label %if.end.735

if.end.735:                                       ; preds = %do.end.734, %do.body.718
  br label %do.end.736

do.end.736:                                       ; preds = %if.end.735
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.736, %do.end.489
  %356 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %356
}

; Function Attrs: nounwind uwtable
define internal void @dec_traphandler(%struct.mpd_context_t* %ctx) #0 {
entry:
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  ret void
}

declare i8* @PyMem_Malloc(i64) #1

declare i8* @PyMem_Realloc(i8*, i64) #1

declare hidden i8* @mpd_callocfunc_em(i64, i64) #1

declare void @PyMem_Free(i8*) #1

declare hidden void @mpd_setminalloc(i64) #1

declare i32 @PyType_Ready(%struct._typeobject*) #1

declare %struct._object* @PyUnicode_FromString(i8*) #1

declare i32 @PyDict_SetItemString(%struct._object*, i8*, %struct._object*) #1

declare %struct._object* @PyImport_ImportModule(i8*) #1

declare %struct._object* @PyObject_GetAttrString(%struct._object*, i8*) #1

declare %struct._object* @PyObject_CallMethod(%struct._object*, i8*, i8*, ...) #1

declare %struct._object* @PyObject_CallFunction(%struct._object*, i8*, ...) #1

declare %struct._object* @PyModule_Create2(%struct.PyModuleDef*, i32) #1

declare i32 @PyModule_AddObject(%struct._object*, i8*, %struct._object*) #1

declare %struct._object* @PyErr_NewException(i8*, %struct._object*, %struct._object*) #1

declare %struct._object* @PyTuple_New(i64) #1

declare %struct._object* @PyTuple_Pack(i64, ...) #1

declare %struct._object* @PyObject_CallObject(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal void @init_basic_context(%struct._object* %v) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast (%struct.mpd_context_t* @dflt_ctx to i8*), i64 48, i32 8, i1 false)
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 0
  store i64 9, i64* %prec, align 8
  %traps = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 3
  %1 = load i32, i32* %traps, align 4
  %or = or i32 %1, 16385
  store i32 %or, i32* %traps, align 4
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 6
  store i32 4, i32* %round, align 4
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  %4 = bitcast %struct.mpd_context_t* %ctx1 to i8*
  %5 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %4, i8* %5, i64 48, i32 8, i1 false)
  %6 = load %struct._object*, %struct._object** %v.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %7, i32 0, i32 4
  store i32 1, i32* %capitals, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @init_extended_context(%struct._object* %v) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast (%struct.mpd_context_t* @dflt_ctx to i8*), i64 48, i32 8, i1 false)
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 0
  store i64 9, i64* %prec, align 8
  %traps = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 3
  store i32 0, i32* %traps, align 4
  %1 = load %struct._object*, %struct._object** %v.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %2, i32 0, i32 1
  %3 = bitcast %struct.mpd_context_t* %ctx1 to i8*
  %4 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* %4, i64 48, i32 8, i1 false)
  %5 = load %struct._object*, %struct._object** %v.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 4
  store i32 1, i32* %capitals, align 4
  ret void
}

declare %struct._object* @PyLong_FromSsize_t(i64) #1

declare i32 @PyModule_AddIntConstant(%struct._object*, i8*, i64) #1

declare %struct._object* @PyUnicode_InternFromString(i8*) #1

declare i32 @PyModule_AddStringConstant(%struct._object*, i8*, i8*) #1

declare hidden i8* @mpd_version() #1

; Function Attrs: nounwind uwtable
define internal void @dec_dealloc(%struct._object* %dec) #0 {
entry:
  %dec.addr = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  %0 = load %struct._object*, %struct._object** %dec.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  call void @mpd_del(%struct.mpd_t* %dec1)
  %2 = load %struct._object*, %struct._object** %dec.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 38
  %4 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %5 = load %struct._object*, %struct._object** %dec.addr, align 8
  %6 = bitcast %struct._object* %5 to i8*
  call void %4(i8* %6)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_repr(%struct._object* %dec) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %cp = alloca i8*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %dec.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %context, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %4, i32 0, i32 4
  %5 = load i32, i32* %capitals, align 4
  %call2 = call i8* @mpd_to_sci(%struct.mpd_t* %dec1, i32 %5)
  store i8* %call2, i8** %cp, align 8
  %6 = load i8*, i8** %cp, align 8
  %cmp3 = icmp eq i8* %6, null
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %call5 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %7 = load i8*, i8** %cp, align 8
  %call7 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i32 0, i32 0), i8* %7)
  store %struct._object* %call7, %struct._object** %res, align 8
  %8 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %9 = load i8*, i8** %cp, align 8
  call void %8(i8* %9)
  %10 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %10, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.4, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal i64 @dec_hash(%struct.PyDecObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDecObject*, align 8
  store %struct.PyDecObject* %self, %struct.PyDecObject** %self.addr, align 8
  %0 = load %struct.PyDecObject*, %struct.PyDecObject** %self.addr, align 8
  %hash = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %0, i32 0, i32 1
  %1 = load i64, i64* %hash, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyDecObject*, %struct.PyDecObject** %self.addr, align 8
  %call = call i64 @_dec_hash(%struct.PyDecObject* %2)
  %3 = load %struct.PyDecObject*, %struct.PyDecObject** %self.addr, align 8
  %hash1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 1
  store i64 %call, i64* %hash1, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load %struct.PyDecObject*, %struct.PyDecObject** %self.addr, align 8
  %hash2 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %4, i32 0, i32 1
  %5 = load i64, i64* %hash2, align 8
  ret i64 %5
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_str(%struct._object* %dec) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %cp = alloca i8*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %dec.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %context, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %4, i32 0, i32 4
  %5 = load i32, i32* %capitals, align 4
  %call2 = call i64 @mpd_to_sci_size(i8** %cp, %struct.mpd_t* %dec1, i32 %5)
  store i64 %call2, i64* %size, align 8
  %6 = load i64, i64* %size, align 8
  %cmp3 = icmp slt i64 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.end
  %call5 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %7 = load i8*, i8** %cp, align 8
  %8 = load i64, i64* %size, align 8
  %call7 = call %struct._object* @unicode_fromascii(i8* %7, i64 %8)
  store %struct._object* %call7, %struct._object** %res, align 8
  %9 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %10 = load i8*, i8** %cp, align 8
  call void %9(i8* %10)
  %11 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.4, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

declare %struct._object* @PyObject_GenericGetAttr(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_richcompare(%struct._object* %v, %struct._object* %w, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %a_issnan = alloca i32, align 4
  %b_issnan = alloca i32, align 4
  %r = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %w, %struct._object** %w.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v.addr, align 8
  %2 = load %struct._object*, %struct._object** %w.addr, align 8
  %3 = load i32, i32* %op.addr, align 4
  %4 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op_cmp(%struct._object** %a, %struct._object** %b, %struct._object* %1, %struct._object* %2, i32 %3, %struct._object* %4)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %5, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %a, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %7, i32 0, i32 2
  %call4 = call i32 @mpd_issnan(%struct.mpd_t* %dec)
  store i32 %call4, i32* %a_issnan, align 4
  %8 = load %struct._object*, %struct._object** %b, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDecObject*
  %dec5 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %9, i32 0, i32 2
  %call6 = call i32 @mpd_issnan(%struct.mpd_t* %dec5)
  store i32 %call6, i32* %b_issnan, align 4
  %10 = load %struct._object*, %struct._object** %a, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %12 = load %struct._object*, %struct._object** %b, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %13, i32 0, i32 2
  %call9 = call i32 @mpd_qcmp(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, i32* %status)
  store i32 %call9, i32* %r, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.3
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec10 = add i64 %16, -1
  store i64 %dec10, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec10, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  br label %do.body.14

do.body.14:                                       ; preds = %do.end
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp15, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %23, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %26(%struct._object* %27)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  %28 = load i32, i32* %r, align 4
  %cmp25 = icmp eq i32 %28, 2147483647
  br i1 %cmp25, label %if.then.26, label %if.end.41

if.then.26:                                       ; preds = %do.end.24
  %29 = load i32, i32* %a_issnan, align 4
  %tobool27 = icmp ne i32 %29, 0
  br i1 %tobool27, label %if.then.32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.26
  %30 = load i32, i32* %b_issnan, align 4
  %tobool28 = icmp ne i32 %30, 0
  br i1 %tobool28, label %if.then.32, label %lor.lhs.false.29

lor.lhs.false.29:                                 ; preds = %lor.lhs.false
  %31 = load i32, i32* %op.addr, align 4
  %cmp30 = icmp ne i32 %31, 2
  br i1 %cmp30, label %land.lhs.true, label %if.end.37

land.lhs.true:                                    ; preds = %lor.lhs.false.29
  %32 = load i32, i32* %op.addr, align 4
  %cmp31 = icmp ne i32 %32, 3
  br i1 %cmp31, label %if.then.32, label %if.end.37

if.then.32:                                       ; preds = %land.lhs.true, %lor.lhs.false, %if.then.26
  %33 = load %struct._object*, %struct._object** %context, align 8
  %34 = load i32, i32* %status, align 4
  %call33 = call i32 @dec_addstatus(%struct._object* %33, i32 %34)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.then.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.then.32
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %land.lhs.true, %lor.lhs.false.29
  %35 = load i32, i32* %op.addr, align 4
  %cmp38 = icmp eq i32 %35, 3
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.37
  %call39 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end.37
  %call40 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call39, %cond.true ], [ %call40, %cond.false ]
  store %struct._object* %cond, %struct._object** %retval
  br label %return

if.end.41:                                        ; preds = %do.end.24
  %36 = load i32, i32* %op.addr, align 4
  switch i32 %36, label %sw.epilog [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.43
    i32 1, label %sw.bb.46
    i32 5, label %sw.bb.49
    i32 0, label %sw.bb.52
    i32 4, label %sw.bb.55
  ]

sw.bb:                                            ; preds = %if.end.41
  %37 = load i32, i32* %r, align 4
  %cmp42 = icmp eq i32 %37, 0
  %conv = zext i1 %cmp42 to i32
  store i32 %conv, i32* %r, align 4
  br label %sw.epilog

sw.bb.43:                                         ; preds = %if.end.41
  %38 = load i32, i32* %r, align 4
  %cmp44 = icmp ne i32 %38, 0
  %conv45 = zext i1 %cmp44 to i32
  store i32 %conv45, i32* %r, align 4
  br label %sw.epilog

sw.bb.46:                                         ; preds = %if.end.41
  %39 = load i32, i32* %r, align 4
  %cmp47 = icmp sle i32 %39, 0
  %conv48 = zext i1 %cmp47 to i32
  store i32 %conv48, i32* %r, align 4
  br label %sw.epilog

sw.bb.49:                                         ; preds = %if.end.41
  %40 = load i32, i32* %r, align 4
  %cmp50 = icmp sge i32 %40, 0
  %conv51 = zext i1 %cmp50 to i32
  store i32 %conv51, i32* %r, align 4
  br label %sw.epilog

sw.bb.52:                                         ; preds = %if.end.41
  %41 = load i32, i32* %r, align 4
  %cmp53 = icmp eq i32 %41, -1
  %conv54 = zext i1 %cmp53 to i32
  store i32 %conv54, i32* %r, align 4
  br label %sw.epilog

sw.bb.55:                                         ; preds = %if.end.41
  %42 = load i32, i32* %r, align 4
  %cmp56 = icmp eq i32 %42, 1
  %conv57 = zext i1 %cmp56 to i32
  store i32 %conv57, i32* %r, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.41, %sw.bb.55, %sw.bb.52, %sw.bb.49, %sw.bb.46, %sw.bb.43, %sw.bb
  %43 = load i32, i32* %r, align 4
  %conv58 = sext i32 %43 to i64
  %call59 = call %struct._object* @PyBool_FromLong(i64 %conv58)
  store %struct._object* %call59, %struct._object** %retval
  br label %return

return:                                           ; preds = %sw.epilog, %cond.end, %if.then.35, %if.then.2, %if.then
  %44 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %44
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* null, %struct._object** %v, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.114, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_new.kwlist, i32 0, i32 0), %struct._object** %v, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %10 = load %struct._object*, %struct._object** %v, align 8
  %11 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call %struct._object* @PyDecType_FromObjectExact(%struct._typeobject* %9, %struct._object* %10, %struct._object* %11)
  store %struct._object* %call13, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.10, %if.then.4, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

declare void @PyObject_Free(i8*) #1

declare hidden void @mpd_del(%struct.mpd_t*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @current_context() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** @cached_context, align 8
  %tobool = icmp ne %struct.PyDecContextObject* %11, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.epilog.3
  %12 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** @cached_context, align 8
  %tstate4 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 5
  %13 = load %struct._ts*, %struct._ts** %tstate4, align 8
  %14 = load %struct._ts*, %struct._ts** %tstate, align 8
  %cmp = icmp eq %struct._ts* %13, %14
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %15 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** @cached_context, align 8
  %16 = bitcast %struct.PyDecContextObject* %15 to %struct._object*
  store %struct._object* %16, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.epilog.3
  %call = call %struct._object* @current_context_from_dict()
  store %struct._object* %call, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

declare hidden i8* @mpd_to_sci(%struct.mpd_t*, i32) #1

declare %struct._object* @PyErr_NoMemory() #1

declare %struct._object* @PyUnicode_FromFormat(i8*, ...) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_ANNOTATE_MEMORY_ORDER(i8* %address, i32 %order) #2 {
entry:
  %address.addr = alloca i8*, align 8
  %order.addr = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %order, i32* %order.addr, align 4
  %0 = load i8*, i8** %address.addr, align 8
  %1 = load i32, i32* %order.addr, align 4
  switch i32 %1, label %sw.epilog [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 0, label %sw.bb.1
    i32 1, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %order.addr, align 4
  switch i32 %2, label %sw.epilog.4 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
    i32 0, label %sw.bb.3
    i32 2, label %sw.bb.3
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.bb.3:                                          ; preds = %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.epilog, %sw.bb.3, %sw.bb.2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_thread_fence(i32 %order) #2 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_signal_fence(i32 %order) #2 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #3, !srcloc !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @current_context_from_dict() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %tl_context = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp27 = alloca %struct._object*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %call = call %struct._object* @PyThreadState_GetDict()
  store %struct._object* %call, %struct._object** %dict, align 8
  %0 = load %struct._object*, %struct._object** %dict, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dict, align 8
  %3 = load %struct._object*, %struct._object** @tls_context_key, align 8
  %call1 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %tl_context, align 8
  %4 = load %struct._object*, %struct._object** %tl_context, align 8
  %cmp2 = icmp ne %struct._object* %4, null
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %tl_context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp4 = icmp eq %struct._typeobject* %6, @PyDecContext_Type
  br i1 %cmp4, label %if.end.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.3
  %7 = load %struct._object*, %struct._object** %tl_context, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %8, %struct._typeobject* @PyDecContext_Type)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %lor.lhs.false
  %9 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.30, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %lor.lhs.false, %if.then.3
  br label %if.end.37

if.else:                                          ; preds = %if.end
  %call9 = call %struct._object* @PyErr_Occurred()
  %tobool10 = icmp ne %struct._object* %call9, null
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.else
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.else
  %10 = load %struct._object*, %struct._object** @default_context_template, align 8
  %call13 = call %struct._object* @context_copy(%struct._object* %10, %struct._object* null)
  store %struct._object* %call13, %struct._object** %tl_context, align 8
  %11 = load %struct._object*, %struct._object** %tl_context, align 8
  %cmp14 = icmp eq %struct._object* %11, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %12 = load %struct._object*, %struct._object** %tl_context, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %13, i32 0, i32 1
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 4
  store i32 0, i32* %status, align 4
  %14 = load %struct._object*, %struct._object** %dict, align 8
  %15 = load %struct._object*, %struct._object** @tls_context_key, align 8
  %16 = load %struct._object*, %struct._object** %tl_context, align 8
  %call17 = call i32 @PyDict_SetItem(%struct._object* %14, %struct._object* %15, %struct._object* %16)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.25

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %17 = load %struct._object*, %struct._object** %tl_context, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %19, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  br label %do.body.26

do.body.26:                                       ; preds = %if.end.25
  %24 = load %struct._object*, %struct._object** %tl_context, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp27, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt28, align 8
  %dec29 = add i64 %26, -1
  store i64 %dec29, i64* %ob_refcnt28, align 8
  %cmp30 = icmp ne i64 %dec29, 0
  br i1 %cmp30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %do.body.26
  br label %if.end.35

if.else.32:                                       ; preds = %do.body.26
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_dealloc34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc34, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  call void %29(%struct._object* %30)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %if.then.31
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  br label %if.end.37

if.end.37:                                        ; preds = %do.end.36, %if.end.8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %31 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %31, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %32 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %33 = bitcast %struct._Py_atomic_address* %32 to i8*
  %34 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %33, i32 %34)
  %35 = load i32, i32* %order, align 4
  switch i32 %35, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end.37, %if.end.37, %if.end.37
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.37
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %36 = load i8**, i8*** %volatile_data, align 8
  %37 = load volatile i8*, i8** %36, align 8
  store i8* %37, i8** %result, align 8
  %38 = load i32, i32* %order, align 4
  switch i32 %38, label %sw.default.39 [
    i32 1, label %sw.bb.38
    i32 3, label %sw.bb.38
    i32 4, label %sw.bb.38
  ]

sw.bb.38:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.40

sw.default.39:                                    ; preds = %sw.epilog
  br label %sw.epilog.40

sw.epilog.40:                                     ; preds = %sw.default.39, %sw.bb.38
  %39 = load i8*, i8** %result, align 8
  store i8* %39, i8** %tmp
  %40 = load i8*, i8** %tmp
  %41 = bitcast i8* %40 to %struct._ts*
  store %struct._ts* %41, %struct._ts** %tstate, align 8
  %42 = load %struct._ts*, %struct._ts** %tstate, align 8
  %tobool41 = icmp ne %struct._ts* %42, null
  br i1 %tobool41, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %sw.epilog.40
  %43 = load %struct._object*, %struct._object** %tl_context, align 8
  %44 = bitcast %struct._object* %43 to %struct.PyDecContextObject*
  store %struct.PyDecContextObject* %44, %struct.PyDecContextObject** @cached_context, align 8
  %45 = load %struct._ts*, %struct._ts** %tstate, align 8
  %46 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** @cached_context, align 8
  %tstate43 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %46, i32 0, i32 5
  store %struct._ts* %45, %struct._ts** %tstate43, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %sw.epilog.40
  %47 = load %struct._object*, %struct._object** %tl_context, align 8
  store %struct._object* %47, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.44, %do.end, %if.then.15, %if.then.11, %if.then.7, %if.then
  %48 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %48
}

declare %struct._object* @PyThreadState_GetDict() #1

declare void @PyErr_SetString(%struct._object*, i8*) #1

declare %struct._object* @PyDict_GetItemWithError(%struct._object*, %struct._object*) #1

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #1

declare %struct._object* @PyErr_Occurred() #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_copy(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %copy = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %call = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyDecContext_Type, i32 0, i32 0, i32 0), %struct._object* null)
  store %struct._object* %call, %struct._object** %copy, align 8
  %0 = load %struct._object*, %struct._object** %copy, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %copy, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %2, i32 0, i32 1
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %4, i32 0, i32 1
  %5 = bitcast %struct.mpd_context_t* %ctx to i8*
  %6 = bitcast %struct.mpd_context_t* %ctx1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %5, i8* %6, i64 48, i32 8, i1 false)
  %7 = load %struct._object*, %struct._object** %copy, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDecContextObject*
  %ctx2 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %8, i32 0, i32 1
  %newtrap = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx2, i32 0, i32 5
  store i32 0, i32* %newtrap, align 4
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %10, i32 0, i32 4
  %11 = load i32, i32* %capitals, align 4
  %12 = load %struct._object*, %struct._object** %copy, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecContextObject*
  %capitals3 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %13, i32 0, i32 4
  store i32 %11, i32* %capitals3, align 4
  %14 = load %struct._object*, %struct._object** %copy, align 8
  store %struct._object* %14, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #3

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qadd(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp15, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %16, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %19(%struct._object* %20)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp26, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %23, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %26(%struct._object* %27)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %28 = load %struct._object*, %struct._object** %result, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %a, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %b, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %33, i32 0, i32 2
  %34 = load %struct._object*, %struct._object** %context, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %35, i32 0, i32 1
  call void @mpd_qadd(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %36 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %38, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %41(%struct._object* %42)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %43 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %45, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %48(%struct._object* %49)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %50 = load %struct._object*, %struct._object** %context, align 8
  %51 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %50, i32 %51)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp66, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %54, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %57(%struct._object* %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %59 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %59, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.2, %if.then
  %60 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %60
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qsub(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp15, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %16, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %19(%struct._object* %20)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp26, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %23, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %26(%struct._object* %27)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %28 = load %struct._object*, %struct._object** %result, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %a, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %b, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %33, i32 0, i32 2
  %34 = load %struct._object*, %struct._object** %context, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %35, i32 0, i32 1
  call void @mpd_qsub(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %36 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %38, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %41(%struct._object* %42)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %43 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %45, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %48(%struct._object* %49)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %50 = load %struct._object*, %struct._object** %context, align 8
  %51 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %50, i32 %51)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp66, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %54, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %57(%struct._object* %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %59 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %59, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.2, %if.then
  %60 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %60
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qmul(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp15, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %16, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %19(%struct._object* %20)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp26, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %23, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %26(%struct._object* %27)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %28 = load %struct._object*, %struct._object** %result, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %a, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %b, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %33, i32 0, i32 2
  %34 = load %struct._object*, %struct._object** %context, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %35, i32 0, i32 1
  call void @mpd_qmul(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %36 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %38, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %41(%struct._object* %42)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %43 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %45, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %48(%struct._object* %49)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %50 = load %struct._object*, %struct._object** %context, align 8
  %51 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %50, i32 %51)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp66, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %54, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %57(%struct._object* %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %59 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %59, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.2, %if.then
  %60 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %60
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qrem(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp15, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %16, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %19(%struct._object* %20)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp26, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %23, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %26(%struct._object* %27)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %28 = load %struct._object*, %struct._object** %result, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %a, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %b, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %33, i32 0, i32 2
  %34 = load %struct._object*, %struct._object** %context, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %35, i32 0, i32 1
  call void @mpd_qrem(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %36 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %38, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %41(%struct._object* %42)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %43 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %45, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %48(%struct._object* %49)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %50 = load %struct._object*, %struct._object** %context, align 8
  %51 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %50, i32 %51)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp66, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %54, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %57(%struct._object* %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %59 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %59, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.2, %if.then
  %60 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %60
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qdivmod(%struct._object* %v, %struct._object* %w) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %q = alloca %struct._object*, align 8
  %r = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %ret = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp79 = alloca %struct._object*, align 8
  %_py_decref_tmp90 = alloca %struct._object*, align 8
  %_py_decref_tmp104 = alloca %struct._object*, align 8
  %_py_decref_tmp115 = alloca %struct._object*, align 8
  %_py_decref_tmp128 = alloca %struct._object*, align 8
  %_py_decref_tmp139 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %w, %struct._object** %w.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %w.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %q, align 8
  %14 = load %struct._object*, %struct._object** %q, align 8
  %cmp12 = icmp eq %struct._object* %14, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp15, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %17, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %20(%struct._object* %21)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %22 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp26, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %24, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %27(%struct._object* %28)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %call37 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call37, %struct._object** %r, align 8
  %29 = load %struct._object*, %struct._object** %r, align 8
  %cmp38 = icmp eq %struct._object* %29, null
  br i1 %cmp38, label %if.then.39, label %if.end.73

if.then.39:                                       ; preds = %if.end.36
  br label %do.body.40

do.body.40:                                       ; preds = %if.then.39
  %30 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp41, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %32, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %35(%struct._object* %36)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %37 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp52, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %39, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %42(%struct._object* %43)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  br label %do.body.62

do.body.62:                                       ; preds = %do.end.61
  %44 = load %struct._object*, %struct._object** %q, align 8
  store %struct._object* %44, %struct._object** %_py_decref_tmp63, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0
  %46 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %46, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.67, label %if.else.68

if.then.67:                                       ; preds = %do.body.62
  br label %if.end.71

if.else.68:                                       ; preds = %do.body.62
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type69 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type69, align 8
  %tp_dealloc70 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc70, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %49(%struct._object* %50)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.68, %if.then.67
  br label %do.end.72

do.end.72:                                        ; preds = %if.end.71
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.73:                                        ; preds = %if.end.36
  %51 = load %struct._object*, %struct._object** %q, align 8
  %52 = bitcast %struct._object* %51 to %struct.PyDecObject*
  %dec74 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %52, i32 0, i32 2
  %53 = load %struct._object*, %struct._object** %r, align 8
  %54 = bitcast %struct._object* %53 to %struct.PyDecObject*
  %dec75 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %54, i32 0, i32 2
  %55 = load %struct._object*, %struct._object** %a, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyDecObject*
  %dec76 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %56, i32 0, i32 2
  %57 = load %struct._object*, %struct._object** %b, align 8
  %58 = bitcast %struct._object* %57 to %struct.PyDecObject*
  %dec77 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %58, i32 0, i32 2
  %59 = load %struct._object*, %struct._object** %context, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %60, i32 0, i32 1
  call void @mpd_qdivmod(%struct.mpd_t* %dec74, %struct.mpd_t* %dec75, %struct.mpd_t* %dec76, %struct.mpd_t* %dec77, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.78

do.body.78:                                       ; preds = %if.end.73
  %61 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp79, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_refcnt80 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt80, align 8
  %dec81 = add i64 %63, -1
  store i64 %dec81, i64* %ob_refcnt80, align 8
  %cmp82 = icmp ne i64 %dec81, 0
  br i1 %cmp82, label %if.then.83, label %if.else.84

if.then.83:                                       ; preds = %do.body.78
  br label %if.end.87

if.else.84:                                       ; preds = %do.body.78
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_type85 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type85, align 8
  %tp_dealloc86 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc86, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  call void %66(%struct._object* %67)
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.84, %if.then.83
  br label %do.end.88

do.end.88:                                        ; preds = %if.end.87
  br label %do.body.89

do.body.89:                                       ; preds = %do.end.88
  %68 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp90, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_refcnt91 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt91, align 8
  %dec92 = add i64 %70, -1
  store i64 %dec92, i64* %ob_refcnt91, align 8
  %cmp93 = icmp ne i64 %dec92, 0
  br i1 %cmp93, label %if.then.94, label %if.else.95

if.then.94:                                       ; preds = %do.body.89
  br label %if.end.98

if.else.95:                                       ; preds = %do.body.89
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_type96 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type96, align 8
  %tp_dealloc97 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc97, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  call void %73(%struct._object* %74)
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.95, %if.then.94
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  %75 = load %struct._object*, %struct._object** %context, align 8
  %76 = load i32, i32* %status, align 4
  %call100 = call i32 @dec_addstatus(%struct._object* %75, i32 %76)
  %tobool101 = icmp ne i32 %call100, 0
  br i1 %tobool101, label %if.then.102, label %if.end.125

if.then.102:                                      ; preds = %do.end.99
  br label %do.body.103

do.body.103:                                      ; preds = %if.then.102
  %77 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp104, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_refcnt105 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt105, align 8
  %dec106 = add i64 %79, -1
  store i64 %dec106, i64* %ob_refcnt105, align 8
  %cmp107 = icmp ne i64 %dec106, 0
  br i1 %cmp107, label %if.then.108, label %if.else.109

if.then.108:                                      ; preds = %do.body.103
  br label %if.end.112

if.else.109:                                      ; preds = %do.body.103
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_type110 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type110, align 8
  %tp_dealloc111 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc111, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  call void %82(%struct._object* %83)
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.109, %if.then.108
  br label %do.end.113

do.end.113:                                       ; preds = %if.end.112
  br label %do.body.114

do.body.114:                                      ; preds = %do.end.113
  %84 = load %struct._object*, %struct._object** %q, align 8
  store %struct._object* %84, %struct._object** %_py_decref_tmp115, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 0
  %86 = load i64, i64* %ob_refcnt116, align 8
  %dec117 = add i64 %86, -1
  store i64 %dec117, i64* %ob_refcnt116, align 8
  %cmp118 = icmp ne i64 %dec117, 0
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %do.body.114
  br label %if.end.123

if.else.120:                                      ; preds = %do.body.114
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_type121 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type121, align 8
  %tp_dealloc122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 4
  %89 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc122, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  call void %89(%struct._object* %90)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.120, %if.then.119
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.125:                                       ; preds = %do.end.99
  %91 = load %struct._object*, %struct._object** %q, align 8
  %92 = load %struct._object*, %struct._object** %r, align 8
  %call126 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), %struct._object* %91, %struct._object* %92)
  store %struct._object* %call126, %struct._object** %ret, align 8
  br label %do.body.127

do.body.127:                                      ; preds = %if.end.125
  %93 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %93, %struct._object** %_py_decref_tmp128, align 8
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  %ob_refcnt129 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 0
  %95 = load i64, i64* %ob_refcnt129, align 8
  %dec130 = add i64 %95, -1
  store i64 %dec130, i64* %ob_refcnt129, align 8
  %cmp131 = icmp ne i64 %dec130, 0
  br i1 %cmp131, label %if.then.132, label %if.else.133

if.then.132:                                      ; preds = %do.body.127
  br label %if.end.136

if.else.133:                                      ; preds = %do.body.127
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  %ob_type134 = getelementptr inbounds %struct._object, %struct._object* %96, i32 0, i32 1
  %97 = load %struct._typeobject*, %struct._typeobject** %ob_type134, align 8
  %tp_dealloc135 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %97, i32 0, i32 4
  %98 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc135, align 8
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  call void %98(%struct._object* %99)
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.133, %if.then.132
  br label %do.end.137

do.end.137:                                       ; preds = %if.end.136
  br label %do.body.138

do.body.138:                                      ; preds = %do.end.137
  %100 = load %struct._object*, %struct._object** %q, align 8
  store %struct._object* %100, %struct._object** %_py_decref_tmp139, align 8
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_refcnt140 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 0
  %102 = load i64, i64* %ob_refcnt140, align 8
  %dec141 = add i64 %102, -1
  store i64 %dec141, i64* %ob_refcnt140, align 8
  %cmp142 = icmp ne i64 %dec141, 0
  br i1 %cmp142, label %if.then.143, label %if.else.144

if.then.143:                                      ; preds = %do.body.138
  br label %if.end.147

if.else.144:                                      ; preds = %do.body.138
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_type145 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 1
  %104 = load %struct._typeobject*, %struct._typeobject** %ob_type145, align 8
  %tp_dealloc146 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %104, i32 0, i32 4
  %105 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc146, align 8
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  call void %105(%struct._object* %106)
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.143
  br label %do.end.148

do.end.148:                                       ; preds = %if.end.147
  %107 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %107, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.148, %do.end.124, %do.end.72, %do.end.35, %do.end, %if.then.2, %if.then
  %108 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %108
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qpow(%struct._object* %base, %struct._object* %exp, %struct._object* %mod) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %base.addr = alloca %struct._object*, align 8
  %exp.addr = alloca %struct._object*, align 8
  %mod.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %c = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  %_py_decref_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp55 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp94 = alloca %struct._object*, align 8
  %_py_decref_tmp106 = alloca %struct._object*, align 8
  %_py_decref_tmp117 = alloca %struct._object*, align 8
  %_py_decref_tmp131 = alloca %struct._object*, align 8
  store %struct._object* %base, %struct._object** %base.addr, align 8
  store %struct._object* %exp, %struct._object** %exp.addr, align 8
  store %struct._object* %mod, %struct._object** %mod.addr, align 8
  store %struct._object* null, %struct._object** %c, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %base.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %exp.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %14 = load %struct._object*, %struct._object** %mod.addr, align 8
  %cmp11 = icmp ne %struct._object* %14, @_Py_NoneStruct
  br i1 %cmp11, label %if.then.12, label %if.end.39

if.then.12:                                       ; preds = %if.end.10
  %15 = load %struct._object*, %struct._object** %mod.addr, align 8
  %16 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 0, %struct._object** %c, %struct._object* %15, %struct._object* %16)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.38, label %if.then.15

if.then.15:                                       ; preds = %if.then.12
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  %17 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp17, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %19, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %22(%struct._object* %23)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %24 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp28, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %26, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.27
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %29(%struct._object* %30)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  %31 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

if.end.38:                                        ; preds = %if.then.12
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.end.10
  %call40 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call40, %struct._object** %result, align 8
  %32 = load %struct._object*, %struct._object** %result, align 8
  %cmp41 = icmp eq %struct._object* %32, null
  br i1 %cmp41, label %if.then.42, label %if.end.81

if.then.42:                                       ; preds = %if.end.39
  br label %do.body.43

do.body.43:                                       ; preds = %if.then.42
  %33 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %33, %struct._object** %_py_decref_tmp44, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt45, align 8
  %dec46 = add i64 %35, -1
  store i64 %dec46, i64* %ob_refcnt45, align 8
  %cmp47 = icmp ne i64 %dec46, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.43
  br label %if.end.52

if.else.49:                                       ; preds = %do.body.43
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %tp_dealloc51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc51, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  call void %38(%struct._object* %39)
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.49, %if.then.48
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.end.53
  %40 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp55, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt56, align 8
  %dec57 = add i64 %42, -1
  store i64 %dec57, i64* %ob_refcnt56, align 8
  %cmp58 = icmp ne i64 %dec57, 0
  br i1 %cmp58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.54
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.54
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  call void %45(%struct._object* %46)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  br label %do.body.65

do.body.65:                                       ; preds = %do.end.64
  %47 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %47, %struct._object** %_py_xdecref_tmp, align 8
  %48 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp66 = icmp ne %struct._object* %48, null
  br i1 %cmp66, label %if.then.67, label %if.end.79

if.then.67:                                       ; preds = %do.body.65
  br label %do.body.68

do.body.68:                                       ; preds = %if.then.67
  %49 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp69, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %51, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.68
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.68
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %54(%struct._object* %55)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  br label %if.end.79

if.end.79:                                        ; preds = %do.end.78, %do.body.65
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.81:                                        ; preds = %if.end.39
  %56 = load %struct._object*, %struct._object** %c, align 8
  %cmp82 = icmp eq %struct._object* %56, null
  br i1 %cmp82, label %if.then.83, label %if.else.87

if.then.83:                                       ; preds = %if.end.81
  %57 = load %struct._object*, %struct._object** %result, align 8
  %58 = bitcast %struct._object* %57 to %struct.PyDecObject*
  %dec84 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %58, i32 0, i32 2
  %59 = load %struct._object*, %struct._object** %a, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyDecObject*
  %dec85 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %60, i32 0, i32 2
  %61 = load %struct._object*, %struct._object** %b, align 8
  %62 = bitcast %struct._object* %61 to %struct.PyDecObject*
  %dec86 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %62, i32 0, i32 2
  %63 = load %struct._object*, %struct._object** %context, align 8
  %64 = bitcast %struct._object* %63 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %64, i32 0, i32 1
  call void @mpd_qpow(%struct.mpd_t* %dec84, %struct.mpd_t* %dec85, %struct.mpd_t* %dec86, %struct.mpd_context_t* %ctx, i32* %status)
  br label %if.end.104

if.else.87:                                       ; preds = %if.end.81
  %65 = load %struct._object*, %struct._object** %result, align 8
  %66 = bitcast %struct._object* %65 to %struct.PyDecObject*
  %dec88 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %66, i32 0, i32 2
  %67 = load %struct._object*, %struct._object** %a, align 8
  %68 = bitcast %struct._object* %67 to %struct.PyDecObject*
  %dec89 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %68, i32 0, i32 2
  %69 = load %struct._object*, %struct._object** %b, align 8
  %70 = bitcast %struct._object* %69 to %struct.PyDecObject*
  %dec90 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %70, i32 0, i32 2
  %71 = load %struct._object*, %struct._object** %c, align 8
  %72 = bitcast %struct._object* %71 to %struct.PyDecObject*
  %dec91 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %72, i32 0, i32 2
  %73 = load %struct._object*, %struct._object** %context, align 8
  %74 = bitcast %struct._object* %73 to %struct.PyDecContextObject*
  %ctx92 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %74, i32 0, i32 1
  call void @mpd_qpowmod(%struct.mpd_t* %dec88, %struct.mpd_t* %dec89, %struct.mpd_t* %dec90, %struct.mpd_t* %dec91, %struct.mpd_context_t* %ctx92, i32* %status)
  br label %do.body.93

do.body.93:                                       ; preds = %if.else.87
  %75 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %75, %struct._object** %_py_decref_tmp94, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_refcnt95 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0
  %77 = load i64, i64* %ob_refcnt95, align 8
  %dec96 = add i64 %77, -1
  store i64 %dec96, i64* %ob_refcnt95, align 8
  %cmp97 = icmp ne i64 %dec96, 0
  br i1 %cmp97, label %if.then.98, label %if.else.99

if.then.98:                                       ; preds = %do.body.93
  br label %if.end.102

if.else.99:                                       ; preds = %do.body.93
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_type100 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type100, align 8
  %tp_dealloc101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc101, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  call void %80(%struct._object* %81)
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.99, %if.then.98
  br label %do.end.103

do.end.103:                                       ; preds = %if.end.102
  br label %if.end.104

if.end.104:                                       ; preds = %do.end.103, %if.then.83
  br label %do.body.105

do.body.105:                                      ; preds = %if.end.104
  %82 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp106, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  %ob_refcnt107 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt107, align 8
  %dec108 = add i64 %84, -1
  store i64 %dec108, i64* %ob_refcnt107, align 8
  %cmp109 = icmp ne i64 %dec108, 0
  br i1 %cmp109, label %if.then.110, label %if.else.111

if.then.110:                                      ; preds = %do.body.105
  br label %if.end.114

if.else.111:                                      ; preds = %do.body.105
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  %ob_type112 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type112, align 8
  %tp_dealloc113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc113, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  call void %87(%struct._object* %88)
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.111, %if.then.110
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  br label %do.body.116

do.body.116:                                      ; preds = %do.end.115
  %89 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %89, %struct._object** %_py_decref_tmp117, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8
  %ob_refcnt118 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt118, align 8
  %dec119 = add i64 %91, -1
  store i64 %dec119, i64* %ob_refcnt118, align 8
  %cmp120 = icmp ne i64 %dec119, 0
  br i1 %cmp120, label %if.then.121, label %if.else.122

if.then.121:                                      ; preds = %do.body.116
  br label %if.end.125

if.else.122:                                      ; preds = %do.body.116
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8
  %ob_type123 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type123, align 8
  %tp_dealloc124 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc124, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8
  call void %94(%struct._object* %95)
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.122, %if.then.121
  br label %do.end.126

do.end.126:                                       ; preds = %if.end.125
  %96 = load %struct._object*, %struct._object** %context, align 8
  %97 = load i32, i32* %status, align 4
  %call127 = call i32 @dec_addstatus(%struct._object* %96, i32 %97)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.then.129, label %if.end.141

if.then.129:                                      ; preds = %do.end.126
  br label %do.body.130

do.body.130:                                      ; preds = %if.then.129
  %98 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %98, %struct._object** %_py_decref_tmp131, align 8
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  %ob_refcnt132 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0
  %100 = load i64, i64* %ob_refcnt132, align 8
  %dec133 = add i64 %100, -1
  store i64 %dec133, i64* %ob_refcnt132, align 8
  %cmp134 = icmp ne i64 %dec133, 0
  br i1 %cmp134, label %if.then.135, label %if.else.136

if.then.135:                                      ; preds = %do.body.130
  br label %if.end.139

if.else.136:                                      ; preds = %do.body.130
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  %ob_type137 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type137, align 8
  %tp_dealloc138 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc138, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  call void %103(%struct._object* %104)
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.136, %if.then.135
  br label %do.end.140

do.end.140:                                       ; preds = %if.end.139
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.141:                                       ; preds = %do.end.126
  %105 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %105, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.141, %do.end.140, %do.end.80, %do.end.37, %do.end, %if.then.2, %if.then
  %106 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %106
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qminus(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp2 = icmp eq %struct._object* %call1, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %1 = load %struct._object*, %struct._object** %result, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecObject*
  %dec5 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %context, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 1
  call void @mpd_qminus(%struct.mpd_t* %dec, %struct.mpd_t* %dec5, %struct.mpd_context_t* %ctx, i32* %status)
  %7 = load %struct._object*, %struct._object** %context, align 8
  %8 = load i32, i32* %status, align 4
  %call6 = call i32 @dec_addstatus(%struct._object* %7, i32 %8)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %9 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec8 = add i64 %11, -1
  store i64 %dec8, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec8, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.4
  %16 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %do.end, %if.then.3, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qplus(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp2 = icmp eq %struct._object* %call1, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %1 = load %struct._object*, %struct._object** %result, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecObject*
  %dec5 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %context, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 1
  call void @mpd_qplus(%struct.mpd_t* %dec, %struct.mpd_t* %dec5, %struct.mpd_context_t* %ctx, i32* %status)
  %7 = load %struct._object*, %struct._object** %context, align 8
  %8 = load i32, i32* %status, align 4
  %call6 = call i32 @dec_addstatus(%struct._object* %7, i32 %8)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %9 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec8 = add i64 %11, -1
  store i64 %dec8, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec8, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.4
  %16 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %do.end, %if.then.3, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qabs(%struct._object* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp2 = icmp eq %struct._object* %call1, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %1 = load %struct._object*, %struct._object** %result, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecObject*
  %dec5 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %context, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 1
  call void @mpd_qabs(%struct.mpd_t* %dec, %struct.mpd_t* %dec5, %struct.mpd_context_t* %ctx, i32* %status)
  %7 = load %struct._object*, %struct._object** %context, align 8
  %8 = load i32, i32* %status, align 4
  %call6 = call i32 @dec_addstatus(%struct._object* %7, i32 %8)
  %tobool = icmp ne i32 %call6, 0
  br i1 %tobool, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %9 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec8 = add i64 %11, -1
  store i64 %dec8, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec8, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.4
  %16 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %do.end, %if.then.3, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal i32 @nm_nonzero(%struct._object* %v) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_iszero(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  ret i32 %lnot.ext
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_dec_as_long(%struct._object* %dec) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %dec.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call %struct._object* @dec_as_long(%struct._object* %1, %struct._object* %2, i32 1)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_AsFloat(%struct._object* %dec) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %f = alloca %struct._object*, align 8
  %s = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  %0 = load %struct._object*, %struct._object** %dec.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isnan(%struct.mpd_t* %dec1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else.13

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dec.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec2 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call3 = call i32 @mpd_issnan(%struct.mpd_t* %dec2)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.36, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %dec.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecObject*
  %dec6 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %6, i32 0, i32 2
  %call7 = call i32 @mpd_isnegative(%struct.mpd_t* %dec6)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end
  %call10 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0))
  store %struct._object* %call10, %struct._object** %s, align 8
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %call11 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i32 0, i32 0))
  store %struct._object* %call11, %struct._object** %s, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.9
  br label %if.end.15

if.else.13:                                       ; preds = %entry
  %7 = load %struct._object*, %struct._object** %dec.addr, align 8
  %call14 = call %struct._object* @dec_str(%struct._object* %7)
  store %struct._object* %call14, %struct._object** %s, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.13, %if.end.12
  %8 = load %struct._object*, %struct._object** %s, align 8
  %cmp = icmp eq %struct._object* %8, null
  br i1 %cmp, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.17:                                        ; preds = %if.end.15
  %9 = load %struct._object*, %struct._object** %s, align 8
  %call18 = call %struct._object* @PyFloat_FromString(%struct._object* %9)
  store %struct._object* %call18, %struct._object** %f, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.17
  %10 = load %struct._object*, %struct._object** %s, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec19 = add i64 %12, -1
  store i64 %dec19, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.23

if.else.22:                                       ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.23
  %17 = load %struct._object*, %struct._object** %f, align 8
  store %struct._object* %17, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.16, %if.then.5
  %18 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %18
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qdivint(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp15, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %16, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %19(%struct._object* %20)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp26, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %23, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %26(%struct._object* %27)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %28 = load %struct._object*, %struct._object** %result, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %a, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %b, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %33, i32 0, i32 2
  %34 = load %struct._object*, %struct._object** %context, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %35, i32 0, i32 1
  call void @mpd_qdivint(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %36 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %38, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %41(%struct._object* %42)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %43 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %45, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %48(%struct._object* %49)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %50 = load %struct._object*, %struct._object** %context, align 8
  %51 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %50, i32 %51)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp66, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %54, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %57(%struct._object* %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %59 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %59, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.2, %if.then
  %60 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %60
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @nm_mpd_qdiv(%struct._object* %self, %struct._object* %other) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %other.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %other, %struct._object** %other.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call i32 @convert_op(i32 0, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %other.addr, align 8
  %5 = load %struct._object*, %struct._object** %context, align 8
  %call4 = call i32 @convert_op(i32 0, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.end.10, label %if.then.6

if.then.6:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %13 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.3
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp15, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %16, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %19(%struct._object* %20)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp26, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %23, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %26(%struct._object* %27)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %28 = load %struct._object*, %struct._object** %result, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %a, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %b, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %33, i32 0, i32 2
  %34 = load %struct._object*, %struct._object** %context, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %35, i32 0, i32 1
  call void @mpd_qdiv(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %36 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %38, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %41(%struct._object* %42)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %43 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp52, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %45, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %48(%struct._object* %49)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %50 = load %struct._object*, %struct._object** %context, align 8
  %51 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %50, i32 %51)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp66, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %54, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %57(%struct._object* %58)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %59 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %59, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.2, %if.then
  %60 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %60
}

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @convert_op(i32 %type_err, %struct._object** %conv, %struct._object* %v, %struct._object* %context) #2 {
entry:
  %retval = alloca i32, align 4
  %type_err.addr = alloca i32, align 4
  %conv.addr = alloca %struct._object**, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  store i32 %type_err, i32* %type_err.addr, align 4
  store %struct._object** %conv, %struct._object*** %conv.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDec_Type
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDec_Type)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** %v.addr, align 8
  %5 = load %struct._object**, %struct._object*** %conv.addr, align 8
  store %struct._object* %4, %struct._object** %5, align 8
  %6 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 19
  %10 = load i64, i64* %tp_flags, align 8
  %and = and i64 %10, 16777216
  %cmp4 = icmp ne i64 %and, 0
  br i1 %cmp4, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %v.addr, align 8
  %12 = load %struct._object*, %struct._object** %context.addr, align 8
  %call7 = call %struct._object* @PyDecType_FromLongExact(%struct._typeobject* @PyDec_Type, %struct._object* %11, %struct._object* %12)
  %13 = load %struct._object**, %struct._object*** %conv.addr, align 8
  store %struct._object* %call7, %struct._object** %13, align 8
  %14 = load %struct._object**, %struct._object*** %conv.addr, align 8
  %15 = load %struct._object*, %struct._object** %14, align 8
  %cmp8 = icmp eq %struct._object* %15, null
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.6
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.6
  store i32 1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end
  %16 = load i32, i32* %type_err.addr, align 4
  %tobool13 = icmp ne i32 %16, 0
  br i1 %tobool13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %if.end.12
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %18 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 1
  %20 = load i8*, i8** %tp_name, align 8
  %call16 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %17, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.31, i32 0, i32 0), i8* %20)
  br label %if.end.18

if.else:                                          ; preds = %if.end.12
  %21 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc17 = add i64 %21, 1
  store i64 %inc17, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %22 = load %struct._object**, %struct._object*** %conv.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %22, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.14
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.18, %if.end.11, %if.then.10, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_New(%struct._typeobject* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %dec = alloca %struct.PyDecObject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %cmp = icmp eq %struct._typeobject* %0, @PyDec_Type
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct._object* @_PyObject_New(%struct._typeobject* @PyDec_Type)
  %1 = bitcast %struct._object* %call to %struct.PyDecObject*
  store %struct.PyDecObject* %1, %struct.PyDecObject** %dec, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 36
  %3 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call1 = call %struct._object* %3(%struct._typeobject* %4, i64 0)
  %5 = bitcast %struct._object* %call1 to %struct.PyDecObject*
  store %struct.PyDecObject* %5, %struct.PyDecObject** %dec, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %cmp2 = icmp eq %struct.PyDecObject* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %7 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %hash = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %7, i32 0, i32 1
  store i64 -1, i64* %hash, align 8
  %8 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %dec5 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %8, i32 0, i32 2
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec5, i32 0, i32 0
  store i8 48, i8* %flags, align 1
  %9 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %dec6 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %9, i32 0, i32 2
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec6, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %10 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec7, i32 0, i32 2
  store i64 0, i64* %digits, align 8
  %11 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec8, i32 0, i32 3
  store i64 0, i64* %len, align 8
  %12 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %dec9 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec9, i32 0, i32 4
  store i64 4, i64* %alloc, align 8
  %13 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %data = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %13, i32 0, i32 3
  %arraydecay = getelementptr inbounds [4 x i64], [4 x i64]* %data, i32 0, i32 0
  %14 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %dec10 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %14, i32 0, i32 2
  %data11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec10, i32 0, i32 5
  store i64* %arraydecay, i64** %data11, align 8
  %15 = load %struct.PyDecObject*, %struct.PyDecObject** %dec, align 8
  %16 = bitcast %struct.PyDecObject* %15 to %struct._object*
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

declare hidden void @mpd_qadd(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

; Function Attrs: nounwind uwtable
define internal i32 @dec_addstatus(%struct._object* %context, i32 %status) #0 {
entry:
  %retval = alloca i32, align 4
  %context.addr = alloca %struct._object*, align 8
  %status.addr = alloca i32, align 4
  %ctx = alloca %struct.mpd_context_t*, align 8
  %ex = alloca %struct._object*, align 8
  %siglist = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 %status, i32* %status.addr, align 4
  %0 = load %struct._object*, %struct._object** %context.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  store %struct.mpd_context_t* %ctx1, %struct.mpd_context_t** %ctx, align 8
  %2 = load i32, i32* %status.addr, align 4
  %3 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %status2 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %3, i32 0, i32 4
  %4 = load i32, i32* %status2, align 4
  %or = or i32 %4, %2
  store i32 %or, i32* %status2, align 4
  %5 = load i32, i32* %status.addr, align 4
  %6 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %traps = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %6, i32 0, i32 3
  %7 = load i32, i32* %traps, align 4
  %or3 = or i32 %7, 512
  %and = and i32 %5, %or3
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.21

if.then:                                          ; preds = %entry
  %8 = load i32, i32* %status.addr, align 4
  %and4 = and i32 %8, 512
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then
  %call = call %struct._object* @PyErr_NoMemory()
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %9 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %traps7 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %9, i32 0, i32 3
  %10 = load i32, i32* %traps7, align 4
  %11 = load i32, i32* %status.addr, align 4
  %and8 = and i32 %10, %11
  %call9 = call %struct._object* @flags_as_exception(i32 %and8)
  store %struct._object* %call9, %struct._object** %ex, align 8
  %12 = load %struct._object*, %struct._object** %ex, align 8
  %cmp = icmp eq %struct._object* %12, null
  br i1 %cmp, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %traps12 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %13, i32 0, i32 3
  %14 = load i32, i32* %traps12, align 4
  %15 = load i32, i32* %status.addr, align 4
  %and13 = and i32 %14, %15
  %call14 = call %struct._object* @flags_as_list(i32 %and13)
  store %struct._object* %call14, %struct._object** %siglist, align 8
  %16 = load %struct._object*, %struct._object** %siglist, align 8
  %cmp15 = icmp eq %struct._object* %16, null
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.11
  store i32 1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.11
  %17 = load %struct._object*, %struct._object** %ex, align 8
  %18 = load %struct._object*, %struct._object** %siglist, align 8
  call void @PyErr_SetObject(%struct._object* %17, %struct._object* %18)
  br label %do.body

do.body:                                          ; preds = %if.end.17
  %19 = load %struct._object*, %struct._object** %siglist, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp18 = icmp ne i64 %dec, 0
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %do.body
  br label %if.end.20

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.19
  br label %do.end

do.end:                                           ; preds = %if.end.20
  store i32 1, i32* %retval
  br label %return

if.end.21:                                        ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.21, %do.end, %if.then.16, %if.then.10, %if.then.6
  %26 = load i32, i32* %retval
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromLongExact(%struct._typeobject* %type, %struct._object* %pylong, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %pylong.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %maxctx = alloca %struct.mpd_context_t, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %pylong, %struct._object** %pylong.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %pylong.addr, align 8
  %call = call %struct._object* @dec_from_long(%struct._typeobject* %0, %struct._object* %1, %struct.mpd_context_t* %maxctx, i32* %status)
  store %struct._object* %call, %struct._object** %dec, align 8
  %2 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %status, align 4
  %and = and i32 %3, 4161
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.3

if.then.1:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %dec, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecObject*
  %dec2 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %5, i32 0, i32 2
  call void @mpd_seterror(%struct.mpd_t* %dec2, i32 256, i32* %status)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.1, %if.end
  %6 = load i32, i32* %status, align 4
  %and4 = and i32 %6, 958
  store i32 %and4, i32* %status, align 4
  %7 = load %struct._object*, %struct._object** %context.addr, align 8
  %8 = load i32, i32* %status, align 4
  %call5 = call i32 @dec_addstatus(%struct._object* %7, i32 %8)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.end.12

if.then.7:                                        ; preds = %if.end.3
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %9 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec8 = add i64 %11, -1
  store i64 %dec8, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec8, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.3
  %16 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %do.end, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #1

declare hidden void @mpd_maxcontext(%struct.mpd_context_t*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_from_long(%struct._typeobject* %type, %struct._object* %v, %struct.mpd_context_t* %ctx, i32* %status) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ctx.addr = alloca %struct.mpd_context_t*, align 8
  %status.addr = alloca i32*, align 8
  %dec = alloca %struct._object*, align 8
  %l = alloca %struct._longobject*, align 8
  %ob_size = alloca i64, align 8
  %len = alloca i64, align 8
  %sign = alloca i8, align 1
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct.mpd_context_t* %ctx, %struct.mpd_context_t** %ctx.addr, align 8
  store i32* %status, i32** %status.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._longobject*
  store %struct._longobject* %1, %struct._longobject** %l, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* %2)
  store %struct._object* %call, %struct._object** %dec, align 8
  %3 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._longobject*, %struct._longobject** %l, align 8
  %5 = bitcast %struct._longobject* %4 to %struct.PyVarObject*
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1
  %6 = load i64, i64* %ob_size1, align 8
  store i64 %6, i64* %ob_size, align 8
  %7 = load i64, i64* %ob_size, align 8
  %cmp2 = icmp eq i64 %7, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %dec, align 8
  call void @_dec_settriple(%struct._object* %8, i8 zeroext 0, i32 0, i64 0)
  %9 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %9, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %10 = load i64, i64* %ob_size, align 8
  %cmp5 = icmp slt i64 %10, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %if.end.4
  %11 = load i64, i64* %ob_size, align 8
  %sub = sub i64 0, %11
  store i64 %sub, i64* %len, align 8
  store i8 1, i8* %sign, align 1
  br label %if.end.7

if.else:                                          ; preds = %if.end.4
  %12 = load i64, i64* %ob_size, align 8
  store i64 %12, i64* %len, align 8
  store i8 0, i8* %sign, align 1
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  %13 = load i64, i64* %len, align 8
  %cmp8 = icmp eq i64 %13, 1
  br i1 %cmp8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end.7
  %14 = load %struct._object*, %struct._object** %dec, align 8
  %15 = load i8, i8* %sign, align 1
  %16 = load %struct._longobject*, %struct._longobject** %l, align 8
  %ob_digit = getelementptr inbounds %struct._longobject, %struct._longobject* %16, i32 0, i32 1
  %arraydecay = getelementptr inbounds [1 x i32], [1 x i32]* %ob_digit, i32 0, i32 0
  %17 = load i32, i32* %arraydecay, align 4
  call void @_dec_settriple(%struct._object* %14, i8 zeroext %15, i32 %17, i64 0)
  %18 = load %struct._object*, %struct._object** %dec, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyDecObject*
  %dec10 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %19, i32 0, i32 2
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %21 = load i32*, i32** %status.addr, align 8
  call void @mpd_qfinalize(%struct.mpd_t* %dec10, %struct.mpd_context_t* %20, i32* %21)
  %22 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %22, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %if.end.7
  %23 = load %struct._object*, %struct._object** %dec, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyDecObject*
  %dec12 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %24, i32 0, i32 2
  %25 = load %struct._longobject*, %struct._longobject** %l, align 8
  %ob_digit13 = getelementptr inbounds %struct._longobject, %struct._longobject* %25, i32 0, i32 1
  %arraydecay14 = getelementptr inbounds [1 x i32], [1 x i32]* %ob_digit13, i32 0, i32 0
  %26 = load i64, i64* %len, align 8
  %27 = load i8, i8* %sign, align 1
  %28 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx.addr, align 8
  %29 = load i32*, i32** %status.addr, align 8
  call void @mpd_qimport_u32(%struct.mpd_t* %dec12, i32* %arraydecay14, i64 %26, i8 zeroext %27, i32 1073741824, %struct.mpd_context_t* %28, i32* %29)
  %30 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %30, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.9, %if.then.3, %if.then
  %31 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %31
}

declare hidden void @mpd_seterror(%struct.mpd_t*, i32, i32*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @_dec_settriple(%struct._object* %dec, i8 zeroext %sign, i32 %v, i64 %exp) #2 {
entry:
  %dec.addr = alloca %struct._object*, align 8
  %sign.addr = alloca i8, align 1
  %v.addr = alloca i32, align 4
  %exp.addr = alloca i64, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store i8 %sign, i8* %sign.addr, align 1
  store i32 %v, i32* %v.addr, align 4
  store i64 %exp, i64* %exp.addr, align 8
  %0 = load i32, i32* %v.addr, align 4
  %conv = zext i32 %0 to i64
  %1 = load %struct._object*, %struct._object** %dec.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %2, i32 0, i32 2
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec1, i32 0, i32 5
  %3 = load i64*, i64** %data, align 8
  %arrayidx = getelementptr i64, i64* %3, i64 0
  store i64 %conv, i64* %arrayidx, align 8
  %4 = load %struct._object*, %struct._object** %dec.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecObject*
  %dec2 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %5, i32 0, i32 2
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec2, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %6 = load %struct._object*, %struct._object** %dec.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDecObject*
  %dec3 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %7, i32 0, i32 2
  %8 = load i8, i8* %sign.addr, align 1
  call void @mpd_set_flags(%struct.mpd_t* %dec3, i8 zeroext %8)
  %9 = load i64, i64* %exp.addr, align 8
  %10 = load %struct._object*, %struct._object** %dec.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDecObject*
  %dec4 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %exp5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec4, i32 0, i32 1
  store i64 %9, i64* %exp5, align 8
  %12 = load %struct._object*, %struct._object** %dec.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecObject*
  %dec6 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %13, i32 0, i32 2
  call void @mpd_setdigits(%struct.mpd_t* %dec6)
  ret void
}

declare hidden void @mpd_qfinalize(%struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qimport_u32(%struct.mpd_t*, i32*, i64, i8 zeroext, i32, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_set_flags(%struct.mpd_t*, i8 zeroext) #1

declare hidden void @mpd_setdigits(%struct.mpd_t*) #1

declare %struct._object* @_PyObject_New(%struct._typeobject*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @flags_as_exception(i32 %flags) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %flags.addr = alloca i32, align 4
  %cm = alloca %struct.DecCondMap*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i32 0), %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %0, i32 0, i32 0
  %1 = load i8*, i8** %name, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %flags.addr, align 4
  %3 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %3, i32 0, i32 2
  %4 = load i32, i32* %flag, align 4
  %and = and i32 %2, %4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %5, i32 0, i32 3
  %6 = load %struct._object*, %struct._object** %ex, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %7, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %call = call %struct._object* @runtime_error_ptr(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.32, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @flags_as_list(i32 %flags) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %flags.addr = alloca i32, align 4
  %list = alloca %struct._object*, align 8
  %cm = alloca %struct.DecCondMap*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %call = call %struct._object* @PyList_New(i64 0)
  store %struct._object* %call, %struct._object** %list, align 8
  %0 = load %struct._object*, %struct._object** %list, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  store %struct.DecCondMap* getelementptr inbounds ([6 x %struct.DecCondMap], [6 x %struct.DecCondMap]* @cond_map, i32 0, i32 0), %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %1, i32 0, i32 0
  %2 = load i8*, i8** %name, align 8
  %cmp1 = icmp ne i8* %2, null
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %flags.addr, align 4
  %4 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %4, i32 0, i32 2
  %5 = load i32, i32* %flag, align 4
  %and = and i32 %3, %5
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %for.body
  %6 = load %struct._object*, %struct._object** %list, align 8
  %7 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %7, i32 0, i32 3
  %8 = load %struct._object*, %struct._object** %ex, align 8
  %call3 = call i32 @PyList_Append(%struct._object* %6, %struct._object* %8)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  br label %error

if.end.6:                                         ; preds = %if.then.2
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.7
  %9 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %9, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i64 1), %struct.DecCondMap** %cm, align 8
  br label %for.cond.8

for.cond.8:                                       ; preds = %for.inc.22, %for.end
  %10 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name9 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %10, i32 0, i32 0
  %11 = load i8*, i8** %name9, align 8
  %cmp10 = icmp ne i8* %11, null
  br i1 %cmp10, label %for.body.11, label %for.end.24

for.body.11:                                      ; preds = %for.cond.8
  %12 = load i32, i32* %flags.addr, align 4
  %13 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag12 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %13, i32 0, i32 2
  %14 = load i32, i32* %flag12, align 4
  %and13 = and i32 %12, %14
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.21

if.then.15:                                       ; preds = %for.body.11
  %15 = load %struct._object*, %struct._object** %list, align 8
  %16 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex16 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %16, i32 0, i32 3
  %17 = load %struct._object*, %struct._object** %ex16, align 8
  %call17 = call i32 @PyList_Append(%struct._object* %15, %struct._object* %17)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.15
  br label %error

if.end.20:                                        ; preds = %if.then.15
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %for.body.11
  br label %for.inc.22

for.inc.22:                                       ; preds = %if.end.21
  %18 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr23 = getelementptr %struct.DecCondMap, %struct.DecCondMap* %18, i32 1
  store %struct.DecCondMap* %incdec.ptr23, %struct.DecCondMap** %cm, align 8
  br label %for.cond.8

for.end.24:                                       ; preds = %for.cond.8
  %19 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.19, %if.then.5
  br label %do.body

do.body:                                          ; preds = %error
  %20 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp25 = icmp ne i64 %dec, 0
  br i1 %cmp25, label %if.then.26, label %if.else

if.then.26:                                       ; preds = %do.body
  br label %if.end.27

if.else:                                          ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.26
  br label %do.end

do.end:                                           ; preds = %if.end.27
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %for.end.24, %if.then
  %27 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %27
}

declare void @PyErr_SetObject(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @runtime_error_ptr(i8* %mesg) #0 {
entry:
  %mesg.addr = alloca i8*, align 8
  store i8* %mesg, i8** %mesg.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %1 = load i8*, i8** %mesg.addr, align 8
  call void @PyErr_SetString(%struct._object* %0, i8* %1)
  ret %struct._object* null
}

declare %struct._object* @PyList_New(i64) #1

declare i32 @PyList_Append(%struct._object*, %struct._object*) #1

declare hidden void @mpd_qsub(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qmul(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qrem(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qdivmod(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare %struct._object* @Py_BuildValue(i8*, ...) #1

declare hidden void @mpd_qpow(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qpowmod(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qminus(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qplus(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qabs(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden i32 @mpd_iszero(%struct.mpd_t*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_as_long(%struct._object* %dec, %struct._object* %context, i32 %round) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %round.addr = alloca i32, align 4
  %pylong = alloca %struct._longobject*, align 8
  %ob_digit = alloca i32*, align 8
  %n = alloca i64, align 8
  %i = alloca i64, align 8
  %x = alloca %struct.mpd_t*, align 8
  %workctx = alloca %struct.mpd_context_t, align 8
  %status = alloca i32, align 4
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 %round, i32* %round.addr, align 4
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %dec.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %dec1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dec.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec2 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call3 = call i32 @mpd_isnan(%struct.mpd_t* %dec2)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end

if.else:                                          ; preds = %if.then
  %5 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.35, i32 0, i32 0))
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %entry
  %call7 = call %struct.mpd_t* @mpd_qnew()
  store %struct.mpd_t* %call7, %struct.mpd_t** %x, align 8
  %6 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %cmp = icmp eq %struct.mpd_t* %6, null
  br i1 %cmp, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %if.end.6
  %call9 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.6
  %7 = load %struct._object*, %struct._object** %context.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %8, i32 0, i32 1
  %9 = bitcast %struct.mpd_context_t* %workctx to i8*
  %10 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %9, i8* %10, i64 48, i32 8, i1 false)
  %11 = load i32, i32* %round.addr, align 4
  %round11 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %workctx, i32 0, i32 6
  store i32 %11, i32* %round11, align 4
  %12 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %13 = load %struct._object*, %struct._object** %dec.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecObject*
  %dec12 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %14, i32 0, i32 2
  call void @mpd_qround_to_int(%struct.mpd_t* %12, %struct.mpd_t* %dec12, %struct.mpd_context_t* %workctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context.addr, align 8
  %16 = load i32, i32* %status, align 4
  %call13 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.10
  %17 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  call void @mpd_del(%struct.mpd_t* %17)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.10
  store i32 0, i32* %status, align 4
  store i32* null, i32** %ob_digit, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %call17 = call i64 @mpd_qexport_u32(i32** %ob_digit, i64 0, i32 1073741824, %struct.mpd_t* %18, i32* %status)
  store i64 %call17, i64* %n, align 8
  %19 = load i64, i64* %n, align 8
  %cmp18 = icmp eq i64 %19, -1
  br i1 %cmp18, label %if.then.19, label %if.end.21

if.then.19:                                       ; preds = %if.end.16
  %call20 = call %struct._object* @PyErr_NoMemory()
  %20 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  call void @mpd_del(%struct.mpd_t* %20)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.21:                                        ; preds = %if.end.16
  %21 = load i64, i64* %n, align 8
  %call22 = call %struct._longobject* @_PyLong_New(i64 %21)
  store %struct._longobject* %call22, %struct._longobject** %pylong, align 8
  %22 = load %struct._longobject*, %struct._longobject** %pylong, align 8
  %cmp23 = icmp eq %struct._longobject* %22, null
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.21
  %23 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %24 = load i32*, i32** %ob_digit, align 8
  %25 = bitcast i32* %24 to i8*
  call void %23(i8* %25)
  %26 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  call void @mpd_del(%struct.mpd_t* %26)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  %27 = load %struct._longobject*, %struct._longobject** %pylong, align 8
  %ob_digit26 = getelementptr inbounds %struct._longobject, %struct._longobject* %27, i32 0, i32 1
  %28 = bitcast [1 x i32]* %ob_digit26 to i8*
  %29 = load i32*, i32** %ob_digit, align 8
  %30 = bitcast i32* %29 to i8*
  %31 = load i64, i64* %n, align 8
  %mul = mul i64 %31, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %30, i64 %mul, i32 4, i1 false)
  %32 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %33 = load i32*, i32** %ob_digit, align 8
  %34 = bitcast i32* %33 to i8*
  call void %32(i8* %34)
  %35 = load i64, i64* %n, align 8
  store i64 %35, i64* %i, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.25
  %36 = load i64, i64* %i, align 8
  %cmp27 = icmp sgt i64 %36, 0
  br i1 %cmp27, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %37 = load i64, i64* %i, align 8
  %sub = sub i64 %37, 1
  %38 = load %struct._longobject*, %struct._longobject** %pylong, align 8
  %ob_digit28 = getelementptr inbounds %struct._longobject, %struct._longobject* %38, i32 0, i32 1
  %arrayidx = getelementptr [1 x i32], [1 x i32]* %ob_digit28, i32 0, i64 %sub
  %39 = load i32, i32* %arrayidx, align 4
  %cmp29 = icmp eq i32 %39, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %40 = phi i1 [ false, %while.cond ], [ %cmp29, %land.rhs ]
  br i1 %40, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %41 = load i64, i64* %i, align 8
  %dec30 = add i64 %41, -1
  store i64 %dec30, i64* %i, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  %42 = load i64, i64* %i, align 8
  %43 = load %struct._longobject*, %struct._longobject** %pylong, align 8
  %44 = bitcast %struct._longobject* %43 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %44, i32 0, i32 1
  store i64 %42, i64* %ob_size, align 8
  %45 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %call31 = call i32 @mpd_isnegative(%struct.mpd_t* %45)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %land.lhs.true, label %if.end.38

land.lhs.true:                                    ; preds = %while.end
  %46 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %call33 = call i32 @mpd_iszero(%struct.mpd_t* %46)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.end.38, label %if.then.35

if.then.35:                                       ; preds = %land.lhs.true
  %47 = load i64, i64* %i, align 8
  %sub36 = sub i64 0, %47
  %48 = load %struct._longobject*, %struct._longobject** %pylong, align 8
  %49 = bitcast %struct._longobject* %48 to %struct.PyVarObject*
  %ob_size37 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %49, i32 0, i32 1
  store i64 %sub36, i64* %ob_size37, align 8
  br label %if.end.38

if.end.38:                                        ; preds = %if.then.35, %land.lhs.true, %while.end
  %50 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  call void @mpd_del(%struct.mpd_t* %50)
  %51 = load %struct._longobject*, %struct._longobject** %pylong, align 8
  %52 = bitcast %struct._longobject* %51 to %struct._object*
  store %struct._object* %52, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.38, %if.then.24, %if.then.19, %if.then.15, %if.then.8, %if.end
  %53 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %53
}

declare hidden i32 @mpd_isspecial(%struct.mpd_t*) #1

declare hidden i32 @mpd_isnan(%struct.mpd_t*) #1

declare hidden %struct.mpd_t* @mpd_qnew() #1

declare hidden void @mpd_qround_to_int(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden i64 @mpd_qexport_u32(i32**, i64, i32, %struct.mpd_t*, i32*) #1

declare %struct._longobject* @_PyLong_New(i64) #1

declare hidden i32 @mpd_isnegative(%struct.mpd_t*) #1

declare hidden i32 @mpd_issnan(%struct.mpd_t*) #1

declare %struct._object* @PyFloat_FromString(%struct._object*) #1

declare hidden void @mpd_qdivint(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qdiv(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

; Function Attrs: nounwind uwtable
define internal i64 @_dec_hash(%struct.PyDecObject* %v) #0 {
entry:
  %retval = alloca i64, align 8
  %v.addr = alloca %struct.PyDecObject*, align 8
  %p_data = alloca [1 x i64], align 8
  %p = alloca %struct.mpd_t, align 8
  %inv10_p_data = alloca [1 x i64], align 8
  %inv10_p = alloca %struct.mpd_t, align 8
  %py_hash_inf = alloca i64, align 8
  %py_hash_nan = alloca i64, align 8
  %ten_data = alloca [1 x i64], align 8
  %ten = alloca %struct.mpd_t, align 8
  %result = alloca i64, align 8
  %exp_hash = alloca %struct.mpd_t*, align 8
  %tmp = alloca %struct.mpd_t*, align 8
  %exp16 = alloca i64, align 8
  %status = alloca i32, align 4
  %maxctx = alloca %struct.mpd_context_t, align 8
  %context = alloca %struct._object*, align 8
  store %struct.PyDecObject* %v, %struct.PyDecObject** %v.addr, align 8
  %0 = bitcast [1 x i64]* %p_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* bitcast ([1 x i64]* @_dec_hash.p_data to i8*), i64 8, i32 8, i1 false)
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %p, i32 0, i32 0
  store i8 -112, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %p, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %p, i32 0, i32 2
  store i64 19, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %p, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %p, i32 0, i32 4
  store i64 1, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %p, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %p_data, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %1 = bitcast [1 x i64]* %inv10_p_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %1, i8* bitcast ([1 x i64]* @_dec_hash.inv10_p_data to i8*), i64 8, i32 8, i1 false)
  %flags1 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %inv10_p, i32 0, i32 0
  store i8 -112, i8* %flags1, align 1
  %exp2 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %inv10_p, i32 0, i32 1
  store i64 0, i64* %exp2, align 8
  %digits3 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %inv10_p, i32 0, i32 2
  store i64 19, i64* %digits3, align 8
  %len4 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %inv10_p, i32 0, i32 3
  store i64 1, i64* %len4, align 8
  %alloc5 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %inv10_p, i32 0, i32 4
  store i64 1, i64* %alloc5, align 8
  %data6 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %inv10_p, i32 0, i32 5
  %arraydecay7 = getelementptr inbounds [1 x i64], [1 x i64]* %inv10_p_data, i32 0, i32 0
  store i64* %arraydecay7, i64** %data6, align 8
  store i64 314159, i64* %py_hash_inf, align 8
  store i64 0, i64* %py_hash_nan, align 8
  %2 = bitcast [1 x i64]* %ten_data to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* bitcast ([1 x i64]* @_dec_hash.ten_data to i8*), i64 8, i32 8, i1 false)
  %flags8 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ten, i32 0, i32 0
  store i8 -112, i8* %flags8, align 1
  %exp9 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ten, i32 0, i32 1
  store i64 0, i64* %exp9, align 8
  %digits10 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ten, i32 0, i32 2
  store i64 2, i64* %digits10, align 8
  %len11 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ten, i32 0, i32 3
  store i64 1, i64* %len11, align 8
  %alloc12 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ten, i32 0, i32 4
  store i64 1, i64* %alloc12, align 8
  %data13 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %ten, i32 0, i32 5
  %arraydecay14 = getelementptr inbounds [1 x i64], [1 x i64]* %ten_data, i32 0, i32 0
  store i64* %arraydecay14, i64** %data13, align 8
  store %struct.mpd_t* null, %struct.mpd_t** %exp_hash, align 8
  store %struct.mpd_t* null, %struct.mpd_t** %tmp, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.PyDecObject*, %struct.PyDecObject** %v.addr, align 8
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %4, i32 0, i32 2
  %call20 = call i32 @mpd_isspecial(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call20, 0
  br i1 %tobool, label %if.then.21, label %if.end.33

if.then.21:                                       ; preds = %if.end
  %5 = load %struct.PyDecObject*, %struct.PyDecObject** %v.addr, align 8
  %dec22 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %5, i32 0, i32 2
  %call23 = call i32 @mpd_issnan(%struct.mpd_t* %dec22)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.else

if.then.25:                                       ; preds = %if.then.21
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i32 0, i32 0))
  store i64 -1, i64* %retval
  br label %return

if.else:                                          ; preds = %if.then.21
  %7 = load %struct.PyDecObject*, %struct.PyDecObject** %v.addr, align 8
  %dec26 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %7, i32 0, i32 2
  %call27 = call i32 @mpd_isnan(%struct.mpd_t* %dec26)
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %if.else
  store i64 0, i64* %retval
  br label %return

if.else.30:                                       ; preds = %if.else
  %8 = load %struct.PyDecObject*, %struct.PyDecObject** %v.addr, align 8
  %dec31 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %8, i32 0, i32 2
  %call32 = call i32 @mpd_arith_sign(%struct.mpd_t* %dec31)
  %conv = sext i32 %call32 to i64
  %mul = mul i64 314159, %conv
  store i64 %mul, i64* %retval
  br label %return

if.end.33:                                        ; preds = %if.end
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %call34 = call %struct.mpd_t* @mpd_qnew()
  store %struct.mpd_t* %call34, %struct.mpd_t** %exp_hash, align 8
  %9 = load %struct.mpd_t*, %struct.mpd_t** %exp_hash, align 8
  %cmp35 = icmp eq %struct.mpd_t* %9, null
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.33
  br label %malloc_error

if.end.38:                                        ; preds = %if.end.33
  %call39 = call %struct.mpd_t* @mpd_qnew()
  store %struct.mpd_t* %call39, %struct.mpd_t** %tmp, align 8
  %10 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %cmp40 = icmp eq %struct.mpd_t* %10, null
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.38
  br label %malloc_error

if.end.43:                                        ; preds = %if.end.38
  %11 = load %struct.PyDecObject*, %struct.PyDecObject** %v.addr, align 8
  %dec44 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %exp45 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec44, i32 0, i32 1
  %12 = load i64, i64* %exp45, align 8
  store i64 %12, i64* %exp16, align 8
  %13 = load i64, i64* %exp16, align 8
  %cmp46 = icmp sge i64 %13, 0
  br i1 %cmp46, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %if.end.43
  %14 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %15 = load i64, i64* %exp16, align 8
  call void @mpd_qsset_ssize(%struct.mpd_t* %14, i64 %15, %struct.mpd_context_t* %maxctx, i32* %status)
  %16 = load %struct.mpd_t*, %struct.mpd_t** %exp_hash, align 8
  %17 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  call void @mpd_qpowmod(%struct.mpd_t* %16, %struct.mpd_t* %ten, %struct.mpd_t* %17, %struct.mpd_t* %p, %struct.mpd_context_t* %maxctx, i32* %status)
  br label %if.end.50

if.else.49:                                       ; preds = %if.end.43
  %18 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %19 = load i64, i64* %exp16, align 8
  %sub = sub i64 0, %19
  call void @mpd_qsset_ssize(%struct.mpd_t* %18, i64 %sub, %struct.mpd_context_t* %maxctx, i32* %status)
  %20 = load %struct.mpd_t*, %struct.mpd_t** %exp_hash, align 8
  %21 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  call void @mpd_qpowmod(%struct.mpd_t* %20, %struct.mpd_t* %inv10_p, %struct.mpd_t* %21, %struct.mpd_t* %p, %struct.mpd_context_t* %maxctx, i32* %status)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.49, %if.then.48
  %22 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %23 = load %struct.PyDecObject*, %struct.PyDecObject** %v.addr, align 8
  %dec51 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %23, i32 0, i32 2
  %call52 = call i32 @mpd_qcopy(%struct.mpd_t* %22, %struct.mpd_t* %dec51, i32* %status)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %if.end.50
  br label %malloc_error

if.end.55:                                        ; preds = %if.end.50
  %24 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %exp56 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %24, i32 0, i32 1
  store i64 0, i64* %exp56, align 8
  %25 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  call void @mpd_set_positive(%struct.mpd_t* %25)
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxctx, i32 0, i32 0
  store i64 1000000000000000020, i64* %prec, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxctx, i32 0, i32 1
  store i64 1000000000000000020, i64* %emax, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %maxctx, i32 0, i32 2
  store i64 -1000000000000000020, i64* %emin, align 8
  %26 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %27 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %28 = load %struct.mpd_t*, %struct.mpd_t** %exp_hash, align 8
  call void @mpd_qmul(%struct.mpd_t* %26, %struct.mpd_t* %27, %struct.mpd_t* %28, %struct.mpd_context_t* %maxctx, i32* %status)
  %29 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %30 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  call void @mpd_qrem(%struct.mpd_t* %29, %struct.mpd_t* %30, %struct.mpd_t* %p, %struct.mpd_context_t* %maxctx, i32* %status)
  %31 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %call57 = call i64 @mpd_qget_ssize(%struct.mpd_t* %31, i32* %status)
  store i64 %call57, i64* %result, align 8
  %32 = load %struct.PyDecObject*, %struct.PyDecObject** %v.addr, align 8
  %dec58 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %32, i32 0, i32 2
  %call59 = call i32 @mpd_ispositive(%struct.mpd_t* %dec58)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.55
  %33 = load i64, i64* %result, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.55
  %34 = load i64, i64* %result, align 8
  %sub61 = sub i64 0, %34
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %33, %cond.true ], [ %sub61, %cond.false ]
  store i64 %cond, i64* %result, align 8
  %35 = load i64, i64* %result, align 8
  %cmp62 = icmp eq i64 %35, -1
  br i1 %cmp62, label %cond.true.64, label %cond.false.65

cond.true.64:                                     ; preds = %cond.end
  br label %cond.end.66

cond.false.65:                                    ; preds = %cond.end
  %36 = load i64, i64* %result, align 8
  br label %cond.end.66

cond.end.66:                                      ; preds = %cond.false.65, %cond.true.64
  %cond67 = phi i64 [ -2, %cond.true.64 ], [ %36, %cond.false.65 ]
  store i64 %cond67, i64* %result, align 8
  %37 = load i32, i32* %status, align 4
  %cmp68 = icmp ne i32 %37, 0
  br i1 %cmp68, label %if.then.70, label %if.end.75

if.then.70:                                       ; preds = %cond.end.66
  %38 = load i32, i32* %status, align 4
  %and = and i32 %38, 512
  %tobool71 = icmp ne i32 %and, 0
  br i1 %tobool71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %if.then.70
  br label %malloc_error

if.else.73:                                       ; preds = %if.then.70
  %39 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %39, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.40, i32 0, i32 0))
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.73
  store i64 -1, i64* %result, align 8
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %cond.end.66
  br label %finish

finish:                                           ; preds = %malloc_error, %if.end.75
  %40 = load %struct.mpd_t*, %struct.mpd_t** %exp_hash, align 8
  %tobool76 = icmp ne %struct.mpd_t* %40, null
  br i1 %tobool76, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %finish
  %41 = load %struct.mpd_t*, %struct.mpd_t** %exp_hash, align 8
  call void @mpd_del(%struct.mpd_t* %41)
  br label %if.end.78

if.end.78:                                        ; preds = %if.then.77, %finish
  %42 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  %tobool79 = icmp ne %struct.mpd_t* %42, null
  br i1 %tobool79, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.end.78
  %43 = load %struct.mpd_t*, %struct.mpd_t** %tmp, align 8
  call void @mpd_del(%struct.mpd_t* %43)
  br label %if.end.81

if.end.81:                                        ; preds = %if.then.80, %if.end.78
  %44 = load i64, i64* %result, align 8
  store i64 %44, i64* %retval
  br label %return

malloc_error:                                     ; preds = %if.then.72, %if.then.54, %if.then.42, %if.then.37
  %call82 = call %struct._object* @PyErr_NoMemory()
  store i64 -1, i64* %result, align 8
  br label %finish

return:                                           ; preds = %if.end.81, %if.else.30, %if.then.29, %if.then.25, %if.then
  %45 = load i64, i64* %retval
  ret i64 %45
}

declare hidden i32 @mpd_arith_sign(%struct.mpd_t*) #1

declare hidden void @mpd_qsset_ssize(%struct.mpd_t*, i64, %struct.mpd_context_t*, i32*) #1

declare hidden i32 @mpd_qcopy(%struct.mpd_t*, %struct.mpd_t*, i32*) #1

declare hidden void @mpd_set_positive(%struct.mpd_t*) #1

declare hidden i64 @mpd_qget_ssize(%struct.mpd_t*, i32*) #1

declare hidden i32 @mpd_ispositive(%struct.mpd_t*) #1

declare hidden i64 @mpd_to_sci_size(i8**, %struct.mpd_t*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @unicode_fromascii(i8* %s, i64 %size) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %res = alloca %struct._object*, align 8
  store i8* %s, i8** %s.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %call = call %struct._object* @PyUnicode_New(i64 %0, i32 127)
  store %struct._object* %call, %struct._object** %res, align 8
  %1 = load %struct._object*, %struct._object** %res, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %res, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %3, i32 0, i32 3
  %4 = bitcast %struct.anon* %state to i32*
  %bf.load = load i32, i32* %4, align 4
  %bf.lshr = lshr i32 %bf.load, 5
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %cond.true, label %cond.false.8

cond.true:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %res, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyASCIIObject*
  %state1 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %6, i32 0, i32 3
  %7 = bitcast %struct.anon* %state1 to i32*
  %bf.load2 = load i32, i32* %7, align 4
  %bf.lshr3 = lshr i32 %bf.load2, 6
  %bf.clear4 = and i32 %bf.lshr3, 1
  %tobool5 = icmp ne i32 %bf.clear4, 0
  br i1 %tobool5, label %cond.true.6, label %cond.false

cond.true.6:                                      ; preds = %cond.true
  %8 = load %struct._object*, %struct._object** %res, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyASCIIObject*
  %add.ptr = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %9, i64 1
  %10 = bitcast %struct.PyASCIIObject* %add.ptr to i8*
  br label %cond.end

cond.false:                                       ; preds = %cond.true
  %11 = load %struct._object*, %struct._object** %res, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyCompactUnicodeObject*
  %add.ptr7 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %12, i64 1
  %13 = bitcast %struct.PyCompactUnicodeObject* %add.ptr7 to i8*
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true.6
  %cond = phi i8* [ %10, %cond.true.6 ], [ %13, %cond.false ]
  br label %cond.end.9

cond.false.8:                                     ; preds = %if.end
  %14 = load %struct._object*, %struct._object** %res, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyUnicodeObject*
  %data = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %15, i32 0, i32 1
  %any = bitcast %union.anon* %data to i8**
  %16 = load i8*, i8** %any, align 8
  br label %cond.end.9

cond.end.9:                                       ; preds = %cond.false.8, %cond.end
  %cond10 = phi i8* [ %cond, %cond.end ], [ %16, %cond.false.8 ]
  %17 = load i8*, i8** %s.addr, align 8
  %18 = load i64, i64* %size.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %cond10, i8* %17, i64 %18, i32 1, i1 false)
  %19 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

return:                                           ; preds = %cond.end.9, %if.then
  %20 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %20
}

declare %struct._object* @PyUnicode_New(i64, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @convert_op_cmp(%struct._object** %vcmp, %struct._object** %wcmp, %struct._object* %v, %struct._object* %w, i32 %op, %struct._object* %context) #0 {
entry:
  %retval = alloca i32, align 4
  %vcmp.addr = alloca %struct._object**, align 8
  %wcmp.addr = alloca %struct._object**, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %context.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %c = alloca %struct.Py_complex, align 8
  %tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %is_rational = alloca i32, align 4
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp88 = alloca %struct._object*, align 8
  store %struct._object** %vcmp, %struct._object*** %vcmp.addr, align 8
  store %struct._object** %wcmp, %struct._object*** %wcmp.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %w, %struct._object** %w.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %context.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  store %struct.mpd_context_t* %ctx1, %struct.mpd_context_t** %ctx, align 8
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %3 = load %struct._object**, %struct._object*** %vcmp.addr, align 8
  store %struct._object* %2, %struct._object** %3, align 8
  %4 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %5, @PyDec_Type
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDec_Type)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %10 = load %struct._object*, %struct._object** %w.addr, align 8
  %11 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* %10, %struct._object** %11, align 8
  br label %if.end.109

if.else:                                          ; preds = %lor.lhs.false
  %12 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  %14 = load i64, i64* %tp_flags, align 8
  %and = and i64 %14, 16777216
  %cmp4 = icmp ne i64 %and, 0
  br i1 %cmp4, label %if.then.5, label %if.else.7

if.then.5:                                        ; preds = %if.else
  %15 = load %struct._object*, %struct._object** %w.addr, align 8
  %16 = load %struct._object*, %struct._object** %context.addr, align 8
  %call6 = call %struct._object* @PyDecType_FromLongExact(%struct._typeobject* @PyDec_Type, %struct._object* %15, %struct._object* %16)
  %17 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* %call6, %struct._object** %17, align 8
  br label %if.end.108

if.else.7:                                        ; preds = %if.else
  %18 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %cmp9 = icmp eq %struct._typeobject* %19, @PyFloat_Type
  br i1 %cmp9, label %if.then.14, label %lor.lhs.false.10

lor.lhs.false.10:                                 ; preds = %if.else.7
  %20 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %call12 = call i32 @PyType_IsSubtype(%struct._typeobject* %21, %struct._typeobject* @PyFloat_Type)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.else.23

if.then.14:                                       ; preds = %lor.lhs.false.10, %if.else.7
  %22 = load i32, i32* %op.addr, align 4
  %cmp15 = icmp ne i32 %22, 2
  br i1 %cmp15, label %land.lhs.true, label %if.else.21

land.lhs.true:                                    ; preds = %if.then.14
  %23 = load i32, i32* %op.addr, align 4
  %cmp16 = icmp ne i32 %23, 3
  br i1 %cmp16, label %land.lhs.true.17, label %if.else.21

land.lhs.true.17:                                 ; preds = %land.lhs.true
  %24 = load %struct._object*, %struct._object** %context.addr, align 8
  %call18 = call i32 @dec_addstatus(%struct._object* %24, i32 1024)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %land.lhs.true.17
  %25 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* null, %struct._object** %25, align 8
  br label %if.end

if.else.21:                                       ; preds = %land.lhs.true.17, %land.lhs.true, %if.then.14
  %26 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %26, i32 0, i32 4
  %27 = load i32, i32* %status, align 4
  %or = or i32 %27, 1024
  store i32 %or, i32* %status, align 4
  %28 = load %struct._object*, %struct._object** %w.addr, align 8
  %29 = load %struct._object*, %struct._object** %context.addr, align 8
  %call22 = call %struct._object* @PyDecType_FromFloatExact(%struct._typeobject* @PyDec_Type, %struct._object* %28, %struct._object* %29)
  %30 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* %call22, %struct._object** %30, align 8
  br label %if.end

if.end:                                           ; preds = %if.else.21, %if.then.20
  br label %if.end.107

if.else.23:                                       ; preds = %lor.lhs.false.10
  %31 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %cmp25 = icmp eq %struct._typeobject* %32, @PyComplex_Type
  br i1 %cmp25, label %land.lhs.true.30, label %lor.lhs.false.26

lor.lhs.false.26:                                 ; preds = %if.else.23
  %33 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %call28 = call i32 @PyType_IsSubtype(%struct._typeobject* %34, %struct._typeobject* @PyComplex_Type)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %land.lhs.true.30, label %if.else.64

land.lhs.true.30:                                 ; preds = %lor.lhs.false.26, %if.else.23
  %35 = load i32, i32* %op.addr, align 4
  %cmp31 = icmp eq i32 %35, 2
  br i1 %cmp31, label %if.then.34, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %land.lhs.true.30
  %36 = load i32, i32* %op.addr, align 4
  %cmp33 = icmp eq i32 %36, 3
  br i1 %cmp33, label %if.then.34, label %if.else.64

if.then.34:                                       ; preds = %lor.lhs.false.32, %land.lhs.true.30
  %37 = load %struct._object*, %struct._object** %w.addr, align 8
  %call35 = call { double, double } @PyComplex_AsCComplex(%struct._object* %37)
  %38 = bitcast %struct.Py_complex* %c to { double, double }*
  %39 = getelementptr { double, double }, { double, double }* %38, i32 0, i32 0
  %40 = extractvalue { double, double } %call35, 0
  store double %40, double* %39, align 8
  %41 = getelementptr { double, double }, { double, double }* %38, i32 0, i32 1
  %42 = extractvalue { double, double } %call35, 1
  store double %42, double* %41, align 8
  %real = getelementptr inbounds %struct.Py_complex, %struct.Py_complex* %c, i32 0, i32 0
  %43 = load double, double* %real, align 8
  %cmp36 = fcmp oeq double %43, -1.000000e+00
  br i1 %cmp36, label %land.lhs.true.37, label %if.else.41

land.lhs.true.37:                                 ; preds = %if.then.34
  %call38 = call %struct._object* @PyErr_Occurred()
  %tobool39 = icmp ne %struct._object* %call38, null
  br i1 %tobool39, label %if.then.40, label %if.else.41

if.then.40:                                       ; preds = %land.lhs.true.37
  %44 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* null, %struct._object** %44, align 8
  br label %if.end.63

if.else.41:                                       ; preds = %land.lhs.true.37, %if.then.34
  %imag = getelementptr inbounds %struct.Py_complex, %struct.Py_complex* %c, i32 0, i32 1
  %45 = load double, double* %imag, align 8
  %cmp42 = fcmp oeq double %45, 0.000000e+00
  br i1 %cmp42, label %if.then.43, label %if.else.60

if.then.43:                                       ; preds = %if.else.41
  %real44 = getelementptr inbounds %struct.Py_complex, %struct.Py_complex* %c, i32 0, i32 0
  %46 = load double, double* %real44, align 8
  %call45 = call %struct._object* @PyFloat_FromDouble(double %46)
  store %struct._object* %call45, %struct._object** %tmp, align 8
  %47 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp46 = icmp eq %struct._object* %47, null
  br i1 %cmp46, label %if.then.47, label %if.else.48

if.then.47:                                       ; preds = %if.then.43
  %48 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* null, %struct._object** %48, align 8
  br label %if.end.59

if.else.48:                                       ; preds = %if.then.43
  %49 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %status49 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %49, i32 0, i32 4
  %50 = load i32, i32* %status49, align 4
  %or50 = or i32 %50, 1024
  store i32 %or50, i32* %status49, align 4
  %51 = load %struct._object*, %struct._object** %tmp, align 8
  %52 = load %struct._object*, %struct._object** %context.addr, align 8
  %call51 = call %struct._object* @PyDecType_FromFloatExact(%struct._typeobject* @PyDec_Type, %struct._object* %51, %struct._object* %52)
  %53 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* %call51, %struct._object** %53, align 8
  br label %do.body

do.body:                                          ; preds = %if.else.48
  %54 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt53, align 8
  %dec = add i64 %56, -1
  store i64 %dec, i64* %ob_refcnt53, align 8
  %cmp54 = icmp ne i64 %dec, 0
  br i1 %cmp54, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %do.body
  br label %if.end.58

if.else.56:                                       ; preds = %do.body
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %59(%struct._object* %60)
  br label %if.end.58

if.end.58:                                        ; preds = %if.else.56, %if.then.55
  br label %do.end

do.end:                                           ; preds = %if.end.58
  br label %if.end.59

if.end.59:                                        ; preds = %do.end, %if.then.47
  br label %if.end.62

if.else.60:                                       ; preds = %if.else.41
  %61 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc61 = add i64 %61, 1
  store i64 %inc61, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %62 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %62, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.60, %if.end.59
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %if.then.40
  br label %if.end.106

if.else.64:                                       ; preds = %lor.lhs.false.32, %lor.lhs.false.26
  %63 = load %struct._object*, %struct._object** %w.addr, align 8
  %64 = load %struct._object*, %struct._object** @Rational, align 8
  %call66 = call i32 @PyObject_IsInstance(%struct._object* %63, %struct._object* %64)
  store i32 %call66, i32* %is_rational, align 4
  %65 = load i32, i32* %is_rational, align 4
  %cmp67 = icmp slt i32 %65, 0
  br i1 %cmp67, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %if.else.64
  %66 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* null, %struct._object** %66, align 8
  br label %if.end.105

if.else.69:                                       ; preds = %if.else.64
  %67 = load i32, i32* %is_rational, align 4
  %cmp70 = icmp sgt i32 %67, 0
  br i1 %cmp70, label %if.then.71, label %if.else.102

if.then.71:                                       ; preds = %if.else.69
  %68 = load %struct._object*, %struct._object** %w.addr, align 8
  %69 = load %struct._object*, %struct._object** %context.addr, align 8
  %call72 = call %struct._object* @numerator_as_decimal(%struct._object* %68, %struct._object* %69)
  %70 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* %call72, %struct._object** %70, align 8
  %71 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  %72 = load %struct._object*, %struct._object** %71, align 8
  %tobool73 = icmp ne %struct._object* %72, null
  br i1 %tobool73, label %land.lhs.true.74, label %if.end.101

land.lhs.true.74:                                 ; preds = %if.then.71
  %73 = load %struct._object*, %struct._object** %v.addr, align 8
  %74 = bitcast %struct._object* %73 to %struct.PyDecObject*
  %dec75 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %74, i32 0, i32 2
  %call76 = call i32 @mpd_isspecial(%struct.mpd_t* %dec75)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.end.101, label %if.then.78

if.then.78:                                       ; preds = %land.lhs.true.74
  %75 = load %struct._object*, %struct._object** %v.addr, align 8
  %76 = load %struct._object*, %struct._object** %w.addr, align 8
  %77 = load %struct._object*, %struct._object** %context.addr, align 8
  %call79 = call %struct._object* @multiply_by_denominator(%struct._object* %75, %struct._object* %76, %struct._object* %77)
  %78 = load %struct._object**, %struct._object*** %vcmp.addr, align 8
  store %struct._object* %call79, %struct._object** %78, align 8
  %79 = load %struct._object**, %struct._object*** %vcmp.addr, align 8
  %80 = load %struct._object*, %struct._object** %79, align 8
  %cmp80 = icmp eq %struct._object* %80, null
  br i1 %cmp80, label %if.then.81, label %if.end.100

if.then.81:                                       ; preds = %if.then.78
  br label %do.body.82

do.body.82:                                       ; preds = %if.then.81
  %81 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  %82 = load %struct._object*, %struct._object** %81, align 8
  store %struct._object* %82, %struct._object** %_py_tmp, align 8
  %83 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp84 = icmp ne %struct._object* %83, null
  br i1 %cmp84, label %if.then.85, label %if.end.98

if.then.85:                                       ; preds = %do.body.82
  %84 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* null, %struct._object** %84, align 8
  br label %do.body.86

do.body.86:                                       ; preds = %if.then.85
  %85 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %85, %struct._object** %_py_decref_tmp88, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  %ob_refcnt89 = getelementptr inbounds %struct._object, %struct._object* %86, i32 0, i32 0
  %87 = load i64, i64* %ob_refcnt89, align 8
  %dec90 = add i64 %87, -1
  store i64 %dec90, i64* %ob_refcnt89, align 8
  %cmp91 = icmp ne i64 %dec90, 0
  br i1 %cmp91, label %if.then.92, label %if.else.93

if.then.92:                                       ; preds = %do.body.86
  br label %if.end.96

if.else.93:                                       ; preds = %do.body.86
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  %ob_type94 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type94, align 8
  %tp_dealloc95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %89, i32 0, i32 4
  %90 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc95, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  call void %90(%struct._object* %91)
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.93, %if.then.92
  br label %do.end.97

do.end.97:                                        ; preds = %if.end.96
  br label %if.end.98

if.end.98:                                        ; preds = %do.end.97, %do.body.82
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  br label %if.end.100

if.end.100:                                       ; preds = %do.end.99, %if.then.78
  br label %if.end.101

if.end.101:                                       ; preds = %if.end.100, %land.lhs.true.74, %if.then.71
  br label %if.end.104

if.else.102:                                      ; preds = %if.else.69
  %92 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %inc103 = add i64 %92, 1
  store i64 %inc103, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NotImplementedStruct, i32 0, i32 0), align 8
  %93 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %93, align 8
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.102, %if.end.101
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.then.68
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %if.end.63
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %if.end
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.then.5
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %if.then
  %94 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  %95 = load %struct._object*, %struct._object** %94, align 8
  %cmp110 = icmp eq %struct._object* %95, null
  br i1 %cmp110, label %if.then.113, label %lor.lhs.false.111

lor.lhs.false.111:                                ; preds = %if.end.109
  %96 = load %struct._object**, %struct._object*** %wcmp.addr, align 8
  %97 = load %struct._object*, %struct._object** %96, align 8
  %cmp112 = icmp eq %struct._object* %97, @_Py_NotImplementedStruct
  br i1 %cmp112, label %if.then.113, label %if.end.114

if.then.113:                                      ; preds = %lor.lhs.false.111, %if.end.109
  store i32 0, i32* %retval
  br label %return

if.end.114:                                       ; preds = %lor.lhs.false.111
  %98 = load %struct._object**, %struct._object*** %vcmp.addr, align 8
  %99 = load %struct._object*, %struct._object** %98, align 8
  %100 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp115 = icmp eq %struct._object* %99, %100
  br i1 %cmp115, label %if.then.116, label %if.end.119

if.then.116:                                      ; preds = %if.end.114
  %101 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt117 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 0
  %102 = load i64, i64* %ob_refcnt117, align 8
  %inc118 = add i64 %102, 1
  store i64 %inc118, i64* %ob_refcnt117, align 8
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.116, %if.end.114
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.119, %if.then.113
  %103 = load i32, i32* %retval
  ret i32 %103
}

declare hidden i32 @mpd_qcmp(%struct.mpd_t*, %struct.mpd_t*, i32*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @incr_true() #2 {
entry:
  %0 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %0, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  ret %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
}

; Function Attrs: inlinehint nounwind uwtable
define internal %struct._object* @incr_false() #2 {
entry:
  %0 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %0, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  ret %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
}

declare %struct._object* @PyBool_FromLong(i64) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromFloatExact(%struct._typeobject* %type, %struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %n = alloca %struct._object*, align 8
  %d = alloca %struct._object*, align 8
  %n_d = alloca %struct._object*, align 8
  %k = alloca i64, align 8
  %x = alloca double, align 8
  %sign = alloca i32, align 4
  %d1 = alloca %struct.mpd_t*, align 8
  %d2 = alloca %struct.mpd_t*, align 8
  %status = alloca i32, align 4
  %maxctx = alloca %struct.mpd_context_t, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  %_py_decref_tmp112 = alloca %struct._object*, align 8
  %_py_decref_tmp131 = alloca %struct._object*, align 8
  %_py_decref_tmp147 = alloca %struct._object*, align 8
  %_py_decref_tmp168 = alloca %struct._object*, align 8
  %_py_decref_tmp187 = alloca %struct._object*, align 8
  %_py_decref_tmp205 = alloca %struct._object*, align 8
  %_py_decref_tmp224 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 16777216
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = load %struct._object*, %struct._object** %v.addr, align 8
  %5 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call %struct._object* @PyDecType_FromLongExact(%struct._typeobject* %3, %struct._object* %4, %struct._object* %5)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %cmp12 = icmp eq %struct._typeobject* %7, @PyFloat_Type
  br i1 %cmp12, label %if.end.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %call14 = call i32 @PyType_IsSubtype(%struct._typeobject* %9, %struct._typeobject* @PyFloat_Type)
  %tobool = icmp ne i32 %call14, 0
  br i1 %tobool, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %lor.lhs.false
  %10 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.41, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %lor.lhs.false, %if.end
  %11 = load %struct._object*, %struct._object** %v.addr, align 8
  %call17 = call double @PyFloat_AsDouble(%struct._object* %11)
  store double %call17, double* %x, align 8
  %12 = load double, double* %x, align 8
  %cmp18 = fcmp oeq double %12, -1.000000e+00
  br i1 %cmp18, label %land.lhs.true, label %if.end.22

land.lhs.true:                                    ; preds = %if.end.16
  %call19 = call %struct._object* @PyErr_Occurred()
  %tobool20 = icmp ne %struct._object* %call19, null
  br i1 %tobool20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.22:                                        ; preds = %land.lhs.true, %if.end.16
  %13 = load double, double* %x, align 8
  %call23 = call double @copysign(double 1.000000e+00, double %13) #7
  %cmp24 = fcmp oeq double %call23, 1.000000e+00
  %cond = select i1 %cmp24, i32 0, i32 1
  store i32 %cond, i32* %sign, align 4
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.22
  %14 = load double, double* %x, align 8
  %conv = fptrunc double %14 to float
  %call25 = call i32 @__isnanf(float %conv) #7
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then.47, label %lor.lhs.false.34

cond.false:                                       ; preds = %if.end.22
  br i1 true, label %cond.true.27, label %cond.false.30

cond.true.27:                                     ; preds = %cond.false
  %15 = load double, double* %x, align 8
  %call28 = call i32 @__isnan(double %15) #7
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %if.then.47, label %lor.lhs.false.34

cond.false.30:                                    ; preds = %cond.false
  %16 = load double, double* %x, align 8
  %conv31 = fpext double %16 to x86_fp80
  %call32 = call i32 @__isnanl(x86_fp80 %conv31) #7
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then.47, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %cond.false.30, %cond.true.27, %cond.true
  br i1 false, label %cond.true.35, label %cond.false.39

cond.true.35:                                     ; preds = %lor.lhs.false.34
  %17 = load double, double* %x, align 8
  %conv36 = fptrunc double %17 to float
  %call37 = call i32 @__isinff(float %conv36) #7
  %tobool38 = icmp ne i32 %call37, 0
  br i1 %tobool38, label %if.then.47, label %if.end.70

cond.false.39:                                    ; preds = %lor.lhs.false.34
  br i1 true, label %cond.true.40, label %cond.false.43

cond.true.40:                                     ; preds = %cond.false.39
  %18 = load double, double* %x, align 8
  %call41 = call i32 @__isinf(double %18) #7
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then.47, label %if.end.70

cond.false.43:                                    ; preds = %cond.false.39
  %19 = load double, double* %x, align 8
  %conv44 = fpext double %19 to x86_fp80
  %call45 = call i32 @__isinfl(x86_fp80 %conv44) #7
  %tobool46 = icmp ne i32 %call45, 0
  br i1 %tobool46, label %if.then.47, label %if.end.70

if.then.47:                                       ; preds = %cond.false.43, %cond.true.40, %cond.true.35, %cond.false.30, %cond.true.27, %cond.true
  %20 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call48 = call %struct._object* @PyDecType_New(%struct._typeobject* %20)
  store %struct._object* %call48, %struct._object** %dec, align 8
  %21 = load %struct._object*, %struct._object** %dec, align 8
  %cmp49 = icmp eq %struct._object* %21, null
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %if.then.47
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.52:                                        ; preds = %if.then.47
  br i1 false, label %cond.true.53, label %cond.false.57

cond.true.53:                                     ; preds = %if.end.52
  %22 = load double, double* %x, align 8
  %conv54 = fptrunc double %22 to float
  %call55 = call i32 @__isnanf(float %conv54) #7
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.then.65, label %if.else

cond.false.57:                                    ; preds = %if.end.52
  br i1 true, label %cond.true.58, label %cond.false.61

cond.true.58:                                     ; preds = %cond.false.57
  %23 = load double, double* %x, align 8
  %call59 = call i32 @__isnan(double %23) #7
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.then.65, label %if.else

cond.false.61:                                    ; preds = %cond.false.57
  %24 = load double, double* %x, align 8
  %conv62 = fpext double %24 to x86_fp80
  %call63 = call i32 @__isnanl(x86_fp80 %conv62) #7
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.then.65, label %if.else

if.then.65:                                       ; preds = %cond.false.61, %cond.true.58, %cond.true.53
  %25 = load %struct._object*, %struct._object** %dec, align 8
  %26 = bitcast %struct._object* %25 to %struct.PyDecObject*
  %dec66 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %26, i32 0, i32 2
  call void @mpd_setspecial(%struct.mpd_t* %dec66, i8 zeroext 0, i8 zeroext 4)
  br label %if.end.69

if.else:                                          ; preds = %cond.false.61, %cond.true.58, %cond.true.53
  %27 = load %struct._object*, %struct._object** %dec, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyDecObject*
  %dec67 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %28, i32 0, i32 2
  %29 = load i32, i32* %sign, align 4
  %conv68 = trunc i32 %29 to i8
  call void @mpd_setspecial(%struct.mpd_t* %dec67, i8 zeroext %conv68, i8 zeroext 2)
  br label %if.end.69

if.end.69:                                        ; preds = %if.else, %if.then.65
  %30 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %30, %struct._object** %retval
  br label %return

if.end.70:                                        ; preds = %cond.false.43, %cond.true.40, %cond.true.35
  %31 = load %struct._object*, %struct._object** %v.addr, align 8
  %call71 = call %struct._object* (%struct._object*, i8*, i8*, ...) @PyObject_CallMethod(%struct._object* %31, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), i8* null)
  store %struct._object* %call71, %struct._object** %tmp, align 8
  %32 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp72 = icmp eq %struct._object* %32, null
  br i1 %cmp72, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end.70
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.75:                                        ; preds = %if.end.70
  %33 = load %struct._object*, %struct._object** %tmp, align 8
  %call76 = call %struct._object* (%struct._object*, i8*, i8*, ...) @PyObject_CallMethod(%struct._object* %33, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.43, i32 0, i32 0), i8* null)
  store %struct._object* %call76, %struct._object** %n_d, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.75
  %34 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt, align 8
  %dec78 = add i64 %36, -1
  store i64 %dec78, i64* %ob_refcnt, align 8
  %cmp79 = icmp ne i64 %dec78, 0
  br i1 %cmp79, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body
  br label %if.end.84

if.else.82:                                       ; preds = %do.body
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %39(%struct._object* %40)
  br label %if.end.84

if.end.84:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end

do.end:                                           ; preds = %if.end.84
  %41 = load %struct._object*, %struct._object** %n_d, align 8
  %cmp85 = icmp eq %struct._object* %41, null
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.88:                                        ; preds = %do.end
  %42 = load %struct._object*, %struct._object** %n_d, align 8
  %43 = bitcast %struct._object* %42 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %43, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %44 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %44, %struct._object** %n, align 8
  %45 = load %struct._object*, %struct._object** %n_d, align 8
  %46 = bitcast %struct._object* %45 to %struct.PyTupleObject*
  %ob_item89 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %46, i32 0, i32 1
  %arrayidx90 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item89, i32 0, i64 1
  %47 = load %struct._object*, %struct._object** %arrayidx90, align 8
  store %struct._object* %47, %struct._object** %d, align 8
  %48 = load %struct._object*, %struct._object** %d, align 8
  %call91 = call %struct._object* (%struct._object*, i8*, i8*, ...) @PyObject_CallMethod(%struct._object* %48, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.44, i32 0, i32 0), i8* null)
  store %struct._object* %call91, %struct._object** %tmp, align 8
  %49 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp92 = icmp eq %struct._object* %49, null
  br i1 %cmp92, label %if.then.94, label %if.end.108

if.then.94:                                       ; preds = %if.end.88
  br label %do.body.95

do.body.95:                                       ; preds = %if.then.94
  %50 = load %struct._object*, %struct._object** %n_d, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp97, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt98, align 8
  %dec99 = add i64 %52, -1
  store i64 %dec99, i64* %ob_refcnt98, align 8
  %cmp100 = icmp ne i64 %dec99, 0
  br i1 %cmp100, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %do.body.95
  br label %if.end.106

if.else.103:                                      ; preds = %do.body.95
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  call void %55(%struct._object* %56)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.108:                                       ; preds = %if.end.88
  %57 = load %struct._object*, %struct._object** %tmp, align 8
  %call109 = call i64 @PyLong_AsSsize_t(%struct._object* %57)
  store i64 %call109, i64* %k, align 8
  br label %do.body.110

do.body.110:                                      ; preds = %if.end.108
  %58 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp112, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  %ob_refcnt113 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt113, align 8
  %dec114 = add i64 %60, -1
  store i64 %dec114, i64* %ob_refcnt113, align 8
  %cmp115 = icmp ne i64 %dec114, 0
  br i1 %cmp115, label %if.then.117, label %if.else.118

if.then.117:                                      ; preds = %do.body.110
  br label %if.end.121

if.else.118:                                      ; preds = %do.body.110
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  %ob_type119 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type119, align 8
  %tp_dealloc120 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc120, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp112, align 8
  call void %63(%struct._object* %64)
  br label %if.end.121

if.end.121:                                       ; preds = %if.else.118, %if.then.117
  br label %do.end.122

do.end.122:                                       ; preds = %if.end.121
  %65 = load i64, i64* %k, align 8
  %cmp123 = icmp eq i64 %65, -1
  br i1 %cmp123, label %land.lhs.true.125, label %if.end.142

land.lhs.true.125:                                ; preds = %do.end.122
  %call126 = call %struct._object* @PyErr_Occurred()
  %tobool127 = icmp ne %struct._object* %call126, null
  br i1 %tobool127, label %if.then.128, label %if.end.142

if.then.128:                                      ; preds = %land.lhs.true.125
  br label %do.body.129

do.body.129:                                      ; preds = %if.then.128
  %66 = load %struct._object*, %struct._object** %n_d, align 8
  store %struct._object* %66, %struct._object** %_py_decref_tmp131, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  %ob_refcnt132 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt132, align 8
  %dec133 = add i64 %68, -1
  store i64 %dec133, i64* %ob_refcnt132, align 8
  %cmp134 = icmp ne i64 %dec133, 0
  br i1 %cmp134, label %if.then.136, label %if.else.137

if.then.136:                                      ; preds = %do.body.129
  br label %if.end.140

if.else.137:                                      ; preds = %do.body.129
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  %ob_type138 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type138, align 8
  %tp_dealloc139 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc139, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  call void %71(%struct._object* %72)
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.137, %if.then.136
  br label %do.end.141

do.end.141:                                       ; preds = %if.end.140
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.142:                                       ; preds = %land.lhs.true.125, %do.end.122
  %73 = load i64, i64* %k, align 8
  %dec143 = add i64 %73, -1
  store i64 %dec143, i64* %k, align 8
  %74 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %75 = load %struct._object*, %struct._object** %n, align 8
  %76 = load %struct._object*, %struct._object** %context.addr, align 8
  %call144 = call %struct._object* @PyDecType_FromLongExact(%struct._typeobject* %74, %struct._object* %75, %struct._object* %76)
  store %struct._object* %call144, %struct._object** %dec, align 8
  br label %do.body.145

do.body.145:                                      ; preds = %if.end.142
  %77 = load %struct._object*, %struct._object** %n_d, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp147, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_refcnt148 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt148, align 8
  %dec149 = add i64 %79, -1
  store i64 %dec149, i64* %ob_refcnt148, align 8
  %cmp150 = icmp ne i64 %dec149, 0
  br i1 %cmp150, label %if.then.152, label %if.else.153

if.then.152:                                      ; preds = %do.body.145
  br label %if.end.156

if.else.153:                                      ; preds = %do.body.145
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  %ob_type154 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type154, align 8
  %tp_dealloc155 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc155, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp147, align 8
  call void %82(%struct._object* %83)
  br label %if.end.156

if.end.156:                                       ; preds = %if.else.153, %if.then.152
  br label %do.end.157

do.end.157:                                       ; preds = %if.end.156
  %84 = load %struct._object*, %struct._object** %dec, align 8
  %cmp158 = icmp eq %struct._object* %84, null
  br i1 %cmp158, label %if.then.160, label %if.end.161

if.then.160:                                      ; preds = %do.end.157
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.161:                                       ; preds = %do.end.157
  %call162 = call %struct.mpd_t* @mpd_qnew()
  store %struct.mpd_t* %call162, %struct.mpd_t** %d1, align 8
  %85 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  %cmp163 = icmp eq %struct.mpd_t* %85, null
  br i1 %cmp163, label %if.then.165, label %if.end.180

if.then.165:                                      ; preds = %if.end.161
  br label %do.body.166

do.body.166:                                      ; preds = %if.then.165
  %86 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %86, %struct._object** %_py_decref_tmp168, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  %ob_refcnt169 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0
  %88 = load i64, i64* %ob_refcnt169, align 8
  %dec170 = add i64 %88, -1
  store i64 %dec170, i64* %ob_refcnt169, align 8
  %cmp171 = icmp ne i64 %dec170, 0
  br i1 %cmp171, label %if.then.173, label %if.else.174

if.then.173:                                      ; preds = %do.body.166
  br label %if.end.177

if.else.174:                                      ; preds = %do.body.166
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  %ob_type175 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type175, align 8
  %tp_dealloc176 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc176, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp168, align 8
  call void %91(%struct._object* %92)
  br label %if.end.177

if.end.177:                                       ; preds = %if.else.174, %if.then.173
  br label %do.end.178

do.end.178:                                       ; preds = %if.end.177
  %call179 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.180:                                       ; preds = %if.end.161
  %call181 = call %struct.mpd_t* @mpd_qnew()
  store %struct.mpd_t* %call181, %struct.mpd_t** %d2, align 8
  %93 = load %struct.mpd_t*, %struct.mpd_t** %d2, align 8
  %cmp182 = icmp eq %struct.mpd_t* %93, null
  br i1 %cmp182, label %if.then.184, label %if.end.199

if.then.184:                                      ; preds = %if.end.180
  %94 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  call void @mpd_del(%struct.mpd_t* %94)
  br label %do.body.185

do.body.185:                                      ; preds = %if.then.184
  %95 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %95, %struct._object** %_py_decref_tmp187, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp187, align 8
  %ob_refcnt188 = getelementptr inbounds %struct._object, %struct._object* %96, i32 0, i32 0
  %97 = load i64, i64* %ob_refcnt188, align 8
  %dec189 = add i64 %97, -1
  store i64 %dec189, i64* %ob_refcnt188, align 8
  %cmp190 = icmp ne i64 %dec189, 0
  br i1 %cmp190, label %if.then.192, label %if.else.193

if.then.192:                                      ; preds = %do.body.185
  br label %if.end.196

if.else.193:                                      ; preds = %do.body.185
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp187, align 8
  %ob_type194 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 1
  %99 = load %struct._typeobject*, %struct._typeobject** %ob_type194, align 8
  %tp_dealloc195 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %99, i32 0, i32 4
  %100 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc195, align 8
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp187, align 8
  call void %100(%struct._object* %101)
  br label %if.end.196

if.end.196:                                       ; preds = %if.else.193, %if.then.192
  br label %do.end.197

do.end.197:                                       ; preds = %if.end.196
  %call198 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.199:                                       ; preds = %if.end.180
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %102 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  call void @mpd_qset_uint(%struct.mpd_t* %102, i64 5, %struct.mpd_context_t* %maxctx, i32* %status)
  %103 = load %struct.mpd_t*, %struct.mpd_t** %d2, align 8
  %104 = load i64, i64* %k, align 8
  call void @mpd_qset_ssize(%struct.mpd_t* %103, i64 %104, %struct.mpd_context_t* %maxctx, i32* %status)
  %105 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  %106 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  %107 = load %struct.mpd_t*, %struct.mpd_t** %d2, align 8
  call void @mpd_qpow(%struct.mpd_t* %105, %struct.mpd_t* %106, %struct.mpd_t* %107, %struct.mpd_context_t* %maxctx, i32* %status)
  %108 = load %struct._object*, %struct._object** %context.addr, align 8
  %109 = load i32, i32* %status, align 4
  %call200 = call i32 @dec_addstatus(%struct._object* %108, i32 %109)
  %tobool201 = icmp ne i32 %call200, 0
  br i1 %tobool201, label %if.then.202, label %if.end.216

if.then.202:                                      ; preds = %if.end.199
  %110 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  call void @mpd_del(%struct.mpd_t* %110)
  %111 = load %struct.mpd_t*, %struct.mpd_t** %d2, align 8
  call void @mpd_del(%struct.mpd_t* %111)
  br label %do.body.203

do.body.203:                                      ; preds = %if.then.202
  %112 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %112, %struct._object** %_py_decref_tmp205, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp205, align 8
  %ob_refcnt206 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 0
  %114 = load i64, i64* %ob_refcnt206, align 8
  %dec207 = add i64 %114, -1
  store i64 %dec207, i64* %ob_refcnt206, align 8
  %cmp208 = icmp ne i64 %dec207, 0
  br i1 %cmp208, label %if.then.210, label %if.else.211

if.then.210:                                      ; preds = %do.body.203
  br label %if.end.214

if.else.211:                                      ; preds = %do.body.203
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp205, align 8
  %ob_type212 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 1
  %116 = load %struct._typeobject*, %struct._typeobject** %ob_type212, align 8
  %tp_dealloc213 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %116, i32 0, i32 4
  %117 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc213, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp205, align 8
  call void %117(%struct._object* %118)
  br label %if.end.214

if.end.214:                                       ; preds = %if.else.211, %if.then.210
  br label %do.end.215

do.end.215:                                       ; preds = %if.end.214
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.216:                                       ; preds = %if.end.199
  %119 = load %struct._object*, %struct._object** %dec, align 8
  %120 = bitcast %struct._object* %119 to %struct.PyDecObject*
  %dec217 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %120, i32 0, i32 2
  %121 = load %struct._object*, %struct._object** %dec, align 8
  %122 = bitcast %struct._object* %121 to %struct.PyDecObject*
  %dec218 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %122, i32 0, i32 2
  %123 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  call void @mpd_qmul(%struct.mpd_t* %dec217, %struct.mpd_t* %dec218, %struct.mpd_t* %123, %struct.mpd_context_t* %maxctx, i32* %status)
  %124 = load %struct.mpd_t*, %struct.mpd_t** %d1, align 8
  call void @mpd_del(%struct.mpd_t* %124)
  %125 = load %struct.mpd_t*, %struct.mpd_t** %d2, align 8
  call void @mpd_del(%struct.mpd_t* %125)
  %126 = load %struct._object*, %struct._object** %context.addr, align 8
  %127 = load i32, i32* %status, align 4
  %call219 = call i32 @dec_addstatus(%struct._object* %126, i32 %127)
  %tobool220 = icmp ne i32 %call219, 0
  br i1 %tobool220, label %if.then.221, label %if.end.235

if.then.221:                                      ; preds = %if.end.216
  br label %do.body.222

do.body.222:                                      ; preds = %if.then.221
  %128 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %128, %struct._object** %_py_decref_tmp224, align 8
  %129 = load %struct._object*, %struct._object** %_py_decref_tmp224, align 8
  %ob_refcnt225 = getelementptr inbounds %struct._object, %struct._object* %129, i32 0, i32 0
  %130 = load i64, i64* %ob_refcnt225, align 8
  %dec226 = add i64 %130, -1
  store i64 %dec226, i64* %ob_refcnt225, align 8
  %cmp227 = icmp ne i64 %dec226, 0
  br i1 %cmp227, label %if.then.229, label %if.else.230

if.then.229:                                      ; preds = %do.body.222
  br label %if.end.233

if.else.230:                                      ; preds = %do.body.222
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp224, align 8
  %ob_type231 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 1
  %132 = load %struct._typeobject*, %struct._typeobject** %ob_type231, align 8
  %tp_dealloc232 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %132, i32 0, i32 4
  %133 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc232, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp224, align 8
  call void %133(%struct._object* %134)
  br label %if.end.233

if.end.233:                                       ; preds = %if.else.230, %if.then.229
  br label %do.end.234

do.end.234:                                       ; preds = %if.end.233
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.235:                                       ; preds = %if.end.216
  %135 = load %struct._object*, %struct._object** %dec, align 8
  %136 = bitcast %struct._object* %135 to %struct.PyDecObject*
  %dec236 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %136, i32 0, i32 2
  %137 = load i32, i32* %sign, align 4
  %conv237 = trunc i32 %137 to i8
  call void @mpd_set_sign(%struct.mpd_t* %dec236, i8 zeroext %conv237)
  %138 = load i64, i64* %k, align 8
  %sub = sub i64 0, %138
  %139 = load %struct._object*, %struct._object** %dec, align 8
  %140 = bitcast %struct._object* %139 to %struct.PyDecObject*
  %dec238 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %140, i32 0, i32 2
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec238, i32 0, i32 1
  store i64 %sub, i64* %exp, align 8
  %141 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %141, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.235, %do.end.234, %do.end.215, %do.end.197, %do.end.178, %if.then.160, %do.end.141, %do.end.107, %if.then.87, %if.then.74, %if.end.69, %if.then.51, %if.then.21, %if.then.15, %if.then
  %142 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %142
}

declare { double, double } @PyComplex_AsCComplex(%struct._object*) #1

declare %struct._object* @PyFloat_FromDouble(double) #1

declare i32 @PyObject_IsInstance(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @numerator_as_decimal(%struct._object* %r, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %r.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %num = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %r, %struct._object** %r.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %r.addr, align 8
  %call = call %struct._object* @PyObject_GetAttrString(%struct._object* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %tmp, align 8
  %1 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %tmp, align 8
  %3 = load %struct._object*, %struct._object** %context.addr, align 8
  %call2 = call %struct._object* @PyDecType_FromLongExact(%struct._typeobject* @PyDec_Type, %struct._object* %2, %struct._object* %3)
  store %struct._object* %call2, %struct._object** %num, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  %11 = load %struct._object*, %struct._object** %num, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @multiply_by_denominator(%struct._object* %v, %struct._object* %r, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %r.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %denom = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %maxctx = alloca %struct.mpd_context_t, align 8
  %exp = alloca i64, align 8
  %vv = alloca %struct.mpd_t*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %r, %struct._object** %r.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* null, %struct._object** %tmp, align 8
  store %struct._object* null, %struct._object** %denom, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %r.addr, align 8
  %call = call %struct._object* @PyObject_GetAttrString(%struct._object* %0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %tmp, align 8
  %1 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %tmp, align 8
  %3 = load %struct._object*, %struct._object** %context.addr, align 8
  %call6 = call %struct._object* @PyDecType_FromLongExact(%struct._typeobject* @PyDec_Type, %struct._object* %2, %struct._object* %3)
  store %struct._object* %call6, %struct._object** %denom, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.10

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.10
  %11 = load %struct._object*, %struct._object** %denom, align 8
  %cmp11 = icmp eq %struct._object* %11, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %do.end
  %12 = load %struct._object*, %struct._object** %v.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecObject*
  %dec14 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %13, i32 0, i32 2
  %call15 = call %struct.mpd_t* @mpd_qncopy(%struct.mpd_t* %dec14)
  store %struct.mpd_t* %call15, %struct.mpd_t** %vv, align 8
  %14 = load %struct.mpd_t*, %struct.mpd_t** %vv, align 8
  %cmp16 = icmp eq %struct.mpd_t* %14, null
  br i1 %cmp16, label %if.then.17, label %if.end.31

if.then.17:                                       ; preds = %if.end.13
  br label %do.body.18

do.body.18:                                       ; preds = %if.then.17
  %15 = load %struct._object*, %struct._object** %denom, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp20, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt21, align 8
  %dec22 = add i64 %17, -1
  store i64 %dec22, i64* %ob_refcnt21, align 8
  %cmp23 = icmp ne i64 %dec22, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.18
  br label %if.end.28

if.else.25:                                       ; preds = %do.body.18
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  call void %20(%struct._object* %21)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  %call30 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.31:                                        ; preds = %if.end.13
  %call32 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call32, %struct._object** %result, align 8
  %22 = load %struct._object*, %struct._object** %result, align 8
  %cmp33 = icmp eq %struct._object* %22, null
  br i1 %cmp33, label %if.then.34, label %if.end.47

if.then.34:                                       ; preds = %if.end.31
  br label %do.body.35

do.body.35:                                       ; preds = %if.then.34
  %23 = load %struct._object*, %struct._object** %denom, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp37, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %25, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.35
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.35
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %28(%struct._object* %29)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  %30 = load %struct.mpd_t*, %struct.mpd_t** %vv, align 8
  call void @mpd_del(%struct.mpd_t* %30)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.47:                                        ; preds = %if.end.31
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %31 = load %struct.mpd_t*, %struct.mpd_t** %vv, align 8
  %exp48 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %31, i32 0, i32 1
  %32 = load i64, i64* %exp48, align 8
  store i64 %32, i64* %exp, align 8
  %33 = load %struct.mpd_t*, %struct.mpd_t** %vv, align 8
  %exp49 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %33, i32 0, i32 1
  store i64 0, i64* %exp49, align 8
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec50 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct.mpd_t*, %struct.mpd_t** %vv, align 8
  %37 = load %struct._object*, %struct._object** %denom, align 8
  %38 = bitcast %struct._object* %37 to %struct.PyDecObject*
  %dec51 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %38, i32 0, i32 2
  call void @mpd_qmul(%struct.mpd_t* %dec50, %struct.mpd_t* %36, %struct.mpd_t* %dec51, %struct.mpd_context_t* %maxctx, i32* %status)
  %39 = load i64, i64* %exp, align 8
  %40 = load %struct._object*, %struct._object** %result, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %41, i32 0, i32 2
  %exp53 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec52, i32 0, i32 1
  store i64 %39, i64* %exp53, align 8
  br label %do.body.54

do.body.54:                                       ; preds = %if.end.47
  %42 = load %struct._object*, %struct._object** %denom, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.54
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.54
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  %49 = load %struct.mpd_t*, %struct.mpd_t** %vv, align 8
  call void @mpd_del(%struct.mpd_t* %49)
  %50 = load i32, i32* %status, align 4
  %tobool = icmp ne i32 %50, 0
  br i1 %tobool, label %if.then.66, label %if.end.79

if.then.66:                                       ; preds = %do.end.65
  %51 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %51, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.47, i32 0, i32 0))
  br label %do.body.67

do.body.67:                                       ; preds = %if.then.66
  %52 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp69, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %54, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.67
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.67
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %57(%struct._object* %58)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.79:                                        ; preds = %do.end.65
  %59 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %59, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.79, %do.end.78, %do.end.46, %do.end.29, %if.then.12, %if.then
  %60 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %60
}

declare double @PyFloat_AsDouble(%struct._object*) #1

; Function Attrs: nounwind readnone
declare double @copysign(double, double) #4

; Function Attrs: nounwind readnone
declare i32 @__isnanf(float) #4

; Function Attrs: nounwind readnone
declare i32 @__isnan(double) #4

; Function Attrs: nounwind readnone
declare i32 @__isnanl(x86_fp80) #4

; Function Attrs: nounwind readnone
declare i32 @__isinff(float) #4

; Function Attrs: nounwind readnone
declare i32 @__isinf(double) #4

; Function Attrs: nounwind readnone
declare i32 @__isinfl(x86_fp80) #4

declare hidden void @mpd_setspecial(%struct.mpd_t*, i8 zeroext, i8 zeroext) #1

declare i64 @PyLong_AsSsize_t(%struct._object*) #1

declare hidden void @mpd_qset_uint(%struct.mpd_t*, i64, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qset_ssize(%struct.mpd_t*, i64, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_set_sign(%struct.mpd_t*, i8 zeroext) #1

declare hidden %struct.mpd_t* @mpd_qncopy(%struct.mpd_t*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qexp(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qexp.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qexp(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qln(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qln.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qln(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qlog10(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qlog10.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qlog10(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qnext_minus(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qnext_minus.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qnext_minus(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qnext_plus(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qnext_plus.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qnext_plus(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qreduce(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qreduce.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qreduce(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_ToIntegralValue(%struct._object* %dec, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %rounding = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %workctx = alloca %struct.mpd_context_t, align 8
  %round = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %rounding, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.114, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @PyDec_ToIntegralValue.kwlist, i32 0, i32 0), %struct._object** %rounding, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %context, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %10, i32 0, i32 1
  %11 = bitcast %struct.mpd_context_t* %workctx to i8*
  %12 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 48, i32 8, i1 false)
  %13 = load %struct._object*, %struct._object** %rounding, align 8
  %cmp13 = icmp ne %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp13, label %if.then.14, label %if.end.24

if.then.14:                                       ; preds = %if.end.12
  %14 = load %struct._object*, %struct._object** %rounding, align 8
  %call15 = call i32 @getround(%struct._object* %14)
  store i32 %call15, i32* %round, align 4
  %15 = load i32, i32* %round, align 4
  %cmp16 = icmp slt i32 %15, 0
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %if.then.14
  %16 = load i32, i32* %round, align 4
  %call19 = call i32 @mpd_qsetround(%struct.mpd_context_t* %workctx, i32 %16)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.23, label %if.then.21

if.then.21:                                       ; preds = %if.end.18
  %call22 = call %struct._object* @runtime_error_ptr(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.115, i32 0, i32 0))
  store %struct._object* %call22, %struct._object** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.18
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.12
  %call25 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call25, %struct._object** %result, align 8
  %17 = load %struct._object*, %struct._object** %result, align 8
  %cmp26 = icmp eq %struct._object* %17, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  %18 = load %struct._object*, %struct._object** %result, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyDecObject*
  %dec29 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %19, i32 0, i32 2
  %20 = load %struct._object*, %struct._object** %dec.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDecObject*
  %dec30 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %21, i32 0, i32 2
  call void @mpd_qround_to_int(%struct.mpd_t* %dec29, %struct.mpd_t* %dec30, %struct.mpd_context_t* %workctx, i32* %status)
  %22 = load %struct._object*, %struct._object** %context, align 8
  %23 = load i32, i32* %status, align 4
  %call31 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.then.33, label %if.end.40

if.then.33:                                       ; preds = %if.end.28
  br label %do.body

do.body:                                          ; preds = %if.then.33
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt, align 8
  %dec34 = add i64 %26, -1
  store i64 %dec34, i64* %ob_refcnt, align 8
  %cmp35 = icmp ne i64 %dec34, 0
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body
  br label %if.end.39

if.else.37:                                       ; preds = %do.body
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %29(%struct._object* %30)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end

do.end:                                           ; preds = %if.end.39
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %if.end.28
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.40, %do.end, %if.then.27, %if.then.21, %if.then.17, %if.then.10, %if.then.4, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_ToIntegralExact(%struct._object* %dec, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %rounding = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %workctx = alloca %struct.mpd_context_t, align 8
  %round = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %rounding, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.114, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @PyDec_ToIntegralExact.kwlist, i32 0, i32 0), %struct._object** %rounding, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %context, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %10, i32 0, i32 1
  %11 = bitcast %struct.mpd_context_t* %workctx to i8*
  %12 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 48, i32 8, i1 false)
  %13 = load %struct._object*, %struct._object** %rounding, align 8
  %cmp13 = icmp ne %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp13, label %if.then.14, label %if.end.24

if.then.14:                                       ; preds = %if.end.12
  %14 = load %struct._object*, %struct._object** %rounding, align 8
  %call15 = call i32 @getround(%struct._object* %14)
  store i32 %call15, i32* %round, align 4
  %15 = load i32, i32* %round, align 4
  %cmp16 = icmp slt i32 %15, 0
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %if.then.14
  %16 = load i32, i32* %round, align 4
  %call19 = call i32 @mpd_qsetround(%struct.mpd_context_t* %workctx, i32 %16)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.23, label %if.then.21

if.then.21:                                       ; preds = %if.end.18
  %call22 = call %struct._object* @runtime_error_ptr(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.117, i32 0, i32 0))
  store %struct._object* %call22, %struct._object** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.18
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.12
  %call25 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call25, %struct._object** %result, align 8
  %17 = load %struct._object*, %struct._object** %result, align 8
  %cmp26 = icmp eq %struct._object* %17, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  %18 = load %struct._object*, %struct._object** %result, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyDecObject*
  %dec29 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %19, i32 0, i32 2
  %20 = load %struct._object*, %struct._object** %dec.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDecObject*
  %dec30 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %21, i32 0, i32 2
  call void @mpd_qround_to_intx(%struct.mpd_t* %dec29, %struct.mpd_t* %dec30, %struct.mpd_context_t* %workctx, i32* %status)
  %22 = load %struct._object*, %struct._object** %context, align 8
  %23 = load i32, i32* %status, align 4
  %call31 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.then.33, label %if.end.40

if.then.33:                                       ; preds = %if.end.28
  br label %do.body

do.body:                                          ; preds = %if.then.33
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt, align 8
  %dec34 = add i64 %26, -1
  store i64 %dec34, i64* %ob_refcnt, align 8
  %cmp35 = icmp ne i64 %dec34, 0
  br i1 %cmp35, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body
  br label %if.end.39

if.else.37:                                       ; preds = %do.body
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %29(%struct._object* %30)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end

do.end:                                           ; preds = %if.end.39
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %if.end.28
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.40, %do.end, %if.then.27, %if.then.21, %if.then.17, %if.then.10, %if.then.4, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qsqrt(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qsqrt.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qsqrt(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qcompare(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qcompare.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  %call55 = call i32 @mpd_qcompare(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp57, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %44, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %47(%struct._object* %48)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp68, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %51, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.67
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.67
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %54(%struct._object* %55)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call78 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then.80, label %if.end.92

if.then.80:                                       ; preds = %do.end.77
  br label %do.body.81

do.body.81:                                       ; preds = %if.then.80
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp82, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %60, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.86, label %if.else.87

if.then.86:                                       ; preds = %do.body.81
  br label %if.end.90

if.else.87:                                       ; preds = %do.body.81
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %63(%struct._object* %64)
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  br label %do.end.91

do.end.91:                                        ; preds = %if.end.90
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.92:                                        ; preds = %do.end.77
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.92, %do.end.91, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qcompare_signal(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qcompare_signal.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  %call55 = call i32 @mpd_qcompare_signal(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp57, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %44, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %47(%struct._object* %48)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp68, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %51, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.67
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.67
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %54(%struct._object* %55)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call78 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then.80, label %if.end.92

if.then.80:                                       ; preds = %do.end.77
  br label %do.body.81

do.body.81:                                       ; preds = %if.then.80
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp82, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %60, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.86, label %if.else.87

if.then.86:                                       ; preds = %do.body.81
  br label %if.end.90

if.else.87:                                       ; preds = %do.body.81
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %63(%struct._object* %64)
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  br label %do.end.91

do.end.91:                                        ; preds = %if.end.90
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.92:                                        ; preds = %do.end.77
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.92, %do.end.91, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qmax(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qmax.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qmax(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qmax_mag(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qmax_mag.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qmax_mag(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qmin(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qmin.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qmin(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qmin_mag(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qmin_mag.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qmin_mag(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qnext_toward(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qnext_toward.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qnext_toward(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qquantize(%struct._object* %v, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %rounding = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %workctx = alloca %struct.mpd_context_t, align 8
  %round = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp79 = alloca %struct._object*, align 8
  %_py_decref_tmp93 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %rounding, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.120, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @dec_mpd_qquantize.kwlist, i32 0, i32 0), %struct._object** %w, %struct._object** %rounding, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %context, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %10, i32 0, i32 1
  %11 = bitcast %struct.mpd_context_t* %workctx to i8*
  %12 = bitcast %struct.mpd_context_t* %ctx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %11, i8* %12, i64 48, i32 8, i1 false)
  %13 = load %struct._object*, %struct._object** %rounding, align 8
  %cmp13 = icmp ne %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp13, label %if.then.14, label %if.end.24

if.then.14:                                       ; preds = %if.end.12
  %14 = load %struct._object*, %struct._object** %rounding, align 8
  %call15 = call i32 @getround(%struct._object* %14)
  store i32 %call15, i32* %round, align 4
  %15 = load i32, i32* %round, align 4
  %cmp16 = icmp slt i32 %15, 0
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %if.then.14
  %16 = load i32, i32* %round, align 4
  %call19 = call i32 @mpd_qsetround(%struct.mpd_context_t* %workctx, i32 %16)
  %tobool20 = icmp ne i32 %call19, 0
  br i1 %tobool20, label %if.end.23, label %if.then.21

if.then.21:                                       ; preds = %if.end.18
  %call22 = call %struct._object* @runtime_error_ptr(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.121, i32 0, i32 0))
  store %struct._object* %call22, %struct._object** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.18
  br label %if.end.24

if.end.24:                                        ; preds = %if.end.23, %if.end.12
  %17 = load %struct._object*, %struct._object** %v.addr, align 8
  %18 = load %struct._object*, %struct._object** %context, align 8
  %call25 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %17, %struct._object* %18)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  %19 = load %struct._object*, %struct._object** %w, align 8
  %20 = load %struct._object*, %struct._object** %context, align 8
  %call29 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %19, %struct._object* %20)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.37, label %if.then.31

if.then.31:                                       ; preds = %if.end.28
  br label %do.body

do.body:                                          ; preds = %if.then.31
  %21 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %23, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp32 = icmp ne i64 %dec, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body
  br label %if.end.36

if.else.34:                                       ; preds = %do.body
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %26(%struct._object* %27)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end

do.end:                                           ; preds = %if.end.36
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %if.end.28
  %call38 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call38, %struct._object** %result, align 8
  %28 = load %struct._object*, %struct._object** %result, align 8
  %cmp39 = icmp eq %struct._object* %28, null
  br i1 %cmp39, label %if.then.40, label %if.end.63

if.then.40:                                       ; preds = %if.end.37
  br label %do.body.41

do.body.41:                                       ; preds = %if.then.40
  %29 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp42, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %31, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %34(%struct._object* %35)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %do.body.52

do.body.52:                                       ; preds = %do.end.51
  %36 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp53, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %38, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %41(%struct._object* %42)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.63:                                        ; preds = %if.end.37
  %43 = load %struct._object*, %struct._object** %result, align 8
  %44 = bitcast %struct._object* %43 to %struct.PyDecObject*
  %dec64 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %44, i32 0, i32 2
  %45 = load %struct._object*, %struct._object** %a, align 8
  %46 = bitcast %struct._object* %45 to %struct.PyDecObject*
  %dec65 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %46, i32 0, i32 2
  %47 = load %struct._object*, %struct._object** %b, align 8
  %48 = bitcast %struct._object* %47 to %struct.PyDecObject*
  %dec66 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %48, i32 0, i32 2
  call void @mpd_qquantize(%struct.mpd_t* %dec64, %struct.mpd_t* %dec65, %struct.mpd_t* %dec66, %struct.mpd_context_t* %workctx, i32* %status)
  br label %do.body.67

do.body.67:                                       ; preds = %if.end.63
  %49 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp68, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %51, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.67
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.67
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %54(%struct._object* %55)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  br label %do.body.78

do.body.78:                                       ; preds = %do.end.77
  %56 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp79, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_refcnt80 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt80, align 8
  %dec81 = add i64 %58, -1
  store i64 %dec81, i64* %ob_refcnt80, align 8
  %cmp82 = icmp ne i64 %dec81, 0
  br i1 %cmp82, label %if.then.83, label %if.else.84

if.then.83:                                       ; preds = %do.body.78
  br label %if.end.87

if.else.84:                                       ; preds = %do.body.78
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_type85 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type85, align 8
  %tp_dealloc86 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc86, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  call void %61(%struct._object* %62)
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.84, %if.then.83
  br label %do.end.88

do.end.88:                                        ; preds = %if.end.87
  %63 = load %struct._object*, %struct._object** %context, align 8
  %64 = load i32, i32* %status, align 4
  %call89 = call i32 @dec_addstatus(%struct._object* %63, i32 %64)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.then.91, label %if.end.103

if.then.91:                                       ; preds = %do.end.88
  br label %do.body.92

do.body.92:                                       ; preds = %if.then.91
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %_py_decref_tmp93, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  %ob_refcnt94 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 0
  %67 = load i64, i64* %ob_refcnt94, align 8
  %dec95 = add i64 %67, -1
  store i64 %dec95, i64* %ob_refcnt94, align 8
  %cmp96 = icmp ne i64 %dec95, 0
  br i1 %cmp96, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %do.body.92
  br label %if.end.101

if.else.98:                                       ; preds = %do.body.92
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  %ob_type99 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 1
  %69 = load %struct._typeobject*, %struct._typeobject** %ob_type99, align 8
  %tp_dealloc100 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %69, i32 0, i32 4
  %70 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc100, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp93, align 8
  call void %70(%struct._object* %71)
  br label %if.end.101

if.end.101:                                       ; preds = %if.else.98, %if.then.97
  br label %do.end.102

do.end.102:                                       ; preds = %if.end.101
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.103:                                       ; preds = %do.end.88
  %72 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %72, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.103, %do.end.102, %do.end.62, %do.end, %if.then.27, %if.then.21, %if.then.17, %if.then.10, %if.then.4, %if.then
  %73 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %73
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qrem_near(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qrem_near.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qrem_near(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qfma(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %third = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %c = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp78 = alloca %struct._object*, align 8
  %_py_decref_tmp94 = alloca %struct._object*, align 8
  %_py_decref_tmp105 = alloca %struct._object*, align 8
  %_py_decref_tmp116 = alloca %struct._object*, align 8
  %_py_decref_tmp130 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.123, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @dec_mpd_qfma.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %third, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %20 = load %struct._object*, %struct._object** %third, align 8
  %21 = load %struct._object*, %struct._object** %context, align 8
  %call26 = call i32 @convert_op(i32 1, %struct._object** %c, %struct._object* %20, %struct._object* %21)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.end.51, label %if.then.28

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %22 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp30, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %24, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %27(%struct._object* %28)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %29 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp41, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %31, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %34(%struct._object* %35)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %call52 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call52, %struct._object** %result, align 8
  %cmp53 = icmp eq %struct._object* %call52, null
  br i1 %cmp53, label %if.then.54, label %if.end.88

if.then.54:                                       ; preds = %if.end.51
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.54
  %36 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp56, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %38, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %41(%struct._object* %42)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %43 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp67, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %45, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %48(%struct._object* %49)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  br label %do.body.77

do.body.77:                                       ; preds = %do.end.76
  %50 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp78, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_refcnt79 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt79, align 8
  %dec80 = add i64 %52, -1
  store i64 %dec80, i64* %ob_refcnt79, align 8
  %cmp81 = icmp ne i64 %dec80, 0
  br i1 %cmp81, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %do.body.77
  br label %if.end.86

if.else.83:                                       ; preds = %do.body.77
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  call void %55(%struct._object* %56)
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.88:                                        ; preds = %if.end.51
  %57 = load %struct._object*, %struct._object** %result, align 8
  %58 = bitcast %struct._object* %57 to %struct.PyDecObject*
  %dec89 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %58, i32 0, i32 2
  %59 = load %struct._object*, %struct._object** %a, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyDecObject*
  %dec90 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %60, i32 0, i32 2
  %61 = load %struct._object*, %struct._object** %b, align 8
  %62 = bitcast %struct._object* %61 to %struct.PyDecObject*
  %dec91 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %62, i32 0, i32 2
  %63 = load %struct._object*, %struct._object** %c, align 8
  %64 = bitcast %struct._object* %63 to %struct.PyDecObject*
  %dec92 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %64, i32 0, i32 2
  %65 = load %struct._object*, %struct._object** %context, align 8
  %66 = bitcast %struct._object* %65 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %66, i32 0, i32 1
  call void @mpd_qfma(%struct.mpd_t* %dec89, %struct.mpd_t* %dec90, %struct.mpd_t* %dec91, %struct.mpd_t* %dec92, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.93

do.body.93:                                       ; preds = %if.end.88
  %67 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %67, %struct._object** %_py_decref_tmp94, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_refcnt95 = getelementptr inbounds %struct._object, %struct._object* %68, i32 0, i32 0
  %69 = load i64, i64* %ob_refcnt95, align 8
  %dec96 = add i64 %69, -1
  store i64 %dec96, i64* %ob_refcnt95, align 8
  %cmp97 = icmp ne i64 %dec96, 0
  br i1 %cmp97, label %if.then.98, label %if.else.99

if.then.98:                                       ; preds = %do.body.93
  br label %if.end.102

if.else.99:                                       ; preds = %do.body.93
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_type100 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type100, align 8
  %tp_dealloc101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %71, i32 0, i32 4
  %72 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc101, align 8
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  call void %72(%struct._object* %73)
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.99, %if.then.98
  br label %do.end.103

do.end.103:                                       ; preds = %if.end.102
  br label %do.body.104

do.body.104:                                      ; preds = %do.end.103
  %74 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %74, %struct._object** %_py_decref_tmp105, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt106, align 8
  %dec107 = add i64 %76, -1
  store i64 %dec107, i64* %ob_refcnt106, align 8
  %cmp108 = icmp ne i64 %dec107, 0
  br i1 %cmp108, label %if.then.109, label %if.else.110

if.then.109:                                      ; preds = %do.body.104
  br label %if.end.113

if.else.110:                                      ; preds = %do.body.104
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_type111 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type111, align 8
  %tp_dealloc112 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 4
  %79 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc112, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  call void %79(%struct._object* %80)
  br label %if.end.113

if.end.113:                                       ; preds = %if.else.110, %if.then.109
  br label %do.end.114

do.end.114:                                       ; preds = %if.end.113
  br label %do.body.115

do.body.115:                                      ; preds = %do.end.114
  %81 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %81, %struct._object** %_py_decref_tmp116, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp116, align 8
  %ob_refcnt117 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt117, align 8
  %dec118 = add i64 %83, -1
  store i64 %dec118, i64* %ob_refcnt117, align 8
  %cmp119 = icmp ne i64 %dec118, 0
  br i1 %cmp119, label %if.then.120, label %if.else.121

if.then.120:                                      ; preds = %do.body.115
  br label %if.end.124

if.else.121:                                      ; preds = %do.body.115
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp116, align 8
  %ob_type122 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type122, align 8
  %tp_dealloc123 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 4
  %86 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc123, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp116, align 8
  call void %86(%struct._object* %87)
  br label %if.end.124

if.end.124:                                       ; preds = %if.else.121, %if.then.120
  br label %do.end.125

do.end.125:                                       ; preds = %if.end.124
  %88 = load %struct._object*, %struct._object** %context, align 8
  %89 = load i32, i32* %status, align 4
  %call126 = call i32 @dec_addstatus(%struct._object* %88, i32 %89)
  %tobool127 = icmp ne i32 %call126, 0
  br i1 %tobool127, label %if.then.128, label %if.end.140

if.then.128:                                      ; preds = %do.end.125
  br label %do.body.129

do.body.129:                                      ; preds = %if.then.128
  %90 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %90, %struct._object** %_py_decref_tmp130, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_refcnt131 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 0
  %92 = load i64, i64* %ob_refcnt131, align 8
  %dec132 = add i64 %92, -1
  store i64 %dec132, i64* %ob_refcnt131, align 8
  %cmp133 = icmp ne i64 %dec132, 0
  br i1 %cmp133, label %if.then.134, label %if.else.135

if.then.134:                                      ; preds = %do.body.129
  br label %if.end.138

if.else.135:                                      ; preds = %do.body.129
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_type136 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 1
  %94 = load %struct._typeobject*, %struct._typeobject** %ob_type136, align 8
  %tp_dealloc137 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 4
  %95 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc137, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  call void %95(%struct._object* %96)
  br label %if.end.138

if.end.138:                                       ; preds = %if.else.135, %if.then.134
  br label %do.end.139

do.end.139:                                       ; preds = %if.end.138
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.140:                                       ; preds = %do.end.125
  %97 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %97, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.140, %do.end.139, %do.end.87, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %98 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %98
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_iscanonical(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_iscanonical(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_isfinite(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isfinite(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_isinfinite(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isinfinite(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_isnan(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isnan(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_isqnan(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isqnan(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_issnan(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_issnan(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_issigned(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_issigned(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_iszero(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_iszero(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %call1 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call2 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1, %cond.true ], [ %call2, %cond.false ]
  ret %struct._object* %cond
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_isnormal(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_isnormal.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %context, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 1
  %call13 = call i32 @mpd_isnormal(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.12
  %call15 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end.12
  %call16 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call15, %cond.true ], [ %call16, %cond.false ]
  store %struct._object* %cond, %struct._object** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then.10, %if.then.4, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_issubnormal(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_issubnormal.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %context, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 1
  %call13 = call i32 @mpd_issubnormal(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.12
  %call15 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end.12
  %call16 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call15, %cond.true ], [ %call16, %cond.false ]
  store %struct._object* %cond, %struct._object** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then.10, %if.then.4, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_adjexp(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %retval1 = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isspecial(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i64 0, i64* %retval1, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec2 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call3 = call i64 @mpd_adjexp(%struct.mpd_t* %dec2)
  store i64 %call3, i64* %retval1, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load i64, i64* %retval1, align 8
  %call4 = call %struct._object* @PyLong_FromSsize_t(i64 %4)
  ret %struct._object* %call4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_canonical(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  ret %struct._object* %2
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_conjugate(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  ret %struct._object* %2
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_radix(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %result, align 8
  call void @_dec_settriple(%struct._object* %1, i8 zeroext 0, i32 10, i64 0)
  %2 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qcopy_abs(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %0 = load %struct._object*, %struct._object** %result, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call2 = call i32 @mpd_qcopy_abs(%struct.mpd_t* %dec, %struct.mpd_t* %dec1, i32* %status)
  %4 = load i32, i32* %status, align 4
  %and = and i32 %4, 512
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.3, label %if.end.9

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %5 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec4 = add i64 %7, -1
  store i64 %dec4, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec4, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %call8 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %12, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.9, %do.end, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qcopy_negate(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %0 = load %struct._object*, %struct._object** %result, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call2 = call i32 @mpd_qcopy_negate(%struct.mpd_t* %dec, %struct.mpd_t* %dec1, i32* %status)
  %4 = load i32, i32* %status, align 4
  %and = and i32 %4, 512
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.3, label %if.end.9

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %5 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec4 = add i64 %7, -1
  store i64 %dec4, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec4, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %call8 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %12 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %12, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.9, %do.end, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qlogb(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qlogb.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qlogb(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qinvert(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_qinvert.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %call13 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call13, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %call13, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec17 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qinvert(%struct.mpd_t* %dec, %struct.mpd_t* %dec17, %struct.mpd_context_t* %ctx, i32* %status)
  %15 = load %struct._object*, %struct._object** %context, align 8
  %16 = load i32, i32* %status, align 4
  %call18 = call i32 @dec_addstatus(%struct._object* %15, i32 %16)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then.20, label %if.end.27

if.then.20:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.20
  %17 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec21 = add i64 %19, -1
  store i64 %dec21, i64* %ob_refcnt, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body
  br label %if.end.26

if.else.24:                                       ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end

do.end:                                           ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.16
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.27, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_class(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %cp = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_class.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %context, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 1
  %call13 = call i8* @mpd_class(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx)
  store i8* %call13, i8** %cp, align 8
  %13 = load i8*, i8** %cp, align 8
  %call14 = call %struct._object* @PyUnicode_FromString(i8* %13)
  store %struct._object* %call14, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.10, %if.then.4, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_to_eng(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %s = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @dec_mpd_to_eng.kwlist, i32 0, i32 0), %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %context, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 4
  %13 = load i32, i32* %capitals, align 4
  %call13 = call i64 @mpd_to_eng_size(i8** %s, %struct.mpd_t* %dec, i32 %13)
  store i64 %call13, i64* %size, align 8
  %14 = load i64, i64* %size, align 8
  %cmp14 = icmp slt i64 %14, 0
  br i1 %cmp14, label %if.then.15, label %if.end.17

if.then.15:                                       ; preds = %if.end.12
  %call16 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.17:                                        ; preds = %if.end.12
  %15 = load i8*, i8** %s, align 8
  %16 = load i64, i64* %size, align 8
  %call18 = call %struct._object* @unicode_fromascii(i8* %15, i64 %16)
  store %struct._object* %call18, %struct._object** %result, align 8
  %17 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %18 = load i8*, i8** %s, align 8
  call void %17(i8* %18)
  %19 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.17, %if.then.15, %if.then.10, %if.then.4, %if.then
  %20 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %20
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_compare_total(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_compare_total.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %call55 = call i32 @mpd_compare_total(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54)
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.51
  %40 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp57, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %42, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %45(%struct._object* %46)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  %47 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp68, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %49, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.67
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.67
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %52(%struct._object* %53)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  %54 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %54, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.77, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %55 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %55
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_compare_total_mag(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_compare_total_mag.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %call55 = call i32 @mpd_compare_total_mag(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54)
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.51
  %40 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp57, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %42, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %45(%struct._object* %46)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  %47 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp68, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %49, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.67
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.67
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %52(%struct._object* %53)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  %54 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %54, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.77, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %55 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %55
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qcopy_sign(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qcopy_sign.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %20 = load %struct._object*, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %20, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %21 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp30, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %23, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %26(%struct._object* %27)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %28 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp41, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %30, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %33(%struct._object* %34)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %35 = load %struct._object*, %struct._object** %result, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %36, i32 0, i32 2
  %37 = load %struct._object*, %struct._object** %a, align 8
  %38 = bitcast %struct._object* %37 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %38, i32 0, i32 2
  %39 = load %struct._object*, %struct._object** %b, align 8
  %40 = bitcast %struct._object* %39 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %40, i32 0, i32 2
  %call55 = call i32 @mpd_qcopy_sign(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, i32* %status)
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.51
  %41 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp57, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %43, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %46(%struct._object* %47)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %do.body.67

do.body.67:                                       ; preds = %do.end.66
  %48 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp68, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %50, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.72, label %if.else.73

if.then.72:                                       ; preds = %do.body.67
  br label %if.end.76

if.else.73:                                       ; preds = %do.body.67
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %tp_dealloc75 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc75, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %53(%struct._object* %54)
  br label %if.end.76

if.end.76:                                        ; preds = %if.else.73, %if.then.72
  br label %do.end.77

do.end.77:                                        ; preds = %if.end.76
  %55 = load %struct._object*, %struct._object** %context, align 8
  %56 = load i32, i32* %status, align 4
  %call78 = call i32 @dec_addstatus(%struct._object* %55, i32 %56)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then.80, label %if.end.92

if.then.80:                                       ; preds = %do.end.77
  br label %do.body.81

do.body.81:                                       ; preds = %if.then.80
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %_py_decref_tmp82, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 0
  %59 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %59, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.86, label %if.else.87

if.then.86:                                       ; preds = %do.body.81
  br label %if.end.90

if.else.87:                                       ; preds = %do.body.81
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 1
  %61 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %61, i32 0, i32 4
  %62 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %62(%struct._object* %63)
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  br label %do.end.91

do.end.91:                                        ; preds = %if.end.90
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.92:                                        ; preds = %do.end.77
  %64 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %64, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.92, %do.end.91, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %65 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %65
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_same_quantum(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp44 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_same_quantum.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %20 = load %struct._object*, %struct._object** %a, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDecObject*
  %dec26 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %21, i32 0, i32 2
  %22 = load %struct._object*, %struct._object** %b, align 8
  %23 = bitcast %struct._object* %22 to %struct.PyDecObject*
  %dec27 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %23, i32 0, i32 2
  %call28 = call i32 @mpd_same_quantum(%struct.mpd_t* %dec26, %struct.mpd_t* %dec27)
  %tobool29 = icmp ne i32 %call28, 0
  br i1 %tobool29, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.25
  %call30 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end.25
  %call31 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call30, %cond.true ], [ %call31, %cond.false ]
  store %struct._object* %cond, %struct._object** %result, align 8
  br label %do.body.32

do.body.32:                                       ; preds = %cond.end
  %24 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %26, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %29(%struct._object* %30)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  %31 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp44, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt45, align 8
  %dec46 = add i64 %33, -1
  store i64 %dec46, i64* %ob_refcnt45, align 8
  %cmp47 = icmp ne i64 %dec46, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.43
  br label %if.end.52

if.else.49:                                       ; preds = %do.body.43
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %tp_dealloc51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc51, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  call void %36(%struct._object* %37)
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.49, %if.then.48
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  %38 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %38, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.53, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %39 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %39
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qand(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qand.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qand(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qor(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qor.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qor(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qxor(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qxor.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qxor(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qrotate(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qrotate.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qrotate(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qscaleb(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qscaleb.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qscaleb(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_mpd_qshift(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %other = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_decref_tmp81 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %context, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), i8** getelementptr inbounds ([3 x i8*], [3 x i8*]* @dec_mpd_qshift.kwlist, i32 0, i32 0), %struct._object** %other, %struct._object** %context)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @current_context()
  store %struct._object* %call2, %struct._object** %context, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  %cmp3 = icmp eq %struct._object* %3, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  br label %if.end.12

if.else:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %context, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %context, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end.5
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %context, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %9, %struct._object* %10)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.16, label %if.then.15

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %11 = load %struct._object*, %struct._object** %other, align 8
  %12 = load %struct._object*, %struct._object** %context, align 8
  %call17 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %11, %struct._object* %12)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.end.25, label %if.then.19

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.24

if.else.22:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.16
  %call26 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call26, %struct._object** %result, align 8
  %cmp27 = icmp eq %struct._object* %call26, null
  br i1 %cmp27, label %if.then.28, label %if.end.51

if.then.28:                                       ; preds = %if.end.25
  br label %do.body.29

do.body.29:                                       ; preds = %if.then.28
  %20 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp30, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %22, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %25(%struct._object* %26)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %27 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %27, %struct._object** %_py_decref_tmp41, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %29, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %32(%struct._object* %33)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.25
  %34 = load %struct._object*, %struct._object** %result, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyDecObject*
  %dec52 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %35, i32 0, i32 2
  %36 = load %struct._object*, %struct._object** %a, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyDecObject*
  %dec53 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %b, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyDecObject*
  %dec54 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %39, i32 0, i32 2
  %40 = load %struct._object*, %struct._object** %context, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %41, i32 0, i32 1
  call void @mpd_qshift(%struct.mpd_t* %dec52, %struct.mpd_t* %dec53, %struct.mpd_t* %dec54, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.55

do.body.55:                                       ; preds = %if.end.51
  %42 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %44, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %47(%struct._object* %48)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %do.body.66

do.body.66:                                       ; preds = %do.end.65
  %49 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %56 = load %struct._object*, %struct._object** %context, align 8
  %57 = load i32, i32* %status, align 4
  %call77 = call i32 @dec_addstatus(%struct._object* %56, i32 %57)
  %tobool78 = icmp ne i32 %call77, 0
  br i1 %tobool78, label %if.then.79, label %if.end.91

if.then.79:                                       ; preds = %do.end.76
  br label %do.body.80

do.body.80:                                       ; preds = %if.then.79
  %58 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %58, %struct._object** %_py_decref_tmp81, align 8
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_refcnt82 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 0
  %60 = load i64, i64* %ob_refcnt82, align 8
  %dec83 = add i64 %60, -1
  store i64 %dec83, i64* %ob_refcnt82, align 8
  %cmp84 = icmp ne i64 %dec83, 0
  br i1 %cmp84, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.80
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.80
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 1
  %62 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %62, i32 0, i32 4
  %63 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp81, align 8
  call void %63(%struct._object* %64)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %do.end.76
  %65 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %65, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.91, %do.end.90, %do.end.50, %do.end, %if.then.15, %if.then.10, %if.then.4, %if.then
  %66 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %66
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_from_float(%struct._object* %dec, %struct._object* %pyfloat) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %pyfloat.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store %struct._object* %pyfloat, %struct._object** %pyfloat.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %dec.addr, align 8
  %2 = bitcast %struct._object* %1 to %struct._typeobject*
  %3 = load %struct._object*, %struct._object** %pyfloat.addr, align 8
  %4 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call %struct._object* @PyDecType_FromFloatExact(%struct._typeobject* %2, %struct._object* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %5
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_AsTuple(%struct._object* %dec, %struct._object* %dummy) #0 {
entry:
  %dec.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %sign = alloca %struct._object*, align 8
  %coeff = alloca %struct._object*, align 8
  %expt = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %x = alloca %struct.mpd_t*, align 8
  %intstring = alloca i8*, align 8
  %intlen = alloca i64, align 8
  %i = alloca i64, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp97 = alloca %struct._object*, align 8
  %_py_decref_tmp103 = alloca %struct._object*, align 8
  %_py_xdecref_tmp118 = alloca %struct._object*, align 8
  %_py_decref_tmp124 = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %sign, align 8
  store %struct._object* null, %struct._object** %coeff, align 8
  store %struct._object* null, %struct._object** %expt, align 8
  store %struct._object* null, %struct._object** %tmp, align 8
  store %struct.mpd_t* null, %struct.mpd_t** %x, align 8
  store i8* null, i8** %intstring, align 8
  %0 = load %struct._object*, %struct._object** %dec.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec5 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call %struct.mpd_t* @mpd_qncopy(%struct.mpd_t* %dec5)
  store %struct.mpd_t* %call, %struct.mpd_t** %x, align 8
  %2 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %cmp = icmp eq %struct.mpd_t* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call6 = call %struct._object* @PyErr_NoMemory()
  br label %out

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %dec.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %4, i32 0, i32 2
  %call8 = call zeroext i8 @mpd_sign(%struct.mpd_t* %dec7)
  %conv = zext i8 %call8 to i64
  %call9 = call %struct._object* @PyLong_FromUnsignedLong(i64 %conv)
  store %struct._object* %call9, %struct._object** %sign, align 8
  %5 = load %struct._object*, %struct._object** %sign, align 8
  %cmp10 = icmp eq %struct._object* %5, null
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end
  br label %out

if.end.13:                                        ; preds = %if.end
  %6 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %call14 = call i32 @mpd_isinfinite(%struct.mpd_t* %6)
  %tobool = icmp ne i32 %call14, 0
  br i1 %tobool, label %if.then.15, label %if.else

if.then.15:                                       ; preds = %if.end.13
  %call16 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i32 0, i32 0))
  store %struct._object* %call16, %struct._object** %expt, align 8
  %7 = load %struct._object*, %struct._object** %expt, align 8
  %cmp17 = icmp eq %struct._object* %7, null
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.15
  br label %out

if.end.20:                                        ; preds = %if.then.15
  %call21 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.125, i32 0, i32 0), i32 0)
  store %struct._object* %call21, %struct._object** %coeff, align 8
  %8 = load %struct._object*, %struct._object** %coeff, align 8
  %cmp22 = icmp eq %struct._object* %8, null
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.20
  br label %out

if.end.25:                                        ; preds = %if.end.20
  br label %if.end.73

if.else:                                          ; preds = %if.end.13
  %9 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %call26 = call i32 @mpd_isnan(%struct.mpd_t* %9)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.else.32

if.then.28:                                       ; preds = %if.else
  %10 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %call29 = call i32 @mpd_isqnan(%struct.mpd_t* %10)
  %tobool30 = icmp ne i32 %call29, 0
  %cond = select i1 %tobool30, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.127, i32 0, i32 0)
  %call31 = call %struct._object* @PyUnicode_FromString(i8* %cond)
  store %struct._object* %call31, %struct._object** %expt, align 8
  br label %if.end.35

if.else.32:                                       ; preds = %if.else
  %11 = load %struct._object*, %struct._object** %dec.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec33 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec33, i32 0, i32 1
  %13 = load i64, i64* %exp, align 8
  %call34 = call %struct._object* @PyLong_FromSsize_t(i64 %13)
  store %struct._object* %call34, %struct._object** %expt, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %if.then.28
  %14 = load %struct._object*, %struct._object** %expt, align 8
  %cmp36 = icmp eq %struct._object* %14, null
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %if.end.35
  br label %out

if.end.39:                                        ; preds = %if.end.35
  %15 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %15, i32 0, i32 3
  %16 = load i64, i64* %len, align 8
  %cmp40 = icmp sgt i64 %16, 0
  br i1 %cmp40, label %if.then.42, label %if.else.66

if.then.42:                                       ; preds = %if.end.39
  %17 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %exp43 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %17, i32 0, i32 1
  store i64 0, i64* %exp43, align 8
  %18 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  call void @mpd_clear_flags(%struct.mpd_t* %18)
  %19 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %call44 = call i8* @mpd_to_sci(%struct.mpd_t* %19, i32 1)
  store i8* %call44, i8** %intstring, align 8
  %20 = load i8*, i8** %intstring, align 8
  %cmp45 = icmp eq i8* %20, null
  br i1 %cmp45, label %if.then.47, label %if.end.49

if.then.47:                                       ; preds = %if.then.42
  %call48 = call %struct._object* @PyErr_NoMemory()
  br label %out

if.end.49:                                        ; preds = %if.then.42
  %21 = load i8*, i8** %intstring, align 8
  %call50 = call i64 @strlen(i8* %21) #8
  store i64 %call50, i64* %intlen, align 8
  %22 = load i64, i64* %intlen, align 8
  %call51 = call %struct._object* @PyTuple_New(i64 %22)
  store %struct._object* %call51, %struct._object** %coeff, align 8
  %23 = load %struct._object*, %struct._object** %coeff, align 8
  %cmp52 = icmp eq %struct._object* %23, null
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %if.end.49
  br label %out

if.end.55:                                        ; preds = %if.end.49
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.55
  %24 = load i64, i64* %i, align 8
  %25 = load i64, i64* %intlen, align 8
  %cmp56 = icmp slt i64 %24, %25
  br i1 %cmp56, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i64, i64* %i, align 8
  %27 = load i8*, i8** %intstring, align 8
  %arrayidx = getelementptr i8, i8* %27, i64 %26
  %28 = load i8, i8* %arrayidx, align 1
  %conv58 = sext i8 %28 to i32
  %sub = sub i32 %conv58, 48
  %conv59 = sext i32 %sub to i64
  %call60 = call %struct._object* @PyLong_FromLong(i64 %conv59)
  store %struct._object* %call60, %struct._object** %tmp, align 8
  %29 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp61 = icmp eq %struct._object* %29, null
  br i1 %cmp61, label %if.then.63, label %if.end.64

if.then.63:                                       ; preds = %for.body
  br label %out

if.end.64:                                        ; preds = %for.body
  %30 = load %struct._object*, %struct._object** %tmp, align 8
  %31 = load i64, i64* %i, align 8
  %32 = load %struct._object*, %struct._object** %coeff, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %33, i32 0, i32 1
  %arrayidx65 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %31
  store %struct._object* %30, %struct._object** %arrayidx65, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.64
  %34 = load i64, i64* %i, align 8
  %inc = add i64 %34, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.72

if.else.66:                                       ; preds = %if.end.39
  %call67 = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call67, %struct._object** %coeff, align 8
  %35 = load %struct._object*, %struct._object** %coeff, align 8
  %cmp68 = icmp eq %struct._object* %35, null
  br i1 %cmp68, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.else.66
  br label %out

if.end.71:                                        ; preds = %if.else.66
  br label %if.end.72

if.end.72:                                        ; preds = %if.end.71, %for.end
  br label %if.end.73

if.end.73:                                        ; preds = %if.end.72, %if.end.25
  %36 = load %struct._typeobject*, %struct._typeobject** @DecimalTuple, align 8
  %37 = bitcast %struct._typeobject* %36 to %struct._object*
  %38 = load %struct._object*, %struct._object** %sign, align 8
  %39 = load %struct._object*, %struct._object** %coeff, align 8
  %40 = load %struct._object*, %struct._object** %expt, align 8
  %call74 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %37, %struct._object* %38, %struct._object* %39, %struct._object* %40, i8* null)
  store %struct._object* %call74, %struct._object** %result, align 8
  br label %out

out:                                              ; preds = %if.end.73, %if.then.70, %if.then.63, %if.then.54, %if.then.47, %if.then.38, %if.then.24, %if.then.19, %if.then.12, %if.then
  %41 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  %tobool75 = icmp ne %struct.mpd_t* %41, null
  br i1 %tobool75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %out
  %42 = load %struct.mpd_t*, %struct.mpd_t** %x, align 8
  call void @mpd_del(%struct.mpd_t* %42)
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %out
  %43 = load i8*, i8** %intstring, align 8
  %tobool78 = icmp ne i8* %43, null
  br i1 %tobool78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.end.77
  %44 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %45 = load i8*, i8** %intstring, align 8
  call void %44(i8* %45)
  br label %if.end.80

if.end.80:                                        ; preds = %if.then.79, %if.end.77
  br label %do.body

do.body:                                          ; preds = %if.end.80
  %46 = load %struct._object*, %struct._object** %sign, align 8
  store %struct._object* %46, %struct._object** %_py_xdecref_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp82 = icmp ne %struct._object* %47, null
  br i1 %cmp82, label %if.then.84, label %if.end.93

if.then.84:                                       ; preds = %do.body
  br label %do.body.85

do.body.85:                                       ; preds = %if.then.84
  %48 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt, align 8
  %dec87 = add i64 %50, -1
  store i64 %dec87, i64* %ob_refcnt, align 8
  %cmp88 = icmp ne i64 %dec87, 0
  br i1 %cmp88, label %if.then.90, label %if.else.91

if.then.90:                                       ; preds = %do.body.85
  br label %if.end.92

if.else.91:                                       ; preds = %do.body.85
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %53(%struct._object* %54)
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.91, %if.then.90
  br label %do.end

do.end:                                           ; preds = %if.end.92
  br label %if.end.93

if.end.93:                                        ; preds = %do.end, %do.body
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %do.body.95

do.body.95:                                       ; preds = %do.end.94
  %55 = load %struct._object*, %struct._object** %coeff, align 8
  store %struct._object* %55, %struct._object** %_py_xdecref_tmp97, align 8
  %56 = load %struct._object*, %struct._object** %_py_xdecref_tmp97, align 8
  %cmp98 = icmp ne %struct._object* %56, null
  br i1 %cmp98, label %if.then.100, label %if.end.114

if.then.100:                                      ; preds = %do.body.95
  br label %do.body.101

do.body.101:                                      ; preds = %if.then.100
  %57 = load %struct._object*, %struct._object** %_py_xdecref_tmp97, align 8
  store %struct._object* %57, %struct._object** %_py_decref_tmp103, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  %ob_refcnt104 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 0
  %59 = load i64, i64* %ob_refcnt104, align 8
  %dec105 = add i64 %59, -1
  store i64 %dec105, i64* %ob_refcnt104, align 8
  %cmp106 = icmp ne i64 %dec105, 0
  br i1 %cmp106, label %if.then.108, label %if.else.109

if.then.108:                                      ; preds = %do.body.101
  br label %if.end.112

if.else.109:                                      ; preds = %do.body.101
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  %ob_type110 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 1
  %61 = load %struct._typeobject*, %struct._typeobject** %ob_type110, align 8
  %tp_dealloc111 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %61, i32 0, i32 4
  %62 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc111, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  call void %62(%struct._object* %63)
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.109, %if.then.108
  br label %do.end.113

do.end.113:                                       ; preds = %if.end.112
  br label %if.end.114

if.end.114:                                       ; preds = %do.end.113, %do.body.95
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  br label %do.body.116

do.body.116:                                      ; preds = %do.end.115
  %64 = load %struct._object*, %struct._object** %expt, align 8
  store %struct._object* %64, %struct._object** %_py_xdecref_tmp118, align 8
  %65 = load %struct._object*, %struct._object** %_py_xdecref_tmp118, align 8
  %cmp119 = icmp ne %struct._object* %65, null
  br i1 %cmp119, label %if.then.121, label %if.end.135

if.then.121:                                      ; preds = %do.body.116
  br label %do.body.122

do.body.122:                                      ; preds = %if.then.121
  %66 = load %struct._object*, %struct._object** %_py_xdecref_tmp118, align 8
  store %struct._object* %66, %struct._object** %_py_decref_tmp124, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8
  %ob_refcnt125 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt125, align 8
  %dec126 = add i64 %68, -1
  store i64 %dec126, i64* %ob_refcnt125, align 8
  %cmp127 = icmp ne i64 %dec126, 0
  br i1 %cmp127, label %if.then.129, label %if.else.130

if.then.129:                                      ; preds = %do.body.122
  br label %if.end.133

if.else.130:                                      ; preds = %do.body.122
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8
  %ob_type131 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type131, align 8
  %tp_dealloc132 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc132, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp124, align 8
  call void %71(%struct._object* %72)
  br label %if.end.133

if.end.133:                                       ; preds = %if.else.130, %if.then.129
  br label %do.end.134

do.end.134:                                       ; preds = %if.end.133
  br label %if.end.135

if.end.135:                                       ; preds = %do.end.134, %do.body.116
  br label %do.end.136

do.end.136:                                       ; preds = %if.end.135
  %73 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %73
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_copy(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  ret %struct._object* %2
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_format(%struct._object* %dec, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %override = alloca %struct._object*, align 8
  %dot = alloca %struct._object*, align 8
  %sep = alloca %struct._object*, align 8
  %grouping = alloca %struct._object*, align 8
  %fmtarg = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  %spec = alloca %struct.mpd_spec_t, align 8
  %fmt = alloca i8*, align 8
  %decstring = alloca i8*, align 8
  %status = alloca i32, align 4
  %replace_fillchar = alloca i32, align 4
  %size = alloca i64, align 8
  %n = alloca i64, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp162 = alloca %struct._object*, align 8
  %_py_decref_tmp167 = alloca %struct._object*, align 8
  %_py_xdecref_tmp181 = alloca %struct._object*, align 8
  %_py_decref_tmp186 = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %result, align 8
  store %struct._object* null, %struct._object** %override, align 8
  store %struct._object* null, %struct._object** %dot, align 8
  store %struct._object* null, %struct._object** %sep, align 8
  store %struct._object* null, %struct._object** %grouping, align 8
  store i8* null, i8** %decstring, align 8
  store i32 0, i32* %status, align 4
  store i32 0, i32* %replace_fillchar, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %call1 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.119, i32 0, i32 0), %struct._object** %fmtarg, %struct._object** %override)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %2 = load %struct._object*, %struct._object** %fmtarg, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 268435456
  %cmp4 = icmp ne i64 %and, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end.3
  %5 = load %struct._object*, %struct._object** %fmtarg, align 8
  %call6 = call i8* @PyUnicode_AsUTF8AndSize(%struct._object* %5, i64* %size)
  store i8* %call6, i8** %fmt, align 8
  %6 = load i8*, i8** %fmt, align 8
  %cmp7 = icmp eq i8* %6, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.then.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.then.5
  %7 = load i64, i64* %size, align 8
  %cmp10 = icmp sgt i64 %7, 0
  br i1 %cmp10, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end.9
  %8 = load i8*, i8** %fmt, align 8
  %arrayidx = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %9 to i32
  %cmp11 = icmp eq i32 %conv, 0
  br i1 %cmp11, label %if.then.13, label %if.end.20

if.then.13:                                       ; preds = %land.lhs.true
  store i32 1, i32* %replace_fillchar, align 4
  %10 = load i8*, i8** %fmt, align 8
  %11 = load i64, i64* %size, align 8
  %call14 = call i8* @dec_strdup(i8* %10, i64 %11)
  store i8* %call14, i8** %fmt, align 8
  %12 = load i8*, i8** %fmt, align 8
  %cmp15 = icmp eq i8* %12, null
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.then.13
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %if.then.13
  %13 = load i8*, i8** %fmt, align 8
  %arrayidx19 = getelementptr i8, i8* %13, i64 0
  store i8 95, i8* %arrayidx19, align 1
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.18, %land.lhs.true, %if.end.9
  br label %if.end.21

if.else:                                          ; preds = %if.end.3
  %14 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %14, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.128, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.21:                                        ; preds = %if.end.20
  %15 = load i8*, i8** %fmt, align 8
  %16 = load %struct._object*, %struct._object** %context, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %17, i32 0, i32 4
  %18 = load i32, i32* %capitals, align 4
  %call22 = call i32 @mpd_parse_fmt_str(%struct.mpd_spec_t* %spec, i8* %15, i32 %18)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %if.end.21
  %19 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %19, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.129, i32 0, i32 0))
  br label %finish

if.end.25:                                        ; preds = %if.end.21
  %20 = load i32, i32* %replace_fillchar, align 4
  %tobool26 = icmp ne i32 %20, 0
  br i1 %tobool26, label %if.then.27, label %if.end.31

if.then.27:                                       ; preds = %if.end.25
  %fill = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 5
  %arrayidx28 = getelementptr [5 x i8], [5 x i8]* %fill, i32 0, i64 0
  store i8 -1, i8* %arrayidx28, align 1
  %fill29 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 5
  %arrayidx30 = getelementptr [5 x i8], [5 x i8]* %fill29, i32 0, i64 1
  store i8 0, i8* %arrayidx30, align 1
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.27, %if.end.25
  %21 = load %struct._object*, %struct._object** %override, align 8
  %tobool32 = icmp ne %struct._object* %21, null
  br i1 %tobool32, label %if.then.33, label %if.else.80

if.then.33:                                       ; preds = %if.end.31
  %22 = load %struct._object*, %struct._object** %override, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_flags35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 19
  %24 = load i64, i64* %tp_flags35, align 8
  %and36 = and i64 %24, 536870912
  %cmp37 = icmp ne i64 %and36, 0
  br i1 %cmp37, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %if.then.33
  %25 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.130, i32 0, i32 0))
  br label %finish

if.end.40:                                        ; preds = %if.then.33
  %26 = load %struct._object*, %struct._object** %override, align 8
  %call41 = call %struct._object* @PyDict_GetItemString(%struct._object* %26, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.131, i32 0, i32 0))
  store %struct._object* %call41, %struct._object** %dot, align 8
  %tobool42 = icmp ne %struct._object* %call41, null
  br i1 %tobool42, label %if.then.43, label %if.end.50

if.then.43:                                       ; preds = %if.end.40
  %27 = load %struct._object*, %struct._object** %dot, align 8
  %call44 = call %struct._object* @PyUnicode_AsUTF8String(%struct._object* %27)
  store %struct._object* %call44, %struct._object** %dot, align 8
  %cmp45 = icmp eq %struct._object* %call44, null
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.then.43
  br label %finish

if.end.48:                                        ; preds = %if.then.43
  %28 = load %struct._object*, %struct._object** %dot, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %29, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %dot49 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 6
  store i8* %arraydecay, i8** %dot49, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.48, %if.end.40
  %30 = load %struct._object*, %struct._object** %override, align 8
  %call51 = call %struct._object* @PyDict_GetItemString(%struct._object* %30, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.132, i32 0, i32 0))
  store %struct._object* %call51, %struct._object** %sep, align 8
  %tobool52 = icmp ne %struct._object* %call51, null
  br i1 %tobool52, label %if.then.53, label %if.end.62

if.then.53:                                       ; preds = %if.end.50
  %31 = load %struct._object*, %struct._object** %sep, align 8
  %call54 = call %struct._object* @PyUnicode_AsUTF8String(%struct._object* %31)
  store %struct._object* %call54, %struct._object** %sep, align 8
  %cmp55 = icmp eq %struct._object* %call54, null
  br i1 %cmp55, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.then.53
  br label %finish

if.end.58:                                        ; preds = %if.then.53
  %32 = load %struct._object*, %struct._object** %sep, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyBytesObject*
  %ob_sval59 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %33, i32 0, i32 2
  %arraydecay60 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval59, i32 0, i32 0
  %sep61 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 7
  store i8* %arraydecay60, i8** %sep61, align 8
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.58, %if.end.50
  %34 = load %struct._object*, %struct._object** %override, align 8
  %call63 = call %struct._object* @PyDict_GetItemString(%struct._object* %34, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.133, i32 0, i32 0))
  store %struct._object* %call63, %struct._object** %grouping, align 8
  %tobool64 = icmp ne %struct._object* %call63, null
  br i1 %tobool64, label %if.then.65, label %if.end.74

if.then.65:                                       ; preds = %if.end.62
  %35 = load %struct._object*, %struct._object** %grouping, align 8
  %call66 = call %struct._object* @PyUnicode_AsUTF8String(%struct._object* %35)
  store %struct._object* %call66, %struct._object** %grouping, align 8
  %cmp67 = icmp eq %struct._object* %call66, null
  br i1 %cmp67, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %if.then.65
  br label %finish

if.end.70:                                        ; preds = %if.then.65
  %36 = load %struct._object*, %struct._object** %grouping, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyBytesObject*
  %ob_sval71 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %37, i32 0, i32 2
  %arraydecay72 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval71, i32 0, i32 0
  %grouping73 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 8
  store i8* %arraydecay72, i8** %grouping73, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.70, %if.end.62
  %call75 = call i32 @mpd_validate_lconv(%struct.mpd_spec_t* %spec)
  %cmp76 = icmp slt i32 %call75, 0
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.end.74
  %38 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %38, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.134, i32 0, i32 0))
  br label %finish

if.end.79:                                        ; preds = %if.end.74
  br label %if.end.130

if.else.80:                                       ; preds = %if.end.31
  %dot81 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 6
  %39 = load i8*, i8** %dot81, align 8
  %call82 = call i64 @strlen(i8* %39) #8
  store i64 %call82, i64* %n, align 8
  %40 = load i64, i64* %n, align 8
  %cmp83 = icmp ugt i64 %40, 1
  br i1 %cmp83, label %if.then.94, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else.80
  %41 = load i64, i64* %n, align 8
  %cmp85 = icmp eq i64 %41, 1
  br i1 %cmp85, label %land.lhs.true.87, label %if.end.104

land.lhs.true.87:                                 ; preds = %lor.lhs.false
  %dot88 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 6
  %42 = load i8*, i8** %dot88, align 8
  %arrayidx89 = getelementptr i8, i8* %42, i64 0
  %43 = load i8, i8* %arrayidx89, align 1
  %conv90 = zext i8 %43 to i32
  %and91 = and i32 %conv90, -128
  %cmp92 = icmp eq i32 %and91, 0
  br i1 %cmp92, label %if.end.104, label %if.then.94

if.then.94:                                       ; preds = %land.lhs.true.87, %if.else.80
  %dot95 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 6
  %44 = load i8*, i8** %dot95, align 8
  %call96 = call %struct._object* @dotsep_as_utf8(i8* %44)
  store %struct._object* %call96, %struct._object** %dot, align 8
  %45 = load %struct._object*, %struct._object** %dot, align 8
  %cmp97 = icmp eq %struct._object* %45, null
  br i1 %cmp97, label %if.then.99, label %if.end.100

if.then.99:                                       ; preds = %if.then.94
  br label %finish

if.end.100:                                       ; preds = %if.then.94
  %46 = load %struct._object*, %struct._object** %dot, align 8
  %47 = bitcast %struct._object* %46 to %struct.PyBytesObject*
  %ob_sval101 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %47, i32 0, i32 2
  %arraydecay102 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval101, i32 0, i32 0
  %dot103 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 6
  store i8* %arraydecay102, i8** %dot103, align 8
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.100, %land.lhs.true.87, %lor.lhs.false
  %sep105 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 7
  %48 = load i8*, i8** %sep105, align 8
  %call106 = call i64 @strlen(i8* %48) #8
  store i64 %call106, i64* %n, align 8
  %49 = load i64, i64* %n, align 8
  %cmp107 = icmp ugt i64 %49, 1
  br i1 %cmp107, label %if.then.119, label %lor.lhs.false.109

lor.lhs.false.109:                                ; preds = %if.end.104
  %50 = load i64, i64* %n, align 8
  %cmp110 = icmp eq i64 %50, 1
  br i1 %cmp110, label %land.lhs.true.112, label %if.end.129

land.lhs.true.112:                                ; preds = %lor.lhs.false.109
  %sep113 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 7
  %51 = load i8*, i8** %sep113, align 8
  %arrayidx114 = getelementptr i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx114, align 1
  %conv115 = zext i8 %52 to i32
  %and116 = and i32 %conv115, -128
  %cmp117 = icmp eq i32 %and116, 0
  br i1 %cmp117, label %if.end.129, label %if.then.119

if.then.119:                                      ; preds = %land.lhs.true.112, %if.end.104
  %sep120 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 7
  %53 = load i8*, i8** %sep120, align 8
  %call121 = call %struct._object* @dotsep_as_utf8(i8* %53)
  store %struct._object* %call121, %struct._object** %sep, align 8
  %54 = load %struct._object*, %struct._object** %sep, align 8
  %cmp122 = icmp eq %struct._object* %54, null
  br i1 %cmp122, label %if.then.124, label %if.end.125

if.then.124:                                      ; preds = %if.then.119
  br label %finish

if.end.125:                                       ; preds = %if.then.119
  %55 = load %struct._object*, %struct._object** %sep, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyBytesObject*
  %ob_sval126 = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %56, i32 0, i32 2
  %arraydecay127 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval126, i32 0, i32 0
  %sep128 = getelementptr inbounds %struct.mpd_spec_t, %struct.mpd_spec_t* %spec, i32 0, i32 7
  store i8* %arraydecay127, i8** %sep128, align 8
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.125, %land.lhs.true.112, %lor.lhs.false.109
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.end.79
  %57 = load %struct._object*, %struct._object** %dec.addr, align 8
  %58 = bitcast %struct._object* %57 to %struct.PyDecObject*
  %dec131 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %58, i32 0, i32 2
  %59 = load %struct._object*, %struct._object** %context, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %60, i32 0, i32 1
  %call132 = call i8* @mpd_qformat_spec(%struct.mpd_t* %dec131, %struct.mpd_spec_t* %spec, %struct.mpd_context_t* %ctx, i32* %status)
  store i8* %call132, i8** %decstring, align 8
  %61 = load i8*, i8** %decstring, align 8
  %cmp133 = icmp eq i8* %61, null
  br i1 %cmp133, label %if.then.135, label %if.end.142

if.then.135:                                      ; preds = %if.end.130
  %62 = load i32, i32* %status, align 4
  %and136 = and i32 %62, 512
  %tobool137 = icmp ne i32 %and136, 0
  br i1 %tobool137, label %if.then.138, label %if.else.140

if.then.138:                                      ; preds = %if.then.135
  %call139 = call %struct._object* @PyErr_NoMemory()
  br label %if.end.141

if.else.140:                                      ; preds = %if.then.135
  %63 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %63, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.135, i32 0, i32 0))
  br label %if.end.141

if.end.141:                                       ; preds = %if.else.140, %if.then.138
  br label %finish

if.end.142:                                       ; preds = %if.end.130
  %64 = load i8*, i8** %decstring, align 8
  %call143 = call i64 @strlen(i8* %64) #8
  store i64 %call143, i64* %size, align 8
  %65 = load i32, i32* %replace_fillchar, align 4
  %tobool144 = icmp ne i32 %65, 0
  br i1 %tobool144, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %if.end.142
  %66 = load i8*, i8** %decstring, align 8
  call void @dec_replace_fillchar(i8* %66)
  br label %if.end.146

if.end.146:                                       ; preds = %if.then.145, %if.end.142
  %67 = load i8*, i8** %decstring, align 8
  %68 = load i64, i64* %size, align 8
  %call147 = call %struct._object* @PyUnicode_DecodeUTF8(i8* %67, i64 %68, i8* null)
  store %struct._object* %call147, %struct._object** %result, align 8
  br label %finish

finish:                                           ; preds = %if.end.146, %if.end.141, %if.then.124, %if.then.99, %if.then.78, %if.then.69, %if.then.57, %if.then.47, %if.then.39, %if.then.24
  br label %do.body

do.body:                                          ; preds = %finish
  %69 = load %struct._object*, %struct._object** %grouping, align 8
  store %struct._object* %69, %struct._object** %_py_xdecref_tmp, align 8
  %70 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp148 = icmp ne %struct._object* %70, null
  br i1 %cmp148, label %if.then.150, label %if.end.159

if.then.150:                                      ; preds = %do.body
  br label %do.body.151

do.body.151:                                      ; preds = %if.then.150
  %71 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %71, %struct._object** %_py_decref_tmp, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0
  %73 = load i64, i64* %ob_refcnt, align 8
  %dec152 = add i64 %73, -1
  store i64 %dec152, i64* %ob_refcnt, align 8
  %cmp153 = icmp ne i64 %dec152, 0
  br i1 %cmp153, label %if.then.155, label %if.else.156

if.then.155:                                      ; preds = %do.body.151
  br label %if.end.158

if.else.156:                                      ; preds = %do.body.151
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type157 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type157, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %76(%struct._object* %77)
  br label %if.end.158

if.end.158:                                       ; preds = %if.else.156, %if.then.155
  br label %do.end

do.end:                                           ; preds = %if.end.158
  br label %if.end.159

if.end.159:                                       ; preds = %do.end, %do.body
  br label %do.end.160

do.end.160:                                       ; preds = %if.end.159
  br label %do.body.161

do.body.161:                                      ; preds = %do.end.160
  %78 = load %struct._object*, %struct._object** %sep, align 8
  store %struct._object* %78, %struct._object** %_py_xdecref_tmp162, align 8
  %79 = load %struct._object*, %struct._object** %_py_xdecref_tmp162, align 8
  %cmp163 = icmp ne %struct._object* %79, null
  br i1 %cmp163, label %if.then.165, label %if.end.178

if.then.165:                                      ; preds = %do.body.161
  br label %do.body.166

do.body.166:                                      ; preds = %if.then.165
  %80 = load %struct._object*, %struct._object** %_py_xdecref_tmp162, align 8
  store %struct._object* %80, %struct._object** %_py_decref_tmp167, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp167, align 8
  %ob_refcnt168 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 0
  %82 = load i64, i64* %ob_refcnt168, align 8
  %dec169 = add i64 %82, -1
  store i64 %dec169, i64* %ob_refcnt168, align 8
  %cmp170 = icmp ne i64 %dec169, 0
  br i1 %cmp170, label %if.then.172, label %if.else.173

if.then.172:                                      ; preds = %do.body.166
  br label %if.end.176

if.else.173:                                      ; preds = %do.body.166
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp167, align 8
  %ob_type174 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 1
  %84 = load %struct._typeobject*, %struct._typeobject** %ob_type174, align 8
  %tp_dealloc175 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %84, i32 0, i32 4
  %85 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc175, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp167, align 8
  call void %85(%struct._object* %86)
  br label %if.end.176

if.end.176:                                       ; preds = %if.else.173, %if.then.172
  br label %do.end.177

do.end.177:                                       ; preds = %if.end.176
  br label %if.end.178

if.end.178:                                       ; preds = %do.end.177, %do.body.161
  br label %do.end.179

do.end.179:                                       ; preds = %if.end.178
  br label %do.body.180

do.body.180:                                      ; preds = %do.end.179
  %87 = load %struct._object*, %struct._object** %dot, align 8
  store %struct._object* %87, %struct._object** %_py_xdecref_tmp181, align 8
  %88 = load %struct._object*, %struct._object** %_py_xdecref_tmp181, align 8
  %cmp182 = icmp ne %struct._object* %88, null
  br i1 %cmp182, label %if.then.184, label %if.end.197

if.then.184:                                      ; preds = %do.body.180
  br label %do.body.185

do.body.185:                                      ; preds = %if.then.184
  %89 = load %struct._object*, %struct._object** %_py_xdecref_tmp181, align 8
  store %struct._object* %89, %struct._object** %_py_decref_tmp186, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  %ob_refcnt187 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt187, align 8
  %dec188 = add i64 %91, -1
  store i64 %dec188, i64* %ob_refcnt187, align 8
  %cmp189 = icmp ne i64 %dec188, 0
  br i1 %cmp189, label %if.then.191, label %if.else.192

if.then.191:                                      ; preds = %do.body.185
  br label %if.end.195

if.else.192:                                      ; preds = %do.body.185
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  %ob_type193 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type193, align 8
  %tp_dealloc194 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc194, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp186, align 8
  call void %94(%struct._object* %95)
  br label %if.end.195

if.end.195:                                       ; preds = %if.else.192, %if.then.191
  br label %do.end.196

do.end.196:                                       ; preds = %if.end.195
  br label %if.end.197

if.end.197:                                       ; preds = %do.end.196, %do.body.180
  br label %do.end.198

do.end.198:                                       ; preds = %if.end.197
  %96 = load i32, i32* %replace_fillchar, align 4
  %tobool199 = icmp ne i32 %96, 0
  br i1 %tobool199, label %if.then.200, label %if.end.201

if.then.200:                                      ; preds = %do.end.198
  %97 = load i8*, i8** %fmt, align 8
  call void @PyMem_Free(i8* %97)
  br label %if.end.201

if.end.201:                                       ; preds = %if.then.200, %do.end.198
  %98 = load i8*, i8** %decstring, align 8
  %tobool202 = icmp ne i8* %98, null
  br i1 %tobool202, label %if.then.203, label %if.end.204

if.then.203:                                      ; preds = %if.end.201
  %99 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %100 = load i8*, i8** %decstring, align 8
  call void %99(i8* %100)
  br label %if.end.204

if.end.204:                                       ; preds = %if.then.203, %if.end.201
  %101 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %101, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.204, %if.else, %if.then.17, %if.then.8, %if.then.2, %if.then
  %102 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %102
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_reduce(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %str = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @dec_str(%struct._object* %0)
  store %struct._object* %call, %struct._object** %str, align 8
  %1 = load %struct._object*, %struct._object** %str, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %4 = load %struct._object*, %struct._object** %str, align 8
  %call1 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.137, i32 0, i32 0), %struct._typeobject* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %str, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type4 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type4, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %12 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %12, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_Round(%struct._object* %dec, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dec.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %context = alloca %struct._object*, align 8
  %dq = alloca [1 x i64], align 8
  %q = alloca %struct.mpd_t, align 8
  %y = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %dec, %struct._object** %dec.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %x, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %call1 = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), %struct._object** %x)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %2 = load %struct._object*, %struct._object** %x, align 8
  %tobool4 = icmp ne %struct._object* %2, null
  br i1 %tobool4, label %if.then.5, label %if.else.32

if.then.5:                                        ; preds = %if.end.3
  %3 = bitcast [1 x i64]* %dq to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %3, i8* bitcast ([1 x i64]* @PyDec_Round.dq to i8*), i64 8, i32 8, i1 false)
  %flags = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 0
  store i8 -112, i8* %flags, align 1
  %exp = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 1
  store i64 0, i64* %exp, align 8
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 2
  store i64 1, i64* %digits, align 8
  %len = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 3
  store i64 1, i64* %len, align 8
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 4
  store i64 1, i64* %alloc, align 8
  %data = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 5
  %arraydecay = getelementptr inbounds [1 x i64], [1 x i64]* %dq, i32 0, i32 0
  store i64* %arraydecay, i64** %data, align 8
  %4 = load %struct._object*, %struct._object** %x, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and = and i64 %6, 16777216
  %cmp6 = icmp ne i64 %and, 0
  br i1 %cmp6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.then.5
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.138, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.then.5
  %8 = load %struct._object*, %struct._object** %x, align 8
  %call9 = call i64 @PyLong_AsSsize_t(%struct._object* %8)
  store i64 %call9, i64* %y, align 8
  %9 = load i64, i64* %y, align 8
  %cmp10 = icmp eq i64 %9, -1
  br i1 %cmp10, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %if.end.8
  %call11 = call %struct._object* @PyErr_Occurred()
  %tobool12 = icmp ne %struct._object* %call11, null
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.14:                                        ; preds = %land.lhs.true, %if.end.8
  %call15 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call15, %struct._object** %result, align 8
  %10 = load %struct._object*, %struct._object** %result, align 8
  %cmp16 = icmp eq %struct._object* %10, null
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.18:                                        ; preds = %if.end.14
  %11 = load i64, i64* %y, align 8
  %cmp19 = icmp eq i64 %11, -9223372036854775808
  br i1 %cmp19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.18
  br label %cond.end

cond.false:                                       ; preds = %if.end.18
  %12 = load i64, i64* %y, align 8
  %sub = sub i64 0, %12
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 9223372036854775807, %cond.true ], [ %sub, %cond.false ]
  %exp20 = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %q, i32 0, i32 1
  store i64 %cond, i64* %exp20, align 8
  %13 = load %struct._object*, %struct._object** %result, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecObject*
  %dec21 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %14, i32 0, i32 2
  %15 = load %struct._object*, %struct._object** %dec.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyDecObject*
  %dec22 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %16, i32 0, i32 2
  %17 = load %struct._object*, %struct._object** %context, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %18, i32 0, i32 1
  call void @mpd_qquantize(%struct.mpd_t* %dec21, %struct.mpd_t* %dec22, %struct.mpd_t* %q, %struct.mpd_context_t* %ctx, i32* %status)
  %19 = load %struct._object*, %struct._object** %context, align 8
  %20 = load i32, i32* %status, align 4
  %call23 = call i32 @dec_addstatus(%struct._object* %19, i32 %20)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then.25, label %if.end.31

if.then.25:                                       ; preds = %cond.end
  br label %do.body

do.body:                                          ; preds = %if.then.25
  %21 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %dec26 = add i64 %23, -1
  store i64 %dec26, i64* %ob_refcnt, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %do.body
  br label %if.end.30

if.else:                                          ; preds = %do.body
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %26(%struct._object* %27)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.28
  br label %do.end

do.end:                                           ; preds = %if.end.30
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.31:                                        ; preds = %cond.end
  %28 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %28, %struct._object** %retval
  br label %return

if.else.32:                                       ; preds = %if.end.3
  %29 = load %struct._object*, %struct._object** %dec.addr, align 8
  %30 = load %struct._object*, %struct._object** %context, align 8
  %call33 = call %struct._object* @dec_as_long(%struct._object* %29, %struct._object* %30, i32 6)
  store %struct._object* %call33, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else.32, %if.end.31, %do.end, %if.then.17, %if.then.13, %if.then.7, %if.then.2, %if.then
  %31 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %31
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_ceil(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call %struct._object* @dec_as_long(%struct._object* %1, %struct._object* %2, i32 2)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_floor(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call %struct._object* @dec_as_long(%struct._object* %1, %struct._object* %2, i32 3)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_trunc(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %context, align 8
  %call1 = call %struct._object* @dec_as_long(%struct._object* %1, %struct._object* %2, i32 1)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_complex(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %f = alloca %struct._object*, align 8
  %x = alloca double, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %call = call %struct._object* @PyDec_AsFloat(%struct._object* %0)
  store %struct._object* %call, %struct._object** %f, align 8
  %1 = load %struct._object*, %struct._object** %f, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %f, align 8
  %call1 = call double @PyFloat_AsDouble(%struct._object* %2)
  store double %call1, double* %x, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %f, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %10 = load double, double* %x, align 8
  %cmp5 = fcmp oeq double %10, -1.000000e+00
  br i1 %cmp5, label %land.lhs.true, label %if.end.8

land.lhs.true:                                    ; preds = %do.end
  %call6 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call6, null
  br i1 %tobool, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %land.lhs.true, %do.end
  %11 = load double, double* %x, align 8
  %call9 = call %struct._object* @PyComplex_FromDoubles(double %11, double 0.000000e+00)
  store %struct._object* %call9, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.7, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_sizeof(%struct._object* %v, %struct._object* %dummy) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  %res = alloca i64, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  store i64 104, i64* %res, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %1, i32 0, i32 2
  %call = call i32 @mpd_isdynamic_data(%struct.mpd_t* %dec)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %alloc = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec1, i32 0, i32 4
  %4 = load i64, i64* %alloc, align 8
  %mul = mul i64 %4, 8
  %5 = load i64, i64* %res, align 8
  %add = add i64 %5, %mul
  store i64 %add, i64* %res, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i64, i64* %res, align 8
  %call2 = call %struct._object* @PyLong_FromSsize_t(i64 %6)
  ret %struct._object* %call2
}

declare i32 @PyArg_ParseTupleAndKeywords(%struct._object*, %struct._object*, i8*, i8**, ...) #1

declare hidden void @mpd_qexp(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qln(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qlog10(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qnext_minus(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qnext_plus(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qreduce(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

; Function Attrs: nounwind uwtable
define internal i32 @getround(%struct._object* %v) #0 {
entry:
  %retval = alloca i32, align 4
  %v.addr = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 268435456
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end.15

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %3 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %3, 8
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._object*, %struct._object** %v.addr, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom
  %6 = load %struct._object*, %struct._object** %arrayidx, align 8
  %cmp2 = icmp eq %struct._object* %4, %6
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  store i32 %7, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.4

for.cond.4:                                       ; preds = %for.inc.12, %for.end
  %9 = load i32, i32* %i, align 4
  %cmp5 = icmp slt i32 %9, 8
  br i1 %cmp5, label %for.body.6, label %for.end.14

for.body.6:                                       ; preds = %for.cond.4
  %10 = load %struct._object*, %struct._object** %v.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom7 = sext i32 %11 to i64
  %arrayidx8 = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom7
  %12 = load %struct._object*, %struct._object** %arrayidx8, align 8
  %call = call i32 @PyUnicode_Compare(%struct._object* %10, %struct._object* %12)
  %cmp9 = icmp eq i32 %call, 0
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %for.body.6
  %13 = load i32, i32* %i, align 4
  store i32 %13, i32* %retval
  br label %return

if.end.11:                                        ; preds = %for.body.6
  br label %for.inc.12

for.inc.12:                                       ; preds = %if.end.11
  %14 = load i32, i32* %i, align 4
  %inc13 = add i32 %14, 1
  store i32 %inc13, i32* %i, align 4
  br label %for.cond.4

for.end.14:                                       ; preds = %for.cond.4
  br label %if.end.15

if.end.15:                                        ; preds = %for.end.14, %entry
  %15 = load i8*, i8** @invalid_rounding_err, align 8
  %call16 = call i32 @type_error_int(i8* %15)
  store i32 %call16, i32* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then.10, %if.then.3
  %16 = load i32, i32* %retval
  ret i32 %16
}

declare hidden i32 @mpd_qsetround(%struct.mpd_context_t*, i32) #1

declare i32 @PyUnicode_Compare(%struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @type_error_int(i8* %mesg) #0 {
entry:
  %mesg.addr = alloca i8*, align 8
  store i8* %mesg, i8** %mesg.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %1 = load i8*, i8** %mesg.addr, align 8
  call void @PyErr_SetString(%struct._object* %0, i8* %1)
  ret i32 -1
}

declare hidden void @mpd_qround_to_intx(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qsqrt(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden i32 @mpd_qcompare(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden i32 @mpd_qcompare_signal(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qmax(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qmax_mag(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qmin(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qmin_mag(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qnext_toward(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qquantize(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qrem_near(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qfma(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden i32 @mpd_iscanonical(%struct.mpd_t*) #1

declare hidden i32 @mpd_isfinite(%struct.mpd_t*) #1

declare hidden i32 @mpd_isinfinite(%struct.mpd_t*) #1

declare hidden i32 @mpd_isqnan(%struct.mpd_t*) #1

declare hidden i32 @mpd_issigned(%struct.mpd_t*) #1

declare hidden i32 @mpd_isnormal(%struct.mpd_t*, %struct.mpd_context_t*) #1

declare hidden i32 @mpd_issubnormal(%struct.mpd_t*, %struct.mpd_context_t*) #1

declare hidden i64 @mpd_adjexp(%struct.mpd_t*) #1

declare hidden i32 @mpd_qcopy_abs(%struct.mpd_t*, %struct.mpd_t*, i32*) #1

declare hidden i32 @mpd_qcopy_negate(%struct.mpd_t*, %struct.mpd_t*, i32*) #1

declare hidden void @mpd_qlogb(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qinvert(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden i8* @mpd_class(%struct.mpd_t*, %struct.mpd_context_t*) #1

declare hidden i64 @mpd_to_eng_size(i8**, %struct.mpd_t*, i32) #1

declare hidden i32 @mpd_compare_total(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*) #1

declare hidden i32 @mpd_compare_total_mag(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*) #1

declare hidden i32 @mpd_qcopy_sign(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, i32*) #1

declare hidden i32 @mpd_same_quantum(%struct.mpd_t*, %struct.mpd_t*) #1

declare hidden void @mpd_qand(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qor(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qxor(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qrotate(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qscaleb(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare hidden void @mpd_qshift(%struct.mpd_t*, %struct.mpd_t*, %struct.mpd_t*, %struct.mpd_context_t*, i32*) #1

declare %struct._object* @PyLong_FromUnsignedLong(i64) #1

declare hidden zeroext i8 @mpd_sign(%struct.mpd_t*) #1

declare hidden void @mpd_clear_flags(%struct.mpd_t*) #1

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #5

declare %struct._object* @PyLong_FromLong(i64) #1

declare %struct._object* @PyObject_CallFunctionObjArgs(%struct._object*, ...) #1

declare i32 @PyArg_ParseTuple(%struct._object*, i8*, ...) #1

declare i8* @PyUnicode_AsUTF8AndSize(%struct._object*, i64*) #1

; Function Attrs: nounwind uwtable
define internal i8* @dec_strdup(i8* %src, i64 %size) #0 {
entry:
  %retval = alloca i8*, align 8
  %src.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %dest = alloca i8*, align 8
  store i8* %src, i8** %src.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  %0 = load i64, i64* %size.addr, align 8
  %add = add i64 %0, 1
  %call = call i8* @PyMem_Malloc(i64 %add)
  store i8* %call, i8** %dest, align 8
  %1 = load i8*, i8** %dest, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call1 = call %struct._object* @PyErr_NoMemory()
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %dest, align 8
  %3 = load i8*, i8** %src.addr, align 8
  %4 = load i64, i64* %size.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %2, i8* %3, i64 %4, i32 1, i1 false)
  %5 = load i64, i64* %size.addr, align 8
  %6 = load i8*, i8** %dest, align 8
  %arrayidx = getelementptr i8, i8* %6, i64 %5
  store i8 0, i8* %arrayidx, align 1
  %7 = load i8*, i8** %dest, align 8
  store i8* %7, i8** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load i8*, i8** %retval
  ret i8* %8
}

declare hidden i32 @mpd_parse_fmt_str(%struct.mpd_spec_t*, i8*, i32) #1

declare %struct._object* @PyDict_GetItemString(%struct._object*, i8*) #1

declare %struct._object* @PyUnicode_AsUTF8String(%struct._object*) #1

declare hidden i32 @mpd_validate_lconv(%struct.mpd_spec_t*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @dotsep_as_utf8(i8* %s) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %s.addr = alloca i8*, align 8
  %utf8 = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %buf = alloca [2 x i32], align 4
  %n = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i8* %s, i8** %s.addr, align 8
  %arraydecay = getelementptr inbounds [2 x i32], [2 x i32]* %buf, i32 0, i32 0
  %0 = load i8*, i8** %s.addr, align 8
  %call = call i64 @mbstowcs(i32* %arraydecay, i8* %0, i64 2) #3
  store i64 %call, i64* %n, align 8
  %1 = load i64, i64* %n, align 8
  %cmp = icmp ne i64 %1, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.136, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %arraydecay3 = getelementptr inbounds [2 x i32], [2 x i32]* %buf, i32 0, i32 0
  %3 = load i64, i64* %n, align 8
  %call4 = call %struct._object* @PyUnicode_FromWideChar(i32* %arraydecay3, i64 %3)
  store %struct._object* %call4, %struct._object** %tmp, align 8
  %4 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp5 = icmp eq %struct._object* %4, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %tmp, align 8
  %call8 = call %struct._object* @PyUnicode_AsUTF8String(%struct._object* %5)
  store %struct._object* %call8, %struct._object** %utf8, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.7
  %6 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  %13 = load %struct._object*, %struct._object** %utf8, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.6, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

declare hidden i8* @mpd_qformat_spec(%struct.mpd_t*, %struct.mpd_spec_t*, %struct.mpd_context_t*, i32*) #1

; Function Attrs: nounwind uwtable
define internal void @dec_replace_fillchar(i8* %dest) #0 {
entry:
  %dest.addr = alloca i8*, align 8
  store i8* %dest, i8** %dest.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %0 = load i8*, i8** %dest.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp ne i32 %conv, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %dest.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv2 = sext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, -1
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %4 = load i8*, i8** %dest.addr, align 8
  store i8 0, i8* %4, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %5 = load i8*, i8** %dest.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %dest.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

declare %struct._object* @PyUnicode_DecodeUTF8(i8*, i64, i8*) #1

; Function Attrs: nounwind
declare i64 @mbstowcs(i32*, i8*, i64) #6

declare %struct._object* @PyUnicode_FromWideChar(i32*, i64) #1

declare %struct._object* @PyComplex_FromDoubles(double, double) #1

declare hidden i32 @mpd_isdynamic_data(%struct.mpd_t*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_real(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  ret %struct._object* %2
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_imag(%struct._object* %self, i8* %closure) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %result, align 8
  call void @_dec_settriple(%struct._object* %1, i8 zeroext 0, i32 0, i64 0)
  %2 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromObjectExact(%struct._typeobject* %type, %struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call %struct._object* @PyDecType_FromSsizeExact(%struct._typeobject* %1, i64 0, %struct._object* %2)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %4, @PyDec_Type
  br i1 %cmp1, label %if.then.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %5 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %call3 = call i32 @PyType_IsSubtype(%struct._typeobject* %6, %struct._typeobject* @PyDec_Type)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then.4, label %if.else.6

if.then.4:                                        ; preds = %lor.lhs.false, %if.else
  %7 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %8 = load %struct._object*, %struct._object** %v.addr, align 8
  %9 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call %struct._object* @PyDecType_FromDecimalExact(%struct._typeobject* %7, %struct._object* %8, %struct._object* %9)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

if.else.6:                                        ; preds = %lor.lhs.false
  %10 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 19
  %12 = load i64, i64* %tp_flags, align 8
  %and = and i64 %12, 268435456
  %cmp8 = icmp ne i64 %and, 0
  br i1 %cmp8, label %if.then.9, label %if.else.11

if.then.9:                                        ; preds = %if.else.6
  %13 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %14 = load %struct._object*, %struct._object** %v.addr, align 8
  %15 = load %struct._object*, %struct._object** %context.addr, align 8
  %call10 = call %struct._object* @PyDecType_FromUnicodeExactWS(%struct._typeobject* %13, %struct._object* %14, %struct._object* %15)
  store %struct._object* %call10, %struct._object** %retval
  br label %return

if.else.11:                                       ; preds = %if.else.6
  %16 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_flags13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 19
  %18 = load i64, i64* %tp_flags13, align 8
  %and14 = and i64 %18, 16777216
  %cmp15 = icmp ne i64 %and14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.18

if.then.16:                                       ; preds = %if.else.11
  %19 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %20 = load %struct._object*, %struct._object** %v.addr, align 8
  %21 = load %struct._object*, %struct._object** %context.addr, align 8
  %call17 = call %struct._object* @PyDecType_FromLongExact(%struct._typeobject* %19, %struct._object* %20, %struct._object* %21)
  store %struct._object* %call17, %struct._object** %retval
  br label %return

if.else.18:                                       ; preds = %if.else.11
  %22 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_flags20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 19
  %24 = load i64, i64* %tp_flags20, align 8
  %and21 = and i64 %24, 67108864
  %cmp22 = icmp ne i64 %and21, 0
  br i1 %cmp22, label %if.then.28, label %lor.lhs.false.23

lor.lhs.false.23:                                 ; preds = %if.else.18
  %25 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_flags25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 19
  %27 = load i64, i64* %tp_flags25, align 8
  %and26 = and i64 %27, 33554432
  %cmp27 = icmp ne i64 %and26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.30

if.then.28:                                       ; preds = %lor.lhs.false.23, %if.else.18
  %28 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %29 = load %struct._object*, %struct._object** %v.addr, align 8
  %30 = load %struct._object*, %struct._object** %context.addr, align 8
  %call29 = call %struct._object* @PyDecType_FromSequenceExact(%struct._typeobject* %28, %struct._object* %29, %struct._object* %30)
  store %struct._object* %call29, %struct._object** %retval
  br label %return

if.else.30:                                       ; preds = %lor.lhs.false.23
  %31 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %cmp32 = icmp eq %struct._typeobject* %32, @PyFloat_Type
  br i1 %cmp32, label %if.then.37, label %lor.lhs.false.33

lor.lhs.false.33:                                 ; preds = %if.else.30
  %33 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %call35 = call i32 @PyType_IsSubtype(%struct._typeobject* %34, %struct._typeobject* @PyFloat_Type)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.else.42

if.then.37:                                       ; preds = %lor.lhs.false.33, %if.else.30
  %35 = load %struct._object*, %struct._object** %context.addr, align 8
  %call38 = call i32 @dec_addstatus(%struct._object* %35, i32 1024)
  %tobool39 = icmp ne i32 %call38, 0
  br i1 %tobool39, label %if.then.40, label %if.end

if.then.40:                                       ; preds = %if.then.37
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.37
  %36 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %37 = load %struct._object*, %struct._object** %v.addr, align 8
  %38 = load %struct._object*, %struct._object** %context.addr, align 8
  %call41 = call %struct._object* @PyDecType_FromFloatExact(%struct._typeobject* %36, %struct._object* %37, %struct._object* %38)
  store %struct._object* %call41, %struct._object** %retval
  br label %return

if.else.42:                                       ; preds = %lor.lhs.false.33
  %39 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %40 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 1
  %42 = load i8*, i8** %tp_name, align 8
  %call44 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %39, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.31, i32 0, i32 0), i8* %42)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else.42, %if.end, %if.then.40, %if.then.28, %if.then.16, %if.then.9, %if.then.4, %if.then
  %43 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %43
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromSsizeExact(%struct._typeobject* %type, i64 %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca i64, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %maxctx = alloca %struct.mpd_context_t, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* %0)
  store %struct._object* %call, %struct._object** %dec, align 8
  %1 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %2 = load %struct._object*, %struct._object** %dec, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load i64, i64* %v.addr, align 8
  call void @mpd_qset_ssize(%struct.mpd_t* %dec1, i64 %4, %struct.mpd_context_t* %maxctx, i32* %status)
  %5 = load %struct._object*, %struct._object** %context.addr, align 8
  %6 = load i32, i32* %status, align 4
  %call2 = call i32 @dec_addstatus(%struct._object* %5, i32 %6)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %7 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec4 = add i64 %9, -1
  store i64 %dec4, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec4, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %14 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %14, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %do.end, %if.then
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromDecimalExact(%struct._typeobject* %type, %struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %cmp = icmp eq %struct._typeobject* %0, @PyDec_Type
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %2, @PyDec_Type
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct._object*, %struct._object** %v.addr, align 8
  store %struct._object* %5, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* %6)
  store %struct._object* %call, %struct._object** %dec, align 8
  %7 = load %struct._object*, %struct._object** %dec, align 8
  %cmp2 = icmp eq %struct._object* %7, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %dec, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDecObject*
  %dec5 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %9, i32 0, i32 2
  %10 = load %struct._object*, %struct._object** %v.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDecObject*
  %dec6 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %call7 = call i32 @mpd_qcopy(%struct.mpd_t* %dec5, %struct.mpd_t* %dec6, i32* %status)
  %12 = load %struct._object*, %struct._object** %context.addr, align 8
  %13 = load i32, i32* %status, align 4
  %call8 = call i32 @dec_addstatus(%struct._object* %12, i32 %13)
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then.9, label %if.end.16

if.then.9:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.9
  %14 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt10 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt10, align 8
  %dec11 = add i64 %16, -1
  store i64 %dec11, i64* %ob_refcnt10, align 8
  %cmp12 = icmp ne i64 %dec11, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.4
  %21 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %21, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.16, %do.end, %if.then.3, %if.then
  %22 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %22
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromUnicodeExactWS(%struct._typeobject* %type, %struct._object* %u, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %u.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %s = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %u, %struct._object** %u.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %u.addr, align 8
  %call = call i8* @numeric_as_ascii(%struct._object* %0, i32 1)
  store i8* %call, i8** %s, align 8
  %1 = load i8*, i8** %s, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = load i8*, i8** %s, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call %struct._object* @PyDecType_FromCStringExact(%struct._typeobject* %2, i8* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %dec, align 8
  %5 = load i8*, i8** %s, align 8
  call void @PyMem_Free(i8* %5)
  %6 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromSequenceExact(%struct._typeobject* %type, %struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dectuple = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %call = call %struct._object* @sequence_as_tuple(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.142, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %dectuple, align 8
  %2 = load %struct._object*, %struct._object** %dectuple, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %dectuple, align 8
  %call1 = call i8* @dectuple_as_str(%struct._object* %3)
  store i8* %call1, i8** %s, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %dectuple, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec2 = add i64 %6, -1
  store i64 %dec2, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec2, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %11 = load i8*, i8** %s, align 8
  %cmp6 = icmp eq i8* %11, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %do.end
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %13 = load i8*, i8** %s, align 8
  %14 = load %struct._object*, %struct._object** %context.addr, align 8
  %call9 = call %struct._object* @PyDecType_FromCStringExact(%struct._typeobject* %12, i8* %13, %struct._object* %14)
  store %struct._object* %call9, %struct._object** %dec, align 8
  %15 = load i8*, i8** %s, align 8
  call void @PyMem_Free(i8* %15)
  %16 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.7, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal i8* @numeric_as_ascii(%struct._object* %u, i32 %strip_ws) #0 {
entry:
  %retval = alloca i8*, align 8
  %u.addr = alloca %struct._object*, align 8
  %strip_ws.addr = alloca i32, align 4
  %kind = alloca i32, align 4
  %data = alloca i8*, align 8
  %ch = alloca i32, align 4
  %res = alloca i8*, align 8
  %cp = alloca i8*, align 8
  %j = alloca i64, align 8
  %len = alloca i64, align 8
  %d = alloca i32, align 4
  store %struct._object* %u, %struct._object** %u.addr, align 8
  store i32 %strip_ws, i32* %strip_ws.addr, align 4
  %0 = load %struct._object*, %struct._object** %u.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %1, i32 0, i32 3
  %2 = bitcast %struct.anon* %state to i32*
  %bf.load = load i32, i32* %2, align 4
  %bf.lshr = lshr i32 %bf.load, 7
  %bf.clear = and i32 %bf.lshr, 1
  %tobool = icmp ne i32 %bf.clear, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  br label %cond.end

cond.false:                                       ; preds = %entry
  %3 = load %struct._object*, %struct._object** %u.addr, align 8
  %call = call i32 @_PyUnicode_Ready(%struct._object* %3)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call, %cond.false ]
  %cmp = icmp eq i32 %cond, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %u.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyASCIIObject*
  %state1 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %5, i32 0, i32 3
  %6 = bitcast %struct.anon* %state1 to i32*
  %bf.load2 = load i32, i32* %6, align 4
  %bf.lshr3 = lshr i32 %bf.load2, 2
  %bf.clear4 = and i32 %bf.lshr3, 7
  store i32 %bf.clear4, i32* %kind, align 4
  %7 = load %struct._object*, %struct._object** %u.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyASCIIObject*
  %state5 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %8, i32 0, i32 3
  %9 = bitcast %struct.anon* %state5 to i32*
  %bf.load6 = load i32, i32* %9, align 4
  %bf.lshr7 = lshr i32 %bf.load6, 5
  %bf.clear8 = and i32 %bf.lshr7, 1
  %tobool9 = icmp ne i32 %bf.clear8, 0
  br i1 %tobool9, label %cond.true.10, label %cond.false.21

cond.true.10:                                     ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %u.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyASCIIObject*
  %state11 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %11, i32 0, i32 3
  %12 = bitcast %struct.anon* %state11 to i32*
  %bf.load12 = load i32, i32* %12, align 4
  %bf.lshr13 = lshr i32 %bf.load12, 6
  %bf.clear14 = and i32 %bf.lshr13, 1
  %tobool15 = icmp ne i32 %bf.clear14, 0
  br i1 %tobool15, label %cond.true.16, label %cond.false.17

cond.true.16:                                     ; preds = %cond.true.10
  %13 = load %struct._object*, %struct._object** %u.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyASCIIObject*
  %add.ptr = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %14, i64 1
  %15 = bitcast %struct.PyASCIIObject* %add.ptr to i8*
  br label %cond.end.19

cond.false.17:                                    ; preds = %cond.true.10
  %16 = load %struct._object*, %struct._object** %u.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyCompactUnicodeObject*
  %add.ptr18 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %17, i64 1
  %18 = bitcast %struct.PyCompactUnicodeObject* %add.ptr18 to i8*
  br label %cond.end.19

cond.end.19:                                      ; preds = %cond.false.17, %cond.true.16
  %cond20 = phi i8* [ %15, %cond.true.16 ], [ %18, %cond.false.17 ]
  br label %cond.end.23

cond.false.21:                                    ; preds = %if.end
  %19 = load %struct._object*, %struct._object** %u.addr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyUnicodeObject*
  %data22 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %20, i32 0, i32 1
  %any = bitcast %union.anon* %data22 to i8**
  %21 = load i8*, i8** %any, align 8
  br label %cond.end.23

cond.end.23:                                      ; preds = %cond.false.21, %cond.end.19
  %cond24 = phi i8* [ %cond20, %cond.end.19 ], [ %21, %cond.false.21 ]
  store i8* %cond24, i8** %data, align 8
  %22 = load %struct._object*, %struct._object** %u.addr, align 8
  %23 = bitcast %struct._object* %22 to %struct.PyASCIIObject*
  %length = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %23, i32 0, i32 1
  %24 = load i64, i64* %length, align 8
  store i64 %24, i64* %len, align 8
  %25 = load i64, i64* %len, align 8
  %add = add i64 %25, 1
  %call25 = call i8* @PyMem_Malloc(i64 %add)
  store i8* %call25, i8** %res, align 8
  store i8* %call25, i8** %cp, align 8
  %26 = load i8*, i8** %res, align 8
  %cmp26 = icmp eq i8* %26, null
  br i1 %cmp26, label %if.then.27, label %if.end.29

if.then.27:                                       ; preds = %cond.end.23
  %call28 = call %struct._object* @PyErr_NoMemory()
  store i8* null, i8** %retval
  br label %return

if.end.29:                                        ; preds = %cond.end.23
  store i64 0, i64* %j, align 8
  %27 = load i32, i32* %strip_ws.addr, align 4
  %tobool30 = icmp ne i32 %27, 0
  br i1 %tobool30, label %if.then.31, label %if.end.43

if.then.31:                                       ; preds = %if.end.29
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then.31
  %28 = load i64, i64* %len, align 8
  %cmp32 = icmp sgt i64 %28, 0
  br i1 %cmp32, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %29 = load i32, i32* %kind, align 4
  %30 = load i8*, i8** %data, align 8
  %31 = load i64, i64* %len, align 8
  %sub = sub i64 %31, 1
  %call33 = call i32 @is_space(i32 %29, i8* %30, i64 %sub)
  %tobool34 = icmp ne i32 %call33, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %32 = phi i1 [ false, %while.cond ], [ %tobool34, %land.rhs ]
  br i1 %32, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %33 = load i64, i64* %len, align 8
  %dec = add i64 %33, -1
  store i64 %dec, i64* %len, align 8
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %while.cond.35

while.cond.35:                                    ; preds = %while.body.41, %while.end
  %34 = load i64, i64* %j, align 8
  %35 = load i64, i64* %len, align 8
  %cmp36 = icmp slt i64 %34, %35
  br i1 %cmp36, label %land.rhs.37, label %land.end.40

land.rhs.37:                                      ; preds = %while.cond.35
  %36 = load i32, i32* %kind, align 4
  %37 = load i8*, i8** %data, align 8
  %38 = load i64, i64* %j, align 8
  %call38 = call i32 @is_space(i32 %36, i8* %37, i64 %38)
  %tobool39 = icmp ne i32 %call38, 0
  br label %land.end.40

land.end.40:                                      ; preds = %land.rhs.37, %while.cond.35
  %39 = phi i1 [ false, %while.cond.35 ], [ %tobool39, %land.rhs.37 ]
  br i1 %39, label %while.body.41, label %while.end.42

while.body.41:                                    ; preds = %land.end.40
  %40 = load i64, i64* %j, align 8
  %inc = add i64 %40, 1
  store i64 %inc, i64* %j, align 8
  br label %while.cond.35

while.end.42:                                     ; preds = %land.end.40
  br label %if.end.43

if.end.43:                                        ; preds = %while.end.42, %if.end.29
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.43
  %41 = load i64, i64* %j, align 8
  %42 = load i64, i64* %len, align 8
  %cmp44 = icmp slt i64 %41, %42
  br i1 %cmp44, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %43 = load i32, i32* %kind, align 4
  %cmp45 = icmp eq i32 %43, 1
  br i1 %cmp45, label %cond.true.46, label %cond.false.47

cond.true.46:                                     ; preds = %for.body
  %44 = load i64, i64* %j, align 8
  %45 = load i8*, i8** %data, align 8
  %arrayidx = getelementptr i8, i8* %45, i64 %44
  %46 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %46 to i32
  br label %cond.end.57

cond.false.47:                                    ; preds = %for.body
  %47 = load i32, i32* %kind, align 4
  %cmp48 = icmp eq i32 %47, 2
  br i1 %cmp48, label %cond.true.50, label %cond.false.53

cond.true.50:                                     ; preds = %cond.false.47
  %48 = load i64, i64* %j, align 8
  %49 = load i8*, i8** %data, align 8
  %50 = bitcast i8* %49 to i16*
  %arrayidx51 = getelementptr i16, i16* %50, i64 %48
  %51 = load i16, i16* %arrayidx51, align 2
  %conv52 = zext i16 %51 to i32
  br label %cond.end.55

cond.false.53:                                    ; preds = %cond.false.47
  %52 = load i64, i64* %j, align 8
  %53 = load i8*, i8** %data, align 8
  %54 = bitcast i8* %53 to i32*
  %arrayidx54 = getelementptr i32, i32* %54, i64 %52
  %55 = load i32, i32* %arrayidx54, align 4
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.53, %cond.true.50
  %cond56 = phi i32 [ %conv52, %cond.true.50 ], [ %55, %cond.false.53 ]
  br label %cond.end.57

cond.end.57:                                      ; preds = %cond.end.55, %cond.true.46
  %cond58 = phi i32 [ %conv, %cond.true.46 ], [ %cond56, %cond.end.55 ]
  store i32 %cond58, i32* %ch, align 4
  %56 = load i32, i32* %ch, align 4
  %cmp59 = icmp ult i32 0, %56
  br i1 %cmp59, label %land.lhs.true, label %if.end.65

land.lhs.true:                                    ; preds = %cond.end.57
  %57 = load i32, i32* %ch, align 4
  %cmp61 = icmp ule i32 %57, 127
  br i1 %cmp61, label %if.then.63, label %if.end.65

if.then.63:                                       ; preds = %land.lhs.true
  %58 = load i32, i32* %ch, align 4
  %conv64 = trunc i32 %58 to i8
  %59 = load i8*, i8** %cp, align 8
  %incdec.ptr = getelementptr i8, i8* %59, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  store i8 %conv64, i8* %59, align 1
  br label %for.inc

if.end.65:                                        ; preds = %land.lhs.true, %cond.end.57
  %60 = load i32, i32* %ch, align 4
  %cmp66 = icmp ult i32 %60, 128
  br i1 %cmp66, label %cond.true.68, label %cond.false.72

cond.true.68:                                     ; preds = %if.end.65
  %61 = load i32, i32* %ch, align 4
  %idxprom = zext i32 %61 to i64
  %arrayidx69 = getelementptr [0 x i8], [0 x i8]* @_Py_ascii_whitespace, i32 0, i64 %idxprom
  %62 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %62 to i32
  %tobool71 = icmp ne i32 %conv70, 0
  br i1 %tobool71, label %if.then.75, label %if.end.77

cond.false.72:                                    ; preds = %if.end.65
  %63 = load i32, i32* %ch, align 4
  %call73 = call i32 @_PyUnicode_IsWhitespace(i32 %63)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.then.75, label %if.end.77

if.then.75:                                       ; preds = %cond.false.72, %cond.true.68
  %64 = load i8*, i8** %cp, align 8
  %incdec.ptr76 = getelementptr i8, i8* %64, i32 1
  store i8* %incdec.ptr76, i8** %cp, align 8
  store i8 32, i8* %64, align 1
  br label %for.inc

if.end.77:                                        ; preds = %cond.false.72, %cond.true.68
  %65 = load i32, i32* %ch, align 4
  %call78 = call i32 @_PyUnicode_ToDecimalDigit(i32 %65)
  store i32 %call78, i32* %d, align 4
  %66 = load i32, i32* %d, align 4
  %cmp79 = icmp slt i32 %66, 0
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %if.end.77
  %67 = load i8*, i8** %res, align 8
  store i8 0, i8* %67, align 1
  %68 = load i8*, i8** %res, align 8
  store i8* %68, i8** %retval
  br label %return

if.end.82:                                        ; preds = %if.end.77
  %69 = load i32, i32* %d, align 4
  %add83 = add i32 48, %69
  %conv84 = trunc i32 %add83 to i8
  %70 = load i8*, i8** %cp, align 8
  %incdec.ptr85 = getelementptr i8, i8* %70, i32 1
  store i8* %incdec.ptr85, i8** %cp, align 8
  store i8 %conv84, i8* %70, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end.82, %if.then.75, %if.then.63
  %71 = load i64, i64* %j, align 8
  %inc86 = add i64 %71, 1
  store i64 %inc86, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %72 = load i8*, i8** %cp, align 8
  store i8 0, i8* %72, align 1
  %73 = load i8*, i8** %res, align 8
  store i8* %73, i8** %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.81, %if.then.27, %if.then
  %74 = load i8*, i8** %retval
  ret i8* %74
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromCStringExact(%struct._typeobject* %type, i8* %s, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %s.addr = alloca i8*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %maxctx = alloca %struct.mpd_context_t, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* %0)
  store %struct._object* %call, %struct._object** %dec, align 8
  %1 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  call void @mpd_maxcontext(%struct.mpd_context_t* %maxctx)
  %2 = load %struct._object*, %struct._object** %dec, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load i8*, i8** %s.addr, align 8
  call void @mpd_qset_string(%struct.mpd_t* %dec1, i8* %4, %struct.mpd_context_t* %maxctx, i32* %status)
  %5 = load i32, i32* %status, align 4
  %and = and i32 %5, 4161
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %dec, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDecObject*
  %dec3 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %7, i32 0, i32 2
  call void @mpd_seterror(%struct.mpd_t* %dec3, i32 256, i32* %status)
  br label %if.end.4

if.end.4:                                         ; preds = %if.then.2, %if.end
  %8 = load i32, i32* %status, align 4
  %and5 = and i32 %8, 958
  store i32 %and5, i32* %status, align 4
  %9 = load %struct._object*, %struct._object** %context.addr, align 8
  %10 = load i32, i32* %status, align 4
  %call6 = call i32 @dec_addstatus(%struct._object* %9, i32 %10)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %11 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec9 = add i64 %13, -1
  store i64 %dec9, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec9, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.end.4
  %18 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %18, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.13, %do.end, %if.then
  %19 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %19
}

declare i32 @_PyUnicode_Ready(%struct._object*) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @is_space(i32 %kind, i8* %data, i64 %pos) #2 {
entry:
  %kind.addr = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %pos.addr = alloca i64, align 8
  %ch = alloca i32, align 4
  store i32 %kind, i32* %kind.addr, align 4
  store i8* %data, i8** %data.addr, align 8
  store i64 %pos, i64* %pos.addr, align 8
  %0 = load i32, i32* %kind.addr, align 4
  %cmp = icmp eq i32 %0, 1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = load i64, i64* %pos.addr, align 8
  %2 = load i8*, i8** %data.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 %1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %3 to i32
  br label %cond.end.8

cond.false:                                       ; preds = %entry
  %4 = load i32, i32* %kind.addr, align 4
  %cmp1 = icmp eq i32 %4, 2
  br i1 %cmp1, label %cond.true.3, label %cond.false.6

cond.true.3:                                      ; preds = %cond.false
  %5 = load i64, i64* %pos.addr, align 8
  %6 = load i8*, i8** %data.addr, align 8
  %7 = bitcast i8* %6 to i16*
  %arrayidx4 = getelementptr i16, i16* %7, i64 %5
  %8 = load i16, i16* %arrayidx4, align 2
  %conv5 = zext i16 %8 to i32
  br label %cond.end

cond.false.6:                                     ; preds = %cond.false
  %9 = load i64, i64* %pos.addr, align 8
  %10 = load i8*, i8** %data.addr, align 8
  %11 = bitcast i8* %10 to i32*
  %arrayidx7 = getelementptr i32, i32* %11, i64 %9
  %12 = load i32, i32* %arrayidx7, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false.6, %cond.true.3
  %cond = phi i32 [ %conv5, %cond.true.3 ], [ %12, %cond.false.6 ]
  br label %cond.end.8

cond.end.8:                                       ; preds = %cond.end, %cond.true
  %cond9 = phi i32 [ %conv, %cond.true ], [ %cond, %cond.end ]
  store i32 %cond9, i32* %ch, align 4
  %13 = load i32, i32* %ch, align 4
  %cmp10 = icmp ult i32 %13, 128
  br i1 %cmp10, label %cond.true.12, label %cond.false.15

cond.true.12:                                     ; preds = %cond.end.8
  %14 = load i32, i32* %ch, align 4
  %idxprom = zext i32 %14 to i64
  %arrayidx13 = getelementptr [0 x i8], [0 x i8]* @_Py_ascii_whitespace, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %15 to i32
  br label %cond.end.16

cond.false.15:                                    ; preds = %cond.end.8
  %16 = load i32, i32* %ch, align 4
  %call = call i32 @_PyUnicode_IsWhitespace(i32 %16)
  br label %cond.end.16

cond.end.16:                                      ; preds = %cond.false.15, %cond.true.12
  %cond17 = phi i32 [ %conv14, %cond.true.12 ], [ %call, %cond.false.15 ]
  ret i32 %cond17
}

declare i32 @_PyUnicode_IsWhitespace(i32) #1

declare i32 @_PyUnicode_ToDecimalDigit(i32) #1

declare hidden void @mpd_qset_string(%struct.mpd_t*, i8*, %struct.mpd_context_t*, i32*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @sequence_as_tuple(%struct._object* %v, %struct._object* %ex, i8* %mesg) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ex.addr = alloca %struct._object*, align 8
  %mesg.addr = alloca i8*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %ex, %struct._object** %ex.addr, align 8
  store i8* %mesg, i8** %mesg.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 67108864
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct._object*, %struct._object** %v.addr, align 8
  store %struct._object* %5, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_flags2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 19
  %8 = load i64, i64* %tp_flags2, align 8
  %and3 = and i64 %8, 33554432
  %cmp4 = icmp ne i64 %and3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %v.addr, align 8
  %call = call %struct._object* @PyList_AsTuple(%struct._object* %9)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %ex.addr, align 8
  %11 = load i8*, i8** %mesg.addr, align 8
  call void @PyErr_SetString(%struct._object* %10, i8* %11)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.5, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal i8* @dectuple_as_str(%struct._object* %dectuple) #0 {
entry:
  %retval = alloca i8*, align 8
  %dectuple.addr = alloca %struct._object*, align 8
  %digits = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %decstring = alloca i8*, align 8
  %sign_special = alloca [6 x i8], align 1
  %cp = alloca i8*, align 8
  %sign = alloca i64, align 8
  %l = alloca i64, align 8
  %exp = alloca i64, align 8
  %i = alloca i64, align 8
  %mem = alloca i64, align 8
  %tsize = alloca i64, align 8
  %is_infinite = alloca i32, align 4
  %n = alloca i32, align 4
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp175 = alloca %struct._object*, align 8
  %_py_decref_tmp181 = alloca %struct._object*, align 8
  store %struct._object* %dectuple, %struct._object** %dectuple.addr, align 8
  store %struct._object* null, %struct._object** %digits, align 8
  store i8* null, i8** %decstring, align 8
  store i64 0, i64* %exp, align 8
  store i32 0, i32* %is_infinite, align 4
  %0 = load %struct._object*, %struct._object** %dectuple.addr, align 8
  %call = call i64 @PyTuple_Size(%struct._object* %0)
  %cmp = icmp ne i64 %call, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.143, i32 0, i32 0))
  br label %error

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dectuple.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %3, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %4 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %4, %struct._object** %tmp, align 8
  %5 = load %struct._object*, %struct._object** %tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19
  %7 = load i64, i64* %tp_flags, align 8
  %and = and i64 %7, 16777216
  %cmp12 = icmp ne i64 %and, 0
  br i1 %cmp12, label %if.end.14, label %if.then.13

if.then.13:                                       ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.144, i32 0, i32 0))
  br label %error

if.end.14:                                        ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %tmp, align 8
  %call15 = call i64 @PyLong_AsLong(%struct._object* %9)
  store i64 %call15, i64* %sign, align 8
  %10 = load i64, i64* %sign, align 8
  %cmp16 = icmp eq i64 %10, -1
  br i1 %cmp16, label %land.lhs.true, label %if.end.19

land.lhs.true:                                    ; preds = %if.end.14
  %call17 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call17, null
  br i1 %tobool, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %land.lhs.true
  br label %error

if.end.19:                                        ; preds = %land.lhs.true, %if.end.14
  %11 = load i64, i64* %sign, align 8
  %cmp20 = icmp ne i64 %11, 0
  br i1 %cmp20, label %land.lhs.true.21, label %if.end.24

land.lhs.true.21:                                 ; preds = %if.end.19
  %12 = load i64, i64* %sign, align 8
  %cmp22 = icmp ne i64 %12, 1
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %land.lhs.true.21
  %13 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %13, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.144, i32 0, i32 0))
  br label %error

if.end.24:                                        ; preds = %land.lhs.true.21, %if.end.19
  %14 = load i64, i64* %sign, align 8
  %tobool25 = icmp ne i64 %14, 0
  %cond = select i1 %tobool25, i32 45, i32 43
  %conv = trunc i32 %cond to i8
  %arrayidx26 = getelementptr [6 x i8], [6 x i8]* %sign_special, i32 0, i64 0
  store i8 %conv, i8* %arrayidx26, align 1
  %arrayidx27 = getelementptr [6 x i8], [6 x i8]* %sign_special, i32 0, i64 1
  store i8 0, i8* %arrayidx27, align 1
  %15 = load %struct._object*, %struct._object** %dectuple.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*
  %ob_item28 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1
  %arrayidx29 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item28, i32 0, i64 2
  %17 = load %struct._object*, %struct._object** %arrayidx29, align 8
  store %struct._object* %17, %struct._object** %tmp, align 8
  %18 = load %struct._object*, %struct._object** %tmp, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_flags31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19
  %20 = load i64, i64* %tp_flags31, align 8
  %and32 = and i64 %20, 268435456
  %cmp33 = icmp ne i64 %and32, 0
  br i1 %cmp33, label %if.then.35, label %if.else.58

if.then.35:                                       ; preds = %if.end.24
  %21 = load %struct._object*, %struct._object** %tmp, align 8
  %call36 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %21, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.124, i32 0, i32 0))
  %cmp37 = icmp eq i32 %call36, 0
  br i1 %cmp37, label %if.then.39, label %if.else

if.then.39:                                       ; preds = %if.then.35
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %sign_special, i32 0, i32 0
  %call40 = call i8* @strcat(i8* %arraydecay, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.145, i32 0, i32 0)) #3
  store i32 1, i32* %is_infinite, align 4
  br label %if.end.57

if.else:                                          ; preds = %if.then.35
  %22 = load %struct._object*, %struct._object** %tmp, align 8
  %call41 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.126, i32 0, i32 0))
  %cmp42 = icmp eq i32 %call41, 0
  br i1 %cmp42, label %if.then.44, label %if.else.47

if.then.44:                                       ; preds = %if.else
  %arraydecay45 = getelementptr inbounds [6 x i8], [6 x i8]* %sign_special, i32 0, i32 0
  %call46 = call i8* @strcat(i8* %arraydecay45, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.146, i32 0, i32 0)) #3
  br label %if.end.56

if.else.47:                                       ; preds = %if.else
  %23 = load %struct._object*, %struct._object** %tmp, align 8
  %call48 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %23, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.127, i32 0, i32 0))
  %cmp49 = icmp eq i32 %call48, 0
  br i1 %cmp49, label %if.then.51, label %if.else.54

if.then.51:                                       ; preds = %if.else.47
  %arraydecay52 = getelementptr inbounds [6 x i8], [6 x i8]* %sign_special, i32 0, i32 0
  %call53 = call i8* @strcat(i8* %arraydecay52, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.147, i32 0, i32 0)) #3
  br label %if.end.55

if.else.54:                                       ; preds = %if.else.47
  %24 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %24, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.148, i32 0, i32 0))
  br label %error

if.end.55:                                        ; preds = %if.then.51
  br label %if.end.56

if.end.56:                                        ; preds = %if.end.55, %if.then.44
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %if.then.39
  br label %if.end.74

if.else.58:                                       ; preds = %if.end.24
  %25 = load %struct._object*, %struct._object** %tmp, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_flags60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 19
  %27 = load i64, i64* %tp_flags60, align 8
  %and61 = and i64 %27, 16777216
  %cmp62 = icmp ne i64 %and61, 0
  br i1 %cmp62, label %if.end.65, label %if.then.64

if.then.64:                                       ; preds = %if.else.58
  %28 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %28, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.149, i32 0, i32 0))
  br label %error

if.end.65:                                        ; preds = %if.else.58
  %29 = load %struct._object*, %struct._object** %tmp, align 8
  %call66 = call i64 @PyLong_AsSsize_t(%struct._object* %29)
  store i64 %call66, i64* %exp, align 8
  %30 = load i64, i64* %exp, align 8
  %cmp67 = icmp eq i64 %30, -1
  br i1 %cmp67, label %land.lhs.true.69, label %if.end.73

land.lhs.true.69:                                 ; preds = %if.end.65
  %call70 = call %struct._object* @PyErr_Occurred()
  %tobool71 = icmp ne %struct._object* %call70, null
  br i1 %tobool71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %land.lhs.true.69
  br label %error

if.end.73:                                        ; preds = %land.lhs.true.69, %if.end.65
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.end.57
  %31 = load %struct._object*, %struct._object** %dectuple.addr, align 8
  %32 = bitcast %struct._object* %31 to %struct.PyTupleObject*
  %ob_item75 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %32, i32 0, i32 1
  %arrayidx76 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item75, i32 0, i64 1
  %33 = load %struct._object*, %struct._object** %arrayidx76, align 8
  %34 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call77 = call %struct._object* @sequence_as_tuple(%struct._object* %33, %struct._object* %34, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.150, i32 0, i32 0))
  store %struct._object* %call77, %struct._object** %digits, align 8
  %35 = load %struct._object*, %struct._object** %digits, align 8
  %cmp78 = icmp eq %struct._object* %35, null
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.end.74
  br label %error

if.end.81:                                        ; preds = %if.end.74
  %36 = load %struct._object*, %struct._object** %digits, align 8
  %call82 = call i64 @PyTuple_Size(%struct._object* %36)
  store i64 %call82, i64* %tsize, align 8
  %37 = load i64, i64* %tsize, align 8
  %add = add i64 1, %37
  %add83 = add i64 %add, 3
  %add84 = add i64 %add83, 19
  %add85 = add i64 %add84, 2
  store i64 %add85, i64* %mem, align 8
  %38 = load i64, i64* %mem, align 8
  %call86 = call i8* @PyMem_Malloc(i64 %38)
  store i8* %call86, i8** %decstring, align 8
  store i8* %call86, i8** %cp, align 8
  %39 = load i8*, i8** %decstring, align 8
  %cmp87 = icmp eq i8* %39, null
  br i1 %cmp87, label %if.then.89, label %if.end.91

if.then.89:                                       ; preds = %if.end.81
  %call90 = call %struct._object* @PyErr_NoMemory()
  br label %error

if.end.91:                                        ; preds = %if.end.81
  %40 = load i8*, i8** %cp, align 8
  %41 = load i64, i64* %mem, align 8
  %arraydecay92 = getelementptr inbounds [6 x i8], [6 x i8]* %sign_special, i32 0, i32 0
  %call93 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %40, i64 %41, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.151, i32 0, i32 0), i8* %arraydecay92) #3
  store i32 %call93, i32* %n, align 4
  %42 = load i32, i32* %n, align 4
  %cmp94 = icmp slt i32 %42, 0
  br i1 %cmp94, label %if.then.99, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.91
  %43 = load i32, i32* %n, align 4
  %conv96 = sext i32 %43 to i64
  %44 = load i64, i64* %mem, align 8
  %cmp97 = icmp sge i64 %conv96, %44
  br i1 %cmp97, label %if.then.99, label %if.end.100

if.then.99:                                       ; preds = %lor.lhs.false, %if.end.91
  %45 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %45, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.152, i32 0, i32 0))
  br label %error

if.end.100:                                       ; preds = %lor.lhs.false
  %46 = load i32, i32* %n, align 4
  %47 = load i8*, i8** %cp, align 8
  %idx.ext = sext i32 %46 to i64
  %add.ptr = getelementptr i8, i8* %47, i64 %idx.ext
  store i8* %add.ptr, i8** %cp, align 8
  %48 = load i64, i64* %tsize, align 8
  %cmp101 = icmp eq i64 %48, 0
  br i1 %cmp101, label %land.lhs.true.103, label %if.end.109

land.lhs.true.103:                                ; preds = %if.end.100
  %arrayidx104 = getelementptr [6 x i8], [6 x i8]* %sign_special, i32 0, i64 1
  %49 = load i8, i8* %arrayidx104, align 1
  %conv105 = sext i8 %49 to i32
  %cmp106 = icmp eq i32 %conv105, 0
  br i1 %cmp106, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %land.lhs.true.103
  %50 = load i8*, i8** %cp, align 8
  %incdec.ptr = getelementptr i8, i8* %50, i32 1
  store i8* %incdec.ptr, i8** %cp, align 8
  store i8 48, i8* %50, align 1
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.108, %land.lhs.true.103, %if.end.100
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.109
  %51 = load i64, i64* %i, align 8
  %52 = load i64, i64* %tsize, align 8
  %cmp110 = icmp slt i64 %51, %52
  br i1 %cmp110, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %53 = load i64, i64* %i, align 8
  %54 = load %struct._object*, %struct._object** %digits, align 8
  %55 = bitcast %struct._object* %54 to %struct.PyTupleObject*
  %ob_item112 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %55, i32 0, i32 1
  %arrayidx113 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item112, i32 0, i64 %53
  %56 = load %struct._object*, %struct._object** %arrayidx113, align 8
  store %struct._object* %56, %struct._object** %tmp, align 8
  %57 = load %struct._object*, %struct._object** %tmp, align 8
  %ob_type114 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type114, align 8
  %tp_flags115 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 19
  %59 = load i64, i64* %tp_flags115, align 8
  %and116 = and i64 %59, 16777216
  %cmp117 = icmp ne i64 %and116, 0
  br i1 %cmp117, label %if.end.120, label %if.then.119

if.then.119:                                      ; preds = %for.body
  %60 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %60, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.150, i32 0, i32 0))
  br label %error

if.end.120:                                       ; preds = %for.body
  %61 = load %struct._object*, %struct._object** %tmp, align 8
  %call121 = call i64 @PyLong_AsLong(%struct._object* %61)
  store i64 %call121, i64* %l, align 8
  %62 = load i64, i64* %l, align 8
  %cmp122 = icmp eq i64 %62, -1
  br i1 %cmp122, label %land.lhs.true.124, label %if.end.128

land.lhs.true.124:                                ; preds = %if.end.120
  %call125 = call %struct._object* @PyErr_Occurred()
  %tobool126 = icmp ne %struct._object* %call125, null
  br i1 %tobool126, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %land.lhs.true.124
  br label %error

if.end.128:                                       ; preds = %land.lhs.true.124, %if.end.120
  %63 = load i64, i64* %l, align 8
  %cmp129 = icmp slt i64 %63, 0
  br i1 %cmp129, label %if.then.134, label %lor.lhs.false.131

lor.lhs.false.131:                                ; preds = %if.end.128
  %64 = load i64, i64* %l, align 8
  %cmp132 = icmp sgt i64 %64, 9
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %lor.lhs.false.131, %if.end.128
  %65 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %65, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.150, i32 0, i32 0))
  br label %error

if.end.135:                                       ; preds = %lor.lhs.false.131
  %66 = load i32, i32* %is_infinite, align 4
  %tobool136 = icmp ne i32 %66, 0
  br i1 %tobool136, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %if.end.135
  br label %for.inc

if.end.138:                                       ; preds = %if.end.135
  %67 = load i64, i64* %l, align 8
  %conv139 = trunc i64 %67 to i8
  %conv140 = sext i8 %conv139 to i32
  %add141 = add i32 %conv140, 48
  %conv142 = trunc i32 %add141 to i8
  %68 = load i8*, i8** %cp, align 8
  %incdec.ptr143 = getelementptr i8, i8* %68, i32 1
  store i8* %incdec.ptr143, i8** %cp, align 8
  store i8 %conv142, i8* %68, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end.138, %if.then.137
  %69 = load i64, i64* %i, align 8
  %inc = add i64 %69, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %70 = load i8*, i8** %cp, align 8
  store i8 0, i8* %70, align 1
  %arrayidx144 = getelementptr [6 x i8], [6 x i8]* %sign_special, i32 0, i64 1
  %71 = load i8, i8* %arrayidx144, align 1
  %conv145 = sext i8 %71 to i32
  %cmp146 = icmp eq i32 %conv145, 0
  br i1 %cmp146, label %if.then.148, label %if.end.158

if.then.148:                                      ; preds = %for.end
  %72 = load i8*, i8** %cp, align 8
  %incdec.ptr149 = getelementptr i8, i8* %72, i32 1
  store i8* %incdec.ptr149, i8** %cp, align 8
  store i8 69, i8* %72, align 1
  %73 = load i8*, i8** %cp, align 8
  %74 = load i64, i64* %exp, align 8
  %call150 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* %73, i64 21, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.153, i32 0, i32 0), i64 %74) #3
  store i32 %call150, i32* %n, align 4
  %75 = load i32, i32* %n, align 4
  %cmp151 = icmp slt i32 %75, 0
  br i1 %cmp151, label %if.then.156, label %lor.lhs.false.153

lor.lhs.false.153:                                ; preds = %if.then.148
  %76 = load i32, i32* %n, align 4
  %cmp154 = icmp sge i32 %76, 21
  br i1 %cmp154, label %if.then.156, label %if.end.157

if.then.156:                                      ; preds = %lor.lhs.false.153, %if.then.148
  %77 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %77, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.152, i32 0, i32 0))
  br label %error

if.end.157:                                       ; preds = %lor.lhs.false.153
  br label %if.end.158

if.end.158:                                       ; preds = %if.end.157, %for.end
  br label %do.body

do.body:                                          ; preds = %if.end.158
  %78 = load %struct._object*, %struct._object** %digits, align 8
  store %struct._object* %78, %struct._object** %_py_xdecref_tmp, align 8
  %79 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp160 = icmp ne %struct._object* %79, null
  br i1 %cmp160, label %if.then.162, label %if.end.171

if.then.162:                                      ; preds = %do.body
  br label %do.body.163

do.body.163:                                      ; preds = %if.then.162
  %80 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %80, %struct._object** %_py_decref_tmp, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 0
  %82 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %82, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp165 = icmp ne i64 %dec, 0
  br i1 %cmp165, label %if.then.167, label %if.else.168

if.then.167:                                      ; preds = %do.body.163
  br label %if.end.170

if.else.168:                                      ; preds = %do.body.163
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type169 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 1
  %84 = load %struct._typeobject*, %struct._typeobject** %ob_type169, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %84, i32 0, i32 4
  %85 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %85(%struct._object* %86)
  br label %if.end.170

if.end.170:                                       ; preds = %if.else.168, %if.then.167
  br label %do.end

do.end:                                           ; preds = %if.end.170
  br label %if.end.171

if.end.171:                                       ; preds = %do.end, %do.body
  br label %do.end.172

do.end.172:                                       ; preds = %if.end.171
  %87 = load i8*, i8** %decstring, align 8
  store i8* %87, i8** %retval
  br label %return

error:                                            ; preds = %if.then.156, %if.then.134, %if.then.127, %if.then.119, %if.then.99, %if.then.89, %if.then.80, %if.then.72, %if.then.64, %if.else.54, %if.then.23, %if.then.18, %if.then.13, %if.then
  br label %do.body.173

do.body.173:                                      ; preds = %error
  %88 = load %struct._object*, %struct._object** %digits, align 8
  store %struct._object* %88, %struct._object** %_py_xdecref_tmp175, align 8
  %89 = load %struct._object*, %struct._object** %_py_xdecref_tmp175, align 8
  %cmp176 = icmp ne %struct._object* %89, null
  br i1 %cmp176, label %if.then.178, label %if.end.192

if.then.178:                                      ; preds = %do.body.173
  br label %do.body.179

do.body.179:                                      ; preds = %if.then.178
  %90 = load %struct._object*, %struct._object** %_py_xdecref_tmp175, align 8
  store %struct._object* %90, %struct._object** %_py_decref_tmp181, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  %ob_refcnt182 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 0
  %92 = load i64, i64* %ob_refcnt182, align 8
  %dec183 = add i64 %92, -1
  store i64 %dec183, i64* %ob_refcnt182, align 8
  %cmp184 = icmp ne i64 %dec183, 0
  br i1 %cmp184, label %if.then.186, label %if.else.187

if.then.186:                                      ; preds = %do.body.179
  br label %if.end.190

if.else.187:                                      ; preds = %do.body.179
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  %ob_type188 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 1
  %94 = load %struct._typeobject*, %struct._typeobject** %ob_type188, align 8
  %tp_dealloc189 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 4
  %95 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc189, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp181, align 8
  call void %95(%struct._object* %96)
  br label %if.end.190

if.end.190:                                       ; preds = %if.else.187, %if.then.186
  br label %do.end.191

do.end.191:                                       ; preds = %if.end.190
  br label %if.end.192

if.end.192:                                       ; preds = %do.end.191, %do.body.173
  br label %do.end.193

do.end.193:                                       ; preds = %if.end.192
  %97 = load i8*, i8** %decstring, align 8
  %tobool194 = icmp ne i8* %97, null
  br i1 %tobool194, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %do.end.193
  %98 = load i8*, i8** %decstring, align 8
  call void @PyMem_Free(i8* %98)
  br label %if.end.196

if.end.196:                                       ; preds = %if.then.195, %do.end.193
  store i8* null, i8** %retval
  br label %return

return:                                           ; preds = %if.end.196, %do.end.172
  %99 = load i8*, i8** %retval
  ret i8* %99
}

declare %struct._object* @PyList_AsTuple(%struct._object*) #1

declare i64 @PyTuple_Size(%struct._object*) #1

declare i64 @PyLong_AsLong(%struct._object*) #1

declare i32 @PyUnicode_CompareWithASCIIString(%struct._object*, i8*) #1

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #6

; Function Attrs: nounwind
declare i32 @snprintf(i8*, i64, i8*, ...) #6

; Function Attrs: nounwind uwtable
define internal void @context_dealloc(%struct.PyDecContextObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDecContextObject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp14 = alloca %struct._object*, align 8
  store %struct.PyDecContextObject* %self, %struct.PyDecContextObject** %self.addr, align 8
  %0 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self.addr, align 8
  %1 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** @cached_context, align 8
  %cmp = icmp eq %struct.PyDecContextObject* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.PyDecContextObject* null, %struct.PyDecContextObject** @cached_context, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %2 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self.addr, align 8
  %traps = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %traps, align 8
  store %struct._object* %3, %struct._object** %_py_xdecref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp1 = icmp ne %struct._object* %4, null
  br i1 %cmp1, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %do.body
  br label %do.body.3

do.body.3:                                        ; preds = %if.then.2
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body.3
  br label %if.end.6

if.else:                                          ; preds = %do.body.3
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %do.body
  br label %do.end.8

do.end.8:                                         ; preds = %if.end.7
  br label %do.body.9

do.body.9:                                        ; preds = %do.end.8
  %12 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self.addr, align 8
  %flags = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 3
  %13 = load %struct._object*, %struct._object** %flags, align 8
  store %struct._object* %13, %struct._object** %_py_xdecref_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_xdecref_tmp10, align 8
  %cmp11 = icmp ne %struct._object* %14, null
  br i1 %cmp11, label %if.then.12, label %if.end.24

if.then.12:                                       ; preds = %do.body.9
  br label %do.body.13

do.body.13:                                       ; preds = %if.then.12
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp10, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp14, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt15, align 8
  %dec16 = add i64 %17, -1
  store i64 %dec16, i64* %ob_refcnt15, align 8
  %cmp17 = icmp ne i64 %dec16, 0
  br i1 %cmp17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %do.body.13
  br label %if.end.22

if.else.19:                                       ; preds = %do.body.13
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc21, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  call void %20(%struct._object* %21)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.18
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  br label %if.end.24

if.end.24:                                        ; preds = %do.end.23, %do.body.9
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  %22 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self.addr, align 8
  %23 = bitcast %struct.PyDecContextObject* %22 to %struct._object*
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 38
  %25 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %26 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self.addr, align 8
  %27 = bitcast %struct.PyDecContextObject* %26 to i8*
  call void %25(i8* %27)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_repr(%struct.PyDecContextObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDecContextObject*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %flags = alloca [121 x i8], align 16
  %traps = alloca [121 x i8], align 16
  %n = alloca i32, align 4
  %mem = alloca i32, align 4
  store %struct.PyDecContextObject* %self, %struct.PyDecContextObject** %self.addr, align 8
  %0 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self.addr, align 8
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %0, i32 0, i32 1
  store %struct.mpd_context_t* %ctx1, %struct.mpd_context_t** %ctx, align 8
  store i32 121, i32* %mem, align 4
  %arraydecay = getelementptr inbounds [121 x i8], [121 x i8]* %flags, i32 0, i32 0
  %1 = load i32, i32* %mem, align 4
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %2, i32 0, i32 4
  %3 = load i32, i32* %status, align 4
  %call = call i32 @mpd_lsnprint_signals(i8* %arraydecay, i32 %1, i32 %3, i8** getelementptr inbounds ([15 x i8*], [15 x i8*]* @dec_signal_string, i32 0, i32 0))
  store i32 %call, i32* %n, align 4
  %4 = load i32, i32* %n, align 4
  %cmp = icmp slt i32 %4, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load i32, i32* %n, align 4
  %6 = load i32, i32* %mem, align 4
  %cmp2 = icmp sge i32 %5, %6
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %call3 = call %struct._object* @runtime_error_ptr(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.155, i32 0, i32 0))
  store %struct._object* %call3, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay4 = getelementptr inbounds [121 x i8], [121 x i8]* %traps, i32 0, i32 0
  %7 = load i32, i32* %mem, align 4
  %8 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %traps5 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %8, i32 0, i32 3
  %9 = load i32, i32* %traps5, align 4
  %call6 = call i32 @mpd_lsnprint_signals(i8* %arraydecay4, i32 %7, i32 %9, i8** getelementptr inbounds ([15 x i8*], [15 x i8*]* @dec_signal_string, i32 0, i32 0))
  store i32 %call6, i32* %n, align 4
  %10 = load i32, i32* %n, align 4
  %cmp7 = icmp slt i32 %10, 0
  br i1 %cmp7, label %if.then.10, label %lor.lhs.false.8

lor.lhs.false.8:                                  ; preds = %if.end
  %11 = load i32, i32* %n, align 4
  %12 = load i32, i32* %mem, align 4
  %cmp9 = icmp sge i32 %11, %12
  br i1 %cmp9, label %if.then.10, label %if.end.12

if.then.10:                                       ; preds = %lor.lhs.false.8, %if.end
  %call11 = call %struct._object* @runtime_error_ptr(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.155, i32 0, i32 0))
  store %struct._object* %call11, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %lor.lhs.false.8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %13, i32 0, i32 0
  %14 = load i64, i64* %prec, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %15, i32 0, i32 6
  %16 = load i32, i32* %round, align 4
  %idxprom = sext i32 %16 to i64
  %arrayidx = getelementptr [9 x i8*], [9 x i8*]* @mpd_round_string, i32 0, i64 %idxprom
  %17 = load i8*, i8** %arrayidx, align 8
  %18 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %18, i32 0, i32 2
  %19 = load i64, i64* %emin, align 8
  %20 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %20, i32 0, i32 1
  %21 = load i64, i64* %emax, align 8
  %22 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self.addr, align 8
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %22, i32 0, i32 4
  %23 = load i32, i32* %capitals, align 4
  %24 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %24, i32 0, i32 7
  %25 = load i32, i32* %clamp, align 4
  %arraydecay13 = getelementptr inbounds [121 x i8], [121 x i8]* %flags, i32 0, i32 0
  %arraydecay14 = getelementptr inbounds [121 x i8], [121 x i8]* %traps, i32 0, i32 0
  %call15 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.156, i32 0, i32 0), i64 %14, i8* %17, i64 %19, i64 %21, i32 %23, i32 %25, i8* %arraydecay13, i8* %arraydecay14)
  store %struct._object* %call15, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.10, %if.then
  %26 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %26
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getattr(%struct._object* %self, %struct._object* %name) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %retval1 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 268435456
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.166, i32 0, i32 0))
  %cmp2 = icmp eq i32 %call, 0
  br i1 %cmp2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %self.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecContextObject*
  %traps = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %traps, align 8
  store %struct._object* %6, %struct._object** %retval1, align 8
  %7 = load %struct._object*, %struct._object** %retval1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %9 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %9, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  %10 = load %struct._object*, %struct._object** %name.addr, align 8
  %call4 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %10, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.167, i32 0, i32 0))
  %cmp5 = icmp eq i32 %call4, 0
  br i1 %cmp5, label %if.then.6, label %if.end.9

if.then.6:                                        ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecContextObject*
  %flags = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 3
  %13 = load %struct._object*, %struct._object** %flags, align 8
  store %struct._object* %13, %struct._object** %retval1, align 8
  %14 = load %struct._object*, %struct._object** %retval1, align 8
  %ob_refcnt7 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt7, align 8
  %inc8 = add i64 %15, 1
  store i64 %inc8, i64* %ob_refcnt7, align 8
  %16 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %entry
  %17 = load %struct._object*, %struct._object** %self.addr, align 8
  %18 = load %struct._object*, %struct._object** %name.addr, align 8
  %call11 = call %struct._object* @PyObject_GenericGetAttr(%struct._object* %17, %struct._object* %18)
  store %struct._object* %call11, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.6, %if.then.3
  %19 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %19
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setattr(%struct._object* %self, %struct._object* %name, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.168, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %name.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.then.2, label %if.end.12

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %5, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.166, i32 0, i32 0))
  %cmp3 = icmp eq i32 %call, 0
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %if.then.2
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = load %struct._object*, %struct._object** %value.addr, align 8
  %call5 = call i32 @context_settraps_dict(%struct._object* %6, %struct._object* %7)
  store i32 %call5, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  %8 = load %struct._object*, %struct._object** %name.addr, align 8
  %call7 = call i32 @PyUnicode_CompareWithASCIIString(%struct._object* %8, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.167, i32 0, i32 0))
  %cmp8 = icmp eq i32 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end.6
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %value.addr, align 8
  %call10 = call i32 @context_setstatus_dict(%struct._object* %9, %struct._object* %10)
  store i32 %call10, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.6
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.end
  %11 = load %struct._object*, %struct._object** %self.addr, align 8
  %12 = load %struct._object*, %struct._object** %name.addr, align 8
  %13 = load %struct._object*, %struct._object** %value.addr, align 8
  %call13 = call i32 @PyObject_GenericSetAttr(%struct._object* %11, %struct._object* %12, %struct._object* %13)
  store i32 %call13, i32* %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.9, %if.then.4, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @context_init(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %prec = alloca %struct._object*, align 8
  %rounding = alloca %struct._object*, align 8
  %emin = alloca %struct._object*, align 8
  %emax = alloca %struct._object*, align 8
  %capitals = alloca %struct._object*, align 8
  %clamp = alloca %struct._object*, align 8
  %status = alloca %struct._object*, align 8
  %traps = alloca %struct._object*, align 8
  %ret = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %prec, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %rounding, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %emin, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %emax, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %capitals, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %clamp, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %status, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %traps, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.212, i32 0, i32 0), i8** getelementptr inbounds ([9 x i8*], [9 x i8*]* @context_init.kwlist, i32 0, i32 0), %struct._object** %prec, %struct._object** %rounding, %struct._object** %emin, %struct._object** %emax, %struct._object** %capitals, %struct._object** %clamp, %struct._object** %status, %struct._object** %traps)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %prec, align 8
  %cmp = icmp ne %struct._object* %2, @_Py_NoneStruct
  br i1 %cmp, label %land.lhs.true, label %if.end.4

land.lhs.true:                                    ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._object*, %struct._object** %prec, align 8
  %call1 = call i32 @context_setprec(%struct._object* %3, %struct._object* %4, i8* null)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %land.lhs.true, %if.end
  %5 = load %struct._object*, %struct._object** %rounding, align 8
  %cmp5 = icmp ne %struct._object* %5, @_Py_NoneStruct
  br i1 %cmp5, label %land.lhs.true.6, label %if.end.10

land.lhs.true.6:                                  ; preds = %if.end.4
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = load %struct._object*, %struct._object** %rounding, align 8
  %call7 = call i32 @context_setround(%struct._object* %6, %struct._object* %7, i8* null)
  %cmp8 = icmp slt i32 %call7, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %land.lhs.true.6
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %land.lhs.true.6, %if.end.4
  %8 = load %struct._object*, %struct._object** %emin, align 8
  %cmp11 = icmp ne %struct._object* %8, @_Py_NoneStruct
  br i1 %cmp11, label %land.lhs.true.12, label %if.end.16

land.lhs.true.12:                                 ; preds = %if.end.10
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %emin, align 8
  %call13 = call i32 @context_setemin(%struct._object* %9, %struct._object* %10, i8* null)
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %land.lhs.true.12
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %land.lhs.true.12, %if.end.10
  %11 = load %struct._object*, %struct._object** %emax, align 8
  %cmp17 = icmp ne %struct._object* %11, @_Py_NoneStruct
  br i1 %cmp17, label %land.lhs.true.18, label %if.end.22

land.lhs.true.18:                                 ; preds = %if.end.16
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %13 = load %struct._object*, %struct._object** %emax, align 8
  %call19 = call i32 @context_setemax(%struct._object* %12, %struct._object* %13, i8* null)
  %cmp20 = icmp slt i32 %call19, 0
  br i1 %cmp20, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %land.lhs.true.18
  store i32 -1, i32* %retval
  br label %return

if.end.22:                                        ; preds = %land.lhs.true.18, %if.end.16
  %14 = load %struct._object*, %struct._object** %capitals, align 8
  %cmp23 = icmp ne %struct._object* %14, @_Py_NoneStruct
  br i1 %cmp23, label %land.lhs.true.24, label %if.end.28

land.lhs.true.24:                                 ; preds = %if.end.22
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %16 = load %struct._object*, %struct._object** %capitals, align 8
  %call25 = call i32 @context_setcapitals(%struct._object* %15, %struct._object* %16, i8* null)
  %cmp26 = icmp slt i32 %call25, 0
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %land.lhs.true.24
  store i32 -1, i32* %retval
  br label %return

if.end.28:                                        ; preds = %land.lhs.true.24, %if.end.22
  %17 = load %struct._object*, %struct._object** %clamp, align 8
  %cmp29 = icmp ne %struct._object* %17, @_Py_NoneStruct
  br i1 %cmp29, label %land.lhs.true.30, label %if.end.34

land.lhs.true.30:                                 ; preds = %if.end.28
  %18 = load %struct._object*, %struct._object** %self.addr, align 8
  %19 = load %struct._object*, %struct._object** %clamp, align 8
  %call31 = call i32 @context_setclamp(%struct._object* %18, %struct._object* %19, i8* null)
  %cmp32 = icmp slt i32 %call31, 0
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %land.lhs.true.30
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %land.lhs.true.30, %if.end.28
  %20 = load %struct._object*, %struct._object** %traps, align 8
  %cmp35 = icmp ne %struct._object* %20, @_Py_NoneStruct
  br i1 %cmp35, label %if.then.36, label %if.end.45

if.then.36:                                       ; preds = %if.end.34
  %21 = load %struct._object*, %struct._object** %traps, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 19
  %23 = load i64, i64* %tp_flags, align 8
  %and = and i64 %23, 33554432
  %cmp37 = icmp ne i64 %and, 0
  br i1 %cmp37, label %if.then.38, label %if.else

if.then.38:                                       ; preds = %if.then.36
  %24 = load %struct._object*, %struct._object** %self.addr, align 8
  %25 = load %struct._object*, %struct._object** %traps, align 8
  %call39 = call i32 @context_settraps_list(%struct._object* %24, %struct._object* %25)
  store i32 %call39, i32* %ret, align 4
  br label %if.end.41

if.else:                                          ; preds = %if.then.36
  %26 = load %struct._object*, %struct._object** %self.addr, align 8
  %27 = load %struct._object*, %struct._object** %traps, align 8
  %call40 = call i32 @context_settraps_dict(%struct._object* %26, %struct._object* %27)
  store i32 %call40, i32* %ret, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.else, %if.then.38
  %28 = load i32, i32* %ret, align 4
  %cmp42 = icmp slt i32 %28, 0
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.41
  %29 = load i32, i32* %ret, align 4
  store i32 %29, i32* %retval
  br label %return

if.end.44:                                        ; preds = %if.end.41
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.end.34
  %30 = load %struct._object*, %struct._object** %status, align 8
  %cmp46 = icmp ne %struct._object* %30, @_Py_NoneStruct
  br i1 %cmp46, label %if.then.47, label %if.end.60

if.then.47:                                       ; preds = %if.end.45
  %31 = load %struct._object*, %struct._object** %status, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_flags49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 19
  %33 = load i64, i64* %tp_flags49, align 8
  %and50 = and i64 %33, 33554432
  %cmp51 = icmp ne i64 %and50, 0
  br i1 %cmp51, label %if.then.52, label %if.else.54

if.then.52:                                       ; preds = %if.then.47
  %34 = load %struct._object*, %struct._object** %self.addr, align 8
  %35 = load %struct._object*, %struct._object** %status, align 8
  %call53 = call i32 @context_setstatus_list(%struct._object* %34, %struct._object* %35)
  store i32 %call53, i32* %ret, align 4
  br label %if.end.56

if.else.54:                                       ; preds = %if.then.47
  %36 = load %struct._object*, %struct._object** %self.addr, align 8
  %37 = load %struct._object*, %struct._object** %status, align 8
  %call55 = call i32 @context_setstatus_dict(%struct._object* %36, %struct._object* %37)
  store i32 %call55, i32* %ret, align 4
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.54, %if.then.52
  %38 = load i32, i32* %ret, align 4
  %cmp57 = icmp slt i32 %38, 0
  br i1 %cmp57, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %if.end.56
  %39 = load i32, i32* %ret, align 4
  store i32 %39, i32* %retval
  br label %return

if.end.59:                                        ; preds = %if.end.56
  br label %if.end.60

if.end.60:                                        ; preds = %if.end.59, %if.end.45
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.60, %if.then.58, %if.then.43, %if.then.33, %if.then.27, %if.then.21, %if.then.15, %if.then.9, %if.then.3, %if.then
  %40 = load i32, i32* %retval
  ret i32 %40
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %self = alloca %struct.PyDecContextObject*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct.PyDecContextObject* null, %struct.PyDecContextObject** %self, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %cmp = icmp eq %struct._typeobject* %0, @PyDecContext_Type
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct._object* @_PyObject_New(%struct._typeobject* @PyDecContext_Type)
  %1 = bitcast %struct._object* %call to %struct.PyDecContextObject*
  store %struct.PyDecContextObject* %1, %struct.PyDecContextObject** %self, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 36
  %3 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call1 = call %struct._object* %3(%struct._typeobject* %4, i64 0)
  %5 = bitcast %struct._object* %call1 to %struct.PyDecContextObject*
  store %struct.PyDecContextObject* %5, %struct.PyDecContextObject** %self, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %cmp2 = icmp eq %struct.PyDecContextObject* %6, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %7 = load %struct._typeobject*, %struct._typeobject** @PyDecSignalDict_Type, align 8
  %8 = bitcast %struct._typeobject* %7 to %struct._object*
  %call5 = call %struct._object* @PyObject_CallObject(%struct._object* %8, %struct._object* null)
  %9 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %traps = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %9, i32 0, i32 2
  store %struct._object* %call5, %struct._object** %traps, align 8
  %10 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %traps6 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %traps6, align 8
  %cmp7 = icmp eq %struct._object* %11, null
  br i1 %cmp7, label %if.then.8, label %if.end.13

if.then.8:                                        ; preds = %if.end.4
  %12 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %flags = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %12, i32 0, i32 3
  store %struct._object* null, %struct._object** %flags, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %13 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %14 = bitcast %struct.PyDecContextObject* %13 to %struct._object*
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else.11

if.then.10:                                       ; preds = %do.body
  br label %if.end.12

if.else.11:                                       ; preds = %do.body
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else.11, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.end.4
  %21 = load %struct._typeobject*, %struct._typeobject** @PyDecSignalDict_Type, align 8
  %22 = bitcast %struct._typeobject* %21 to %struct._object*
  %call14 = call %struct._object* @PyObject_CallObject(%struct._object* %22, %struct._object* null)
  %23 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %flags15 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %23, i32 0, i32 3
  store %struct._object* %call14, %struct._object** %flags15, align 8
  %24 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %flags16 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %24, i32 0, i32 3
  %25 = load %struct._object*, %struct._object** %flags16, align 8
  %cmp17 = icmp eq %struct._object* %25, null
  br i1 %cmp17, label %if.then.18, label %if.end.30

if.then.18:                                       ; preds = %if.end.13
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  %26 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %27 = bitcast %struct.PyDecContextObject* %26 to %struct._object*
  store %struct._object* %27, %struct._object** %_py_decref_tmp20, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt21, align 8
  %dec22 = add i64 %29, -1
  store i64 %dec22, i64* %ob_refcnt21, align 8
  %cmp23 = icmp ne i64 %dec22, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.19
  br label %if.end.28

if.else.25:                                       ; preds = %do.body.19
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 4
  %32 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  call void %32(%struct._object* %33)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.30:                                        ; preds = %if.end.13
  %34 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %ctx31 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %34, i32 0, i32 1
  store %struct.mpd_context_t* %ctx31, %struct.mpd_context_t** %ctx, align 8
  %35 = load %struct._object*, %struct._object** @default_context_template, align 8
  %tobool = icmp ne %struct._object* %35, null
  br i1 %tobool, label %if.then.32, label %if.else.34

if.then.32:                                       ; preds = %if.end.30
  %36 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %37 = load %struct._object*, %struct._object** @default_context_template, align 8
  %38 = bitcast %struct._object* %37 to %struct.PyDecContextObject*
  %ctx33 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %38, i32 0, i32 1
  %39 = bitcast %struct.mpd_context_t* %36 to i8*
  %40 = bitcast %struct.mpd_context_t* %ctx33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %39, i8* %40, i64 48, i32 8, i1 false)
  br label %if.end.35

if.else.34:                                       ; preds = %if.end.30
  %41 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %42 = bitcast %struct.mpd_context_t* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %42, i8* bitcast (%struct.mpd_context_t* @dflt_ctx to i8*), i64 48, i32 8, i1 false)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.34, %if.then.32
  %43 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %traps36 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %43, i32 0, i32 3
  %44 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %traps37 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %44, i32 0, i32 2
  %45 = load %struct._object*, %struct._object** %traps37, align 8
  %46 = bitcast %struct._object* %45 to %struct.PyDecSignalDictObject*
  %flags38 = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %46, i32 0, i32 1
  store i32* %traps36, i32** %flags38, align 8
  %47 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %47, i32 0, i32 4
  %48 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %flags39 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %48, i32 0, i32 3
  %49 = load %struct._object*, %struct._object** %flags39, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyDecSignalDictObject*
  %flags40 = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %50, i32 0, i32 1
  store i32* %status, i32** %flags40, align 8
  %51 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %51, i32 0, i32 4
  store i32 1, i32* %capitals, align 4
  %52 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %tstate = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %52, i32 0, i32 5
  store %struct._ts* null, %struct._ts** %tstate, align 8
  %53 = load %struct.PyDecContextObject*, %struct.PyDecContextObject** %self, align 8
  %54 = bitcast %struct.PyDecContextObject* %53 to %struct._object*
  store %struct._object* %54, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.35, %do.end.29, %do.end, %if.then.3
  %55 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %55
}

declare hidden i32 @mpd_lsnprint_signals(i8*, i32, i32, i8**) #1

; Function Attrs: nounwind uwtable
define internal i32 @context_settraps_dict(%struct._object* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %flags = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** @PyDecSignalDict_Type, align 8
  %cmp = icmp eq %struct._typeobject* %1, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %value.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecSignalDictObject*
  %flags1 = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %4, i32 0, i32 1
  %5 = load i32*, i32** %flags1, align 8
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %flags, align 4
  br label %if.end.3

if.else:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @dict_as_flags(%struct._object* %7)
  store i32 %call, i32* %flags, align 4
  %8 = load i32, i32* %flags, align 4
  %and = and i32 %8, 98304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %if.then
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecContextObject*
  %ctx4 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %10, i32 0, i32 1
  store %struct.mpd_context_t* %ctx4, %struct.mpd_context_t** %ctx, align 8
  %11 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %12 = load i32, i32* %flags, align 4
  %call5 = call i32 @mpd_qsettraps(%struct.mpd_context_t* %11, i32 %12)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.9, label %if.then.7

if.then.7:                                        ; preds = %if.end.3
  %call8 = call i32 @runtime_error_int(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.169, i32 0, i32 0))
  store i32 %call8, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.3
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.7, %if.then.2
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setstatus_dict(%struct._object* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %flags = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** @PyDecSignalDict_Type, align 8
  %cmp = icmp eq %struct._typeobject* %1, %2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %value.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecSignalDictObject*
  %flags1 = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %4, i32 0, i32 1
  %5 = load i32*, i32** %flags1, align 8
  %6 = load i32, i32* %5, align 4
  store i32 %6, i32* %flags, align 4
  br label %if.end.3

if.else:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @dict_as_flags(%struct._object* %7)
  store i32 %call, i32* %flags, align 4
  %8 = load i32, i32* %flags, align 4
  %and = and i32 %8, 98304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %if.then
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecContextObject*
  %ctx4 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %10, i32 0, i32 1
  store %struct.mpd_context_t* %ctx4, %struct.mpd_context_t** %ctx, align 8
  %11 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %12 = load i32, i32* %flags, align 4
  %call5 = call i32 @mpd_qsetstatus(%struct.mpd_context_t* %11, i32 %12)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.9, label %if.then.7

if.then.7:                                        ; preds = %if.end.3
  %call8 = call i32 @runtime_error_int(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.172, i32 0, i32 0))
  store i32 %call8, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.3
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.7, %if.then.2
  %13 = load i32, i32* %retval
  ret i32 %13
}

declare i32 @PyObject_GenericSetAttr(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i32 @dict_as_flags(%struct._object* %val) #0 {
entry:
  %retval = alloca i32, align 4
  %val.addr = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %cm = alloca %struct.DecCondMap*, align 8
  %flags = alloca i32, align 4
  %x = alloca i32, align 4
  store %struct._object* %val, %struct._object** %val.addr, align 8
  store i32 0, i32* %flags, align 4
  %0 = load %struct._object*, %struct._object** %val.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 536870912
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.170, i32 0, i32 0))
  store i32 32768, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %val.addr, align 8
  %call = call i64 @PyDict_Size(%struct._object* %4)
  %cmp1 = icmp ne i64 %call, 9
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.171, i32 0, i32 0))
  store i32 32768, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  store %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i32 0), %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.3
  %6 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %6, i32 0, i32 0
  %7 = load i8*, i8** %name, align 8
  %cmp4 = icmp ne i8* %7, null
  br i1 %cmp4, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %8 = load %struct._object*, %struct._object** %val.addr, align 8
  %9 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %9, i32 0, i32 3
  %10 = load %struct._object*, %struct._object** %ex, align 8
  %call5 = call %struct._object* @PyDict_GetItemWithError(%struct._object* %8, %struct._object* %10)
  store %struct._object* %call5, %struct._object** %b, align 8
  %11 = load %struct._object*, %struct._object** %b, align 8
  %cmp6 = icmp eq %struct._object* %11, null
  br i1 %cmp6, label %if.then.7, label %if.end.11

if.then.7:                                        ; preds = %for.body
  %call8 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call8, null
  br i1 %tobool, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.then.7
  store i32 65536, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.then.7
  %12 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.171, i32 0, i32 0))
  store i32 32768, i32* %retval
  br label %return

if.end.11:                                        ; preds = %for.body
  %13 = load %struct._object*, %struct._object** %b, align 8
  %call12 = call i32 @PyObject_IsTrue(%struct._object* %13)
  store i32 %call12, i32* %x, align 4
  %14 = load i32, i32* %x, align 4
  %cmp13 = icmp slt i32 %14, 0
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.11
  store i32 65536, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.11
  %15 = load i32, i32* %x, align 4
  %cmp16 = icmp eq i32 %15, 1
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %if.end.15
  %16 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %16, i32 0, i32 2
  %17 = load i32, i32* %flag, align 4
  %18 = load i32, i32* %flags, align 4
  %or = or i32 %18, %17
  store i32 %or, i32* %flags, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.17, %if.end.15
  br label %for.inc

for.inc:                                          ; preds = %if.end.18
  %19 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %19, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %20 = load i32, i32* %flags, align 4
  store i32 %20, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.14, %if.end.10, %if.then.9, %if.then.2, %if.then
  %21 = load i32, i32* %retval
  ret i32 %21
}

declare hidden i32 @mpd_qsettraps(%struct.mpd_context_t*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @runtime_error_int(i8* %mesg) #0 {
entry:
  %mesg.addr = alloca i8*, align 8
  store i8* %mesg, i8** %mesg.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %1 = load i8*, i8** %mesg.addr, align 8
  call void @PyErr_SetString(%struct._object* %0, i8* %1)
  ret i32 -1
}

declare i64 @PyDict_Size(%struct._object*) #1

declare i32 @PyObject_IsTrue(%struct._object*) #1

declare hidden i32 @mpd_qsetstatus(%struct.mpd_context_t*, i32) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qabs(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qabs(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qexp(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qexp(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qln(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qln(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qlog10(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qlog10(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qminus(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qminus(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qnext_minus(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qnext_minus(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qnext_plus(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qnext_plus(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qreduce(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qreduce(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qplus(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qplus(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qround_to_int(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qround_to_int(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qround_to_intx(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qround_to_intx(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qsqrt(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qsqrt(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qadd(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qadd(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qcompare(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  %call40 = call i32 @mpd_qcompare(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp42, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %36, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %39(%struct._object* %40)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %do.body.52

do.body.52:                                       ; preds = %do.end.51
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp53, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %43, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %46(%struct._object* %47)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call63 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.then.65, label %if.end.77

if.then.65:                                       ; preds = %do.end.62
  br label %do.body.66

do.body.66:                                       ; preds = %if.then.65
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp67, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %52, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %55(%struct._object* %56)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.77:                                        ; preds = %do.end.62
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.77, %do.end.76, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qcompare_signal(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  %call40 = call i32 @mpd_qcompare_signal(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp42, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %36, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %39(%struct._object* %40)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %do.body.52

do.body.52:                                       ; preds = %do.end.51
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp53, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %43, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %46(%struct._object* %47)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call63 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.then.65, label %if.end.77

if.then.65:                                       ; preds = %do.end.62
  br label %do.body.66

do.body.66:                                       ; preds = %if.then.65
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp67, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %52, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %55(%struct._object* %56)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.77:                                        ; preds = %do.end.62
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.77, %do.end.76, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qdiv(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qdiv(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qdivint(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qdivint(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qdivmod(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %q = alloca %struct._object*, align 8
  %r = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %ret = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp79 = alloca %struct._object*, align 8
  %_py_decref_tmp90 = alloca %struct._object*, align 8
  %_py_decref_tmp104 = alloca %struct._object*, align 8
  %_py_decref_tmp115 = alloca %struct._object*, align 8
  %_py_decref_tmp128 = alloca %struct._object*, align 8
  %_py_decref_tmp139 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %q, align 8
  %12 = load %struct._object*, %struct._object** %q, align 8
  %cmp12 = icmp eq %struct._object* %12, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp15, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %15, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %18(%struct._object* %19)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %20 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp26, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %22, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %25(%struct._object* %26)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %call37 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call37, %struct._object** %r, align 8
  %27 = load %struct._object*, %struct._object** %r, align 8
  %cmp38 = icmp eq %struct._object* %27, null
  br i1 %cmp38, label %if.then.39, label %if.end.73

if.then.39:                                       ; preds = %if.end.36
  br label %do.body.40

do.body.40:                                       ; preds = %if.then.39
  %28 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp41, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %30, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %33(%struct._object* %34)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %35 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp52, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %37, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %40(%struct._object* %41)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  br label %do.body.62

do.body.62:                                       ; preds = %do.end.61
  %42 = load %struct._object*, %struct._object** %q, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp63, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %44, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.67, label %if.else.68

if.then.67:                                       ; preds = %do.body.62
  br label %if.end.71

if.else.68:                                       ; preds = %do.body.62
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type69 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type69, align 8
  %tp_dealloc70 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc70, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %47(%struct._object* %48)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.68, %if.then.67
  br label %do.end.72

do.end.72:                                        ; preds = %if.end.71
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.73:                                        ; preds = %if.end.36
  %49 = load %struct._object*, %struct._object** %q, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyDecObject*
  %dec74 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %50, i32 0, i32 2
  %51 = load %struct._object*, %struct._object** %r, align 8
  %52 = bitcast %struct._object* %51 to %struct.PyDecObject*
  %dec75 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %52, i32 0, i32 2
  %53 = load %struct._object*, %struct._object** %a, align 8
  %54 = bitcast %struct._object* %53 to %struct.PyDecObject*
  %dec76 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %54, i32 0, i32 2
  %55 = load %struct._object*, %struct._object** %b, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyDecObject*
  %dec77 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %56, i32 0, i32 2
  %57 = load %struct._object*, %struct._object** %context.addr, align 8
  %58 = bitcast %struct._object* %57 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %58, i32 0, i32 1
  call void @mpd_qdivmod(%struct.mpd_t* %dec74, %struct.mpd_t* %dec75, %struct.mpd_t* %dec76, %struct.mpd_t* %dec77, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.78

do.body.78:                                       ; preds = %if.end.73
  %59 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp79, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_refcnt80 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt80, align 8
  %dec81 = add i64 %61, -1
  store i64 %dec81, i64* %ob_refcnt80, align 8
  %cmp82 = icmp ne i64 %dec81, 0
  br i1 %cmp82, label %if.then.83, label %if.else.84

if.then.83:                                       ; preds = %do.body.78
  br label %if.end.87

if.else.84:                                       ; preds = %do.body.78
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_type85 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type85, align 8
  %tp_dealloc86 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc86, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  call void %64(%struct._object* %65)
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.84, %if.then.83
  br label %do.end.88

do.end.88:                                        ; preds = %if.end.87
  br label %do.body.89

do.body.89:                                       ; preds = %do.end.88
  %66 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %66, %struct._object** %_py_decref_tmp90, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_refcnt91 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt91, align 8
  %dec92 = add i64 %68, -1
  store i64 %dec92, i64* %ob_refcnt91, align 8
  %cmp93 = icmp ne i64 %dec92, 0
  br i1 %cmp93, label %if.then.94, label %if.else.95

if.then.94:                                       ; preds = %do.body.89
  br label %if.end.98

if.else.95:                                       ; preds = %do.body.89
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_type96 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type96, align 8
  %tp_dealloc97 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc97, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  call void %71(%struct._object* %72)
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.95, %if.then.94
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  %73 = load %struct._object*, %struct._object** %context.addr, align 8
  %74 = load i32, i32* %status, align 4
  %call100 = call i32 @dec_addstatus(%struct._object* %73, i32 %74)
  %tobool101 = icmp ne i32 %call100, 0
  br i1 %tobool101, label %if.then.102, label %if.end.125

if.then.102:                                      ; preds = %do.end.99
  br label %do.body.103

do.body.103:                                      ; preds = %if.then.102
  %75 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %75, %struct._object** %_py_decref_tmp104, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_refcnt105 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0
  %77 = load i64, i64* %ob_refcnt105, align 8
  %dec106 = add i64 %77, -1
  store i64 %dec106, i64* %ob_refcnt105, align 8
  %cmp107 = icmp ne i64 %dec106, 0
  br i1 %cmp107, label %if.then.108, label %if.else.109

if.then.108:                                      ; preds = %do.body.103
  br label %if.end.112

if.else.109:                                      ; preds = %do.body.103
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_type110 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type110, align 8
  %tp_dealloc111 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc111, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  call void %80(%struct._object* %81)
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.109, %if.then.108
  br label %do.end.113

do.end.113:                                       ; preds = %if.end.112
  br label %do.body.114

do.body.114:                                      ; preds = %do.end.113
  %82 = load %struct._object*, %struct._object** %q, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp115, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt116, align 8
  %dec117 = add i64 %84, -1
  store i64 %dec117, i64* %ob_refcnt116, align 8
  %cmp118 = icmp ne i64 %dec117, 0
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %do.body.114
  br label %if.end.123

if.else.120:                                      ; preds = %do.body.114
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_type121 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type121, align 8
  %tp_dealloc122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc122, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  call void %87(%struct._object* %88)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.120, %if.then.119
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.125:                                       ; preds = %do.end.99
  %89 = load %struct._object*, %struct._object** %q, align 8
  %90 = load %struct._object*, %struct._object** %r, align 8
  %call126 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.33, i32 0, i32 0), %struct._object* %89, %struct._object* %90)
  store %struct._object* %call126, %struct._object** %ret, align 8
  br label %do.body.127

do.body.127:                                      ; preds = %if.end.125
  %91 = load %struct._object*, %struct._object** %r, align 8
  store %struct._object* %91, %struct._object** %_py_decref_tmp128, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  %ob_refcnt129 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0
  %93 = load i64, i64* %ob_refcnt129, align 8
  %dec130 = add i64 %93, -1
  store i64 %dec130, i64* %ob_refcnt129, align 8
  %cmp131 = icmp ne i64 %dec130, 0
  br i1 %cmp131, label %if.then.132, label %if.else.133

if.then.132:                                      ; preds = %do.body.127
  br label %if.end.136

if.else.133:                                      ; preds = %do.body.127
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  %ob_type134 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type134, align 8
  %tp_dealloc135 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc135, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp128, align 8
  call void %96(%struct._object* %97)
  br label %if.end.136

if.end.136:                                       ; preds = %if.else.133, %if.then.132
  br label %do.end.137

do.end.137:                                       ; preds = %if.end.136
  br label %do.body.138

do.body.138:                                      ; preds = %do.end.137
  %98 = load %struct._object*, %struct._object** %q, align 8
  store %struct._object* %98, %struct._object** %_py_decref_tmp139, align 8
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_refcnt140 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0
  %100 = load i64, i64* %ob_refcnt140, align 8
  %dec141 = add i64 %100, -1
  store i64 %dec141, i64* %ob_refcnt140, align 8
  %cmp142 = icmp ne i64 %dec141, 0
  br i1 %cmp142, label %if.then.143, label %if.else.144

if.then.143:                                      ; preds = %do.body.138
  br label %if.end.147

if.else.144:                                      ; preds = %do.body.138
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  %ob_type145 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type145, align 8
  %tp_dealloc146 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc146, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp139, align 8
  call void %103(%struct._object* %104)
  br label %if.end.147

if.end.147:                                       ; preds = %if.else.144, %if.then.143
  br label %do.end.148

do.end.148:                                       ; preds = %if.end.147
  %105 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %105, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.148, %do.end.124, %do.end.72, %do.end.35, %do.end, %if.then.3, %if.then
  %106 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %106
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qmax(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qmax(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qmax_mag(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qmax_mag(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qmin(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qmin(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qmin_mag(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qmin_mag(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qmul(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qmul(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qnext_toward(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qnext_toward(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qquantize(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qquantize(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qrem(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qrem(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qrem_near(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qrem_near(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qsub(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qsub(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qpow(%struct._object* %context, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %base = alloca %struct._object*, align 8
  %exp = alloca %struct._object*, align 8
  %mod = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %c = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  %_py_decref_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp55 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  %_py_decref_tmp94 = alloca %struct._object*, align 8
  %_py_decref_tmp106 = alloca %struct._object*, align 8
  %_py_decref_tmp117 = alloca %struct._object*, align 8
  %_py_decref_tmp131 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %mod, align 8
  store %struct._object* null, %struct._object** %c, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.123, i32 0, i32 0), i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @ctx_mpd_qpow.kwlist, i32 0, i32 0), %struct._object** %base, %struct._object** %exp, %struct._object** %mod)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %base, align 8
  %3 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %2, %struct._object* %3)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %exp, align 8
  %5 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %4, %struct._object* %5)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %13 = load %struct._object*, %struct._object** %mod, align 8
  %cmp11 = icmp ne %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp11, label %if.then.12, label %if.end.39

if.then.12:                                       ; preds = %if.end.10
  %14 = load %struct._object*, %struct._object** %mod, align 8
  %15 = load %struct._object*, %struct._object** %context.addr, align 8
  %call13 = call i32 @convert_op(i32 1, %struct._object** %c, %struct._object* %14, %struct._object* %15)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end.38, label %if.then.15

if.then.15:                                       ; preds = %if.then.12
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  %16 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp17, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %18, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %21(%struct._object* %22)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %23 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp28, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %25, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.27
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %28(%struct._object* %29)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  %30 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %30, %struct._object** %retval
  br label %return

if.end.38:                                        ; preds = %if.then.12
  br label %if.end.39

if.end.39:                                        ; preds = %if.end.38, %if.end.10
  %call40 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call40, %struct._object** %result, align 8
  %31 = load %struct._object*, %struct._object** %result, align 8
  %cmp41 = icmp eq %struct._object* %31, null
  br i1 %cmp41, label %if.then.42, label %if.end.81

if.then.42:                                       ; preds = %if.end.39
  br label %do.body.43

do.body.43:                                       ; preds = %if.then.42
  %32 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp44, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt45, align 8
  %dec46 = add i64 %34, -1
  store i64 %dec46, i64* %ob_refcnt45, align 8
  %cmp47 = icmp ne i64 %dec46, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.43
  br label %if.end.52

if.else.49:                                       ; preds = %do.body.43
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %tp_dealloc51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc51, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  call void %37(%struct._object* %38)
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.49, %if.then.48
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  br label %do.body.54

do.body.54:                                       ; preds = %do.end.53
  %39 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %39, %struct._object** %_py_decref_tmp55, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0
  %41 = load i64, i64* %ob_refcnt56, align 8
  %dec57 = add i64 %41, -1
  store i64 %dec57, i64* %ob_refcnt56, align 8
  %cmp58 = icmp ne i64 %dec57, 0
  br i1 %cmp58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.54
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.54
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp55, align 8
  call void %44(%struct._object* %45)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  br label %do.body.65

do.body.65:                                       ; preds = %do.end.64
  %46 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %46, %struct._object** %_py_xdecref_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp66 = icmp ne %struct._object* %47, null
  br i1 %cmp66, label %if.then.67, label %if.end.79

if.then.67:                                       ; preds = %do.body.65
  br label %do.body.68

do.body.68:                                       ; preds = %if.then.67
  %48 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp69, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %50, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.68
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.68
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %53(%struct._object* %54)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  br label %if.end.79

if.end.79:                                        ; preds = %do.end.78, %do.body.65
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.81:                                        ; preds = %if.end.39
  %55 = load %struct._object*, %struct._object** %c, align 8
  %cmp82 = icmp eq %struct._object* %55, null
  br i1 %cmp82, label %if.then.83, label %if.else.87

if.then.83:                                       ; preds = %if.end.81
  %56 = load %struct._object*, %struct._object** %result, align 8
  %57 = bitcast %struct._object* %56 to %struct.PyDecObject*
  %dec84 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %57, i32 0, i32 2
  %58 = load %struct._object*, %struct._object** %a, align 8
  %59 = bitcast %struct._object* %58 to %struct.PyDecObject*
  %dec85 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %59, i32 0, i32 2
  %60 = load %struct._object*, %struct._object** %b, align 8
  %61 = bitcast %struct._object* %60 to %struct.PyDecObject*
  %dec86 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %61, i32 0, i32 2
  %62 = load %struct._object*, %struct._object** %context.addr, align 8
  %63 = bitcast %struct._object* %62 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %63, i32 0, i32 1
  call void @mpd_qpow(%struct.mpd_t* %dec84, %struct.mpd_t* %dec85, %struct.mpd_t* %dec86, %struct.mpd_context_t* %ctx, i32* %status)
  br label %if.end.104

if.else.87:                                       ; preds = %if.end.81
  %64 = load %struct._object*, %struct._object** %result, align 8
  %65 = bitcast %struct._object* %64 to %struct.PyDecObject*
  %dec88 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %65, i32 0, i32 2
  %66 = load %struct._object*, %struct._object** %a, align 8
  %67 = bitcast %struct._object* %66 to %struct.PyDecObject*
  %dec89 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %67, i32 0, i32 2
  %68 = load %struct._object*, %struct._object** %b, align 8
  %69 = bitcast %struct._object* %68 to %struct.PyDecObject*
  %dec90 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %69, i32 0, i32 2
  %70 = load %struct._object*, %struct._object** %c, align 8
  %71 = bitcast %struct._object* %70 to %struct.PyDecObject*
  %dec91 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %71, i32 0, i32 2
  %72 = load %struct._object*, %struct._object** %context.addr, align 8
  %73 = bitcast %struct._object* %72 to %struct.PyDecContextObject*
  %ctx92 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %73, i32 0, i32 1
  call void @mpd_qpowmod(%struct.mpd_t* %dec88, %struct.mpd_t* %dec89, %struct.mpd_t* %dec90, %struct.mpd_t* %dec91, %struct.mpd_context_t* %ctx92, i32* %status)
  br label %do.body.93

do.body.93:                                       ; preds = %if.else.87
  %74 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %74, %struct._object** %_py_decref_tmp94, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_refcnt95 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt95, align 8
  %dec96 = add i64 %76, -1
  store i64 %dec96, i64* %ob_refcnt95, align 8
  %cmp97 = icmp ne i64 %dec96, 0
  br i1 %cmp97, label %if.then.98, label %if.else.99

if.then.98:                                       ; preds = %do.body.93
  br label %if.end.102

if.else.99:                                       ; preds = %do.body.93
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_type100 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type100, align 8
  %tp_dealloc101 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 4
  %79 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc101, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  call void %79(%struct._object* %80)
  br label %if.end.102

if.end.102:                                       ; preds = %if.else.99, %if.then.98
  br label %do.end.103

do.end.103:                                       ; preds = %if.end.102
  br label %if.end.104

if.end.104:                                       ; preds = %do.end.103, %if.then.83
  br label %do.body.105

do.body.105:                                      ; preds = %if.end.104
  %81 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %81, %struct._object** %_py_decref_tmp106, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  %ob_refcnt107 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt107, align 8
  %dec108 = add i64 %83, -1
  store i64 %dec108, i64* %ob_refcnt107, align 8
  %cmp109 = icmp ne i64 %dec108, 0
  br i1 %cmp109, label %if.then.110, label %if.else.111

if.then.110:                                      ; preds = %do.body.105
  br label %if.end.114

if.else.111:                                      ; preds = %do.body.105
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  %ob_type112 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type112, align 8
  %tp_dealloc113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 4
  %86 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc113, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp106, align 8
  call void %86(%struct._object* %87)
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.111, %if.then.110
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  br label %do.body.116

do.body.116:                                      ; preds = %do.end.115
  %88 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %88, %struct._object** %_py_decref_tmp117, align 8
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8
  %ob_refcnt118 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 0
  %90 = load i64, i64* %ob_refcnt118, align 8
  %dec119 = add i64 %90, -1
  store i64 %dec119, i64* %ob_refcnt118, align 8
  %cmp120 = icmp ne i64 %dec119, 0
  br i1 %cmp120, label %if.then.121, label %if.else.122

if.then.121:                                      ; preds = %do.body.116
  br label %if.end.125

if.else.122:                                      ; preds = %do.body.116
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8
  %ob_type123 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 1
  %92 = load %struct._typeobject*, %struct._typeobject** %ob_type123, align 8
  %tp_dealloc124 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %92, i32 0, i32 4
  %93 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc124, align 8
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp117, align 8
  call void %93(%struct._object* %94)
  br label %if.end.125

if.end.125:                                       ; preds = %if.else.122, %if.then.121
  br label %do.end.126

do.end.126:                                       ; preds = %if.end.125
  %95 = load %struct._object*, %struct._object** %context.addr, align 8
  %96 = load i32, i32* %status, align 4
  %call127 = call i32 @dec_addstatus(%struct._object* %95, i32 %96)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.then.129, label %if.end.141

if.then.129:                                      ; preds = %do.end.126
  br label %do.body.130

do.body.130:                                      ; preds = %if.then.129
  %97 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %97, %struct._object** %_py_decref_tmp131, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  %ob_refcnt132 = getelementptr inbounds %struct._object, %struct._object* %98, i32 0, i32 0
  %99 = load i64, i64* %ob_refcnt132, align 8
  %dec133 = add i64 %99, -1
  store i64 %dec133, i64* %ob_refcnt132, align 8
  %cmp134 = icmp ne i64 %dec133, 0
  br i1 %cmp134, label %if.then.135, label %if.else.136

if.then.135:                                      ; preds = %do.body.130
  br label %if.end.139

if.else.136:                                      ; preds = %do.body.130
  %100 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  %ob_type137 = getelementptr inbounds %struct._object, %struct._object* %100, i32 0, i32 1
  %101 = load %struct._typeobject*, %struct._typeobject** %ob_type137, align 8
  %tp_dealloc138 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %101, i32 0, i32 4
  %102 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc138, align 8
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp131, align 8
  call void %102(%struct._object* %103)
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.136, %if.then.135
  br label %do.end.140

do.end.140:                                       ; preds = %if.end.139
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.141:                                       ; preds = %do.end.126
  %104 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %104, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.141, %do.end.140, %do.end.80, %do.end.37, %do.end, %if.then.3, %if.then
  %105 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %105
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qfma(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %c = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp79 = alloca %struct._object*, align 8
  %_py_decref_tmp90 = alloca %struct._object*, align 8
  %_py_decref_tmp101 = alloca %struct._object*, align 8
  %_py_decref_tmp115 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.198, i32 0, i32 0), %struct._object** %v, %struct._object** %w, %struct._object** %x)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %12 = load %struct._object*, %struct._object** %x, align 8
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %call11 = call i32 @convert_op(i32 1, %struct._object** %c, %struct._object* %12, %struct._object* %13)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.end.36, label %if.then.13

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp15, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %16, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %19(%struct._object* %20)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %21 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp26, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %23, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %26(%struct._object* %27)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %call37 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call37, %struct._object** %result, align 8
  %cmp38 = icmp eq %struct._object* %call37, null
  br i1 %cmp38, label %if.then.39, label %if.end.73

if.then.39:                                       ; preds = %if.end.36
  br label %do.body.40

do.body.40:                                       ; preds = %if.then.39
  %28 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp41, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %30, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %33(%struct._object* %34)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %35 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp52, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %37, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %40(%struct._object* %41)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  br label %do.body.62

do.body.62:                                       ; preds = %do.end.61
  %42 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp63, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %44, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.67, label %if.else.68

if.then.67:                                       ; preds = %do.body.62
  br label %if.end.71

if.else.68:                                       ; preds = %do.body.62
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type69 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type69, align 8
  %tp_dealloc70 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc70, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %47(%struct._object* %48)
  br label %if.end.71

if.end.71:                                        ; preds = %if.else.68, %if.then.67
  br label %do.end.72

do.end.72:                                        ; preds = %if.end.71
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.73:                                        ; preds = %if.end.36
  %49 = load %struct._object*, %struct._object** %result, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyDecObject*
  %dec74 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %50, i32 0, i32 2
  %51 = load %struct._object*, %struct._object** %a, align 8
  %52 = bitcast %struct._object* %51 to %struct.PyDecObject*
  %dec75 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %52, i32 0, i32 2
  %53 = load %struct._object*, %struct._object** %b, align 8
  %54 = bitcast %struct._object* %53 to %struct.PyDecObject*
  %dec76 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %54, i32 0, i32 2
  %55 = load %struct._object*, %struct._object** %c, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyDecObject*
  %dec77 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %56, i32 0, i32 2
  %57 = load %struct._object*, %struct._object** %context.addr, align 8
  %58 = bitcast %struct._object* %57 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %58, i32 0, i32 1
  call void @mpd_qfma(%struct.mpd_t* %dec74, %struct.mpd_t* %dec75, %struct.mpd_t* %dec76, %struct.mpd_t* %dec77, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.78

do.body.78:                                       ; preds = %if.end.73
  %59 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp79, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_refcnt80 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt80, align 8
  %dec81 = add i64 %61, -1
  store i64 %dec81, i64* %ob_refcnt80, align 8
  %cmp82 = icmp ne i64 %dec81, 0
  br i1 %cmp82, label %if.then.83, label %if.else.84

if.then.83:                                       ; preds = %do.body.78
  br label %if.end.87

if.else.84:                                       ; preds = %do.body.78
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_type85 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type85, align 8
  %tp_dealloc86 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc86, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  call void %64(%struct._object* %65)
  br label %if.end.87

if.end.87:                                        ; preds = %if.else.84, %if.then.83
  br label %do.end.88

do.end.88:                                        ; preds = %if.end.87
  br label %do.body.89

do.body.89:                                       ; preds = %do.end.88
  %66 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %66, %struct._object** %_py_decref_tmp90, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_refcnt91 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt91, align 8
  %dec92 = add i64 %68, -1
  store i64 %dec92, i64* %ob_refcnt91, align 8
  %cmp93 = icmp ne i64 %dec92, 0
  br i1 %cmp93, label %if.then.94, label %if.else.95

if.then.94:                                       ; preds = %do.body.89
  br label %if.end.98

if.else.95:                                       ; preds = %do.body.89
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  %ob_type96 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type96, align 8
  %tp_dealloc97 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc97, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp90, align 8
  call void %71(%struct._object* %72)
  br label %if.end.98

if.end.98:                                        ; preds = %if.else.95, %if.then.94
  br label %do.end.99

do.end.99:                                        ; preds = %if.end.98
  br label %do.body.100

do.body.100:                                      ; preds = %do.end.99
  %73 = load %struct._object*, %struct._object** %c, align 8
  store %struct._object* %73, %struct._object** %_py_decref_tmp101, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp101, align 8
  %ob_refcnt102 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0
  %75 = load i64, i64* %ob_refcnt102, align 8
  %dec103 = add i64 %75, -1
  store i64 %dec103, i64* %ob_refcnt102, align 8
  %cmp104 = icmp ne i64 %dec103, 0
  br i1 %cmp104, label %if.then.105, label %if.else.106

if.then.105:                                      ; preds = %do.body.100
  br label %if.end.109

if.else.106:                                      ; preds = %do.body.100
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp101, align 8
  %ob_type107 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type107, align 8
  %tp_dealloc108 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc108, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp101, align 8
  call void %78(%struct._object* %79)
  br label %if.end.109

if.end.109:                                       ; preds = %if.else.106, %if.then.105
  br label %do.end.110

do.end.110:                                       ; preds = %if.end.109
  %80 = load %struct._object*, %struct._object** %context.addr, align 8
  %81 = load i32, i32* %status, align 4
  %call111 = call i32 @dec_addstatus(%struct._object* %80, i32 %81)
  %tobool112 = icmp ne i32 %call111, 0
  br i1 %tobool112, label %if.then.113, label %if.end.125

if.then.113:                                      ; preds = %do.end.110
  br label %do.body.114

do.body.114:                                      ; preds = %if.then.113
  %82 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp115, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt116, align 8
  %dec117 = add i64 %84, -1
  store i64 %dec117, i64* %ob_refcnt116, align 8
  %cmp118 = icmp ne i64 %dec117, 0
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %do.body.114
  br label %if.end.123

if.else.120:                                      ; preds = %do.body.114
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_type121 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type121, align 8
  %tp_dealloc122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc122, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  call void %87(%struct._object* %88)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.120, %if.then.119
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.125:                                       ; preds = %do.end.110
  %89 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %89, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.125, %do.end.124, %do.end.72, %do.end.35, %do.end, %if.then.3, %if.then
  %90 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %90
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getetiny(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %call = call i64 @mpd_etiny(%struct.mpd_context_t* %ctx)
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getetop(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %call = call i64 @mpd_etop(%struct.mpd_context_t* %ctx)
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_radix(%struct._object* %context, %struct._object* %dummy) #0 {
entry:
  %context.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %context.addr, align 8
  %1 = load %struct._object*, %struct._object** %dummy.addr, align 8
  %call = call %struct._object* @dec_mpd_radix(%struct._object* %0, %struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_iscanonical(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDec_Type
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDec_Type)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.199, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %5 = load %struct._object*, %struct._object** %v.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %6, i32 0, i32 2
  %call2 = call i32 @mpd_iscanonical(%struct.mpd_t* %dec)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call4 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call5 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call4, %cond.true ], [ %call5, %cond.false ]
  store %struct._object* %cond, %struct._object** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_isfinite(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call1 = call i32 @mpd_isfinite(%struct.mpd_t* %dec)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %11 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_isinfinite(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call1 = call i32 @mpd_isinfinite(%struct.mpd_t* %dec)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %11 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_isnan(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call1 = call i32 @mpd_isnan(%struct.mpd_t* %dec)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %11 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_isnormal(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %5, i32 0, i32 1
  %call1 = call i32 @mpd_isnormal(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %8, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %13 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_isqnan(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call1 = call i32 @mpd_isqnan(%struct.mpd_t* %dec)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %11 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_issigned(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call1 = call i32 @mpd_issigned(%struct.mpd_t* %dec)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %11 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_issnan(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call1 = call i32 @mpd_issnan(%struct.mpd_t* %dec)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %11 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_issubnormal(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %5, i32 0, i32 1
  %call1 = call i32 @mpd_issubnormal(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %8, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %13 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_iszero(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %call1 = call i32 @mpd_iszero(%struct.mpd_t* %dec)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %ret, align 8
  br label %do.body

do.body:                                          ; preds = %cond.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %6, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec5, 0
  br i1 %cmp, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  %11 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecContext_Apply(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call %struct._object* @dec_apply(%struct._object* %2, %struct._object* %3)
  store %struct._object* %call1, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end.3

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end.3
  %11 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %12 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %12
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_canonical(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDec_Type
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDec_Type)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.199, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %5 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %7 = load %struct._object*, %struct._object** %v.addr, align 8
  store %struct._object* %7, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qcopy_abs(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %2 = load %struct._object*, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %result, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %12 = load %struct._object*, %struct._object** %a, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %13, i32 0, i32 2
  %call9 = call i32 @mpd_qcopy_abs(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, i32* %status)
  br label %do.body.10

do.body.10:                                       ; preds = %if.end.6
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp11, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %16, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %19(%struct._object* %20)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  %21 = load %struct._object*, %struct._object** %context.addr, align 8
  %22 = load i32, i32* %status, align 4
  %call21 = call i32 @dec_addstatus(%struct._object* %21, i32 %22)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.35

if.then.23:                                       ; preds = %do.end.20
  br label %do.body.24

do.body.24:                                       ; preds = %if.then.23
  %23 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp25, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %25, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body.24
  br label %if.end.33

if.else.30:                                       ; preds = %do.body.24
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc32, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %28(%struct._object* %29)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end.34

do.end.34:                                        ; preds = %if.end.33
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.35:                                        ; preds = %do.end.20
  %30 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %30, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.35, %do.end.34, %do.end, %if.then
  %31 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %31
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_copy_decimal(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %result, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qcopy_negate(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %2 = load %struct._object*, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %3 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %10 = load %struct._object*, %struct._object** %result, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %12 = load %struct._object*, %struct._object** %a, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %13, i32 0, i32 2
  %call9 = call i32 @mpd_qcopy_negate(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, i32* %status)
  br label %do.body.10

do.body.10:                                       ; preds = %if.end.6
  %14 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp11, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %16, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %19(%struct._object* %20)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  %21 = load %struct._object*, %struct._object** %context.addr, align 8
  %22 = load i32, i32* %status, align 4
  %call21 = call i32 @dec_addstatus(%struct._object* %21, i32 %22)
  %tobool22 = icmp ne i32 %call21, 0
  br i1 %tobool22, label %if.then.23, label %if.end.35

if.then.23:                                       ; preds = %do.end.20
  br label %do.body.24

do.body.24:                                       ; preds = %if.then.23
  %23 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp25, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %25, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body.24
  br label %if.end.33

if.else.30:                                       ; preds = %do.body.24
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc32, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %28(%struct._object* %29)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end.34

do.end.34:                                        ; preds = %if.end.33
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.35:                                        ; preds = %do.end.20
  %30 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %30, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.35, %do.end.34, %do.end, %if.then
  %31 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %31
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qlogb(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qlogb(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qinvert(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call1, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %call1, null
  br i1 %cmp, label %if.then.2, label %if.end.6

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %2 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %result, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecObject*
  %dec7 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %a, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %context.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %14, i32 0, i32 1
  call void @mpd_qinvert(%struct.mpd_t* %dec7, %struct.mpd_t* %dec8, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.9

do.body.9:                                        ; preds = %if.end.6
  %15 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp10, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_refcnt11 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt11, align 8
  %dec12 = add i64 %17, -1
  store i64 %dec12, i64* %ob_refcnt11, align 8
  %cmp13 = icmp ne i64 %dec12, 0
  br i1 %cmp13, label %if.then.14, label %if.else.15

if.then.14:                                       ; preds = %do.body.9
  br label %if.end.18

if.else.15:                                       ; preds = %do.body.9
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  %ob_type16 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type16, align 8
  %tp_dealloc17 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc17, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp10, align 8
  call void %20(%struct._object* %21)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else.15, %if.then.14
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  %22 = load %struct._object*, %struct._object** %context.addr, align 8
  %23 = load i32, i32* %status, align 4
  %call20 = call i32 @dec_addstatus(%struct._object* %22, i32 %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.34

if.then.22:                                       ; preds = %do.end.19
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp24, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %26, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %29(%struct._object* %30)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %do.end.19
  %31 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.34, %do.end.33, %do.end, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_class(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %cp = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %5, i32 0, i32 1
  %call1 = call i8* @mpd_class(%struct.mpd_t* %dec, %struct.mpd_context_t* %ctx)
  store i8* %call1, i8** %cp, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec2 = add i64 %8, -1
  store i64 %dec2, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec2, 0
  br i1 %cmp, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %13 = load i8*, i8** %cp, align 8
  %call5 = call %struct._object* @PyUnicode_FromString(i8* %13)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %14 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %14
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_to_sci(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %5, i32 0, i32 4
  %6 = load i32, i32* %capitals, align 4
  %call1 = call i64 @mpd_to_sci_size(i8** %s, %struct.mpd_t* %dec, i32 %6)
  store i64 %call1, i64* %size, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec2 = add i64 %9, -1
  store i64 %dec2, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec2, 0
  br i1 %cmp, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %14 = load i64, i64* %size, align 8
  %cmp5 = icmp slt i64 %14, 0
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %do.end
  %call7 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %do.end
  %15 = load i8*, i8** %s, align 8
  %16 = load i64, i64* %size, align 8
  %call9 = call %struct._object* @unicode_fromascii(i8* %15, i64 %16)
  store %struct._object* %call9, %struct._object** %result, align 8
  %17 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %18 = load i8*, i8** %s, align 8
  call void %17(i8* %18)
  %19 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.6, %if.then
  %20 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %20
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_to_eng(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %size = alloca i64, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %0, %struct._object* %1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %a, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %5, i32 0, i32 4
  %6 = load i32, i32* %capitals, align 4
  %call1 = call i64 @mpd_to_eng_size(i8** %s, %struct.mpd_t* %dec, i32 %6)
  store i64 %call1, i64* %size, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec2 = add i64 %9, -1
  store i64 %dec2, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec2, 0
  br i1 %cmp, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body
  br label %if.end.4

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.4

if.end.4:                                         ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end.4
  %14 = load i64, i64* %size, align 8
  %cmp5 = icmp slt i64 %14, 0
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %do.end
  %call7 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %do.end
  %15 = load i8*, i8** %s, align 8
  %16 = load i64, i64* %size, align 8
  %call9 = call %struct._object* @unicode_fromascii(i8* %15, i64 %16)
  store %struct._object* %call9, %struct._object** %result, align 8
  %17 = load void (i8*)*, void (i8*)** @mpd_free, align 8
  %18 = load i8*, i8** %s, align 8
  call void %17(i8* %18)
  %19 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %19, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.6, %if.then
  %20 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %20
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_compare_total(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %call40 = call i32 @mpd_compare_total(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39)
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.36
  %32 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp42, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %34, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %37(%struct._object* %38)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %do.body.52

do.body.52:                                       ; preds = %do.end.51
  %39 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %39, %struct._object** %_py_decref_tmp53, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0
  %41 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %41, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %44(%struct._object* %45)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  %46 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %46, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.62, %do.end.35, %do.end, %if.then.3, %if.then
  %47 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %47
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_compare_total_mag(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %call40 = call i32 @mpd_compare_total_mag(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39)
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.36
  %32 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp42, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %34, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %37(%struct._object* %38)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %do.body.52

do.body.52:                                       ; preds = %do.end.51
  %39 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %39, %struct._object** %_py_decref_tmp53, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0
  %41 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %41, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %44(%struct._object* %45)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  %46 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %46, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.62, %do.end.35, %do.end, %if.then.3, %if.then
  %47 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %47
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qcopy_sign(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp42 = alloca %struct._object*, align 8
  %_py_decref_tmp53 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %12 = load %struct._object*, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %12, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %13 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp15, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %15, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %18(%struct._object* %19)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %20 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp26, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %22, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %25(%struct._object* %26)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %27 = load %struct._object*, %struct._object** %result, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %28, i32 0, i32 2
  %29 = load %struct._object*, %struct._object** %a, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %30, i32 0, i32 2
  %31 = load %struct._object*, %struct._object** %b, align 8
  %32 = bitcast %struct._object* %31 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %32, i32 0, i32 2
  %call40 = call i32 @mpd_qcopy_sign(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, i32* %status)
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.36
  %33 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %33, %struct._object** %_py_decref_tmp42, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_refcnt43 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt43, align 8
  %dec44 = add i64 %35, -1
  store i64 %dec44, i64* %ob_refcnt43, align 8
  %cmp45 = icmp ne i64 %dec44, 0
  br i1 %cmp45, label %if.then.46, label %if.else.47

if.then.46:                                       ; preds = %do.body.41
  br label %if.end.50

if.else.47:                                       ; preds = %do.body.41
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  %ob_type48 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type48, align 8
  %tp_dealloc49 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc49, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp42, align 8
  call void %38(%struct._object* %39)
  br label %if.end.50

if.end.50:                                        ; preds = %if.else.47, %if.then.46
  br label %do.end.51

do.end.51:                                        ; preds = %if.end.50
  br label %do.body.52

do.body.52:                                       ; preds = %do.end.51
  %40 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp53, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_refcnt54 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt54, align 8
  %dec55 = add i64 %42, -1
  store i64 %dec55, i64* %ob_refcnt54, align 8
  %cmp56 = icmp ne i64 %dec55, 0
  br i1 %cmp56, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.52
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.52
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp53, align 8
  call void %45(%struct._object* %46)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  %47 = load %struct._object*, %struct._object** %context.addr, align 8
  %48 = load i32, i32* %status, align 4
  %call63 = call i32 @dec_addstatus(%struct._object* %47, i32 %48)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.then.65, label %if.end.77

if.then.65:                                       ; preds = %do.end.62
  br label %do.body.66

do.body.66:                                       ; preds = %if.then.65
  %49 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp67, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %51, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %54(%struct._object* %55)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.77:                                        ; preds = %do.end.62
  %56 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %56, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.77, %do.end.76, %do.end.35, %do.end, %if.then.3, %if.then
  %57 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %57
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qand(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qand(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qor(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qor(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qxor(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qxor(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qrotate(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qrotate(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_same_quantum(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %12 = load %struct._object*, %struct._object** %a, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecObject*
  %dec11 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %13, i32 0, i32 2
  %14 = load %struct._object*, %struct._object** %b, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDecObject*
  %dec12 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %15, i32 0, i32 2
  %call13 = call i32 @mpd_same_quantum(%struct.mpd_t* %dec11, %struct.mpd_t* %dec12)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.10
  %call15 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end.10
  %call16 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call15, %cond.true ], [ %call16, %cond.false ]
  store %struct._object* %cond, %struct._object** %result, align 8
  br label %do.body.17

do.body.17:                                       ; preds = %cond.end
  %16 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp18, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %18, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %21(%struct._object* %22)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %do.body.28

do.body.28:                                       ; preds = %do.end.27
  %23 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp29, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt30, align 8
  %dec31 = add i64 %25, -1
  store i64 %dec31, i64* %ob_refcnt30, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.28
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.28
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  call void %28(%struct._object* %29)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  %30 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %30, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.38, %do.end, %if.then.3, %if.then
  %31 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %31
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qscaleb(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qscaleb(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_mpd_qshift(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %a = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_decref_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.194, i32 0, i32 0), %struct._object** %v, %struct._object** %w)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call i32 @convert_op(i32 1, %struct._object** %a, %struct._object* %1, %struct._object* %2)
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %w, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call5 = call i32 @convert_op(i32 1, %struct._object** %b, %struct._object* %3, %struct._object* %4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %5 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %call11 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call11, %struct._object** %result, align 8
  %cmp12 = icmp eq %struct._object* %call11, null
  br i1 %cmp12, label %if.then.13, label %if.end.36

if.then.13:                                       ; preds = %if.end.10
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %12 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp15, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %14, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %17(%struct._object* %18)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %19 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp26, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt27, align 8
  %dec28 = add i64 %21, -1
  store i64 %dec28, i64* %ob_refcnt27, align 8
  %cmp29 = icmp ne i64 %dec28, 0
  br i1 %cmp29, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.25
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.25
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp26, align 8
  call void %24(%struct._object* %25)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.10
  %26 = load %struct._object*, %struct._object** %result, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecObject*
  %dec37 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %a, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyDecObject*
  %dec38 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %29, i32 0, i32 2
  %30 = load %struct._object*, %struct._object** %b, align 8
  %31 = bitcast %struct._object* %30 to %struct.PyDecObject*
  %dec39 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %31, i32 0, i32 2
  %32 = load %struct._object*, %struct._object** %context.addr, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %33, i32 0, i32 1
  call void @mpd_qshift(%struct.mpd_t* %dec37, %struct.mpd_t* %dec38, %struct.mpd_t* %dec39, %struct.mpd_context_t* %ctx, i32* %status)
  br label %do.body.40

do.body.40:                                       ; preds = %if.end.36
  %34 = load %struct._object*, %struct._object** %a, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp41, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %36, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %39(%struct._object* %40)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %41 = load %struct._object*, %struct._object** %b, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp52, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %43, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.56, label %if.else.57

if.then.56:                                       ; preds = %do.body.51
  br label %if.end.60

if.else.57:                                       ; preds = %do.body.51
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type58 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type58, align 8
  %tp_dealloc59 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc59, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %46(%struct._object* %47)
  br label %if.end.60

if.end.60:                                        ; preds = %if.else.57, %if.then.56
  br label %do.end.61

do.end.61:                                        ; preds = %if.end.60
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %49 = load i32, i32* %status, align 4
  %call62 = call i32 @dec_addstatus(%struct._object* %48, i32 %49)
  %tobool63 = icmp ne i32 %call62, 0
  br i1 %tobool63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %50 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp66, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %52, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %55(%struct._object* %56)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.61
  %57 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %57, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.35, %do.end, %if.then.3, %if.then
  %58 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %58
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_clear_flags(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 4
  store i32 0, i32* %status, align 4
  %2 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  ret %struct._object* @_Py_NoneStruct
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_clear_traps(%struct._object* %self, %struct._object* %dummy) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %dummy.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %dummy, %struct._object** %dummy.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %traps = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 3
  store i32 0, i32* %traps, align 4
  %2 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  ret %struct._object* @_Py_NoneStruct
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_reduce(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %flags = alloca %struct._object*, align 8
  %traps = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  %_py_decref_tmp24 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  store %struct.mpd_context_t* %ctx1, %struct.mpd_context_t** %ctx, align 8
  %2 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %2, i32 0, i32 4
  %3 = load i32, i32* %status, align 4
  %call = call %struct._object* @signals_as_list(i32 %3)
  store %struct._object* %call, %struct._object** %flags, align 8
  %4 = load %struct._object*, %struct._object** %flags, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %traps2 = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %5, i32 0, i32 3
  %6 = load i32, i32* %traps2, align 4
  %call3 = call %struct._object* @signals_as_list(i32 %6)
  store %struct._object* %call3, %struct._object** %traps, align 8
  %7 = load %struct._object*, %struct._object** %traps, align 8
  %cmp4 = icmp eq %struct._object* %7, null
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %8 = load %struct._object*, %struct._object** %flags, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %15 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %17 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %17, i32 0, i32 0
  %18 = load i64, i64* %prec, align 8
  %19 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %round = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %19, i32 0, i32 6
  %20 = load i32, i32* %round, align 4
  %idxprom = sext i32 %20 to i64
  %arrayidx = getelementptr [9 x i8*], [9 x i8*]* @mpd_round_string, i32 0, i64 %idxprom
  %21 = load i8*, i8** %arrayidx, align 8
  %22 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %emin = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %22, i32 0, i32 2
  %23 = load i64, i64* %emin, align 8
  %24 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %emax = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %24, i32 0, i32 1
  %25 = load i64, i64* %emax, align 8
  %26 = load %struct._object*, %struct._object** %self.addr, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %27, i32 0, i32 4
  %28 = load i32, i32* %capitals, align 4
  %29 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %29, i32 0, i32 7
  %30 = load i32, i32* %clamp, align 4
  %31 = load %struct._object*, %struct._object** %flags, align 8
  %32 = load %struct._object*, %struct._object** %traps, align 8
  %call11 = call %struct._object* (i8*, ...) @Py_BuildValue(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.200, i32 0, i32 0), %struct._typeobject* %16, i64 %18, i8* %21, i64 %23, i64 %25, i32 %28, i32 %30, %struct._object* %31, %struct._object* %32)
  store %struct._object* %call11, %struct._object** %ret, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.end.9
  %33 = load %struct._object*, %struct._object** %flags, align 8
  store %struct._object* %33, %struct._object** %_py_decref_tmp13, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %35, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %38(%struct._object* %39)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %do.body.23

do.body.23:                                       ; preds = %do.end.22
  %40 = load %struct._object*, %struct._object** %traps, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp24, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt25, align 8
  %dec26 = add i64 %42, -1
  store i64 %dec26, i64* %ob_refcnt25, align 8
  %cmp27 = icmp ne i64 %dec26, 0
  br i1 %cmp27, label %if.then.28, label %if.else.29

if.then.28:                                       ; preds = %do.body.23
  br label %if.end.32

if.else.29:                                       ; preds = %do.body.23
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_dealloc31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc31, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp24, align 8
  call void %45(%struct._object* %46)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.29, %if.then.28
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  %47 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %47, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.33, %do.end, %if.then
  %48 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %48
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_create_decimal(%struct._object* %context, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* null, %struct._object** %v, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @PyArg_ParseTuple(%struct._object* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), %struct._object** %v)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call %struct._object* @PyDec_FromObject(%struct._object* %1, %struct._object* %2)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctx_from_float(%struct._object* %context, %struct._object* %v) #0 {
entry:
  %context.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call %struct._object* @PyDecType_FromFloat(%struct._typeobject* @PyDec_Type, %struct._object* %0, %struct._object* %1)
  ret %struct._object* %call
}

declare hidden i64 @mpd_etiny(%struct.mpd_context_t*) #1

declare hidden i64 @mpd_etop(%struct.mpd_context_t*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @dec_apply(%struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call, %struct._object** %result, align 8
  %0 = load %struct._object*, %struct._object** %result, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %result, align 8
  %2 = bitcast %struct._object* %1 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %2, i32 0, i32 2
  %3 = load %struct._object*, %struct._object** %v.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %4, i32 0, i32 2
  %call2 = call i32 @mpd_qcopy(%struct.mpd_t* %dec, %struct.mpd_t* %dec1, i32* %status)
  %5 = load %struct._object*, %struct._object** %context.addr, align 8
  %6 = load i32, i32* %status, align 4
  %call3 = call i32 @dec_addstatus(%struct._object* %5, i32 %6)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.4
  %7 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec5 = add i64 %9, -1
  store i64 %dec5, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec5, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %14 = load %struct._object*, %struct._object** %result, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyDecObject*
  %dec10 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %15, i32 0, i32 2
  %16 = load %struct._object*, %struct._object** %context.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %17, i32 0, i32 1
  call void @mpd_qfinalize(%struct.mpd_t* %dec10, %struct.mpd_context_t* %ctx, i32* %status)
  %18 = load %struct._object*, %struct._object** %context.addr, align 8
  %19 = load i32, i32* %status, align 4
  %call11 = call i32 @dec_addstatus(%struct._object* %18, i32 %19)
  %tobool12 = icmp ne i32 %call11, 0
  br i1 %tobool12, label %if.then.13, label %if.end.25

if.then.13:                                       ; preds = %if.end.9
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.13
  %20 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp15, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %22, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %25(%struct._object* %26)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.9
  %27 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %27, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.25, %do.end.24, %do.end, %if.then
  %28 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %28
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @signals_as_list(i32 %flags) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %flags.addr = alloca i32, align 4
  %list = alloca %struct._object*, align 8
  %cm = alloca %struct.DecCondMap*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %call = call %struct._object* @PyList_New(i64 0)
  store %struct._object* %call, %struct._object** %list, align 8
  %0 = load %struct._object*, %struct._object** %list, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  store %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i32 0), %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %1, i32 0, i32 0
  %2 = load i8*, i8** %name, align 8
  %cmp1 = icmp ne i8* %2, null
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %flags.addr, align 4
  %4 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %4, i32 0, i32 2
  %5 = load i32, i32* %flag, align 4
  %and = and i32 %3, %5
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.end.10

if.then.2:                                        ; preds = %for.body
  %6 = load %struct._object*, %struct._object** %list, align 8
  %7 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %7, i32 0, i32 3
  %8 = load %struct._object*, %struct._object** %ex, align 8
  %call3 = call i32 @PyList_Append(%struct._object* %6, %struct._object* %8)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.9

if.then.5:                                        ; preds = %if.then.2
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %9 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %11, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.then.2
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.10
  %16 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %16, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %17 = load %struct._object*, %struct._object** %list, align 8
  store %struct._object* %17, %struct._object** %retval
  br label %return

return:                                           ; preds = %for.end, %do.end, %if.then
  %18 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %18
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_FromObject(%struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call %struct._object* @PyDecType_FromSsize(%struct._typeobject* @PyDec_Type, i64 0, %struct._object* %1)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %3, @PyDec_Type
  br i1 %cmp1, label %if.then.4, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %4 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %call3 = call i32 @PyType_IsSubtype(%struct._typeobject* %5, %struct._typeobject* @PyDec_Type)
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.then.4, label %if.else.23

if.then.4:                                        ; preds = %lor.lhs.false, %if.else
  %6 = load %struct._object*, %struct._object** %context.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDecContextObject*
  %ctx5 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %7, i32 0, i32 1
  store %struct.mpd_context_t* %ctx5, %struct.mpd_context_t** %ctx, align 8
  %8 = load %struct._object*, %struct._object** %v.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyDecObject*
  %dec = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %9, i32 0, i32 2
  %call6 = call i32 @mpd_isnan(%struct.mpd_t* %dec)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %land.lhs.true, label %if.end.21

land.lhs.true:                                    ; preds = %if.then.4
  %10 = load %struct._object*, %struct._object** %v.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyDecObject*
  %dec8 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %11, i32 0, i32 2
  %digits = getelementptr inbounds %struct.mpd_t, %struct.mpd_t* %dec8, i32 0, i32 2
  %12 = load i64, i64* %digits, align 8
  %13 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %prec = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %13, i32 0, i32 0
  %14 = load i64, i64* %prec, align 8
  %15 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %clamp = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %15, i32 0, i32 7
  %16 = load i32, i32* %clamp, align 4
  %conv = sext i32 %16 to i64
  %sub = sub i64 %14, %conv
  %cmp9 = icmp sgt i64 %12, %sub
  br i1 %cmp9, label %if.then.11, label %if.end.21

if.then.11:                                       ; preds = %land.lhs.true
  %17 = load %struct._object*, %struct._object** %context.addr, align 8
  %call12 = call i32 @dec_addstatus(%struct._object* %17, i32 2)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.end

if.then.14:                                       ; preds = %if.then.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.11
  %call15 = call %struct._object* @PyDecType_New(%struct._typeobject* @PyDec_Type)
  store %struct._object* %call15, %struct._object** %result, align 8
  %18 = load %struct._object*, %struct._object** %result, align 8
  %cmp16 = icmp eq %struct._object* %18, null
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %if.end
  %19 = load %struct._object*, %struct._object** %result, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyDecObject*
  %dec20 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %20, i32 0, i32 2
  call void @mpd_setspecial(%struct.mpd_t* %dec20, i8 zeroext 0, i8 zeroext 4)
  %21 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %21, %struct._object** %retval
  br label %return

if.end.21:                                        ; preds = %land.lhs.true, %if.then.4
  %22 = load %struct._object*, %struct._object** %v.addr, align 8
  %23 = load %struct._object*, %struct._object** %context.addr, align 8
  %call22 = call %struct._object* @dec_apply(%struct._object* %22, %struct._object* %23)
  store %struct._object* %call22, %struct._object** %retval
  br label %return

if.else.23:                                       ; preds = %lor.lhs.false
  %24 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 19
  %26 = load i64, i64* %tp_flags, align 8
  %and = and i64 %26, 268435456
  %cmp25 = icmp ne i64 %and, 0
  br i1 %cmp25, label %if.then.27, label %if.else.29

if.then.27:                                       ; preds = %if.else.23
  %27 = load %struct._object*, %struct._object** %v.addr, align 8
  %28 = load %struct._object*, %struct._object** %context.addr, align 8
  %call28 = call %struct._object* @PyDecType_FromUnicode(%struct._typeobject* @PyDec_Type, %struct._object* %27, %struct._object* %28)
  store %struct._object* %call28, %struct._object** %retval
  br label %return

if.else.29:                                       ; preds = %if.else.23
  %29 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_flags31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 19
  %31 = load i64, i64* %tp_flags31, align 8
  %and32 = and i64 %31, 16777216
  %cmp33 = icmp ne i64 %and32, 0
  br i1 %cmp33, label %if.then.35, label %if.else.37

if.then.35:                                       ; preds = %if.else.29
  %32 = load %struct._object*, %struct._object** %v.addr, align 8
  %33 = load %struct._object*, %struct._object** %context.addr, align 8
  %call36 = call %struct._object* @PyDecType_FromLong(%struct._typeobject* @PyDec_Type, %struct._object* %32, %struct._object* %33)
  store %struct._object* %call36, %struct._object** %retval
  br label %return

if.else.37:                                       ; preds = %if.else.29
  %34 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_flags39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 19
  %36 = load i64, i64* %tp_flags39, align 8
  %and40 = and i64 %36, 67108864
  %cmp41 = icmp ne i64 %and40, 0
  br i1 %cmp41, label %if.then.49, label %lor.lhs.false.43

lor.lhs.false.43:                                 ; preds = %if.else.37
  %37 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8
  %tp_flags45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 19
  %39 = load i64, i64* %tp_flags45, align 8
  %and46 = and i64 %39, 33554432
  %cmp47 = icmp ne i64 %and46, 0
  br i1 %cmp47, label %if.then.49, label %if.else.51

if.then.49:                                       ; preds = %lor.lhs.false.43, %if.else.37
  %40 = load %struct._object*, %struct._object** %v.addr, align 8
  %41 = load %struct._object*, %struct._object** %context.addr, align 8
  %call50 = call %struct._object* @PyDecType_FromSequence(%struct._typeobject* @PyDec_Type, %struct._object* %40, %struct._object* %41)
  store %struct._object* %call50, %struct._object** %retval
  br label %return

if.else.51:                                       ; preds = %lor.lhs.false.43
  %42 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %cmp53 = icmp eq %struct._typeobject* %43, @PyFloat_Type
  br i1 %cmp53, label %if.then.59, label %lor.lhs.false.55

lor.lhs.false.55:                                 ; preds = %if.else.51
  %44 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type56 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type56, align 8
  %call57 = call i32 @PyType_IsSubtype(%struct._typeobject* %45, %struct._typeobject* @PyFloat_Type)
  %tobool58 = icmp ne i32 %call57, 0
  br i1 %tobool58, label %if.then.59, label %if.else.65

if.then.59:                                       ; preds = %lor.lhs.false.55, %if.else.51
  %46 = load %struct._object*, %struct._object** %context.addr, align 8
  %call60 = call i32 @dec_addstatus(%struct._object* %46, i32 1024)
  %tobool61 = icmp ne i32 %call60, 0
  br i1 %tobool61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.then.59
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.63:                                        ; preds = %if.then.59
  %47 = load %struct._object*, %struct._object** %v.addr, align 8
  %48 = load %struct._object*, %struct._object** %context.addr, align 8
  %call64 = call %struct._object* @PyDecType_FromFloat(%struct._typeobject* @PyDec_Type, %struct._object* %47, %struct._object* %48)
  store %struct._object* %call64, %struct._object** %retval
  br label %return

if.else.65:                                       ; preds = %lor.lhs.false.55
  %49 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %50 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 1
  %52 = load i8*, i8** %tp_name, align 8
  %call67 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %49, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.31, i32 0, i32 0), i8* %52)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else.65, %if.end.63, %if.then.62, %if.then.49, %if.then.35, %if.then.27, %if.end.21, %if.end.19, %if.then.18, %if.then.14, %if.then
  %53 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %53
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromSsize(%struct._typeobject* %type, i64 %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca i64, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i64 %v, i64* %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* %0)
  store %struct._object* %call, %struct._object** %dec, align 8
  %1 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dec, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load i64, i64* %v.addr, align 8
  %5 = load %struct._object*, %struct._object** %context.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 1
  call void @mpd_qset_ssize(%struct.mpd_t* %dec1, i64 %4, %struct.mpd_context_t* %ctx, i32* %status)
  %7 = load %struct._object*, %struct._object** %context.addr, align 8
  %8 = load i32, i32* %status, align 4
  %call2 = call i32 @dec_addstatus(%struct._object* %7, i32 %8)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %9 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec4 = add i64 %11, -1
  store i64 %dec4, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec4, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %16 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %do.end, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromUnicode(%struct._typeobject* %type, %struct._object* %u, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %u.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %s = alloca i8*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %u, %struct._object** %u.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %u.addr, align 8
  %call = call i8* @numeric_as_ascii(%struct._object* %0, i32 0)
  store i8* %call, i8** %s, align 8
  %1 = load i8*, i8** %s, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %3 = load i8*, i8** %s, align 8
  %4 = load %struct._object*, %struct._object** %context.addr, align 8
  %call1 = call %struct._object* @PyDecType_FromCString(%struct._typeobject* %2, i8* %3, %struct._object* %4)
  store %struct._object* %call1, %struct._object** %dec, align 8
  %5 = load i8*, i8** %s, align 8
  call void @PyMem_Free(i8* %5)
  %6 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromLong(%struct._typeobject* %type, %struct._object* %pylong, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %pylong.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %pylong, %struct._object** %pylong.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %pylong.addr, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  %call = call %struct._object* @dec_from_long(%struct._typeobject* %0, %struct._object* %1, %struct.mpd_context_t* %ctx, i32* %status)
  store %struct._object* %call, %struct._object** %dec, align 8
  %4 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %context.addr, align 8
  %6 = load i32, i32* %status, align 4
  %call1 = call i32 @dec_addstatus(%struct._object* %5, i32 %6)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.2
  %7 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec3 = add i64 %9, -1
  store i64 %dec3, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec3, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %14 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %14, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.7, %do.end, %if.then
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromSequence(%struct._typeobject* %type, %struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dectuple = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %s = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %call = call %struct._object* @sequence_as_tuple(%struct._object* %0, %struct._object* %1, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.142, i32 0, i32 0))
  store %struct._object* %call, %struct._object** %dectuple, align 8
  %2 = load %struct._object*, %struct._object** %dectuple, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %dectuple, align 8
  %call1 = call i8* @dectuple_as_str(%struct._object* %3)
  store i8* %call1, i8** %s, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %dectuple, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec2 = add i64 %6, -1
  store i64 %dec2, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec2, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body
  br label %if.end.5

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.5

if.end.5:                                         ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end.5
  %11 = load i8*, i8** %s, align 8
  %cmp6 = icmp eq i8* %11, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %do.end
  %12 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %13 = load i8*, i8** %s, align 8
  %14 = load %struct._object*, %struct._object** %context.addr, align 8
  %call9 = call %struct._object* @PyDecType_FromCString(%struct._typeobject* %12, i8* %13, %struct._object* %14)
  store %struct._object* %call9, %struct._object** %dec, align 8
  %15 = load i8*, i8** %s, align 8
  call void @PyMem_Free(i8* %15)
  %16 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.7, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromFloat(%struct._typeobject* %type, %struct._object* %v, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %v.addr = alloca %struct._object*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %v.addr, align 8
  %2 = load %struct._object*, %struct._object** %context.addr, align 8
  %call = call %struct._object* @PyDecType_FromFloatExact(%struct._typeobject* %0, %struct._object* %1, %struct._object* %2)
  store %struct._object* %call, %struct._object** %dec, align 8
  %3 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %dec, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %context.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %7, i32 0, i32 1
  call void @mpd_qfinalize(%struct.mpd_t* %dec1, %struct.mpd_context_t* %ctx, i32* %status)
  %8 = load %struct._object*, %struct._object** %context.addr, align 8
  %9 = load i32, i32* %status, align 4
  %call2 = call i32 @dec_addstatus(%struct._object* %8, i32 %9)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %10 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec4 = add i64 %12, -1
  store i64 %dec4, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec4, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %17 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %17, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %do.end, %if.then
  %18 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %18
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDecType_FromCString(%struct._typeobject* %type, i8* %s, %struct._object* %context) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %s.addr = alloca i8*, align 8
  %context.addr = alloca %struct._object*, align 8
  %dec = alloca %struct._object*, align 8
  %status = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store i8* %s, i8** %s.addr, align 8
  store %struct._object* %context, %struct._object** %context.addr, align 8
  store i32 0, i32* %status, align 4
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call = call %struct._object* @PyDecType_New(%struct._typeobject* %0)
  store %struct._object* %call, %struct._object** %dec, align 8
  %1 = load %struct._object*, %struct._object** %dec, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %dec, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecObject*
  %dec1 = getelementptr inbounds %struct.PyDecObject, %struct.PyDecObject* %3, i32 0, i32 2
  %4 = load i8*, i8** %s.addr, align 8
  %5 = load %struct._object*, %struct._object** %context.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 1
  call void @mpd_qset_string(%struct.mpd_t* %dec1, i8* %4, %struct.mpd_context_t* %ctx, i32* %status)
  %7 = load %struct._object*, %struct._object** %context.addr, align 8
  %8 = load i32, i32* %status, align 4
  %call2 = call i32 @dec_addstatus(%struct._object* %7, i32 %8)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.then.3, label %if.end.8

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %9 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %dec4 = add i64 %11, -1
  store i64 %dec4, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec4, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %14(%struct._object* %15)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %16 = load %struct._object*, %struct._object** %dec, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.8, %do.end, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getprec(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %call = call i64 @mpd_getprec(%struct.mpd_context_t* %ctx)
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setprec(%struct._object* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %x = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i64 @PyLong_AsSsize_t(%struct._object* %0)
  store i64 %call, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx2 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  store %struct.mpd_context_t* %ctx2, %struct.mpd_context_t** %ctx, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %5 = load i64, i64* %x, align 8
  %call3 = call i32 @mpd_qsetprec(%struct.mpd_context_t* %4, i64 %5)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end.7, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %call6 = call i32 @value_error_int(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.206, i32 0, i32 0))
  store i32 %call6, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.5, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getemax(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %call = call i64 @mpd_getemax(%struct.mpd_context_t* %ctx)
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setemax(%struct._object* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %x = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i64 @PyLong_AsSsize_t(%struct._object* %0)
  store i64 %call, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx2 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  store %struct.mpd_context_t* %ctx2, %struct.mpd_context_t** %ctx, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %5 = load i64, i64* %x, align 8
  %call3 = call i32 @mpd_qsetemax(%struct.mpd_context_t* %4, i64 %5)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end.7, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %call6 = call i32 @value_error_int(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.207, i32 0, i32 0))
  store i32 %call6, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.5, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getemin(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %call = call i64 @mpd_getemin(%struct.mpd_context_t* %ctx)
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %call)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setemin(%struct._object* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %x = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i64 @PyLong_AsSsize_t(%struct._object* %0)
  store i64 %call, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx2 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  store %struct.mpd_context_t* %ctx2, %struct.mpd_context_t** %ctx, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %5 = load i64, i64* %x, align 8
  %call3 = call i32 @mpd_qsetemin(%struct.mpd_context_t* %4, i64 %5)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.end.7, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %call6 = call i32 @value_error_int(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.208, i32 0, i32 0))
  store i32 %call6, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.5, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getround(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %call = call i32 @mpd_getround(%struct.mpd_context_t* %ctx)
  store i32 %call, i32* %i, align 4
  %2 = load i32, i32* %i, align 4
  %idxprom = sext i32 %2 to i64
  %arrayidx = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom
  %3 = load %struct._object*, %struct._object** %arrayidx, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %arrayidx2 = getelementptr [8 x %struct._object*], [8 x %struct._object*]* @round_map, i32 0, i64 %idxprom1
  %6 = load %struct._object*, %struct._object** %arrayidx2, align 8
  ret %struct._object* %6
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setround(%struct._object* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %x = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @getround(%struct._object* %0)
  store i32 %call, i32* %x, align 4
  %1 = load i32, i32* %x, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  store %struct.mpd_context_t* %ctx1, %struct.mpd_context_t** %ctx, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %5 = load i32, i32* %x, align 4
  %call2 = call i32 @mpd_qsetround(%struct.mpd_context_t* %4, i32 %5)
  %tobool = icmp ne i32 %call2, 0
  br i1 %tobool, label %if.end.5, label %if.then.3

if.then.3:                                        ; preds = %if.end
  %call4 = call i32 @runtime_error_int(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.209, i32 0, i32 0))
  store i32 %call4, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.3, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getcapitals(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 4
  %2 = load i32, i32* %capitals, align 4
  %conv = sext i32 %2 to i64
  %call = call %struct._object* @PyLong_FromLong(i64 %conv)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setcapitals(%struct._object* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %x = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i64 @PyLong_AsSsize_t(%struct._object* %0)
  store i64 %call, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %x, align 8
  %cmp2 = icmp ne i64 %2, 0
  br i1 %cmp2, label %land.lhs.true.3, label %if.end.7

land.lhs.true.3:                                  ; preds = %if.end
  %3 = load i64, i64* %x, align 8
  %cmp4 = icmp ne i64 %3, 1
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %land.lhs.true.3
  %call6 = call i32 @value_error_int(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.210, i32 0, i32 0))
  store i32 %call6, i32* %retval
  br label %return

if.end.7:                                         ; preds = %land.lhs.true.3, %if.end
  %4 = load i64, i64* %x, align 8
  %conv = trunc i64 %4 to i32
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %capitals = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 4
  store i32 %conv, i32* %capitals, align 4
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.5, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @context_getclamp(%struct._object* %self, i8* %closure) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %1, i32 0, i32 1
  %call = call i32 @mpd_getclamp(%struct.mpd_context_t* %ctx)
  %conv = sext i32 %call to i64
  %call1 = call %struct._object* @PyLong_FromSsize_t(i64 %conv)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setclamp(%struct._object* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %x = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i64 @PyLong_AsSsize_t(%struct._object* %0)
  store i64 %call, i64* %x, align 8
  %1 = load i64, i64* %x, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load i64, i64* %x, align 8
  %cmp2 = icmp slt i64 %2, -2147483648
  br i1 %cmp2, label %cond.true, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i64, i64* %x, align 8
  %cmp3 = icmp slt i64 2147483647, %3
  br i1 %cmp3, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.lhs.false, %if.end
  br label %cond.end

cond.false:                                       ; preds = %lor.lhs.false
  %4 = load i64, i64* %x, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 2147483647, %cond.true ], [ %4, %cond.false ]
  store i64 %cond, i64* %x, align 8
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecContextObject*
  %ctx4 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %6, i32 0, i32 1
  store %struct.mpd_context_t* %ctx4, %struct.mpd_context_t** %ctx, align 8
  %7 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %8 = load i64, i64* %x, align 8
  %conv = trunc i64 %8 to i32
  %call5 = call i32 @mpd_qsetclamp(%struct.mpd_context_t* %7, i32 %conv)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.end.9, label %if.then.7

if.then.7:                                        ; preds = %cond.end
  %call8 = call i32 @value_error_int(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.211, i32 0, i32 0))
  store i32 %call8, i32* %retval
  br label %return

if.end.9:                                         ; preds = %cond.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.9, %if.then.7, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

declare hidden i64 @mpd_getprec(%struct.mpd_context_t*) #1

declare hidden i32 @mpd_qsetprec(%struct.mpd_context_t*, i64) #1

; Function Attrs: nounwind uwtable
define internal i32 @value_error_int(i8* %mesg) #0 {
entry:
  %mesg.addr = alloca i8*, align 8
  store i8* %mesg, i8** %mesg.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %1 = load i8*, i8** %mesg.addr, align 8
  call void @PyErr_SetString(%struct._object* %0, i8* %1)
  ret i32 -1
}

declare hidden i64 @mpd_getemax(%struct.mpd_context_t*) #1

declare hidden i32 @mpd_qsetemax(%struct.mpd_context_t*, i64) #1

declare hidden i64 @mpd_getemin(%struct.mpd_context_t*) #1

declare hidden i32 @mpd_qsetemin(%struct.mpd_context_t*, i64) #1

declare hidden i32 @mpd_getround(%struct.mpd_context_t*) #1

declare hidden i32 @mpd_getclamp(%struct.mpd_context_t*) #1

declare hidden i32 @mpd_qsetclamp(%struct.mpd_context_t*, i32) #1

; Function Attrs: nounwind uwtable
define internal i32 @context_settraps_list(%struct._object* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %flags = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @list_as_flags(%struct._object* %0)
  store i32 %call, i32* %flags, align 4
  %1 = load i32, i32* %flags, align 4
  %and = and i32 %1, 98304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  store %struct.mpd_context_t* %ctx1, %struct.mpd_context_t** %ctx, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %5 = load i32, i32* %flags, align 4
  %call2 = call i32 @mpd_qsettraps(%struct.mpd_context_t* %4, i32 %5)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end.6, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %call5 = call i32 @runtime_error_int(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.213, i32 0, i32 0))
  store i32 %call5, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.4, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i32 @context_setstatus_list(%struct._object* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %ctx = alloca %struct.mpd_context_t*, align 8
  %flags = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @list_as_flags(%struct._object* %0)
  store i32 %call, i32* %flags, align 4
  %1 = load i32, i32* %flags, align 4
  %and = and i32 %1, 98304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecContextObject*
  %ctx1 = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %3, i32 0, i32 1
  store %struct.mpd_context_t* %ctx1, %struct.mpd_context_t** %ctx, align 8
  %4 = load %struct.mpd_context_t*, %struct.mpd_context_t** %ctx, align 8
  %5 = load i32, i32* %flags, align 4
  %call2 = call i32 @mpd_qsetstatus(%struct.mpd_context_t* %4, i32 %5)
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end.6, label %if.then.4

if.then.4:                                        ; preds = %if.end
  %call5 = call i32 @runtime_error_int(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.215, i32 0, i32 0))
  store i32 %call5, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.6, %if.then.4, %if.then
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i32 @list_as_flags(%struct._object* %list) #0 {
entry:
  %retval = alloca i32, align 4
  %list.addr = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %flags = alloca i32, align 4
  %x = alloca i32, align 4
  %n = alloca i64, align 8
  %j = alloca i64, align 8
  store %struct._object* %list, %struct._object** %list.addr, align 8
  %0 = load %struct._object*, %struct._object** %list.addr, align 8
  %call = call i64 @PyList_Size(%struct._object* %0)
  store i64 %call, i64* %n, align 8
  store i32 0, i32* %flags, align 4
  store i64 0, i64* %j, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i64, i64* %j, align 8
  %2 = load i64, i64* %n, align 8
  %cmp = icmp slt i64 %1, %2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load %struct._object*, %struct._object** %list.addr, align 8
  %4 = load i64, i64* %j, align 8
  %call1 = call %struct._object* @PyList_GetItem(%struct._object* %3, i64 %4)
  store %struct._object* %call1, %struct._object** %item, align 8
  %5 = load %struct._object*, %struct._object** %item, align 8
  %call2 = call i32 @exception_as_flag(%struct._object* %5)
  store i32 %call2, i32* %x, align 4
  %6 = load i32, i32* %x, align 4
  %and = and i32 %6, 98304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %7 = load i32, i32* %x, align 4
  store i32 %7, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %8 = load i32, i32* %x, align 4
  %9 = load i32, i32* %flags, align 4
  %or = or i32 %9, %8
  store i32 %or, i32* %flags, align 4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %10 = load i64, i64* %j, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %j, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i32, i32* %flags, align 4
  store i32 %11, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

declare i64 @PyList_Size(%struct._object*) #1

declare %struct._object* @PyList_GetItem(%struct._object*, i64) #1

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @exception_as_flag(%struct._object* %ex) #2 {
entry:
  %retval = alloca i32, align 4
  %ex.addr = alloca %struct._object*, align 8
  %cm = alloca %struct.DecCondMap*, align 8
  store %struct._object* %ex, %struct._object** %ex.addr, align 8
  store %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i32 0), %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %0, i32 0, i32 0
  %1 = load i8*, i8** %name, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex1 = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %2, i32 0, i32 3
  %3 = load %struct._object*, %struct._object** %ex1, align 8
  %4 = load %struct._object*, %struct._object** %ex.addr, align 8
  %cmp2 = icmp eq %struct._object* %3, %4
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %5 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %5, i32 0, i32 2
  %6 = load i32, i32* %flag, align 4
  store i32 %6, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %7, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %8 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %9 = load i8*, i8** @invalid_signals_err, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* %9)
  store i32 32768, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define internal void @ctxmanager_dealloc(%struct.PyDecContextManagerObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyDecContextManagerObject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp7 = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  store %struct.PyDecContextManagerObject* %self, %struct.PyDecContextManagerObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self.addr, align 8
  %local = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %0, i32 0, i32 1
  %1 = load %struct._object*, %struct._object** %local, align 8
  store %struct._object* %1, %struct._object** %_py_xdecref_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %3 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body.1
  br label %if.end

if.else:                                          ; preds = %do.body.1
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %do.body
  br label %do.end.5

do.end.5:                                         ; preds = %if.end.4
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.5
  %10 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self.addr, align 8
  %global = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %10, i32 0, i32 2
  %11 = load %struct._object*, %struct._object** %global, align 8
  store %struct._object* %11, %struct._object** %_py_xdecref_tmp7, align 8
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  %cmp8 = icmp ne %struct._object* %12, null
  br i1 %cmp8, label %if.then.9, label %if.end.21

if.then.9:                                        ; preds = %do.body.6
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.9
  %13 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp11, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %15, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %18(%struct._object* %19)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %if.end.21

if.end.21:                                        ; preds = %do.end.20, %do.body.6
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  %20 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self.addr, align 8
  %21 = bitcast %struct.PyDecContextManagerObject* %20 to i8*
  call void @PyObject_Free(i8* %21)
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctxmanager_set_local(%struct.PyDecContextManagerObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDecContextManagerObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDecContextManagerObject* %self, %struct.PyDecContextManagerObject** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self.addr, align 8
  %local = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %0, i32 0, i32 1
  %1 = load %struct._object*, %struct._object** %local, align 8
  %call = call %struct._object* @PyDec_SetCurrentContext(%struct._object* null, %struct._object* %1)
  store %struct._object* %call, %struct._object** %ret, align 8
  %2 = load %struct._object*, %struct._object** %ret, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp1 = icmp ne i64 %dec, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end.3

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end.3
  %10 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self.addr, align 8
  %local4 = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %10, i32 0, i32 1
  %11 = load %struct._object*, %struct._object** %local4, align 8
  %ob_refcnt5 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt5, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %ob_refcnt5, align 8
  %13 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self.addr, align 8
  %local6 = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %13, i32 0, i32 1
  %14 = load %struct._object*, %struct._object** %local6, align 8
  store %struct._object* %14, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctxmanager_restore_global(%struct.PyDecContextManagerObject* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyDecContextManagerObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %ret = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyDecContextManagerObject* %self, %struct.PyDecContextManagerObject** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self.addr, align 8
  %global = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %0, i32 0, i32 2
  %1 = load %struct._object*, %struct._object** %global, align 8
  %call = call %struct._object* @PyDec_SetCurrentContext(%struct._object* null, %struct._object* %1)
  store %struct._object* %call, %struct._object** %ret, align 8
  %2 = load %struct._object*, %struct._object** %ret, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %ret, align 8
  store %struct._object* %3, %struct._object** %_py_decref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp1 = icmp ne i64 %dec, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end.3

if.else:                                          ; preds = %do.body
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 4
  %8 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %8(%struct._object* %9)
  br label %if.end.3

if.end.3:                                         ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end.3
  %10 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_SetCurrentContext(%struct._object* %self, %struct._object* %v) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyDecContext_Type
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* @PyDecContext_Type)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.30, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %call2 = call %struct._object* @PyThreadState_GetDict()
  store %struct._object* %call2, %struct._object** %dict, align 8
  %5 = load %struct._object*, %struct._object** %dict, align 8
  %cmp3 = icmp eq %struct._object* %5, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  %6 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.29, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %v.addr, align 8
  %8 = load %struct._object*, %struct._object** @default_context_template, align 8
  %cmp6 = icmp eq %struct._object* %7, %8
  br i1 %cmp6, label %if.then.11, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %if.end.5
  %9 = load %struct._object*, %struct._object** %v.addr, align 8
  %10 = load %struct._object*, %struct._object** @basic_context_template, align 8
  %cmp8 = icmp eq %struct._object* %9, %10
  br i1 %cmp8, label %if.then.11, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false.7
  %11 = load %struct._object*, %struct._object** %v.addr, align 8
  %12 = load %struct._object*, %struct._object** @extended_context_template, align 8
  %cmp10 = icmp eq %struct._object* %11, %12
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %lor.lhs.false.9, %lor.lhs.false.7, %if.end.5
  %13 = load %struct._object*, %struct._object** %v.addr, align 8
  %call12 = call %struct._object* @context_copy(%struct._object* %13, %struct._object* null)
  store %struct._object* %call12, %struct._object** %v.addr, align 8
  %14 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp13 = icmp eq %struct._object* %14, null
  br i1 %cmp13, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.then.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.15:                                        ; preds = %if.then.11
  %15 = load %struct._object*, %struct._object** %v.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyDecContextObject*
  %ctx = getelementptr inbounds %struct.PyDecContextObject, %struct.PyDecContextObject* %16, i32 0, i32 1
  %status = getelementptr inbounds %struct.mpd_context_t, %struct.mpd_context_t* %ctx, i32 0, i32 4
  store i32 0, i32* %status, align 4
  br label %if.end.16

if.else:                                          ; preds = %lor.lhs.false.9
  %17 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.16

if.end.16:                                        ; preds = %if.else, %if.end.15
  store %struct.PyDecContextObject* null, %struct.PyDecContextObject** @cached_context, align 8
  %19 = load %struct._object*, %struct._object** %dict, align 8
  %20 = load %struct._object*, %struct._object** @tls_context_key, align 8
  %21 = load %struct._object*, %struct._object** %v.addr, align 8
  %call17 = call i32 @PyDict_SetItem(%struct._object* %19, %struct._object* %20, %struct._object* %21)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.26

if.then.19:                                       ; preds = %if.end.16
  br label %do.body

do.body:                                          ; preds = %if.then.19
  %22 = load %struct._object*, %struct._object** %v.addr, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt20, align 8
  %dec = add i64 %24, -1
  store i64 %dec, i64* %ob_refcnt20, align 8
  %cmp21 = icmp ne i64 %dec, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body
  br label %if.end.25

if.else.23:                                       ; preds = %do.body
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %27(%struct._object* %28)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end

do.end:                                           ; preds = %if.end.25
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.26:                                        ; preds = %if.end.16
  br label %do.body.27

do.body.27:                                       ; preds = %if.end.26
  %29 = load %struct._object*, %struct._object** %v.addr, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp28, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %31, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.27
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %34(%struct._object* %35)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  %36 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc38 = add i64 %36, 1
  store i64 %inc38, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.37, %do.end, %if.then.14, %if.then.4, %if.then
  %37 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %37
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @signaldict_repr(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %cm = alloca %struct.DecCondMap*, align 8
  %n = alloca [9 x i8*], align 16
  %b = alloca [9 x i8*], align 16
  %i = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i32 0), %struct.DecCondMap** %cm, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %0, i32 0, i32 0
  %1 = load i8*, i8** %name, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %fqname = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %2, i32 0, i32 1
  %3 = load i8*, i8** %fqname, align 8
  %4 = load i32, i32* %i, align 4
  %idxprom = sext i32 %4 to i64
  %arrayidx = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 %idxprom
  store i8* %3, i8** %arrayidx, align 8
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecSignalDictObject*
  %flags = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %6, i32 0, i32 1
  %7 = load i32*, i32** %flags, align 8
  %8 = load i32, i32* %7, align 4
  %9 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %9, i32 0, i32 2
  %10 = load i32, i32* %flag, align 4
  %and = and i32 %8, %10
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.220, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.221, i32 0, i32 0)
  %11 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %11 to i64
  %arrayidx2 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 %idxprom1
  store i8* %cond, i8** %arrayidx2, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %12 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %12, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  %13 = load i32, i32* %i, align 4
  %inc = add i32 %13, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arrayidx3 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 0
  %14 = load i8*, i8** %arrayidx3, align 8
  %arrayidx4 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 0
  %15 = load i8*, i8** %arrayidx4, align 8
  %arrayidx5 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 1
  %16 = load i8*, i8** %arrayidx5, align 8
  %arrayidx6 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 1
  %17 = load i8*, i8** %arrayidx6, align 8
  %arrayidx7 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 2
  %18 = load i8*, i8** %arrayidx7, align 8
  %arrayidx8 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 2
  %19 = load i8*, i8** %arrayidx8, align 8
  %arrayidx9 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 3
  %20 = load i8*, i8** %arrayidx9, align 8
  %arrayidx10 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 3
  %21 = load i8*, i8** %arrayidx10, align 8
  %arrayidx11 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 4
  %22 = load i8*, i8** %arrayidx11, align 8
  %arrayidx12 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 4
  %23 = load i8*, i8** %arrayidx12, align 8
  %arrayidx13 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 5
  %24 = load i8*, i8** %arrayidx13, align 8
  %arrayidx14 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 5
  %25 = load i8*, i8** %arrayidx14, align 8
  %arrayidx15 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 6
  %26 = load i8*, i8** %arrayidx15, align 8
  %arrayidx16 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 6
  %27 = load i8*, i8** %arrayidx16, align 8
  %arrayidx17 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 7
  %28 = load i8*, i8** %arrayidx17, align 8
  %arrayidx18 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 7
  %29 = load i8*, i8** %arrayidx18, align 8
  %arrayidx19 = getelementptr [9 x i8*], [9 x i8*]* %n, i32 0, i64 8
  %30 = load i8*, i8** %arrayidx19, align 8
  %arrayidx20 = getelementptr [9 x i8*], [9 x i8*]* %b, i32 0, i64 8
  %31 = load i8*, i8** %arrayidx20, align 8
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.222, i32 0, i32 0), i8* %14, i8* %15, i8* %16, i8* %17, i8* %18, i8* %19, i8* %20, i8* %21, i8* %22, i8* %23, i8* %24, i8* %25, i8* %26, i8* %27, i8* %28, i8* %29, i8* %30, i8* %31)
  ret %struct._object* %call
}

declare i64 @PyObject_HashNotImplemented(%struct._object*) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @signaldict_richcompare(%struct._object* %v, %struct._object* %w, i32 %op) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %res = alloca %struct._object*, align 8
  %flags12 = alloca i32, align 4
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %w, %struct._object** %w.addr, align 8
  store i32 %op, i32* %op.addr, align 4
  store %struct._object* @_Py_NotImplementedStruct, %struct._object** %res, align 8
  %0 = load i32, i32* %op.addr, align 4
  %cmp = icmp eq i32 %0, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %op.addr, align 4
  %cmp1 = icmp eq i32 %1, 3
  br i1 %cmp1, label %if.then, label %if.end.32

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** @PyDecSignalDict_Type, align 8
  %cmp2 = icmp eq %struct._typeobject* %3, %4
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %v.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct.PyDecSignalDictObject*
  %flags = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %6, i32 0, i32 1
  %7 = load i32*, i32** %flags, align 8
  %8 = load i32, i32* %7, align 4
  %9 = load %struct._object*, %struct._object** %w.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyDecSignalDictObject*
  %flags4 = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %10, i32 0, i32 1
  %11 = load i32*, i32** %flags4, align 8
  %12 = load i32, i32* %11, align 4
  %cmp5 = icmp eq i32 %8, %12
  %conv = zext i1 %cmp5 to i32
  %13 = load i32, i32* %op.addr, align 4
  %cmp6 = icmp eq i32 %13, 3
  %conv7 = zext i1 %cmp6 to i32
  %xor = xor i32 %conv, %conv7
  %tobool = icmp ne i32 %xor, 0
  %cond = select i1 %tobool, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  store %struct._object* %cond, %struct._object** %res, align 8
  br label %if.end.31

if.else:                                          ; preds = %if.then
  %14 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 19
  %16 = load i64, i64* %tp_flags, align 8
  %and = and i64 %16, 536870912
  %cmp9 = icmp ne i64 %and, 0
  br i1 %cmp9, label %if.then.11, label %if.end.30

if.then.11:                                       ; preds = %if.else
  %17 = load %struct._object*, %struct._object** %w.addr, align 8
  %call = call i32 @dict_as_flags(%struct._object* %17)
  store i32 %call, i32* %flags12, align 4
  %18 = load i32, i32* %flags12, align 4
  %and13 = and i32 %18, 98304
  %tobool14 = icmp ne i32 %and13, 0
  br i1 %tobool14, label %if.then.15, label %if.else.20

if.then.15:                                       ; preds = %if.then.11
  %19 = load i32, i32* %flags12, align 4
  %and16 = and i32 %19, 32768
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %if.then.15
  call void @PyErr_Clear()
  br label %if.end

if.else.19:                                       ; preds = %if.then.15
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then.18
  br label %if.end.29

if.else.20:                                       ; preds = %if.then.11
  %20 = load %struct._object*, %struct._object** %v.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyDecSignalDictObject*
  %flags21 = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %21, i32 0, i32 1
  %22 = load i32*, i32** %flags21, align 8
  %23 = load i32, i32* %22, align 4
  %24 = load i32, i32* %flags12, align 4
  %cmp22 = icmp eq i32 %23, %24
  %conv23 = zext i1 %cmp22 to i32
  %25 = load i32, i32* %op.addr, align 4
  %cmp24 = icmp eq i32 %25, 3
  %conv25 = zext i1 %cmp24 to i32
  %xor26 = xor i32 %conv23, %conv25
  %tobool27 = icmp ne i32 %xor26, 0
  %cond28 = select i1 %tobool27, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  store %struct._object* %cond28, %struct._object** %res, align 8
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.20, %if.end
  br label %if.end.30

if.end.30:                                        ; preds = %if.end.29, %if.else
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %if.then.3
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %lor.lhs.false
  %26 = load %struct._object*, %struct._object** %res, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %27, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %28 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %28, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.32, %if.else.19
  %29 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %29
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @signaldict_iter(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyTuple_Type, i32 0, i32 25), align 8
  %1 = load %struct._object*, %struct._object** @SignalTuple, align 8
  %call = call %struct._object* %0(%struct._object* %1)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal i32 @signaldict_init(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecSignalDictObject*
  %flags = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %1, i32 0, i32 1
  store i32* null, i32** %flags, align 8
  ret i32 0
}

declare %struct._object* @PyType_GenericNew(%struct._typeobject*, %struct._object*, %struct._object*) #1

; Function Attrs: nounwind uwtable
define internal i64 @signaldict_len(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  ret i64 9
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @signaldict_getitem(%struct._object* %self, %struct._object* %key) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %flag = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  %0 = load %struct._object*, %struct._object** %key.addr, align 8
  %call = call i32 @exception_as_flag(%struct._object* %0)
  store i32 %call, i32* %flag, align 4
  %1 = load i32, i32* %flag, align 4
  %and = and i32 %1, 98304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyDecSignalDictObject*
  %flags = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %3, i32 0, i32 1
  %4 = load i32*, i32** %flags, align 8
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* %flag, align 4
  %and1 = and i32 %5, %6
  %tobool2 = icmp ne i32 %and1, 0
  br i1 %tobool2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %call3 = call %struct._object* @incr_true()
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %call4 = call %struct._object* @incr_false()
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call3, %cond.true ], [ %call4, %cond.false ]
  store %struct._object* %cond, %struct._object** %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal i32 @signaldict_setitem(%struct._object* %self, %struct._object* %key, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %flag = alloca i32, align 4
  %x = alloca i32, align 4
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @value_error_int(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.223, i32 0, i32 0))
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %key.addr, align 8
  %call1 = call i32 @exception_as_flag(%struct._object* %1)
  store i32 %call1, i32* %flag, align 4
  %2 = load i32, i32* %flag, align 4
  %and = and i32 %2, 98304
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %value.addr, align 8
  %call4 = call i32 @PyObject_IsTrue(%struct._object* %3)
  store i32 %call4, i32* %x, align 4
  %4 = load i32, i32* %x, align 4
  %cmp5 = icmp slt i32 %4, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  store i32 -1, i32* %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %5 = load i32, i32* %x, align 4
  %cmp8 = icmp eq i32 %5, 1
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %if.end.7
  %6 = load i32, i32* %flag, align 4
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyDecSignalDictObject*
  %flags = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %8, i32 0, i32 1
  %9 = load i32*, i32** %flags, align 8
  %10 = load i32, i32* %9, align 4
  %or = or i32 %10, %6
  store i32 %or, i32* %9, align 4
  br label %if.end.12

if.else:                                          ; preds = %if.end.7
  %11 = load i32, i32* %flag, align 4
  %neg = xor i32 %11, -1
  %12 = load %struct._object*, %struct._object** %self.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyDecSignalDictObject*
  %flags10 = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %13, i32 0, i32 1
  %14 = load i32*, i32** %flags10, align 8
  %15 = load i32, i32* %14, align 4
  %and11 = and i32 %15, %neg
  store i32 %and11, i32* %14, align 4
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.9
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.6, %if.then.2, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

declare void @PyErr_Clear() #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @signaldict_copy(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyDecSignalDictObject*
  %flags = getelementptr inbounds %struct.PyDecSignalDictObject, %struct.PyDecSignalDictObject* %1, i32 0, i32 1
  %2 = load i32*, i32** %flags, align 8
  %3 = load i32, i32* %2, align 4
  %call = call %struct._object* @flags_as_dict(i32 %3)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @flags_as_dict(i32 %flags) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %flags.addr = alloca i32, align 4
  %cm = alloca %struct.DecCondMap*, align 8
  %dict = alloca %struct._object*, align 8
  %b = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %dict, align 8
  %0 = load %struct._object*, %struct._object** %dict, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  store %struct.DecCondMap* getelementptr inbounds ([10 x %struct.DecCondMap], [10 x %struct.DecCondMap]* @signal_map, i32 0, i32 0), %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %name = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %1, i32 0, i32 0
  %2 = load i8*, i8** %name, align 8
  %cmp1 = icmp ne i8* %2, null
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %flags.addr, align 4
  %4 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %flag = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %4, i32 0, i32 2
  %5 = load i32, i32* %flag, align 4
  %and = and i32 %3, %5
  %tobool = icmp ne i32 %and, 0
  %cond = select i1 %tobool, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  store %struct._object* %cond, %struct._object** %b, align 8
  %6 = load %struct._object*, %struct._object** %dict, align 8
  %7 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %ex = getelementptr inbounds %struct.DecCondMap, %struct.DecCondMap* %7, i32 0, i32 3
  %8 = load %struct._object*, %struct._object** %ex, align 8
  %9 = load %struct._object*, %struct._object** %b, align 8
  %call2 = call i32 @PyDict_SetItem(%struct._object* %6, %struct._object* %8, %struct._object* %9)
  %cmp3 = icmp slt i32 %call2, 0
  br i1 %cmp3, label %if.then.4, label %if.end.8

if.then.4:                                        ; preds = %for.body
  br label %do.body

do.body:                                          ; preds = %if.then.4
  %10 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.7

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.8
  %17 = load %struct.DecCondMap*, %struct.DecCondMap** %cm, align 8
  %incdec.ptr = getelementptr %struct.DecCondMap, %struct.DecCondMap* %17, i32 1
  store %struct.DecCondMap* %incdec.ptr, %struct.DecCondMap** %cm, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %18 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %18, %struct._object** %retval
  br label %return

return:                                           ; preds = %for.end, %do.end, %if.then
  %19 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %19
}

declare %struct._object* @PyDict_New() #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyDec_GetCurrentContext(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %context = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %context, align 8
  %0 = load %struct._object*, %struct._object** %context, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %context, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 0
  %2 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %3 = load %struct._object*, %struct._object** %context, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %4
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ctxmanager_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %self = alloca %struct.PyDecContextManagerObject*, align 8
  %local = alloca %struct._object*, align 8
  %global = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %local, align 8
  %call = call %struct._object* @current_context()
  store %struct._object* %call, %struct._object** %global, align 8
  %0 = load %struct._object*, %struct._object** %global, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call1 = call i32 (%struct._object*, %struct._object*, i8*, i8**, ...) @PyArg_ParseTupleAndKeywords(%struct._object* %1, %struct._object* %2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i32 0, i32 0), i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @ctxmanager_new.kwlist, i32 0, i32 0), %struct._object** %local)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %local, align 8
  %cmp4 = icmp eq %struct._object* %3, @_Py_NoneStruct
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end.3
  %4 = load %struct._object*, %struct._object** %global, align 8
  store %struct._object* %4, %struct._object** %local, align 8
  br label %if.end.12

if.else:                                          ; preds = %if.end.3
  %5 = load %struct._object*, %struct._object** %local, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %6, @PyDecContext_Type
  br i1 %cmp6, label %if.end.11, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %7 = load %struct._object*, %struct._object** %local, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %8, %struct._typeobject* @PyDecContext_Type)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %lor.lhs.false
  %9 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %lor.lhs.false, %if.else
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %if.then.5
  %call13 = call %struct._object* @_PyObject_New(%struct._typeobject* @PyDecContextManager_Type)
  %10 = bitcast %struct._object* %call13 to %struct.PyDecContextManagerObject*
  store %struct.PyDecContextManagerObject* %10, %struct.PyDecContextManagerObject** %self, align 8
  %11 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %cmp14 = icmp eq %struct.PyDecContextManagerObject* %11, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %12 = load %struct._object*, %struct._object** %local, align 8
  %call17 = call %struct._object* @context_copy(%struct._object* %12, %struct._object* null)
  %13 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %local18 = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %13, i32 0, i32 1
  store %struct._object* %call17, %struct._object** %local18, align 8
  %14 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %local19 = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %14, i32 0, i32 1
  %15 = load %struct._object*, %struct._object** %local19, align 8
  %cmp20 = icmp eq %struct._object* %15, null
  br i1 %cmp20, label %if.then.21, label %if.end.28

if.then.21:                                       ; preds = %if.end.16
  %16 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %global22 = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %16, i32 0, i32 2
  store %struct._object* null, %struct._object** %global22, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.21
  %17 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %18 = bitcast %struct.PyDecContextManagerObject* %17 to %struct._object*
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp23 = icmp ne i64 %dec, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body
  br label %if.end.27

if.else.25:                                       ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end

do.end:                                           ; preds = %if.end.27
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.16
  %25 = load %struct._object*, %struct._object** %global, align 8
  %26 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %global29 = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %26, i32 0, i32 2
  store %struct._object* %25, %struct._object** %global29, align 8
  %27 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %global30 = getelementptr inbounds %struct.PyDecContextManagerObject, %struct.PyDecContextManagerObject* %27, i32 0, i32 2
  %28 = load %struct._object*, %struct._object** %global30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt31, align 8
  %inc = add i64 %29, 1
  store i64 %inc, i64* %ob_refcnt31, align 8
  %30 = load %struct.PyDecContextManagerObject*, %struct.PyDecContextManagerObject** %self, align 8
  %31 = bitcast %struct.PyDecContextManagerObject* %30 to %struct._object*
  store %struct._object* %31, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.28, %do.end, %if.then.15, %if.then.10, %if.then.2, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!2 = !{i32 139928}
!3 = !{i32 139768}
