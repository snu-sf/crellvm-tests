; ModuleID = './xmltok.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.normal_encoding = type { %struct.encoding, [256 x i8], i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)* }
%struct.encoding = type { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*], i32 (%struct.encoding*, i8*, i8*)*, i32 (%struct.encoding*, i8*, i8*, i8*)*, i32 (%struct.encoding*, i8*)*, i8* (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)*, i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*, i8*)*, void (%struct.encoding*, i8*, i8*, %struct.position*)*, i32 (%struct.encoding*, i8*, i8*, i8**)*, void (%struct.encoding*, i8**, i8*, i8**, i8*)*, void (%struct.encoding*, i8**, i8*, i16**, i16*)*, i32, i8, i8 }
%struct.ATTRIBUTE = type { i8*, i8*, i8*, i8 }
%struct.position = type { i64, i64 }
%struct.unknown_encoding = type { %struct.normal_encoding, i32 (i8*, i8*)*, i8*, [256 x i16], [256 x [4 x i8]] }
%struct.INIT_ENCODING = type { %struct.encoding, %struct.encoding** }

@latin1_encoding = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @latin1_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @latin1_toUtf16, i32 1, i8 0, i8 0 }, [256 x i8] c"\00\00\00\00\00\00\00\00\00\15\0A\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15\10\0C\13\1C\1E\03\0D\1F !\22#\1B\1A\11\19\19\19\19\19\19\19\19\19\19\16\12\02\0E\0B\0F\1C\18\18\18\18\18\18\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\14\1C\04\1C\16\1C\18\18\18\18\18\18\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\1C$\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\16\1C\1C\1C\1C\1C\1C\1C\1C\1C\1C\16\1C\1A\1C\1C\16\1C\1C\1C\1C\1C\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\1C\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\1C\16\16\16\16\16\16\16\16", i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@nmstrtPages = internal constant [256 x i8] calign 16
@namingBitmap = internal constant [320 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 0, i32 67108864, i32 -2013265922, i32 134217726, i32 0, i32 0, i32 -8388609, i32 -8388609, i32 -1, i32 2146697215, i32 -514, i32 2147483647, i32 -1, i32 -1, i32 -8177, i32 -63832065, i32 16777215, i32 0, i32 -65536, i32 -1, i32 -1, i32 -134217217, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -10432, i32 -5, i32 1417641983, i32 1048573, i32 -8194, i32 -1, i32 -536936449, i32 -1, i32 -65533, i32 -1, i32 -58977, i32 54513663, i32 0, i32 -131072, i32 41943039, i32 -2, i32 127, i32 0, i32 -65536, i32 460799, i32 0, i32 134217726, i32 2046, i32 -131072, i32 -1, i32 2097151999, i32 3112959, i32 96, i32 -32, i32 603979775, i32 -16777216, i32 3, i32 -417824, i32 63307263, i32 -1342177280, i32 196611, i32 -423968, i32 57540095, i32 1577058304, i32 1835008, i32 -282656, i32 602799615, i32 0, i32 1, i32 -417824, i32 600702463, i32 -1342177280, i32 3, i32 -700594208, i32 62899992, i32 0, i32 0, i32 -139296, i32 66059775, i32 0, i32 3, i32 -139296, i32 66059775, i32 1073741824, i32 3, i32 -139296, i32 67108351, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 884735, i32 63, i32 0, i32 -17816170, i32 537750702, i32 31, i32 0, i32 0, i32 0, i32 -257, i32 1023, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -65473, i32 8388607, i32 514797, i32 1342177280, i32 -2110697471, i32 2908843, i32 1073741824, i32 -176109312, i32 7, i32 33622016, i32 -1, i32 -1, i32 -1, i32 -1, i32 268435455, i32 -1, i32 -1, i32 67108863, i32 1061158911, i32 -1, i32 -1426112705, i32 1073741823, i32 -1, i32 1608515583, i32 265232348, i32 534519807, i32 0, i32 19520, i32 0, i32 0, i32 7, i32 0, i32 0, i32 0, i32 128, i32 1022, i32 -2, i32 -1, i32 2097151, i32 -2, i32 -1, i32 134217727, i32 -32, i32 8191, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 63, i32 0, i32 0, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 15, i32 0, i32 0, i32 0, i32 134176768, i32 -2013265922, i32 134217726, i32 0, i32 8388608, i32 -8388609, i32 -8388609, i32 16777215, i32 0, i32 -65536, i32 -1, i32 -1, i32 -134217217, i32 196611, i32 0, i32 -1, i32 -1, i32 63, i32 3, i32 -10304, i32 -5, i32 1417641983, i32 1048573, i32 -8194, i32 -1, i32 -536936449, i32 -1, i32 -65413, i32 -1, i32 -58977, i32 54513663, i32 0, i32 -131072, i32 41943039, i32 -2, i32 -130945, i32 -1140850693, i32 -65514, i32 460799, i32 0, i32 134217726, i32 524287, i32 -64513, i32 -1, i32 2097151999, i32 -1081345, i32 67059199, i32 -18, i32 -201326593, i32 -14794753, i32 65487, i32 -417810, i32 -741999105, i32 -1333773921, i32 262095, i32 -423964, i32 -747766273, i32 1577073031, i32 2097088, i32 -282642, i32 -202506753, i32 15295, i32 65473, i32 -417810, i32 -204603905, i32 -1329579633, i32 65475, i32 -700594196, i32 -1010841832, i32 8404423, i32 65408, i32 -139282, i32 -1007682049, i32 6307295, i32 65475, i32 -139284, i32 -1007682049, i32 1080049119, i32 65475, i32 -139284, i32 -1006633473, i32 8404431, i32 65475, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 134184959, i32 67076095, i32 0, i32 -17816170, i32 1006595246, i32 67059551, i32 0, i32 50331648, i32 -1029700609, i32 -257, i32 -130049, i32 -21032993, i32 50216959, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 536805376, i32 2, i32 160, i32 4128766, i32 -2, i32 -1, i32 1713373183, i32 -2, i32 -1, i32 2013265919], align 16
@namePages = internal constant [256 x i8] calign 16
@internal_utf8_encoding = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @utf8_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @utf8_toUtf16, i32 1, i8 1, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* @utf8_isName2, i32 (%struct.encoding*, i8*)* @utf8_isName3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt2, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isInvalid2, i32 (%struct.encoding*, i8*)* @utf8_isInvalid3, i32 (%struct.encoding*, i8*)* @utf8_isInvalid4 }, align 8
@internal_little2_encoding = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @little2_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @little2_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @little2_nameLength, i8* (%struct.encoding*, i8*)* @little2_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @little2_getAtts, i32 (%struct.encoding*, i8*)* @little2_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @little2_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @little2_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @little2_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @little2_toUtf16, i32 2, i8 0, i8 1 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@internal_utf8_encoding_ns = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @utf8_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @utf8_toUtf16, i32 1, i8 1, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* @utf8_isName2, i32 (%struct.encoding*, i8*)* @utf8_isName3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt2, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isInvalid2, i32 (%struct.encoding*, i8*)* @utf8_isInvalid3, i32 (%struct.encoding*, i8*)* @utf8_isInvalid4 }, align 8
@internal_little2_encoding_ns = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @little2_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @little2_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @little2_nameLength, i8* (%struct.encoding*, i8*)* @little2_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @little2_getAtts, i32 (%struct.encoding*, i8*)* @little2_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @little2_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @little2_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @little2_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @little2_toUtf16, i32 2, i8 0, i8 1 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@normal_scanCdataSection.CDATA_LSQB = internal constant [6 x i8] c"CDATA[", align 1
@little2_scanCdataSection.CDATA_LSQB = internal constant [6 x i8] c"CDATA[", align 1
@getEncodingIndex.encodingNames = internal constant [6 x i8*] [i8* getelementptr inbounds ([11 x i8], [11 x i8]* @KW_ISO_8859_1, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @KW_US_ASCII, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @KW_UTF_8, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @KW_UTF_16, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @KW_UTF_16BE, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @KW_UTF_16LE, i32 0, i32 0)], align 16
@KW_ISO_8859_1 = internal constant [11 x i8] c"ISO-8859-1\00", align 1
@KW_US_ASCII = internal constant [9 x i8] c"US-ASCII\00", align 1
@KW_UTF_8 = internal constant [6 x i8] c"UTF-8\00", align 1
@KW_UTF_16 = internal constant [7 x i8] c"UTF-16\00", align 1
@KW_UTF_16BE = internal constant [9 x i8] c"UTF-16BE\00", align 1
@KW_UTF_16LE = internal constant [9 x i8] c"UTF-16LE\00", align 1
@encodings = internal constant [7 x %struct.encoding*] [%struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @ascii_encoding, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @utf8_encoding, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @big2_encoding, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @big2_encoding, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @little2_encoding, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @utf8_encoding, i32 0, i32 0)], align 16
@ascii_encoding = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @ascii_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @latin1_toUtf16, i32 1, i8 1, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@utf8_encoding = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @utf8_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @utf8_toUtf16, i32 1, i8 1, i8 0 }, [256 x i8] c"\00\00\00\00\00\00\00\00\00\15\0A\00\00\09\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\15\10\0C\13\1C\1E\03\0D\1F !\22#\1B\1A\11\19\19\19\19\19\19\19\19\19\19\16\12\02\0E\0B\0F\1C\18\18\18\18\18\18\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\14\1C\04\1C\16\1C\18\18\18\18\18\18\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\16\1C$\1C\1C\1C\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\08\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\05\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\06\07\07\07\07\07\00\00\00\00\00\00\00\00\00\01\01", i32 (%struct.encoding*, i8*)* @utf8_isName2, i32 (%struct.encoding*, i8*)* @utf8_isName3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt2, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isInvalid2, i32 (%struct.encoding*, i8*)* @utf8_isInvalid3, i32 (%struct.encoding*, i8*)* @utf8_isInvalid4 }, align 8
@big2_encoding = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @big2_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @big2_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @big2_nameLength, i8* (%struct.encoding*, i8*)* @big2_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @big2_getAtts, i32 (%struct.encoding*, i8*)* @big2_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @big2_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @big2_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @big2_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @big2_toUtf16, i32 2, i8 0, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@little2_encoding = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @little2_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @little2_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @little2_nameLength, i8* (%struct.encoding*, i8*)* @little2_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @little2_getAtts, i32 (%struct.encoding*, i8*)* @little2_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @little2_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @little2_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @little2_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @little2_toUtf16, i32 2, i8 0, i8 1 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@big2_scanCdataSection.CDATA_LSQB = internal constant [6 x i8] c"CDATA[", align 1
@KW_version = internal constant [8 x i8] c"version\00", align 1
@KW_encoding = internal constant [9 x i8] c"encoding\00", align 1
@KW_standalone = internal constant [11 x i8] c"standalone\00", align 1
@KW_yes = internal constant [4 x i8] c"yes\00", align 1
@KW_no = internal constant [3 x i8] c"no\00", align 1
@encodingsNS = internal constant [7 x %struct.encoding*] [%struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding_ns, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @ascii_encoding_ns, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @utf8_encoding_ns, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @big2_encoding_ns, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @big2_encoding_ns, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @little2_encoding_ns, i32 0, i32 0), %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @utf8_encoding_ns, i32 0, i32 0)], align 16
@latin1_encoding_ns = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @latin1_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @latin1_toUtf16, i32 1, i8 0, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@ascii_encoding_ns = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @ascii_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @latin1_toUtf16, i32 1, i8 1, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@utf8_encoding_ns = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @normal_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @normal_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @normal_nameLength, i8* (%struct.encoding*, i8*)* @normal_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @normal_getAtts, i32 (%struct.encoding*, i8*)* @normal_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @normal_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @normal_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @normal_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @utf8_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @utf8_toUtf16, i32 1, i8 1, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* @utf8_isName2, i32 (%struct.encoding*, i8*)* @utf8_isName3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt2, i32 (%struct.encoding*, i8*)* @utf8_isNmstrt3, i32 (%struct.encoding*, i8*)* @isNever, i32 (%struct.encoding*, i8*)* @utf8_isInvalid2, i32 (%struct.encoding*, i8*)* @utf8_isInvalid3, i32 (%struct.encoding*, i8*)* @utf8_isInvalid4 }, align 8
@big2_encoding_ns = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @big2_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @big2_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @big2_nameLength, i8* (%struct.encoding*, i8*)* @big2_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @big2_getAtts, i32 (%struct.encoding*, i8*)* @big2_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @big2_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @big2_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @big2_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @big2_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @big2_toUtf16, i32 2, i8 0, i8 0 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8
@little2_encoding_ns = internal constant %struct.normal_encoding { %struct.encoding { [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_prologTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_contentTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_cdataSectionTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_ignoreSectionTok], [2 x i32 (%struct.encoding*, i8*, i8*, i8**)*] [i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_attributeValueTok, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_entityValueTok], i32 (%struct.encoding*, i8*, i8*)* @little2_sameName, i32 (%struct.encoding*, i8*, i8*, i8*)* @little2_nameMatchesAscii, i32 (%struct.encoding*, i8*)* @little2_nameLength, i8* (%struct.encoding*, i8*)* @little2_skipS, i32 (%struct.encoding*, i8*, i32, %struct.ATTRIBUTE*)* @little2_getAtts, i32 (%struct.encoding*, i8*)* @little2_charRefNumber, i32 (%struct.encoding*, i8*, i8*)* @little2_predefinedEntityName, void (%struct.encoding*, i8*, i8*, %struct.position*)* @little2_updatePosition, i32 (%struct.encoding*, i8*, i8*, i8**)* @little2_isPublicId, void (%struct.encoding*, i8**, i8*, i8**, i8*)* @little2_toUtf8, void (%struct.encoding*, i8**, i8*, i16**, i16*)* @little2_toUtf16, i32 2, i8 0, i8 1 }, [256 x i8] ci32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null, i32 (%struct.encoding*, i8*)* null }, align 8

; Function Attrs: nounwind uwtable
define i32 @PyExpat_XmlUtf8Encode(i32 %c, i8* %buf) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  store i32 %c, i32* %c.addr, align 4
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load i32, i32* %c.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %c.addr, align 4
  %cmp1 = icmp slt i32 %1, 128
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %2 = load i32, i32* %c.addr, align 4
  %conv = trunc i32 %2 to i8
  %3 = load i8*, i8** %buf.addr, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 0
  store i8 %conv, i8* %arrayidx, align 1
  store i32 1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load i32, i32* %c.addr, align 4
  %cmp4 = icmp slt i32 %4, 2048
  br i1 %cmp4, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %if.end.3
  %5 = load i32, i32* %c.addr, align 4
  %shr = ashr i32 %5, 6
  %or = or i32 %shr, 192
  %conv7 = trunc i32 %or to i8
  %6 = load i8*, i8** %buf.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %6, i64 0
  store i8 %conv7, i8* %arrayidx8, align 1
  %7 = load i32, i32* %c.addr, align 4
  %and = and i32 %7, 63
  %or9 = or i32 %and, 128
  %conv10 = trunc i32 %or9 to i8
  %8 = load i8*, i8** %buf.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %8, i64 1
  store i8 %conv10, i8* %arrayidx11, align 1
  store i32 2, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.3
  %9 = load i32, i32* %c.addr, align 4
  %cmp13 = icmp slt i32 %9, 65536
  br i1 %cmp13, label %if.then.15, label %if.end.29

if.then.15:                                       ; preds = %if.end.12
  %10 = load i32, i32* %c.addr, align 4
  %shr16 = ashr i32 %10, 12
  %or17 = or i32 %shr16, 224
  %conv18 = trunc i32 %or17 to i8
  %11 = load i8*, i8** %buf.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %11, i64 0
  store i8 %conv18, i8* %arrayidx19, align 1
  %12 = load i32, i32* %c.addr, align 4
  %shr20 = ashr i32 %12, 6
  %and21 = and i32 %shr20, 63
  %or22 = or i32 %and21, 128
  %conv23 = trunc i32 %or22 to i8
  %13 = load i8*, i8** %buf.addr, align 8
  %arrayidx24 = getelementptr i8, i8* %13, i64 1
  store i8 %conv23, i8* %arrayidx24, align 1
  %14 = load i32, i32* %c.addr, align 4
  %and25 = and i32 %14, 63
  %or26 = or i32 %and25, 128
  %conv27 = trunc i32 %or26 to i8
  %15 = load i8*, i8** %buf.addr, align 8
  %arrayidx28 = getelementptr i8, i8* %15, i64 2
  store i8 %conv27, i8* %arrayidx28, align 1
  store i32 3, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end.12
  %16 = load i32, i32* %c.addr, align 4
  %cmp30 = icmp slt i32 %16, 1114112
  br i1 %cmp30, label %if.then.32, label %if.end.51

if.then.32:                                       ; preds = %if.end.29
  %17 = load i32, i32* %c.addr, align 4
  %shr33 = ashr i32 %17, 18
  %or34 = or i32 %shr33, 240
  %conv35 = trunc i32 %or34 to i8
  %18 = load i8*, i8** %buf.addr, align 8
  %arrayidx36 = getelementptr i8, i8* %18, i64 0
  store i8 %conv35, i8* %arrayidx36, align 1
  %19 = load i32, i32* %c.addr, align 4
  %shr37 = ashr i32 %19, 12
  %and38 = and i32 %shr37, 63
  %or39 = or i32 %and38, 128
  %conv40 = trunc i32 %or39 to i8
  %20 = load i8*, i8** %buf.addr, align 8
  %arrayidx41 = getelementptr i8, i8* %20, i64 1
  store i8 %conv40, i8* %arrayidx41, align 1
  %21 = load i32, i32* %c.addr, align 4
  %shr42 = ashr i32 %21, 6
  %and43 = and i32 %shr42, 63
  %or44 = or i32 %and43, 128
  %conv45 = trunc i32 %or44 to i8
  %22 = load i8*, i8** %buf.addr, align 8
  %arrayidx46 = getelementptr i8, i8* %22, i64 2
  store i8 %conv45, i8* %arrayidx46, align 1
  %23 = load i32, i32* %c.addr, align 4
  %and47 = and i32 %23, 63
  %or48 = or i32 %and47, 128
  %conv49 = trunc i32 %or48 to i8
  %24 = load i8*, i8** %buf.addr, align 8
  %arrayidx50 = getelementptr i8, i8* %24, i64 3
  store i8 %conv49, i8* %arrayidx50, align 1
  store i32 4, i32* %retval
  br label %return

if.end.51:                                        ; preds = %if.end.29
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.51, %if.then.32, %if.then.15, %if.then.6, %if.then.2, %if.then
  %25 = load i32, i32* %retval
  ret i32 %25
}

; Function Attrs: nounwind uwtable
define i32 @PyExpat_XmlUtf16Encode(i32 %charNum, i16* %buf) #0 {
entry:
  %retval = alloca i32, align 4
  %charNum.addr = alloca i32, align 4
  %buf.addr = alloca i16*, align 8
  store i32 %charNum, i32* %charNum.addr, align 4
  store i16* %buf, i16** %buf.addr, align 8
  %0 = load i32, i32* %charNum.addr, align 4
  %cmp = icmp slt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %charNum.addr, align 4
  %cmp1 = icmp slt i32 %1, 65536
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %2 = load i32, i32* %charNum.addr, align 4
  %conv = trunc i32 %2 to i16
  %3 = load i16*, i16** %buf.addr, align 8
  %arrayidx = getelementptr i16, i16* %3, i64 0
  store i16 %conv, i16* %arrayidx, align 2
  store i32 1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %4 = load i32, i32* %charNum.addr, align 4
  %cmp4 = icmp slt i32 %4, 1114112
  br i1 %cmp4, label %if.then.6, label %if.end.12

if.then.6:                                        ; preds = %if.end.3
  %5 = load i32, i32* %charNum.addr, align 4
  %sub = sub i32 %5, 65536
  store i32 %sub, i32* %charNum.addr, align 4
  %6 = load i32, i32* %charNum.addr, align 4
  %shr = ashr i32 %6, 10
  %add = add i32 %shr, 55296
  %conv7 = trunc i32 %add to i16
  %7 = load i16*, i16** %buf.addr, align 8
  %arrayidx8 = getelementptr i16, i16* %7, i64 0
  store i16 %conv7, i16* %arrayidx8, align 2
  %8 = load i32, i32* %charNum.addr, align 4
  %and = and i32 %8, 1023
  %add9 = add i32 %and, 56320
  %conv10 = trunc i32 %add9 to i16
  %9 = load i16*, i16** %buf.addr, align 8
  %arrayidx11 = getelementptr i16, i16* %9, i64 1
  store i16 %conv10, i16* %arrayidx11, align 2
  store i32 2, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.3
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.then.6, %if.then.2, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define i32 @PyExpat_XmlSizeOfUnknownEncoding() #0 {
entry:
  ret i32 2024
}

; Function Attrs: nounwind uwtable
define %struct.encoding* @PyExpat_XmlInitUnknownEncoding(i8* %mem, i32* %table, i32 (i8*, i8*)* %convert, i8* %userData) #0 {
entry:
  %retval = alloca %struct.encoding*, align 8
  %mem.addr = alloca i8*, align 8
  %table.addr = alloca i32*, align 8
  %convert.addr = alloca i32 (i8*, i8*)*, align 8
  %userData.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.unknown_encoding*, align 8
  %c = alloca i32, align 4
  store i8* %mem, i8** %mem.addr, align 8
  store i32* %table, i32** %table.addr, align 8
  store i32 (i8*, i8*)* %convert, i32 (i8*, i8*)** %convert.addr, align 8
  store i8* %userData, i8** %userData.addr, align 8
  %0 = load i8*, i8** %mem.addr, align 8
  %1 = bitcast i8* %0 to %struct.unknown_encoding*
  store %struct.unknown_encoding* %1, %struct.unknown_encoding** %e, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %cmp = icmp slt i32 %2, 472
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr i8, i8* bitcast (%struct.normal_encoding* @latin1_encoding to i8*), i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %5 = load i32, i32* %i, align 4
  %idxprom1 = sext i32 %5 to i64
  %6 = load i8*, i8** %mem.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %6, i64 %idxprom1
  store i8 %4, i8* %arrayidx2, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond.3

for.cond.3:                                       ; preds = %for.inc.20, %for.end
  %8 = load i32, i32* %i, align 4
  %cmp4 = icmp slt i32 %8, 128
  br i1 %cmp4, label %for.body.5, label %for.end.22

for.body.5:                                       ; preds = %for.cond.3
  %9 = load i32, i32* %i, align 4
  %idxprom6 = sext i32 %9 to i64
  %arrayidx7 = getelementptr [256 x i8], [256 x i8]* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding, i32 0, i32 1), i32 0, i64 %idxprom6
  %10 = load i8, i8* %arrayidx7, align 1
  %conv = zext i8 %10 to i32
  %cmp8 = icmp ne i32 %conv, 28
  br i1 %cmp8, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body.5
  %11 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %11 to i64
  %arrayidx11 = getelementptr [256 x i8], [256 x i8]* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding, i32 0, i32 1), i32 0, i64 %idxprom10
  %12 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %12 to i32
  %cmp13 = icmp ne i32 %conv12, 0
  br i1 %cmp13, label %land.lhs.true.15, label %if.end

land.lhs.true.15:                                 ; preds = %land.lhs.true
  %13 = load i32, i32* %i, align 4
  %idxprom16 = sext i32 %13 to i64
  %14 = load i32*, i32** %table.addr, align 8
  %arrayidx17 = getelementptr i32, i32* %14, i64 %idxprom16
  %15 = load i32, i32* %arrayidx17, align 4
  %16 = load i32, i32* %i, align 4
  %cmp18 = icmp ne i32 %15, %16
  br i1 %cmp18, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true.15
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.15, %land.lhs.true, %for.body.5
  br label %for.inc.20

for.inc.20:                                       ; preds = %if.end
  %17 = load i32, i32* %i, align 4
  %inc21 = add i32 %17, 1
  store i32 %inc21, i32* %i, align 4
  br label %for.cond.3

for.end.22:                                       ; preds = %for.cond.3
  store i32 0, i32* %i, align 4
  br label %for.cond.23

for.cond.23:                                      ; preds = %for.inc.188, %for.end.22
  %18 = load i32, i32* %i, align 4
  %cmp24 = icmp slt i32 %18, 256
  br i1 %cmp24, label %for.body.26, label %for.end.190

for.body.26:                                      ; preds = %for.cond.23
  %19 = load i32, i32* %i, align 4
  %idxprom27 = sext i32 %19 to i64
  %20 = load i32*, i32** %table.addr, align 8
  %arrayidx28 = getelementptr i32, i32* %20, i64 %idxprom27
  %21 = load i32, i32* %arrayidx28, align 4
  store i32 %21, i32* %c, align 4
  %22 = load i32, i32* %c, align 4
  %cmp29 = icmp eq i32 %22, -1
  br i1 %cmp29, label %if.then.31, label %if.else

if.then.31:                                       ; preds = %for.body.26
  %23 = load i32, i32* %i, align 4
  %idxprom32 = sext i32 %23 to i64
  %24 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %24, i32 0, i32 0
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal, i32 0, i32 1
  %arrayidx33 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom32
  store i8 1, i8* %arrayidx33, align 1
  %25 = load i32, i32* %i, align 4
  %idxprom34 = sext i32 %25 to i64
  %26 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf16 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %26, i32 0, i32 3
  %arrayidx35 = getelementptr [256 x i16], [256 x i16]* %utf16, i32 0, i64 %idxprom34
  store i16 -1, i16* %arrayidx35, align 2
  %27 = load i32, i32* %i, align 4
  %idxprom36 = sext i32 %27 to i64
  %28 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf8 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %28, i32 0, i32 4
  %arrayidx37 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf8, i32 0, i64 %idxprom36
  %arrayidx38 = getelementptr [4 x i8], [4 x i8]* %arrayidx37, i32 0, i64 0
  store i8 1, i8* %arrayidx38, align 1
  %29 = load i32, i32* %i, align 4
  %idxprom39 = sext i32 %29 to i64
  %30 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf840 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %30, i32 0, i32 4
  %arrayidx41 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf840, i32 0, i64 %idxprom39
  %arrayidx42 = getelementptr [4 x i8], [4 x i8]* %arrayidx41, i32 0, i64 1
  store i8 0, i8* %arrayidx42, align 1
  br label %if.end.187

if.else:                                          ; preds = %for.body.26
  %31 = load i32, i32* %c, align 4
  %cmp43 = icmp slt i32 %31, 0
  br i1 %cmp43, label %if.then.45, label %if.else.62

if.then.45:                                       ; preds = %if.else
  %32 = load i32, i32* %c, align 4
  %cmp46 = icmp slt i32 %32, -4
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.then.45
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end.49:                                        ; preds = %if.then.45
  %33 = load i32, i32* %c, align 4
  %add = add i32 %33, 2
  %sub = sub i32 5, %add
  %conv50 = trunc i32 %sub to i8
  %34 = load i32, i32* %i, align 4
  %idxprom51 = sext i32 %34 to i64
  %35 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal52 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %35, i32 0, i32 0
  %type53 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal52, i32 0, i32 1
  %arrayidx54 = getelementptr [256 x i8], [256 x i8]* %type53, i32 0, i64 %idxprom51
  store i8 %conv50, i8* %arrayidx54, align 1
  %36 = load i32, i32* %i, align 4
  %idxprom55 = sext i32 %36 to i64
  %37 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf856 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %37, i32 0, i32 4
  %arrayidx57 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf856, i32 0, i64 %idxprom55
  %arrayidx58 = getelementptr [4 x i8], [4 x i8]* %arrayidx57, i32 0, i64 0
  store i8 0, i8* %arrayidx58, align 1
  %38 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %38 to i64
  %39 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf1660 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %39, i32 0, i32 3
  %arrayidx61 = getelementptr [256 x i16], [256 x i16]* %utf1660, i32 0, i64 %idxprom59
  store i16 0, i16* %arrayidx61, align 2
  br label %if.end.186

if.else.62:                                       ; preds = %if.else
  %40 = load i32, i32* %c, align 4
  %cmp63 = icmp slt i32 %40, 128
  br i1 %cmp63, label %if.then.65, label %if.else.103

if.then.65:                                       ; preds = %if.else.62
  %41 = load i32, i32* %c, align 4
  %idxprom66 = sext i32 %41 to i64
  %arrayidx67 = getelementptr [256 x i8], [256 x i8]* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding, i32 0, i32 1), i32 0, i64 %idxprom66
  %42 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %42 to i32
  %cmp69 = icmp ne i32 %conv68, 28
  br i1 %cmp69, label %land.lhs.true.71, label %if.end.81

land.lhs.true.71:                                 ; preds = %if.then.65
  %43 = load i32, i32* %c, align 4
  %idxprom72 = sext i32 %43 to i64
  %arrayidx73 = getelementptr [256 x i8], [256 x i8]* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding, i32 0, i32 1), i32 0, i64 %idxprom72
  %44 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %44 to i32
  %cmp75 = icmp ne i32 %conv74, 0
  br i1 %cmp75, label %land.lhs.true.77, label %if.end.81

land.lhs.true.77:                                 ; preds = %land.lhs.true.71
  %45 = load i32, i32* %c, align 4
  %46 = load i32, i32* %i, align 4
  %cmp78 = icmp ne i32 %45, %46
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %land.lhs.true.77
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end.81:                                        ; preds = %land.lhs.true.77, %land.lhs.true.71, %if.then.65
  %47 = load i32, i32* %c, align 4
  %idxprom82 = sext i32 %47 to i64
  %arrayidx83 = getelementptr [256 x i8], [256 x i8]* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding, i32 0, i32 1), i32 0, i64 %idxprom82
  %48 = load i8, i8* %arrayidx83, align 1
  %49 = load i32, i32* %i, align 4
  %idxprom84 = sext i32 %49 to i64
  %50 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal85 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %50, i32 0, i32 0
  %type86 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal85, i32 0, i32 1
  %arrayidx87 = getelementptr [256 x i8], [256 x i8]* %type86, i32 0, i64 %idxprom84
  store i8 %48, i8* %arrayidx87, align 1
  %51 = load i32, i32* %i, align 4
  %idxprom88 = sext i32 %51 to i64
  %52 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf889 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %52, i32 0, i32 4
  %arrayidx90 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf889, i32 0, i64 %idxprom88
  %arrayidx91 = getelementptr [4 x i8], [4 x i8]* %arrayidx90, i32 0, i64 0
  store i8 1, i8* %arrayidx91, align 1
  %53 = load i32, i32* %c, align 4
  %conv92 = trunc i32 %53 to i8
  %54 = load i32, i32* %i, align 4
  %idxprom93 = sext i32 %54 to i64
  %55 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf894 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %55, i32 0, i32 4
  %arrayidx95 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf894, i32 0, i64 %idxprom93
  %arrayidx96 = getelementptr [4 x i8], [4 x i8]* %arrayidx95, i32 0, i64 1
  store i8 %conv92, i8* %arrayidx96, align 1
  %56 = load i32, i32* %c, align 4
  %cmp97 = icmp eq i32 %56, 0
  br i1 %cmp97, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.81
  br label %cond.end

cond.false:                                       ; preds = %if.end.81
  %57 = load i32, i32* %c, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 65535, %cond.true ], [ %57, %cond.false ]
  %conv99 = trunc i32 %cond to i16
  %58 = load i32, i32* %i, align 4
  %idxprom100 = sext i32 %58 to i64
  %59 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf16101 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %59, i32 0, i32 3
  %arrayidx102 = getelementptr [256 x i16], [256 x i16]* %utf16101, i32 0, i64 %idxprom100
  store i16 %conv99, i16* %arrayidx102, align 2
  br label %if.end.185

if.else.103:                                      ; preds = %if.else.62
  %60 = load i32, i32* %c, align 4
  %call = call i32 @checkCharRefNumber(i32 %60)
  %cmp104 = icmp slt i32 %call, 0
  br i1 %cmp104, label %if.then.106, label %if.else.122

if.then.106:                                      ; preds = %if.else.103
  %61 = load i32, i32* %i, align 4
  %idxprom107 = sext i32 %61 to i64
  %62 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal108 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %62, i32 0, i32 0
  %type109 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal108, i32 0, i32 1
  %arrayidx110 = getelementptr [256 x i8], [256 x i8]* %type109, i32 0, i64 %idxprom107
  store i8 0, i8* %arrayidx110, align 1
  %63 = load i32, i32* %i, align 4
  %idxprom111 = sext i32 %63 to i64
  %64 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf16112 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %64, i32 0, i32 3
  %arrayidx113 = getelementptr [256 x i16], [256 x i16]* %utf16112, i32 0, i64 %idxprom111
  store i16 -1, i16* %arrayidx113, align 2
  %65 = load i32, i32* %i, align 4
  %idxprom114 = sext i32 %65 to i64
  %66 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf8115 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %66, i32 0, i32 4
  %arrayidx116 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf8115, i32 0, i64 %idxprom114
  %arrayidx117 = getelementptr [4 x i8], [4 x i8]* %arrayidx116, i32 0, i64 0
  store i8 1, i8* %arrayidx117, align 1
  %67 = load i32, i32* %i, align 4
  %idxprom118 = sext i32 %67 to i64
  %68 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf8119 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %68, i32 0, i32 4
  %arrayidx120 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf8119, i32 0, i64 %idxprom118
  %arrayidx121 = getelementptr [4 x i8], [4 x i8]* %arrayidx120, i32 0, i64 1
  store i8 0, i8* %arrayidx121, align 1
  br label %if.end.184

if.else.122:                                      ; preds = %if.else.103
  %69 = load i32, i32* %c, align 4
  %cmp123 = icmp sgt i32 %69, 65535
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %if.else.122
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end.126:                                       ; preds = %if.else.122
  %70 = load i32, i32* %c, align 4
  %shr = ashr i32 %70, 8
  %idxprom127 = sext i32 %shr to i64
  %arrayidx128 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom127
  %71 = load i8, i8* %arrayidx128, align 1
  %conv129 = zext i8 %71 to i32
  %shl = shl i32 %conv129, 3
  %72 = load i32, i32* %c, align 4
  %and = and i32 %72, 255
  %shr130 = ashr i32 %and, 5
  %add131 = add i32 %shl, %shr130
  %idxprom132 = sext i32 %add131 to i64
  %arrayidx133 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom132
  %73 = load i32, i32* %arrayidx133, align 4
  %74 = load i32, i32* %c, align 4
  %and134 = and i32 %74, 255
  %and135 = and i32 %and134, 31
  %shl136 = shl i32 1, %and135
  %and137 = and i32 %73, %shl136
  %tobool = icmp ne i32 %and137, 0
  br i1 %tobool, label %if.then.138, label %if.else.143

if.then.138:                                      ; preds = %if.end.126
  %75 = load i32, i32* %i, align 4
  %idxprom139 = sext i32 %75 to i64
  %76 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal140 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %76, i32 0, i32 0
  %type141 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal140, i32 0, i32 1
  %arrayidx142 = getelementptr [256 x i8], [256 x i8]* %type141, i32 0, i64 %idxprom139
  store i8 22, i8* %arrayidx142, align 1
  br label %if.end.170

if.else.143:                                      ; preds = %if.end.126
  %77 = load i32, i32* %c, align 4
  %shr144 = ashr i32 %77, 8
  %idxprom145 = sext i32 %shr144 to i64
  %arrayidx146 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom145
  %78 = load i8, i8* %arrayidx146, align 1
  %conv147 = zext i8 %78 to i32
  %shl148 = shl i32 %conv147, 3
  %79 = load i32, i32* %c, align 4
  %and149 = and i32 %79, 255
  %shr150 = ashr i32 %and149, 5
  %add151 = add i32 %shl148, %shr150
  %idxprom152 = sext i32 %add151 to i64
  %arrayidx153 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom152
  %80 = load i32, i32* %arrayidx153, align 4
  %81 = load i32, i32* %c, align 4
  %and154 = and i32 %81, 255
  %and155 = and i32 %and154, 31
  %shl156 = shl i32 1, %and155
  %and157 = and i32 %80, %shl156
  %tobool158 = icmp ne i32 %and157, 0
  br i1 %tobool158, label %if.then.159, label %if.else.164

if.then.159:                                      ; preds = %if.else.143
  %82 = load i32, i32* %i, align 4
  %idxprom160 = sext i32 %82 to i64
  %83 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal161 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %83, i32 0, i32 0
  %type162 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal161, i32 0, i32 1
  %arrayidx163 = getelementptr [256 x i8], [256 x i8]* %type162, i32 0, i64 %idxprom160
  store i8 26, i8* %arrayidx163, align 1
  br label %if.end.169

if.else.164:                                      ; preds = %if.else.143
  %84 = load i32, i32* %i, align 4
  %idxprom165 = sext i32 %84 to i64
  %85 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal166 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %85, i32 0, i32 0
  %type167 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal166, i32 0, i32 1
  %arrayidx168 = getelementptr [256 x i8], [256 x i8]* %type167, i32 0, i64 %idxprom165
  store i8 28, i8* %arrayidx168, align 1
  br label %if.end.169

if.end.169:                                       ; preds = %if.else.164, %if.then.159
  br label %if.end.170

if.end.170:                                       ; preds = %if.end.169, %if.then.138
  %86 = load i32, i32* %c, align 4
  %87 = load i32, i32* %i, align 4
  %idxprom171 = sext i32 %87 to i64
  %88 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf8172 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %88, i32 0, i32 4
  %arrayidx173 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf8172, i32 0, i64 %idxprom171
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx173, i32 0, i32 0
  %add.ptr = getelementptr i8, i8* %arraydecay, i64 1
  %call174 = call i32 @PyExpat_XmlUtf8Encode(i32 %86, i8* %add.ptr)
  %conv175 = trunc i32 %call174 to i8
  %89 = load i32, i32* %i, align 4
  %idxprom176 = sext i32 %89 to i64
  %90 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf8177 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %90, i32 0, i32 4
  %arrayidx178 = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf8177, i32 0, i64 %idxprom176
  %arrayidx179 = getelementptr [4 x i8], [4 x i8]* %arrayidx178, i32 0, i64 0
  store i8 %conv175, i8* %arrayidx179, align 1
  %91 = load i32, i32* %c, align 4
  %conv180 = trunc i32 %91 to i16
  %92 = load i32, i32* %i, align 4
  %idxprom181 = sext i32 %92 to i64
  %93 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %utf16182 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %93, i32 0, i32 3
  %arrayidx183 = getelementptr [256 x i16], [256 x i16]* %utf16182, i32 0, i64 %idxprom181
  store i16 %conv180, i16* %arrayidx183, align 2
  br label %if.end.184

if.end.184:                                       ; preds = %if.end.170, %if.then.106
  br label %if.end.185

if.end.185:                                       ; preds = %if.end.184, %cond.end
  br label %if.end.186

if.end.186:                                       ; preds = %if.end.185, %if.end.49
  br label %if.end.187

if.end.187:                                       ; preds = %if.end.186, %if.then.31
  br label %for.inc.188

for.inc.188:                                      ; preds = %if.end.187
  %94 = load i32, i32* %i, align 4
  %inc189 = add i32 %94, 1
  store i32 %inc189, i32* %i, align 4
  br label %for.cond.23

for.end.190:                                      ; preds = %for.cond.23
  %95 = load i8*, i8** %userData.addr, align 8
  %96 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %userData191 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %96, i32 0, i32 2
  store i8* %95, i8** %userData191, align 8
  %97 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert.addr, align 8
  %98 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %convert192 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %98, i32 0, i32 1
  store i32 (i8*, i8*)* %97, i32 (i8*, i8*)** %convert192, align 8
  %99 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert.addr, align 8
  %tobool193 = icmp ne i32 (i8*, i8*)* %99, null
  br i1 %tobool193, label %if.then.194, label %if.end.204

if.then.194:                                      ; preds = %for.end.190
  %100 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal195 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %100, i32 0, i32 0
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal195, i32 0, i32 2
  store i32 (%struct.encoding*, i8*)* @unknown_isName, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %101 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal196 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %101, i32 0, i32 0
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal196, i32 0, i32 3
  store i32 (%struct.encoding*, i8*)* @unknown_isName, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %102 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal197 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %102, i32 0, i32 0
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal197, i32 0, i32 4
  store i32 (%struct.encoding*, i8*)* @unknown_isName, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %103 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal198 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %103, i32 0, i32 0
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal198, i32 0, i32 5
  store i32 (%struct.encoding*, i8*)* @unknown_isNmstrt, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %104 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal199 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %104, i32 0, i32 0
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal199, i32 0, i32 6
  store i32 (%struct.encoding*, i8*)* @unknown_isNmstrt, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %105 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal200 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %105, i32 0, i32 0
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal200, i32 0, i32 7
  store i32 (%struct.encoding*, i8*)* @unknown_isNmstrt, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %106 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal201 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %106, i32 0, i32 0
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal201, i32 0, i32 8
  store i32 (%struct.encoding*, i8*)* @unknown_isInvalid, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %107 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal202 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %107, i32 0, i32 0
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal202, i32 0, i32 9
  store i32 (%struct.encoding*, i8*)* @unknown_isInvalid, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %108 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal203 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %108, i32 0, i32 0
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal203, i32 0, i32 10
  store i32 (%struct.encoding*, i8*)* @unknown_isInvalid, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  br label %if.end.204

if.end.204:                                       ; preds = %if.then.194, %for.end.190
  %109 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal205 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %109, i32 0, i32 0
  %enc = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal205, i32 0, i32 0
  %utf8Convert = getelementptr inbounds %struct.encoding, %struct.encoding* %enc, i32 0, i32 11
  store void (%struct.encoding*, i8**, i8*, i8**, i8*)* @unknown_toUtf8, void (%struct.encoding*, i8**, i8*, i8**, i8*)** %utf8Convert, align 8
  %110 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal206 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %110, i32 0, i32 0
  %enc207 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal206, i32 0, i32 0
  %utf16Convert = getelementptr inbounds %struct.encoding, %struct.encoding* %enc207, i32 0, i32 12
  store void (%struct.encoding*, i8**, i8*, i16**, i16*)* @unknown_toUtf16, void (%struct.encoding*, i8**, i8*, i16**, i16*)** %utf16Convert, align 8
  %111 = load %struct.unknown_encoding*, %struct.unknown_encoding** %e, align 8
  %normal208 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %111, i32 0, i32 0
  %enc209 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %normal208, i32 0, i32 0
  store %struct.encoding* %enc209, %struct.encoding** %retval
  br label %return

return:                                           ; preds = %if.end.204, %if.then.125, %if.then.80, %if.then.48, %if.then
  %112 = load %struct.encoding*, %struct.encoding** %retval
  ret %struct.encoding* %112
}

; Function Attrs: nounwind uwtable
define internal i32 @checkCharRefNumber(i32 %result) #0 {
entry:
  %retval = alloca i32, align 4
  %result.addr = alloca i32, align 4
  store i32 %result, i32* %result.addr, align 4
  %0 = load i32, i32* %result.addr, align 4
  %shr = ashr i32 %0, 8
  switch i32 %shr, label %sw.epilog [
    i32 216, label %sw.bb
    i32 217, label %sw.bb
    i32 218, label %sw.bb
    i32 219, label %sw.bb
    i32 220, label %sw.bb
    i32 221, label %sw.bb
    i32 222, label %sw.bb
    i32 223, label %sw.bb
    i32 0, label %sw.bb.1
    i32 255, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry, %entry, %entry, %entry, %entry
  store i32 -1, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry
  %1 = load i32, i32* %result.addr, align 4
  %idxprom = sext i32 %1 to i64
  %arrayidx = getelementptr [256 x i8], [256 x i8]* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @latin1_encoding, i32 0, i32 1), i32 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.1
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb.1
  br label %sw.epilog

sw.bb.3:                                          ; preds = %entry
  %3 = load i32, i32* %result.addr, align 4
  %cmp4 = icmp eq i32 %3, 65534
  br i1 %cmp4, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.3
  %4 = load i32, i32* %result.addr, align 4
  %cmp6 = icmp eq i32 %4, 65535
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %lor.lhs.false, %sw.bb.3
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %if.end.9, %if.end
  %5 = load i32, i32* %result.addr, align 4
  store i32 %5, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then.8, %if.then, %sw.bb
  %6 = load i32, i32* %retval
  ret i32 %6
}

; Function Attrs: nounwind uwtable
define internal i32 @unknown_isName(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  %uenc = alloca %struct.unknown_encoding*, align 8
  %c = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.unknown_encoding*
  store %struct.unknown_encoding* %1, %struct.unknown_encoding** %uenc, align 8
  %2 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %convert = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %2, i32 0, i32 1
  %3 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert, align 8
  %4 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %userData = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %4, i32 0, i32 2
  %5 = load i8*, i8** %userData, align 8
  %6 = load i8*, i8** %p.addr, align 8
  %call = call i32 %3(i8* %5, i8* %6)
  store i32 %call, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %and = and i32 %7, -65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %c, align 4
  %shr = ashr i32 %8, 8
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %9 to i32
  %shl = shl i32 %conv, 3
  %10 = load i32, i32* %c, align 4
  %and1 = and i32 %10, 255
  %shr2 = ashr i32 %and1, 5
  %add = add i32 %shl, %shr2
  %idxprom3 = sext i32 %add to i64
  %arrayidx4 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom3
  %11 = load i32, i32* %arrayidx4, align 4
  %12 = load i32, i32* %c, align 4
  %and5 = and i32 %12, 255
  %and6 = and i32 %and5, 31
  %shl7 = shl i32 1, %and6
  %and8 = and i32 %11, %shl7
  store i32 %and8, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @unknown_isNmstrt(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  %uenc = alloca %struct.unknown_encoding*, align 8
  %c = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.unknown_encoding*
  store %struct.unknown_encoding* %1, %struct.unknown_encoding** %uenc, align 8
  %2 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %convert = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %2, i32 0, i32 1
  %3 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert, align 8
  %4 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %userData = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %4, i32 0, i32 2
  %5 = load i8*, i8** %userData, align 8
  %6 = load i8*, i8** %p.addr, align 8
  %call = call i32 %3(i8* %5, i8* %6)
  store i32 %call, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %and = and i32 %7, -65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %c, align 4
  %shr = ashr i32 %8, 8
  %idxprom = sext i32 %shr to i64
  %arrayidx = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %9 to i32
  %shl = shl i32 %conv, 3
  %10 = load i32, i32* %c, align 4
  %and1 = and i32 %10, 255
  %shr2 = ashr i32 %and1, 5
  %add = add i32 %shl, %shr2
  %idxprom3 = sext i32 %add to i64
  %arrayidx4 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom3
  %11 = load i32, i32* %arrayidx4, align 4
  %12 = load i32, i32* %c, align 4
  %and5 = and i32 %12, 255
  %and6 = and i32 %and5, 31
  %shl7 = shl i32 1, %and6
  %and8 = and i32 %11, %shl7
  store i32 %and8, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @unknown_isInvalid(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  %uenc = alloca %struct.unknown_encoding*, align 8
  %c = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.unknown_encoding*
  store %struct.unknown_encoding* %1, %struct.unknown_encoding** %uenc, align 8
  %2 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %convert = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %2, i32 0, i32 1
  %3 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert, align 8
  %4 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %userData = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %4, i32 0, i32 2
  %5 = load i8*, i8** %userData, align 8
  %6 = load i8*, i8** %p.addr, align 8
  %call = call i32 %3(i8* %5, i8* %6)
  store i32 %call, i32* %c, align 4
  %7 = load i32, i32* %c, align 4
  %and = and i32 %7, -65536
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %entry
  %8 = load i32, i32* %c, align 4
  %call1 = call i32 @checkCharRefNumber(i32 %8)
  %cmp = icmp slt i32 %call1, 0
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %entry
  %9 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define internal void @unknown_toUtf8(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i8** %toP, i8* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i8**, align 8
  %toLim.addr = alloca i8*, align 8
  %uenc = alloca %struct.unknown_encoding*, align 8
  %buf = alloca [4 x i8], align 1
  %utf8 = alloca i8*, align 8
  %n = alloca i32, align 4
  %c = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i8** %toP, i8*** %toP.addr, align 8
  store i8* %toLim, i8** %toLim.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.unknown_encoding*
  store %struct.unknown_encoding* %1, %struct.unknown_encoding** %uenc, align 8
  br label %for.cond

for.cond:                                         ; preds = %do.end, %entry
  %2 = load i8**, i8*** %fromP.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp eq i8* %3, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  %5 = load i8**, i8*** %fromP.addr, align 8
  %6 = load i8*, i8** %5, align 8
  %7 = load i8, i8* %6, align 1
  %idxprom = zext i8 %7 to i64
  %8 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %utf81 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %8, i32 0, i32 4
  %arrayidx = getelementptr [256 x [4 x i8]], [256 x [4 x i8]]* %utf81, i32 0, i64 %idxprom
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %arrayidx, i32 0, i32 0
  store i8* %arraydecay, i8** %utf8, align 8
  %9 = load i8*, i8** %utf8, align 8
  %incdec.ptr = getelementptr i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %utf8, align 8
  %10 = load i8, i8* %9, align 1
  %conv = sext i8 %10 to i32
  store i32 %conv, i32* %n, align 4
  %11 = load i32, i32* %n, align 4
  %cmp2 = icmp eq i32 %11, 0
  br i1 %cmp2, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %if.end
  %12 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %convert = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %12, i32 0, i32 1
  %13 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert, align 8
  %14 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %userData = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %14, i32 0, i32 2
  %15 = load i8*, i8** %userData, align 8
  %16 = load i8**, i8*** %fromP.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %call = call i32 %13(i8* %15, i8* %17)
  store i32 %call, i32* %c, align 4
  %18 = load i32, i32* %c, align 4
  %arraydecay5 = getelementptr inbounds [4 x i8], [4 x i8]* %buf, i32 0, i32 0
  %call6 = call i32 @PyExpat_XmlUtf8Encode(i32 %18, i8* %arraydecay5)
  store i32 %call6, i32* %n, align 4
  %19 = load i32, i32* %n, align 4
  %conv7 = sext i32 %19 to i64
  %20 = load i8*, i8** %toLim.addr, align 8
  %21 = load i8**, i8*** %toP.addr, align 8
  %22 = load i8*, i8** %21, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp8 = icmp sgt i64 %conv7, %sub.ptr.sub
  br i1 %cmp8, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.then.4
  br label %for.end

if.end.11:                                        ; preds = %if.then.4
  %arraydecay12 = getelementptr inbounds [4 x i8], [4 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay12, i8** %utf8, align 8
  %23 = load i8**, i8*** %fromP.addr, align 8
  %24 = load i8*, i8** %23, align 8
  %25 = load i8, i8* %24, align 1
  %idxprom13 = zext i8 %25 to i64
  %26 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %27 = bitcast %struct.encoding* %26 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %27, i32 0, i32 1
  %arrayidx14 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom13
  %28 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %28 to i32
  %sub = sub i32 %conv15, 3
  %29 = load i8**, i8*** %fromP.addr, align 8
  %30 = load i8*, i8** %29, align 8
  %idx.ext = sext i32 %sub to i64
  %add.ptr = getelementptr i8, i8* %30, i64 %idx.ext
  store i8* %add.ptr, i8** %29, align 8
  br label %if.end.25

if.else:                                          ; preds = %if.end
  %31 = load i32, i32* %n, align 4
  %conv16 = sext i32 %31 to i64
  %32 = load i8*, i8** %toLim.addr, align 8
  %33 = load i8**, i8*** %toP.addr, align 8
  %34 = load i8*, i8** %33, align 8
  %sub.ptr.lhs.cast17 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %34 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %cmp20 = icmp sgt i64 %conv16, %sub.ptr.sub19
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.else
  br label %for.end

if.end.23:                                        ; preds = %if.else
  %35 = load i8**, i8*** %fromP.addr, align 8
  %36 = load i8*, i8** %35, align 8
  %incdec.ptr24 = getelementptr i8, i8* %36, i32 1
  store i8* %incdec.ptr24, i8** %35, align 8
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.23, %if.end.11
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.25
  %37 = load i8*, i8** %utf8, align 8
  %incdec.ptr26 = getelementptr i8, i8* %37, i32 1
  store i8* %incdec.ptr26, i8** %utf8, align 8
  %38 = load i8, i8* %37, align 1
  %39 = load i8**, i8*** %toP.addr, align 8
  %40 = load i8*, i8** %39, align 8
  %incdec.ptr27 = getelementptr i8, i8* %40, i32 1
  store i8* %incdec.ptr27, i8** %39, align 8
  store i8 %38, i8* %40, align 1
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %41 = load i32, i32* %n, align 4
  %dec = add i32 %41, -1
  store i32 %dec, i32* %n, align 4
  %cmp28 = icmp ne i32 %dec, 0
  br i1 %cmp28, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %for.cond

for.end:                                          ; preds = %if.then.22, %if.then.10, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @unknown_toUtf16(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i16** %toP, i16* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i16**, align 8
  %toLim.addr = alloca i16*, align 8
  %uenc = alloca %struct.unknown_encoding*, align 8
  %c = alloca i16, align 2
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i16** %toP, i16*** %toP.addr, align 8
  store i16* %toLim, i16** %toLim.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.unknown_encoding*
  store %struct.unknown_encoding* %1, %struct.unknown_encoding** %uenc, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %2 = load i8**, i8*** %fromP.addr, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp ne i8* %3, %4
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %5 = load i16**, i16*** %toP.addr, align 8
  %6 = load i16*, i16** %5, align 8
  %7 = load i16*, i16** %toLim.addr, align 8
  %cmp1 = icmp ne i16* %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8**, i8*** %fromP.addr, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = load i8, i8* %10, align 1
  %idxprom = zext i8 %11 to i64
  %12 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %utf16 = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %12, i32 0, i32 3
  %arrayidx = getelementptr [256 x i16], [256 x i16]* %utf16, i32 0, i64 %idxprom
  %13 = load i16, i16* %arrayidx, align 2
  store i16 %13, i16* %c, align 2
  %14 = load i16, i16* %c, align 2
  %conv = zext i16 %14 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  %15 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %convert = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %15, i32 0, i32 1
  %16 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert, align 8
  %17 = load %struct.unknown_encoding*, %struct.unknown_encoding** %uenc, align 8
  %userData = getelementptr inbounds %struct.unknown_encoding, %struct.unknown_encoding* %17, i32 0, i32 2
  %18 = load i8*, i8** %userData, align 8
  %19 = load i8**, i8*** %fromP.addr, align 8
  %20 = load i8*, i8** %19, align 8
  %call = call i32 %16(i8* %18, i8* %20)
  %conv4 = trunc i32 %call to i16
  store i16 %conv4, i16* %c, align 2
  %21 = load i8**, i8*** %fromP.addr, align 8
  %22 = load i8*, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %idxprom5 = zext i8 %23 to i64
  %24 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %25 = bitcast %struct.encoding* %24 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %25, i32 0, i32 1
  %arrayidx6 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom5
  %26 = load i8, i8* %arrayidx6, align 1
  %conv7 = zext i8 %26 to i32
  %sub = sub i32 %conv7, 3
  %27 = load i8**, i8*** %fromP.addr, align 8
  %28 = load i8*, i8** %27, align 8
  %idx.ext = sext i32 %sub to i64
  %add.ptr = getelementptr i8, i8* %28, i64 %idx.ext
  store i8* %add.ptr, i8** %27, align 8
  br label %if.end

if.else:                                          ; preds = %while.body
  %29 = load i8**, i8*** %fromP.addr, align 8
  %30 = load i8*, i8** %29, align 8
  %incdec.ptr = getelementptr i8, i8* %30, i32 1
  store i8* %incdec.ptr, i8** %29, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %31 = load i16, i16* %c, align 2
  %32 = load i16**, i16*** %toP.addr, align 8
  %33 = load i16*, i16** %32, align 8
  %incdec.ptr8 = getelementptr i16, i16* %33, i32 1
  store i16* %incdec.ptr8, i16** %32, align 8
  store i16 %31, i16* %33, align 2
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define %struct.encoding* @PyExpat_XmlGetUtf8InternalEncoding() #0 {
entry:
  ret %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @internal_utf8_encoding, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define %struct.encoding* @PyExpat_XmlGetUtf16InternalEncoding() #0 {
entry:
  ret %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @internal_little2_encoding, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define i32 @PyExpat_XmlInitEncoding(%struct.INIT_ENCODING* %p, %struct.encoding** %encPtr, i8* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.INIT_ENCODING*, align 8
  %encPtr.addr = alloca %struct.encoding**, align 8
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.INIT_ENCODING* %p, %struct.INIT_ENCODING** %p.addr, align 8
  store %struct.encoding** %encPtr, %struct.encoding*** %encPtr.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %call = call i32 @getEncodingIndex(i8* %0)
  store i32 %call, i32* %i, align 4
  %1 = load i32, i32* %i, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %i, align 4
  %conv = trunc i32 %2 to i8
  %3 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %3, i32 0, i32 0
  %isUtf16 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc, i32 0, i32 15
  store i8 %conv, i8* %isUtf16, align 1
  %4 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc1 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %4, i32 0, i32 0
  %scanners = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc1, i32 0, i32 0
  %arrayidx = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners, i32 0, i64 0
  store i32 (%struct.encoding*, i8*, i8*, i8**)* @initScanProlog, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx, align 8
  %5 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc2 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %5, i32 0, i32 0
  %scanners3 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc2, i32 0, i32 0
  %arrayidx4 = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners3, i32 0, i64 1
  store i32 (%struct.encoding*, i8*, i8*, i8**)* @initScanContent, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx4, align 8
  %6 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc5 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %6, i32 0, i32 0
  %updatePosition = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc5, i32 0, i32 9
  store void (%struct.encoding*, i8*, i8*, %struct.position*)* @initUpdatePosition, void (%struct.encoding*, i8*, i8*, %struct.position*)** %updatePosition, align 8
  %7 = load %struct.encoding**, %struct.encoding*** %encPtr.addr, align 8
  %8 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %encPtr6 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %8, i32 0, i32 1
  store %struct.encoding** %7, %struct.encoding*** %encPtr6, align 8
  %9 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc7 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %9, i32 0, i32 0
  %10 = load %struct.encoding**, %struct.encoding*** %encPtr.addr, align 8
  store %struct.encoding* %initEnc7, %struct.encoding** %10, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @getEncodingIndex(i8* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store i8* %name, i8** %name.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 6, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %1, 6
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %name.addr, align 8
  %3 = load i32, i32* %i, align 4
  %idxprom = sext i32 %3 to i64
  %arrayidx = getelementptr [6 x i8*], [6 x i8*]* @getEncodingIndex.encodingNames, i32 0, i64 %idxprom
  %4 = load i8*, i8** %arrayidx, align 8
  %call = call i32 @streqci(i8* %2, i8* %4)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %for.body
  %5 = load i32, i32* %i, align 4
  store i32 %5, i32* %retval
  br label %return

if.end.3:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.3
  %6 = load i32, i32* %i, align 4
  %inc = add i32 %6, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.2, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @initScanProlog(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.INIT_ENCODING*
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @initScan(%struct.encoding** getelementptr inbounds ([7 x %struct.encoding*], [7 x %struct.encoding*]* @encodings, i32 0, i32 0), %struct.INIT_ENCODING* %1, i32 0, i8* %2, i8* %3, i8** %4)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @initScanContent(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.INIT_ENCODING*
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @initScan(%struct.encoding** getelementptr inbounds ([7 x %struct.encoding*], [7 x %struct.encoding*]* @encodings, i32 0, i32 0), %struct.INIT_ENCODING* %1, i32 1, i8* %2, i8* %3, i8** %4)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal void @initUpdatePosition(%struct.encoding* %enc, i8* %ptr, i8* %end, %struct.position* %pos) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %pos.addr = alloca %struct.position*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %struct.position* %pos, %struct.position** %pos.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %2 = load %struct.position*, %struct.position** %pos.addr, align 8
  call void @normal_updatePosition(%struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @utf8_encoding, i32 0, i32 0), i8* %0, i8* %1, %struct.position* %2)
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @PyExpat_XmlParseXmlDecl(i32 %isGeneralTextEntity, %struct.encoding* %enc, i8* %ptr, i8* %end, i8** %badPtr, i8** %versionPtr, i8** %versionEndPtr, i8** %encodingName, %struct.encoding** %encoding, i32* %standalone) #0 {
entry:
  %isGeneralTextEntity.addr = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %badPtr.addr = alloca i8**, align 8
  %versionPtr.addr = alloca i8**, align 8
  %versionEndPtr.addr = alloca i8**, align 8
  %encodingName.addr = alloca i8**, align 8
  %encoding.addr = alloca %struct.encoding**, align 8
  %standalone.addr = alloca i32*, align 8
  store i32 %isGeneralTextEntity, i32* %isGeneralTextEntity.addr, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %badPtr, i8*** %badPtr.addr, align 8
  store i8** %versionPtr, i8*** %versionPtr.addr, align 8
  store i8** %versionEndPtr, i8*** %versionEndPtr.addr, align 8
  store i8** %encodingName, i8*** %encodingName.addr, align 8
  store %struct.encoding** %encoding, %struct.encoding*** %encoding.addr, align 8
  store i32* %standalone, i32** %standalone.addr, align 8
  %0 = load i32, i32* %isGeneralTextEntity.addr, align 4
  %1 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8**, i8*** %badPtr.addr, align 8
  %5 = load i8**, i8*** %versionPtr.addr, align 8
  %6 = load i8**, i8*** %versionEndPtr.addr, align 8
  %7 = load i8**, i8*** %encodingName.addr, align 8
  %8 = load %struct.encoding**, %struct.encoding*** %encoding.addr, align 8
  %9 = load i32*, i32** %standalone.addr, align 8
  %call = call i32 @doParseXmlDecl(%struct.encoding* (%struct.encoding*, i8*, i8*)* @findEncoding, i32 %0, %struct.encoding* %1, i8* %2, i8* %3, i8** %4, i8** %5, i8** %6, i8** %7, %struct.encoding** %8, i32* %9)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @doParseXmlDecl(%struct.encoding* (%struct.encoding*, i8*, i8*)* %encodingFinder, i32 %isGeneralTextEntity, %struct.encoding* %enc, i8* %ptr, i8* %end, i8** %badPtr, i8** %versionPtr, i8** %versionEndPtr, i8** %encodingName, %struct.encoding** %encoding, i32* %standalone) #0 {
entry:
  %retval = alloca i32, align 4
  %encodingFinder.addr = alloca %struct.encoding* (%struct.encoding*, i8*, i8*)*, align 8
  %isGeneralTextEntity.addr = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %badPtr.addr = alloca i8**, align 8
  %versionPtr.addr = alloca i8**, align 8
  %versionEndPtr.addr = alloca i8**, align 8
  %encodingName.addr = alloca i8**, align 8
  %encoding.addr = alloca %struct.encoding**, align 8
  %standalone.addr = alloca i32*, align 8
  %val = alloca i8*, align 8
  %name = alloca i8*, align 8
  %nameEnd = alloca i8*, align 8
  %c = alloca i32, align 4
  store %struct.encoding* (%struct.encoding*, i8*, i8*)* %encodingFinder, %struct.encoding* (%struct.encoding*, i8*, i8*)** %encodingFinder.addr, align 8
  store i32 %isGeneralTextEntity, i32* %isGeneralTextEntity.addr, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %badPtr, i8*** %badPtr.addr, align 8
  store i8** %versionPtr, i8*** %versionPtr.addr, align 8
  store i8** %versionEndPtr, i8*** %versionEndPtr.addr, align 8
  store i8** %encodingName, i8*** %encodingName.addr, align 8
  store %struct.encoding** %encoding, %struct.encoding*** %encoding.addr, align 8
  store i32* %standalone, i32** %standalone.addr, align 8
  store i8* null, i8** %val, align 8
  store i8* null, i8** %name, align 8
  store i8* null, i8** %nameEnd, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar = getelementptr inbounds %struct.encoding, %struct.encoding* %0, i32 0, i32 13
  %1 = load i32, i32* %minBytesPerChar, align 4
  %mul = mul i32 5, %1
  %2 = load i8*, i8** %ptr.addr, align 8
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr i8, i8* %2, i64 %idx.ext
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %3 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar1 = getelementptr inbounds %struct.encoding, %struct.encoding* %3, i32 0, i32 13
  %4 = load i32, i32* %minBytesPerChar1, align 4
  %mul2 = mul i32 2, %4
  %5 = load i8*, i8** %end.addr, align 8
  %idx.ext3 = sext i32 %mul2 to i64
  %idx.neg = sub i64 0, %idx.ext3
  %add.ptr4 = getelementptr i8, i8* %5, i64 %idx.neg
  store i8* %add.ptr4, i8** %end.addr, align 8
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8*, i8** %end.addr, align 8
  %call = call i32 @parsePseudoAttribute(%struct.encoding* %6, i8* %7, i8* %8, i8** %name, i8** %nameEnd, i8** %val, i8** %ptr.addr)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %9 = load i8*, i8** %name, align 8
  %tobool5 = icmp ne i8* %9, null
  br i1 %tobool5, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %10 = load i8*, i8** %ptr.addr, align 8
  %11 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %10, i8** %11, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %nameMatchesAscii = getelementptr inbounds %struct.encoding, %struct.encoding* %12, i32 0, i32 3
  %13 = load i32 (%struct.encoding*, i8*, i8*, i8*)*, i32 (%struct.encoding*, i8*, i8*, i8*)** %nameMatchesAscii, align 8
  %14 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %15 = load i8*, i8** %name, align 8
  %16 = load i8*, i8** %nameEnd, align 8
  %call6 = call i32 %13(%struct.encoding* %14, i8* %15, i8* %16, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @KW_version, i32 0, i32 0))
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.else, label %if.then.8

if.then.8:                                        ; preds = %if.end
  %17 = load i32, i32* %isGeneralTextEntity.addr, align 4
  %tobool9 = icmp ne i32 %17, 0
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.then.8
  %18 = load i8*, i8** %name, align 8
  %19 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %18, i8** %19, align 8
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.then.8
  br label %if.end.28

if.else:                                          ; preds = %if.end
  %20 = load i8**, i8*** %versionPtr.addr, align 8
  %tobool12 = icmp ne i8** %20, null
  br i1 %tobool12, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.else
  %21 = load i8*, i8** %val, align 8
  %22 = load i8**, i8*** %versionPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  br label %if.end.14

if.end.14:                                        ; preds = %if.then.13, %if.else
  %23 = load i8**, i8*** %versionEndPtr.addr, align 8
  %tobool15 = icmp ne i8** %23, null
  br i1 %tobool15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.end.14
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i8**, i8*** %versionEndPtr.addr, align 8
  store i8* %24, i8** %25, align 8
  br label %if.end.17

if.end.17:                                        ; preds = %if.then.16, %if.end.14
  %26 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8*, i8** %end.addr, align 8
  %call18 = call i32 @parsePseudoAttribute(%struct.encoding* %26, i8* %27, i8* %28, i8** %name, i8** %nameEnd, i8** %val, i8** %ptr.addr)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %29, i8** %30, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %31 = load i8*, i8** %name, align 8
  %tobool22 = icmp ne i8* %31, null
  br i1 %tobool22, label %if.end.27, label %if.then.23

if.then.23:                                       ; preds = %if.end.21
  %32 = load i32, i32* %isGeneralTextEntity.addr, align 4
  %tobool24 = icmp ne i32 %32, 0
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %if.then.23
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %33, i8** %34, align 8
  store i32 0, i32* %retval
  br label %return

if.end.26:                                        ; preds = %if.then.23
  store i32 1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.end.21
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.end.11
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %nameMatchesAscii29 = getelementptr inbounds %struct.encoding, %struct.encoding* %35, i32 0, i32 3
  %36 = load i32 (%struct.encoding*, i8*, i8*, i8*)*, i32 (%struct.encoding*, i8*, i8*, i8*)** %nameMatchesAscii29, align 8
  %37 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %38 = load i8*, i8** %name, align 8
  %39 = load i8*, i8** %nameEnd, align 8
  %call30 = call i32 %36(%struct.encoding* %37, i8* %38, i8* %39, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @KW_encoding, i32 0, i32 0))
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then.32, label %if.end.59

if.then.32:                                       ; preds = %if.end.28
  %40 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %41 = load i8*, i8** %val, align 8
  %42 = load i8*, i8** %end.addr, align 8
  %call33 = call i32 @toAscii(%struct.encoding* %40, i8* %41, i8* %42)
  store i32 %call33, i32* %c, align 4
  %43 = load i32, i32* %c, align 4
  %cmp = icmp sle i32 97, %43
  br i1 %cmp, label %land.lhs.true, label %land.lhs.true.35

land.lhs.true:                                    ; preds = %if.then.32
  %44 = load i32, i32* %c, align 4
  %cmp34 = icmp sle i32 %44, 122
  br i1 %cmp34, label %if.end.40, label %land.lhs.true.35

land.lhs.true.35:                                 ; preds = %land.lhs.true, %if.then.32
  %45 = load i32, i32* %c, align 4
  %cmp36 = icmp sle i32 65, %45
  br i1 %cmp36, label %land.lhs.true.37, label %if.then.39

land.lhs.true.37:                                 ; preds = %land.lhs.true.35
  %46 = load i32, i32* %c, align 4
  %cmp38 = icmp sle i32 %46, 90
  br i1 %cmp38, label %if.end.40, label %if.then.39

if.then.39:                                       ; preds = %land.lhs.true.37, %land.lhs.true.35
  %47 = load i8*, i8** %val, align 8
  %48 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %47, i8** %48, align 8
  store i32 0, i32* %retval
  br label %return

if.end.40:                                        ; preds = %land.lhs.true.37, %land.lhs.true
  %49 = load i8**, i8*** %encodingName.addr, align 8
  %tobool41 = icmp ne i8** %49, null
  br i1 %tobool41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.40
  %50 = load i8*, i8** %val, align 8
  %51 = load i8**, i8*** %encodingName.addr, align 8
  store i8* %50, i8** %51, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %if.end.40
  %52 = load %struct.encoding**, %struct.encoding*** %encoding.addr, align 8
  %tobool44 = icmp ne %struct.encoding** %52, null
  br i1 %tobool44, label %if.then.45, label %if.end.51

if.then.45:                                       ; preds = %if.end.43
  %53 = load %struct.encoding* (%struct.encoding*, i8*, i8*)*, %struct.encoding* (%struct.encoding*, i8*, i8*)** %encodingFinder.addr, align 8
  %54 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %55 = load i8*, i8** %val, align 8
  %56 = load i8*, i8** %ptr.addr, align 8
  %57 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar46 = getelementptr inbounds %struct.encoding, %struct.encoding* %57, i32 0, i32 13
  %58 = load i32, i32* %minBytesPerChar46, align 4
  %idx.ext47 = sext i32 %58 to i64
  %idx.neg48 = sub i64 0, %idx.ext47
  %add.ptr49 = getelementptr i8, i8* %56, i64 %idx.neg48
  %call50 = call %struct.encoding* %53(%struct.encoding* %54, i8* %55, i8* %add.ptr49)
  %59 = load %struct.encoding**, %struct.encoding*** %encoding.addr, align 8
  store %struct.encoding* %call50, %struct.encoding** %59, align 8
  br label %if.end.51

if.end.51:                                        ; preds = %if.then.45, %if.end.43
  %60 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %61 = load i8*, i8** %ptr.addr, align 8
  %62 = load i8*, i8** %end.addr, align 8
  %call52 = call i32 @parsePseudoAttribute(%struct.encoding* %60, i8* %61, i8* %62, i8** %name, i8** %nameEnd, i8** %val, i8** %ptr.addr)
  %tobool53 = icmp ne i32 %call52, 0
  br i1 %tobool53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %if.end.51
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 0, i32* %retval
  br label %return

if.end.55:                                        ; preds = %if.end.51
  %65 = load i8*, i8** %name, align 8
  %tobool56 = icmp ne i8* %65, null
  br i1 %tobool56, label %if.end.58, label %if.then.57

if.then.57:                                       ; preds = %if.end.55
  store i32 1, i32* %retval
  br label %return

if.end.58:                                        ; preds = %if.end.55
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %if.end.28
  %66 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %nameMatchesAscii60 = getelementptr inbounds %struct.encoding, %struct.encoding* %66, i32 0, i32 3
  %67 = load i32 (%struct.encoding*, i8*, i8*, i8*)*, i32 (%struct.encoding*, i8*, i8*, i8*)** %nameMatchesAscii60, align 8
  %68 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %69 = load i8*, i8** %name, align 8
  %70 = load i8*, i8** %nameEnd, align 8
  %call61 = call i32 %67(%struct.encoding* %68, i8* %69, i8* %70, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @KW_standalone, i32 0, i32 0))
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %lor.lhs.false.63, label %if.then.65

lor.lhs.false.63:                                 ; preds = %if.end.59
  %71 = load i32, i32* %isGeneralTextEntity.addr, align 4
  %tobool64 = icmp ne i32 %71, 0
  br i1 %tobool64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %lor.lhs.false.63, %if.end.59
  %72 = load i8*, i8** %name, align 8
  %73 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 0, i32* %retval
  br label %return

if.end.66:                                        ; preds = %lor.lhs.false.63
  %74 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %nameMatchesAscii67 = getelementptr inbounds %struct.encoding, %struct.encoding* %74, i32 0, i32 3
  %75 = load i32 (%struct.encoding*, i8*, i8*, i8*)*, i32 (%struct.encoding*, i8*, i8*, i8*)** %nameMatchesAscii67, align 8
  %76 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %77 = load i8*, i8** %val, align 8
  %78 = load i8*, i8** %ptr.addr, align 8
  %79 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar68 = getelementptr inbounds %struct.encoding, %struct.encoding* %79, i32 0, i32 13
  %80 = load i32, i32* %minBytesPerChar68, align 4
  %idx.ext69 = sext i32 %80 to i64
  %idx.neg70 = sub i64 0, %idx.ext69
  %add.ptr71 = getelementptr i8, i8* %78, i64 %idx.neg70
  %call72 = call i32 %75(%struct.encoding* %76, i8* %77, i8* %add.ptr71, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @KW_yes, i32 0, i32 0))
  %tobool73 = icmp ne i32 %call72, 0
  br i1 %tobool73, label %if.then.74, label %if.else.78

if.then.74:                                       ; preds = %if.end.66
  %81 = load i32*, i32** %standalone.addr, align 8
  %tobool75 = icmp ne i32* %81, null
  br i1 %tobool75, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.then.74
  %82 = load i32*, i32** %standalone.addr, align 8
  store i32 1, i32* %82, align 4
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.76, %if.then.74
  br label %if.end.92

if.else.78:                                       ; preds = %if.end.66
  %83 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %nameMatchesAscii79 = getelementptr inbounds %struct.encoding, %struct.encoding* %83, i32 0, i32 3
  %84 = load i32 (%struct.encoding*, i8*, i8*, i8*)*, i32 (%struct.encoding*, i8*, i8*, i8*)** %nameMatchesAscii79, align 8
  %85 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %86 = load i8*, i8** %val, align 8
  %87 = load i8*, i8** %ptr.addr, align 8
  %88 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar80 = getelementptr inbounds %struct.encoding, %struct.encoding* %88, i32 0, i32 13
  %89 = load i32, i32* %minBytesPerChar80, align 4
  %idx.ext81 = sext i32 %89 to i64
  %idx.neg82 = sub i64 0, %idx.ext81
  %add.ptr83 = getelementptr i8, i8* %87, i64 %idx.neg82
  %call84 = call i32 %84(%struct.encoding* %85, i8* %86, i8* %add.ptr83, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @KW_no, i32 0, i32 0))
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.then.86, label %if.else.90

if.then.86:                                       ; preds = %if.else.78
  %90 = load i32*, i32** %standalone.addr, align 8
  %tobool87 = icmp ne i32* %90, null
  br i1 %tobool87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.then.86
  %91 = load i32*, i32** %standalone.addr, align 8
  store i32 0, i32* %91, align 4
  br label %if.end.89

if.end.89:                                        ; preds = %if.then.88, %if.then.86
  br label %if.end.91

if.else.90:                                       ; preds = %if.else.78
  %92 = load i8*, i8** %val, align 8
  %93 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %92, i8** %93, align 8
  store i32 0, i32* %retval
  br label %return

if.end.91:                                        ; preds = %if.end.89
  br label %if.end.92

if.end.92:                                        ; preds = %if.end.91, %if.end.77
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.92
  %94 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %95 = load i8*, i8** %ptr.addr, align 8
  %96 = load i8*, i8** %end.addr, align 8
  %call93 = call i32 @toAscii(%struct.encoding* %94, i8* %95, i8* %96)
  %call94 = call i32 @isSpace(i32 %call93)
  %tobool95 = icmp ne i32 %call94, 0
  br i1 %tobool95, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %97 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar96 = getelementptr inbounds %struct.encoding, %struct.encoding* %97, i32 0, i32 13
  %98 = load i32, i32* %minBytesPerChar96, align 4
  %99 = load i8*, i8** %ptr.addr, align 8
  %idx.ext97 = sext i32 %98 to i64
  %add.ptr98 = getelementptr i8, i8* %99, i64 %idx.ext97
  store i8* %add.ptr98, i8** %ptr.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %100 = load i8*, i8** %ptr.addr, align 8
  %101 = load i8*, i8** %end.addr, align 8
  %cmp99 = icmp ne i8* %100, %101
  br i1 %cmp99, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %while.end
  %102 = load i8*, i8** %ptr.addr, align 8
  %103 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %102, i8** %103, align 8
  store i32 0, i32* %retval
  br label %return

if.end.101:                                       ; preds = %while.end
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.101, %if.then.100, %if.else.90, %if.then.65, %if.then.57, %if.then.54, %if.then.39, %if.end.26, %if.then.25, %if.then.20, %if.then.10, %if.then
  %104 = load i32, i32* %retval
  ret i32 %104
}

; Function Attrs: nounwind uwtable
define internal %struct.encoding* @findEncoding(%struct.encoding* %enc, i8* %ptr, i8* %end) #0 {
entry:
  %retval = alloca %struct.encoding*, align 8
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %buf = alloca [128 x i8], align 16
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %utf8Convert = getelementptr inbounds %struct.encoding, %struct.encoding* %0, i32 0, i32 11
  %1 = load void (%struct.encoding*, i8**, i8*, i8**, i8*)*, void (%struct.encoding*, i8**, i8*, i8**, i8*)** %utf8Convert, align 8
  %2 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr i8, i8* %4, i64 128
  %add.ptr1 = getelementptr i8, i8* %add.ptr, i64 -1
  call void %1(%struct.encoding* %2, i8** %ptr.addr, i8* %3, i8** %p, i8* %add.ptr1)
  %5 = load i8*, i8** %ptr.addr, align 8
  %6 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %p, align 8
  store i8 0, i8* %7, align 1
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %call = call i32 @streqci(i8* %arraydecay2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @KW_UTF_16, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar = getelementptr inbounds %struct.encoding, %struct.encoding* %8, i32 0, i32 13
  %9 = load i32, i32* %minBytesPerChar, align 4
  %cmp3 = icmp eq i32 %9, 2
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  %10 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  store %struct.encoding* %10, %struct.encoding** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %call7 = call i32 @getEncodingIndex(i8* %arraydecay6)
  store i32 %call7, i32* %i, align 4
  %11 = load i32, i32* %i, align 4
  %cmp8 = icmp eq i32 %11, -1
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.5
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr [7 x %struct.encoding*], [7 x %struct.encoding*]* @encodings, i32 0, i64 %idxprom
  %13 = load %struct.encoding*, %struct.encoding** %arrayidx, align 8
  store %struct.encoding* %13, %struct.encoding** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.9, %if.then.4, %if.then
  %14 = load %struct.encoding*, %struct.encoding** %retval
  ret %struct.encoding* %14
}

; Function Attrs: nounwind uwtable
define %struct.encoding* @PyExpat_XmlGetUtf8InternalEncodingNS() #0 {
entry:
  ret %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @internal_utf8_encoding_ns, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define %struct.encoding* @PyExpat_XmlGetUtf16InternalEncodingNS() #0 {
entry:
  ret %struct.encoding* getelementptr inbounds (%struct.normal_encoding, %struct.normal_encoding* @internal_little2_encoding_ns, i32 0, i32 0)
}

; Function Attrs: nounwind uwtable
define i32 @PyExpat_XmlInitEncodingNS(%struct.INIT_ENCODING* %p, %struct.encoding** %encPtr, i8* %name) #0 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca %struct.INIT_ENCODING*, align 8
  %encPtr.addr = alloca %struct.encoding**, align 8
  %name.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.INIT_ENCODING* %p, %struct.INIT_ENCODING** %p.addr, align 8
  store %struct.encoding** %encPtr, %struct.encoding*** %encPtr.addr, align 8
  store i8* %name, i8** %name.addr, align 8
  %0 = load i8*, i8** %name.addr, align 8
  %call = call i32 @getEncodingIndex(i8* %0)
  store i32 %call, i32* %i, align 4
  %1 = load i32, i32* %i, align 4
  %cmp = icmp eq i32 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i32, i32* %i, align 4
  %conv = trunc i32 %2 to i8
  %3 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %3, i32 0, i32 0
  %isUtf16 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc, i32 0, i32 15
  store i8 %conv, i8* %isUtf16, align 1
  %4 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc1 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %4, i32 0, i32 0
  %scanners = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc1, i32 0, i32 0
  %arrayidx = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners, i32 0, i64 0
  store i32 (%struct.encoding*, i8*, i8*, i8**)* @initScanPrologNS, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx, align 8
  %5 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc2 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %5, i32 0, i32 0
  %scanners3 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc2, i32 0, i32 0
  %arrayidx4 = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners3, i32 0, i64 1
  store i32 (%struct.encoding*, i8*, i8*, i8**)* @initScanContentNS, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx4, align 8
  %6 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc5 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %6, i32 0, i32 0
  %updatePosition = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc5, i32 0, i32 9
  store void (%struct.encoding*, i8*, i8*, %struct.position*)* @initUpdatePosition, void (%struct.encoding*, i8*, i8*, %struct.position*)** %updatePosition, align 8
  %7 = load %struct.encoding**, %struct.encoding*** %encPtr.addr, align 8
  %8 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %encPtr6 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %8, i32 0, i32 1
  store %struct.encoding** %7, %struct.encoding*** %encPtr6, align 8
  %9 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %p.addr, align 8
  %initEnc7 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %9, i32 0, i32 0
  %10 = load %struct.encoding**, %struct.encoding*** %encPtr.addr, align 8
  store %struct.encoding* %initEnc7, %struct.encoding** %10, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define internal i32 @initScanPrologNS(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.INIT_ENCODING*
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @initScan(%struct.encoding** getelementptr inbounds ([7 x %struct.encoding*], [7 x %struct.encoding*]* @encodingsNS, i32 0, i32 0), %struct.INIT_ENCODING* %1, i32 0, i8* %2, i8* %3, i8** %4)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @initScanContentNS(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %1 = bitcast %struct.encoding* %0 to %struct.INIT_ENCODING*
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @initScan(%struct.encoding** getelementptr inbounds ([7 x %struct.encoding*], [7 x %struct.encoding*]* @encodingsNS, i32 0, i32 0), %struct.INIT_ENCODING* %1, i32 1, i8* %2, i8* %3, i8** %4)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define i32 @PyExpat_XmlParseXmlDeclNS(i32 %isGeneralTextEntity, %struct.encoding* %enc, i8* %ptr, i8* %end, i8** %badPtr, i8** %versionPtr, i8** %versionEndPtr, i8** %encodingName, %struct.encoding** %encoding, i32* %standalone) #0 {
entry:
  %isGeneralTextEntity.addr = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %badPtr.addr = alloca i8**, align 8
  %versionPtr.addr = alloca i8**, align 8
  %versionEndPtr.addr = alloca i8**, align 8
  %encodingName.addr = alloca i8**, align 8
  %encoding.addr = alloca %struct.encoding**, align 8
  %standalone.addr = alloca i32*, align 8
  store i32 %isGeneralTextEntity, i32* %isGeneralTextEntity.addr, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %badPtr, i8*** %badPtr.addr, align 8
  store i8** %versionPtr, i8*** %versionPtr.addr, align 8
  store i8** %versionEndPtr, i8*** %versionEndPtr.addr, align 8
  store i8** %encodingName, i8*** %encodingName.addr, align 8
  store %struct.encoding** %encoding, %struct.encoding*** %encoding.addr, align 8
  store i32* %standalone, i32** %standalone.addr, align 8
  %0 = load i32, i32* %isGeneralTextEntity.addr, align 4
  %1 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8**, i8*** %badPtr.addr, align 8
  %5 = load i8**, i8*** %versionPtr.addr, align 8
  %6 = load i8**, i8*** %versionEndPtr.addr, align 8
  %7 = load i8**, i8*** %encodingName.addr, align 8
  %8 = load %struct.encoding**, %struct.encoding*** %encoding.addr, align 8
  %9 = load i32*, i32** %standalone.addr, align 8
  %call = call i32 @doParseXmlDecl(%struct.encoding* (%struct.encoding*, i8*, i8*)* @findEncodingNS, i32 %0, %struct.encoding* %1, i8* %2, i8* %3, i8** %4, i8** %5, i8** %6, i8** %7, %struct.encoding** %8, i32* %9)
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal %struct.encoding* @findEncodingNS(%struct.encoding* %enc, i8* %ptr, i8* %end) #0 {
entry:
  %retval = alloca %struct.encoding*, align 8
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %buf = alloca [128 x i8], align 16
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  %arraydecay = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %utf8Convert = getelementptr inbounds %struct.encoding, %struct.encoding* %0, i32 0, i32 11
  %1 = load void (%struct.encoding*, i8**, i8*, i8**, i8*)*, void (%struct.encoding*, i8**, i8*, i8**, i8*)** %utf8Convert, align 8
  %2 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr i8, i8* %4, i64 128
  %add.ptr1 = getelementptr i8, i8* %add.ptr, i64 -1
  call void %1(%struct.encoding* %2, i8** %ptr.addr, i8* %3, i8** %p, i8* %add.ptr1)
  %5 = load i8*, i8** %ptr.addr, align 8
  %6 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %5, %6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i8*, i8** %p, align 8
  store i8 0, i8* %7, align 1
  %arraydecay2 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %call = call i32 @streqci(i8* %arraydecay2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @KW_UTF_16, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.5

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar = getelementptr inbounds %struct.encoding, %struct.encoding* %8, i32 0, i32 13
  %9 = load i32, i32* %minBytesPerChar, align 4
  %cmp3 = icmp eq i32 %9, 2
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %land.lhs.true
  %10 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  store %struct.encoding* %10, %struct.encoding** %retval
  br label %return

if.end.5:                                         ; preds = %land.lhs.true, %if.end
  %arraydecay6 = getelementptr inbounds [128 x i8], [128 x i8]* %buf, i32 0, i32 0
  %call7 = call i32 @getEncodingIndex(i8* %arraydecay6)
  store i32 %call7, i32* %i, align 4
  %11 = load i32, i32* %i, align 4
  %cmp8 = icmp eq i32 %11, -1
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.5
  store %struct.encoding* null, %struct.encoding** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.5
  %12 = load i32, i32* %i, align 4
  %idxprom = sext i32 %12 to i64
  %arrayidx = getelementptr [7 x %struct.encoding*], [7 x %struct.encoding*]* @encodingsNS, i32 0, i64 %idxprom
  %13 = load %struct.encoding*, %struct.encoding** %arrayidx, align 8
  store %struct.encoding* %13, %struct.encoding** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.9, %if.then.4, %if.then
  %14 = load %struct.encoding*, %struct.encoding** %retval
  ret %struct.encoding* %14
}

; Function Attrs: nounwind uwtable
define %struct.encoding* @PyExpat_XmlInitUnknownEncodingNS(i8* %mem, i32* %table, i32 (i8*, i8*)* %convert, i8* %userData) #0 {
entry:
  %mem.addr = alloca i8*, align 8
  %table.addr = alloca i32*, align 8
  %convert.addr = alloca i32 (i8*, i8*)*, align 8
  %userData.addr = alloca i8*, align 8
  %enc = alloca %struct.encoding*, align 8
  store i8* %mem, i8** %mem.addr, align 8
  store i32* %table, i32** %table.addr, align 8
  store i32 (i8*, i8*)* %convert, i32 (i8*, i8*)** %convert.addr, align 8
  store i8* %userData, i8** %userData.addr, align 8
  %0 = load i8*, i8** %mem.addr, align 8
  %1 = load i32*, i32** %table.addr, align 8
  %2 = load i32 (i8*, i8*)*, i32 (i8*, i8*)** %convert.addr, align 8
  %3 = load i8*, i8** %userData.addr, align 8
  %call = call %struct.encoding* @PyExpat_XmlInitUnknownEncoding(i8* %0, i32* %1, i32 (i8*, i8*)* %2, i8* %3)
  store %struct.encoding* %call, %struct.encoding** %enc, align 8
  %4 = load %struct.encoding*, %struct.encoding** %enc, align 8
  %tobool = icmp ne %struct.encoding* %4, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load %struct.encoding*, %struct.encoding** %enc, align 8
  %6 = bitcast %struct.encoding* %5 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %6, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 58
  store i8 23, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.encoding*, %struct.encoding** %enc, align 8
  ret %struct.encoding* %7
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_prologTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %tok = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default.158 [
    i32 12, label %sw.bb
    i32 13, label %sw.bb.1
    i32 2, label %sw.bb.4
    i32 9, label %sw.bb.22
    i32 21, label %sw.bb.28
    i32 10, label %sw.bb.28
    i32 30, label %sw.bb.46
    i32 35, label %sw.bb.49
    i32 20, label %sw.bb.51
    i32 4, label %sw.bb.53
    i32 31, label %sw.bb.76
    i32 32, label %sw.bb.78
    i32 36, label %sw.bb.96
    i32 11, label %sw.bb.98
    i32 19, label %sw.bb.100
    i32 5, label %sw.bb.103
    i32 6, label %sw.bb.117
    i32 7, label %sw.bb.135
    i32 22, label %sw.bb.153
    i32 24, label %sw.bb.153
    i32 25, label %sw.bb.155
    i32 26, label %sw.bb.155
    i32 27, label %sw.bb.155
    i32 23, label %sw.bb.155
    i32 29, label %sw.bb.157
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %8, i64 1
  %9 = load i8*, i8** %end.addr, align 8
  %10 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @normal_scanLit(i32 12, %struct.encoding* %7, i8* %add.ptr, i8* %9, i8** %10)
  store i32 %call, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end
  %11 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %12, i64 1
  %13 = load i8*, i8** %end.addr, align 8
  %14 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call3 = call i32 @normal_scanLit(i32 13, %struct.encoding* %11, i8* %add.ptr2, i8* %13, i8** %14)
  store i32 %call3, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %if.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr5 = getelementptr i8, i8* %15, i64 1
  store i8* %add.ptr5, i8** %ptr.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %end.addr, align 8
  %cmp6 = icmp eq i8* %16, %17
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %sw.bb.4
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %sw.bb.4
  %18 = load i8*, i8** %ptr.addr, align 8
  %19 = load i8, i8* %18, align 1
  %idxprom10 = zext i8 %19 to i64
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = bitcast %struct.encoding* %20 to %struct.normal_encoding*
  %type11 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %21, i32 0, i32 1
  %arrayidx12 = getelementptr [256 x i8], [256 x i8]* %type11, i32 0, i64 %idxprom10
  %22 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %22 to i32
  switch i32 %conv13, label %sw.epilog [
    i32 16, label %sw.bb.14
    i32 15, label %sw.bb.17
    i32 22, label %sw.bb.20
    i32 24, label %sw.bb.20
    i32 29, label %sw.bb.20
    i32 5, label %sw.bb.20
    i32 6, label %sw.bb.20
    i32 7, label %sw.bb.20
  ]

sw.bb.14:                                         ; preds = %if.end.9
  %23 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr15 = getelementptr i8, i8* %24, i64 1
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call16 = call i32 @normal_scanDecl(%struct.encoding* %23, i8* %add.ptr15, i8* %25, i8** %26)
  store i32 %call16, i32* %retval
  br label %return

sw.bb.17:                                         ; preds = %if.end.9
  %27 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr18 = getelementptr i8, i8* %28, i64 1
  %29 = load i8*, i8** %end.addr, align 8
  %30 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call19 = call i32 @normal_scanPi(%struct.encoding* %27, i8* %add.ptr18, i8* %29, i8** %30)
  store i32 %call19, i32* %retval
  br label %return

sw.bb.20:                                         ; preds = %if.end.9, %if.end.9, %if.end.9, %if.end.9, %if.end.9, %if.end.9
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr21 = getelementptr i8, i8* %31, i64 -1
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr21, i8** %32, align 8
  store i32 29, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.9
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %33, i8** %34, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.22:                                         ; preds = %if.end
  %35 = load i8*, i8** %ptr.addr, align 8
  %add.ptr23 = getelementptr i8, i8* %35, i64 1
  %36 = load i8*, i8** %end.addr, align 8
  %cmp24 = icmp eq i8* %add.ptr23, %36
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.22
  %37 = load i8*, i8** %end.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 -15, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.22
  br label %sw.bb.28

sw.bb.28:                                         ; preds = %if.end, %if.end, %if.end.27
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog.45, %sw.bb.28
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr29 = getelementptr i8, i8* %39, i64 1
  store i8* %add.ptr29, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp30 = icmp eq i8* %40, %41
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %for.cond
  br label %for.end

if.end.33:                                        ; preds = %for.cond
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom34 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type35 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx36 = getelementptr [256 x i8], [256 x i8]* %type35, i32 0, i64 %idxprom34
  %46 = load i8, i8* %arrayidx36, align 1
  %conv37 = zext i8 %46 to i32
  switch i32 %conv37, label %sw.default [
    i32 21, label %sw.bb.38
    i32 10, label %sw.bb.38
    i32 9, label %sw.bb.39
  ]

sw.bb.38:                                         ; preds = %if.end.33, %if.end.33
  br label %sw.epilog.45

sw.bb.39:                                         ; preds = %if.end.33
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr40 = getelementptr i8, i8* %47, i64 1
  %48 = load i8*, i8** %end.addr, align 8
  %cmp41 = icmp ne i8* %add.ptr40, %48
  br i1 %cmp41, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %sw.bb.39
  br label %sw.epilog.45

if.end.44:                                        ; preds = %sw.bb.39
  br label %sw.default

sw.default:                                       ; preds = %if.end.33, %if.end.44
  %49 = load i8*, i8** %ptr.addr, align 8
  %50 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %49, i8** %50, align 8
  store i32 15, i32* %retval
  br label %return

sw.epilog.45:                                     ; preds = %if.then.43, %sw.bb.38
  br label %for.cond

for.end:                                          ; preds = %if.then.32
  %51 = load i8*, i8** %ptr.addr, align 8
  %52 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %51, i8** %52, align 8
  store i32 15, i32* %retval
  br label %return

sw.bb.46:                                         ; preds = %if.end
  %53 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr47 = getelementptr i8, i8* %54, i64 1
  %55 = load i8*, i8** %end.addr, align 8
  %56 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call48 = call i32 @normal_scanPercent(%struct.encoding* %53, i8* %add.ptr47, i8* %55, i8** %56)
  store i32 %call48, i32* %retval
  br label %return

sw.bb.49:                                         ; preds = %if.end
  %57 = load i8*, i8** %ptr.addr, align 8
  %add.ptr50 = getelementptr i8, i8* %57, i64 1
  %58 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr50, i8** %58, align 8
  store i32 38, i32* %retval
  br label %return

sw.bb.51:                                         ; preds = %if.end
  %59 = load i8*, i8** %ptr.addr, align 8
  %add.ptr52 = getelementptr i8, i8* %59, i64 1
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr52, i8** %60, align 8
  store i32 25, i32* %retval
  br label %return

sw.bb.53:                                         ; preds = %if.end
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr54 = getelementptr i8, i8* %61, i64 1
  store i8* %add.ptr54, i8** %ptr.addr, align 8
  %62 = load i8*, i8** %ptr.addr, align 8
  %63 = load i8*, i8** %end.addr, align 8
  %cmp55 = icmp eq i8* %62, %63
  br i1 %cmp55, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %sw.bb.53
  store i32 -26, i32* %retval
  br label %return

if.end.58:                                        ; preds = %sw.bb.53
  %64 = load i8*, i8** %ptr.addr, align 8
  %65 = load i8, i8* %64, align 1
  %conv59 = sext i8 %65 to i32
  %cmp60 = icmp eq i32 %conv59, 93
  br i1 %cmp60, label %if.then.62, label %if.end.75

if.then.62:                                       ; preds = %if.end.58
  %66 = load i8*, i8** %ptr.addr, align 8
  %add.ptr63 = getelementptr i8, i8* %66, i64 1
  %67 = load i8*, i8** %end.addr, align 8
  %cmp64 = icmp eq i8* %add.ptr63, %67
  br i1 %cmp64, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.then.62
  store i32 -1, i32* %retval
  br label %return

if.end.67:                                        ; preds = %if.then.62
  %68 = load i8*, i8** %ptr.addr, align 8
  %add.ptr68 = getelementptr i8, i8* %68, i64 1
  %69 = load i8, i8* %add.ptr68, align 1
  %conv69 = sext i8 %69 to i32
  %cmp70 = icmp eq i32 %conv69, 62
  br i1 %cmp70, label %if.then.72, label %if.end.74

if.then.72:                                       ; preds = %if.end.67
  %70 = load i8*, i8** %ptr.addr, align 8
  %add.ptr73 = getelementptr i8, i8* %70, i64 2
  %71 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr73, i8** %71, align 8
  store i32 34, i32* %retval
  br label %return

if.end.74:                                        ; preds = %if.end.67
  br label %if.end.75

if.end.75:                                        ; preds = %if.end.74, %if.end.58
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 26, i32* %retval
  br label %return

sw.bb.76:                                         ; preds = %if.end
  %74 = load i8*, i8** %ptr.addr, align 8
  %add.ptr77 = getelementptr i8, i8* %74, i64 1
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr77, i8** %75, align 8
  store i32 23, i32* %retval
  br label %return

sw.bb.78:                                         ; preds = %if.end
  %76 = load i8*, i8** %ptr.addr, align 8
  %add.ptr79 = getelementptr i8, i8* %76, i64 1
  store i8* %add.ptr79, i8** %ptr.addr, align 8
  %77 = load i8*, i8** %ptr.addr, align 8
  %78 = load i8*, i8** %end.addr, align 8
  %cmp80 = icmp eq i8* %77, %78
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %sw.bb.78
  store i32 -24, i32* %retval
  br label %return

if.end.83:                                        ; preds = %sw.bb.78
  %79 = load i8*, i8** %ptr.addr, align 8
  %80 = load i8, i8* %79, align 1
  %idxprom84 = zext i8 %80 to i64
  %81 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %82 = bitcast %struct.encoding* %81 to %struct.normal_encoding*
  %type85 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %82, i32 0, i32 1
  %arrayidx86 = getelementptr [256 x i8], [256 x i8]* %type85, i32 0, i64 %idxprom84
  %83 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %83 to i32
  switch i32 %conv87, label %sw.epilog.95 [
    i32 33, label %sw.bb.88
    i32 15, label %sw.bb.90
    i32 34, label %sw.bb.92
    i32 9, label %sw.bb.94
    i32 10, label %sw.bb.94
    i32 21, label %sw.bb.94
    i32 11, label %sw.bb.94
    i32 35, label %sw.bb.94
    i32 36, label %sw.bb.94
    i32 32, label %sw.bb.94
  ]

sw.bb.88:                                         ; preds = %if.end.83
  %84 = load i8*, i8** %ptr.addr, align 8
  %add.ptr89 = getelementptr i8, i8* %84, i64 1
  %85 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr89, i8** %85, align 8
  store i32 36, i32* %retval
  br label %return

sw.bb.90:                                         ; preds = %if.end.83
  %86 = load i8*, i8** %ptr.addr, align 8
  %add.ptr91 = getelementptr i8, i8* %86, i64 1
  %87 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr91, i8** %87, align 8
  store i32 35, i32* %retval
  br label %return

sw.bb.92:                                         ; preds = %if.end.83
  %88 = load i8*, i8** %ptr.addr, align 8
  %add.ptr93 = getelementptr i8, i8* %88, i64 1
  %89 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr93, i8** %89, align 8
  store i32 37, i32* %retval
  br label %return

sw.bb.94:                                         ; preds = %if.end.83, %if.end.83, %if.end.83, %if.end.83, %if.end.83, %if.end.83, %if.end.83
  %90 = load i8*, i8** %ptr.addr, align 8
  %91 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %90, i8** %91, align 8
  store i32 24, i32* %retval
  br label %return

sw.epilog.95:                                     ; preds = %if.end.83
  %92 = load i8*, i8** %ptr.addr, align 8
  %93 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %92, i8** %93, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.96:                                         ; preds = %if.end
  %94 = load i8*, i8** %ptr.addr, align 8
  %add.ptr97 = getelementptr i8, i8* %94, i64 1
  %95 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr97, i8** %95, align 8
  store i32 21, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %if.end
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr99 = getelementptr i8, i8* %96, i64 1
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr99, i8** %97, align 8
  store i32 17, i32* %retval
  br label %return

sw.bb.100:                                        ; preds = %if.end
  %98 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %99 = load i8*, i8** %ptr.addr, align 8
  %add.ptr101 = getelementptr i8, i8* %99, i64 1
  %100 = load i8*, i8** %end.addr, align 8
  %101 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call102 = call i32 @normal_scanPoundName(%struct.encoding* %98, i8* %add.ptr101, i8* %100, i8** %101)
  store i32 %call102, i32* %retval
  br label %return

sw.bb.103:                                        ; preds = %if.end
  %102 = load i8*, i8** %end.addr, align 8
  %103 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %102 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %103 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp104 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %sw.bb.103
  store i32 -2, i32* %retval
  br label %return

if.end.107:                                       ; preds = %sw.bb.103
  %104 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %105 = bitcast %struct.encoding* %104 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %105, i32 0, i32 5
  %106 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %107 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %108 = load i8*, i8** %ptr.addr, align 8
  %call108 = call i32 %106(%struct.encoding* %107, i8* %108)
  %tobool = icmp ne i32 %call108, 0
  br i1 %tobool, label %if.then.109, label %if.end.111

if.then.109:                                      ; preds = %if.end.107
  %109 = load i8*, i8** %ptr.addr, align 8
  %add.ptr110 = getelementptr i8, i8* %109, i64 2
  store i8* %add.ptr110, i8** %ptr.addr, align 8
  store i32 18, i32* %tok, align 4
  br label %sw.epilog.159

if.end.111:                                       ; preds = %if.end.107
  %110 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %111 = bitcast %struct.encoding* %110 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %111, i32 0, i32 2
  %112 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %113 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %114 = load i8*, i8** %ptr.addr, align 8
  %call112 = call i32 %112(%struct.encoding* %113, i8* %114)
  %tobool113 = icmp ne i32 %call112, 0
  br i1 %tobool113, label %if.then.114, label %if.end.116

if.then.114:                                      ; preds = %if.end.111
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr115 = getelementptr i8, i8* %115, i64 2
  store i8* %add.ptr115, i8** %ptr.addr, align 8
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.159

if.end.116:                                       ; preds = %if.end.111
  %116 = load i8*, i8** %ptr.addr, align 8
  %117 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %116, i8** %117, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.117:                                        ; preds = %if.end
  %118 = load i8*, i8** %end.addr, align 8
  %119 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast118 = ptrtoint i8* %118 to i64
  %sub.ptr.rhs.cast119 = ptrtoint i8* %119 to i64
  %sub.ptr.sub120 = sub i64 %sub.ptr.lhs.cast118, %sub.ptr.rhs.cast119
  %cmp121 = icmp slt i64 %sub.ptr.sub120, 3
  br i1 %cmp121, label %if.then.123, label %if.end.124

if.then.123:                                      ; preds = %sw.bb.117
  store i32 -2, i32* %retval
  br label %return

if.end.124:                                       ; preds = %sw.bb.117
  %120 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %121 = bitcast %struct.encoding* %120 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %121, i32 0, i32 6
  %122 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %123 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %124 = load i8*, i8** %ptr.addr, align 8
  %call125 = call i32 %122(%struct.encoding* %123, i8* %124)
  %tobool126 = icmp ne i32 %call125, 0
  br i1 %tobool126, label %if.then.127, label %if.end.129

if.then.127:                                      ; preds = %if.end.124
  %125 = load i8*, i8** %ptr.addr, align 8
  %add.ptr128 = getelementptr i8, i8* %125, i64 3
  store i8* %add.ptr128, i8** %ptr.addr, align 8
  store i32 18, i32* %tok, align 4
  br label %sw.epilog.159

if.end.129:                                       ; preds = %if.end.124
  %126 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %127 = bitcast %struct.encoding* %126 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %127, i32 0, i32 3
  %128 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %129 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %130 = load i8*, i8** %ptr.addr, align 8
  %call130 = call i32 %128(%struct.encoding* %129, i8* %130)
  %tobool131 = icmp ne i32 %call130, 0
  br i1 %tobool131, label %if.then.132, label %if.end.134

if.then.132:                                      ; preds = %if.end.129
  %131 = load i8*, i8** %ptr.addr, align 8
  %add.ptr133 = getelementptr i8, i8* %131, i64 3
  store i8* %add.ptr133, i8** %ptr.addr, align 8
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.159

if.end.134:                                       ; preds = %if.end.129
  %132 = load i8*, i8** %ptr.addr, align 8
  %133 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %132, i8** %133, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.135:                                        ; preds = %if.end
  %134 = load i8*, i8** %end.addr, align 8
  %135 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast136 = ptrtoint i8* %134 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %135 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  %cmp139 = icmp slt i64 %sub.ptr.sub138, 4
  br i1 %cmp139, label %if.then.141, label %if.end.142

if.then.141:                                      ; preds = %sw.bb.135
  store i32 -2, i32* %retval
  br label %return

if.end.142:                                       ; preds = %sw.bb.135
  %136 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %137 = bitcast %struct.encoding* %136 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %137, i32 0, i32 7
  %138 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %139 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %140 = load i8*, i8** %ptr.addr, align 8
  %call143 = call i32 %138(%struct.encoding* %139, i8* %140)
  %tobool144 = icmp ne i32 %call143, 0
  br i1 %tobool144, label %if.then.145, label %if.end.147

if.then.145:                                      ; preds = %if.end.142
  %141 = load i8*, i8** %ptr.addr, align 8
  %add.ptr146 = getelementptr i8, i8* %141, i64 4
  store i8* %add.ptr146, i8** %ptr.addr, align 8
  store i32 18, i32* %tok, align 4
  br label %sw.epilog.159

if.end.147:                                       ; preds = %if.end.142
  %142 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %143 = bitcast %struct.encoding* %142 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %143, i32 0, i32 4
  %144 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %145 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %146 = load i8*, i8** %ptr.addr, align 8
  %call148 = call i32 %144(%struct.encoding* %145, i8* %146)
  %tobool149 = icmp ne i32 %call148, 0
  br i1 %tobool149, label %if.then.150, label %if.end.152

if.then.150:                                      ; preds = %if.end.147
  %147 = load i8*, i8** %ptr.addr, align 8
  %add.ptr151 = getelementptr i8, i8* %147, i64 4
  store i8* %add.ptr151, i8** %ptr.addr, align 8
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.159

if.end.152:                                       ; preds = %if.end.147
  %148 = load i8*, i8** %ptr.addr, align 8
  %149 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %148, i8** %149, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.153:                                        ; preds = %if.end, %if.end
  store i32 18, i32* %tok, align 4
  %150 = load i8*, i8** %ptr.addr, align 8
  %add.ptr154 = getelementptr i8, i8* %150, i64 1
  store i8* %add.ptr154, i8** %ptr.addr, align 8
  br label %sw.epilog.159

sw.bb.155:                                        ; preds = %if.end, %if.end, %if.end, %if.end
  store i32 19, i32* %tok, align 4
  %151 = load i8*, i8** %ptr.addr, align 8
  %add.ptr156 = getelementptr i8, i8* %151, i64 1
  store i8* %add.ptr156, i8** %ptr.addr, align 8
  br label %sw.epilog.159

sw.bb.157:                                        ; preds = %if.end
  br label %sw.default.158

sw.default.158:                                   ; preds = %if.end, %sw.bb.157
  %152 = load i8*, i8** %ptr.addr, align 8
  %153 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %152, i8** %153, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.159:                                    ; preds = %sw.bb.155, %sw.bb.153, %if.then.150, %if.then.145, %if.then.132, %if.then.127, %if.then.114, %if.then.109
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.291, %sw.epilog.159
  %154 = load i8*, i8** %ptr.addr, align 8
  %155 = load i8*, i8** %end.addr, align 8
  %cmp160 = icmp ne i8* %154, %155
  br i1 %cmp160, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %156 = load i8*, i8** %ptr.addr, align 8
  %157 = load i8, i8* %156, align 1
  %idxprom162 = zext i8 %157 to i64
  %158 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %159 = bitcast %struct.encoding* %158 to %struct.normal_encoding*
  %type163 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %159, i32 0, i32 1
  %arrayidx164 = getelementptr [256 x i8], [256 x i8]* %type163, i32 0, i64 %idxprom162
  %160 = load i8, i8* %arrayidx164, align 1
  %conv165 = zext i8 %160 to i32
  switch i32 %conv165, label %sw.default.290 [
    i32 29, label %sw.bb.166
    i32 22, label %sw.bb.167
    i32 24, label %sw.bb.167
    i32 25, label %sw.bb.167
    i32 26, label %sw.bb.167
    i32 27, label %sw.bb.167
    i32 5, label %sw.bb.169
    i32 6, label %sw.bb.183
    i32 7, label %sw.bb.197
    i32 11, label %sw.bb.211
    i32 32, label %sw.bb.211
    i32 35, label %sw.bb.211
    i32 36, label %sw.bb.211
    i32 20, label %sw.bb.211
    i32 30, label %sw.bb.211
    i32 21, label %sw.bb.211
    i32 9, label %sw.bb.211
    i32 10, label %sw.bb.211
    i32 23, label %sw.bb.212
    i32 34, label %sw.bb.272
    i32 33, label %sw.bb.278
    i32 15, label %sw.bb.284
  ]

sw.bb.166:                                        ; preds = %while.body
  %161 = load i8*, i8** %ptr.addr, align 8
  %162 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %161, i8** %162, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.167:                                        ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %163 = load i8*, i8** %ptr.addr, align 8
  %add.ptr168 = getelementptr i8, i8* %163, i64 1
  store i8* %add.ptr168, i8** %ptr.addr, align 8
  br label %sw.epilog.291

sw.bb.169:                                        ; preds = %while.body
  %164 = load i8*, i8** %end.addr, align 8
  %165 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast170 = ptrtoint i8* %164 to i64
  %sub.ptr.rhs.cast171 = ptrtoint i8* %165 to i64
  %sub.ptr.sub172 = sub i64 %sub.ptr.lhs.cast170, %sub.ptr.rhs.cast171
  %cmp173 = icmp slt i64 %sub.ptr.sub172, 2
  br i1 %cmp173, label %if.then.175, label %if.end.176

if.then.175:                                      ; preds = %sw.bb.169
  store i32 -2, i32* %retval
  br label %return

if.end.176:                                       ; preds = %sw.bb.169
  %166 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %167 = bitcast %struct.encoding* %166 to %struct.normal_encoding*
  %isName2177 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %167, i32 0, i32 2
  %168 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2177, align 8
  %169 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %170 = load i8*, i8** %ptr.addr, align 8
  %call178 = call i32 %168(%struct.encoding* %169, i8* %170)
  %tobool179 = icmp ne i32 %call178, 0
  br i1 %tobool179, label %if.end.181, label %if.then.180

if.then.180:                                      ; preds = %if.end.176
  %171 = load i8*, i8** %ptr.addr, align 8
  %172 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %171, i8** %172, align 8
  store i32 0, i32* %retval
  br label %return

if.end.181:                                       ; preds = %if.end.176
  %173 = load i8*, i8** %ptr.addr, align 8
  %add.ptr182 = getelementptr i8, i8* %173, i64 2
  store i8* %add.ptr182, i8** %ptr.addr, align 8
  br label %sw.epilog.291

sw.bb.183:                                        ; preds = %while.body
  %174 = load i8*, i8** %end.addr, align 8
  %175 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast184 = ptrtoint i8* %174 to i64
  %sub.ptr.rhs.cast185 = ptrtoint i8* %175 to i64
  %sub.ptr.sub186 = sub i64 %sub.ptr.lhs.cast184, %sub.ptr.rhs.cast185
  %cmp187 = icmp slt i64 %sub.ptr.sub186, 3
  br i1 %cmp187, label %if.then.189, label %if.end.190

if.then.189:                                      ; preds = %sw.bb.183
  store i32 -2, i32* %retval
  br label %return

if.end.190:                                       ; preds = %sw.bb.183
  %176 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %177 = bitcast %struct.encoding* %176 to %struct.normal_encoding*
  %isName3191 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %177, i32 0, i32 3
  %178 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3191, align 8
  %179 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %180 = load i8*, i8** %ptr.addr, align 8
  %call192 = call i32 %178(%struct.encoding* %179, i8* %180)
  %tobool193 = icmp ne i32 %call192, 0
  br i1 %tobool193, label %if.end.195, label %if.then.194

if.then.194:                                      ; preds = %if.end.190
  %181 = load i8*, i8** %ptr.addr, align 8
  %182 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %181, i8** %182, align 8
  store i32 0, i32* %retval
  br label %return

if.end.195:                                       ; preds = %if.end.190
  %183 = load i8*, i8** %ptr.addr, align 8
  %add.ptr196 = getelementptr i8, i8* %183, i64 3
  store i8* %add.ptr196, i8** %ptr.addr, align 8
  br label %sw.epilog.291

sw.bb.197:                                        ; preds = %while.body
  %184 = load i8*, i8** %end.addr, align 8
  %185 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast198 = ptrtoint i8* %184 to i64
  %sub.ptr.rhs.cast199 = ptrtoint i8* %185 to i64
  %sub.ptr.sub200 = sub i64 %sub.ptr.lhs.cast198, %sub.ptr.rhs.cast199
  %cmp201 = icmp slt i64 %sub.ptr.sub200, 4
  br i1 %cmp201, label %if.then.203, label %if.end.204

if.then.203:                                      ; preds = %sw.bb.197
  store i32 -2, i32* %retval
  br label %return

if.end.204:                                       ; preds = %sw.bb.197
  %186 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %187 = bitcast %struct.encoding* %186 to %struct.normal_encoding*
  %isName4205 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %187, i32 0, i32 4
  %188 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4205, align 8
  %189 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %190 = load i8*, i8** %ptr.addr, align 8
  %call206 = call i32 %188(%struct.encoding* %189, i8* %190)
  %tobool207 = icmp ne i32 %call206, 0
  br i1 %tobool207, label %if.end.209, label %if.then.208

if.then.208:                                      ; preds = %if.end.204
  %191 = load i8*, i8** %ptr.addr, align 8
  %192 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %191, i8** %192, align 8
  store i32 0, i32* %retval
  br label %return

if.end.209:                                       ; preds = %if.end.204
  %193 = load i8*, i8** %ptr.addr, align 8
  %add.ptr210 = getelementptr i8, i8* %193, i64 4
  store i8* %add.ptr210, i8** %ptr.addr, align 8
  br label %sw.epilog.291

sw.bb.211:                                        ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %194 = load i8*, i8** %ptr.addr, align 8
  %195 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %194, i8** %195, align 8
  %196 = load i32, i32* %tok, align 4
  store i32 %196, i32* %retval
  br label %return

sw.bb.212:                                        ; preds = %while.body
  %197 = load i8*, i8** %ptr.addr, align 8
  %add.ptr213 = getelementptr i8, i8* %197, i64 1
  store i8* %add.ptr213, i8** %ptr.addr, align 8
  %198 = load i32, i32* %tok, align 4
  switch i32 %198, label %sw.epilog.271 [
    i32 18, label %sw.bb.214
    i32 41, label %sw.bb.270
  ]

sw.bb.214:                                        ; preds = %sw.bb.212
  %199 = load i8*, i8** %ptr.addr, align 8
  %200 = load i8*, i8** %end.addr, align 8
  %cmp215 = icmp eq i8* %199, %200
  br i1 %cmp215, label %if.then.217, label %if.end.218

if.then.217:                                      ; preds = %sw.bb.214
  store i32 -1, i32* %retval
  br label %return

if.end.218:                                       ; preds = %sw.bb.214
  store i32 41, i32* %tok, align 4
  %201 = load i8*, i8** %ptr.addr, align 8
  %202 = load i8, i8* %201, align 1
  %idxprom219 = zext i8 %202 to i64
  %203 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %204 = bitcast %struct.encoding* %203 to %struct.normal_encoding*
  %type220 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %204, i32 0, i32 1
  %arrayidx221 = getelementptr [256 x i8], [256 x i8]* %type220, i32 0, i64 %idxprom219
  %205 = load i8, i8* %arrayidx221, align 1
  %conv222 = zext i8 %205 to i32
  switch i32 %conv222, label %sw.default.268 [
    i32 29, label %sw.bb.223
    i32 22, label %sw.bb.224
    i32 24, label %sw.bb.224
    i32 25, label %sw.bb.224
    i32 26, label %sw.bb.224
    i32 27, label %sw.bb.224
    i32 5, label %sw.bb.226
    i32 6, label %sw.bb.240
    i32 7, label %sw.bb.254
  ]

sw.bb.223:                                        ; preds = %if.end.218
  %206 = load i8*, i8** %ptr.addr, align 8
  %207 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %206, i8** %207, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.224:                                        ; preds = %if.end.218, %if.end.218, %if.end.218, %if.end.218, %if.end.218
  %208 = load i8*, i8** %ptr.addr, align 8
  %add.ptr225 = getelementptr i8, i8* %208, i64 1
  store i8* %add.ptr225, i8** %ptr.addr, align 8
  br label %sw.epilog.269

sw.bb.226:                                        ; preds = %if.end.218
  %209 = load i8*, i8** %end.addr, align 8
  %210 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast227 = ptrtoint i8* %209 to i64
  %sub.ptr.rhs.cast228 = ptrtoint i8* %210 to i64
  %sub.ptr.sub229 = sub i64 %sub.ptr.lhs.cast227, %sub.ptr.rhs.cast228
  %cmp230 = icmp slt i64 %sub.ptr.sub229, 2
  br i1 %cmp230, label %if.then.232, label %if.end.233

if.then.232:                                      ; preds = %sw.bb.226
  store i32 -2, i32* %retval
  br label %return

if.end.233:                                       ; preds = %sw.bb.226
  %211 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %212 = bitcast %struct.encoding* %211 to %struct.normal_encoding*
  %isName2234 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %212, i32 0, i32 2
  %213 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2234, align 8
  %214 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %215 = load i8*, i8** %ptr.addr, align 8
  %call235 = call i32 %213(%struct.encoding* %214, i8* %215)
  %tobool236 = icmp ne i32 %call235, 0
  br i1 %tobool236, label %if.end.238, label %if.then.237

if.then.237:                                      ; preds = %if.end.233
  %216 = load i8*, i8** %ptr.addr, align 8
  %217 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %216, i8** %217, align 8
  store i32 0, i32* %retval
  br label %return

if.end.238:                                       ; preds = %if.end.233
  %218 = load i8*, i8** %ptr.addr, align 8
  %add.ptr239 = getelementptr i8, i8* %218, i64 2
  store i8* %add.ptr239, i8** %ptr.addr, align 8
  br label %sw.epilog.269

sw.bb.240:                                        ; preds = %if.end.218
  %219 = load i8*, i8** %end.addr, align 8
  %220 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast241 = ptrtoint i8* %219 to i64
  %sub.ptr.rhs.cast242 = ptrtoint i8* %220 to i64
  %sub.ptr.sub243 = sub i64 %sub.ptr.lhs.cast241, %sub.ptr.rhs.cast242
  %cmp244 = icmp slt i64 %sub.ptr.sub243, 3
  br i1 %cmp244, label %if.then.246, label %if.end.247

if.then.246:                                      ; preds = %sw.bb.240
  store i32 -2, i32* %retval
  br label %return

if.end.247:                                       ; preds = %sw.bb.240
  %221 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %222 = bitcast %struct.encoding* %221 to %struct.normal_encoding*
  %isName3248 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %222, i32 0, i32 3
  %223 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3248, align 8
  %224 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %225 = load i8*, i8** %ptr.addr, align 8
  %call249 = call i32 %223(%struct.encoding* %224, i8* %225)
  %tobool250 = icmp ne i32 %call249, 0
  br i1 %tobool250, label %if.end.252, label %if.then.251

if.then.251:                                      ; preds = %if.end.247
  %226 = load i8*, i8** %ptr.addr, align 8
  %227 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %226, i8** %227, align 8
  store i32 0, i32* %retval
  br label %return

if.end.252:                                       ; preds = %if.end.247
  %228 = load i8*, i8** %ptr.addr, align 8
  %add.ptr253 = getelementptr i8, i8* %228, i64 3
  store i8* %add.ptr253, i8** %ptr.addr, align 8
  br label %sw.epilog.269

sw.bb.254:                                        ; preds = %if.end.218
  %229 = load i8*, i8** %end.addr, align 8
  %230 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast255 = ptrtoint i8* %229 to i64
  %sub.ptr.rhs.cast256 = ptrtoint i8* %230 to i64
  %sub.ptr.sub257 = sub i64 %sub.ptr.lhs.cast255, %sub.ptr.rhs.cast256
  %cmp258 = icmp slt i64 %sub.ptr.sub257, 4
  br i1 %cmp258, label %if.then.260, label %if.end.261

if.then.260:                                      ; preds = %sw.bb.254
  store i32 -2, i32* %retval
  br label %return

if.end.261:                                       ; preds = %sw.bb.254
  %231 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %232 = bitcast %struct.encoding* %231 to %struct.normal_encoding*
  %isName4262 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %232, i32 0, i32 4
  %233 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4262, align 8
  %234 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %235 = load i8*, i8** %ptr.addr, align 8
  %call263 = call i32 %233(%struct.encoding* %234, i8* %235)
  %tobool264 = icmp ne i32 %call263, 0
  br i1 %tobool264, label %if.end.266, label %if.then.265

if.then.265:                                      ; preds = %if.end.261
  %236 = load i8*, i8** %ptr.addr, align 8
  %237 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %236, i8** %237, align 8
  store i32 0, i32* %retval
  br label %return

if.end.266:                                       ; preds = %if.end.261
  %238 = load i8*, i8** %ptr.addr, align 8
  %add.ptr267 = getelementptr i8, i8* %238, i64 4
  store i8* %add.ptr267, i8** %ptr.addr, align 8
  br label %sw.epilog.269

sw.default.268:                                   ; preds = %if.end.218
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.269

sw.epilog.269:                                    ; preds = %sw.default.268, %if.end.266, %if.end.252, %if.end.238, %sw.bb.224
  br label %sw.epilog.271

sw.bb.270:                                        ; preds = %sw.bb.212
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.271

sw.epilog.271:                                    ; preds = %sw.bb.212, %sw.bb.270, %sw.epilog.269
  br label %sw.epilog.291

sw.bb.272:                                        ; preds = %while.body
  %239 = load i32, i32* %tok, align 4
  %cmp273 = icmp eq i32 %239, 19
  br i1 %cmp273, label %if.then.275, label %if.end.276

if.then.275:                                      ; preds = %sw.bb.272
  %240 = load i8*, i8** %ptr.addr, align 8
  %241 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %240, i8** %241, align 8
  store i32 0, i32* %retval
  br label %return

if.end.276:                                       ; preds = %sw.bb.272
  %242 = load i8*, i8** %ptr.addr, align 8
  %add.ptr277 = getelementptr i8, i8* %242, i64 1
  %243 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr277, i8** %243, align 8
  store i32 32, i32* %retval
  br label %return

sw.bb.278:                                        ; preds = %while.body
  %244 = load i32, i32* %tok, align 4
  %cmp279 = icmp eq i32 %244, 19
  br i1 %cmp279, label %if.then.281, label %if.end.282

if.then.281:                                      ; preds = %sw.bb.278
  %245 = load i8*, i8** %ptr.addr, align 8
  %246 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %245, i8** %246, align 8
  store i32 0, i32* %retval
  br label %return

if.end.282:                                       ; preds = %sw.bb.278
  %247 = load i8*, i8** %ptr.addr, align 8
  %add.ptr283 = getelementptr i8, i8* %247, i64 1
  %248 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr283, i8** %248, align 8
  store i32 31, i32* %retval
  br label %return

sw.bb.284:                                        ; preds = %while.body
  %249 = load i32, i32* %tok, align 4
  %cmp285 = icmp eq i32 %249, 19
  br i1 %cmp285, label %if.then.287, label %if.end.288

if.then.287:                                      ; preds = %sw.bb.284
  %250 = load i8*, i8** %ptr.addr, align 8
  %251 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %250, i8** %251, align 8
  store i32 0, i32* %retval
  br label %return

if.end.288:                                       ; preds = %sw.bb.284
  %252 = load i8*, i8** %ptr.addr, align 8
  %add.ptr289 = getelementptr i8, i8* %252, i64 1
  %253 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr289, i8** %253, align 8
  store i32 30, i32* %retval
  br label %return

sw.default.290:                                   ; preds = %while.body
  %254 = load i8*, i8** %ptr.addr, align 8
  %255 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %254, i8** %255, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.291:                                    ; preds = %sw.epilog.271, %if.end.209, %if.end.195, %if.end.181, %sw.bb.167
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %256 = load i32, i32* %tok, align 4
  %sub = sub i32 0, %256
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.290, %if.end.288, %if.then.287, %if.end.282, %if.then.281, %if.end.276, %if.then.275, %if.then.265, %if.then.260, %if.then.251, %if.then.246, %if.then.237, %if.then.232, %sw.bb.223, %if.then.217, %sw.bb.211, %if.then.208, %if.then.203, %if.then.194, %if.then.189, %if.then.180, %if.then.175, %sw.bb.166, %sw.default.158, %if.end.152, %if.then.141, %if.end.134, %if.then.123, %if.end.116, %if.then.106, %sw.bb.100, %sw.bb.98, %sw.bb.96, %sw.epilog.95, %sw.bb.94, %sw.bb.92, %sw.bb.90, %sw.bb.88, %if.then.82, %sw.bb.76, %if.end.75, %if.then.72, %if.then.66, %if.then.57, %sw.bb.51, %sw.bb.49, %sw.bb.46, %for.end, %sw.default, %if.then.26, %sw.epilog, %sw.bb.20, %sw.bb.17, %sw.bb.14, %if.then.8, %sw.bb.1, %sw.bb, %if.then
  %257 = load i32, i32* %retval
  ret i32 %257
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_contentTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.1
    i32 9, label %sw.bb.4
    i32 10, label %sw.bb.19
    i32 4, label %sw.bb.21
    i32 5, label %sw.bb.43
    i32 6, label %sw.bb.52
    i32 7, label %sw.bb.65
    i32 0, label %sw.bb.78
    i32 1, label %sw.bb.78
    i32 8, label %sw.bb.78
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %8, i64 1
  %9 = load i8*, i8** %end.addr, align 8
  %10 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @normal_scanLt(%struct.encoding* %7, i8* %add.ptr, i8* %9, i8** %10)
  store i32 %call, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end
  %11 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %12, i64 1
  %13 = load i8*, i8** %end.addr, align 8
  %14 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call3 = call i32 @normal_scanRef(%struct.encoding* %11, i8* %add.ptr2, i8* %13, i8** %14)
  store i32 %call3, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %if.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr5 = getelementptr i8, i8* %15, i64 1
  store i8* %add.ptr5, i8** %ptr.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %end.addr, align 8
  %cmp6 = icmp eq i8* %16, %17
  br i1 %cmp6, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %sw.bb.4
  store i32 -3, i32* %retval
  br label %return

if.end.9:                                         ; preds = %sw.bb.4
  %18 = load i8*, i8** %ptr.addr, align 8
  %19 = load i8, i8* %18, align 1
  %idxprom10 = zext i8 %19 to i64
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = bitcast %struct.encoding* %20 to %struct.normal_encoding*
  %type11 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %21, i32 0, i32 1
  %arrayidx12 = getelementptr [256 x i8], [256 x i8]* %type11, i32 0, i64 %idxprom10
  %22 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %22 to i32
  %cmp14 = icmp eq i32 %conv13, 10
  br i1 %cmp14, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.end.9
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %23, i64 1
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %if.end.9
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %24, i8** %25, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %if.end
  %26 = load i8*, i8** %ptr.addr, align 8
  %add.ptr20 = getelementptr i8, i8* %26, i64 1
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr20, i8** %27, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.21:                                         ; preds = %if.end
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %28, i64 1
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %end.addr, align 8
  %cmp23 = icmp eq i8* %29, %30
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.21
  store i32 -5, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.21
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8, i8* %31, align 1
  %conv27 = sext i8 %32 to i32
  %cmp28 = icmp eq i32 %conv27, 93
  br i1 %cmp28, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %if.end.26
  br label %sw.epilog

if.end.31:                                        ; preds = %if.end.26
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr32 = getelementptr i8, i8* %33, i64 1
  store i8* %add.ptr32, i8** %ptr.addr, align 8
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8*, i8** %end.addr, align 8
  %cmp33 = icmp eq i8* %34, %35
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.31
  store i32 -5, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.end.31
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i8, i8* %36, align 1
  %conv37 = sext i8 %37 to i32
  %cmp38 = icmp eq i32 %conv37, 62
  br i1 %cmp38, label %if.end.42, label %if.then.40

if.then.40:                                       ; preds = %if.end.36
  %38 = load i8*, i8** %ptr.addr, align 8
  %add.ptr41 = getelementptr i8, i8* %38, i64 -1
  store i8* %add.ptr41, i8** %ptr.addr, align 8
  br label %sw.epilog

if.end.42:                                        ; preds = %if.end.36
  %39 = load i8*, i8** %ptr.addr, align 8
  %40 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %39, i8** %40, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %if.end
  %41 = load i8*, i8** %end.addr, align 8
  %42 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %41 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %42 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp44 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp44, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %sw.bb.43
  store i32 -2, i32* %retval
  br label %return

if.end.47:                                        ; preds = %sw.bb.43
  %43 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %44 = bitcast %struct.encoding* %43 to %struct.normal_encoding*
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %44, i32 0, i32 8
  %45 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = load i8*, i8** %ptr.addr, align 8
  %call48 = call i32 %45(%struct.encoding* %46, i8* %47)
  %tobool = icmp ne i32 %call48, 0
  br i1 %tobool, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.end.47
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %48, i8** %49, align 8
  store i32 0, i32* %retval
  br label %return

if.end.50:                                        ; preds = %if.end.47
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr51 = getelementptr i8, i8* %50, i64 2
  store i8* %add.ptr51, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.52:                                         ; preds = %if.end
  %51 = load i8*, i8** %end.addr, align 8
  %52 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast53 = ptrtoint i8* %51 to i64
  %sub.ptr.rhs.cast54 = ptrtoint i8* %52 to i64
  %sub.ptr.sub55 = sub i64 %sub.ptr.lhs.cast53, %sub.ptr.rhs.cast54
  %cmp56 = icmp slt i64 %sub.ptr.sub55, 3
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %sw.bb.52
  store i32 -2, i32* %retval
  br label %return

if.end.59:                                        ; preds = %sw.bb.52
  %53 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %54 = bitcast %struct.encoding* %53 to %struct.normal_encoding*
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %54, i32 0, i32 9
  %55 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %56 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %57 = load i8*, i8** %ptr.addr, align 8
  %call60 = call i32 %55(%struct.encoding* %56, i8* %57)
  %tobool61 = icmp ne i32 %call60, 0
  br i1 %tobool61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.59
  %58 = load i8*, i8** %ptr.addr, align 8
  %59 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %58, i8** %59, align 8
  store i32 0, i32* %retval
  br label %return

if.end.63:                                        ; preds = %if.end.59
  %60 = load i8*, i8** %ptr.addr, align 8
  %add.ptr64 = getelementptr i8, i8* %60, i64 3
  store i8* %add.ptr64, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.65:                                         ; preds = %if.end
  %61 = load i8*, i8** %end.addr, align 8
  %62 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast66 = ptrtoint i8* %61 to i64
  %sub.ptr.rhs.cast67 = ptrtoint i8* %62 to i64
  %sub.ptr.sub68 = sub i64 %sub.ptr.lhs.cast66, %sub.ptr.rhs.cast67
  %cmp69 = icmp slt i64 %sub.ptr.sub68, 4
  br i1 %cmp69, label %if.then.71, label %if.end.72

if.then.71:                                       ; preds = %sw.bb.65
  store i32 -2, i32* %retval
  br label %return

if.end.72:                                        ; preds = %sw.bb.65
  %63 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %64 = bitcast %struct.encoding* %63 to %struct.normal_encoding*
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %64, i32 0, i32 10
  %65 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  %66 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %call73 = call i32 %65(%struct.encoding* %66, i8* %67)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.end.72
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %68, i8** %69, align 8
  store i32 0, i32* %retval
  br label %return

if.end.76:                                        ; preds = %if.end.72
  %70 = load i8*, i8** %ptr.addr, align 8
  %add.ptr77 = getelementptr i8, i8* %70, i64 4
  store i8* %add.ptr77, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.78:                                         ; preds = %if.end, %if.end, %if.end
  %71 = load i8*, i8** %ptr.addr, align 8
  %72 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %71, i8** %72, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  %73 = load i8*, i8** %ptr.addr, align 8
  %add.ptr79 = getelementptr i8, i8* %73, i64 1
  store i8* %add.ptr79, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.76, %if.end.63, %if.end.50, %if.then.40, %if.then.30
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.153, %sw.epilog
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8*, i8** %end.addr, align 8
  %cmp80 = icmp ne i8* %74, %75
  br i1 %cmp80, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8, i8* %76, align 1
  %idxprom82 = zext i8 %77 to i64
  %78 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %79 = bitcast %struct.encoding* %78 to %struct.normal_encoding*
  %type83 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %79, i32 0, i32 1
  %arrayidx84 = getelementptr [256 x i8], [256 x i8]* %type83, i32 0, i64 %idxprom82
  %80 = load i8, i8* %arrayidx84, align 1
  %conv85 = zext i8 %80 to i32
  switch i32 %conv85, label %sw.default.151 [
    i32 5, label %sw.bb.86
    i32 6, label %sw.bb.98
    i32 7, label %sw.bb.111
    i32 4, label %sw.bb.124
    i32 3, label %sw.bb.150
    i32 2, label %sw.bb.150
    i32 0, label %sw.bb.150
    i32 1, label %sw.bb.150
    i32 8, label %sw.bb.150
    i32 9, label %sw.bb.150
    i32 10, label %sw.bb.150
  ]

sw.bb.86:                                         ; preds = %while.body
  %81 = load i8*, i8** %end.addr, align 8
  %82 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast87 = ptrtoint i8* %81 to i64
  %sub.ptr.rhs.cast88 = ptrtoint i8* %82 to i64
  %sub.ptr.sub89 = sub i64 %sub.ptr.lhs.cast87, %sub.ptr.rhs.cast88
  %cmp90 = icmp slt i64 %sub.ptr.sub89, 2
  br i1 %cmp90, label %if.then.95, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.86
  %83 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %84 = bitcast %struct.encoding* %83 to %struct.normal_encoding*
  %isInvalid292 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %84, i32 0, i32 8
  %85 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid292, align 8
  %86 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %87 = load i8*, i8** %ptr.addr, align 8
  %call93 = call i32 %85(%struct.encoding* %86, i8* %87)
  %tobool94 = icmp ne i32 %call93, 0
  br i1 %tobool94, label %if.then.95, label %if.end.96

if.then.95:                                       ; preds = %lor.lhs.false, %sw.bb.86
  %88 = load i8*, i8** %ptr.addr, align 8
  %89 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %88, i8** %89, align 8
  store i32 6, i32* %retval
  br label %return

if.end.96:                                        ; preds = %lor.lhs.false
  %90 = load i8*, i8** %ptr.addr, align 8
  %add.ptr97 = getelementptr i8, i8* %90, i64 2
  store i8* %add.ptr97, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.bb.98:                                         ; preds = %while.body
  %91 = load i8*, i8** %end.addr, align 8
  %92 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast99 = ptrtoint i8* %91 to i64
  %sub.ptr.rhs.cast100 = ptrtoint i8* %92 to i64
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100
  %cmp102 = icmp slt i64 %sub.ptr.sub101, 3
  br i1 %cmp102, label %if.then.108, label %lor.lhs.false.104

lor.lhs.false.104:                                ; preds = %sw.bb.98
  %93 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %94 = bitcast %struct.encoding* %93 to %struct.normal_encoding*
  %isInvalid3105 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %94, i32 0, i32 9
  %95 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3105, align 8
  %96 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %97 = load i8*, i8** %ptr.addr, align 8
  %call106 = call i32 %95(%struct.encoding* %96, i8* %97)
  %tobool107 = icmp ne i32 %call106, 0
  br i1 %tobool107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %lor.lhs.false.104, %sw.bb.98
  %98 = load i8*, i8** %ptr.addr, align 8
  %99 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %98, i8** %99, align 8
  store i32 6, i32* %retval
  br label %return

if.end.109:                                       ; preds = %lor.lhs.false.104
  %100 = load i8*, i8** %ptr.addr, align 8
  %add.ptr110 = getelementptr i8, i8* %100, i64 3
  store i8* %add.ptr110, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.bb.111:                                        ; preds = %while.body
  %101 = load i8*, i8** %end.addr, align 8
  %102 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast112 = ptrtoint i8* %101 to i64
  %sub.ptr.rhs.cast113 = ptrtoint i8* %102 to i64
  %sub.ptr.sub114 = sub i64 %sub.ptr.lhs.cast112, %sub.ptr.rhs.cast113
  %cmp115 = icmp slt i64 %sub.ptr.sub114, 4
  br i1 %cmp115, label %if.then.121, label %lor.lhs.false.117

lor.lhs.false.117:                                ; preds = %sw.bb.111
  %103 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %104 = bitcast %struct.encoding* %103 to %struct.normal_encoding*
  %isInvalid4118 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %104, i32 0, i32 10
  %105 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4118, align 8
  %106 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %107 = load i8*, i8** %ptr.addr, align 8
  %call119 = call i32 %105(%struct.encoding* %106, i8* %107)
  %tobool120 = icmp ne i32 %call119, 0
  br i1 %tobool120, label %if.then.121, label %if.end.122

if.then.121:                                      ; preds = %lor.lhs.false.117, %sw.bb.111
  %108 = load i8*, i8** %ptr.addr, align 8
  %109 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %108, i8** %109, align 8
  store i32 6, i32* %retval
  br label %return

if.end.122:                                       ; preds = %lor.lhs.false.117
  %110 = load i8*, i8** %ptr.addr, align 8
  %add.ptr123 = getelementptr i8, i8* %110, i64 4
  store i8* %add.ptr123, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.bb.124:                                        ; preds = %while.body
  %111 = load i8*, i8** %ptr.addr, align 8
  %add.ptr125 = getelementptr i8, i8* %111, i64 1
  %112 = load i8*, i8** %end.addr, align 8
  %cmp126 = icmp ne i8* %add.ptr125, %112
  br i1 %cmp126, label %if.then.128, label %if.end.149

if.then.128:                                      ; preds = %sw.bb.124
  %113 = load i8*, i8** %ptr.addr, align 8
  %add.ptr129 = getelementptr i8, i8* %113, i64 1
  %114 = load i8, i8* %add.ptr129, align 1
  %conv130 = sext i8 %114 to i32
  %cmp131 = icmp eq i32 %conv130, 93
  br i1 %cmp131, label %if.end.135, label %if.then.133

if.then.133:                                      ; preds = %if.then.128
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr134 = getelementptr i8, i8* %115, i64 1
  store i8* %add.ptr134, i8** %ptr.addr, align 8
  br label %sw.epilog.153

if.end.135:                                       ; preds = %if.then.128
  %116 = load i8*, i8** %ptr.addr, align 8
  %add.ptr136 = getelementptr i8, i8* %116, i64 2
  %117 = load i8*, i8** %end.addr, align 8
  %cmp137 = icmp ne i8* %add.ptr136, %117
  br i1 %cmp137, label %if.then.139, label %if.end.148

if.then.139:                                      ; preds = %if.end.135
  %118 = load i8*, i8** %ptr.addr, align 8
  %add.ptr140 = getelementptr i8, i8* %118, i64 2
  %119 = load i8, i8* %add.ptr140, align 1
  %conv141 = sext i8 %119 to i32
  %cmp142 = icmp eq i32 %conv141, 62
  br i1 %cmp142, label %if.end.146, label %if.then.144

if.then.144:                                      ; preds = %if.then.139
  %120 = load i8*, i8** %ptr.addr, align 8
  %add.ptr145 = getelementptr i8, i8* %120, i64 1
  store i8* %add.ptr145, i8** %ptr.addr, align 8
  br label %sw.epilog.153

if.end.146:                                       ; preds = %if.then.139
  %121 = load i8*, i8** %ptr.addr, align 8
  %add.ptr147 = getelementptr i8, i8* %121, i64 2
  %122 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr147, i8** %122, align 8
  store i32 0, i32* %retval
  br label %return

if.end.148:                                       ; preds = %if.end.135
  br label %if.end.149

if.end.149:                                       ; preds = %if.end.148, %sw.bb.124
  br label %sw.bb.150

sw.bb.150:                                        ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %if.end.149
  %123 = load i8*, i8** %ptr.addr, align 8
  %124 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %123, i8** %124, align 8
  store i32 6, i32* %retval
  br label %return

sw.default.151:                                   ; preds = %while.body
  %125 = load i8*, i8** %ptr.addr, align 8
  %add.ptr152 = getelementptr i8, i8* %125, i64 1
  store i8* %add.ptr152, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.epilog.153:                                    ; preds = %sw.default.151, %if.then.144, %if.then.133, %if.end.122, %if.end.109, %if.end.96
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %126 = load i8*, i8** %ptr.addr, align 8
  %127 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %126, i8** %127, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.bb.150, %if.end.146, %if.then.121, %if.then.108, %if.then.95, %sw.bb.78, %if.then.75, %if.then.71, %if.then.62, %if.then.58, %if.then.49, %if.then.46, %if.end.42, %if.then.35, %if.then.25, %sw.bb.19, %if.end.18, %if.then.8, %sw.bb.1, %sw.bb, %if.then
  %128 = load i32, i32* %retval
  ret i32 %128
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_cdataSectionTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 4, label %sw.bb
    i32 9, label %sw.bb.22
    i32 10, label %sw.bb.37
    i32 5, label %sw.bb.39
    i32 6, label %sw.bb.47
    i32 7, label %sw.bb.60
    i32 0, label %sw.bb.73
    i32 1, label %sw.bb.73
    i32 8, label %sw.bb.73
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %8 = load i8*, i8** %ptr.addr, align 8
  %9 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp eq i8* %8, %9
  br i1 %cmp1, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %sw.bb
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %sw.bb
  %10 = load i8*, i8** %ptr.addr, align 8
  %11 = load i8, i8* %10, align 1
  %conv5 = sext i8 %11 to i32
  %cmp6 = icmp eq i32 %conv5, 93
  br i1 %cmp6, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.end.4
  br label %sw.epilog

if.end.9:                                         ; preds = %if.end.4
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %12, i64 1
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8*, i8** %end.addr, align 8
  %cmp11 = icmp eq i8* %13, %14
  br i1 %cmp11, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %if.end.9
  store i32 -1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.9
  %15 = load i8*, i8** %ptr.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv15 = sext i8 %16 to i32
  %cmp16 = icmp eq i32 %conv15, 62
  br i1 %cmp16, label %if.end.20, label %if.then.18

if.then.18:                                       ; preds = %if.end.14
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr19 = getelementptr i8, i8* %17, i64 -1
  store i8* %add.ptr19, i8** %ptr.addr, align 8
  br label %sw.epilog

if.end.20:                                        ; preds = %if.end.14
  %18 = load i8*, i8** %ptr.addr, align 8
  %add.ptr21 = getelementptr i8, i8* %18, i64 1
  %19 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr21, i8** %19, align 8
  store i32 40, i32* %retval
  br label %return

sw.bb.22:                                         ; preds = %if.end
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr23 = getelementptr i8, i8* %20, i64 1
  store i8* %add.ptr23, i8** %ptr.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8*, i8** %end.addr, align 8
  %cmp24 = icmp eq i8* %21, %22
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.22
  store i32 -1, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.22
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8, i8* %23, align 1
  %idxprom28 = zext i8 %24 to i64
  %25 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %26 = bitcast %struct.encoding* %25 to %struct.normal_encoding*
  %type29 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %26, i32 0, i32 1
  %arrayidx30 = getelementptr [256 x i8], [256 x i8]* %type29, i32 0, i64 %idxprom28
  %27 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %27 to i32
  %cmp32 = icmp eq i32 %conv31, 10
  br i1 %cmp32, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %if.end.27
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %28, i64 1
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.34, %if.end.27
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %29, i8** %30, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.37:                                         ; preds = %if.end
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr38 = getelementptr i8, i8* %31, i64 1
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr38, i8** %32, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.39:                                         ; preds = %if.end
  %33 = load i8*, i8** %end.addr, align 8
  %34 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %34 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp40 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.39
  store i32 -2, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.39
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = bitcast %struct.encoding* %35 to %struct.normal_encoding*
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %36, i32 0, i32 8
  %37 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %38 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %39 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %37(%struct.encoding* %38, i8* %39)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %if.end.43
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %40, i8** %41, align 8
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %if.end.43
  %42 = load i8*, i8** %ptr.addr, align 8
  %add.ptr46 = getelementptr i8, i8* %42, i64 2
  store i8* %add.ptr46, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.47:                                         ; preds = %if.end
  %43 = load i8*, i8** %end.addr, align 8
  %44 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast48 = ptrtoint i8* %43 to i64
  %sub.ptr.rhs.cast49 = ptrtoint i8* %44 to i64
  %sub.ptr.sub50 = sub i64 %sub.ptr.lhs.cast48, %sub.ptr.rhs.cast49
  %cmp51 = icmp slt i64 %sub.ptr.sub50, 3
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %sw.bb.47
  store i32 -2, i32* %retval
  br label %return

if.end.54:                                        ; preds = %sw.bb.47
  %45 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %46 = bitcast %struct.encoding* %45 to %struct.normal_encoding*
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %46, i32 0, i32 9
  %47 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %48 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %49 = load i8*, i8** %ptr.addr, align 8
  %call55 = call i32 %47(%struct.encoding* %48, i8* %49)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.end.54
  %50 = load i8*, i8** %ptr.addr, align 8
  %51 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %50, i8** %51, align 8
  store i32 0, i32* %retval
  br label %return

if.end.58:                                        ; preds = %if.end.54
  %52 = load i8*, i8** %ptr.addr, align 8
  %add.ptr59 = getelementptr i8, i8* %52, i64 3
  store i8* %add.ptr59, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.60:                                         ; preds = %if.end
  %53 = load i8*, i8** %end.addr, align 8
  %54 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast61 = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast62 = ptrtoint i8* %54 to i64
  %sub.ptr.sub63 = sub i64 %sub.ptr.lhs.cast61, %sub.ptr.rhs.cast62
  %cmp64 = icmp slt i64 %sub.ptr.sub63, 4
  br i1 %cmp64, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %sw.bb.60
  store i32 -2, i32* %retval
  br label %return

if.end.67:                                        ; preds = %sw.bb.60
  %55 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %56 = bitcast %struct.encoding* %55 to %struct.normal_encoding*
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %56, i32 0, i32 10
  %57 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  %58 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %59 = load i8*, i8** %ptr.addr, align 8
  %call68 = call i32 %57(%struct.encoding* %58, i8* %59)
  %tobool69 = icmp ne i32 %call68, 0
  br i1 %tobool69, label %if.then.70, label %if.end.71

if.then.70:                                       ; preds = %if.end.67
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 0, i32* %retval
  br label %return

if.end.71:                                        ; preds = %if.end.67
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr72 = getelementptr i8, i8* %62, i64 4
  store i8* %add.ptr72, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.73:                                         ; preds = %if.end, %if.end, %if.end
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  %65 = load i8*, i8** %ptr.addr, align 8
  %add.ptr74 = getelementptr i8, i8* %65, i64 1
  store i8* %add.ptr74, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.71, %if.end.58, %if.end.45, %if.then.18, %if.then.8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.122, %sw.epilog
  %66 = load i8*, i8** %ptr.addr, align 8
  %67 = load i8*, i8** %end.addr, align 8
  %cmp75 = icmp ne i8* %66, %67
  br i1 %cmp75, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8, i8* %68, align 1
  %idxprom77 = zext i8 %69 to i64
  %70 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %71 = bitcast %struct.encoding* %70 to %struct.normal_encoding*
  %type78 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %71, i32 0, i32 1
  %arrayidx79 = getelementptr [256 x i8], [256 x i8]* %type78, i32 0, i64 %idxprom77
  %72 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %72 to i32
  switch i32 %conv80, label %sw.default.120 [
    i32 5, label %sw.bb.81
    i32 6, label %sw.bb.93
    i32 7, label %sw.bb.106
    i32 0, label %sw.bb.119
    i32 1, label %sw.bb.119
    i32 8, label %sw.bb.119
    i32 9, label %sw.bb.119
    i32 10, label %sw.bb.119
    i32 4, label %sw.bb.119
  ]

sw.bb.81:                                         ; preds = %while.body
  %73 = load i8*, i8** %end.addr, align 8
  %74 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast82 = ptrtoint i8* %73 to i64
  %sub.ptr.rhs.cast83 = ptrtoint i8* %74 to i64
  %sub.ptr.sub84 = sub i64 %sub.ptr.lhs.cast82, %sub.ptr.rhs.cast83
  %cmp85 = icmp slt i64 %sub.ptr.sub84, 2
  br i1 %cmp85, label %if.then.90, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.81
  %75 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %76 = bitcast %struct.encoding* %75 to %struct.normal_encoding*
  %isInvalid287 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %76, i32 0, i32 8
  %77 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid287, align 8
  %78 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %79 = load i8*, i8** %ptr.addr, align 8
  %call88 = call i32 %77(%struct.encoding* %78, i8* %79)
  %tobool89 = icmp ne i32 %call88, 0
  br i1 %tobool89, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %lor.lhs.false, %sw.bb.81
  %80 = load i8*, i8** %ptr.addr, align 8
  %81 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %80, i8** %81, align 8
  store i32 6, i32* %retval
  br label %return

if.end.91:                                        ; preds = %lor.lhs.false
  %82 = load i8*, i8** %ptr.addr, align 8
  %add.ptr92 = getelementptr i8, i8* %82, i64 2
  store i8* %add.ptr92, i8** %ptr.addr, align 8
  br label %sw.epilog.122

sw.bb.93:                                         ; preds = %while.body
  %83 = load i8*, i8** %end.addr, align 8
  %84 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast94 = ptrtoint i8* %83 to i64
  %sub.ptr.rhs.cast95 = ptrtoint i8* %84 to i64
  %sub.ptr.sub96 = sub i64 %sub.ptr.lhs.cast94, %sub.ptr.rhs.cast95
  %cmp97 = icmp slt i64 %sub.ptr.sub96, 3
  br i1 %cmp97, label %if.then.103, label %lor.lhs.false.99

lor.lhs.false.99:                                 ; preds = %sw.bb.93
  %85 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %86 = bitcast %struct.encoding* %85 to %struct.normal_encoding*
  %isInvalid3100 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %86, i32 0, i32 9
  %87 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3100, align 8
  %88 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %89 = load i8*, i8** %ptr.addr, align 8
  %call101 = call i32 %87(%struct.encoding* %88, i8* %89)
  %tobool102 = icmp ne i32 %call101, 0
  br i1 %tobool102, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %lor.lhs.false.99, %sw.bb.93
  %90 = load i8*, i8** %ptr.addr, align 8
  %91 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %90, i8** %91, align 8
  store i32 6, i32* %retval
  br label %return

if.end.104:                                       ; preds = %lor.lhs.false.99
  %92 = load i8*, i8** %ptr.addr, align 8
  %add.ptr105 = getelementptr i8, i8* %92, i64 3
  store i8* %add.ptr105, i8** %ptr.addr, align 8
  br label %sw.epilog.122

sw.bb.106:                                        ; preds = %while.body
  %93 = load i8*, i8** %end.addr, align 8
  %94 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast107 = ptrtoint i8* %93 to i64
  %sub.ptr.rhs.cast108 = ptrtoint i8* %94 to i64
  %sub.ptr.sub109 = sub i64 %sub.ptr.lhs.cast107, %sub.ptr.rhs.cast108
  %cmp110 = icmp slt i64 %sub.ptr.sub109, 4
  br i1 %cmp110, label %if.then.116, label %lor.lhs.false.112

lor.lhs.false.112:                                ; preds = %sw.bb.106
  %95 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %96 = bitcast %struct.encoding* %95 to %struct.normal_encoding*
  %isInvalid4113 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %96, i32 0, i32 10
  %97 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4113, align 8
  %98 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %99 = load i8*, i8** %ptr.addr, align 8
  %call114 = call i32 %97(%struct.encoding* %98, i8* %99)
  %tobool115 = icmp ne i32 %call114, 0
  br i1 %tobool115, label %if.then.116, label %if.end.117

if.then.116:                                      ; preds = %lor.lhs.false.112, %sw.bb.106
  %100 = load i8*, i8** %ptr.addr, align 8
  %101 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %100, i8** %101, align 8
  store i32 6, i32* %retval
  br label %return

if.end.117:                                       ; preds = %lor.lhs.false.112
  %102 = load i8*, i8** %ptr.addr, align 8
  %add.ptr118 = getelementptr i8, i8* %102, i64 4
  store i8* %add.ptr118, i8** %ptr.addr, align 8
  br label %sw.epilog.122

sw.bb.119:                                        ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %103 = load i8*, i8** %ptr.addr, align 8
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %103, i8** %104, align 8
  store i32 6, i32* %retval
  br label %return

sw.default.120:                                   ; preds = %while.body
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr121 = getelementptr i8, i8* %105, i64 1
  store i8* %add.ptr121, i8** %ptr.addr, align 8
  br label %sw.epilog.122

sw.epilog.122:                                    ; preds = %sw.default.120, %if.end.117, %if.end.104, %if.end.91
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %106 = load i8*, i8** %ptr.addr, align 8
  %107 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %106, i8** %107, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.bb.119, %if.then.116, %if.then.103, %if.then.90, %sw.bb.73, %if.then.70, %if.then.66, %if.then.57, %if.then.53, %if.then.44, %if.then.42, %sw.bb.37, %if.end.36, %if.then.26, %if.end.20, %if.then.13, %if.then.3, %if.then
  %108 = load i32, i32* %retval
  ret i32 %108
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_ignoreSectionTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %level = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  store i32 0, i32* %level, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.5
    i32 7, label %sw.bb.18
    i32 0, label %sw.bb.31
    i32 1, label %sw.bb.31
    i32 8, label %sw.bb.31
    i32 2, label %sw.bb.32
    i32 4, label %sw.bb.54
  ]

sw.bb:                                            ; preds = %while.body
  %7 = load i8*, i8** %end.addr, align 8
  %8 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp1 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  %9 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %10 = bitcast %struct.encoding* %9 to %struct.normal_encoding*
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %10, i32 0, i32 8
  %11 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %11(%struct.encoding* %12, i8* %13)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %15 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %14, i8** %15, align 8
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %16, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %while.body
  %17 = load i8*, i8** %end.addr, align 8
  %18 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast6 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast7 = ptrtoint i8* %18 to i64
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast6, %sub.ptr.rhs.cast7
  %cmp9 = icmp slt i64 %sub.ptr.sub8, 3
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %sw.bb.5
  store i32 -2, i32* %retval
  br label %return

if.end.12:                                        ; preds = %sw.bb.5
  %19 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %20 = bitcast %struct.encoding* %19 to %struct.normal_encoding*
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %20, i32 0, i32 9
  %21 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %call13 = call i32 %21(%struct.encoding* %22, i8* %23)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %24, i8** %25, align 8
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %26 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %26, i64 3
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.18:                                         ; preds = %while.body
  %27 = load i8*, i8** %end.addr, align 8
  %28 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast19 = ptrtoint i8* %27 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %28 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %cmp22 = icmp slt i64 %sub.ptr.sub21, 4
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %sw.bb.18
  store i32 -2, i32* %retval
  br label %return

if.end.25:                                        ; preds = %sw.bb.18
  %29 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %30 = bitcast %struct.encoding* %29 to %struct.normal_encoding*
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %30, i32 0, i32 10
  %31 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  %32 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %call26 = call i32 %31(%struct.encoding* %32, i8* %33)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.25
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end.25
  %36 = load i8*, i8** %ptr.addr, align 8
  %add.ptr30 = getelementptr i8, i8* %36, i64 4
  store i8* %add.ptr30, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.31:                                         ; preds = %while.body, %while.body, %while.body
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.32:                                         ; preds = %while.body
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr33 = getelementptr i8, i8* %39, i64 1
  store i8* %add.ptr33, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %end.addr, align 8
  %cmp34 = icmp eq i8* %add.ptr33, %40
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %sw.bb.32
  store i32 -1, i32* %retval
  br label %return

if.end.37:                                        ; preds = %sw.bb.32
  %41 = load i8*, i8** %ptr.addr, align 8
  %42 = load i8, i8* %41, align 1
  %conv38 = sext i8 %42 to i32
  %cmp39 = icmp eq i32 %conv38, 33
  br i1 %cmp39, label %if.then.41, label %if.end.53

if.then.41:                                       ; preds = %if.end.37
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %43, i64 1
  store i8* %add.ptr42, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %end.addr, align 8
  %cmp43 = icmp eq i8* %add.ptr42, %44
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.41
  store i32 -1, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.then.41
  %45 = load i8*, i8** %ptr.addr, align 8
  %46 = load i8, i8* %45, align 1
  %conv47 = sext i8 %46 to i32
  %cmp48 = icmp eq i32 %conv47, 91
  br i1 %cmp48, label %if.then.50, label %if.end.52

if.then.50:                                       ; preds = %if.end.46
  %47 = load i32, i32* %level, align 4
  %inc = add i32 %47, 1
  store i32 %inc, i32* %level, align 4
  %48 = load i8*, i8** %ptr.addr, align 8
  %add.ptr51 = getelementptr i8, i8* %48, i64 1
  store i8* %add.ptr51, i8** %ptr.addr, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.then.50, %if.end.46
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.end.37
  br label %sw.epilog

sw.bb.54:                                         ; preds = %while.body
  %49 = load i8*, i8** %ptr.addr, align 8
  %add.ptr55 = getelementptr i8, i8* %49, i64 1
  store i8* %add.ptr55, i8** %ptr.addr, align 8
  %50 = load i8*, i8** %end.addr, align 8
  %cmp56 = icmp eq i8* %add.ptr55, %50
  br i1 %cmp56, label %if.then.58, label %if.end.59

if.then.58:                                       ; preds = %sw.bb.54
  store i32 -1, i32* %retval
  br label %return

if.end.59:                                        ; preds = %sw.bb.54
  %51 = load i8*, i8** %ptr.addr, align 8
  %52 = load i8, i8* %51, align 1
  %conv60 = sext i8 %52 to i32
  %cmp61 = icmp eq i32 %conv60, 93
  br i1 %cmp61, label %if.then.63, label %if.end.79

if.then.63:                                       ; preds = %if.end.59
  %53 = load i8*, i8** %ptr.addr, align 8
  %add.ptr64 = getelementptr i8, i8* %53, i64 1
  store i8* %add.ptr64, i8** %ptr.addr, align 8
  %54 = load i8*, i8** %end.addr, align 8
  %cmp65 = icmp eq i8* %add.ptr64, %54
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.then.63
  store i32 -1, i32* %retval
  br label %return

if.end.68:                                        ; preds = %if.then.63
  %55 = load i8*, i8** %ptr.addr, align 8
  %56 = load i8, i8* %55, align 1
  %conv69 = sext i8 %56 to i32
  %cmp70 = icmp eq i32 %conv69, 62
  br i1 %cmp70, label %if.then.72, label %if.end.78

if.then.72:                                       ; preds = %if.end.68
  %57 = load i8*, i8** %ptr.addr, align 8
  %add.ptr73 = getelementptr i8, i8* %57, i64 1
  store i8* %add.ptr73, i8** %ptr.addr, align 8
  %58 = load i32, i32* %level, align 4
  %cmp74 = icmp eq i32 %58, 0
  br i1 %cmp74, label %if.then.76, label %if.end.77

if.then.76:                                       ; preds = %if.then.72
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %59, i8** %60, align 8
  store i32 42, i32* %retval
  br label %return

if.end.77:                                        ; preds = %if.then.72
  %61 = load i32, i32* %level, align 4
  %dec = add i32 %61, -1
  store i32 %dec, i32* %level, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.end.68
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.end.59
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr80 = getelementptr i8, i8* %62, i64 1
  store i8* %add.ptr80, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.79, %if.end.53, %if.end.29, %if.end.16, %if.end.4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.76, %if.then.67, %if.then.58, %if.then.45, %if.then.36, %sw.bb.31, %if.then.28, %if.then.24, %if.then.15, %if.then.11, %if.then.3, %if.then
  %63 = load i32, i32* %retval
  ret i32 %63
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_attributeValueTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %start = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  store i8* %2, i8** %start, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp ne i8* %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 8
  %6 = load i8, i8* %5, align 1
  %idxprom = zext i8 %6 to i64
  %7 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %8 = bitcast %struct.encoding* %7 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %8, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %9 to i32
  switch i32 %conv, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.2
    i32 7, label %sw.bb.4
    i32 3, label %sw.bb.6
    i32 2, label %sw.bb.12
    i32 10, label %sw.bb.13
    i32 9, label %sw.bb.19
    i32 21, label %sw.bb.38
  ]

sw.bb:                                            ; preds = %while.body
  %10 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %while.body
  %11 = load i8*, i8** %ptr.addr, align 8
  %add.ptr3 = getelementptr i8, i8* %11, i64 3
  store i8* %add.ptr3, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.4:                                          ; preds = %while.body
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr5 = getelementptr i8, i8* %12, i64 4
  store i8* %add.ptr5, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.6:                                          ; preds = %while.body
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8*, i8** %start, align 8
  %cmp7 = icmp eq i8* %13, %14
  br i1 %cmp7, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %sw.bb.6
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %16, i64 1
  %17 = load i8*, i8** %end.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @normal_scanRef(%struct.encoding* %15, i8* %add.ptr10, i8* %17, i8** %18)
  store i32 %call, i32* %retval
  br label %return

if.end.11:                                        ; preds = %sw.bb.6
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %19, i8** %20, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.12:                                         ; preds = %while.body
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.13:                                         ; preds = %while.body
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8*, i8** %start, align 8
  %cmp14 = icmp eq i8* %23, %24
  br i1 %cmp14, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %sw.bb.13
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %25, i64 1
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr17, i8** %26, align 8
  store i32 7, i32* %retval
  br label %return

if.end.18:                                        ; preds = %sw.bb.13
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %while.body
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %start, align 8
  %cmp20 = icmp eq i8* %29, %30
  br i1 %cmp20, label %if.then.22, label %if.end.37

if.then.22:                                       ; preds = %sw.bb.19
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr23 = getelementptr i8, i8* %31, i64 1
  store i8* %add.ptr23, i8** %ptr.addr, align 8
  %32 = load i8*, i8** %ptr.addr, align 8
  %33 = load i8*, i8** %end.addr, align 8
  %cmp24 = icmp eq i8* %32, %33
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.then.22
  store i32 -3, i32* %retval
  br label %return

if.end.27:                                        ; preds = %if.then.22
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8, i8* %34, align 1
  %idxprom28 = zext i8 %35 to i64
  %36 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %37 = bitcast %struct.encoding* %36 to %struct.normal_encoding*
  %type29 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %37, i32 0, i32 1
  %arrayidx30 = getelementptr [256 x i8], [256 x i8]* %type29, i32 0, i64 %idxprom28
  %38 = load i8, i8* %arrayidx30, align 1
  %conv31 = zext i8 %38 to i32
  %cmp32 = icmp eq i32 %conv31, 10
  br i1 %cmp32, label %if.then.34, label %if.end.36

if.then.34:                                       ; preds = %if.end.27
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %39, i64 1
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.then.34, %if.end.27
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %40, i8** %41, align 8
  store i32 7, i32* %retval
  br label %return

if.end.37:                                        ; preds = %sw.bb.19
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %42, i8** %43, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.38:                                         ; preds = %while.body
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8*, i8** %start, align 8
  %cmp39 = icmp eq i8* %44, %45
  br i1 %cmp39, label %if.then.41, label %if.end.43

if.then.41:                                       ; preds = %sw.bb.38
  %46 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %46, i64 1
  %47 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr42, i8** %47, align 8
  store i32 39, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.38
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %48, i8** %49, align 8
  store i32 6, i32* %retval
  br label %return

sw.default:                                       ; preds = %while.body
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %50, i64 1
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.4, %sw.bb.2, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %51 = load i8*, i8** %ptr.addr, align 8
  %52 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %51, i8** %52, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end.43, %if.then.41, %if.end.37, %if.end.36, %if.then.26, %if.end.18, %if.then.16, %sw.bb.12, %if.end.11, %if.then.9, %if.then
  %53 = load i32, i32* %retval
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_entityValueTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %start = alloca i8*, align 8
  %tok = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  store i8* %2, i8** %start, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp ne i8* %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 8
  %6 = load i8, i8* %5, align 1
  %idxprom = zext i8 %6 to i64
  %7 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %8 = bitcast %struct.encoding* %7 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %8, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %9 to i32
  switch i32 %conv, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.2
    i32 7, label %sw.bb.4
    i32 3, label %sw.bb.6
    i32 30, label %sw.bb.12
    i32 10, label %sw.bb.21
    i32 9, label %sw.bb.27
  ]

sw.bb:                                            ; preds = %while.body
  %10 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %while.body
  %11 = load i8*, i8** %ptr.addr, align 8
  %add.ptr3 = getelementptr i8, i8* %11, i64 3
  store i8* %add.ptr3, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.4:                                          ; preds = %while.body
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr5 = getelementptr i8, i8* %12, i64 4
  store i8* %add.ptr5, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.6:                                          ; preds = %while.body
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8*, i8** %start, align 8
  %cmp7 = icmp eq i8* %13, %14
  br i1 %cmp7, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %sw.bb.6
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %16, i64 1
  %17 = load i8*, i8** %end.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @normal_scanRef(%struct.encoding* %15, i8* %add.ptr10, i8* %17, i8** %18)
  store i32 %call, i32* %retval
  br label %return

if.end.11:                                        ; preds = %sw.bb.6
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %19, i8** %20, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.12:                                         ; preds = %while.body
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8*, i8** %start, align 8
  %cmp13 = icmp eq i8* %21, %22
  br i1 %cmp13, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %sw.bb.12
  %23 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %24, i64 1
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call17 = call i32 @normal_scanPercent(%struct.encoding* %23, i8* %add.ptr16, i8* %25, i8** %26)
  store i32 %call17, i32* %tok, align 4
  %27 = load i32, i32* %tok, align 4
  %cmp18 = icmp eq i32 %27, 22
  br i1 %cmp18, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.15
  br label %cond.end

cond.false:                                       ; preds = %if.then.15
  %28 = load i32, i32* %tok, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %28, %cond.false ]
  store i32 %cond, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb.12
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %29, i8** %30, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.21:                                         ; preds = %while.body
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8*, i8** %start, align 8
  %cmp22 = icmp eq i8* %31, %32
  br i1 %cmp22, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %sw.bb.21
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr25 = getelementptr i8, i8* %33, i64 1
  %34 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr25, i8** %34, align 8
  store i32 7, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.21
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %35, i8** %36, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %while.body
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8*, i8** %start, align 8
  %cmp28 = icmp eq i8* %37, %38
  br i1 %cmp28, label %if.then.30, label %if.end.45

if.then.30:                                       ; preds = %sw.bb.27
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr31 = getelementptr i8, i8* %39, i64 1
  store i8* %add.ptr31, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp32 = icmp eq i8* %40, %41
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.30
  store i32 -3, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.30
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom36 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type37 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx38 = getelementptr [256 x i8], [256 x i8]* %type37, i32 0, i64 %idxprom36
  %46 = load i8, i8* %arrayidx38, align 1
  %conv39 = zext i8 %46 to i32
  %cmp40 = icmp eq i32 %conv39, 10
  br i1 %cmp40, label %if.then.42, label %if.end.44

if.then.42:                                       ; preds = %if.end.35
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr43 = getelementptr i8, i8* %47, i64 1
  store i8* %add.ptr43, i8** %ptr.addr, align 8
  br label %if.end.44

if.end.44:                                        ; preds = %if.then.42, %if.end.35
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %48, i8** %49, align 8
  store i32 7, i32* %retval
  br label %return

if.end.45:                                        ; preds = %sw.bb.27
  %50 = load i8*, i8** %ptr.addr, align 8
  %51 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %50, i8** %51, align 8
  store i32 6, i32* %retval
  br label %return

sw.default:                                       ; preds = %while.body
  %52 = load i8*, i8** %ptr.addr, align 8
  %add.ptr46 = getelementptr i8, i8* %52, i64 1
  store i8* %add.ptr46, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.4, %sw.bb.2, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %53 = load i8*, i8** %ptr.addr, align 8
  %54 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %53, i8** %54, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end.45, %if.end.44, %if.then.34, %if.end.26, %if.then.24, %if.end.20, %cond.end, %if.end.11, %if.then.9, %if.then
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_sameName(%struct.encoding* %enc, i8* %ptr1, i8* %ptr2) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr1.addr = alloca i8*, align 8
  %ptr2.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr1, i8** %ptr1.addr, align 8
  store i8* %ptr2, i8** %ptr2.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr1.addr, align 8
  %1 = load i8, i8* %0, align 1
  %idxprom = zext i8 %1 to i64
  %2 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %3 = bitcast %struct.encoding* %2 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %3, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  switch i32 %conv, label %sw.default [
    i32 7, label %sw.bb
    i32 6, label %sw.bb.5
    i32 5, label %sw.bb.14
    i32 29, label %sw.bb.31
    i32 22, label %sw.bb.31
    i32 23, label %sw.bb.31
    i32 24, label %sw.bb.31
    i32 25, label %sw.bb.31
    i32 26, label %sw.bb.31
    i32 27, label %sw.bb.31
  ]

sw.bb:                                            ; preds = %for.cond
  %5 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr1.addr, align 8
  %6 = load i8, i8* %5, align 1
  %conv1 = sext i8 %6 to i32
  %7 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr2 = getelementptr i8, i8* %7, i32 1
  store i8* %incdec.ptr2, i8** %ptr2.addr, align 8
  %8 = load i8, i8* %7, align 1
  %conv3 = sext i8 %8 to i32
  %cmp = icmp ne i32 %conv1, %conv3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.bb.5

sw.bb.5:                                          ; preds = %for.cond, %if.end
  %9 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr6 = getelementptr i8, i8* %9, i32 1
  store i8* %incdec.ptr6, i8** %ptr1.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv7 = sext i8 %10 to i32
  %11 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr8 = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr8, i8** %ptr2.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv9 = sext i8 %12 to i32
  %cmp10 = icmp ne i32 %conv7, %conv9
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %sw.bb.5
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %sw.bb.5
  br label %sw.bb.14

sw.bb.14:                                         ; preds = %for.cond, %if.end.13
  %13 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr15 = getelementptr i8, i8* %13, i32 1
  store i8* %incdec.ptr15, i8** %ptr1.addr, align 8
  %14 = load i8, i8* %13, align 1
  %conv16 = sext i8 %14 to i32
  %15 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr17 = getelementptr i8, i8* %15, i32 1
  store i8* %incdec.ptr17, i8** %ptr2.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv18 = sext i8 %16 to i32
  %cmp19 = icmp ne i32 %conv16, %conv18
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %sw.bb.14
  store i32 0, i32* %retval
  br label %return

if.end.22:                                        ; preds = %sw.bb.14
  %17 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr23 = getelementptr i8, i8* %17, i32 1
  store i8* %incdec.ptr23, i8** %ptr1.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv24 = sext i8 %18 to i32
  %19 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr25 = getelementptr i8, i8* %19, i32 1
  store i8* %incdec.ptr25, i8** %ptr2.addr, align 8
  %20 = load i8, i8* %19, align 1
  %conv26 = sext i8 %20 to i32
  %cmp27 = icmp ne i32 %conv24, %conv26
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %if.end.22
  store i32 0, i32* %retval
  br label %return

if.end.30:                                        ; preds = %if.end.22
  br label %sw.epilog

sw.bb.31:                                         ; preds = %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond
  %21 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr32 = getelementptr i8, i8* %21, i32 1
  store i8* %incdec.ptr32, i8** %ptr2.addr, align 8
  %22 = load i8, i8* %21, align 1
  %conv33 = sext i8 %22 to i32
  %23 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr34 = getelementptr i8, i8* %23, i32 1
  store i8* %incdec.ptr34, i8** %ptr1.addr, align 8
  %24 = load i8, i8* %23, align 1
  %conv35 = sext i8 %24 to i32
  %cmp36 = icmp ne i32 %conv33, %conv35
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %sw.bb.31
  store i32 0, i32* %retval
  br label %return

if.end.39:                                        ; preds = %sw.bb.31
  br label %sw.epilog

sw.default:                                       ; preds = %for.cond
  %25 = load i8*, i8** %ptr1.addr, align 8
  %26 = load i8, i8* %25, align 1
  %conv40 = sext i8 %26 to i32
  %27 = load i8*, i8** %ptr2.addr, align 8
  %28 = load i8, i8* %27, align 1
  %conv41 = sext i8 %28 to i32
  %cmp42 = icmp eq i32 %conv40, %conv41
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %sw.default
  store i32 1, i32* %retval
  br label %return

if.end.45:                                        ; preds = %sw.default
  %29 = load i8*, i8** %ptr2.addr, align 8
  %30 = load i8, i8* %29, align 1
  %idxprom46 = zext i8 %30 to i64
  %31 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %32 = bitcast %struct.encoding* %31 to %struct.normal_encoding*
  %type47 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %32, i32 0, i32 1
  %arrayidx48 = getelementptr [256 x i8], [256 x i8]* %type47, i32 0, i64 %idxprom46
  %33 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %33 to i32
  switch i32 %conv49, label %sw.default.51 [
    i32 5, label %sw.bb.50
    i32 6, label %sw.bb.50
    i32 7, label %sw.bb.50
    i32 29, label %sw.bb.50
    i32 22, label %sw.bb.50
    i32 23, label %sw.bb.50
    i32 24, label %sw.bb.50
    i32 25, label %sw.bb.50
    i32 26, label %sw.bb.50
    i32 27, label %sw.bb.50
  ]

sw.bb.50:                                         ; preds = %if.end.45, %if.end.45, %if.end.45, %if.end.45, %if.end.45, %if.end.45, %if.end.45, %if.end.45, %if.end.45, %if.end.45
  store i32 0, i32* %retval
  br label %return

sw.default.51:                                    ; preds = %if.end.45
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.39, %if.end.30
  br label %for.cond

return:                                           ; preds = %sw.default.51, %sw.bb.50, %if.then.44, %if.then.38, %if.then.29, %if.then.21, %if.then.12, %if.then
  %34 = load i32, i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_nameMatchesAscii(%struct.encoding* %enc, i8* %ptr1, i8* %end1, i8* %ptr2) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr1.addr = alloca i8*, align 8
  %end1.addr = alloca i8*, align 8
  %ptr2.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr1, i8** %ptr1.addr, align 8
  store i8* %end1, i8** %end1.addr, align 8
  store i8* %ptr2, i8** %ptr2.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %ptr2.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %ptr1.addr, align 8
  %3 = load i8*, i8** %end1.addr, align 8
  %cmp = icmp eq i8* %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %4 = load i8*, i8** %ptr1.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv = sext i8 %5 to i32
  %6 = load i8*, i8** %ptr2.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv1 = sext i8 %7 to i32
  %cmp2 = icmp eq i32 %conv, %conv1
  br i1 %cmp2, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.5
  %8 = load i8*, i8** %ptr1.addr, align 8
  %add.ptr = getelementptr i8, i8* %8, i64 1
  store i8* %add.ptr, i8** %ptr1.addr, align 8
  %9 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %9, i32 1
  store i8* %incdec.ptr, i8** %ptr2.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %10 = load i8*, i8** %ptr1.addr, align 8
  %11 = load i8*, i8** %end1.addr, align 8
  %cmp6 = icmp eq i8* %10, %11
  %conv7 = zext i1 %cmp6 to i32
  store i32 %conv7, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.4, %if.then
  %12 = load i32, i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_nameLength(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %start = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  store i8* %0, i8** %start, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i8, i8* %1, align 1
  %idxprom = zext i8 %2 to i64
  %3 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %4 = bitcast %struct.encoding* %3 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %4, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  switch i32 %conv, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.1
    i32 7, label %sw.bb.3
    i32 29, label %sw.bb.5
    i32 22, label %sw.bb.5
    i32 23, label %sw.bb.5
    i32 24, label %sw.bb.5
    i32 25, label %sw.bb.5
    i32 26, label %sw.bb.5
    i32 27, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %for.cond
  %6 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %6, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %for.cond
  %7 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %7, i64 3
  store i8* %add.ptr2, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %for.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr4 = getelementptr i8, i8* %8, i64 4
  store i8* %add.ptr4, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond, %for.cond
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr6 = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr6, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %for.cond
  %10 = load i8*, i8** %ptr.addr, align 8
  %11 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv7 = trunc i64 %sub.ptr.sub to i32
  ret i32 %conv7

sw.epilog:                                        ; preds = %sw.bb.5, %sw.bb.3, %sw.bb.1, %sw.bb
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i8* @normal_skipS(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8, i8* %0, align 1
  %idxprom = zext i8 %1 to i64
  %2 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %3 = bitcast %struct.encoding* %2 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %3, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %4 to i32
  switch i32 %conv, label %sw.default [
    i32 10, label %sw.bb
    i32 9, label %sw.bb
    i32 21, label %sw.bb
  ]

sw.bb:                                            ; preds = %for.cond, %for.cond, %for.cond
  %5 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %5, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %for.cond
  %6 = load i8*, i8** %ptr.addr, align 8
  ret i8* %6

sw.epilog:                                        ; preds = %sw.bb
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_getAtts(%struct.encoding* %enc, i8* %ptr, i32 %attsMax, %struct.ATTRIBUTE* %atts) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %attsMax.addr = alloca i32, align 4
  %atts.addr = alloca %struct.ATTRIBUTE*, align 8
  %state = alloca i32, align 4
  %nAtts = alloca i32, align 4
  %open = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %attsMax, i32* %attsMax.addr, align 4
  store %struct.ATTRIBUTE* %atts, %struct.ATTRIBUTE** %atts.addr, align 8
  store i32 1, i32* %state, align 4
  store i32 0, i32* %nAtts, align 4
  store i32 0, i32* %open, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i8, i8* %1, align 1
  %idxprom = zext i8 %2 to i64
  %3 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %4 = bitcast %struct.encoding* %3 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %4, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %5 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %5 to i32
  switch i32 %conv, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.11
    i32 7, label %sw.bb.27
    i32 29, label %sw.bb.43
    i32 22, label %sw.bb.43
    i32 24, label %sw.bb.43
    i32 12, label %sw.bb.58
    i32 13, label %sw.bb.80
    i32 3, label %sw.bb.106
    i32 21, label %sw.bb.114
    i32 9, label %sw.bb.156
    i32 10, label %sw.bb.156
    i32 11, label %sw.bb.172
    i32 17, label %sw.bb.172
  ]

sw.bb:                                            ; preds = %for.cond
  %6 = load i32, i32* %state, align 4
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end.9

if.then:                                          ; preds = %sw.bb
  %7 = load i32, i32* %nAtts, align 4
  %8 = load i32, i32* %attsMax.addr, align 4
  %cmp2 = icmp slt i32 %7, %8
  br i1 %cmp2, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i32, i32* %nAtts, align 4
  %idxprom5 = sext i32 %10 to i64
  %11 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx6 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %11, i64 %idxprom5
  %name = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx6, i32 0, i32 0
  store i8* %9, i8** %name, align 8
  %12 = load i32, i32* %nAtts, align 4
  %idxprom7 = sext i32 %12 to i64
  %13 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx8 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %13, i64 %idxprom7
  %normalized = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx8, i32 0, i32 3
  store i8 1, i8* %normalized, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  store i32 1, i32* %state, align 4
  br label %if.end.9

if.end.9:                                         ; preds = %if.end, %sw.bb
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %14, i64 1
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.11:                                         ; preds = %for.cond
  %15 = load i32, i32* %state, align 4
  %cmp12 = icmp eq i32 %15, 0
  br i1 %cmp12, label %if.then.14, label %if.end.25

if.then.14:                                       ; preds = %sw.bb.11
  %16 = load i32, i32* %nAtts, align 4
  %17 = load i32, i32* %attsMax.addr, align 4
  %cmp15 = icmp slt i32 %16, %17
  br i1 %cmp15, label %if.then.17, label %if.end.24

if.then.17:                                       ; preds = %if.then.14
  %18 = load i8*, i8** %ptr.addr, align 8
  %19 = load i32, i32* %nAtts, align 4
  %idxprom18 = sext i32 %19 to i64
  %20 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx19 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %20, i64 %idxprom18
  %name20 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx19, i32 0, i32 0
  store i8* %18, i8** %name20, align 8
  %21 = load i32, i32* %nAtts, align 4
  %idxprom21 = sext i32 %21 to i64
  %22 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx22 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %22, i64 %idxprom21
  %normalized23 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx22, i32 0, i32 3
  store i8 1, i8* %normalized23, align 1
  br label %if.end.24

if.end.24:                                        ; preds = %if.then.17, %if.then.14
  store i32 1, i32* %state, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %sw.bb.11
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr26, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.27:                                         ; preds = %for.cond
  %24 = load i32, i32* %state, align 4
  %cmp28 = icmp eq i32 %24, 0
  br i1 %cmp28, label %if.then.30, label %if.end.41

if.then.30:                                       ; preds = %sw.bb.27
  %25 = load i32, i32* %nAtts, align 4
  %26 = load i32, i32* %attsMax.addr, align 4
  %cmp31 = icmp slt i32 %25, %26
  br i1 %cmp31, label %if.then.33, label %if.end.40

if.then.33:                                       ; preds = %if.then.30
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i32, i32* %nAtts, align 4
  %idxprom34 = sext i32 %28 to i64
  %29 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx35 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %29, i64 %idxprom34
  %name36 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx35, i32 0, i32 0
  store i8* %27, i8** %name36, align 8
  %30 = load i32, i32* %nAtts, align 4
  %idxprom37 = sext i32 %30 to i64
  %31 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx38 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %31, i64 %idxprom37
  %normalized39 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx38, i32 0, i32 3
  store i8 1, i8* %normalized39, align 1
  br label %if.end.40

if.end.40:                                        ; preds = %if.then.33, %if.then.30
  store i32 1, i32* %state, align 4
  br label %if.end.41

if.end.41:                                        ; preds = %if.end.40, %sw.bb.27
  %32 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %32, i64 3
  store i8* %add.ptr42, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.43:                                         ; preds = %for.cond, %for.cond, %for.cond
  %33 = load i32, i32* %state, align 4
  %cmp44 = icmp eq i32 %33, 0
  br i1 %cmp44, label %if.then.46, label %if.end.57

if.then.46:                                       ; preds = %sw.bb.43
  %34 = load i32, i32* %nAtts, align 4
  %35 = load i32, i32* %attsMax.addr, align 4
  %cmp47 = icmp slt i32 %34, %35
  br i1 %cmp47, label %if.then.49, label %if.end.56

if.then.49:                                       ; preds = %if.then.46
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i32, i32* %nAtts, align 4
  %idxprom50 = sext i32 %37 to i64
  %38 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx51 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %38, i64 %idxprom50
  %name52 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx51, i32 0, i32 0
  store i8* %36, i8** %name52, align 8
  %39 = load i32, i32* %nAtts, align 4
  %idxprom53 = sext i32 %39 to i64
  %40 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx54 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %40, i64 %idxprom53
  %normalized55 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx54, i32 0, i32 3
  store i8 1, i8* %normalized55, align 1
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.49, %if.then.46
  store i32 1, i32* %state, align 4
  br label %if.end.57

if.end.57:                                        ; preds = %if.end.56, %sw.bb.43
  br label %sw.epilog

sw.bb.58:                                         ; preds = %for.cond
  %41 = load i32, i32* %state, align 4
  %cmp59 = icmp ne i32 %41, 2
  br i1 %cmp59, label %if.then.61, label %if.else

if.then.61:                                       ; preds = %sw.bb.58
  %42 = load i32, i32* %nAtts, align 4
  %43 = load i32, i32* %attsMax.addr, align 4
  %cmp62 = icmp slt i32 %42, %43
  br i1 %cmp62, label %if.then.64, label %if.end.68

if.then.64:                                       ; preds = %if.then.61
  %44 = load i8*, i8** %ptr.addr, align 8
  %add.ptr65 = getelementptr i8, i8* %44, i64 1
  %45 = load i32, i32* %nAtts, align 4
  %idxprom66 = sext i32 %45 to i64
  %46 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx67 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %46, i64 %idxprom66
  %valuePtr = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx67, i32 0, i32 1
  store i8* %add.ptr65, i8** %valuePtr, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.64, %if.then.61
  store i32 2, i32* %state, align 4
  store i32 12, i32* %open, align 4
  br label %if.end.79

if.else:                                          ; preds = %sw.bb.58
  %47 = load i32, i32* %open, align 4
  %cmp69 = icmp eq i32 %47, 12
  br i1 %cmp69, label %if.then.71, label %if.end.78

if.then.71:                                       ; preds = %if.else
  store i32 0, i32* %state, align 4
  %48 = load i32, i32* %nAtts, align 4
  %49 = load i32, i32* %attsMax.addr, align 4
  %cmp72 = icmp slt i32 %48, %49
  br i1 %cmp72, label %if.then.74, label %if.end.77

if.then.74:                                       ; preds = %if.then.71
  %50 = load i8*, i8** %ptr.addr, align 8
  %51 = load i32, i32* %nAtts, align 4
  %idxprom75 = sext i32 %51 to i64
  %52 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx76 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %52, i64 %idxprom75
  %valueEnd = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx76, i32 0, i32 2
  store i8* %50, i8** %valueEnd, align 8
  br label %if.end.77

if.end.77:                                        ; preds = %if.then.74, %if.then.71
  %53 = load i32, i32* %nAtts, align 4
  %inc = add i32 %53, 1
  store i32 %inc, i32* %nAtts, align 4
  br label %if.end.78

if.end.78:                                        ; preds = %if.end.77, %if.else
  br label %if.end.79

if.end.79:                                        ; preds = %if.end.78, %if.end.68
  br label %sw.epilog

sw.bb.80:                                         ; preds = %for.cond
  %54 = load i32, i32* %state, align 4
  %cmp81 = icmp ne i32 %54, 2
  br i1 %cmp81, label %if.then.83, label %if.else.92

if.then.83:                                       ; preds = %sw.bb.80
  %55 = load i32, i32* %nAtts, align 4
  %56 = load i32, i32* %attsMax.addr, align 4
  %cmp84 = icmp slt i32 %55, %56
  br i1 %cmp84, label %if.then.86, label %if.end.91

if.then.86:                                       ; preds = %if.then.83
  %57 = load i8*, i8** %ptr.addr, align 8
  %add.ptr87 = getelementptr i8, i8* %57, i64 1
  %58 = load i32, i32* %nAtts, align 4
  %idxprom88 = sext i32 %58 to i64
  %59 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx89 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %59, i64 %idxprom88
  %valuePtr90 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx89, i32 0, i32 1
  store i8* %add.ptr87, i8** %valuePtr90, align 8
  br label %if.end.91

if.end.91:                                        ; preds = %if.then.86, %if.then.83
  store i32 2, i32* %state, align 4
  store i32 13, i32* %open, align 4
  br label %if.end.105

if.else.92:                                       ; preds = %sw.bb.80
  %60 = load i32, i32* %open, align 4
  %cmp93 = icmp eq i32 %60, 13
  br i1 %cmp93, label %if.then.95, label %if.end.104

if.then.95:                                       ; preds = %if.else.92
  store i32 0, i32* %state, align 4
  %61 = load i32, i32* %nAtts, align 4
  %62 = load i32, i32* %attsMax.addr, align 4
  %cmp96 = icmp slt i32 %61, %62
  br i1 %cmp96, label %if.then.98, label %if.end.102

if.then.98:                                       ; preds = %if.then.95
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i32, i32* %nAtts, align 4
  %idxprom99 = sext i32 %64 to i64
  %65 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx100 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %65, i64 %idxprom99
  %valueEnd101 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx100, i32 0, i32 2
  store i8* %63, i8** %valueEnd101, align 8
  br label %if.end.102

if.end.102:                                       ; preds = %if.then.98, %if.then.95
  %66 = load i32, i32* %nAtts, align 4
  %inc103 = add i32 %66, 1
  store i32 %inc103, i32* %nAtts, align 4
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.102, %if.else.92
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %if.end.91
  br label %sw.epilog

sw.bb.106:                                        ; preds = %for.cond
  %67 = load i32, i32* %nAtts, align 4
  %68 = load i32, i32* %attsMax.addr, align 4
  %cmp107 = icmp slt i32 %67, %68
  br i1 %cmp107, label %if.then.109, label %if.end.113

if.then.109:                                      ; preds = %sw.bb.106
  %69 = load i32, i32* %nAtts, align 4
  %idxprom110 = sext i32 %69 to i64
  %70 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx111 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %70, i64 %idxprom110
  %normalized112 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx111, i32 0, i32 3
  store i8 0, i8* %normalized112, align 1
  br label %if.end.113

if.end.113:                                       ; preds = %if.then.109, %sw.bb.106
  br label %sw.epilog

sw.bb.114:                                        ; preds = %for.cond
  %71 = load i32, i32* %state, align 4
  %cmp115 = icmp eq i32 %71, 1
  br i1 %cmp115, label %if.then.117, label %if.else.118

if.then.117:                                      ; preds = %sw.bb.114
  store i32 0, i32* %state, align 4
  br label %if.end.155

if.else.118:                                      ; preds = %sw.bb.114
  %72 = load i32, i32* %state, align 4
  %cmp119 = icmp eq i32 %72, 2
  br i1 %cmp119, label %land.lhs.true, label %if.end.154

land.lhs.true:                                    ; preds = %if.else.118
  %73 = load i32, i32* %nAtts, align 4
  %74 = load i32, i32* %attsMax.addr, align 4
  %cmp121 = icmp slt i32 %73, %74
  br i1 %cmp121, label %land.lhs.true.123, label %if.end.154

land.lhs.true.123:                                ; preds = %land.lhs.true
  %75 = load i32, i32* %nAtts, align 4
  %idxprom124 = sext i32 %75 to i64
  %76 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx125 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %76, i64 %idxprom124
  %normalized126 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx125, i32 0, i32 3
  %77 = load i8, i8* %normalized126, align 1
  %conv127 = sext i8 %77 to i32
  %tobool = icmp ne i32 %conv127, 0
  br i1 %tobool, label %land.lhs.true.128, label %if.end.154

land.lhs.true.128:                                ; preds = %land.lhs.true.123
  %78 = load i8*, i8** %ptr.addr, align 8
  %79 = load i32, i32* %nAtts, align 4
  %idxprom129 = sext i32 %79 to i64
  %80 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx130 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %80, i64 %idxprom129
  %valuePtr131 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx130, i32 0, i32 1
  %81 = load i8*, i8** %valuePtr131, align 8
  %cmp132 = icmp eq i8* %78, %81
  br i1 %cmp132, label %if.then.150, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.128
  %82 = load i8*, i8** %ptr.addr, align 8
  %83 = load i8, i8* %82, align 1
  %conv134 = sext i8 %83 to i32
  %cmp135 = icmp ne i32 %conv134, 32
  br i1 %cmp135, label %if.then.150, label %lor.lhs.false.137

lor.lhs.false.137:                                ; preds = %lor.lhs.false
  %84 = load i8*, i8** %ptr.addr, align 8
  %add.ptr138 = getelementptr i8, i8* %84, i64 1
  %85 = load i8, i8* %add.ptr138, align 1
  %conv139 = sext i8 %85 to i32
  %cmp140 = icmp eq i32 %conv139, 32
  br i1 %cmp140, label %if.then.150, label %lor.lhs.false.142

lor.lhs.false.142:                                ; preds = %lor.lhs.false.137
  %86 = load i8*, i8** %ptr.addr, align 8
  %add.ptr143 = getelementptr i8, i8* %86, i64 1
  %87 = load i8, i8* %add.ptr143, align 1
  %idxprom144 = zext i8 %87 to i64
  %88 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %89 = bitcast %struct.encoding* %88 to %struct.normal_encoding*
  %type145 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %89, i32 0, i32 1
  %arrayidx146 = getelementptr [256 x i8], [256 x i8]* %type145, i32 0, i64 %idxprom144
  %90 = load i8, i8* %arrayidx146, align 1
  %conv147 = zext i8 %90 to i32
  %91 = load i32, i32* %open, align 4
  %cmp148 = icmp eq i32 %conv147, %91
  br i1 %cmp148, label %if.then.150, label %if.end.154

if.then.150:                                      ; preds = %lor.lhs.false.142, %lor.lhs.false.137, %lor.lhs.false, %land.lhs.true.128
  %92 = load i32, i32* %nAtts, align 4
  %idxprom151 = sext i32 %92 to i64
  %93 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx152 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %93, i64 %idxprom151
  %normalized153 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx152, i32 0, i32 3
  store i8 0, i8* %normalized153, align 1
  br label %if.end.154

if.end.154:                                       ; preds = %if.then.150, %lor.lhs.false.142, %land.lhs.true.123, %land.lhs.true, %if.else.118
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %if.then.117
  br label %sw.epilog

sw.bb.156:                                        ; preds = %for.cond, %for.cond
  %94 = load i32, i32* %state, align 4
  %cmp157 = icmp eq i32 %94, 1
  br i1 %cmp157, label %if.then.159, label %if.else.160

if.then.159:                                      ; preds = %sw.bb.156
  store i32 0, i32* %state, align 4
  br label %if.end.171

if.else.160:                                      ; preds = %sw.bb.156
  %95 = load i32, i32* %state, align 4
  %cmp161 = icmp eq i32 %95, 2
  br i1 %cmp161, label %land.lhs.true.163, label %if.end.170

land.lhs.true.163:                                ; preds = %if.else.160
  %96 = load i32, i32* %nAtts, align 4
  %97 = load i32, i32* %attsMax.addr, align 4
  %cmp164 = icmp slt i32 %96, %97
  br i1 %cmp164, label %if.then.166, label %if.end.170

if.then.166:                                      ; preds = %land.lhs.true.163
  %98 = load i32, i32* %nAtts, align 4
  %idxprom167 = sext i32 %98 to i64
  %99 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx168 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %99, i64 %idxprom167
  %normalized169 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx168, i32 0, i32 3
  store i8 0, i8* %normalized169, align 1
  br label %if.end.170

if.end.170:                                       ; preds = %if.then.166, %land.lhs.true.163, %if.else.160
  br label %if.end.171

if.end.171:                                       ; preds = %if.end.170, %if.then.159
  br label %sw.epilog

sw.bb.172:                                        ; preds = %for.cond, %for.cond
  %100 = load i32, i32* %state, align 4
  %cmp173 = icmp ne i32 %100, 2
  br i1 %cmp173, label %if.then.175, label %if.end.176

if.then.175:                                      ; preds = %sw.bb.172
  %101 = load i32, i32* %nAtts, align 4
  ret i32 %101

if.end.176:                                       ; preds = %sw.bb.172
  br label %sw.epilog

sw.default:                                       ; preds = %for.cond
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.176, %if.end.171, %if.end.155, %if.end.113, %if.end.105, %if.end.79, %if.end.57, %if.end.41, %if.end.25, %if.end.9
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %102 = load i8*, i8** %ptr.addr, align 8
  %add.ptr177 = getelementptr i8, i8* %102, i64 1
  store i8* %add.ptr177, i8** %ptr.addr, align 8
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_charRefNumber(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  %c = alloca i32, align 4
  %c26 = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 0, i32* %result, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i8, i8* %1, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 120
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %3, i64 1
  store i8* %add.ptr2, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp eq i32 %conv3, 59
  %lnot = xor i1 %cmp4, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  store i32 %conv6, i32* %c, align 4
  %8 = load i32, i32* %c, align 4
  switch i32 %8, label %sw.epilog [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 65, label %sw.bb.7
    i32 66, label %sw.bb.7
    i32 67, label %sw.bb.7
    i32 68, label %sw.bb.7
    i32 69, label %sw.bb.7
    i32 70, label %sw.bb.7
    i32 97, label %sw.bb.11
    i32 98, label %sw.bb.11
    i32 99, label %sw.bb.11
    i32 100, label %sw.bb.11
    i32 101, label %sw.bb.11
    i32 102, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %9 = load i32, i32* %result, align 4
  %shl = shl i32 %9, 4
  store i32 %shl, i32* %result, align 4
  %10 = load i32, i32* %c, align 4
  %sub = sub i32 %10, 48
  %11 = load i32, i32* %result, align 4
  %or = or i32 %11, %sub
  store i32 %or, i32* %result, align 4
  br label %sw.epilog

sw.bb.7:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %12 = load i32, i32* %result, align 4
  %shl8 = shl i32 %12, 4
  store i32 %shl8, i32* %result, align 4
  %13 = load i32, i32* %c, align 4
  %sub9 = sub i32 %13, 65
  %add = add i32 10, %sub9
  %14 = load i32, i32* %result, align 4
  %add10 = add i32 %14, %add
  store i32 %add10, i32* %result, align 4
  br label %sw.epilog

sw.bb.11:                                         ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  %15 = load i32, i32* %result, align 4
  %shl12 = shl i32 %15, 4
  store i32 %shl12, i32* %result, align 4
  %16 = load i32, i32* %c, align 4
  %sub13 = sub i32 %16, 97
  %add14 = add i32 10, %sub13
  %17 = load i32, i32* %result, align 4
  %add15 = add i32 %17, %add14
  store i32 %add15, i32* %result, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %for.body, %sw.bb.11, %sw.bb.7, %sw.bb
  %18 = load i32, i32* %result, align 4
  %cmp16 = icmp sge i32 %18, 1114112
  br i1 %cmp16, label %if.then.18, label %if.end

if.then.18:                                       ; preds = %sw.epilog
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.epilog
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr19 = getelementptr i8, i8* %19, i64 1
  store i8* %add.ptr19, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.37

if.else:                                          ; preds = %entry
  br label %for.cond.20

for.cond.20:                                      ; preds = %for.inc.34, %if.else
  %20 = load i8*, i8** %ptr.addr, align 8
  %21 = load i8, i8* %20, align 1
  %conv21 = sext i8 %21 to i32
  %cmp22 = icmp eq i32 %conv21, 59
  %lnot24 = xor i1 %cmp22, true
  br i1 %lnot24, label %for.body.25, label %for.end.36

for.body.25:                                      ; preds = %for.cond.20
  %22 = load i8*, i8** %ptr.addr, align 8
  %23 = load i8, i8* %22, align 1
  %conv27 = sext i8 %23 to i32
  store i32 %conv27, i32* %c26, align 4
  %24 = load i32, i32* %result, align 4
  %mul = mul i32 %24, 10
  store i32 %mul, i32* %result, align 4
  %25 = load i32, i32* %c26, align 4
  %sub28 = sub i32 %25, 48
  %26 = load i32, i32* %result, align 4
  %add29 = add i32 %26, %sub28
  store i32 %add29, i32* %result, align 4
  %27 = load i32, i32* %result, align 4
  %cmp30 = icmp sge i32 %27, 1114112
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %for.body.25
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %for.body.25
  br label %for.inc.34

for.inc.34:                                       ; preds = %if.end.33
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %28, i64 1
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %for.cond.20

for.end.36:                                       ; preds = %for.cond.20
  br label %if.end.37

if.end.37:                                        ; preds = %for.end.36, %for.end
  %29 = load i32, i32* %result, align 4
  %call = call i32 @checkCharRefNumber(i32 %29)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.37, %if.then.32, %if.then.18
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_predefinedEntityName(%struct.encoding* %enc, i8* %ptr, i8* %end) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %div = sdiv i64 %sub.ptr.sub, 1
  switch i64 %div, label %sw.epilog.64 [
    i64 2, label %sw.bb
    i64 3, label %sw.bb.5
    i64 4, label %sw.bb.23
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %add.ptr, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 116
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %conv2 = sext i8 %5 to i32
  switch i32 %conv2, label %sw.epilog [
    i32 108, label %sw.bb.3
    i32 103, label %sw.bb.4
  ]

sw.bb.3:                                          ; preds = %if.then
  store i32 60, i32* %retval
  br label %return

sw.bb.4:                                          ; preds = %if.then
  store i32 62, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.then
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %sw.bb
  br label %sw.epilog.64

sw.bb.5:                                          ; preds = %entry
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv6 = sext i8 %7 to i32
  %cmp7 = icmp eq i32 %conv6, 97
  br i1 %cmp7, label %if.then.9, label %if.end.22

if.then.9:                                        ; preds = %sw.bb.5
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %8, i64 1
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv11 = sext i8 %10 to i32
  %cmp12 = icmp eq i32 %conv11, 109
  br i1 %cmp12, label %if.then.14, label %if.end.21

if.then.14:                                       ; preds = %if.then.9
  %11 = load i8*, i8** %ptr.addr, align 8
  %add.ptr15 = getelementptr i8, i8* %11, i64 1
  store i8* %add.ptr15, i8** %ptr.addr, align 8
  %12 = load i8*, i8** %ptr.addr, align 8
  %13 = load i8, i8* %12, align 1
  %conv16 = sext i8 %13 to i32
  %cmp17 = icmp eq i32 %conv16, 112
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.14
  store i32 38, i32* %retval
  br label %return

if.end.20:                                        ; preds = %if.then.14
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.then.9
  br label %if.end.22

if.end.22:                                        ; preds = %if.end.21, %sw.bb.5
  br label %sw.epilog.64

sw.bb.23:                                         ; preds = %entry
  %14 = load i8*, i8** %ptr.addr, align 8
  %15 = load i8, i8* %14, align 1
  %conv24 = sext i8 %15 to i32
  switch i32 %conv24, label %sw.epilog.63 [
    i32 113, label %sw.bb.25
    i32 97, label %sw.bb.44
  ]

sw.bb.25:                                         ; preds = %sw.bb.23
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %16, i64 1
  store i8* %add.ptr26, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv27 = sext i8 %18 to i32
  %cmp28 = icmp eq i32 %conv27, 117
  br i1 %cmp28, label %if.then.30, label %if.end.43

if.then.30:                                       ; preds = %sw.bb.25
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr31 = getelementptr i8, i8* %19, i64 1
  store i8* %add.ptr31, i8** %ptr.addr, align 8
  %20 = load i8*, i8** %ptr.addr, align 8
  %21 = load i8, i8* %20, align 1
  %conv32 = sext i8 %21 to i32
  %cmp33 = icmp eq i32 %conv32, 111
  br i1 %cmp33, label %if.then.35, label %if.end.42

if.then.35:                                       ; preds = %if.then.30
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr36 = getelementptr i8, i8* %22, i64 1
  store i8* %add.ptr36, i8** %ptr.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8, i8* %23, align 1
  %conv37 = sext i8 %24 to i32
  %cmp38 = icmp eq i32 %conv37, 116
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %if.then.35
  store i32 34, i32* %retval
  br label %return

if.end.41:                                        ; preds = %if.then.35
  br label %if.end.42

if.end.42:                                        ; preds = %if.end.41, %if.then.30
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %sw.bb.25
  br label %sw.epilog.63

sw.bb.44:                                         ; preds = %sw.bb.23
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %25, i64 1
  store i8* %add.ptr45, i8** %ptr.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8, i8* %26, align 1
  %conv46 = sext i8 %27 to i32
  %cmp47 = icmp eq i32 %conv46, 112
  br i1 %cmp47, label %if.then.49, label %if.end.62

if.then.49:                                       ; preds = %sw.bb.44
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr50 = getelementptr i8, i8* %28, i64 1
  store i8* %add.ptr50, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8, i8* %29, align 1
  %conv51 = sext i8 %30 to i32
  %cmp52 = icmp eq i32 %conv51, 111
  br i1 %cmp52, label %if.then.54, label %if.end.61

if.then.54:                                       ; preds = %if.then.49
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr55 = getelementptr i8, i8* %31, i64 1
  store i8* %add.ptr55, i8** %ptr.addr, align 8
  %32 = load i8*, i8** %ptr.addr, align 8
  %33 = load i8, i8* %32, align 1
  %conv56 = sext i8 %33 to i32
  %cmp57 = icmp eq i32 %conv56, 115
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %if.then.54
  store i32 39, i32* %retval
  br label %return

if.end.60:                                        ; preds = %if.then.54
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %if.then.49
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %sw.bb.44
  br label %sw.epilog.63

sw.epilog.63:                                     ; preds = %sw.bb.23, %if.end.62, %if.end.43
  br label %sw.epilog.64

sw.epilog.64:                                     ; preds = %sw.epilog.63, %entry, %if.end.22, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog.64, %if.then.59, %if.then.40, %if.then.19, %sw.bb.4, %sw.bb.3
  %34 = load i32, i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal void @normal_updatePosition(%struct.encoding* %enc, i8* %ptr, i8* %end, %struct.position* %pos) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %pos.addr = alloca %struct.position*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %struct.position* %pos, %struct.position** %pos.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.1
    i32 7, label %sw.bb.3
    i32 10, label %sw.bb.5
    i32 9, label %sw.bb.7
  ]

sw.bb:                                            ; preds = %while.body
  %7 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %while.body
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %8, i64 3
  store i8* %add.ptr2, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.3:                                          ; preds = %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr4 = getelementptr i8, i8* %9, i64 4
  store i8* %add.ptr4, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %while.body
  %10 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber = getelementptr inbounds %struct.position, %struct.position* %10, i32 0, i32 1
  store i64 -1, i64* %columnNumber, align 8
  %11 = load %struct.position*, %struct.position** %pos.addr, align 8
  %lineNumber = getelementptr inbounds %struct.position, %struct.position* %11, i32 0, i32 0
  %12 = load i64, i64* %lineNumber, align 8
  %inc = add i64 %12, 1
  store i64 %inc, i64* %lineNumber, align 8
  %13 = load i8*, i8** %ptr.addr, align 8
  %add.ptr6 = getelementptr i8, i8* %13, i64 1
  store i8* %add.ptr6, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %while.body
  %14 = load %struct.position*, %struct.position** %pos.addr, align 8
  %lineNumber8 = getelementptr inbounds %struct.position, %struct.position* %14, i32 0, i32 0
  %15 = load i64, i64* %lineNumber8, align 8
  %inc9 = add i64 %15, 1
  store i64 %inc9, i64* %lineNumber8, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %16, i64 1
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8*, i8** %end.addr, align 8
  %cmp11 = icmp ne i8* %17, %18
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.7
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8, i8* %19, align 1
  %idxprom13 = zext i8 %20 to i64
  %21 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %22 = bitcast %struct.encoding* %21 to %struct.normal_encoding*
  %type14 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %22, i32 0, i32 1
  %arrayidx15 = getelementptr [256 x i8], [256 x i8]* %type14, i32 0, i64 %idxprom13
  %23 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %23 to i32
  %cmp17 = icmp eq i32 %conv16, 10
  br i1 %cmp17, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr19 = getelementptr i8, i8* %24, i64 1
  store i8* %add.ptr19, i8** %ptr.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %sw.bb.7
  %25 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber20 = getelementptr inbounds %struct.position, %struct.position* %25, i32 0, i32 1
  store i64 -1, i64* %columnNumber20, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %26 = load i8*, i8** %ptr.addr, align 8
  %add.ptr21 = getelementptr i8, i8* %26, i64 1
  store i8* %add.ptr21, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb.5, %sw.bb.3, %sw.bb.1, %sw.bb
  %27 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber22 = getelementptr inbounds %struct.position, %struct.position* %27, i32 0, i32 1
  %28 = load i64, i64* %columnNumber22, align 8
  %inc23 = add i64 %28, 1
  store i64 %inc23, i64* %columnNumber22, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_isPublicId(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %badPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %badPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %badPtr, i8*** %badPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %add.ptr1 = getelementptr i8, i8* %1, i64 -1
  store i8* %add.ptr1, i8** %end.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %8 to i32
  switch i32 %conv, label %sw.default [
    i32 25, label %sw.bb
    i32 24, label %sw.bb
    i32 27, label %sw.bb
    i32 13, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 17, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 18, label %sw.bb
    i32 16, label %sw.bb
    i32 33, label %sw.bb
    i32 30, label %sw.bb
    i32 19, label %sw.bb
    i32 23, label %sw.bb
    i32 21, label %sw.bb.2
    i32 26, label %sw.bb.6
    i32 22, label %sw.bb.6
  ]

sw.bb:                                            ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body
  br label %sw.epilog.13

sw.bb.2:                                          ; preds = %for.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv3 = sext i8 %10 to i32
  %cmp4 = icmp eq i32 %conv3, 9
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.2
  %11 = load i8*, i8** %ptr.addr, align 8
  %12 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %11, i8** %12, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb.2
  br label %sw.epilog.13

sw.bb.6:                                          ; preds = %for.body, %for.body
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8, i8* %13, align 1
  %conv7 = sext i8 %14 to i32
  %and = and i32 %conv7, -128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %sw.bb.6
  br label %sw.epilog.13

if.end.9:                                         ; preds = %sw.bb.6
  br label %sw.default

sw.default:                                       ; preds = %for.body, %if.end.9
  %15 = load i8*, i8** %ptr.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv10 = sext i8 %16 to i32
  switch i32 %conv10, label %sw.default.12 [
    i32 36, label %sw.bb.11
    i32 64, label %sw.bb.11
  ]

sw.bb.11:                                         ; preds = %sw.default, %sw.default
  br label %sw.epilog

sw.default.12:                                    ; preds = %sw.default
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %17, i8** %18, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.11
  br label %sw.epilog.13

sw.epilog.13:                                     ; preds = %sw.epilog, %if.then.8, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.13
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr14 = getelementptr i8, i8* %19, i64 1
  store i8* %add.ptr14, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.default.12, %if.then
  %20 = load i32, i32* %retval
  ret i32 %20
}

; Function Attrs: nounwind uwtable
define internal void @latin1_toUtf8(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i8** %toP, i8* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i8**, align 8
  %toLim.addr = alloca i8*, align 8
  %c = alloca i8, align 1
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i8** %toP, i8*** %toP.addr, align 8
  store i8* %toLim, i8** %toLim.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.20, %entry
  %0 = load i8**, i8*** %fromP.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp eq i8* %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.cond
  br label %for.end

if.end:                                           ; preds = %for.cond
  %3 = load i8**, i8*** %fromP.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = load i8, i8* %4, align 1
  store i8 %5, i8* %c, align 1
  %6 = load i8, i8* %c, align 1
  %conv = zext i8 %6 to i32
  %and = and i32 %conv, 128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.1, label %if.else

if.then.1:                                        ; preds = %if.end
  %7 = load i8*, i8** %toLim.addr, align 8
  %8 = load i8**, i8*** %toP.addr, align 8
  %9 = load i8*, i8** %8, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %7 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp2 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp2, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  br label %for.end

if.end.5:                                         ; preds = %if.then.1
  %10 = load i8, i8* %c, align 1
  %conv6 = zext i8 %10 to i32
  %shr = ashr i32 %conv6, 6
  %or = or i32 %shr, 192
  %conv7 = trunc i32 %or to i8
  %11 = load i8**, i8*** %toP.addr, align 8
  %12 = load i8*, i8** %11, align 8
  %incdec.ptr = getelementptr i8, i8* %12, i32 1
  store i8* %incdec.ptr, i8** %11, align 8
  store i8 %conv7, i8* %12, align 1
  %13 = load i8, i8* %c, align 1
  %conv8 = zext i8 %13 to i32
  %and9 = and i32 %conv8, 63
  %or10 = or i32 %and9, 128
  %conv11 = trunc i32 %or10 to i8
  %14 = load i8**, i8*** %toP.addr, align 8
  %15 = load i8*, i8** %14, align 8
  %incdec.ptr12 = getelementptr i8, i8* %15, i32 1
  store i8* %incdec.ptr12, i8** %14, align 8
  store i8 %conv11, i8* %15, align 1
  %16 = load i8**, i8*** %fromP.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %incdec.ptr13 = getelementptr i8, i8* %17, i32 1
  store i8* %incdec.ptr13, i8** %16, align 8
  br label %if.end.20

if.else:                                          ; preds = %if.end
  %18 = load i8**, i8*** %toP.addr, align 8
  %19 = load i8*, i8** %18, align 8
  %20 = load i8*, i8** %toLim.addr, align 8
  %cmp14 = icmp eq i8* %19, %20
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %if.else
  br label %for.end

if.end.17:                                        ; preds = %if.else
  %21 = load i8**, i8*** %fromP.addr, align 8
  %22 = load i8*, i8** %21, align 8
  %incdec.ptr18 = getelementptr i8, i8* %22, i32 1
  store i8* %incdec.ptr18, i8** %21, align 8
  %23 = load i8, i8* %22, align 1
  %24 = load i8**, i8*** %toP.addr, align 8
  %25 = load i8*, i8** %24, align 8
  %incdec.ptr19 = getelementptr i8, i8* %25, i32 1
  store i8* %incdec.ptr19, i8** %24, align 8
  store i8 %23, i8* %25, align 1
  br label %if.end.20

if.end.20:                                        ; preds = %if.end.17, %if.end.5
  br label %for.cond

for.end:                                          ; preds = %if.then.16, %if.then.4, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @latin1_toUtf16(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i16** %toP, i16* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i16**, align 8
  %toLim.addr = alloca i16*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i16** %toP, i16*** %toP.addr, align 8
  store i16* %toLim, i16** %toLim.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8**, i8*** %fromP.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i16**, i16*** %toP.addr, align 8
  %4 = load i16*, i16** %3, align 8
  %5 = load i16*, i16** %toLim.addr, align 8
  %cmp1 = icmp ne i16* %4, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load i8**, i8*** %fromP.addr, align 8
  %8 = load i8*, i8** %7, align 8
  %incdec.ptr = getelementptr i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %7, align 8
  %9 = load i8, i8* %8, align 1
  %conv = zext i8 %9 to i16
  %10 = load i16**, i16*** %toP.addr, align 8
  %11 = load i16*, i16** %10, align 8
  %incdec.ptr2 = getelementptr i16, i16* %11, i32 1
  store i16* %incdec.ptr2, i16** %10, align 8
  store i16 %conv, i16* %11, align 2
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanLit(i32 %open, %struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %open.addr = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %t = alloca i32, align 4
  store i32 %open, i32* %open.addr, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  store i32 %conv, i32* %t, align 4
  %7 = load i32, i32* %t, align 4
  switch i32 %7, label %sw.default.47 [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.5
    i32 7, label %sw.bb.18
    i32 0, label %sw.bb.31
    i32 1, label %sw.bb.31
    i32 8, label %sw.bb.31
    i32 12, label %sw.bb.32
    i32 13, label %sw.bb.32
  ]

sw.bb:                                            ; preds = %while.body
  %8 = load i8*, i8** %end.addr, align 8
  %9 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %9 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp1 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  %10 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %11 = bitcast %struct.encoding* %10 to %struct.normal_encoding*
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %11, i32 0, i32 8
  %12 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %12(%struct.encoding* %13, i8* %14)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %16 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %15, i8** %16, align 8
  store i32 0, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %17, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.5:                                          ; preds = %while.body
  %18 = load i8*, i8** %end.addr, align 8
  %19 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast6 = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast7 = ptrtoint i8* %19 to i64
  %sub.ptr.sub8 = sub i64 %sub.ptr.lhs.cast6, %sub.ptr.rhs.cast7
  %cmp9 = icmp slt i64 %sub.ptr.sub8, 3
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %sw.bb.5
  store i32 -2, i32* %retval
  br label %return

if.end.12:                                        ; preds = %sw.bb.5
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = bitcast %struct.encoding* %20 to %struct.normal_encoding*
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %21, i32 0, i32 9
  %22 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %23 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %24 = load i8*, i8** %ptr.addr, align 8
  %call13 = call i32 %22(%struct.encoding* %23, i8* %24)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  %25 = load i8*, i8** %ptr.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %25, i8** %26, align 8
  store i32 0, i32* %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %27, i64 3
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.18:                                         ; preds = %while.body
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast19 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %29 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %cmp22 = icmp slt i64 %sub.ptr.sub21, 4
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %sw.bb.18
  store i32 -2, i32* %retval
  br label %return

if.end.25:                                        ; preds = %sw.bb.18
  %30 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %31 = bitcast %struct.encoding* %30 to %struct.normal_encoding*
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %31, i32 0, i32 10
  %32 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  %33 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %34 = load i8*, i8** %ptr.addr, align 8
  %call26 = call i32 %32(%struct.encoding* %33, i8* %34)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.end.25
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %35, i8** %36, align 8
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %if.end.25
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr30 = getelementptr i8, i8* %37, i64 4
  store i8* %add.ptr30, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.31:                                         ; preds = %while.body, %while.body, %while.body
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %38, i8** %39, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.32:                                         ; preds = %while.body, %while.body
  %40 = load i8*, i8** %ptr.addr, align 8
  %add.ptr33 = getelementptr i8, i8* %40, i64 1
  store i8* %add.ptr33, i8** %ptr.addr, align 8
  %41 = load i32, i32* %t, align 4
  %42 = load i32, i32* %open.addr, align 4
  %cmp34 = icmp ne i32 %41, %42
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %sw.bb.32
  br label %sw.epilog

if.end.37:                                        ; preds = %sw.bb.32
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %end.addr, align 8
  %cmp38 = icmp eq i8* %43, %44
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %if.end.37
  store i32 -27, i32* %retval
  br label %return

if.end.41:                                        ; preds = %if.end.37
  %45 = load i8*, i8** %ptr.addr, align 8
  %46 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %45, i8** %46, align 8
  %47 = load i8*, i8** %ptr.addr, align 8
  %48 = load i8, i8* %47, align 1
  %idxprom42 = zext i8 %48 to i64
  %49 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %50 = bitcast %struct.encoding* %49 to %struct.normal_encoding*
  %type43 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %50, i32 0, i32 1
  %arrayidx44 = getelementptr [256 x i8], [256 x i8]* %type43, i32 0, i64 %idxprom42
  %51 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %51 to i32
  switch i32 %conv45, label %sw.default [
    i32 21, label %sw.bb.46
    i32 9, label %sw.bb.46
    i32 10, label %sw.bb.46
    i32 11, label %sw.bb.46
    i32 30, label %sw.bb.46
    i32 20, label %sw.bb.46
  ]

sw.bb.46:                                         ; preds = %if.end.41, %if.end.41, %if.end.41, %if.end.41, %if.end.41, %if.end.41
  store i32 27, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end.41
  store i32 0, i32* %retval
  br label %return

sw.default.47:                                    ; preds = %while.body
  %52 = load i8*, i8** %ptr.addr, align 8
  %add.ptr48 = getelementptr i8, i8* %52, i64 1
  store i8* %add.ptr48, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default.47, %if.then.36, %if.end.29, %if.end.16, %if.end.4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb.46, %if.then.40, %sw.bb.31, %if.then.28, %if.then.24, %if.then.15, %if.then.11, %if.then.3, %if.then
  %53 = load i32, i32* %retval
  ret i32 %53
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanDecl(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 27, label %sw.bb
    i32 20, label %sw.bb.1
    i32 22, label %sw.bb.3
    i32 24, label %sw.bb.3
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %8, i64 1
  %9 = load i8*, i8** %end.addr, align 8
  %10 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @normal_scanComment(%struct.encoding* %7, i8* %add.ptr, i8* %9, i8** %10)
  store i32 %call, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end
  %11 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %11, i64 1
  %12 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr2, i8** %12, align 8
  store i32 33, i32* %retval
  br label %return

sw.bb.3:                                          ; preds = %if.end, %if.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %add.ptr4 = getelementptr i8, i8* %13, i64 1
  store i8* %add.ptr4, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %15 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %14, i8** %15, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.3
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.28, %sw.epilog
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %end.addr, align 8
  %cmp5 = icmp ne i8* %16, %17
  br i1 %cmp5, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %18 = load i8*, i8** %ptr.addr, align 8
  %19 = load i8, i8* %18, align 1
  %idxprom7 = zext i8 %19 to i64
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = bitcast %struct.encoding* %20 to %struct.normal_encoding*
  %type8 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %21, i32 0, i32 1
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* %type8, i32 0, i64 %idxprom7
  %22 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %22 to i32
  switch i32 %conv10, label %sw.default.27 [
    i32 30, label %sw.bb.11
    i32 21, label %sw.bb.24
    i32 9, label %sw.bb.24
    i32 10, label %sw.bb.24
    i32 22, label %sw.bb.25
    i32 24, label %sw.bb.25
  ]

sw.bb.11:                                         ; preds = %while.body
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr12 = getelementptr i8, i8* %23, i64 1
  %24 = load i8*, i8** %end.addr, align 8
  %cmp13 = icmp eq i8* %add.ptr12, %24
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %sw.bb.11
  store i32 -1, i32* %retval
  br label %return

if.end.16:                                        ; preds = %sw.bb.11
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %25, i64 1
  %26 = load i8, i8* %add.ptr17, align 1
  %idxprom18 = zext i8 %26 to i64
  %27 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %28 = bitcast %struct.encoding* %27 to %struct.normal_encoding*
  %type19 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %28, i32 0, i32 1
  %arrayidx20 = getelementptr [256 x i8], [256 x i8]* %type19, i32 0, i64 %idxprom18
  %29 = load i8, i8* %arrayidx20, align 1
  %conv21 = zext i8 %29 to i32
  switch i32 %conv21, label %sw.epilog.23 [
    i32 21, label %sw.bb.22
    i32 9, label %sw.bb.22
    i32 10, label %sw.bb.22
    i32 30, label %sw.bb.22
  ]

sw.bb.22:                                         ; preds = %if.end.16, %if.end.16, %if.end.16, %if.end.16
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.23:                                     ; preds = %if.end.16
  br label %sw.bb.24

sw.bb.24:                                         ; preds = %while.body, %while.body, %while.body, %sw.epilog.23
  %32 = load i8*, i8** %ptr.addr, align 8
  %33 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %32, i8** %33, align 8
  store i32 16, i32* %retval
  br label %return

sw.bb.25:                                         ; preds = %while.body, %while.body
  %34 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %34, i64 1
  store i8* %add.ptr26, i8** %ptr.addr, align 8
  br label %sw.epilog.28

sw.default.27:                                    ; preds = %while.body
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %35, i8** %36, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.28:                                     ; preds = %sw.bb.25
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.27, %sw.bb.24, %sw.bb.22, %if.then.15, %sw.default, %sw.bb.1, %sw.bb, %if.then
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanPi(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %tok = alloca i32, align 4
  %target = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  store i8* %0, i8** %target, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8, i8* %3, align 1
  %idxprom = zext i8 %4 to i64
  %5 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %6 = bitcast %struct.encoding* %5 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %6, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  switch i32 %conv, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.10
    i32 7, label %sw.bb.23
  ]

sw.bb:                                            ; preds = %if.end
  %8 = load i8*, i8** %ptr.addr, align 8
  %9 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %8, i8** %9, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end
  %10 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.end
  %11 = load i8*, i8** %end.addr, align 8
  %12 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %12 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.2
  store i32 -2, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.2
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = bitcast %struct.encoding* %13 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %14, i32 0, i32 5
  %15 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %16 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %17 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %15(%struct.encoding* %16, i8* %17)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.6
  %18 = load i8*, i8** %ptr.addr, align 8
  %19 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %18, i8** %19, align 8
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.6
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %20, i64 2
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end
  %21 = load i8*, i8** %end.addr, align 8
  %22 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %21 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %22 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %cmp14 = icmp slt i64 %sub.ptr.sub13, 3
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb.10
  store i32 -2, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb.10
  %23 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %24 = bitcast %struct.encoding* %23 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %24, i32 0, i32 6
  %25 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %26 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %27 = load i8*, i8** %ptr.addr, align 8
  %call18 = call i32 %25(%struct.encoding* %26, i8* %27)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %28, i8** %29, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %30 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %30, i64 3
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end
  %31 = load i8*, i8** %end.addr, align 8
  %32 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast24 = ptrtoint i8* %31 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %32 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp slt i64 %sub.ptr.sub26, 4
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %33 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %34 = bitcast %struct.encoding* %33 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %34, i32 0, i32 7
  %35 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %36 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %37 = load i8*, i8** %ptr.addr, align 8
  %call31 = call i32 %35(%struct.encoding* %36, i8* %37)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %38, i8** %39, align 8
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  %40 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %40, i64 4
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %41 = load i8*, i8** %ptr.addr, align 8
  %42 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %41, i8** %42, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.34, %if.end.21, %if.end.8, %sw.bb.1
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.170, %sw.epilog
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %end.addr, align 8
  %cmp36 = icmp ne i8* %43, %44
  br i1 %cmp36, label %while.body, label %while.end.171

while.body:                                       ; preds = %while.cond
  %45 = load i8*, i8** %ptr.addr, align 8
  %46 = load i8, i8* %45, align 1
  %idxprom38 = zext i8 %46 to i64
  %47 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %48 = bitcast %struct.encoding* %47 to %struct.normal_encoding*
  %type39 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %48, i32 0, i32 1
  %arrayidx40 = getelementptr [256 x i8], [256 x i8]* %type39, i32 0, i64 %idxprom38
  %49 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %49 to i32
  switch i32 %conv41, label %sw.default.169 [
    i32 29, label %sw.bb.42
    i32 22, label %sw.bb.43
    i32 24, label %sw.bb.43
    i32 25, label %sw.bb.43
    i32 26, label %sw.bb.43
    i32 27, label %sw.bb.43
    i32 5, label %sw.bb.45
    i32 6, label %sw.bb.58
    i32 7, label %sw.bb.71
    i32 21, label %sw.bb.84
    i32 9, label %sw.bb.84
    i32 10, label %sw.bb.84
    i32 15, label %sw.bb.153
  ]

sw.bb.42:                                         ; preds = %while.body
  %50 = load i8*, i8** %ptr.addr, align 8
  %51 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %50, i8** %51, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %52 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %52, i64 1
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  br label %sw.epilog.170

sw.bb.45:                                         ; preds = %while.body
  %53 = load i8*, i8** %end.addr, align 8
  %54 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast46 = ptrtoint i8* %53 to i64
  %sub.ptr.rhs.cast47 = ptrtoint i8* %54 to i64
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast46, %sub.ptr.rhs.cast47
  %cmp49 = icmp slt i64 %sub.ptr.sub48, 2
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %sw.bb.45
  store i32 -2, i32* %retval
  br label %return

if.end.52:                                        ; preds = %sw.bb.45
  %55 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %56 = bitcast %struct.encoding* %55 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %56, i32 0, i32 2
  %57 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %58 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %59 = load i8*, i8** %ptr.addr, align 8
  %call53 = call i32 %57(%struct.encoding* %58, i8* %59)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %if.end.52
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 0, i32* %retval
  br label %return

if.end.56:                                        ; preds = %if.end.52
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr57 = getelementptr i8, i8* %62, i64 2
  store i8* %add.ptr57, i8** %ptr.addr, align 8
  br label %sw.epilog.170

sw.bb.58:                                         ; preds = %while.body
  %63 = load i8*, i8** %end.addr, align 8
  %64 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast59 = ptrtoint i8* %63 to i64
  %sub.ptr.rhs.cast60 = ptrtoint i8* %64 to i64
  %sub.ptr.sub61 = sub i64 %sub.ptr.lhs.cast59, %sub.ptr.rhs.cast60
  %cmp62 = icmp slt i64 %sub.ptr.sub61, 3
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %sw.bb.58
  store i32 -2, i32* %retval
  br label %return

if.end.65:                                        ; preds = %sw.bb.58
  %65 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %66 = bitcast %struct.encoding* %65 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %66, i32 0, i32 3
  %67 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %68 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %69 = load i8*, i8** %ptr.addr, align 8
  %call66 = call i32 %67(%struct.encoding* %68, i8* %69)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.end.69, label %if.then.68

if.then.68:                                       ; preds = %if.end.65
  %70 = load i8*, i8** %ptr.addr, align 8
  %71 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %70, i8** %71, align 8
  store i32 0, i32* %retval
  br label %return

if.end.69:                                        ; preds = %if.end.65
  %72 = load i8*, i8** %ptr.addr, align 8
  %add.ptr70 = getelementptr i8, i8* %72, i64 3
  store i8* %add.ptr70, i8** %ptr.addr, align 8
  br label %sw.epilog.170

sw.bb.71:                                         ; preds = %while.body
  %73 = load i8*, i8** %end.addr, align 8
  %74 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast72 = ptrtoint i8* %73 to i64
  %sub.ptr.rhs.cast73 = ptrtoint i8* %74 to i64
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73
  %cmp75 = icmp slt i64 %sub.ptr.sub74, 4
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %sw.bb.71
  store i32 -2, i32* %retval
  br label %return

if.end.78:                                        ; preds = %sw.bb.71
  %75 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %76 = bitcast %struct.encoding* %75 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %76, i32 0, i32 4
  %77 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %78 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %79 = load i8*, i8** %ptr.addr, align 8
  %call79 = call i32 %77(%struct.encoding* %78, i8* %79)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end.82, label %if.then.81

if.then.81:                                       ; preds = %if.end.78
  %80 = load i8*, i8** %ptr.addr, align 8
  %81 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %80, i8** %81, align 8
  store i32 0, i32* %retval
  br label %return

if.end.82:                                        ; preds = %if.end.78
  %82 = load i8*, i8** %ptr.addr, align 8
  %add.ptr83 = getelementptr i8, i8* %82, i64 4
  store i8* %add.ptr83, i8** %ptr.addr, align 8
  br label %sw.epilog.170

sw.bb.84:                                         ; preds = %while.body, %while.body, %while.body
  %83 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %84 = load i8*, i8** %target, align 8
  %85 = load i8*, i8** %ptr.addr, align 8
  %call85 = call i32 @normal_checkPiTarget(%struct.encoding* %83, i8* %84, i8* %85, i32* %tok)
  %tobool86 = icmp ne i32 %call85, 0
  br i1 %tobool86, label %if.end.88, label %if.then.87

if.then.87:                                       ; preds = %sw.bb.84
  %86 = load i8*, i8** %ptr.addr, align 8
  %87 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %86, i8** %87, align 8
  store i32 0, i32* %retval
  br label %return

if.end.88:                                        ; preds = %sw.bb.84
  %88 = load i8*, i8** %ptr.addr, align 8
  %add.ptr89 = getelementptr i8, i8* %88, i64 1
  store i8* %add.ptr89, i8** %ptr.addr, align 8
  br label %while.cond.90

while.cond.90:                                    ; preds = %sw.epilog.152, %if.end.88
  %89 = load i8*, i8** %ptr.addr, align 8
  %90 = load i8*, i8** %end.addr, align 8
  %cmp91 = icmp ne i8* %89, %90
  br i1 %cmp91, label %while.body.93, label %while.end

while.body.93:                                    ; preds = %while.cond.90
  %91 = load i8*, i8** %ptr.addr, align 8
  %92 = load i8, i8* %91, align 1
  %idxprom94 = zext i8 %92 to i64
  %93 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %94 = bitcast %struct.encoding* %93 to %struct.normal_encoding*
  %type95 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %94, i32 0, i32 1
  %arrayidx96 = getelementptr [256 x i8], [256 x i8]* %type95, i32 0, i64 %idxprom94
  %95 = load i8, i8* %arrayidx96, align 1
  %conv97 = zext i8 %95 to i32
  switch i32 %conv97, label %sw.default.150 [
    i32 5, label %sw.bb.98
    i32 6, label %sw.bb.111
    i32 7, label %sw.bb.124
    i32 0, label %sw.bb.137
    i32 1, label %sw.bb.137
    i32 8, label %sw.bb.137
    i32 15, label %sw.bb.138
  ]

sw.bb.98:                                         ; preds = %while.body.93
  %96 = load i8*, i8** %end.addr, align 8
  %97 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast99 = ptrtoint i8* %96 to i64
  %sub.ptr.rhs.cast100 = ptrtoint i8* %97 to i64
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100
  %cmp102 = icmp slt i64 %sub.ptr.sub101, 2
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %sw.bb.98
  store i32 -2, i32* %retval
  br label %return

if.end.105:                                       ; preds = %sw.bb.98
  %98 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %99 = bitcast %struct.encoding* %98 to %struct.normal_encoding*
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %99, i32 0, i32 8
  %100 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %101 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %102 = load i8*, i8** %ptr.addr, align 8
  %call106 = call i32 %100(%struct.encoding* %101, i8* %102)
  %tobool107 = icmp ne i32 %call106, 0
  br i1 %tobool107, label %if.then.108, label %if.end.109

if.then.108:                                      ; preds = %if.end.105
  %103 = load i8*, i8** %ptr.addr, align 8
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %103, i8** %104, align 8
  store i32 0, i32* %retval
  br label %return

if.end.109:                                       ; preds = %if.end.105
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr110 = getelementptr i8, i8* %105, i64 2
  store i8* %add.ptr110, i8** %ptr.addr, align 8
  br label %sw.epilog.152

sw.bb.111:                                        ; preds = %while.body.93
  %106 = load i8*, i8** %end.addr, align 8
  %107 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast112 = ptrtoint i8* %106 to i64
  %sub.ptr.rhs.cast113 = ptrtoint i8* %107 to i64
  %sub.ptr.sub114 = sub i64 %sub.ptr.lhs.cast112, %sub.ptr.rhs.cast113
  %cmp115 = icmp slt i64 %sub.ptr.sub114, 3
  br i1 %cmp115, label %if.then.117, label %if.end.118

if.then.117:                                      ; preds = %sw.bb.111
  store i32 -2, i32* %retval
  br label %return

if.end.118:                                       ; preds = %sw.bb.111
  %108 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %109 = bitcast %struct.encoding* %108 to %struct.normal_encoding*
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %109, i32 0, i32 9
  %110 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %111 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %112 = load i8*, i8** %ptr.addr, align 8
  %call119 = call i32 %110(%struct.encoding* %111, i8* %112)
  %tobool120 = icmp ne i32 %call119, 0
  br i1 %tobool120, label %if.then.121, label %if.end.122

if.then.121:                                      ; preds = %if.end.118
  %113 = load i8*, i8** %ptr.addr, align 8
  %114 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %113, i8** %114, align 8
  store i32 0, i32* %retval
  br label %return

if.end.122:                                       ; preds = %if.end.118
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr123 = getelementptr i8, i8* %115, i64 3
  store i8* %add.ptr123, i8** %ptr.addr, align 8
  br label %sw.epilog.152

sw.bb.124:                                        ; preds = %while.body.93
  %116 = load i8*, i8** %end.addr, align 8
  %117 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast125 = ptrtoint i8* %116 to i64
  %sub.ptr.rhs.cast126 = ptrtoint i8* %117 to i64
  %sub.ptr.sub127 = sub i64 %sub.ptr.lhs.cast125, %sub.ptr.rhs.cast126
  %cmp128 = icmp slt i64 %sub.ptr.sub127, 4
  br i1 %cmp128, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %sw.bb.124
  store i32 -2, i32* %retval
  br label %return

if.end.131:                                       ; preds = %sw.bb.124
  %118 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %119 = bitcast %struct.encoding* %118 to %struct.normal_encoding*
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %119, i32 0, i32 10
  %120 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  %121 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %122 = load i8*, i8** %ptr.addr, align 8
  %call132 = call i32 %120(%struct.encoding* %121, i8* %122)
  %tobool133 = icmp ne i32 %call132, 0
  br i1 %tobool133, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %if.end.131
  %123 = load i8*, i8** %ptr.addr, align 8
  %124 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %123, i8** %124, align 8
  store i32 0, i32* %retval
  br label %return

if.end.135:                                       ; preds = %if.end.131
  %125 = load i8*, i8** %ptr.addr, align 8
  %add.ptr136 = getelementptr i8, i8* %125, i64 4
  store i8* %add.ptr136, i8** %ptr.addr, align 8
  br label %sw.epilog.152

sw.bb.137:                                        ; preds = %while.body.93, %while.body.93, %while.body.93
  %126 = load i8*, i8** %ptr.addr, align 8
  %127 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %126, i8** %127, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.138:                                        ; preds = %while.body.93
  %128 = load i8*, i8** %ptr.addr, align 8
  %add.ptr139 = getelementptr i8, i8* %128, i64 1
  store i8* %add.ptr139, i8** %ptr.addr, align 8
  %129 = load i8*, i8** %ptr.addr, align 8
  %130 = load i8*, i8** %end.addr, align 8
  %cmp140 = icmp eq i8* %129, %130
  br i1 %cmp140, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %sw.bb.138
  store i32 -1, i32* %retval
  br label %return

if.end.143:                                       ; preds = %sw.bb.138
  %131 = load i8*, i8** %ptr.addr, align 8
  %132 = load i8, i8* %131, align 1
  %conv144 = sext i8 %132 to i32
  %cmp145 = icmp eq i32 %conv144, 62
  br i1 %cmp145, label %if.then.147, label %if.end.149

if.then.147:                                      ; preds = %if.end.143
  %133 = load i8*, i8** %ptr.addr, align 8
  %add.ptr148 = getelementptr i8, i8* %133, i64 1
  %134 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr148, i8** %134, align 8
  %135 = load i32, i32* %tok, align 4
  store i32 %135, i32* %retval
  br label %return

if.end.149:                                       ; preds = %if.end.143
  br label %sw.epilog.152

sw.default.150:                                   ; preds = %while.body.93
  %136 = load i8*, i8** %ptr.addr, align 8
  %add.ptr151 = getelementptr i8, i8* %136, i64 1
  store i8* %add.ptr151, i8** %ptr.addr, align 8
  br label %sw.epilog.152

sw.epilog.152:                                    ; preds = %sw.default.150, %if.end.149, %if.end.135, %if.end.122, %if.end.109
  br label %while.cond.90

while.end:                                        ; preds = %while.cond.90
  store i32 -1, i32* %retval
  br label %return

sw.bb.153:                                        ; preds = %while.body
  %137 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %138 = load i8*, i8** %target, align 8
  %139 = load i8*, i8** %ptr.addr, align 8
  %call154 = call i32 @normal_checkPiTarget(%struct.encoding* %137, i8* %138, i8* %139, i32* %tok)
  %tobool155 = icmp ne i32 %call154, 0
  br i1 %tobool155, label %if.end.157, label %if.then.156

if.then.156:                                      ; preds = %sw.bb.153
  %140 = load i8*, i8** %ptr.addr, align 8
  %141 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %140, i8** %141, align 8
  store i32 0, i32* %retval
  br label %return

if.end.157:                                       ; preds = %sw.bb.153
  %142 = load i8*, i8** %ptr.addr, align 8
  %add.ptr158 = getelementptr i8, i8* %142, i64 1
  store i8* %add.ptr158, i8** %ptr.addr, align 8
  %143 = load i8*, i8** %ptr.addr, align 8
  %144 = load i8*, i8** %end.addr, align 8
  %cmp159 = icmp eq i8* %143, %144
  br i1 %cmp159, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %if.end.157
  store i32 -1, i32* %retval
  br label %return

if.end.162:                                       ; preds = %if.end.157
  %145 = load i8*, i8** %ptr.addr, align 8
  %146 = load i8, i8* %145, align 1
  %conv163 = sext i8 %146 to i32
  %cmp164 = icmp eq i32 %conv163, 62
  br i1 %cmp164, label %if.then.166, label %if.end.168

if.then.166:                                      ; preds = %if.end.162
  %147 = load i8*, i8** %ptr.addr, align 8
  %add.ptr167 = getelementptr i8, i8* %147, i64 1
  %148 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr167, i8** %148, align 8
  %149 = load i32, i32* %tok, align 4
  store i32 %149, i32* %retval
  br label %return

if.end.168:                                       ; preds = %if.end.162
  br label %sw.default.169

sw.default.169:                                   ; preds = %while.body, %if.end.168
  %150 = load i8*, i8** %ptr.addr, align 8
  %151 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %150, i8** %151, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.170:                                    ; preds = %if.end.82, %if.end.69, %if.end.56, %sw.bb.43
  br label %while.cond

while.end.171:                                    ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end.171, %sw.default.169, %if.then.166, %if.then.161, %if.then.156, %while.end, %if.then.147, %if.then.142, %sw.bb.137, %if.then.134, %if.then.130, %if.then.121, %if.then.117, %if.then.108, %if.then.104, %if.then.87, %if.then.81, %if.then.77, %if.then.68, %if.then.64, %if.then.55, %if.then.51, %sw.bb.42, %sw.default, %if.then.33, %if.then.29, %if.then.20, %if.then.16, %if.then.7, %if.then.5, %sw.bb, %if.then
  %152 = load i32, i32* %retval
  ret i32 %152
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanPercent(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.10
    i32 7, label %sw.bb.23
    i32 21, label %sw.bb.36
    i32 10, label %sw.bb.36
    i32 9, label %sw.bb.36
    i32 30, label %sw.bb.36
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.end
  %10 = load i8*, i8** %end.addr, align 8
  %11 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.2
  store i32 -2, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.2
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 5
  %14 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %14(%struct.encoding* %15, i8* %16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.6
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %17, i8** %18, align 8
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.6
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %21 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %cmp14 = icmp slt i64 %sub.ptr.sub13, 3
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb.10
  store i32 -2, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb.10
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 6
  %24 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %25 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %call18 = call i32 %24(%struct.encoding* %25, i8* %26)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %29, i64 3
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end
  %30 = load i8*, i8** %end.addr, align 8
  %31 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast24 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %31 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp slt i64 %sub.ptr.sub26, 4
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %32 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %33 = bitcast %struct.encoding* %32 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %33, i32 0, i32 7
  %34 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = load i8*, i8** %ptr.addr, align 8
  %call31 = call i32 %34(%struct.encoding* %35, i8* %36)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %39, i64 4
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.36:                                         ; preds = %if.end, %if.end, %if.end, %if.end
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %40, i8** %41, align 8
  store i32 22, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %42, i8** %43, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.34, %if.end.21, %if.end.8, %sw.bb.1
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.88, %sw.epilog
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8*, i8** %end.addr, align 8
  %cmp37 = icmp ne i8* %44, %45
  br i1 %cmp37, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %46 = load i8*, i8** %ptr.addr, align 8
  %47 = load i8, i8* %46, align 1
  %idxprom39 = zext i8 %47 to i64
  %48 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %49 = bitcast %struct.encoding* %48 to %struct.normal_encoding*
  %type40 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %49, i32 0, i32 1
  %arrayidx41 = getelementptr [256 x i8], [256 x i8]* %type40, i32 0, i64 %idxprom39
  %50 = load i8, i8* %arrayidx41, align 1
  %conv42 = zext i8 %50 to i32
  switch i32 %conv42, label %sw.default.87 [
    i32 29, label %sw.bb.43
    i32 22, label %sw.bb.44
    i32 24, label %sw.bb.44
    i32 25, label %sw.bb.44
    i32 26, label %sw.bb.44
    i32 27, label %sw.bb.44
    i32 5, label %sw.bb.46
    i32 6, label %sw.bb.59
    i32 7, label %sw.bb.72
    i32 18, label %sw.bb.85
  ]

sw.bb.43:                                         ; preds = %while.body
  %51 = load i8*, i8** %ptr.addr, align 8
  %52 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %51, i8** %52, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %53 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %53, i64 1
  store i8* %add.ptr45, i8** %ptr.addr, align 8
  br label %sw.epilog.88

sw.bb.46:                                         ; preds = %while.body
  %54 = load i8*, i8** %end.addr, align 8
  %55 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast47 = ptrtoint i8* %54 to i64
  %sub.ptr.rhs.cast48 = ptrtoint i8* %55 to i64
  %sub.ptr.sub49 = sub i64 %sub.ptr.lhs.cast47, %sub.ptr.rhs.cast48
  %cmp50 = icmp slt i64 %sub.ptr.sub49, 2
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %sw.bb.46
  store i32 -2, i32* %retval
  br label %return

if.end.53:                                        ; preds = %sw.bb.46
  %56 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %57 = bitcast %struct.encoding* %56 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %57, i32 0, i32 2
  %58 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %59 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %60 = load i8*, i8** %ptr.addr, align 8
  %call54 = call i32 %58(%struct.encoding* %59, i8* %60)
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.end.57, label %if.then.56

if.then.56:                                       ; preds = %if.end.53
  %61 = load i8*, i8** %ptr.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %61, i8** %62, align 8
  store i32 0, i32* %retval
  br label %return

if.end.57:                                        ; preds = %if.end.53
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr58 = getelementptr i8, i8* %63, i64 2
  store i8* %add.ptr58, i8** %ptr.addr, align 8
  br label %sw.epilog.88

sw.bb.59:                                         ; preds = %while.body
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast60 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast61 = ptrtoint i8* %65 to i64
  %sub.ptr.sub62 = sub i64 %sub.ptr.lhs.cast60, %sub.ptr.rhs.cast61
  %cmp63 = icmp slt i64 %sub.ptr.sub62, 3
  br i1 %cmp63, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %sw.bb.59
  store i32 -2, i32* %retval
  br label %return

if.end.66:                                        ; preds = %sw.bb.59
  %66 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %67 = bitcast %struct.encoding* %66 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %67, i32 0, i32 3
  %68 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %69 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %70 = load i8*, i8** %ptr.addr, align 8
  %call67 = call i32 %68(%struct.encoding* %69, i8* %70)
  %tobool68 = icmp ne i32 %call67, 0
  br i1 %tobool68, label %if.end.70, label %if.then.69

if.then.69:                                       ; preds = %if.end.66
  %71 = load i8*, i8** %ptr.addr, align 8
  %72 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %71, i8** %72, align 8
  store i32 0, i32* %retval
  br label %return

if.end.70:                                        ; preds = %if.end.66
  %73 = load i8*, i8** %ptr.addr, align 8
  %add.ptr71 = getelementptr i8, i8* %73, i64 3
  store i8* %add.ptr71, i8** %ptr.addr, align 8
  br label %sw.epilog.88

sw.bb.72:                                         ; preds = %while.body
  %74 = load i8*, i8** %end.addr, align 8
  %75 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast73 = ptrtoint i8* %74 to i64
  %sub.ptr.rhs.cast74 = ptrtoint i8* %75 to i64
  %sub.ptr.sub75 = sub i64 %sub.ptr.lhs.cast73, %sub.ptr.rhs.cast74
  %cmp76 = icmp slt i64 %sub.ptr.sub75, 4
  br i1 %cmp76, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %sw.bb.72
  store i32 -2, i32* %retval
  br label %return

if.end.79:                                        ; preds = %sw.bb.72
  %76 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %77 = bitcast %struct.encoding* %76 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %77, i32 0, i32 4
  %78 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %79 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %80 = load i8*, i8** %ptr.addr, align 8
  %call80 = call i32 %78(%struct.encoding* %79, i8* %80)
  %tobool81 = icmp ne i32 %call80, 0
  br i1 %tobool81, label %if.end.83, label %if.then.82

if.then.82:                                       ; preds = %if.end.79
  %81 = load i8*, i8** %ptr.addr, align 8
  %82 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %81, i8** %82, align 8
  store i32 0, i32* %retval
  br label %return

if.end.83:                                        ; preds = %if.end.79
  %83 = load i8*, i8** %ptr.addr, align 8
  %add.ptr84 = getelementptr i8, i8* %83, i64 4
  store i8* %add.ptr84, i8** %ptr.addr, align 8
  br label %sw.epilog.88

sw.bb.85:                                         ; preds = %while.body
  %84 = load i8*, i8** %ptr.addr, align 8
  %add.ptr86 = getelementptr i8, i8* %84, i64 1
  %85 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr86, i8** %85, align 8
  store i32 28, i32* %retval
  br label %return

sw.default.87:                                    ; preds = %while.body
  %86 = load i8*, i8** %ptr.addr, align 8
  %87 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %86, i8** %87, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.88:                                     ; preds = %if.end.83, %if.end.70, %if.end.57, %sw.bb.44
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.87, %sw.bb.85, %if.then.82, %if.then.78, %if.then.69, %if.then.65, %if.then.56, %if.then.52, %sw.bb.43, %sw.default, %sw.bb.36, %if.then.33, %if.then.29, %if.then.20, %if.then.16, %if.then.7, %if.then.5, %sw.bb, %if.then
  %88 = load i32, i32* %retval
  ret i32 %88
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanPoundName(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.10
    i32 7, label %sw.bb.23
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.end
  %10 = load i8*, i8** %end.addr, align 8
  %11 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.2
  store i32 -2, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.2
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 5
  %14 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %14(%struct.encoding* %15, i8* %16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.6
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %17, i8** %18, align 8
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.6
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %21 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %cmp14 = icmp slt i64 %sub.ptr.sub13, 3
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb.10
  store i32 -2, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb.10
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 6
  %24 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %25 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %call18 = call i32 %24(%struct.encoding* %25, i8* %26)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %29, i64 3
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end
  %30 = load i8*, i8** %end.addr, align 8
  %31 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast24 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %31 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp slt i64 %sub.ptr.sub26, 4
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %32 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %33 = bitcast %struct.encoding* %32 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %33, i32 0, i32 7
  %34 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = load i8*, i8** %ptr.addr, align 8
  %call31 = call i32 %34(%struct.encoding* %35, i8* %36)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %39, i64 4
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %40, i8** %41, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.34, %if.end.21, %if.end.8, %sw.bb.1
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.86, %sw.epilog
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8*, i8** %end.addr, align 8
  %cmp36 = icmp ne i8* %42, %43
  br i1 %cmp36, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8, i8* %44, align 1
  %idxprom38 = zext i8 %45 to i64
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = bitcast %struct.encoding* %46 to %struct.normal_encoding*
  %type39 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %47, i32 0, i32 1
  %arrayidx40 = getelementptr [256 x i8], [256 x i8]* %type39, i32 0, i64 %idxprom38
  %48 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %48 to i32
  switch i32 %conv41, label %sw.default.85 [
    i32 29, label %sw.bb.42
    i32 22, label %sw.bb.43
    i32 24, label %sw.bb.43
    i32 25, label %sw.bb.43
    i32 26, label %sw.bb.43
    i32 27, label %sw.bb.43
    i32 5, label %sw.bb.45
    i32 6, label %sw.bb.58
    i32 7, label %sw.bb.71
    i32 9, label %sw.bb.84
    i32 10, label %sw.bb.84
    i32 21, label %sw.bb.84
    i32 32, label %sw.bb.84
    i32 11, label %sw.bb.84
    i32 30, label %sw.bb.84
    i32 36, label %sw.bb.84
  ]

sw.bb.42:                                         ; preds = %while.body
  %49 = load i8*, i8** %ptr.addr, align 8
  %50 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %49, i8** %50, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %51 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %51, i64 1
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  br label %sw.epilog.86

sw.bb.45:                                         ; preds = %while.body
  %52 = load i8*, i8** %end.addr, align 8
  %53 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast46 = ptrtoint i8* %52 to i64
  %sub.ptr.rhs.cast47 = ptrtoint i8* %53 to i64
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast46, %sub.ptr.rhs.cast47
  %cmp49 = icmp slt i64 %sub.ptr.sub48, 2
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %sw.bb.45
  store i32 -2, i32* %retval
  br label %return

if.end.52:                                        ; preds = %sw.bb.45
  %54 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %55 = bitcast %struct.encoding* %54 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %55, i32 0, i32 2
  %56 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %57 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %58 = load i8*, i8** %ptr.addr, align 8
  %call53 = call i32 %56(%struct.encoding* %57, i8* %58)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %if.end.52
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %59, i8** %60, align 8
  store i32 0, i32* %retval
  br label %return

if.end.56:                                        ; preds = %if.end.52
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr57 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr57, i8** %ptr.addr, align 8
  br label %sw.epilog.86

sw.bb.58:                                         ; preds = %while.body
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast59 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast60 = ptrtoint i8* %63 to i64
  %sub.ptr.sub61 = sub i64 %sub.ptr.lhs.cast59, %sub.ptr.rhs.cast60
  %cmp62 = icmp slt i64 %sub.ptr.sub61, 3
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %sw.bb.58
  store i32 -2, i32* %retval
  br label %return

if.end.65:                                        ; preds = %sw.bb.58
  %64 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %65 = bitcast %struct.encoding* %64 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %65, i32 0, i32 3
  %66 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %67 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %68 = load i8*, i8** %ptr.addr, align 8
  %call66 = call i32 %66(%struct.encoding* %67, i8* %68)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.end.69, label %if.then.68

if.then.68:                                       ; preds = %if.end.65
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %69, i8** %70, align 8
  store i32 0, i32* %retval
  br label %return

if.end.69:                                        ; preds = %if.end.65
  %71 = load i8*, i8** %ptr.addr, align 8
  %add.ptr70 = getelementptr i8, i8* %71, i64 3
  store i8* %add.ptr70, i8** %ptr.addr, align 8
  br label %sw.epilog.86

sw.bb.71:                                         ; preds = %while.body
  %72 = load i8*, i8** %end.addr, align 8
  %73 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast72 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast73 = ptrtoint i8* %73 to i64
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73
  %cmp75 = icmp slt i64 %sub.ptr.sub74, 4
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %sw.bb.71
  store i32 -2, i32* %retval
  br label %return

if.end.78:                                        ; preds = %sw.bb.71
  %74 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %75 = bitcast %struct.encoding* %74 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %75, i32 0, i32 4
  %76 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %77 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %78 = load i8*, i8** %ptr.addr, align 8
  %call79 = call i32 %76(%struct.encoding* %77, i8* %78)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end.82, label %if.then.81

if.then.81:                                       ; preds = %if.end.78
  %79 = load i8*, i8** %ptr.addr, align 8
  %80 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %79, i8** %80, align 8
  store i32 0, i32* %retval
  br label %return

if.end.82:                                        ; preds = %if.end.78
  %81 = load i8*, i8** %ptr.addr, align 8
  %add.ptr83 = getelementptr i8, i8* %81, i64 4
  store i8* %add.ptr83, i8** %ptr.addr, align 8
  br label %sw.epilog.86

sw.bb.84:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %82 = load i8*, i8** %ptr.addr, align 8
  %83 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %82, i8** %83, align 8
  store i32 20, i32* %retval
  br label %return

sw.default.85:                                    ; preds = %while.body
  %84 = load i8*, i8** %ptr.addr, align 8
  %85 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %84, i8** %85, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.86:                                     ; preds = %if.end.82, %if.end.69, %if.end.56, %sw.bb.43
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -20, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.85, %sw.bb.84, %if.then.81, %if.then.77, %if.then.68, %if.then.64, %if.then.55, %if.then.51, %sw.bb.42, %sw.default, %if.then.33, %if.then.29, %if.then.20, %if.then.16, %if.then.7, %if.then.5, %sw.bb, %if.then
  %86 = load i32, i32* %retval
  ret i32 %86
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanComment(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end.64

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 45
  br i1 %cmp1, label %if.end, label %if.then.3

if.then.3:                                        ; preds = %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %4, i8** %5, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %6, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8*, i8** %end.addr, align 8
  %cmp4 = icmp ne i8* %7, %8
  br i1 %cmp4, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8, i8* %9, align 1
  %idxprom = zext i8 %10 to i64
  %11 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %12 = bitcast %struct.encoding* %11 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %12, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv6 = zext i8 %13 to i32
  switch i32 %conv6, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.14
    i32 7, label %sw.bb.27
    i32 0, label %sw.bb.40
    i32 1, label %sw.bb.40
    i32 8, label %sw.bb.40
    i32 27, label %sw.bb.41
  ]

sw.bb:                                            ; preds = %while.body
  %14 = load i8*, i8** %end.addr, align 8
  %15 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp7 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp7, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end.10:                                        ; preds = %sw.bb
  %16 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %17 = bitcast %struct.encoding* %16 to %struct.normal_encoding*
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %17, i32 0, i32 8
  %18 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %19 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %20 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %18(%struct.encoding* %19, i8* %20)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.10
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.12:                                        ; preds = %if.end.10
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr13 = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr13, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.14:                                         ; preds = %while.body
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast15 = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast16 = ptrtoint i8* %25 to i64
  %sub.ptr.sub17 = sub i64 %sub.ptr.lhs.cast15, %sub.ptr.rhs.cast16
  %cmp18 = icmp slt i64 %sub.ptr.sub17, 3
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %sw.bb.14
  store i32 -2, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb.14
  %26 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %27 = bitcast %struct.encoding* %26 to %struct.normal_encoding*
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %27, i32 0, i32 9
  %28 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %29 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %30 = load i8*, i8** %ptr.addr, align 8
  %call22 = call i32 %28(%struct.encoding* %29, i8* %30)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.21
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %31, i8** %32, align 8
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %33, i64 3
  store i8* %add.ptr26, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.27:                                         ; preds = %while.body
  %34 = load i8*, i8** %end.addr, align 8
  %35 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %34 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %35 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %cmp31 = icmp slt i64 %sub.ptr.sub30, 4
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.27
  store i32 -2, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.27
  %36 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %37 = bitcast %struct.encoding* %36 to %struct.normal_encoding*
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %37, i32 0, i32 10
  %38 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  %39 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %40 = load i8*, i8** %ptr.addr, align 8
  %call35 = call i32 %38(%struct.encoding* %39, i8* %40)
  %tobool36 = icmp ne i32 %call35, 0
  br i1 %tobool36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.34
  %41 = load i8*, i8** %ptr.addr, align 8
  %42 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %41, i8** %42, align 8
  store i32 0, i32* %retval
  br label %return

if.end.38:                                        ; preds = %if.end.34
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr39 = getelementptr i8, i8* %43, i64 4
  store i8* %add.ptr39, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.40:                                         ; preds = %while.body, %while.body, %while.body
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %44, i8** %45, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.41:                                         ; preds = %while.body
  %46 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %46, i64 1
  store i8* %add.ptr42, i8** %ptr.addr, align 8
  %47 = load i8*, i8** %end.addr, align 8
  %cmp43 = icmp eq i8* %add.ptr42, %47
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %sw.bb.41
  store i32 -1, i32* %retval
  br label %return

if.end.46:                                        ; preds = %sw.bb.41
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8, i8* %48, align 1
  %conv47 = sext i8 %49 to i32
  %cmp48 = icmp eq i32 %conv47, 45
  br i1 %cmp48, label %if.then.50, label %if.end.62

if.then.50:                                       ; preds = %if.end.46
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr51 = getelementptr i8, i8* %50, i64 1
  store i8* %add.ptr51, i8** %ptr.addr, align 8
  %51 = load i8*, i8** %end.addr, align 8
  %cmp52 = icmp eq i8* %add.ptr51, %51
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %if.then.50
  store i32 -1, i32* %retval
  br label %return

if.end.55:                                        ; preds = %if.then.50
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8, i8* %52, align 1
  %conv56 = sext i8 %53 to i32
  %cmp57 = icmp eq i32 %conv56, 62
  br i1 %cmp57, label %if.end.60, label %if.then.59

if.then.59:                                       ; preds = %if.end.55
  %54 = load i8*, i8** %ptr.addr, align 8
  %55 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %54, i8** %55, align 8
  store i32 0, i32* %retval
  br label %return

if.end.60:                                        ; preds = %if.end.55
  %56 = load i8*, i8** %ptr.addr, align 8
  %add.ptr61 = getelementptr i8, i8* %56, i64 1
  %57 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr61, i8** %57, align 8
  store i32 13, i32* %retval
  br label %return

if.end.62:                                        ; preds = %if.end.46
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr63 = getelementptr i8, i8* %58, i64 1
  store i8* %add.ptr63, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.62, %if.end.38, %if.end.25, %if.end.12
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.64

if.end.64:                                        ; preds = %while.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.64, %if.end.60, %if.then.59, %if.then.54, %if.then.45, %sw.bb.40, %if.then.37, %if.then.33, %if.then.24, %if.then.20, %if.then.11, %if.then.9, %if.then.3
  %59 = load i32, i32* %retval
  ret i32 %59
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_checkPiTarget(%struct.encoding* %enc, i8* %ptr, i8* %end, i32* %tokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %tokPtr.addr = alloca i32*, align 8
  %upper = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32* %tokPtr, i32** %tokPtr.addr, align 8
  store i32 0, i32* %upper, align 4
  %0 = load i32*, i32** %tokPtr.addr, align 8
  store i32 11, i32* %0, align 4
  %1 = load i8*, i8** %end.addr, align 8
  %2 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp ne i64 %sub.ptr.sub, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  switch i32 %conv, label %sw.default [
    i32 120, label %sw.bb
    i32 88, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.bb.1:                                          ; preds = %if.end
  store i32 1, i32* %upper, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.1, %sw.bb
  %5 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %5, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8, i8* %6, align 1
  %conv2 = sext i8 %7 to i32
  switch i32 %conv2, label %sw.default.5 [
    i32 109, label %sw.bb.3
    i32 77, label %sw.bb.4
  ]

sw.bb.3:                                          ; preds = %sw.epilog
  br label %sw.epilog.6

sw.bb.4:                                          ; preds = %sw.epilog
  store i32 1, i32* %upper, align 4
  br label %sw.epilog.6

sw.default.5:                                     ; preds = %sw.epilog
  store i32 1, i32* %retval
  br label %return

sw.epilog.6:                                      ; preds = %sw.bb.4, %sw.bb.3
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr7 = getelementptr i8, i8* %8, i64 1
  store i8* %add.ptr7, i8** %ptr.addr, align 8
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8, i8* %9, align 1
  %conv8 = sext i8 %10 to i32
  switch i32 %conv8, label %sw.default.11 [
    i32 108, label %sw.bb.9
    i32 76, label %sw.bb.10
  ]

sw.bb.9:                                          ; preds = %sw.epilog.6
  br label %sw.epilog.12

sw.bb.10:                                         ; preds = %sw.epilog.6
  store i32 1, i32* %upper, align 4
  br label %sw.epilog.12

sw.default.11:                                    ; preds = %sw.epilog.6
  store i32 1, i32* %retval
  br label %return

sw.epilog.12:                                     ; preds = %sw.bb.10, %sw.bb.9
  %11 = load i32, i32* %upper, align 4
  %tobool = icmp ne i32 %11, 0
  br i1 %tobool, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %sw.epilog.12
  store i32 0, i32* %retval
  br label %return

if.end.14:                                        ; preds = %sw.epilog.12
  %12 = load i32*, i32** %tokPtr.addr, align 8
  store i32 12, i32* %12, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then.13, %sw.default.11, %sw.default.5, %sw.default, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanLt(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %hadColon = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.10
    i32 7, label %sw.bb.23
    i32 16, label %sw.bb.36
    i32 15, label %sw.bb.52
    i32 17, label %sw.bb.55
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog.58

sw.bb.2:                                          ; preds = %if.end
  %10 = load i8*, i8** %end.addr, align 8
  %11 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.2
  store i32 -2, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.2
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 5
  %14 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %14(%struct.encoding* %15, i8* %16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.6
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %17, i8** %18, align 8
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.6
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog.58

sw.bb.10:                                         ; preds = %if.end
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %21 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %cmp14 = icmp slt i64 %sub.ptr.sub13, 3
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb.10
  store i32 -2, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb.10
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 6
  %24 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %25 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %call18 = call i32 %24(%struct.encoding* %25, i8* %26)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %29, i64 3
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  br label %sw.epilog.58

sw.bb.23:                                         ; preds = %if.end
  %30 = load i8*, i8** %end.addr, align 8
  %31 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast24 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %31 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp slt i64 %sub.ptr.sub26, 4
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %32 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %33 = bitcast %struct.encoding* %32 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %33, i32 0, i32 7
  %34 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = load i8*, i8** %ptr.addr, align 8
  %call31 = call i32 %34(%struct.encoding* %35, i8* %36)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %39, i64 4
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %sw.epilog.58

sw.bb.36:                                         ; preds = %if.end
  %40 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %40, i64 1
  store i8* %add.ptr37, i8** %ptr.addr, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp38 = icmp eq i8* %add.ptr37, %41
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %sw.bb.36
  store i32 -1, i32* %retval
  br label %return

if.end.41:                                        ; preds = %sw.bb.36
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom42 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type43 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx44 = getelementptr [256 x i8], [256 x i8]* %type43, i32 0, i64 %idxprom42
  %46 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %46 to i32
  switch i32 %conv45, label %sw.epilog [
    i32 27, label %sw.bb.46
    i32 20, label %sw.bb.49
  ]

sw.bb.46:                                         ; preds = %if.end.41
  %47 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %48 = load i8*, i8** %ptr.addr, align 8
  %add.ptr47 = getelementptr i8, i8* %48, i64 1
  %49 = load i8*, i8** %end.addr, align 8
  %50 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call48 = call i32 @normal_scanComment(%struct.encoding* %47, i8* %add.ptr47, i8* %49, i8** %50)
  store i32 %call48, i32* %retval
  br label %return

sw.bb.49:                                         ; preds = %if.end.41
  %51 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %52 = load i8*, i8** %ptr.addr, align 8
  %add.ptr50 = getelementptr i8, i8* %52, i64 1
  %53 = load i8*, i8** %end.addr, align 8
  %54 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call51 = call i32 @normal_scanCdataSection(%struct.encoding* %51, i8* %add.ptr50, i8* %53, i8** %54)
  store i32 %call51, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.41
  %55 = load i8*, i8** %ptr.addr, align 8
  %56 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %55, i8** %56, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.52:                                         ; preds = %if.end
  %57 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr53 = getelementptr i8, i8* %58, i64 1
  %59 = load i8*, i8** %end.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call54 = call i32 @normal_scanPi(%struct.encoding* %57, i8* %add.ptr53, i8* %59, i8** %60)
  store i32 %call54, i32* %retval
  br label %return

sw.bb.55:                                         ; preds = %if.end
  %61 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr56 = getelementptr i8, i8* %62, i64 1
  %63 = load i8*, i8** %end.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call57 = call i32 @normal_scanEndTag(%struct.encoding* %61, i8* %add.ptr56, i8* %63, i8** %64)
  store i32 %call57, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  %65 = load i8*, i8** %ptr.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %65, i8** %66, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.58:                                     ; preds = %if.end.34, %if.end.21, %if.end.8, %sw.bb.1
  store i32 0, i32* %hadColon, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.244, %sw.epilog.58
  %67 = load i8*, i8** %ptr.addr, align 8
  %68 = load i8*, i8** %end.addr, align 8
  %cmp59 = icmp ne i8* %67, %68
  br i1 %cmp59, label %while.body, label %while.end.245

while.body:                                       ; preds = %while.cond
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8, i8* %69, align 1
  %idxprom61 = zext i8 %70 to i64
  %71 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %72 = bitcast %struct.encoding* %71 to %struct.normal_encoding*
  %type62 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %72, i32 0, i32 1
  %arrayidx63 = getelementptr [256 x i8], [256 x i8]* %type62, i32 0, i64 %idxprom61
  %73 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %73 to i32
  switch i32 %conv64, label %sw.default.243 [
    i32 29, label %sw.bb.65
    i32 22, label %sw.bb.66
    i32 24, label %sw.bb.66
    i32 25, label %sw.bb.66
    i32 26, label %sw.bb.66
    i32 27, label %sw.bb.66
    i32 5, label %sw.bb.68
    i32 6, label %sw.bb.81
    i32 7, label %sw.bb.94
    i32 23, label %sw.bb.107
    i32 21, label %sw.bb.167
    i32 9, label %sw.bb.167
    i32 10, label %sw.bb.167
    i32 11, label %sw.bb.229
    i32 17, label %sw.bb.231
  ]

sw.bb.65:                                         ; preds = %while.body
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.66:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %76 = load i8*, i8** %ptr.addr, align 8
  %add.ptr67 = getelementptr i8, i8* %76, i64 1
  store i8* %add.ptr67, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.bb.68:                                         ; preds = %while.body
  %77 = load i8*, i8** %end.addr, align 8
  %78 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast69 = ptrtoint i8* %77 to i64
  %sub.ptr.rhs.cast70 = ptrtoint i8* %78 to i64
  %sub.ptr.sub71 = sub i64 %sub.ptr.lhs.cast69, %sub.ptr.rhs.cast70
  %cmp72 = icmp slt i64 %sub.ptr.sub71, 2
  br i1 %cmp72, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %sw.bb.68
  store i32 -2, i32* %retval
  br label %return

if.end.75:                                        ; preds = %sw.bb.68
  %79 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %80 = bitcast %struct.encoding* %79 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %80, i32 0, i32 2
  %81 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %82 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %83 = load i8*, i8** %ptr.addr, align 8
  %call76 = call i32 %81(%struct.encoding* %82, i8* %83)
  %tobool77 = icmp ne i32 %call76, 0
  br i1 %tobool77, label %if.end.79, label %if.then.78

if.then.78:                                       ; preds = %if.end.75
  %84 = load i8*, i8** %ptr.addr, align 8
  %85 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %84, i8** %85, align 8
  store i32 0, i32* %retval
  br label %return

if.end.79:                                        ; preds = %if.end.75
  %86 = load i8*, i8** %ptr.addr, align 8
  %add.ptr80 = getelementptr i8, i8* %86, i64 2
  store i8* %add.ptr80, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.bb.81:                                         ; preds = %while.body
  %87 = load i8*, i8** %end.addr, align 8
  %88 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast82 = ptrtoint i8* %87 to i64
  %sub.ptr.rhs.cast83 = ptrtoint i8* %88 to i64
  %sub.ptr.sub84 = sub i64 %sub.ptr.lhs.cast82, %sub.ptr.rhs.cast83
  %cmp85 = icmp slt i64 %sub.ptr.sub84, 3
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %sw.bb.81
  store i32 -2, i32* %retval
  br label %return

if.end.88:                                        ; preds = %sw.bb.81
  %89 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %90 = bitcast %struct.encoding* %89 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %90, i32 0, i32 3
  %91 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %92 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %93 = load i8*, i8** %ptr.addr, align 8
  %call89 = call i32 %91(%struct.encoding* %92, i8* %93)
  %tobool90 = icmp ne i32 %call89, 0
  br i1 %tobool90, label %if.end.92, label %if.then.91

if.then.91:                                       ; preds = %if.end.88
  %94 = load i8*, i8** %ptr.addr, align 8
  %95 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %94, i8** %95, align 8
  store i32 0, i32* %retval
  br label %return

if.end.92:                                        ; preds = %if.end.88
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr93 = getelementptr i8, i8* %96, i64 3
  store i8* %add.ptr93, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.bb.94:                                         ; preds = %while.body
  %97 = load i8*, i8** %end.addr, align 8
  %98 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast95 = ptrtoint i8* %97 to i64
  %sub.ptr.rhs.cast96 = ptrtoint i8* %98 to i64
  %sub.ptr.sub97 = sub i64 %sub.ptr.lhs.cast95, %sub.ptr.rhs.cast96
  %cmp98 = icmp slt i64 %sub.ptr.sub97, 4
  br i1 %cmp98, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %sw.bb.94
  store i32 -2, i32* %retval
  br label %return

if.end.101:                                       ; preds = %sw.bb.94
  %99 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %100 = bitcast %struct.encoding* %99 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %100, i32 0, i32 4
  %101 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %102 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %103 = load i8*, i8** %ptr.addr, align 8
  %call102 = call i32 %101(%struct.encoding* %102, i8* %103)
  %tobool103 = icmp ne i32 %call102, 0
  br i1 %tobool103, label %if.end.105, label %if.then.104

if.then.104:                                      ; preds = %if.end.101
  %104 = load i8*, i8** %ptr.addr, align 8
  %105 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %104, i8** %105, align 8
  store i32 0, i32* %retval
  br label %return

if.end.105:                                       ; preds = %if.end.101
  %106 = load i8*, i8** %ptr.addr, align 8
  %add.ptr106 = getelementptr i8, i8* %106, i64 4
  store i8* %add.ptr106, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.bb.107:                                        ; preds = %while.body
  %107 = load i32, i32* %hadColon, align 4
  %tobool108 = icmp ne i32 %107, 0
  br i1 %tobool108, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %sw.bb.107
  %108 = load i8*, i8** %ptr.addr, align 8
  %109 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %108, i8** %109, align 8
  store i32 0, i32* %retval
  br label %return

if.end.110:                                       ; preds = %sw.bb.107
  store i32 1, i32* %hadColon, align 4
  %110 = load i8*, i8** %ptr.addr, align 8
  %add.ptr111 = getelementptr i8, i8* %110, i64 1
  store i8* %add.ptr111, i8** %ptr.addr, align 8
  %111 = load i8*, i8** %ptr.addr, align 8
  %112 = load i8*, i8** %end.addr, align 8
  %cmp112 = icmp eq i8* %111, %112
  br i1 %cmp112, label %if.then.114, label %if.end.115

if.then.114:                                      ; preds = %if.end.110
  store i32 -1, i32* %retval
  br label %return

if.end.115:                                       ; preds = %if.end.110
  %113 = load i8*, i8** %ptr.addr, align 8
  %114 = load i8, i8* %113, align 1
  %idxprom116 = zext i8 %114 to i64
  %115 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %116 = bitcast %struct.encoding* %115 to %struct.normal_encoding*
  %type117 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %116, i32 0, i32 1
  %arrayidx118 = getelementptr [256 x i8], [256 x i8]* %type117, i32 0, i64 %idxprom116
  %117 = load i8, i8* %arrayidx118, align 1
  %conv119 = zext i8 %117 to i32
  switch i32 %conv119, label %sw.default.165 [
    i32 29, label %sw.bb.120
    i32 22, label %sw.bb.121
    i32 24, label %sw.bb.121
    i32 5, label %sw.bb.123
    i32 6, label %sw.bb.137
    i32 7, label %sw.bb.151
  ]

sw.bb.120:                                        ; preds = %if.end.115
  %118 = load i8*, i8** %ptr.addr, align 8
  %119 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %118, i8** %119, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.121:                                        ; preds = %if.end.115, %if.end.115
  %120 = load i8*, i8** %ptr.addr, align 8
  %add.ptr122 = getelementptr i8, i8* %120, i64 1
  store i8* %add.ptr122, i8** %ptr.addr, align 8
  br label %sw.epilog.166

sw.bb.123:                                        ; preds = %if.end.115
  %121 = load i8*, i8** %end.addr, align 8
  %122 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast124 = ptrtoint i8* %121 to i64
  %sub.ptr.rhs.cast125 = ptrtoint i8* %122 to i64
  %sub.ptr.sub126 = sub i64 %sub.ptr.lhs.cast124, %sub.ptr.rhs.cast125
  %cmp127 = icmp slt i64 %sub.ptr.sub126, 2
  br i1 %cmp127, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %sw.bb.123
  store i32 -2, i32* %retval
  br label %return

if.end.130:                                       ; preds = %sw.bb.123
  %123 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %124 = bitcast %struct.encoding* %123 to %struct.normal_encoding*
  %isNmstrt2131 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %124, i32 0, i32 5
  %125 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2131, align 8
  %126 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %127 = load i8*, i8** %ptr.addr, align 8
  %call132 = call i32 %125(%struct.encoding* %126, i8* %127)
  %tobool133 = icmp ne i32 %call132, 0
  br i1 %tobool133, label %if.end.135, label %if.then.134

if.then.134:                                      ; preds = %if.end.130
  %128 = load i8*, i8** %ptr.addr, align 8
  %129 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %128, i8** %129, align 8
  store i32 0, i32* %retval
  br label %return

if.end.135:                                       ; preds = %if.end.130
  %130 = load i8*, i8** %ptr.addr, align 8
  %add.ptr136 = getelementptr i8, i8* %130, i64 2
  store i8* %add.ptr136, i8** %ptr.addr, align 8
  br label %sw.epilog.166

sw.bb.137:                                        ; preds = %if.end.115
  %131 = load i8*, i8** %end.addr, align 8
  %132 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast138 = ptrtoint i8* %131 to i64
  %sub.ptr.rhs.cast139 = ptrtoint i8* %132 to i64
  %sub.ptr.sub140 = sub i64 %sub.ptr.lhs.cast138, %sub.ptr.rhs.cast139
  %cmp141 = icmp slt i64 %sub.ptr.sub140, 3
  br i1 %cmp141, label %if.then.143, label %if.end.144

if.then.143:                                      ; preds = %sw.bb.137
  store i32 -2, i32* %retval
  br label %return

if.end.144:                                       ; preds = %sw.bb.137
  %133 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %134 = bitcast %struct.encoding* %133 to %struct.normal_encoding*
  %isNmstrt3145 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %134, i32 0, i32 6
  %135 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3145, align 8
  %136 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %137 = load i8*, i8** %ptr.addr, align 8
  %call146 = call i32 %135(%struct.encoding* %136, i8* %137)
  %tobool147 = icmp ne i32 %call146, 0
  br i1 %tobool147, label %if.end.149, label %if.then.148

if.then.148:                                      ; preds = %if.end.144
  %138 = load i8*, i8** %ptr.addr, align 8
  %139 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %138, i8** %139, align 8
  store i32 0, i32* %retval
  br label %return

if.end.149:                                       ; preds = %if.end.144
  %140 = load i8*, i8** %ptr.addr, align 8
  %add.ptr150 = getelementptr i8, i8* %140, i64 3
  store i8* %add.ptr150, i8** %ptr.addr, align 8
  br label %sw.epilog.166

sw.bb.151:                                        ; preds = %if.end.115
  %141 = load i8*, i8** %end.addr, align 8
  %142 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast152 = ptrtoint i8* %141 to i64
  %sub.ptr.rhs.cast153 = ptrtoint i8* %142 to i64
  %sub.ptr.sub154 = sub i64 %sub.ptr.lhs.cast152, %sub.ptr.rhs.cast153
  %cmp155 = icmp slt i64 %sub.ptr.sub154, 4
  br i1 %cmp155, label %if.then.157, label %if.end.158

if.then.157:                                      ; preds = %sw.bb.151
  store i32 -2, i32* %retval
  br label %return

if.end.158:                                       ; preds = %sw.bb.151
  %143 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %144 = bitcast %struct.encoding* %143 to %struct.normal_encoding*
  %isNmstrt4159 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %144, i32 0, i32 7
  %145 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4159, align 8
  %146 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %147 = load i8*, i8** %ptr.addr, align 8
  %call160 = call i32 %145(%struct.encoding* %146, i8* %147)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %if.end.163, label %if.then.162

if.then.162:                                      ; preds = %if.end.158
  %148 = load i8*, i8** %ptr.addr, align 8
  %149 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %148, i8** %149, align 8
  store i32 0, i32* %retval
  br label %return

if.end.163:                                       ; preds = %if.end.158
  %150 = load i8*, i8** %ptr.addr, align 8
  %add.ptr164 = getelementptr i8, i8* %150, i64 4
  store i8* %add.ptr164, i8** %ptr.addr, align 8
  br label %sw.epilog.166

sw.default.165:                                   ; preds = %if.end.115
  %151 = load i8*, i8** %ptr.addr, align 8
  %152 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %151, i8** %152, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.166:                                    ; preds = %if.end.163, %if.end.149, %if.end.135, %sw.bb.121
  br label %sw.epilog.244

sw.bb.167:                                        ; preds = %while.body, %while.body, %while.body
  %153 = load i8*, i8** %ptr.addr, align 8
  %add.ptr168 = getelementptr i8, i8* %153, i64 1
  store i8* %add.ptr168, i8** %ptr.addr, align 8
  br label %while.cond.169

while.cond.169:                                   ; preds = %sw.bb.224, %sw.bb.167
  %154 = load i8*, i8** %ptr.addr, align 8
  %155 = load i8*, i8** %end.addr, align 8
  %cmp170 = icmp ne i8* %154, %155
  br i1 %cmp170, label %while.body.172, label %while.end

while.body.172:                                   ; preds = %while.cond.169
  %156 = load i8*, i8** %ptr.addr, align 8
  %157 = load i8, i8* %156, align 1
  %idxprom173 = zext i8 %157 to i64
  %158 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %159 = bitcast %struct.encoding* %158 to %struct.normal_encoding*
  %type174 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %159, i32 0, i32 1
  %arrayidx175 = getelementptr [256 x i8], [256 x i8]* %type174, i32 0, i64 %idxprom173
  %160 = load i8, i8* %arrayidx175, align 1
  %conv176 = zext i8 %160 to i32
  switch i32 %conv176, label %sw.default.226 [
    i32 29, label %sw.bb.177
    i32 22, label %sw.bb.178
    i32 24, label %sw.bb.178
    i32 5, label %sw.bb.180
    i32 6, label %sw.bb.194
    i32 7, label %sw.bb.208
    i32 11, label %sw.bb.222
    i32 17, label %sw.bb.223
    i32 21, label %sw.bb.224
    i32 9, label %sw.bb.224
    i32 10, label %sw.bb.224
  ]

sw.bb.177:                                        ; preds = %while.body.172
  %161 = load i8*, i8** %ptr.addr, align 8
  %162 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %161, i8** %162, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.178:                                        ; preds = %while.body.172, %while.body.172
  %163 = load i8*, i8** %ptr.addr, align 8
  %add.ptr179 = getelementptr i8, i8* %163, i64 1
  store i8* %add.ptr179, i8** %ptr.addr, align 8
  br label %sw.epilog.227

sw.bb.180:                                        ; preds = %while.body.172
  %164 = load i8*, i8** %end.addr, align 8
  %165 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast181 = ptrtoint i8* %164 to i64
  %sub.ptr.rhs.cast182 = ptrtoint i8* %165 to i64
  %sub.ptr.sub183 = sub i64 %sub.ptr.lhs.cast181, %sub.ptr.rhs.cast182
  %cmp184 = icmp slt i64 %sub.ptr.sub183, 2
  br i1 %cmp184, label %if.then.186, label %if.end.187

if.then.186:                                      ; preds = %sw.bb.180
  store i32 -2, i32* %retval
  br label %return

if.end.187:                                       ; preds = %sw.bb.180
  %166 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %167 = bitcast %struct.encoding* %166 to %struct.normal_encoding*
  %isNmstrt2188 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %167, i32 0, i32 5
  %168 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2188, align 8
  %169 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %170 = load i8*, i8** %ptr.addr, align 8
  %call189 = call i32 %168(%struct.encoding* %169, i8* %170)
  %tobool190 = icmp ne i32 %call189, 0
  br i1 %tobool190, label %if.end.192, label %if.then.191

if.then.191:                                      ; preds = %if.end.187
  %171 = load i8*, i8** %ptr.addr, align 8
  %172 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %171, i8** %172, align 8
  store i32 0, i32* %retval
  br label %return

if.end.192:                                       ; preds = %if.end.187
  %173 = load i8*, i8** %ptr.addr, align 8
  %add.ptr193 = getelementptr i8, i8* %173, i64 2
  store i8* %add.ptr193, i8** %ptr.addr, align 8
  br label %sw.epilog.227

sw.bb.194:                                        ; preds = %while.body.172
  %174 = load i8*, i8** %end.addr, align 8
  %175 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast195 = ptrtoint i8* %174 to i64
  %sub.ptr.rhs.cast196 = ptrtoint i8* %175 to i64
  %sub.ptr.sub197 = sub i64 %sub.ptr.lhs.cast195, %sub.ptr.rhs.cast196
  %cmp198 = icmp slt i64 %sub.ptr.sub197, 3
  br i1 %cmp198, label %if.then.200, label %if.end.201

if.then.200:                                      ; preds = %sw.bb.194
  store i32 -2, i32* %retval
  br label %return

if.end.201:                                       ; preds = %sw.bb.194
  %176 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %177 = bitcast %struct.encoding* %176 to %struct.normal_encoding*
  %isNmstrt3202 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %177, i32 0, i32 6
  %178 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3202, align 8
  %179 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %180 = load i8*, i8** %ptr.addr, align 8
  %call203 = call i32 %178(%struct.encoding* %179, i8* %180)
  %tobool204 = icmp ne i32 %call203, 0
  br i1 %tobool204, label %if.end.206, label %if.then.205

if.then.205:                                      ; preds = %if.end.201
  %181 = load i8*, i8** %ptr.addr, align 8
  %182 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %181, i8** %182, align 8
  store i32 0, i32* %retval
  br label %return

if.end.206:                                       ; preds = %if.end.201
  %183 = load i8*, i8** %ptr.addr, align 8
  %add.ptr207 = getelementptr i8, i8* %183, i64 3
  store i8* %add.ptr207, i8** %ptr.addr, align 8
  br label %sw.epilog.227

sw.bb.208:                                        ; preds = %while.body.172
  %184 = load i8*, i8** %end.addr, align 8
  %185 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast209 = ptrtoint i8* %184 to i64
  %sub.ptr.rhs.cast210 = ptrtoint i8* %185 to i64
  %sub.ptr.sub211 = sub i64 %sub.ptr.lhs.cast209, %sub.ptr.rhs.cast210
  %cmp212 = icmp slt i64 %sub.ptr.sub211, 4
  br i1 %cmp212, label %if.then.214, label %if.end.215

if.then.214:                                      ; preds = %sw.bb.208
  store i32 -2, i32* %retval
  br label %return

if.end.215:                                       ; preds = %sw.bb.208
  %186 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %187 = bitcast %struct.encoding* %186 to %struct.normal_encoding*
  %isNmstrt4216 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %187, i32 0, i32 7
  %188 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4216, align 8
  %189 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %190 = load i8*, i8** %ptr.addr, align 8
  %call217 = call i32 %188(%struct.encoding* %189, i8* %190)
  %tobool218 = icmp ne i32 %call217, 0
  br i1 %tobool218, label %if.end.220, label %if.then.219

if.then.219:                                      ; preds = %if.end.215
  %191 = load i8*, i8** %ptr.addr, align 8
  %192 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %191, i8** %192, align 8
  store i32 0, i32* %retval
  br label %return

if.end.220:                                       ; preds = %if.end.215
  %193 = load i8*, i8** %ptr.addr, align 8
  %add.ptr221 = getelementptr i8, i8* %193, i64 4
  store i8* %add.ptr221, i8** %ptr.addr, align 8
  br label %sw.epilog.227

sw.bb.222:                                        ; preds = %while.body.172
  br label %gt

sw.bb.223:                                        ; preds = %while.body.172
  br label %sol

sw.bb.224:                                        ; preds = %while.body.172, %while.body.172, %while.body.172
  %194 = load i8*, i8** %ptr.addr, align 8
  %add.ptr225 = getelementptr i8, i8* %194, i64 1
  store i8* %add.ptr225, i8** %ptr.addr, align 8
  br label %while.cond.169

sw.default.226:                                   ; preds = %while.body.172
  %195 = load i8*, i8** %ptr.addr, align 8
  %196 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %195, i8** %196, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.227:                                    ; preds = %if.end.220, %if.end.206, %if.end.192, %sw.bb.178
  %197 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %198 = load i8*, i8** %ptr.addr, align 8
  %199 = load i8*, i8** %end.addr, align 8
  %200 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call228 = call i32 @normal_scanAtts(%struct.encoding* %197, i8* %198, i8* %199, i8** %200)
  store i32 %call228, i32* %retval
  br label %return

while.end:                                        ; preds = %while.cond.169
  store i32 -1, i32* %retval
  br label %return

sw.bb.229:                                        ; preds = %while.body
  br label %gt

gt:                                               ; preds = %sw.bb.229, %sw.bb.222
  %201 = load i8*, i8** %ptr.addr, align 8
  %add.ptr230 = getelementptr i8, i8* %201, i64 1
  %202 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr230, i8** %202, align 8
  store i32 2, i32* %retval
  br label %return

sw.bb.231:                                        ; preds = %while.body
  br label %sol

sol:                                              ; preds = %sw.bb.231, %sw.bb.223
  %203 = load i8*, i8** %ptr.addr, align 8
  %add.ptr232 = getelementptr i8, i8* %203, i64 1
  store i8* %add.ptr232, i8** %ptr.addr, align 8
  %204 = load i8*, i8** %ptr.addr, align 8
  %205 = load i8*, i8** %end.addr, align 8
  %cmp233 = icmp eq i8* %204, %205
  br i1 %cmp233, label %if.then.235, label %if.end.236

if.then.235:                                      ; preds = %sol
  store i32 -1, i32* %retval
  br label %return

if.end.236:                                       ; preds = %sol
  %206 = load i8*, i8** %ptr.addr, align 8
  %207 = load i8, i8* %206, align 1
  %conv237 = sext i8 %207 to i32
  %cmp238 = icmp eq i32 %conv237, 62
  br i1 %cmp238, label %if.end.241, label %if.then.240

if.then.240:                                      ; preds = %if.end.236
  %208 = load i8*, i8** %ptr.addr, align 8
  %209 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %208, i8** %209, align 8
  store i32 0, i32* %retval
  br label %return

if.end.241:                                       ; preds = %if.end.236
  %210 = load i8*, i8** %ptr.addr, align 8
  %add.ptr242 = getelementptr i8, i8* %210, i64 1
  %211 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr242, i8** %211, align 8
  store i32 4, i32* %retval
  br label %return

sw.default.243:                                   ; preds = %while.body
  %212 = load i8*, i8** %ptr.addr, align 8
  %213 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %212, i8** %213, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.244:                                    ; preds = %sw.epilog.166, %if.end.105, %if.end.92, %if.end.79, %sw.bb.66
  br label %while.cond

while.end.245:                                    ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end.245, %sw.default.243, %if.end.241, %if.then.240, %if.then.235, %gt, %while.end, %sw.epilog.227, %sw.default.226, %if.then.219, %if.then.214, %if.then.205, %if.then.200, %if.then.191, %if.then.186, %sw.bb.177, %sw.default.165, %if.then.162, %if.then.157, %if.then.148, %if.then.143, %if.then.134, %if.then.129, %sw.bb.120, %if.then.114, %if.then.109, %if.then.104, %if.then.100, %if.then.91, %if.then.87, %if.then.78, %if.then.74, %sw.bb.65, %sw.default, %sw.bb.55, %sw.bb.52, %sw.epilog, %sw.bb.49, %sw.bb.46, %if.then.40, %if.then.33, %if.then.29, %if.then.20, %if.then.16, %if.then.7, %if.then.5, %sw.bb, %if.then
  %214 = load i32, i32* %retval
  ret i32 %214
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.10
    i32 7, label %sw.bb.23
    i32 19, label %sw.bb.36
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.end
  %10 = load i8*, i8** %end.addr, align 8
  %11 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.2
  store i32 -2, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.2
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 5
  %14 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %14(%struct.encoding* %15, i8* %16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.6
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %17, i8** %18, align 8
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.6
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %21 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %cmp14 = icmp slt i64 %sub.ptr.sub13, 3
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb.10
  store i32 -2, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb.10
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 6
  %24 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %25 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %call18 = call i32 %24(%struct.encoding* %25, i8* %26)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %29, i64 3
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end
  %30 = load i8*, i8** %end.addr, align 8
  %31 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast24 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %31 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp slt i64 %sub.ptr.sub26, 4
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %32 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %33 = bitcast %struct.encoding* %32 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %33, i32 0, i32 7
  %34 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = load i8*, i8** %ptr.addr, align 8
  %call31 = call i32 %34(%struct.encoding* %35, i8* %36)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %39, i64 4
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.36:                                         ; preds = %if.end
  %40 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %41 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %41, i64 1
  %42 = load i8*, i8** %end.addr, align 8
  %43 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call38 = call i32 @normal_scanCharRef(%struct.encoding* %40, i8* %add.ptr37, i8* %42, i8** %43)
  store i32 %call38, i32* %retval
  br label %return

sw.default:                                       ; preds = %if.end
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %44, i8** %45, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.34, %if.end.21, %if.end.8, %sw.bb.1
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.90, %sw.epilog
  %46 = load i8*, i8** %ptr.addr, align 8
  %47 = load i8*, i8** %end.addr, align 8
  %cmp39 = icmp ne i8* %46, %47
  br i1 %cmp39, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8, i8* %48, align 1
  %idxprom41 = zext i8 %49 to i64
  %50 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %51 = bitcast %struct.encoding* %50 to %struct.normal_encoding*
  %type42 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %51, i32 0, i32 1
  %arrayidx43 = getelementptr [256 x i8], [256 x i8]* %type42, i32 0, i64 %idxprom41
  %52 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %52 to i32
  switch i32 %conv44, label %sw.default.89 [
    i32 29, label %sw.bb.45
    i32 22, label %sw.bb.46
    i32 24, label %sw.bb.46
    i32 25, label %sw.bb.46
    i32 26, label %sw.bb.46
    i32 27, label %sw.bb.46
    i32 5, label %sw.bb.48
    i32 6, label %sw.bb.61
    i32 7, label %sw.bb.74
    i32 18, label %sw.bb.87
  ]

sw.bb.45:                                         ; preds = %while.body
  %53 = load i8*, i8** %ptr.addr, align 8
  %54 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %53, i8** %54, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.46:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %55 = load i8*, i8** %ptr.addr, align 8
  %add.ptr47 = getelementptr i8, i8* %55, i64 1
  store i8* %add.ptr47, i8** %ptr.addr, align 8
  br label %sw.epilog.90

sw.bb.48:                                         ; preds = %while.body
  %56 = load i8*, i8** %end.addr, align 8
  %57 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast49 = ptrtoint i8* %56 to i64
  %sub.ptr.rhs.cast50 = ptrtoint i8* %57 to i64
  %sub.ptr.sub51 = sub i64 %sub.ptr.lhs.cast49, %sub.ptr.rhs.cast50
  %cmp52 = icmp slt i64 %sub.ptr.sub51, 2
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %sw.bb.48
  store i32 -2, i32* %retval
  br label %return

if.end.55:                                        ; preds = %sw.bb.48
  %58 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %59 = bitcast %struct.encoding* %58 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %59, i32 0, i32 2
  %60 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %61 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %62 = load i8*, i8** %ptr.addr, align 8
  %call56 = call i32 %60(%struct.encoding* %61, i8* %62)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.end.59, label %if.then.58

if.then.58:                                       ; preds = %if.end.55
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 0, i32* %retval
  br label %return

if.end.59:                                        ; preds = %if.end.55
  %65 = load i8*, i8** %ptr.addr, align 8
  %add.ptr60 = getelementptr i8, i8* %65, i64 2
  store i8* %add.ptr60, i8** %ptr.addr, align 8
  br label %sw.epilog.90

sw.bb.61:                                         ; preds = %while.body
  %66 = load i8*, i8** %end.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast62 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast63 = ptrtoint i8* %67 to i64
  %sub.ptr.sub64 = sub i64 %sub.ptr.lhs.cast62, %sub.ptr.rhs.cast63
  %cmp65 = icmp slt i64 %sub.ptr.sub64, 3
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %sw.bb.61
  store i32 -2, i32* %retval
  br label %return

if.end.68:                                        ; preds = %sw.bb.61
  %68 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %69 = bitcast %struct.encoding* %68 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %69, i32 0, i32 3
  %70 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %71 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %72 = load i8*, i8** %ptr.addr, align 8
  %call69 = call i32 %70(%struct.encoding* %71, i8* %72)
  %tobool70 = icmp ne i32 %call69, 0
  br i1 %tobool70, label %if.end.72, label %if.then.71

if.then.71:                                       ; preds = %if.end.68
  %73 = load i8*, i8** %ptr.addr, align 8
  %74 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %73, i8** %74, align 8
  store i32 0, i32* %retval
  br label %return

if.end.72:                                        ; preds = %if.end.68
  %75 = load i8*, i8** %ptr.addr, align 8
  %add.ptr73 = getelementptr i8, i8* %75, i64 3
  store i8* %add.ptr73, i8** %ptr.addr, align 8
  br label %sw.epilog.90

sw.bb.74:                                         ; preds = %while.body
  %76 = load i8*, i8** %end.addr, align 8
  %77 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast75 = ptrtoint i8* %76 to i64
  %sub.ptr.rhs.cast76 = ptrtoint i8* %77 to i64
  %sub.ptr.sub77 = sub i64 %sub.ptr.lhs.cast75, %sub.ptr.rhs.cast76
  %cmp78 = icmp slt i64 %sub.ptr.sub77, 4
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %sw.bb.74
  store i32 -2, i32* %retval
  br label %return

if.end.81:                                        ; preds = %sw.bb.74
  %78 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %79 = bitcast %struct.encoding* %78 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %79, i32 0, i32 4
  %80 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %81 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %82 = load i8*, i8** %ptr.addr, align 8
  %call82 = call i32 %80(%struct.encoding* %81, i8* %82)
  %tobool83 = icmp ne i32 %call82, 0
  br i1 %tobool83, label %if.end.85, label %if.then.84

if.then.84:                                       ; preds = %if.end.81
  %83 = load i8*, i8** %ptr.addr, align 8
  %84 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %83, i8** %84, align 8
  store i32 0, i32* %retval
  br label %return

if.end.85:                                        ; preds = %if.end.81
  %85 = load i8*, i8** %ptr.addr, align 8
  %add.ptr86 = getelementptr i8, i8* %85, i64 4
  store i8* %add.ptr86, i8** %ptr.addr, align 8
  br label %sw.epilog.90

sw.bb.87:                                         ; preds = %while.body
  %86 = load i8*, i8** %ptr.addr, align 8
  %add.ptr88 = getelementptr i8, i8* %86, i64 1
  %87 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr88, i8** %87, align 8
  store i32 9, i32* %retval
  br label %return

sw.default.89:                                    ; preds = %while.body
  %88 = load i8*, i8** %ptr.addr, align 8
  %89 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %88, i8** %89, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.90:                                     ; preds = %if.end.85, %if.end.72, %if.end.59, %sw.bb.46
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.89, %sw.bb.87, %if.then.84, %if.then.80, %if.then.71, %if.then.67, %if.then.58, %if.then.54, %sw.bb.45, %sw.default, %sw.bb.36, %if.then.33, %if.then.29, %if.then.20, %if.then.16, %if.then.7, %if.then.5, %sw.bb, %if.then
  %90 = load i32, i32* %retval
  ret i32 %90
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanCdataSection(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %2, 6
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8, i8* %3, align 1
  %conv = sext i8 %4 to i32
  %5 = load i32, i32* %i, align 4
  %idxprom = sext i32 %5 to i64
  %arrayidx = getelementptr [6 x i8], [6 x i8]* @normal_scanCdataSection.CDATA_LSQB, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv2 = sext i8 %6 to i32
  %cmp3 = icmp eq i32 %conv, %conv2
  br i1 %cmp3, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %for.body
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.6
  %9 = load i32, i32* %i, align 4
  %inc = add i32 %9, 1
  store i32 %inc, i32* %i, align 4
  %10 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %11 = load i8*, i8** %ptr.addr, align 8
  %12 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %11, i8** %12, align 8
  store i32 8, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.5, %if.then
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanEndTag(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.10
    i32 7, label %sw.bb.23
  ]

sw.bb:                                            ; preds = %if.end
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %if.end, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.2:                                          ; preds = %if.end
  %10 = load i8*, i8** %end.addr, align 8
  %11 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp3, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %sw.bb.2
  store i32 -2, i32* %retval
  br label %return

if.end.6:                                         ; preds = %sw.bb.2
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 5
  %14 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %14(%struct.encoding* %15, i8* %16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %if.end.6
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %17, i8** %18, align 8
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.6
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %if.end
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %21 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %cmp14 = icmp slt i64 %sub.ptr.sub13, 3
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb.10
  store i32 -2, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb.10
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 6
  %24 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %25 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %call18 = call i32 %24(%struct.encoding* %25, i8* %26)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %if.end.17
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %29, i64 3
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %if.end
  %30 = load i8*, i8** %end.addr, align 8
  %31 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast24 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %31 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp slt i64 %sub.ptr.sub26, 4
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %32 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %33 = bitcast %struct.encoding* %32 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %33, i32 0, i32 7
  %34 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = load i8*, i8** %ptr.addr, align 8
  %call31 = call i32 %34(%struct.encoding* %35, i8* %36)
  %tobool32 = icmp ne i32 %call31, 0
  br i1 %tobool32, label %if.end.34, label %if.then.33

if.then.33:                                       ; preds = %if.end.30
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.end.30
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %39, i64 4
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %40, i8** %41, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.34, %if.end.21, %if.end.8, %sw.bb.1
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.103, %sw.epilog
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8*, i8** %end.addr, align 8
  %cmp36 = icmp ne i8* %42, %43
  br i1 %cmp36, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8, i8* %44, align 1
  %idxprom38 = zext i8 %45 to i64
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = bitcast %struct.encoding* %46 to %struct.normal_encoding*
  %type39 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %47, i32 0, i32 1
  %arrayidx40 = getelementptr [256 x i8], [256 x i8]* %type39, i32 0, i64 %idxprom38
  %48 = load i8, i8* %arrayidx40, align 1
  %conv41 = zext i8 %48 to i32
  switch i32 %conv41, label %sw.default.102 [
    i32 29, label %sw.bb.42
    i32 22, label %sw.bb.43
    i32 24, label %sw.bb.43
    i32 25, label %sw.bb.43
    i32 26, label %sw.bb.43
    i32 27, label %sw.bb.43
    i32 5, label %sw.bb.45
    i32 6, label %sw.bb.58
    i32 7, label %sw.bb.71
    i32 21, label %sw.bb.84
    i32 9, label %sw.bb.84
    i32 10, label %sw.bb.84
    i32 23, label %sw.bb.98
    i32 11, label %sw.bb.100
  ]

sw.bb.42:                                         ; preds = %while.body
  %49 = load i8*, i8** %ptr.addr, align 8
  %50 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %49, i8** %50, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %51 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %51, i64 1
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  br label %sw.epilog.103

sw.bb.45:                                         ; preds = %while.body
  %52 = load i8*, i8** %end.addr, align 8
  %53 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast46 = ptrtoint i8* %52 to i64
  %sub.ptr.rhs.cast47 = ptrtoint i8* %53 to i64
  %sub.ptr.sub48 = sub i64 %sub.ptr.lhs.cast46, %sub.ptr.rhs.cast47
  %cmp49 = icmp slt i64 %sub.ptr.sub48, 2
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %sw.bb.45
  store i32 -2, i32* %retval
  br label %return

if.end.52:                                        ; preds = %sw.bb.45
  %54 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %55 = bitcast %struct.encoding* %54 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %55, i32 0, i32 2
  %56 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %57 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %58 = load i8*, i8** %ptr.addr, align 8
  %call53 = call i32 %56(%struct.encoding* %57, i8* %58)
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.end.56, label %if.then.55

if.then.55:                                       ; preds = %if.end.52
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %59, i8** %60, align 8
  store i32 0, i32* %retval
  br label %return

if.end.56:                                        ; preds = %if.end.52
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr57 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr57, i8** %ptr.addr, align 8
  br label %sw.epilog.103

sw.bb.58:                                         ; preds = %while.body
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast59 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast60 = ptrtoint i8* %63 to i64
  %sub.ptr.sub61 = sub i64 %sub.ptr.lhs.cast59, %sub.ptr.rhs.cast60
  %cmp62 = icmp slt i64 %sub.ptr.sub61, 3
  br i1 %cmp62, label %if.then.64, label %if.end.65

if.then.64:                                       ; preds = %sw.bb.58
  store i32 -2, i32* %retval
  br label %return

if.end.65:                                        ; preds = %sw.bb.58
  %64 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %65 = bitcast %struct.encoding* %64 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %65, i32 0, i32 3
  %66 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %67 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %68 = load i8*, i8** %ptr.addr, align 8
  %call66 = call i32 %66(%struct.encoding* %67, i8* %68)
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.end.69, label %if.then.68

if.then.68:                                       ; preds = %if.end.65
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %69, i8** %70, align 8
  store i32 0, i32* %retval
  br label %return

if.end.69:                                        ; preds = %if.end.65
  %71 = load i8*, i8** %ptr.addr, align 8
  %add.ptr70 = getelementptr i8, i8* %71, i64 3
  store i8* %add.ptr70, i8** %ptr.addr, align 8
  br label %sw.epilog.103

sw.bb.71:                                         ; preds = %while.body
  %72 = load i8*, i8** %end.addr, align 8
  %73 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast72 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast73 = ptrtoint i8* %73 to i64
  %sub.ptr.sub74 = sub i64 %sub.ptr.lhs.cast72, %sub.ptr.rhs.cast73
  %cmp75 = icmp slt i64 %sub.ptr.sub74, 4
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %sw.bb.71
  store i32 -2, i32* %retval
  br label %return

if.end.78:                                        ; preds = %sw.bb.71
  %74 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %75 = bitcast %struct.encoding* %74 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %75, i32 0, i32 4
  %76 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %77 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %78 = load i8*, i8** %ptr.addr, align 8
  %call79 = call i32 %76(%struct.encoding* %77, i8* %78)
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.end.82, label %if.then.81

if.then.81:                                       ; preds = %if.end.78
  %79 = load i8*, i8** %ptr.addr, align 8
  %80 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %79, i8** %80, align 8
  store i32 0, i32* %retval
  br label %return

if.end.82:                                        ; preds = %if.end.78
  %81 = load i8*, i8** %ptr.addr, align 8
  %add.ptr83 = getelementptr i8, i8* %81, i64 4
  store i8* %add.ptr83, i8** %ptr.addr, align 8
  br label %sw.epilog.103

sw.bb.84:                                         ; preds = %while.body, %while.body, %while.body
  %82 = load i8*, i8** %ptr.addr, align 8
  %add.ptr85 = getelementptr i8, i8* %82, i64 1
  store i8* %add.ptr85, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.84
  %83 = load i8*, i8** %ptr.addr, align 8
  %84 = load i8*, i8** %end.addr, align 8
  %cmp86 = icmp ne i8* %83, %84
  br i1 %cmp86, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %85 = load i8*, i8** %ptr.addr, align 8
  %86 = load i8, i8* %85, align 1
  %idxprom88 = zext i8 %86 to i64
  %87 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %88 = bitcast %struct.encoding* %87 to %struct.normal_encoding*
  %type89 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %88, i32 0, i32 1
  %arrayidx90 = getelementptr [256 x i8], [256 x i8]* %type89, i32 0, i64 %idxprom88
  %89 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %89 to i32
  switch i32 %conv91, label %sw.default.95 [
    i32 21, label %sw.bb.92
    i32 9, label %sw.bb.92
    i32 10, label %sw.bb.92
    i32 11, label %sw.bb.93
  ]

sw.bb.92:                                         ; preds = %for.body, %for.body, %for.body
  br label %sw.epilog.96

sw.bb.93:                                         ; preds = %for.body
  %90 = load i8*, i8** %ptr.addr, align 8
  %add.ptr94 = getelementptr i8, i8* %90, i64 1
  %91 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr94, i8** %91, align 8
  store i32 5, i32* %retval
  br label %return

sw.default.95:                                    ; preds = %for.body
  %92 = load i8*, i8** %ptr.addr, align 8
  %93 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %92, i8** %93, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.96:                                     ; preds = %sw.bb.92
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.96
  %94 = load i8*, i8** %ptr.addr, align 8
  %add.ptr97 = getelementptr i8, i8* %94, i64 1
  store i8* %add.ptr97, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %while.body
  %95 = load i8*, i8** %ptr.addr, align 8
  %add.ptr99 = getelementptr i8, i8* %95, i64 1
  store i8* %add.ptr99, i8** %ptr.addr, align 8
  br label %sw.epilog.103

sw.bb.100:                                        ; preds = %while.body
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr101 = getelementptr i8, i8* %96, i64 1
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr101, i8** %97, align 8
  store i32 5, i32* %retval
  br label %return

sw.default.102:                                   ; preds = %while.body
  %98 = load i8*, i8** %ptr.addr, align 8
  %99 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %98, i8** %99, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.103:                                    ; preds = %sw.bb.98, %if.end.82, %if.end.69, %if.end.56, %sw.bb.43
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.102, %sw.bb.100, %for.end, %sw.default.95, %sw.bb.93, %if.then.81, %if.then.77, %if.then.68, %if.then.64, %if.then.55, %if.then.51, %sw.bb.42, %sw.default, %if.then.33, %if.then.29, %if.then.20, %if.then.16, %if.then.7, %if.then.5, %sw.bb, %if.then
  %100 = load i32, i32* %retval
  ret i32 %100
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanAtts(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %hadColon = alloca i32, align 4
  %t = alloca i32, align 4
  %open = alloca i32, align 4
  %t129 = alloca i32, align 4
  %tok = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  store i32 0, i32* %hadColon, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.286, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default.285 [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.1
    i32 24, label %sw.bb.1
    i32 25, label %sw.bb.1
    i32 26, label %sw.bb.1
    i32 27, label %sw.bb.1
    i32 5, label %sw.bb.2
    i32 6, label %sw.bb.8
    i32 7, label %sw.bb.21
    i32 23, label %sw.bb.34
    i32 21, label %sw.bb.89
    i32 9, label %sw.bb.89
    i32 10, label %sw.bb.89
    i32 14, label %sw.bb.106
  ]

sw.bb:                                            ; preds = %while.body
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %while.body, %while.body, %while.body, %while.body, %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog.286

sw.bb.2:                                          ; preds = %while.body
  %10 = load i8*, i8** %end.addr, align 8
  %11 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %10 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %11 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp3 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.2
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb.2
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %isName2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 2
  %14 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName2, align 8
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = load i8*, i8** %ptr.addr, align 8
  %call = call i32 %14(%struct.encoding* %15, i8* %16)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %17, i8** %18, align 8
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr7 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr7, i8** %ptr.addr, align 8
  br label %sw.epilog.286

sw.bb.8:                                          ; preds = %while.body
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast9 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast10 = ptrtoint i8* %21 to i64
  %sub.ptr.sub11 = sub i64 %sub.ptr.lhs.cast9, %sub.ptr.rhs.cast10
  %cmp12 = icmp slt i64 %sub.ptr.sub11, 3
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %sw.bb.8
  store i32 -2, i32* %retval
  br label %return

if.end.15:                                        ; preds = %sw.bb.8
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %isName3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 3
  %24 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName3, align 8
  %25 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %call16 = call i32 %24(%struct.encoding* %25, i8* %26)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end.19, label %if.then.18

if.then.18:                                       ; preds = %if.end.15
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

if.end.19:                                        ; preds = %if.end.15
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr20 = getelementptr i8, i8* %29, i64 3
  store i8* %add.ptr20, i8** %ptr.addr, align 8
  br label %sw.epilog.286

sw.bb.21:                                         ; preds = %while.body
  %30 = load i8*, i8** %end.addr, align 8
  %31 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast22 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast23 = ptrtoint i8* %31 to i64
  %sub.ptr.sub24 = sub i64 %sub.ptr.lhs.cast22, %sub.ptr.rhs.cast23
  %cmp25 = icmp slt i64 %sub.ptr.sub24, 4
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %sw.bb.21
  store i32 -2, i32* %retval
  br label %return

if.end.28:                                        ; preds = %sw.bb.21
  %32 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %33 = bitcast %struct.encoding* %32 to %struct.normal_encoding*
  %isName4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %33, i32 0, i32 4
  %34 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isName4, align 8
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = load i8*, i8** %ptr.addr, align 8
  %call29 = call i32 %34(%struct.encoding* %35, i8* %36)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.end.32, label %if.then.31

if.then.31:                                       ; preds = %if.end.28
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.28
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr33 = getelementptr i8, i8* %39, i64 4
  store i8* %add.ptr33, i8** %ptr.addr, align 8
  br label %sw.epilog.286

sw.bb.34:                                         ; preds = %while.body
  %40 = load i32, i32* %hadColon, align 4
  %tobool35 = icmp ne i32 %40, 0
  br i1 %tobool35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %sw.bb.34
  %41 = load i8*, i8** %ptr.addr, align 8
  %42 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %41, i8** %42, align 8
  store i32 0, i32* %retval
  br label %return

if.end.37:                                        ; preds = %sw.bb.34
  store i32 1, i32* %hadColon, align 4
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr38 = getelementptr i8, i8* %43, i64 1
  store i8* %add.ptr38, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8*, i8** %end.addr, align 8
  %cmp39 = icmp eq i8* %44, %45
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %if.end.37
  store i32 -1, i32* %retval
  br label %return

if.end.42:                                        ; preds = %if.end.37
  %46 = load i8*, i8** %ptr.addr, align 8
  %47 = load i8, i8* %46, align 1
  %idxprom43 = zext i8 %47 to i64
  %48 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %49 = bitcast %struct.encoding* %48 to %struct.normal_encoding*
  %type44 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %49, i32 0, i32 1
  %arrayidx45 = getelementptr [256 x i8], [256 x i8]* %type44, i32 0, i64 %idxprom43
  %50 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %50 to i32
  switch i32 %conv46, label %sw.default [
    i32 29, label %sw.bb.47
    i32 22, label %sw.bb.48
    i32 24, label %sw.bb.48
    i32 5, label %sw.bb.50
    i32 6, label %sw.bb.63
    i32 7, label %sw.bb.76
  ]

sw.bb.47:                                         ; preds = %if.end.42
  %51 = load i8*, i8** %ptr.addr, align 8
  %52 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %51, i8** %52, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.48:                                         ; preds = %if.end.42, %if.end.42
  %53 = load i8*, i8** %ptr.addr, align 8
  %add.ptr49 = getelementptr i8, i8* %53, i64 1
  store i8* %add.ptr49, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.50:                                         ; preds = %if.end.42
  %54 = load i8*, i8** %end.addr, align 8
  %55 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast51 = ptrtoint i8* %54 to i64
  %sub.ptr.rhs.cast52 = ptrtoint i8* %55 to i64
  %sub.ptr.sub53 = sub i64 %sub.ptr.lhs.cast51, %sub.ptr.rhs.cast52
  %cmp54 = icmp slt i64 %sub.ptr.sub53, 2
  br i1 %cmp54, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %sw.bb.50
  store i32 -2, i32* %retval
  br label %return

if.end.57:                                        ; preds = %sw.bb.50
  %56 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %57 = bitcast %struct.encoding* %56 to %struct.normal_encoding*
  %isNmstrt2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %57, i32 0, i32 5
  %58 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2, align 8
  %59 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %60 = load i8*, i8** %ptr.addr, align 8
  %call58 = call i32 %58(%struct.encoding* %59, i8* %60)
  %tobool59 = icmp ne i32 %call58, 0
  br i1 %tobool59, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %if.end.57
  %61 = load i8*, i8** %ptr.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %61, i8** %62, align 8
  store i32 0, i32* %retval
  br label %return

if.end.61:                                        ; preds = %if.end.57
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr62 = getelementptr i8, i8* %63, i64 2
  store i8* %add.ptr62, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.63:                                         ; preds = %if.end.42
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast64 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast65 = ptrtoint i8* %65 to i64
  %sub.ptr.sub66 = sub i64 %sub.ptr.lhs.cast64, %sub.ptr.rhs.cast65
  %cmp67 = icmp slt i64 %sub.ptr.sub66, 3
  br i1 %cmp67, label %if.then.69, label %if.end.70

if.then.69:                                       ; preds = %sw.bb.63
  store i32 -2, i32* %retval
  br label %return

if.end.70:                                        ; preds = %sw.bb.63
  %66 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %67 = bitcast %struct.encoding* %66 to %struct.normal_encoding*
  %isNmstrt3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %67, i32 0, i32 6
  %68 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3, align 8
  %69 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %70 = load i8*, i8** %ptr.addr, align 8
  %call71 = call i32 %68(%struct.encoding* %69, i8* %70)
  %tobool72 = icmp ne i32 %call71, 0
  br i1 %tobool72, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %if.end.70
  %71 = load i8*, i8** %ptr.addr, align 8
  %72 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %71, i8** %72, align 8
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %if.end.70
  %73 = load i8*, i8** %ptr.addr, align 8
  %add.ptr75 = getelementptr i8, i8* %73, i64 3
  store i8* %add.ptr75, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.76:                                         ; preds = %if.end.42
  %74 = load i8*, i8** %end.addr, align 8
  %75 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast77 = ptrtoint i8* %74 to i64
  %sub.ptr.rhs.cast78 = ptrtoint i8* %75 to i64
  %sub.ptr.sub79 = sub i64 %sub.ptr.lhs.cast77, %sub.ptr.rhs.cast78
  %cmp80 = icmp slt i64 %sub.ptr.sub79, 4
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %sw.bb.76
  store i32 -2, i32* %retval
  br label %return

if.end.83:                                        ; preds = %sw.bb.76
  %76 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %77 = bitcast %struct.encoding* %76 to %struct.normal_encoding*
  %isNmstrt4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %77, i32 0, i32 7
  %78 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4, align 8
  %79 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %80 = load i8*, i8** %ptr.addr, align 8
  %call84 = call i32 %78(%struct.encoding* %79, i8* %80)
  %tobool85 = icmp ne i32 %call84, 0
  br i1 %tobool85, label %if.end.87, label %if.then.86

if.then.86:                                       ; preds = %if.end.83
  %81 = load i8*, i8** %ptr.addr, align 8
  %82 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %81, i8** %82, align 8
  store i32 0, i32* %retval
  br label %return

if.end.87:                                        ; preds = %if.end.83
  %83 = load i8*, i8** %ptr.addr, align 8
  %add.ptr88 = getelementptr i8, i8* %83, i64 4
  store i8* %add.ptr88, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.42
  %84 = load i8*, i8** %ptr.addr, align 8
  %85 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %84, i8** %85, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.87, %if.end.74, %if.end.61, %sw.bb.48
  br label %sw.epilog.286

sw.bb.89:                                         ; preds = %while.body, %while.body, %while.body
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog.105, %sw.bb.89
  %86 = load i8*, i8** %ptr.addr, align 8
  %add.ptr90 = getelementptr i8, i8* %86, i64 1
  store i8* %add.ptr90, i8** %ptr.addr, align 8
  %87 = load i8*, i8** %ptr.addr, align 8
  %88 = load i8*, i8** %end.addr, align 8
  %cmp91 = icmp eq i8* %87, %88
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

if.end.94:                                        ; preds = %for.cond
  %89 = load i8*, i8** %ptr.addr, align 8
  %90 = load i8, i8* %89, align 1
  %idxprom95 = zext i8 %90 to i64
  %91 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %92 = bitcast %struct.encoding* %91 to %struct.normal_encoding*
  %type96 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %92, i32 0, i32 1
  %arrayidx97 = getelementptr [256 x i8], [256 x i8]* %type96, i32 0, i64 %idxprom95
  %93 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %93 to i32
  store i32 %conv98, i32* %t, align 4
  %94 = load i32, i32* %t, align 4
  %cmp99 = icmp eq i32 %94, 14
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %if.end.94
  br label %for.end

if.end.102:                                       ; preds = %if.end.94
  %95 = load i32, i32* %t, align 4
  switch i32 %95, label %sw.default.104 [
    i32 21, label %sw.bb.103
    i32 10, label %sw.bb.103
    i32 9, label %sw.bb.103
  ]

sw.bb.103:                                        ; preds = %if.end.102, %if.end.102, %if.end.102
  br label %sw.epilog.105

sw.default.104:                                   ; preds = %if.end.102
  %96 = load i8*, i8** %ptr.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %96, i8** %97, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.105:                                    ; preds = %sw.bb.103
  br label %for.cond

for.end:                                          ; preds = %if.then.101
  br label %sw.bb.106

sw.bb.106:                                        ; preds = %while.body, %for.end
  store i32 0, i32* %hadColon, align 4
  br label %for.cond.107

for.cond.107:                                     ; preds = %sw.epilog.125, %sw.bb.106
  %98 = load i8*, i8** %ptr.addr, align 8
  %add.ptr108 = getelementptr i8, i8* %98, i64 1
  store i8* %add.ptr108, i8** %ptr.addr, align 8
  %99 = load i8*, i8** %ptr.addr, align 8
  %100 = load i8*, i8** %end.addr, align 8
  %cmp109 = icmp eq i8* %99, %100
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %for.cond.107
  store i32 -1, i32* %retval
  br label %return

if.end.112:                                       ; preds = %for.cond.107
  %101 = load i8*, i8** %ptr.addr, align 8
  %102 = load i8, i8* %101, align 1
  %idxprom113 = zext i8 %102 to i64
  %103 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %104 = bitcast %struct.encoding* %103 to %struct.normal_encoding*
  %type114 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %104, i32 0, i32 1
  %arrayidx115 = getelementptr [256 x i8], [256 x i8]* %type114, i32 0, i64 %idxprom113
  %105 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %105 to i32
  store i32 %conv116, i32* %open, align 4
  %106 = load i32, i32* %open, align 4
  %cmp117 = icmp eq i32 %106, 12
  br i1 %cmp117, label %if.then.121, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.112
  %107 = load i32, i32* %open, align 4
  %cmp119 = icmp eq i32 %107, 13
  br i1 %cmp119, label %if.then.121, label %if.end.122

if.then.121:                                      ; preds = %lor.lhs.false, %if.end.112
  br label %for.end.126

if.end.122:                                       ; preds = %lor.lhs.false
  %108 = load i32, i32* %open, align 4
  switch i32 %108, label %sw.default.124 [
    i32 21, label %sw.bb.123
    i32 10, label %sw.bb.123
    i32 9, label %sw.bb.123
  ]

sw.bb.123:                                        ; preds = %if.end.122, %if.end.122, %if.end.122
  br label %sw.epilog.125

sw.default.124:                                   ; preds = %if.end.122
  %109 = load i8*, i8** %ptr.addr, align 8
  %110 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %109, i8** %110, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.125:                                    ; preds = %sw.bb.123
  br label %for.cond.107

for.end.126:                                      ; preds = %if.then.121
  %111 = load i8*, i8** %ptr.addr, align 8
  %add.ptr127 = getelementptr i8, i8* %111, i64 1
  store i8* %add.ptr127, i8** %ptr.addr, align 8
  br label %for.cond.128

for.cond.128:                                     ; preds = %sw.epilog.196, %for.end.126
  %112 = load i8*, i8** %ptr.addr, align 8
  %113 = load i8*, i8** %end.addr, align 8
  %cmp130 = icmp eq i8* %112, %113
  br i1 %cmp130, label %if.then.132, label %if.end.133

if.then.132:                                      ; preds = %for.cond.128
  store i32 -1, i32* %retval
  br label %return

if.end.133:                                       ; preds = %for.cond.128
  %114 = load i8*, i8** %ptr.addr, align 8
  %115 = load i8, i8* %114, align 1
  %idxprom134 = zext i8 %115 to i64
  %116 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %117 = bitcast %struct.encoding* %116 to %struct.normal_encoding*
  %type135 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %117, i32 0, i32 1
  %arrayidx136 = getelementptr [256 x i8], [256 x i8]* %type135, i32 0, i64 %idxprom134
  %118 = load i8, i8* %arrayidx136, align 1
  %conv137 = zext i8 %118 to i32
  store i32 %conv137, i32* %t129, align 4
  %119 = load i32, i32* %t129, align 4
  %120 = load i32, i32* %open, align 4
  %cmp138 = icmp eq i32 %119, %120
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %if.end.133
  br label %for.end.197

if.end.141:                                       ; preds = %if.end.133
  %121 = load i32, i32* %t129, align 4
  switch i32 %121, label %sw.default.194 [
    i32 5, label %sw.bb.142
    i32 6, label %sw.bb.155
    i32 7, label %sw.bb.168
    i32 0, label %sw.bb.181
    i32 1, label %sw.bb.181
    i32 8, label %sw.bb.181
    i32 3, label %sw.bb.182
    i32 2, label %sw.bb.193
  ]

sw.bb.142:                                        ; preds = %if.end.141
  %122 = load i8*, i8** %end.addr, align 8
  %123 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast143 = ptrtoint i8* %122 to i64
  %sub.ptr.rhs.cast144 = ptrtoint i8* %123 to i64
  %sub.ptr.sub145 = sub i64 %sub.ptr.lhs.cast143, %sub.ptr.rhs.cast144
  %cmp146 = icmp slt i64 %sub.ptr.sub145, 2
  br i1 %cmp146, label %if.then.148, label %if.end.149

if.then.148:                                      ; preds = %sw.bb.142
  store i32 -2, i32* %retval
  br label %return

if.end.149:                                       ; preds = %sw.bb.142
  %124 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %125 = bitcast %struct.encoding* %124 to %struct.normal_encoding*
  %isInvalid2 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %125, i32 0, i32 8
  %126 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid2, align 8
  %127 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %128 = load i8*, i8** %ptr.addr, align 8
  %call150 = call i32 %126(%struct.encoding* %127, i8* %128)
  %tobool151 = icmp ne i32 %call150, 0
  br i1 %tobool151, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %if.end.149
  %129 = load i8*, i8** %ptr.addr, align 8
  %130 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %129, i8** %130, align 8
  store i32 0, i32* %retval
  br label %return

if.end.153:                                       ; preds = %if.end.149
  %131 = load i8*, i8** %ptr.addr, align 8
  %add.ptr154 = getelementptr i8, i8* %131, i64 2
  store i8* %add.ptr154, i8** %ptr.addr, align 8
  br label %sw.epilog.196

sw.bb.155:                                        ; preds = %if.end.141
  %132 = load i8*, i8** %end.addr, align 8
  %133 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast156 = ptrtoint i8* %132 to i64
  %sub.ptr.rhs.cast157 = ptrtoint i8* %133 to i64
  %sub.ptr.sub158 = sub i64 %sub.ptr.lhs.cast156, %sub.ptr.rhs.cast157
  %cmp159 = icmp slt i64 %sub.ptr.sub158, 3
  br i1 %cmp159, label %if.then.161, label %if.end.162

if.then.161:                                      ; preds = %sw.bb.155
  store i32 -2, i32* %retval
  br label %return

if.end.162:                                       ; preds = %sw.bb.155
  %134 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %135 = bitcast %struct.encoding* %134 to %struct.normal_encoding*
  %isInvalid3 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %135, i32 0, i32 9
  %136 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid3, align 8
  %137 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %138 = load i8*, i8** %ptr.addr, align 8
  %call163 = call i32 %136(%struct.encoding* %137, i8* %138)
  %tobool164 = icmp ne i32 %call163, 0
  br i1 %tobool164, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %if.end.162
  %139 = load i8*, i8** %ptr.addr, align 8
  %140 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %139, i8** %140, align 8
  store i32 0, i32* %retval
  br label %return

if.end.166:                                       ; preds = %if.end.162
  %141 = load i8*, i8** %ptr.addr, align 8
  %add.ptr167 = getelementptr i8, i8* %141, i64 3
  store i8* %add.ptr167, i8** %ptr.addr, align 8
  br label %sw.epilog.196

sw.bb.168:                                        ; preds = %if.end.141
  %142 = load i8*, i8** %end.addr, align 8
  %143 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast169 = ptrtoint i8* %142 to i64
  %sub.ptr.rhs.cast170 = ptrtoint i8* %143 to i64
  %sub.ptr.sub171 = sub i64 %sub.ptr.lhs.cast169, %sub.ptr.rhs.cast170
  %cmp172 = icmp slt i64 %sub.ptr.sub171, 4
  br i1 %cmp172, label %if.then.174, label %if.end.175

if.then.174:                                      ; preds = %sw.bb.168
  store i32 -2, i32* %retval
  br label %return

if.end.175:                                       ; preds = %sw.bb.168
  %144 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %145 = bitcast %struct.encoding* %144 to %struct.normal_encoding*
  %isInvalid4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %145, i32 0, i32 10
  %146 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isInvalid4, align 8
  %147 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %148 = load i8*, i8** %ptr.addr, align 8
  %call176 = call i32 %146(%struct.encoding* %147, i8* %148)
  %tobool177 = icmp ne i32 %call176, 0
  br i1 %tobool177, label %if.then.178, label %if.end.179

if.then.178:                                      ; preds = %if.end.175
  %149 = load i8*, i8** %ptr.addr, align 8
  %150 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %149, i8** %150, align 8
  store i32 0, i32* %retval
  br label %return

if.end.179:                                       ; preds = %if.end.175
  %151 = load i8*, i8** %ptr.addr, align 8
  %add.ptr180 = getelementptr i8, i8* %151, i64 4
  store i8* %add.ptr180, i8** %ptr.addr, align 8
  br label %sw.epilog.196

sw.bb.181:                                        ; preds = %if.end.141, %if.end.141, %if.end.141
  %152 = load i8*, i8** %ptr.addr, align 8
  %153 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %152, i8** %153, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.182:                                        ; preds = %if.end.141
  %154 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %155 = load i8*, i8** %ptr.addr, align 8
  %add.ptr183 = getelementptr i8, i8* %155, i64 1
  %156 = load i8*, i8** %end.addr, align 8
  %call184 = call i32 @normal_scanRef(%struct.encoding* %154, i8* %add.ptr183, i8* %156, i8** %ptr.addr)
  store i32 %call184, i32* %tok, align 4
  %157 = load i32, i32* %tok, align 4
  %cmp185 = icmp sle i32 %157, 0
  br i1 %cmp185, label %if.then.187, label %if.end.192

if.then.187:                                      ; preds = %sw.bb.182
  %158 = load i32, i32* %tok, align 4
  %cmp188 = icmp eq i32 %158, 0
  br i1 %cmp188, label %if.then.190, label %if.end.191

if.then.190:                                      ; preds = %if.then.187
  %159 = load i8*, i8** %ptr.addr, align 8
  %160 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %159, i8** %160, align 8
  br label %if.end.191

if.end.191:                                       ; preds = %if.then.190, %if.then.187
  %161 = load i32, i32* %tok, align 4
  store i32 %161, i32* %retval
  br label %return

if.end.192:                                       ; preds = %sw.bb.182
  br label %sw.epilog.196

sw.bb.193:                                        ; preds = %if.end.141
  %162 = load i8*, i8** %ptr.addr, align 8
  %163 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %162, i8** %163, align 8
  store i32 0, i32* %retval
  br label %return

sw.default.194:                                   ; preds = %if.end.141
  %164 = load i8*, i8** %ptr.addr, align 8
  %add.ptr195 = getelementptr i8, i8* %164, i64 1
  store i8* %add.ptr195, i8** %ptr.addr, align 8
  br label %sw.epilog.196

sw.epilog.196:                                    ; preds = %sw.default.194, %if.end.192, %if.end.179, %if.end.166, %if.end.153
  br label %for.cond.128

for.end.197:                                      ; preds = %if.then.140
  %165 = load i8*, i8** %ptr.addr, align 8
  %add.ptr198 = getelementptr i8, i8* %165, i64 1
  store i8* %add.ptr198, i8** %ptr.addr, align 8
  %166 = load i8*, i8** %ptr.addr, align 8
  %167 = load i8*, i8** %end.addr, align 8
  %cmp199 = icmp eq i8* %166, %167
  br i1 %cmp199, label %if.then.201, label %if.end.202

if.then.201:                                      ; preds = %for.end.197
  store i32 -1, i32* %retval
  br label %return

if.end.202:                                       ; preds = %for.end.197
  %168 = load i8*, i8** %ptr.addr, align 8
  %169 = load i8, i8* %168, align 1
  %idxprom203 = zext i8 %169 to i64
  %170 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %171 = bitcast %struct.encoding* %170 to %struct.normal_encoding*
  %type204 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %171, i32 0, i32 1
  %arrayidx205 = getelementptr [256 x i8], [256 x i8]* %type204, i32 0, i64 %idxprom203
  %172 = load i8, i8* %arrayidx205, align 1
  %conv206 = zext i8 %172 to i32
  switch i32 %conv206, label %sw.default.210 [
    i32 21, label %sw.bb.207
    i32 9, label %sw.bb.207
    i32 10, label %sw.bb.207
    i32 17, label %sw.bb.208
    i32 11, label %sw.bb.209
  ]

sw.bb.207:                                        ; preds = %if.end.202, %if.end.202, %if.end.202
  br label %sw.epilog.211

sw.bb.208:                                        ; preds = %if.end.202
  br label %sol

sw.bb.209:                                        ; preds = %if.end.202
  br label %gt

sw.default.210:                                   ; preds = %if.end.202
  %173 = load i8*, i8** %ptr.addr, align 8
  %174 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %173, i8** %174, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.211:                                    ; preds = %sw.bb.207
  br label %for.cond.212

for.cond.212:                                     ; preds = %sw.bb.267, %sw.epilog.211
  %175 = load i8*, i8** %ptr.addr, align 8
  %add.ptr213 = getelementptr i8, i8* %175, i64 1
  store i8* %add.ptr213, i8** %ptr.addr, align 8
  %176 = load i8*, i8** %ptr.addr, align 8
  %177 = load i8*, i8** %end.addr, align 8
  %cmp214 = icmp eq i8* %176, %177
  br i1 %cmp214, label %if.then.216, label %if.end.217

if.then.216:                                      ; preds = %for.cond.212
  store i32 -1, i32* %retval
  br label %return

if.end.217:                                       ; preds = %for.cond.212
  %178 = load i8*, i8** %ptr.addr, align 8
  %179 = load i8, i8* %178, align 1
  %idxprom218 = zext i8 %179 to i64
  %180 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %181 = bitcast %struct.encoding* %180 to %struct.normal_encoding*
  %type219 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %181, i32 0, i32 1
  %arrayidx220 = getelementptr [256 x i8], [256 x i8]* %type219, i32 0, i64 %idxprom218
  %182 = load i8, i8* %arrayidx220, align 1
  %conv221 = zext i8 %182 to i32
  switch i32 %conv221, label %sw.default.282 [
    i32 29, label %sw.bb.222
    i32 22, label %sw.bb.223
    i32 24, label %sw.bb.223
    i32 5, label %sw.bb.225
    i32 6, label %sw.bb.239
    i32 7, label %sw.bb.253
    i32 21, label %sw.bb.267
    i32 9, label %sw.bb.267
    i32 10, label %sw.bb.267
    i32 11, label %sw.bb.268
    i32 17, label %sw.bb.270
  ]

sw.bb.222:                                        ; preds = %if.end.217
  %183 = load i8*, i8** %ptr.addr, align 8
  %184 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %183, i8** %184, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.223:                                        ; preds = %if.end.217, %if.end.217
  %185 = load i8*, i8** %ptr.addr, align 8
  %add.ptr224 = getelementptr i8, i8* %185, i64 1
  store i8* %add.ptr224, i8** %ptr.addr, align 8
  br label %sw.epilog.283

sw.bb.225:                                        ; preds = %if.end.217
  %186 = load i8*, i8** %end.addr, align 8
  %187 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast226 = ptrtoint i8* %186 to i64
  %sub.ptr.rhs.cast227 = ptrtoint i8* %187 to i64
  %sub.ptr.sub228 = sub i64 %sub.ptr.lhs.cast226, %sub.ptr.rhs.cast227
  %cmp229 = icmp slt i64 %sub.ptr.sub228, 2
  br i1 %cmp229, label %if.then.231, label %if.end.232

if.then.231:                                      ; preds = %sw.bb.225
  store i32 -2, i32* %retval
  br label %return

if.end.232:                                       ; preds = %sw.bb.225
  %188 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %189 = bitcast %struct.encoding* %188 to %struct.normal_encoding*
  %isNmstrt2233 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %189, i32 0, i32 5
  %190 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt2233, align 8
  %191 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %192 = load i8*, i8** %ptr.addr, align 8
  %call234 = call i32 %190(%struct.encoding* %191, i8* %192)
  %tobool235 = icmp ne i32 %call234, 0
  br i1 %tobool235, label %if.end.237, label %if.then.236

if.then.236:                                      ; preds = %if.end.232
  %193 = load i8*, i8** %ptr.addr, align 8
  %194 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %193, i8** %194, align 8
  store i32 0, i32* %retval
  br label %return

if.end.237:                                       ; preds = %if.end.232
  %195 = load i8*, i8** %ptr.addr, align 8
  %add.ptr238 = getelementptr i8, i8* %195, i64 2
  store i8* %add.ptr238, i8** %ptr.addr, align 8
  br label %sw.epilog.283

sw.bb.239:                                        ; preds = %if.end.217
  %196 = load i8*, i8** %end.addr, align 8
  %197 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast240 = ptrtoint i8* %196 to i64
  %sub.ptr.rhs.cast241 = ptrtoint i8* %197 to i64
  %sub.ptr.sub242 = sub i64 %sub.ptr.lhs.cast240, %sub.ptr.rhs.cast241
  %cmp243 = icmp slt i64 %sub.ptr.sub242, 3
  br i1 %cmp243, label %if.then.245, label %if.end.246

if.then.245:                                      ; preds = %sw.bb.239
  store i32 -2, i32* %retval
  br label %return

if.end.246:                                       ; preds = %sw.bb.239
  %198 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %199 = bitcast %struct.encoding* %198 to %struct.normal_encoding*
  %isNmstrt3247 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %199, i32 0, i32 6
  %200 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt3247, align 8
  %201 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %202 = load i8*, i8** %ptr.addr, align 8
  %call248 = call i32 %200(%struct.encoding* %201, i8* %202)
  %tobool249 = icmp ne i32 %call248, 0
  br i1 %tobool249, label %if.end.251, label %if.then.250

if.then.250:                                      ; preds = %if.end.246
  %203 = load i8*, i8** %ptr.addr, align 8
  %204 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %203, i8** %204, align 8
  store i32 0, i32* %retval
  br label %return

if.end.251:                                       ; preds = %if.end.246
  %205 = load i8*, i8** %ptr.addr, align 8
  %add.ptr252 = getelementptr i8, i8* %205, i64 3
  store i8* %add.ptr252, i8** %ptr.addr, align 8
  br label %sw.epilog.283

sw.bb.253:                                        ; preds = %if.end.217
  %206 = load i8*, i8** %end.addr, align 8
  %207 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast254 = ptrtoint i8* %206 to i64
  %sub.ptr.rhs.cast255 = ptrtoint i8* %207 to i64
  %sub.ptr.sub256 = sub i64 %sub.ptr.lhs.cast254, %sub.ptr.rhs.cast255
  %cmp257 = icmp slt i64 %sub.ptr.sub256, 4
  br i1 %cmp257, label %if.then.259, label %if.end.260

if.then.259:                                      ; preds = %sw.bb.253
  store i32 -2, i32* %retval
  br label %return

if.end.260:                                       ; preds = %sw.bb.253
  %208 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %209 = bitcast %struct.encoding* %208 to %struct.normal_encoding*
  %isNmstrt4261 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %209, i32 0, i32 7
  %210 = load i32 (%struct.encoding*, i8*)*, i32 (%struct.encoding*, i8*)** %isNmstrt4261, align 8
  %211 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %212 = load i8*, i8** %ptr.addr, align 8
  %call262 = call i32 %210(%struct.encoding* %211, i8* %212)
  %tobool263 = icmp ne i32 %call262, 0
  br i1 %tobool263, label %if.end.265, label %if.then.264

if.then.264:                                      ; preds = %if.end.260
  %213 = load i8*, i8** %ptr.addr, align 8
  %214 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %213, i8** %214, align 8
  store i32 0, i32* %retval
  br label %return

if.end.265:                                       ; preds = %if.end.260
  %215 = load i8*, i8** %ptr.addr, align 8
  %add.ptr266 = getelementptr i8, i8* %215, i64 4
  store i8* %add.ptr266, i8** %ptr.addr, align 8
  br label %sw.epilog.283

sw.bb.267:                                        ; preds = %if.end.217, %if.end.217, %if.end.217
  br label %for.cond.212

sw.bb.268:                                        ; preds = %if.end.217
  br label %gt

gt:                                               ; preds = %sw.bb.268, %sw.bb.209
  %216 = load i8*, i8** %ptr.addr, align 8
  %add.ptr269 = getelementptr i8, i8* %216, i64 1
  %217 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr269, i8** %217, align 8
  store i32 1, i32* %retval
  br label %return

sw.bb.270:                                        ; preds = %if.end.217
  br label %sol

sol:                                              ; preds = %sw.bb.270, %sw.bb.208
  %218 = load i8*, i8** %ptr.addr, align 8
  %add.ptr271 = getelementptr i8, i8* %218, i64 1
  store i8* %add.ptr271, i8** %ptr.addr, align 8
  %219 = load i8*, i8** %ptr.addr, align 8
  %220 = load i8*, i8** %end.addr, align 8
  %cmp272 = icmp eq i8* %219, %220
  br i1 %cmp272, label %if.then.274, label %if.end.275

if.then.274:                                      ; preds = %sol
  store i32 -1, i32* %retval
  br label %return

if.end.275:                                       ; preds = %sol
  %221 = load i8*, i8** %ptr.addr, align 8
  %222 = load i8, i8* %221, align 1
  %conv276 = sext i8 %222 to i32
  %cmp277 = icmp eq i32 %conv276, 62
  br i1 %cmp277, label %if.end.280, label %if.then.279

if.then.279:                                      ; preds = %if.end.275
  %223 = load i8*, i8** %ptr.addr, align 8
  %224 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %223, i8** %224, align 8
  store i32 0, i32* %retval
  br label %return

if.end.280:                                       ; preds = %if.end.275
  %225 = load i8*, i8** %ptr.addr, align 8
  %add.ptr281 = getelementptr i8, i8* %225, i64 1
  %226 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr281, i8** %226, align 8
  store i32 3, i32* %retval
  br label %return

sw.default.282:                                   ; preds = %if.end.217
  %227 = load i8*, i8** %ptr.addr, align 8
  %228 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %227, i8** %228, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.283:                                    ; preds = %if.end.265, %if.end.251, %if.end.237, %sw.bb.223
  br label %for.end.284

for.end.284:                                      ; preds = %sw.epilog.283
  br label %sw.epilog.286

sw.default.285:                                   ; preds = %while.body
  %229 = load i8*, i8** %ptr.addr, align 8
  %230 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %229, i8** %230, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.286:                                    ; preds = %for.end.284, %sw.epilog, %if.end.32, %if.end.19, %if.end.6, %sw.bb.1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.285, %sw.default.282, %if.end.280, %if.then.279, %if.then.274, %gt, %if.then.264, %if.then.259, %if.then.250, %if.then.245, %if.then.236, %if.then.231, %sw.bb.222, %if.then.216, %sw.default.210, %if.then.201, %sw.bb.193, %if.end.191, %sw.bb.181, %if.then.178, %if.then.174, %if.then.165, %if.then.161, %if.then.152, %if.then.148, %if.then.132, %sw.default.124, %if.then.111, %sw.default.104, %if.then.93, %sw.default, %if.then.86, %if.then.82, %if.then.73, %if.then.69, %if.then.60, %if.then.56, %sw.bb.47, %if.then.41, %if.then.36, %if.then.31, %if.then.27, %if.then.18, %if.then.14, %if.then.5, %if.then, %sw.bb
  %231 = load i32, i32* %retval
  ret i32 %231
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanCharRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end.18

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 120
  br i1 %cmp1, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %5, i64 1
  %6 = load i8*, i8** %end.addr, align 8
  %7 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @normal_scanHexCharRef(%struct.encoding* %4, i8* %add.ptr, i8* %6, i8** %7)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load i8*, i8** %ptr.addr, align 8
  %9 = load i8, i8* %8, align 1
  %idxprom = zext i8 %9 to i64
  %10 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %11 = bitcast %struct.encoding* %10 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %11, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %12 = load i8, i8* %arrayidx, align 1
  %conv4 = zext i8 %12 to i32
  switch i32 %conv4, label %sw.default [
    i32 25, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %13, i8** %14, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr5 = getelementptr i8, i8* %15, i64 1
  store i8* %add.ptr5, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %end.addr, align 8
  %cmp6 = icmp ne i8* %16, %17
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i8*, i8** %ptr.addr, align 8
  %19 = load i8, i8* %18, align 1
  %idxprom8 = zext i8 %19 to i64
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = bitcast %struct.encoding* %20 to %struct.normal_encoding*
  %type9 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %21, i32 0, i32 1
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* %type9, i32 0, i64 %idxprom8
  %22 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %22 to i32
  switch i32 %conv11, label %sw.default.15 [
    i32 25, label %sw.bb.12
    i32 18, label %sw.bb.13
  ]

sw.bb.12:                                         ; preds = %for.body
  br label %sw.epilog.16

sw.bb.13:                                         ; preds = %for.body
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr14 = getelementptr i8, i8* %23, i64 1
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr14, i8** %24, align 8
  store i32 10, i32* %retval
  br label %return

sw.default.15:                                    ; preds = %for.body
  %25 = load i8*, i8** %ptr.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %25, i8** %26, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.16:                                     ; preds = %sw.bb.12
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.16
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %27, i64 1
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.18

if.end.18:                                        ; preds = %for.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.18, %sw.default.15, %sw.bb.13, %sw.default, %if.then.3
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i32 @normal_scanHexCharRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %6 to i32
  switch i32 %conv, label %sw.default [
    i32 25, label %sw.bb
    i32 24, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then, %if.then
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %7, i8** %8, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %9 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %9, i64 1
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %10 = load i8*, i8** %ptr.addr, align 8
  %11 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp ne i8* %10, %11
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %12 = load i8*, i8** %ptr.addr, align 8
  %13 = load i8, i8* %12, align 1
  %idxprom3 = zext i8 %13 to i64
  %14 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %15 = bitcast %struct.encoding* %14 to %struct.normal_encoding*
  %type4 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %15, i32 0, i32 1
  %arrayidx5 = getelementptr [256 x i8], [256 x i8]* %type4, i32 0, i64 %idxprom3
  %16 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %16 to i32
  switch i32 %conv6, label %sw.default.10 [
    i32 25, label %sw.bb.7
    i32 24, label %sw.bb.7
    i32 18, label %sw.bb.8
  ]

sw.bb.7:                                          ; preds = %for.body, %for.body
  br label %sw.epilog.11

sw.bb.8:                                          ; preds = %for.body
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %17, i64 1
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr9, i8** %18, align 8
  store i32 10, i32* %retval
  br label %return

sw.default.10:                                    ; preds = %for.body
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %19, i8** %20, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.11:                                     ; preds = %sw.bb.7
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.11
  %21 = load i8*, i8** %ptr.addr, align 8
  %add.ptr12 = getelementptr i8, i8* %21, i64 1
  store i8* %add.ptr12, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %sw.default.10, %sw.bb.8, %sw.default
  %22 = load i32, i32* %retval
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define internal void @utf8_toUtf8(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i8** %toP, i8* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i8**, align 8
  %toLim.addr = alloca i8*, align 8
  %to = alloca i8*, align 8
  %from = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i8** %toP, i8*** %toP.addr, align 8
  store i8* %toLim, i8** %toLim.addr, align 8
  %0 = load i8*, i8** %fromLim.addr, align 8
  %1 = load i8**, i8*** %fromP.addr, align 8
  %2 = load i8*, i8** %1, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %3 = load i8*, i8** %toLim.addr, align 8
  %4 = load i8**, i8*** %toP.addr, align 8
  %5 = load i8*, i8** %4, align 8
  %sub.ptr.lhs.cast1 = ptrtoint i8* %3 to i64
  %sub.ptr.rhs.cast2 = ptrtoint i8* %5 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2
  %cmp = icmp sgt i64 %sub.ptr.sub, %sub.ptr.sub3
  br i1 %cmp, label %if.then, label %if.end.11

if.then:                                          ; preds = %entry
  %6 = load i8**, i8*** %fromP.addr, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = load i8*, i8** %toLim.addr, align 8
  %9 = load i8**, i8*** %toP.addr, align 8
  %10 = load i8*, i8** %9, align 8
  %sub.ptr.lhs.cast4 = ptrtoint i8* %8 to i64
  %sub.ptr.rhs.cast5 = ptrtoint i8* %10 to i64
  %sub.ptr.sub6 = sub i64 %sub.ptr.lhs.cast4, %sub.ptr.rhs.cast5
  %add.ptr = getelementptr i8, i8* %7, i64 %sub.ptr.sub6
  store i8* %add.ptr, i8** %fromLim.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %11 = load i8*, i8** %fromLim.addr, align 8
  %12 = load i8**, i8*** %fromP.addr, align 8
  %13 = load i8*, i8** %12, align 8
  %cmp7 = icmp ugt i8* %11, %13
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %fromLim.addr, align 8
  %arrayidx = getelementptr i8, i8* %14, i64 -1
  %15 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %15 to i32
  %and = and i32 %conv, 192
  %cmp8 = icmp ne i32 %and, 128
  br i1 %cmp8, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %16 = load i8*, i8** %fromLim.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %16, i32 -1
  store i8* %incdec.ptr, i8** %fromLim.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %if.then.10, %for.cond
  br label %if.end.11

if.end.11:                                        ; preds = %for.end, %entry
  %17 = load i8**, i8*** %toP.addr, align 8
  %18 = load i8*, i8** %17, align 8
  store i8* %18, i8** %to, align 8
  %19 = load i8**, i8*** %fromP.addr, align 8
  %20 = load i8*, i8** %19, align 8
  store i8* %20, i8** %from, align 8
  br label %for.cond.12

for.cond.12:                                      ; preds = %for.inc.16, %if.end.11
  %21 = load i8*, i8** %from, align 8
  %22 = load i8*, i8** %fromLim.addr, align 8
  %cmp13 = icmp ne i8* %21, %22
  br i1 %cmp13, label %for.body.15, label %for.end.19

for.body.15:                                      ; preds = %for.cond.12
  %23 = load i8*, i8** %from, align 8
  %24 = load i8, i8* %23, align 1
  %25 = load i8*, i8** %to, align 8
  store i8 %24, i8* %25, align 1
  br label %for.inc.16

for.inc.16:                                       ; preds = %for.body.15
  %26 = load i8*, i8** %from, align 8
  %incdec.ptr17 = getelementptr i8, i8* %26, i32 1
  store i8* %incdec.ptr17, i8** %from, align 8
  %27 = load i8*, i8** %to, align 8
  %incdec.ptr18 = getelementptr i8, i8* %27, i32 1
  store i8* %incdec.ptr18, i8** %to, align 8
  br label %for.cond.12

for.end.19:                                       ; preds = %for.cond.12
  %28 = load i8*, i8** %from, align 8
  %29 = load i8**, i8*** %fromP.addr, align 8
  store i8* %28, i8** %29, align 8
  %30 = load i8*, i8** %to, align 8
  %31 = load i8**, i8*** %toP.addr, align 8
  store i8* %30, i8** %31, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @utf8_toUtf16(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i16** %toP, i16* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i16**, align 8
  %toLim.addr = alloca i16*, align 8
  %to = alloca i16*, align 8
  %from = alloca i8*, align 8
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i16** %toP, i16*** %toP.addr, align 8
  store i16* %toLim, i16** %toLim.addr, align 8
  %0 = load i16**, i16*** %toP.addr, align 8
  %1 = load i16*, i16** %0, align 8
  store i16* %1, i16** %to, align 8
  %2 = load i8**, i8*** %fromP.addr, align 8
  %3 = load i8*, i8** %2, align 8
  store i8* %3, i8** %from, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %4 = load i8*, i8** %from, align 8
  %5 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp ne i8* %4, %5
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %6 = load i16*, i16** %to, align 8
  %7 = load i16*, i16** %toLim.addr, align 8
  %cmp1 = icmp ne i16* %6, %7
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %8 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %8, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %9 = load i8*, i8** %from, align 8
  %10 = load i8, i8* %9, align 1
  %idxprom = zext i8 %10 to i64
  %11 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %12 = bitcast %struct.encoding* %11 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %12, i32 0, i32 1
  %arrayidx = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %13 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %13 to i32
  switch i32 %conv, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.8
    i32 7, label %sw.bb.25
  ]

sw.bb:                                            ; preds = %while.body
  %14 = load i8*, i8** %from, align 8
  %arrayidx2 = getelementptr i8, i8* %14, i64 0
  %15 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %15 to i32
  %and = and i32 %conv3, 31
  %shl = shl i32 %and, 6
  %16 = load i8*, i8** %from, align 8
  %arrayidx4 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %17 to i32
  %and6 = and i32 %conv5, 63
  %or = or i32 %shl, %and6
  %conv7 = trunc i32 %or to i16
  %18 = load i16*, i16** %to, align 8
  %incdec.ptr = getelementptr i16, i16* %18, i32 1
  store i16* %incdec.ptr, i16** %to, align 8
  store i16 %conv7, i16* %18, align 2
  %19 = load i8*, i8** %from, align 8
  %add.ptr = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr, i8** %from, align 8
  br label %sw.epilog

sw.bb.8:                                          ; preds = %while.body
  %20 = load i8*, i8** %from, align 8
  %arrayidx9 = getelementptr i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %21 to i32
  %and11 = and i32 %conv10, 15
  %shl12 = shl i32 %and11, 12
  %22 = load i8*, i8** %from, align 8
  %arrayidx13 = getelementptr i8, i8* %22, i64 1
  %23 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %23 to i32
  %and15 = and i32 %conv14, 63
  %shl16 = shl i32 %and15, 6
  %or17 = or i32 %shl12, %shl16
  %24 = load i8*, i8** %from, align 8
  %arrayidx18 = getelementptr i8, i8* %24, i64 2
  %25 = load i8, i8* %arrayidx18, align 1
  %conv19 = sext i8 %25 to i32
  %and20 = and i32 %conv19, 63
  %or21 = or i32 %or17, %and20
  %conv22 = trunc i32 %or21 to i16
  %26 = load i16*, i16** %to, align 8
  %incdec.ptr23 = getelementptr i16, i16* %26, i32 1
  store i16* %incdec.ptr23, i16** %to, align 8
  store i16 %conv22, i16* %26, align 2
  %27 = load i8*, i8** %from, align 8
  %add.ptr24 = getelementptr i8, i8* %27, i64 3
  store i8* %add.ptr24, i8** %from, align 8
  br label %sw.epilog

sw.bb.25:                                         ; preds = %while.body
  %28 = load i16*, i16** %to, align 8
  %add.ptr26 = getelementptr i16, i16* %28, i64 1
  %29 = load i16*, i16** %toLim.addr, align 8
  %cmp27 = icmp eq i16* %add.ptr26, %29
  br i1 %cmp27, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.25
  br label %after

if.end:                                           ; preds = %sw.bb.25
  %30 = load i8*, i8** %from, align 8
  %arrayidx29 = getelementptr i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx29, align 1
  %conv30 = sext i8 %31 to i32
  %and31 = and i32 %conv30, 7
  %shl32 = shl i32 %and31, 18
  %32 = load i8*, i8** %from, align 8
  %arrayidx33 = getelementptr i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx33, align 1
  %conv34 = sext i8 %33 to i32
  %and35 = and i32 %conv34, 63
  %shl36 = shl i32 %and35, 12
  %or37 = or i32 %shl32, %shl36
  %34 = load i8*, i8** %from, align 8
  %arrayidx38 = getelementptr i8, i8* %34, i64 2
  %35 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %35 to i32
  %and40 = and i32 %conv39, 63
  %shl41 = shl i32 %and40, 6
  %or42 = or i32 %or37, %shl41
  %36 = load i8*, i8** %from, align 8
  %arrayidx43 = getelementptr i8, i8* %36, i64 3
  %37 = load i8, i8* %arrayidx43, align 1
  %conv44 = sext i8 %37 to i32
  %and45 = and i32 %conv44, 63
  %or46 = or i32 %or42, %and45
  %conv47 = sext i32 %or46 to i64
  store i64 %conv47, i64* %n, align 8
  %38 = load i64, i64* %n, align 8
  %sub = sub i64 %38, 65536
  store i64 %sub, i64* %n, align 8
  %39 = load i64, i64* %n, align 8
  %shr = lshr i64 %39, 10
  %or48 = or i64 %shr, 55296
  %conv49 = trunc i64 %or48 to i16
  %40 = load i16*, i16** %to, align 8
  %arrayidx50 = getelementptr i16, i16* %40, i64 0
  store i16 %conv49, i16* %arrayidx50, align 2
  %41 = load i64, i64* %n, align 8
  %and51 = and i64 %41, 1023
  %or52 = or i64 %and51, 56320
  %conv53 = trunc i64 %or52 to i16
  %42 = load i16*, i16** %to, align 8
  %arrayidx54 = getelementptr i16, i16* %42, i64 1
  store i16 %conv53, i16* %arrayidx54, align 2
  %43 = load i16*, i16** %to, align 8
  %add.ptr55 = getelementptr i16, i16* %43, i64 2
  store i16* %add.ptr55, i16** %to, align 8
  %44 = load i8*, i8** %from, align 8
  %add.ptr56 = getelementptr i8, i8* %44, i64 4
  store i8* %add.ptr56, i8** %from, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %while.body
  %45 = load i8*, i8** %from, align 8
  %incdec.ptr57 = getelementptr i8, i8* %45, i32 1
  store i8* %incdec.ptr57, i8** %from, align 8
  %46 = load i8, i8* %45, align 1
  %conv58 = sext i8 %46 to i16
  %47 = load i16*, i16** %to, align 8
  %incdec.ptr59 = getelementptr i16, i16* %47, i32 1
  store i16* %incdec.ptr59, i16** %to, align 8
  store i16 %conv58, i16* %47, align 2
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb.8, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %land.end
  br label %after

after:                                            ; preds = %while.end, %if.then
  %48 = load i8*, i8** %from, align 8
  %49 = load i8**, i8*** %fromP.addr, align 8
  store i8* %48, i8** %49, align 8
  %50 = load i16*, i16** %to, align 8
  %51 = load i16**, i16*** %toP.addr, align 8
  store i16* %50, i16** %51, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @utf8_isName2(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shr = ashr i32 %conv, 2
  %and = and i32 %shr, 7
  %idxprom = sext i32 %and to i64
  %arrayidx1 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %2 to i32
  %shl = shl i32 %conv2, 3
  %3 = load i8*, i8** %p.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %4 to i32
  %and5 = and i32 %conv4, 3
  %shl6 = shl i32 %and5, 1
  %add = add i32 %shl, %shl6
  %5 = load i8*, i8** %p.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %6 to i32
  %shr9 = ashr i32 %conv8, 5
  %and10 = and i32 %shr9, 1
  %add11 = add i32 %add, %and10
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom12
  %7 = load i32, i32* %arrayidx13, align 4
  %8 = load i8*, i8** %p.addr, align 8
  %arrayidx14 = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %9 to i32
  %and16 = and i32 %conv15, 31
  %shl17 = shl i32 1, %and16
  %and18 = and i32 %7, %shl17
  ret i32 %and18
}

; Function Attrs: nounwind uwtable
define internal i32 @utf8_isName3(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 15
  %shl = shl i32 %and, 4
  %2 = load i8*, i8** %p.addr, align 8
  %arrayidx1 = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %3 to i32
  %shr = ashr i32 %conv2, 2
  %and3 = and i32 %shr, 15
  %add = add i32 %shl, %and3
  %idxprom = sext i32 %add to i64
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %4 to i32
  %shl6 = shl i32 %conv5, 3
  %5 = load i8*, i8** %p.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %6 to i32
  %and9 = and i32 %conv8, 3
  %shl10 = shl i32 %and9, 1
  %add11 = add i32 %shl6, %shl10
  %7 = load i8*, i8** %p.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %7, i64 2
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %shr14 = ashr i32 %conv13, 5
  %and15 = and i32 %shr14, 1
  %add16 = add i32 %add11, %and15
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom17
  %9 = load i32, i32* %arrayidx18, align 4
  %10 = load i8*, i8** %p.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %10, i64 2
  %11 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %11 to i32
  %and21 = and i32 %conv20, 31
  %shl22 = shl i32 1, %and21
  %and23 = and i32 %9, %shl22
  ret i32 %and23
}

; Function Attrs: nounwind uwtable
define internal i32 @isNever(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  ret i32 0
}

; Function Attrs: nounwind uwtable
define internal i32 @utf8_isNmstrt2(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %shr = ashr i32 %conv, 2
  %and = and i32 %shr, 7
  %idxprom = sext i32 %and to i64
  %arrayidx1 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom
  %2 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %2 to i32
  %shl = shl i32 %conv2, 3
  %3 = load i8*, i8** %p.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %4 to i32
  %and5 = and i32 %conv4, 3
  %shl6 = shl i32 %and5, 1
  %add = add i32 %shl, %shl6
  %5 = load i8*, i8** %p.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %6 to i32
  %shr9 = ashr i32 %conv8, 5
  %and10 = and i32 %shr9, 1
  %add11 = add i32 %add, %and10
  %idxprom12 = sext i32 %add11 to i64
  %arrayidx13 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom12
  %7 = load i32, i32* %arrayidx13, align 4
  %8 = load i8*, i8** %p.addr, align 8
  %arrayidx14 = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %9 to i32
  %and16 = and i32 %conv15, 31
  %shl17 = shl i32 1, %and16
  %and18 = and i32 %7, %shl17
  ret i32 %and18
}

; Function Attrs: nounwind uwtable
define internal i32 @utf8_isNmstrt3(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 15
  %shl = shl i32 %and, 4
  %2 = load i8*, i8** %p.addr, align 8
  %arrayidx1 = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx1, align 1
  %conv2 = zext i8 %3 to i32
  %shr = ashr i32 %conv2, 2
  %and3 = and i32 %shr, 15
  %add = add i32 %shl, %and3
  %idxprom = sext i32 %add to i64
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom
  %4 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %4 to i32
  %shl6 = shl i32 %conv5, 3
  %5 = load i8*, i8** %p.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx7, align 1
  %conv8 = zext i8 %6 to i32
  %and9 = and i32 %conv8, 3
  %shl10 = shl i32 %and9, 1
  %add11 = add i32 %shl6, %shl10
  %7 = load i8*, i8** %p.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %7, i64 2
  %8 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %8 to i32
  %shr14 = ashr i32 %conv13, 5
  %and15 = and i32 %shr14, 1
  %add16 = add i32 %add11, %and15
  %idxprom17 = sext i32 %add16 to i64
  %arrayidx18 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom17
  %9 = load i32, i32* %arrayidx18, align 4
  %10 = load i8*, i8** %p.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %10, i64 2
  %11 = load i8, i8* %arrayidx19, align 1
  %conv20 = zext i8 %11 to i32
  %and21 = and i32 %conv20, 31
  %shl22 = shl i32 1, %and21
  %and23 = and i32 %9, %shl22
  ret i32 %and23
}

; Function Attrs: nounwind uwtable
define internal i32 @utf8_isInvalid2(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %1 = load i8, i8* %0, align 1
  %conv = zext i8 %1 to i32
  %cmp = icmp slt i32 %conv, 194
  br i1 %cmp, label %lor.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv2 = zext i8 %3 to i32
  %and = and i32 %conv2, 128
  %cmp3 = icmp eq i32 %and, 0
  br i1 %cmp3, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false
  %4 = load i8*, i8** %p.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %and7 = and i32 %conv6, 192
  %cmp8 = icmp eq i32 %and7, 192
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false, %entry
  %6 = phi i1 [ true, %lor.lhs.false ], [ true, %entry ], [ %cmp8, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32
  ret i32 %lor.ext
}

; Function Attrs: nounwind uwtable
define internal i32 @utf8_isInvalid3(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 2
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %lor.end.58, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %p.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv2 = zext i8 %3 to i32
  %cmp3 = icmp eq i32 %conv2, 239
  br i1 %cmp3, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load i8*, i8** %p.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %5 to i32
  %cmp7 = icmp eq i32 %conv6, 191
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %6 = load i8*, i8** %p.addr, align 8
  %arrayidx9 = getelementptr i8, i8* %6, i64 2
  %7 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %7 to i32
  %cmp11 = icmp sgt i32 %conv10, 189
  br i1 %cmp11, label %lor.end.58, label %lor.rhs

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false
  %8 = load i8*, i8** %p.addr, align 8
  %arrayidx13 = getelementptr i8, i8* %8, i64 2
  %9 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %9 to i32
  %and15 = and i32 %conv14, 192
  %cmp16 = icmp eq i32 %and15, 192
  br i1 %cmp16, label %lor.end.58, label %lor.rhs

lor.rhs:                                          ; preds = %cond.false, %cond.true
  %10 = load i8*, i8** %p.addr, align 8
  %11 = load i8, i8* %10, align 1
  %conv18 = zext i8 %11 to i32
  %cmp19 = icmp eq i32 %conv18, 224
  br i1 %cmp19, label %cond.true.21, label %cond.false.32

cond.true.21:                                     ; preds = %lor.rhs
  %12 = load i8*, i8** %p.addr, align 8
  %arrayidx22 = getelementptr i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %13 to i32
  %cmp24 = icmp slt i32 %conv23, 160
  br i1 %cmp24, label %lor.end, label %lor.rhs.26

lor.rhs.26:                                       ; preds = %cond.true.21
  %14 = load i8*, i8** %p.addr, align 8
  %arrayidx27 = getelementptr i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %15 to i32
  %and29 = and i32 %conv28, 192
  %cmp30 = icmp eq i32 %and29, 192
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs.26, %cond.true.21
  %16 = phi i1 [ true, %cond.true.21 ], [ %cmp30, %lor.rhs.26 ]
  %lor.ext = zext i1 %16 to i32
  br label %cond.end.55

cond.false.32:                                    ; preds = %lor.rhs
  %17 = load i8*, i8** %p.addr, align 8
  %arrayidx33 = getelementptr i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %18 to i32
  %and35 = and i32 %conv34, 128
  %cmp36 = icmp eq i32 %and35, 0
  br i1 %cmp36, label %lor.end.53, label %lor.rhs.38

lor.rhs.38:                                       ; preds = %cond.false.32
  %19 = load i8*, i8** %p.addr, align 8
  %20 = load i8, i8* %19, align 1
  %conv39 = zext i8 %20 to i32
  %cmp40 = icmp eq i32 %conv39, 237
  br i1 %cmp40, label %cond.true.42, label %cond.false.47

cond.true.42:                                     ; preds = %lor.rhs.38
  %21 = load i8*, i8** %p.addr, align 8
  %arrayidx43 = getelementptr i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx43, align 1
  %conv44 = zext i8 %22 to i32
  %cmp45 = icmp sgt i32 %conv44, 159
  %conv46 = zext i1 %cmp45 to i32
  br label %cond.end

cond.false.47:                                    ; preds = %lor.rhs.38
  %23 = load i8*, i8** %p.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %23, i64 1
  %24 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %24 to i32
  %and50 = and i32 %conv49, 192
  %cmp51 = icmp eq i32 %and50, 192
  %conv52 = zext i1 %cmp51 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false.47, %cond.true.42
  %cond = phi i32 [ %conv46, %cond.true.42 ], [ %conv52, %cond.false.47 ]
  %tobool = icmp ne i32 %cond, 0
  br label %lor.end.53

lor.end.53:                                       ; preds = %cond.end, %cond.false.32
  %25 = phi i1 [ true, %cond.false.32 ], [ %tobool, %cond.end ]
  %lor.ext54 = zext i1 %25 to i32
  br label %cond.end.55

cond.end.55:                                      ; preds = %lor.end.53, %lor.end
  %cond56 = phi i32 [ %lor.ext, %lor.end ], [ %lor.ext54, %lor.end.53 ]
  %tobool57 = icmp ne i32 %cond56, 0
  br label %lor.end.58

lor.end.58:                                       ; preds = %cond.end.55, %cond.false, %cond.true, %entry
  %26 = phi i1 [ true, %cond.false ], [ true, %cond.true ], [ true, %entry ], [ %tobool57, %cond.end.55 ]
  %lor.ext59 = zext i1 %26 to i32
  ret i32 %lor.ext59
}

; Function Attrs: nounwind uwtable
define internal i32 @utf8_isInvalid4(%struct.encoding* %enc, i8* %p) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %p.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %p, i8** %p.addr, align 8
  %0 = load i8*, i8** %p.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 3
  %1 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %1 to i32
  %and = and i32 %conv, 128
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %lor.end.57, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %p.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %2, i64 3
  %3 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %3 to i32
  %and4 = and i32 %conv3, 192
  %cmp5 = icmp eq i32 %and4, 192
  br i1 %cmp5, label %lor.end.57, label %lor.lhs.false.7

lor.lhs.false.7:                                  ; preds = %lor.lhs.false
  %4 = load i8*, i8** %p.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %4, i64 2
  %5 = load i8, i8* %arrayidx8, align 1
  %conv9 = zext i8 %5 to i32
  %and10 = and i32 %conv9, 128
  %cmp11 = icmp eq i32 %and10, 0
  br i1 %cmp11, label %lor.end.57, label %lor.lhs.false.13

lor.lhs.false.13:                                 ; preds = %lor.lhs.false.7
  %6 = load i8*, i8** %p.addr, align 8
  %arrayidx14 = getelementptr i8, i8* %6, i64 2
  %7 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %7 to i32
  %and16 = and i32 %conv15, 192
  %cmp17 = icmp eq i32 %and16, 192
  br i1 %cmp17, label %lor.end.57, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false.13
  %8 = load i8*, i8** %p.addr, align 8
  %9 = load i8, i8* %8, align 1
  %conv19 = zext i8 %9 to i32
  %cmp20 = icmp eq i32 %conv19, 240
  br i1 %cmp20, label %cond.true, label %cond.false

cond.true:                                        ; preds = %lor.rhs
  %10 = load i8*, i8** %p.addr, align 8
  %arrayidx22 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx22, align 1
  %conv23 = zext i8 %11 to i32
  %cmp24 = icmp slt i32 %conv23, 144
  br i1 %cmp24, label %lor.end, label %lor.rhs.26

lor.rhs.26:                                       ; preds = %cond.true
  %12 = load i8*, i8** %p.addr, align 8
  %arrayidx27 = getelementptr i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %13 to i32
  %and29 = and i32 %conv28, 192
  %cmp30 = icmp eq i32 %and29, 192
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs.26, %cond.true
  %14 = phi i1 [ true, %cond.true ], [ %cmp30, %lor.rhs.26 ]
  %lor.ext = zext i1 %14 to i32
  br label %cond.end.54

cond.false:                                       ; preds = %lor.rhs
  %15 = load i8*, i8** %p.addr, align 8
  %arrayidx32 = getelementptr i8, i8* %15, i64 1
  %16 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %16 to i32
  %and34 = and i32 %conv33, 128
  %cmp35 = icmp eq i32 %and34, 0
  br i1 %cmp35, label %lor.end.52, label %lor.rhs.37

lor.rhs.37:                                       ; preds = %cond.false
  %17 = load i8*, i8** %p.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv38 = zext i8 %18 to i32
  %cmp39 = icmp eq i32 %conv38, 244
  br i1 %cmp39, label %cond.true.41, label %cond.false.46

cond.true.41:                                     ; preds = %lor.rhs.37
  %19 = load i8*, i8** %p.addr, align 8
  %arrayidx42 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %20 to i32
  %cmp44 = icmp sgt i32 %conv43, 143
  %conv45 = zext i1 %cmp44 to i32
  br label %cond.end

cond.false.46:                                    ; preds = %lor.rhs.37
  %21 = load i8*, i8** %p.addr, align 8
  %arrayidx47 = getelementptr i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx47, align 1
  %conv48 = zext i8 %22 to i32
  %and49 = and i32 %conv48, 192
  %cmp50 = icmp eq i32 %and49, 192
  %conv51 = zext i1 %cmp50 to i32
  br label %cond.end

cond.end:                                         ; preds = %cond.false.46, %cond.true.41
  %cond = phi i32 [ %conv45, %cond.true.41 ], [ %conv51, %cond.false.46 ]
  %tobool = icmp ne i32 %cond, 0
  br label %lor.end.52

lor.end.52:                                       ; preds = %cond.end, %cond.false
  %23 = phi i1 [ true, %cond.false ], [ %tobool, %cond.end ]
  %lor.ext53 = zext i1 %23 to i32
  br label %cond.end.54

cond.end.54:                                      ; preds = %lor.end.52, %lor.end
  %cond55 = phi i32 [ %lor.ext, %lor.end ], [ %lor.ext53, %lor.end.52 ]
  %tobool56 = icmp ne i32 %cond55, 0
  br label %lor.end.57

lor.end.57:                                       ; preds = %cond.end.54, %lor.lhs.false.13, %lor.lhs.false.7, %lor.lhs.false, %entry
  %24 = phi i1 [ true, %lor.lhs.false.13 ], [ true, %lor.lhs.false.7 ], [ true, %lor.lhs.false ], [ true, %entry ], [ %tobool56, %cond.end.54 ]
  %lor.ext58 = zext i1 %24 to i32
  ret i32 %lor.ext58
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_prologTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %tok = alloca i32, align 4
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %4 = load i64, i64* %n, align 8
  %and = and i64 %4, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %5 = load i64, i64* %n, align 8
  %and2 = and i64 %5, -2
  store i64 %and2, i64* %n, align 8
  %6 = load i64, i64* %n, align 8
  %cmp3 = icmp eq i64 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv, 0
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.6
  %11 = load i8*, i8** %ptr.addr, align 8
  %12 = load i8, i8* %11, align 1
  %idxprom = zext i8 %12 to i64
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = bitcast %struct.encoding* %13 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %14, i32 0, i32 1
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.6
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx11, align 1
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx12, align 1
  %call = call i32 @unicode_byte_type(i8 signext %17, i8 signext %19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv10, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default.228 [
    i32 12, label %sw.bb
    i32 13, label %sw.bb.15
    i32 2, label %sw.bb.18
    i32 9, label %sw.bb.47
    i32 21, label %sw.bb.53
    i32 10, label %sw.bb.53
    i32 30, label %sw.bb.82
    i32 35, label %sw.bb.85
    i32 20, label %sw.bb.87
    i32 4, label %sw.bb.89
    i32 31, label %sw.bb.124
    i32 32, label %sw.bb.126
    i32 36, label %sw.bb.155
    i32 11, label %sw.bb.157
    i32 19, label %sw.bb.159
    i32 5, label %sw.bb.162
    i32 6, label %sw.bb.170
    i32 7, label %sw.bb.178
    i32 22, label %sw.bb.186
    i32 24, label %sw.bb.186
    i32 25, label %sw.bb.188
    i32 26, label %sw.bb.188
    i32 27, label %sw.bb.188
    i32 23, label %sw.bb.188
    i32 29, label %sw.bb.190
  ]

sw.bb:                                            ; preds = %cond.end
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %add.ptr13 = getelementptr i8, i8* %21, i64 2
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call14 = call i32 @little2_scanLit(i32 12, %struct.encoding* %20, i8* %add.ptr13, i8* %22, i8** %23)
  store i32 %call14, i32* %retval
  br label %return

sw.bb.15:                                         ; preds = %cond.end
  %24 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %25, i64 2
  %26 = load i8*, i8** %end.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call17 = call i32 @little2_scanLit(i32 13, %struct.encoding* %24, i8* %add.ptr16, i8* %26, i8** %27)
  store i32 %call17, i32* %retval
  br label %return

sw.bb.18:                                         ; preds = %cond.end
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr19 = getelementptr i8, i8* %28, i64 2
  store i8* %add.ptr19, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %end.addr, align 8
  %cmp20 = icmp eq i8* %29, %30
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %sw.bb.18
  store i32 -1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %sw.bb.18
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx24 = getelementptr i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %32 to i32
  %cmp26 = icmp eq i32 %conv25, 0
  br i1 %cmp26, label %cond.true.28, label %cond.false.33

cond.true.28:                                     ; preds = %if.end.23
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i8, i8* %33, align 1
  %idxprom29 = zext i8 %34 to i64
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = bitcast %struct.encoding* %35 to %struct.normal_encoding*
  %type30 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %36, i32 0, i32 1
  %arrayidx31 = getelementptr [256 x i8], [256 x i8]* %type30, i32 0, i64 %idxprom29
  %37 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %37 to i32
  br label %cond.end.37

cond.false.33:                                    ; preds = %if.end.23
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx34 = getelementptr i8, i8* %38, i64 1
  %39 = load i8, i8* %arrayidx34, align 1
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx35 = getelementptr i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx35, align 1
  %call36 = call i32 @unicode_byte_type(i8 signext %39, i8 signext %41)
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.33, %cond.true.28
  %cond38 = phi i32 [ %conv32, %cond.true.28 ], [ %call36, %cond.false.33 ]
  switch i32 %cond38, label %sw.epilog [
    i32 16, label %sw.bb.39
    i32 15, label %sw.bb.42
    i32 22, label %sw.bb.45
    i32 24, label %sw.bb.45
    i32 29, label %sw.bb.45
    i32 5, label %sw.bb.45
    i32 6, label %sw.bb.45
    i32 7, label %sw.bb.45
  ]

sw.bb.39:                                         ; preds = %cond.end.37
  %42 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr40 = getelementptr i8, i8* %43, i64 2
  %44 = load i8*, i8** %end.addr, align 8
  %45 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call41 = call i32 @little2_scanDecl(%struct.encoding* %42, i8* %add.ptr40, i8* %44, i8** %45)
  store i32 %call41, i32* %retval
  br label %return

sw.bb.42:                                         ; preds = %cond.end.37
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr43 = getelementptr i8, i8* %47, i64 2
  %48 = load i8*, i8** %end.addr, align 8
  %49 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call44 = call i32 @little2_scanPi(%struct.encoding* %46, i8* %add.ptr43, i8* %48, i8** %49)
  store i32 %call44, i32* %retval
  br label %return

sw.bb.45:                                         ; preds = %cond.end.37, %cond.end.37, %cond.end.37, %cond.end.37, %cond.end.37, %cond.end.37
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr46 = getelementptr i8, i8* %50, i64 -2
  %51 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr46, i8** %51, align 8
  store i32 29, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %cond.end.37
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %52, i8** %53, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.47:                                         ; preds = %cond.end
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr48 = getelementptr i8, i8* %54, i64 2
  %55 = load i8*, i8** %end.addr, align 8
  %cmp49 = icmp eq i8* %add.ptr48, %55
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %sw.bb.47
  %56 = load i8*, i8** %end.addr, align 8
  %57 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %56, i8** %57, align 8
  store i32 -15, i32* %retval
  br label %return

if.end.52:                                        ; preds = %sw.bb.47
  br label %sw.bb.53

sw.bb.53:                                         ; preds = %cond.end, %cond.end, %if.end.52
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog.81, %sw.bb.53
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr54 = getelementptr i8, i8* %58, i64 2
  store i8* %add.ptr54, i8** %ptr.addr, align 8
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8*, i8** %end.addr, align 8
  %cmp55 = icmp eq i8* %59, %60
  br i1 %cmp55, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %for.cond
  br label %for.end

if.end.58:                                        ; preds = %for.cond
  %61 = load i8*, i8** %ptr.addr, align 8
  %arrayidx59 = getelementptr i8, i8* %61, i64 1
  %62 = load i8, i8* %arrayidx59, align 1
  %conv60 = sext i8 %62 to i32
  %cmp61 = icmp eq i32 %conv60, 0
  br i1 %cmp61, label %cond.true.63, label %cond.false.68

cond.true.63:                                     ; preds = %if.end.58
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8, i8* %63, align 1
  %idxprom64 = zext i8 %64 to i64
  %65 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %66 = bitcast %struct.encoding* %65 to %struct.normal_encoding*
  %type65 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %66, i32 0, i32 1
  %arrayidx66 = getelementptr [256 x i8], [256 x i8]* %type65, i32 0, i64 %idxprom64
  %67 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %67 to i32
  br label %cond.end.72

cond.false.68:                                    ; preds = %if.end.58
  %68 = load i8*, i8** %ptr.addr, align 8
  %arrayidx69 = getelementptr i8, i8* %68, i64 1
  %69 = load i8, i8* %arrayidx69, align 1
  %70 = load i8*, i8** %ptr.addr, align 8
  %arrayidx70 = getelementptr i8, i8* %70, i64 0
  %71 = load i8, i8* %arrayidx70, align 1
  %call71 = call i32 @unicode_byte_type(i8 signext %69, i8 signext %71)
  br label %cond.end.72

cond.end.72:                                      ; preds = %cond.false.68, %cond.true.63
  %cond73 = phi i32 [ %conv67, %cond.true.63 ], [ %call71, %cond.false.68 ]
  switch i32 %cond73, label %sw.default [
    i32 21, label %sw.bb.74
    i32 10, label %sw.bb.74
    i32 9, label %sw.bb.75
  ]

sw.bb.74:                                         ; preds = %cond.end.72, %cond.end.72
  br label %sw.epilog.81

sw.bb.75:                                         ; preds = %cond.end.72
  %72 = load i8*, i8** %ptr.addr, align 8
  %add.ptr76 = getelementptr i8, i8* %72, i64 2
  %73 = load i8*, i8** %end.addr, align 8
  %cmp77 = icmp ne i8* %add.ptr76, %73
  br i1 %cmp77, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %sw.bb.75
  br label %sw.epilog.81

if.end.80:                                        ; preds = %sw.bb.75
  br label %sw.default

sw.default:                                       ; preds = %cond.end.72, %if.end.80
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 15, i32* %retval
  br label %return

sw.epilog.81:                                     ; preds = %if.then.79, %sw.bb.74
  br label %for.cond

for.end:                                          ; preds = %if.then.57
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 15, i32* %retval
  br label %return

sw.bb.82:                                         ; preds = %cond.end
  %78 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %79 = load i8*, i8** %ptr.addr, align 8
  %add.ptr83 = getelementptr i8, i8* %79, i64 2
  %80 = load i8*, i8** %end.addr, align 8
  %81 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call84 = call i32 @little2_scanPercent(%struct.encoding* %78, i8* %add.ptr83, i8* %80, i8** %81)
  store i32 %call84, i32* %retval
  br label %return

sw.bb.85:                                         ; preds = %cond.end
  %82 = load i8*, i8** %ptr.addr, align 8
  %add.ptr86 = getelementptr i8, i8* %82, i64 2
  %83 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr86, i8** %83, align 8
  store i32 38, i32* %retval
  br label %return

sw.bb.87:                                         ; preds = %cond.end
  %84 = load i8*, i8** %ptr.addr, align 8
  %add.ptr88 = getelementptr i8, i8* %84, i64 2
  %85 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr88, i8** %85, align 8
  store i32 25, i32* %retval
  br label %return

sw.bb.89:                                         ; preds = %cond.end
  %86 = load i8*, i8** %ptr.addr, align 8
  %add.ptr90 = getelementptr i8, i8* %86, i64 2
  store i8* %add.ptr90, i8** %ptr.addr, align 8
  %87 = load i8*, i8** %ptr.addr, align 8
  %88 = load i8*, i8** %end.addr, align 8
  %cmp91 = icmp eq i8* %87, %88
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %sw.bb.89
  store i32 -26, i32* %retval
  br label %return

if.end.94:                                        ; preds = %sw.bb.89
  %89 = load i8*, i8** %ptr.addr, align 8
  %arrayidx95 = getelementptr i8, i8* %89, i64 1
  %90 = load i8, i8* %arrayidx95, align 1
  %conv96 = sext i8 %90 to i32
  %cmp97 = icmp eq i32 %conv96, 0
  br i1 %cmp97, label %land.lhs.true, label %if.end.123

land.lhs.true:                                    ; preds = %if.end.94
  %91 = load i8*, i8** %ptr.addr, align 8
  %arrayidx99 = getelementptr i8, i8* %91, i64 0
  %92 = load i8, i8* %arrayidx99, align 1
  %conv100 = sext i8 %92 to i32
  %cmp101 = icmp eq i32 %conv100, 93
  br i1 %cmp101, label %if.then.103, label %if.end.123

if.then.103:                                      ; preds = %land.lhs.true
  %93 = load i8*, i8** %ptr.addr, align 8
  %add.ptr104 = getelementptr i8, i8* %93, i64 2
  %94 = load i8*, i8** %end.addr, align 8
  %cmp105 = icmp eq i8* %add.ptr104, %94
  br i1 %cmp105, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %if.then.103
  store i32 -1, i32* %retval
  br label %return

if.end.108:                                       ; preds = %if.then.103
  %95 = load i8*, i8** %ptr.addr, align 8
  %add.ptr109 = getelementptr i8, i8* %95, i64 2
  %arrayidx110 = getelementptr i8, i8* %add.ptr109, i64 1
  %96 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %96 to i32
  %cmp112 = icmp eq i32 %conv111, 0
  br i1 %cmp112, label %land.lhs.true.114, label %if.end.122

land.lhs.true.114:                                ; preds = %if.end.108
  %97 = load i8*, i8** %ptr.addr, align 8
  %add.ptr115 = getelementptr i8, i8* %97, i64 2
  %arrayidx116 = getelementptr i8, i8* %add.ptr115, i64 0
  %98 = load i8, i8* %arrayidx116, align 1
  %conv117 = sext i8 %98 to i32
  %cmp118 = icmp eq i32 %conv117, 62
  br i1 %cmp118, label %if.then.120, label %if.end.122

if.then.120:                                      ; preds = %land.lhs.true.114
  %99 = load i8*, i8** %ptr.addr, align 8
  %add.ptr121 = getelementptr i8, i8* %99, i64 4
  %100 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr121, i8** %100, align 8
  store i32 34, i32* %retval
  br label %return

if.end.122:                                       ; preds = %land.lhs.true.114, %if.end.108
  br label %if.end.123

if.end.123:                                       ; preds = %if.end.122, %land.lhs.true, %if.end.94
  %101 = load i8*, i8** %ptr.addr, align 8
  %102 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %101, i8** %102, align 8
  store i32 26, i32* %retval
  br label %return

sw.bb.124:                                        ; preds = %cond.end
  %103 = load i8*, i8** %ptr.addr, align 8
  %add.ptr125 = getelementptr i8, i8* %103, i64 2
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr125, i8** %104, align 8
  store i32 23, i32* %retval
  br label %return

sw.bb.126:                                        ; preds = %cond.end
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr127 = getelementptr i8, i8* %105, i64 2
  store i8* %add.ptr127, i8** %ptr.addr, align 8
  %106 = load i8*, i8** %ptr.addr, align 8
  %107 = load i8*, i8** %end.addr, align 8
  %cmp128 = icmp eq i8* %106, %107
  br i1 %cmp128, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %sw.bb.126
  store i32 -24, i32* %retval
  br label %return

if.end.131:                                       ; preds = %sw.bb.126
  %108 = load i8*, i8** %ptr.addr, align 8
  %arrayidx132 = getelementptr i8, i8* %108, i64 1
  %109 = load i8, i8* %arrayidx132, align 1
  %conv133 = sext i8 %109 to i32
  %cmp134 = icmp eq i32 %conv133, 0
  br i1 %cmp134, label %cond.true.136, label %cond.false.141

cond.true.136:                                    ; preds = %if.end.131
  %110 = load i8*, i8** %ptr.addr, align 8
  %111 = load i8, i8* %110, align 1
  %idxprom137 = zext i8 %111 to i64
  %112 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %113 = bitcast %struct.encoding* %112 to %struct.normal_encoding*
  %type138 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %113, i32 0, i32 1
  %arrayidx139 = getelementptr [256 x i8], [256 x i8]* %type138, i32 0, i64 %idxprom137
  %114 = load i8, i8* %arrayidx139, align 1
  %conv140 = zext i8 %114 to i32
  br label %cond.end.145

cond.false.141:                                   ; preds = %if.end.131
  %115 = load i8*, i8** %ptr.addr, align 8
  %arrayidx142 = getelementptr i8, i8* %115, i64 1
  %116 = load i8, i8* %arrayidx142, align 1
  %117 = load i8*, i8** %ptr.addr, align 8
  %arrayidx143 = getelementptr i8, i8* %117, i64 0
  %118 = load i8, i8* %arrayidx143, align 1
  %call144 = call i32 @unicode_byte_type(i8 signext %116, i8 signext %118)
  br label %cond.end.145

cond.end.145:                                     ; preds = %cond.false.141, %cond.true.136
  %cond146 = phi i32 [ %conv140, %cond.true.136 ], [ %call144, %cond.false.141 ]
  switch i32 %cond146, label %sw.epilog.154 [
    i32 33, label %sw.bb.147
    i32 15, label %sw.bb.149
    i32 34, label %sw.bb.151
    i32 9, label %sw.bb.153
    i32 10, label %sw.bb.153
    i32 21, label %sw.bb.153
    i32 11, label %sw.bb.153
    i32 35, label %sw.bb.153
    i32 36, label %sw.bb.153
    i32 32, label %sw.bb.153
  ]

sw.bb.147:                                        ; preds = %cond.end.145
  %119 = load i8*, i8** %ptr.addr, align 8
  %add.ptr148 = getelementptr i8, i8* %119, i64 2
  %120 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr148, i8** %120, align 8
  store i32 36, i32* %retval
  br label %return

sw.bb.149:                                        ; preds = %cond.end.145
  %121 = load i8*, i8** %ptr.addr, align 8
  %add.ptr150 = getelementptr i8, i8* %121, i64 2
  %122 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr150, i8** %122, align 8
  store i32 35, i32* %retval
  br label %return

sw.bb.151:                                        ; preds = %cond.end.145
  %123 = load i8*, i8** %ptr.addr, align 8
  %add.ptr152 = getelementptr i8, i8* %123, i64 2
  %124 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr152, i8** %124, align 8
  store i32 37, i32* %retval
  br label %return

sw.bb.153:                                        ; preds = %cond.end.145, %cond.end.145, %cond.end.145, %cond.end.145, %cond.end.145, %cond.end.145, %cond.end.145
  %125 = load i8*, i8** %ptr.addr, align 8
  %126 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %125, i8** %126, align 8
  store i32 24, i32* %retval
  br label %return

sw.epilog.154:                                    ; preds = %cond.end.145
  %127 = load i8*, i8** %ptr.addr, align 8
  %128 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %127, i8** %128, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.155:                                        ; preds = %cond.end
  %129 = load i8*, i8** %ptr.addr, align 8
  %add.ptr156 = getelementptr i8, i8* %129, i64 2
  %130 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr156, i8** %130, align 8
  store i32 21, i32* %retval
  br label %return

sw.bb.157:                                        ; preds = %cond.end
  %131 = load i8*, i8** %ptr.addr, align 8
  %add.ptr158 = getelementptr i8, i8* %131, i64 2
  %132 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr158, i8** %132, align 8
  store i32 17, i32* %retval
  br label %return

sw.bb.159:                                        ; preds = %cond.end
  %133 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %134 = load i8*, i8** %ptr.addr, align 8
  %add.ptr160 = getelementptr i8, i8* %134, i64 2
  %135 = load i8*, i8** %end.addr, align 8
  %136 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call161 = call i32 @little2_scanPoundName(%struct.encoding* %133, i8* %add.ptr160, i8* %135, i8** %136)
  store i32 %call161, i32* %retval
  br label %return

sw.bb.162:                                        ; preds = %cond.end
  %137 = load i8*, i8** %end.addr, align 8
  %138 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast163 = ptrtoint i8* %137 to i64
  %sub.ptr.rhs.cast164 = ptrtoint i8* %138 to i64
  %sub.ptr.sub165 = sub i64 %sub.ptr.lhs.cast163, %sub.ptr.rhs.cast164
  %cmp166 = icmp slt i64 %sub.ptr.sub165, 2
  br i1 %cmp166, label %if.then.168, label %if.end.169

if.then.168:                                      ; preds = %sw.bb.162
  store i32 -2, i32* %retval
  br label %return

if.end.169:                                       ; preds = %sw.bb.162
  %139 = load i8*, i8** %ptr.addr, align 8
  %140 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %139, i8** %140, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.170:                                        ; preds = %cond.end
  %141 = load i8*, i8** %end.addr, align 8
  %142 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast171 = ptrtoint i8* %141 to i64
  %sub.ptr.rhs.cast172 = ptrtoint i8* %142 to i64
  %sub.ptr.sub173 = sub i64 %sub.ptr.lhs.cast171, %sub.ptr.rhs.cast172
  %cmp174 = icmp slt i64 %sub.ptr.sub173, 3
  br i1 %cmp174, label %if.then.176, label %if.end.177

if.then.176:                                      ; preds = %sw.bb.170
  store i32 -2, i32* %retval
  br label %return

if.end.177:                                       ; preds = %sw.bb.170
  %143 = load i8*, i8** %ptr.addr, align 8
  %144 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %143, i8** %144, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.178:                                        ; preds = %cond.end
  %145 = load i8*, i8** %end.addr, align 8
  %146 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast179 = ptrtoint i8* %145 to i64
  %sub.ptr.rhs.cast180 = ptrtoint i8* %146 to i64
  %sub.ptr.sub181 = sub i64 %sub.ptr.lhs.cast179, %sub.ptr.rhs.cast180
  %cmp182 = icmp slt i64 %sub.ptr.sub181, 4
  br i1 %cmp182, label %if.then.184, label %if.end.185

if.then.184:                                      ; preds = %sw.bb.178
  store i32 -2, i32* %retval
  br label %return

if.end.185:                                       ; preds = %sw.bb.178
  %147 = load i8*, i8** %ptr.addr, align 8
  %148 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %147, i8** %148, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.186:                                        ; preds = %cond.end, %cond.end
  store i32 18, i32* %tok, align 4
  %149 = load i8*, i8** %ptr.addr, align 8
  %add.ptr187 = getelementptr i8, i8* %149, i64 2
  store i8* %add.ptr187, i8** %ptr.addr, align 8
  br label %sw.epilog.229

sw.bb.188:                                        ; preds = %cond.end, %cond.end, %cond.end, %cond.end
  store i32 19, i32* %tok, align 4
  %150 = load i8*, i8** %ptr.addr, align 8
  %add.ptr189 = getelementptr i8, i8* %150, i64 2
  store i8* %add.ptr189, i8** %ptr.addr, align 8
  br label %sw.epilog.229

sw.bb.190:                                        ; preds = %cond.end
  %151 = load i8*, i8** %ptr.addr, align 8
  %arrayidx191 = getelementptr i8, i8* %151, i64 1
  %152 = load i8, i8* %arrayidx191, align 1
  %idxprom192 = zext i8 %152 to i64
  %arrayidx193 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom192
  %153 = load i8, i8* %arrayidx193, align 1
  %conv194 = zext i8 %153 to i32
  %shl = shl i32 %conv194, 3
  %154 = load i8*, i8** %ptr.addr, align 8
  %arrayidx195 = getelementptr i8, i8* %154, i64 0
  %155 = load i8, i8* %arrayidx195, align 1
  %conv196 = zext i8 %155 to i32
  %shr = ashr i32 %conv196, 5
  %add = add i32 %shl, %shr
  %idxprom197 = sext i32 %add to i64
  %arrayidx198 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom197
  %156 = load i32, i32* %arrayidx198, align 4
  %157 = load i8*, i8** %ptr.addr, align 8
  %arrayidx199 = getelementptr i8, i8* %157, i64 0
  %158 = load i8, i8* %arrayidx199, align 1
  %conv200 = zext i8 %158 to i32
  %and201 = and i32 %conv200, 31
  %shl202 = shl i32 1, %and201
  %and203 = and i32 %156, %shl202
  %tobool204 = icmp ne i32 %and203, 0
  br i1 %tobool204, label %if.then.205, label %if.end.207

if.then.205:                                      ; preds = %sw.bb.190
  %159 = load i8*, i8** %ptr.addr, align 8
  %add.ptr206 = getelementptr i8, i8* %159, i64 2
  store i8* %add.ptr206, i8** %ptr.addr, align 8
  store i32 18, i32* %tok, align 4
  br label %sw.epilog.229

if.end.207:                                       ; preds = %sw.bb.190
  %160 = load i8*, i8** %ptr.addr, align 8
  %arrayidx208 = getelementptr i8, i8* %160, i64 1
  %161 = load i8, i8* %arrayidx208, align 1
  %idxprom209 = zext i8 %161 to i64
  %arrayidx210 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom209
  %162 = load i8, i8* %arrayidx210, align 1
  %conv211 = zext i8 %162 to i32
  %shl212 = shl i32 %conv211, 3
  %163 = load i8*, i8** %ptr.addr, align 8
  %arrayidx213 = getelementptr i8, i8* %163, i64 0
  %164 = load i8, i8* %arrayidx213, align 1
  %conv214 = zext i8 %164 to i32
  %shr215 = ashr i32 %conv214, 5
  %add216 = add i32 %shl212, %shr215
  %idxprom217 = sext i32 %add216 to i64
  %arrayidx218 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom217
  %165 = load i32, i32* %arrayidx218, align 4
  %166 = load i8*, i8** %ptr.addr, align 8
  %arrayidx219 = getelementptr i8, i8* %166, i64 0
  %167 = load i8, i8* %arrayidx219, align 1
  %conv220 = zext i8 %167 to i32
  %and221 = and i32 %conv220, 31
  %shl222 = shl i32 1, %and221
  %and223 = and i32 %165, %shl222
  %tobool224 = icmp ne i32 %and223, 0
  br i1 %tobool224, label %if.then.225, label %if.end.227

if.then.225:                                      ; preds = %if.end.207
  %168 = load i8*, i8** %ptr.addr, align 8
  %add.ptr226 = getelementptr i8, i8* %168, i64 2
  store i8* %add.ptr226, i8** %ptr.addr, align 8
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.229

if.end.227:                                       ; preds = %if.end.207
  br label %sw.default.228

sw.default.228:                                   ; preds = %cond.end, %if.end.227
  %169 = load i8*, i8** %ptr.addr, align 8
  %170 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %169, i8** %170, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.229:                                    ; preds = %if.then.225, %if.then.205, %sw.bb.188, %sw.bb.186
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.385, %sw.epilog.229
  %171 = load i8*, i8** %ptr.addr, align 8
  %172 = load i8*, i8** %end.addr, align 8
  %cmp230 = icmp ne i8* %171, %172
  br i1 %cmp230, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %173 = load i8*, i8** %ptr.addr, align 8
  %arrayidx232 = getelementptr i8, i8* %173, i64 1
  %174 = load i8, i8* %arrayidx232, align 1
  %conv233 = sext i8 %174 to i32
  %cmp234 = icmp eq i32 %conv233, 0
  br i1 %cmp234, label %cond.true.236, label %cond.false.241

cond.true.236:                                    ; preds = %while.body
  %175 = load i8*, i8** %ptr.addr, align 8
  %176 = load i8, i8* %175, align 1
  %idxprom237 = zext i8 %176 to i64
  %177 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %178 = bitcast %struct.encoding* %177 to %struct.normal_encoding*
  %type238 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %178, i32 0, i32 1
  %arrayidx239 = getelementptr [256 x i8], [256 x i8]* %type238, i32 0, i64 %idxprom237
  %179 = load i8, i8* %arrayidx239, align 1
  %conv240 = zext i8 %179 to i32
  br label %cond.end.245

cond.false.241:                                   ; preds = %while.body
  %180 = load i8*, i8** %ptr.addr, align 8
  %arrayidx242 = getelementptr i8, i8* %180, i64 1
  %181 = load i8, i8* %arrayidx242, align 1
  %182 = load i8*, i8** %ptr.addr, align 8
  %arrayidx243 = getelementptr i8, i8* %182, i64 0
  %183 = load i8, i8* %arrayidx243, align 1
  %call244 = call i32 @unicode_byte_type(i8 signext %181, i8 signext %183)
  br label %cond.end.245

cond.end.245:                                     ; preds = %cond.false.241, %cond.true.236
  %cond246 = phi i32 [ %conv240, %cond.true.236 ], [ %call244, %cond.false.241 ]
  switch i32 %cond246, label %sw.default.384 [
    i32 29, label %sw.bb.247
    i32 22, label %sw.bb.267
    i32 24, label %sw.bb.267
    i32 25, label %sw.bb.267
    i32 26, label %sw.bb.267
    i32 27, label %sw.bb.267
    i32 5, label %sw.bb.269
    i32 6, label %sw.bb.277
    i32 7, label %sw.bb.285
    i32 11, label %sw.bb.293
    i32 32, label %sw.bb.293
    i32 35, label %sw.bb.293
    i32 36, label %sw.bb.293
    i32 20, label %sw.bb.293
    i32 30, label %sw.bb.293
    i32 21, label %sw.bb.293
    i32 9, label %sw.bb.293
    i32 10, label %sw.bb.293
    i32 23, label %sw.bb.294
    i32 34, label %sw.bb.366
    i32 33, label %sw.bb.372
    i32 15, label %sw.bb.378
  ]

sw.bb.247:                                        ; preds = %cond.end.245
  %184 = load i8*, i8** %ptr.addr, align 8
  %arrayidx248 = getelementptr i8, i8* %184, i64 1
  %185 = load i8, i8* %arrayidx248, align 1
  %idxprom249 = zext i8 %185 to i64
  %arrayidx250 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom249
  %186 = load i8, i8* %arrayidx250, align 1
  %conv251 = zext i8 %186 to i32
  %shl252 = shl i32 %conv251, 3
  %187 = load i8*, i8** %ptr.addr, align 8
  %arrayidx253 = getelementptr i8, i8* %187, i64 0
  %188 = load i8, i8* %arrayidx253, align 1
  %conv254 = zext i8 %188 to i32
  %shr255 = ashr i32 %conv254, 5
  %add256 = add i32 %shl252, %shr255
  %idxprom257 = sext i32 %add256 to i64
  %arrayidx258 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom257
  %189 = load i32, i32* %arrayidx258, align 4
  %190 = load i8*, i8** %ptr.addr, align 8
  %arrayidx259 = getelementptr i8, i8* %190, i64 0
  %191 = load i8, i8* %arrayidx259, align 1
  %conv260 = zext i8 %191 to i32
  %and261 = and i32 %conv260, 31
  %shl262 = shl i32 1, %and261
  %and263 = and i32 %189, %shl262
  %tobool264 = icmp ne i32 %and263, 0
  br i1 %tobool264, label %if.end.266, label %if.then.265

if.then.265:                                      ; preds = %sw.bb.247
  %192 = load i8*, i8** %ptr.addr, align 8
  %193 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %192, i8** %193, align 8
  store i32 0, i32* %retval
  br label %return

if.end.266:                                       ; preds = %sw.bb.247
  br label %sw.bb.267

sw.bb.267:                                        ; preds = %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245, %if.end.266
  %194 = load i8*, i8** %ptr.addr, align 8
  %add.ptr268 = getelementptr i8, i8* %194, i64 2
  store i8* %add.ptr268, i8** %ptr.addr, align 8
  br label %sw.epilog.385

sw.bb.269:                                        ; preds = %cond.end.245
  %195 = load i8*, i8** %end.addr, align 8
  %196 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast270 = ptrtoint i8* %195 to i64
  %sub.ptr.rhs.cast271 = ptrtoint i8* %196 to i64
  %sub.ptr.sub272 = sub i64 %sub.ptr.lhs.cast270, %sub.ptr.rhs.cast271
  %cmp273 = icmp slt i64 %sub.ptr.sub272, 2
  br i1 %cmp273, label %if.then.275, label %if.end.276

if.then.275:                                      ; preds = %sw.bb.269
  store i32 -2, i32* %retval
  br label %return

if.end.276:                                       ; preds = %sw.bb.269
  %197 = load i8*, i8** %ptr.addr, align 8
  %198 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %197, i8** %198, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.277:                                        ; preds = %cond.end.245
  %199 = load i8*, i8** %end.addr, align 8
  %200 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast278 = ptrtoint i8* %199 to i64
  %sub.ptr.rhs.cast279 = ptrtoint i8* %200 to i64
  %sub.ptr.sub280 = sub i64 %sub.ptr.lhs.cast278, %sub.ptr.rhs.cast279
  %cmp281 = icmp slt i64 %sub.ptr.sub280, 3
  br i1 %cmp281, label %if.then.283, label %if.end.284

if.then.283:                                      ; preds = %sw.bb.277
  store i32 -2, i32* %retval
  br label %return

if.end.284:                                       ; preds = %sw.bb.277
  %201 = load i8*, i8** %ptr.addr, align 8
  %202 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %201, i8** %202, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.285:                                        ; preds = %cond.end.245
  %203 = load i8*, i8** %end.addr, align 8
  %204 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast286 = ptrtoint i8* %203 to i64
  %sub.ptr.rhs.cast287 = ptrtoint i8* %204 to i64
  %sub.ptr.sub288 = sub i64 %sub.ptr.lhs.cast286, %sub.ptr.rhs.cast287
  %cmp289 = icmp slt i64 %sub.ptr.sub288, 4
  br i1 %cmp289, label %if.then.291, label %if.end.292

if.then.291:                                      ; preds = %sw.bb.285
  store i32 -2, i32* %retval
  br label %return

if.end.292:                                       ; preds = %sw.bb.285
  %205 = load i8*, i8** %ptr.addr, align 8
  %206 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %205, i8** %206, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.293:                                        ; preds = %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245, %cond.end.245
  %207 = load i8*, i8** %ptr.addr, align 8
  %208 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %207, i8** %208, align 8
  %209 = load i32, i32* %tok, align 4
  store i32 %209, i32* %retval
  br label %return

sw.bb.294:                                        ; preds = %cond.end.245
  %210 = load i8*, i8** %ptr.addr, align 8
  %add.ptr295 = getelementptr i8, i8* %210, i64 2
  store i8* %add.ptr295, i8** %ptr.addr, align 8
  %211 = load i32, i32* %tok, align 4
  switch i32 %211, label %sw.epilog.365 [
    i32 18, label %sw.bb.296
    i32 41, label %sw.bb.364
  ]

sw.bb.296:                                        ; preds = %sw.bb.294
  %212 = load i8*, i8** %ptr.addr, align 8
  %213 = load i8*, i8** %end.addr, align 8
  %cmp297 = icmp eq i8* %212, %213
  br i1 %cmp297, label %if.then.299, label %if.end.300

if.then.299:                                      ; preds = %sw.bb.296
  store i32 -1, i32* %retval
  br label %return

if.end.300:                                       ; preds = %sw.bb.296
  store i32 41, i32* %tok, align 4
  %214 = load i8*, i8** %ptr.addr, align 8
  %arrayidx301 = getelementptr i8, i8* %214, i64 1
  %215 = load i8, i8* %arrayidx301, align 1
  %conv302 = sext i8 %215 to i32
  %cmp303 = icmp eq i32 %conv302, 0
  br i1 %cmp303, label %cond.true.305, label %cond.false.310

cond.true.305:                                    ; preds = %if.end.300
  %216 = load i8*, i8** %ptr.addr, align 8
  %217 = load i8, i8* %216, align 1
  %idxprom306 = zext i8 %217 to i64
  %218 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %219 = bitcast %struct.encoding* %218 to %struct.normal_encoding*
  %type307 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %219, i32 0, i32 1
  %arrayidx308 = getelementptr [256 x i8], [256 x i8]* %type307, i32 0, i64 %idxprom306
  %220 = load i8, i8* %arrayidx308, align 1
  %conv309 = zext i8 %220 to i32
  br label %cond.end.314

cond.false.310:                                   ; preds = %if.end.300
  %221 = load i8*, i8** %ptr.addr, align 8
  %arrayidx311 = getelementptr i8, i8* %221, i64 1
  %222 = load i8, i8* %arrayidx311, align 1
  %223 = load i8*, i8** %ptr.addr, align 8
  %arrayidx312 = getelementptr i8, i8* %223, i64 0
  %224 = load i8, i8* %arrayidx312, align 1
  %call313 = call i32 @unicode_byte_type(i8 signext %222, i8 signext %224)
  br label %cond.end.314

cond.end.314:                                     ; preds = %cond.false.310, %cond.true.305
  %cond315 = phi i32 [ %conv309, %cond.true.305 ], [ %call313, %cond.false.310 ]
  switch i32 %cond315, label %sw.default.362 [
    i32 29, label %sw.bb.316
    i32 22, label %sw.bb.336
    i32 24, label %sw.bb.336
    i32 25, label %sw.bb.336
    i32 26, label %sw.bb.336
    i32 27, label %sw.bb.336
    i32 5, label %sw.bb.338
    i32 6, label %sw.bb.346
    i32 7, label %sw.bb.354
  ]

sw.bb.316:                                        ; preds = %cond.end.314
  %225 = load i8*, i8** %ptr.addr, align 8
  %arrayidx317 = getelementptr i8, i8* %225, i64 1
  %226 = load i8, i8* %arrayidx317, align 1
  %idxprom318 = zext i8 %226 to i64
  %arrayidx319 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom318
  %227 = load i8, i8* %arrayidx319, align 1
  %conv320 = zext i8 %227 to i32
  %shl321 = shl i32 %conv320, 3
  %228 = load i8*, i8** %ptr.addr, align 8
  %arrayidx322 = getelementptr i8, i8* %228, i64 0
  %229 = load i8, i8* %arrayidx322, align 1
  %conv323 = zext i8 %229 to i32
  %shr324 = ashr i32 %conv323, 5
  %add325 = add i32 %shl321, %shr324
  %idxprom326 = sext i32 %add325 to i64
  %arrayidx327 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom326
  %230 = load i32, i32* %arrayidx327, align 4
  %231 = load i8*, i8** %ptr.addr, align 8
  %arrayidx328 = getelementptr i8, i8* %231, i64 0
  %232 = load i8, i8* %arrayidx328, align 1
  %conv329 = zext i8 %232 to i32
  %and330 = and i32 %conv329, 31
  %shl331 = shl i32 1, %and330
  %and332 = and i32 %230, %shl331
  %tobool333 = icmp ne i32 %and332, 0
  br i1 %tobool333, label %if.end.335, label %if.then.334

if.then.334:                                      ; preds = %sw.bb.316
  %233 = load i8*, i8** %ptr.addr, align 8
  %234 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %233, i8** %234, align 8
  store i32 0, i32* %retval
  br label %return

if.end.335:                                       ; preds = %sw.bb.316
  br label %sw.bb.336

sw.bb.336:                                        ; preds = %cond.end.314, %cond.end.314, %cond.end.314, %cond.end.314, %cond.end.314, %if.end.335
  %235 = load i8*, i8** %ptr.addr, align 8
  %add.ptr337 = getelementptr i8, i8* %235, i64 2
  store i8* %add.ptr337, i8** %ptr.addr, align 8
  br label %sw.epilog.363

sw.bb.338:                                        ; preds = %cond.end.314
  %236 = load i8*, i8** %end.addr, align 8
  %237 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast339 = ptrtoint i8* %236 to i64
  %sub.ptr.rhs.cast340 = ptrtoint i8* %237 to i64
  %sub.ptr.sub341 = sub i64 %sub.ptr.lhs.cast339, %sub.ptr.rhs.cast340
  %cmp342 = icmp slt i64 %sub.ptr.sub341, 2
  br i1 %cmp342, label %if.then.344, label %if.end.345

if.then.344:                                      ; preds = %sw.bb.338
  store i32 -2, i32* %retval
  br label %return

if.end.345:                                       ; preds = %sw.bb.338
  %238 = load i8*, i8** %ptr.addr, align 8
  %239 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %238, i8** %239, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.346:                                        ; preds = %cond.end.314
  %240 = load i8*, i8** %end.addr, align 8
  %241 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast347 = ptrtoint i8* %240 to i64
  %sub.ptr.rhs.cast348 = ptrtoint i8* %241 to i64
  %sub.ptr.sub349 = sub i64 %sub.ptr.lhs.cast347, %sub.ptr.rhs.cast348
  %cmp350 = icmp slt i64 %sub.ptr.sub349, 3
  br i1 %cmp350, label %if.then.352, label %if.end.353

if.then.352:                                      ; preds = %sw.bb.346
  store i32 -2, i32* %retval
  br label %return

if.end.353:                                       ; preds = %sw.bb.346
  %242 = load i8*, i8** %ptr.addr, align 8
  %243 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %242, i8** %243, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.354:                                        ; preds = %cond.end.314
  %244 = load i8*, i8** %end.addr, align 8
  %245 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast355 = ptrtoint i8* %244 to i64
  %sub.ptr.rhs.cast356 = ptrtoint i8* %245 to i64
  %sub.ptr.sub357 = sub i64 %sub.ptr.lhs.cast355, %sub.ptr.rhs.cast356
  %cmp358 = icmp slt i64 %sub.ptr.sub357, 4
  br i1 %cmp358, label %if.then.360, label %if.end.361

if.then.360:                                      ; preds = %sw.bb.354
  store i32 -2, i32* %retval
  br label %return

if.end.361:                                       ; preds = %sw.bb.354
  %246 = load i8*, i8** %ptr.addr, align 8
  %247 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %246, i8** %247, align 8
  store i32 0, i32* %retval
  br label %return

sw.default.362:                                   ; preds = %cond.end.314
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.363

sw.epilog.363:                                    ; preds = %sw.default.362, %sw.bb.336
  br label %sw.epilog.365

sw.bb.364:                                        ; preds = %sw.bb.294
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.365

sw.epilog.365:                                    ; preds = %sw.bb.294, %sw.bb.364, %sw.epilog.363
  br label %sw.epilog.385

sw.bb.366:                                        ; preds = %cond.end.245
  %248 = load i32, i32* %tok, align 4
  %cmp367 = icmp eq i32 %248, 19
  br i1 %cmp367, label %if.then.369, label %if.end.370

if.then.369:                                      ; preds = %sw.bb.366
  %249 = load i8*, i8** %ptr.addr, align 8
  %250 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %249, i8** %250, align 8
  store i32 0, i32* %retval
  br label %return

if.end.370:                                       ; preds = %sw.bb.366
  %251 = load i8*, i8** %ptr.addr, align 8
  %add.ptr371 = getelementptr i8, i8* %251, i64 2
  %252 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr371, i8** %252, align 8
  store i32 32, i32* %retval
  br label %return

sw.bb.372:                                        ; preds = %cond.end.245
  %253 = load i32, i32* %tok, align 4
  %cmp373 = icmp eq i32 %253, 19
  br i1 %cmp373, label %if.then.375, label %if.end.376

if.then.375:                                      ; preds = %sw.bb.372
  %254 = load i8*, i8** %ptr.addr, align 8
  %255 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %254, i8** %255, align 8
  store i32 0, i32* %retval
  br label %return

if.end.376:                                       ; preds = %sw.bb.372
  %256 = load i8*, i8** %ptr.addr, align 8
  %add.ptr377 = getelementptr i8, i8* %256, i64 2
  %257 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr377, i8** %257, align 8
  store i32 31, i32* %retval
  br label %return

sw.bb.378:                                        ; preds = %cond.end.245
  %258 = load i32, i32* %tok, align 4
  %cmp379 = icmp eq i32 %258, 19
  br i1 %cmp379, label %if.then.381, label %if.end.382

if.then.381:                                      ; preds = %sw.bb.378
  %259 = load i8*, i8** %ptr.addr, align 8
  %260 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %259, i8** %260, align 8
  store i32 0, i32* %retval
  br label %return

if.end.382:                                       ; preds = %sw.bb.378
  %261 = load i8*, i8** %ptr.addr, align 8
  %add.ptr383 = getelementptr i8, i8* %261, i64 2
  %262 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr383, i8** %262, align 8
  store i32 30, i32* %retval
  br label %return

sw.default.384:                                   ; preds = %cond.end.245
  %263 = load i8*, i8** %ptr.addr, align 8
  %264 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %263, i8** %264, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.385:                                    ; preds = %sw.epilog.365, %sw.bb.267
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %265 = load i32, i32* %tok, align 4
  %sub = sub i32 0, %265
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.384, %if.end.382, %if.then.381, %if.end.376, %if.then.375, %if.end.370, %if.then.369, %if.end.361, %if.then.360, %if.end.353, %if.then.352, %if.end.345, %if.then.344, %if.then.334, %if.then.299, %sw.bb.293, %if.end.292, %if.then.291, %if.end.284, %if.then.283, %if.end.276, %if.then.275, %if.then.265, %sw.default.228, %if.end.185, %if.then.184, %if.end.177, %if.then.176, %if.end.169, %if.then.168, %sw.bb.159, %sw.bb.157, %sw.bb.155, %sw.epilog.154, %sw.bb.153, %sw.bb.151, %sw.bb.149, %sw.bb.147, %if.then.130, %sw.bb.124, %if.end.123, %if.then.120, %if.then.107, %if.then.93, %sw.bb.87, %sw.bb.85, %sw.bb.82, %for.end, %sw.default, %if.then.51, %sw.epilog, %sw.bb.45, %sw.bb.42, %sw.bb.39, %if.then.22, %sw.bb.15, %sw.bb, %if.then.4, %if.then
  %266 = load i32, i32* %retval
  ret i32 %266
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_contentTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %4 = load i64, i64* %n, align 8
  %and = and i64 %4, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %5 = load i64, i64* %n, align 8
  %and2 = and i64 %5, -2
  store i64 %and2, i64* %n, align 8
  %6 = load i64, i64* %n, align 8
  %cmp3 = icmp eq i64 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv, 0
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.6
  %11 = load i8*, i8** %ptr.addr, align 8
  %12 = load i8, i8* %11, align 1
  %idxprom = zext i8 %12 to i64
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = bitcast %struct.encoding* %13 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %14, i32 0, i32 1
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.6
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx11, align 1
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx12, align 1
  %call = call i32 @unicode_byte_type(i8 signext %17, i8 signext %19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv10, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.15
    i32 9, label %sw.bb.18
    i32 10, label %sw.bb.44
    i32 4, label %sw.bb.46
    i32 5, label %sw.bb.79
    i32 6, label %sw.bb.88
    i32 7, label %sw.bb.97
    i32 0, label %sw.bb.106
    i32 1, label %sw.bb.106
    i32 8, label %sw.bb.106
  ]

sw.bb:                                            ; preds = %cond.end
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %add.ptr13 = getelementptr i8, i8* %21, i64 2
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call14 = call i32 @little2_scanLt(%struct.encoding* %20, i8* %add.ptr13, i8* %22, i8** %23)
  store i32 %call14, i32* %retval
  br label %return

sw.bb.15:                                         ; preds = %cond.end
  %24 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %25, i64 2
  %26 = load i8*, i8** %end.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call17 = call i32 @little2_scanRef(%struct.encoding* %24, i8* %add.ptr16, i8* %26, i8** %27)
  store i32 %call17, i32* %retval
  br label %return

sw.bb.18:                                         ; preds = %cond.end
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr19 = getelementptr i8, i8* %28, i64 2
  store i8* %add.ptr19, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %end.addr, align 8
  %cmp20 = icmp eq i8* %29, %30
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %sw.bb.18
  store i32 -3, i32* %retval
  br label %return

if.end.23:                                        ; preds = %sw.bb.18
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx24 = getelementptr i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %32 to i32
  %cmp26 = icmp eq i32 %conv25, 0
  br i1 %cmp26, label %cond.true.28, label %cond.false.33

cond.true.28:                                     ; preds = %if.end.23
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i8, i8* %33, align 1
  %idxprom29 = zext i8 %34 to i64
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = bitcast %struct.encoding* %35 to %struct.normal_encoding*
  %type30 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %36, i32 0, i32 1
  %arrayidx31 = getelementptr [256 x i8], [256 x i8]* %type30, i32 0, i64 %idxprom29
  %37 = load i8, i8* %arrayidx31, align 1
  %conv32 = zext i8 %37 to i32
  br label %cond.end.37

cond.false.33:                                    ; preds = %if.end.23
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx34 = getelementptr i8, i8* %38, i64 1
  %39 = load i8, i8* %arrayidx34, align 1
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx35 = getelementptr i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx35, align 1
  %call36 = call i32 @unicode_byte_type(i8 signext %39, i8 signext %41)
  br label %cond.end.37

cond.end.37:                                      ; preds = %cond.false.33, %cond.true.28
  %cond38 = phi i32 [ %conv32, %cond.true.28 ], [ %call36, %cond.false.33 ]
  %cmp39 = icmp eq i32 %cond38, 10
  br i1 %cmp39, label %if.then.41, label %if.end.43

if.then.41:                                       ; preds = %cond.end.37
  %42 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %42, i64 2
  store i8* %add.ptr42, i8** %ptr.addr, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.41, %cond.end.37
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %43, i8** %44, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %cond.end
  %45 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %45, i64 2
  %46 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr45, i8** %46, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.46:                                         ; preds = %cond.end
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr47 = getelementptr i8, i8* %47, i64 2
  store i8* %add.ptr47, i8** %ptr.addr, align 8
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8*, i8** %end.addr, align 8
  %cmp48 = icmp eq i8* %48, %49
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %sw.bb.46
  store i32 -5, i32* %retval
  br label %return

if.end.51:                                        ; preds = %sw.bb.46
  %50 = load i8*, i8** %ptr.addr, align 8
  %arrayidx52 = getelementptr i8, i8* %50, i64 1
  %51 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %51 to i32
  %cmp54 = icmp eq i32 %conv53, 0
  br i1 %cmp54, label %land.lhs.true, label %if.then.60

land.lhs.true:                                    ; preds = %if.end.51
  %52 = load i8*, i8** %ptr.addr, align 8
  %arrayidx56 = getelementptr i8, i8* %52, i64 0
  %53 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %53 to i32
  %cmp58 = icmp eq i32 %conv57, 93
  br i1 %cmp58, label %if.end.61, label %if.then.60

if.then.60:                                       ; preds = %land.lhs.true, %if.end.51
  br label %sw.epilog

if.end.61:                                        ; preds = %land.lhs.true
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr62 = getelementptr i8, i8* %54, i64 2
  store i8* %add.ptr62, i8** %ptr.addr, align 8
  %55 = load i8*, i8** %ptr.addr, align 8
  %56 = load i8*, i8** %end.addr, align 8
  %cmp63 = icmp eq i8* %55, %56
  br i1 %cmp63, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %if.end.61
  store i32 -5, i32* %retval
  br label %return

if.end.66:                                        ; preds = %if.end.61
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx67 = getelementptr i8, i8* %57, i64 1
  %58 = load i8, i8* %arrayidx67, align 1
  %conv68 = sext i8 %58 to i32
  %cmp69 = icmp eq i32 %conv68, 0
  br i1 %cmp69, label %land.lhs.true.71, label %if.then.76

land.lhs.true.71:                                 ; preds = %if.end.66
  %59 = load i8*, i8** %ptr.addr, align 8
  %arrayidx72 = getelementptr i8, i8* %59, i64 0
  %60 = load i8, i8* %arrayidx72, align 1
  %conv73 = sext i8 %60 to i32
  %cmp74 = icmp eq i32 %conv73, 62
  br i1 %cmp74, label %if.end.78, label %if.then.76

if.then.76:                                       ; preds = %land.lhs.true.71, %if.end.66
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr77 = getelementptr i8, i8* %61, i64 -2
  store i8* %add.ptr77, i8** %ptr.addr, align 8
  br label %sw.epilog

if.end.78:                                        ; preds = %land.lhs.true.71
  %62 = load i8*, i8** %ptr.addr, align 8
  %63 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %62, i8** %63, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.79:                                         ; preds = %cond.end
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast80 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast81 = ptrtoint i8* %65 to i64
  %sub.ptr.sub82 = sub i64 %sub.ptr.lhs.cast80, %sub.ptr.rhs.cast81
  %cmp83 = icmp slt i64 %sub.ptr.sub82, 2
  br i1 %cmp83, label %if.then.85, label %if.end.86

if.then.85:                                       ; preds = %sw.bb.79
  store i32 -2, i32* %retval
  br label %return

if.end.86:                                        ; preds = %sw.bb.79
  %66 = load i8*, i8** %ptr.addr, align 8
  %add.ptr87 = getelementptr i8, i8* %66, i64 2
  store i8* %add.ptr87, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.88:                                         ; preds = %cond.end
  %67 = load i8*, i8** %end.addr, align 8
  %68 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast89 = ptrtoint i8* %67 to i64
  %sub.ptr.rhs.cast90 = ptrtoint i8* %68 to i64
  %sub.ptr.sub91 = sub i64 %sub.ptr.lhs.cast89, %sub.ptr.rhs.cast90
  %cmp92 = icmp slt i64 %sub.ptr.sub91, 3
  br i1 %cmp92, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %sw.bb.88
  store i32 -2, i32* %retval
  br label %return

if.end.95:                                        ; preds = %sw.bb.88
  %69 = load i8*, i8** %ptr.addr, align 8
  %add.ptr96 = getelementptr i8, i8* %69, i64 3
  store i8* %add.ptr96, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.97:                                         ; preds = %cond.end
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast98 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast99 = ptrtoint i8* %71 to i64
  %sub.ptr.sub100 = sub i64 %sub.ptr.lhs.cast98, %sub.ptr.rhs.cast99
  %cmp101 = icmp slt i64 %sub.ptr.sub100, 4
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %sw.bb.97
  store i32 -2, i32* %retval
  br label %return

if.end.104:                                       ; preds = %sw.bb.97
  %72 = load i8*, i8** %ptr.addr, align 8
  %add.ptr105 = getelementptr i8, i8* %72, i64 4
  store i8* %add.ptr105, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.106:                                        ; preds = %cond.end, %cond.end, %cond.end
  %73 = load i8*, i8** %ptr.addr, align 8
  %74 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %73, i8** %74, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %75 = load i8*, i8** %ptr.addr, align 8
  %add.ptr107 = getelementptr i8, i8* %75, i64 2
  store i8* %add.ptr107, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.104, %if.end.95, %if.end.86, %if.then.76, %if.then.60
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.195, %sw.epilog
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8*, i8** %end.addr, align 8
  %cmp108 = icmp ne i8* %76, %77
  br i1 %cmp108, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %78 = load i8*, i8** %ptr.addr, align 8
  %arrayidx110 = getelementptr i8, i8* %78, i64 1
  %79 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %79 to i32
  %cmp112 = icmp eq i32 %conv111, 0
  br i1 %cmp112, label %cond.true.114, label %cond.false.119

cond.true.114:                                    ; preds = %while.body
  %80 = load i8*, i8** %ptr.addr, align 8
  %81 = load i8, i8* %80, align 1
  %idxprom115 = zext i8 %81 to i64
  %82 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %83 = bitcast %struct.encoding* %82 to %struct.normal_encoding*
  %type116 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %83, i32 0, i32 1
  %arrayidx117 = getelementptr [256 x i8], [256 x i8]* %type116, i32 0, i64 %idxprom115
  %84 = load i8, i8* %arrayidx117, align 1
  %conv118 = zext i8 %84 to i32
  br label %cond.end.123

cond.false.119:                                   ; preds = %while.body
  %85 = load i8*, i8** %ptr.addr, align 8
  %arrayidx120 = getelementptr i8, i8* %85, i64 1
  %86 = load i8, i8* %arrayidx120, align 1
  %87 = load i8*, i8** %ptr.addr, align 8
  %arrayidx121 = getelementptr i8, i8* %87, i64 0
  %88 = load i8, i8* %arrayidx121, align 1
  %call122 = call i32 @unicode_byte_type(i8 signext %86, i8 signext %88)
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.false.119, %cond.true.114
  %cond124 = phi i32 [ %conv118, %cond.true.114 ], [ %call122, %cond.false.119 ]
  switch i32 %cond124, label %sw.default.193 [
    i32 5, label %sw.bb.125
    i32 6, label %sw.bb.134
    i32 7, label %sw.bb.143
    i32 4, label %sw.bb.152
    i32 3, label %sw.bb.192
    i32 2, label %sw.bb.192
    i32 0, label %sw.bb.192
    i32 1, label %sw.bb.192
    i32 8, label %sw.bb.192
    i32 9, label %sw.bb.192
    i32 10, label %sw.bb.192
  ]

sw.bb.125:                                        ; preds = %cond.end.123
  %89 = load i8*, i8** %end.addr, align 8
  %90 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast126 = ptrtoint i8* %89 to i64
  %sub.ptr.rhs.cast127 = ptrtoint i8* %90 to i64
  %sub.ptr.sub128 = sub i64 %sub.ptr.lhs.cast126, %sub.ptr.rhs.cast127
  %cmp129 = icmp slt i64 %sub.ptr.sub128, 2
  br i1 %cmp129, label %if.then.131, label %if.end.132

if.then.131:                                      ; preds = %sw.bb.125
  %91 = load i8*, i8** %ptr.addr, align 8
  %92 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %91, i8** %92, align 8
  store i32 6, i32* %retval
  br label %return

if.end.132:                                       ; preds = %sw.bb.125
  %93 = load i8*, i8** %ptr.addr, align 8
  %add.ptr133 = getelementptr i8, i8* %93, i64 2
  store i8* %add.ptr133, i8** %ptr.addr, align 8
  br label %sw.epilog.195

sw.bb.134:                                        ; preds = %cond.end.123
  %94 = load i8*, i8** %end.addr, align 8
  %95 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast135 = ptrtoint i8* %94 to i64
  %sub.ptr.rhs.cast136 = ptrtoint i8* %95 to i64
  %sub.ptr.sub137 = sub i64 %sub.ptr.lhs.cast135, %sub.ptr.rhs.cast136
  %cmp138 = icmp slt i64 %sub.ptr.sub137, 3
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %sw.bb.134
  %96 = load i8*, i8** %ptr.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %96, i8** %97, align 8
  store i32 6, i32* %retval
  br label %return

if.end.141:                                       ; preds = %sw.bb.134
  %98 = load i8*, i8** %ptr.addr, align 8
  %add.ptr142 = getelementptr i8, i8* %98, i64 3
  store i8* %add.ptr142, i8** %ptr.addr, align 8
  br label %sw.epilog.195

sw.bb.143:                                        ; preds = %cond.end.123
  %99 = load i8*, i8** %end.addr, align 8
  %100 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast144 = ptrtoint i8* %99 to i64
  %sub.ptr.rhs.cast145 = ptrtoint i8* %100 to i64
  %sub.ptr.sub146 = sub i64 %sub.ptr.lhs.cast144, %sub.ptr.rhs.cast145
  %cmp147 = icmp slt i64 %sub.ptr.sub146, 4
  br i1 %cmp147, label %if.then.149, label %if.end.150

if.then.149:                                      ; preds = %sw.bb.143
  %101 = load i8*, i8** %ptr.addr, align 8
  %102 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %101, i8** %102, align 8
  store i32 6, i32* %retval
  br label %return

if.end.150:                                       ; preds = %sw.bb.143
  %103 = load i8*, i8** %ptr.addr, align 8
  %add.ptr151 = getelementptr i8, i8* %103, i64 4
  store i8* %add.ptr151, i8** %ptr.addr, align 8
  br label %sw.epilog.195

sw.bb.152:                                        ; preds = %cond.end.123
  %104 = load i8*, i8** %ptr.addr, align 8
  %add.ptr153 = getelementptr i8, i8* %104, i64 2
  %105 = load i8*, i8** %end.addr, align 8
  %cmp154 = icmp ne i8* %add.ptr153, %105
  br i1 %cmp154, label %if.then.156, label %if.end.191

if.then.156:                                      ; preds = %sw.bb.152
  %106 = load i8*, i8** %ptr.addr, align 8
  %add.ptr157 = getelementptr i8, i8* %106, i64 2
  %arrayidx158 = getelementptr i8, i8* %add.ptr157, i64 1
  %107 = load i8, i8* %arrayidx158, align 1
  %conv159 = sext i8 %107 to i32
  %cmp160 = icmp eq i32 %conv159, 0
  br i1 %cmp160, label %land.lhs.true.162, label %if.then.168

land.lhs.true.162:                                ; preds = %if.then.156
  %108 = load i8*, i8** %ptr.addr, align 8
  %add.ptr163 = getelementptr i8, i8* %108, i64 2
  %arrayidx164 = getelementptr i8, i8* %add.ptr163, i64 0
  %109 = load i8, i8* %arrayidx164, align 1
  %conv165 = sext i8 %109 to i32
  %cmp166 = icmp eq i32 %conv165, 93
  br i1 %cmp166, label %if.end.170, label %if.then.168

if.then.168:                                      ; preds = %land.lhs.true.162, %if.then.156
  %110 = load i8*, i8** %ptr.addr, align 8
  %add.ptr169 = getelementptr i8, i8* %110, i64 2
  store i8* %add.ptr169, i8** %ptr.addr, align 8
  br label %sw.epilog.195

if.end.170:                                       ; preds = %land.lhs.true.162
  %111 = load i8*, i8** %ptr.addr, align 8
  %add.ptr171 = getelementptr i8, i8* %111, i64 4
  %112 = load i8*, i8** %end.addr, align 8
  %cmp172 = icmp ne i8* %add.ptr171, %112
  br i1 %cmp172, label %if.then.174, label %if.end.190

if.then.174:                                      ; preds = %if.end.170
  %113 = load i8*, i8** %ptr.addr, align 8
  %add.ptr175 = getelementptr i8, i8* %113, i64 4
  %arrayidx176 = getelementptr i8, i8* %add.ptr175, i64 1
  %114 = load i8, i8* %arrayidx176, align 1
  %conv177 = sext i8 %114 to i32
  %cmp178 = icmp eq i32 %conv177, 0
  br i1 %cmp178, label %land.lhs.true.180, label %if.then.186

land.lhs.true.180:                                ; preds = %if.then.174
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr181 = getelementptr i8, i8* %115, i64 4
  %arrayidx182 = getelementptr i8, i8* %add.ptr181, i64 0
  %116 = load i8, i8* %arrayidx182, align 1
  %conv183 = sext i8 %116 to i32
  %cmp184 = icmp eq i32 %conv183, 62
  br i1 %cmp184, label %if.end.188, label %if.then.186

if.then.186:                                      ; preds = %land.lhs.true.180, %if.then.174
  %117 = load i8*, i8** %ptr.addr, align 8
  %add.ptr187 = getelementptr i8, i8* %117, i64 2
  store i8* %add.ptr187, i8** %ptr.addr, align 8
  br label %sw.epilog.195

if.end.188:                                       ; preds = %land.lhs.true.180
  %118 = load i8*, i8** %ptr.addr, align 8
  %add.ptr189 = getelementptr i8, i8* %118, i64 4
  %119 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr189, i8** %119, align 8
  store i32 0, i32* %retval
  br label %return

if.end.190:                                       ; preds = %if.end.170
  br label %if.end.191

if.end.191:                                       ; preds = %if.end.190, %sw.bb.152
  br label %sw.bb.192

sw.bb.192:                                        ; preds = %cond.end.123, %cond.end.123, %cond.end.123, %cond.end.123, %cond.end.123, %cond.end.123, %cond.end.123, %if.end.191
  %120 = load i8*, i8** %ptr.addr, align 8
  %121 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %120, i8** %121, align 8
  store i32 6, i32* %retval
  br label %return

sw.default.193:                                   ; preds = %cond.end.123
  %122 = load i8*, i8** %ptr.addr, align 8
  %add.ptr194 = getelementptr i8, i8* %122, i64 2
  store i8* %add.ptr194, i8** %ptr.addr, align 8
  br label %sw.epilog.195

sw.epilog.195:                                    ; preds = %sw.default.193, %if.then.186, %if.then.168, %if.end.150, %if.end.141, %if.end.132
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %123 = load i8*, i8** %ptr.addr, align 8
  %124 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %123, i8** %124, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.bb.192, %if.end.188, %if.then.149, %if.then.140, %if.then.131, %sw.bb.106, %if.then.103, %if.then.94, %if.then.85, %if.end.78, %if.then.65, %if.then.50, %sw.bb.44, %if.end.43, %if.then.22, %sw.bb.15, %sw.bb, %if.then.4, %if.then
  %125 = load i32, i32* %retval
  ret i32 %125
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_cdataSectionTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %4 = load i64, i64* %n, align 8
  %and = and i64 %4, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %5 = load i64, i64* %n, align 8
  %and2 = and i64 %5, -2
  store i64 %and2, i64* %n, align 8
  %6 = load i64, i64* %n, align 8
  %cmp3 = icmp eq i64 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv, 0
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.6
  %11 = load i8*, i8** %ptr.addr, align 8
  %12 = load i8, i8* %11, align 1
  %idxprom = zext i8 %12 to i64
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = bitcast %struct.encoding* %13 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %14, i32 0, i32 1
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.6
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx11, align 1
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx12, align 1
  %call = call i32 @unicode_byte_type(i8 signext %17, i8 signext %19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv10, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 4, label %sw.bb
    i32 9, label %sw.bb.46
    i32 10, label %sw.bb.72
    i32 5, label %sw.bb.74
    i32 6, label %sw.bb.83
    i32 7, label %sw.bb.92
    i32 0, label %sw.bb.101
    i32 1, label %sw.bb.101
    i32 8, label %sw.bb.101
  ]

sw.bb:                                            ; preds = %cond.end
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr13 = getelementptr i8, i8* %20, i64 2
  store i8* %add.ptr13, i8** %ptr.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8*, i8** %end.addr, align 8
  %cmp14 = icmp eq i8* %21, %22
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb
  %23 = load i8*, i8** %ptr.addr, align 8
  %arrayidx18 = getelementptr i8, i8* %23, i64 1
  %24 = load i8, i8* %arrayidx18, align 1
  %conv19 = sext i8 %24 to i32
  %cmp20 = icmp eq i32 %conv19, 0
  br i1 %cmp20, label %land.lhs.true, label %if.then.26

land.lhs.true:                                    ; preds = %if.end.17
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx22 = getelementptr i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %26 to i32
  %cmp24 = icmp eq i32 %conv23, 93
  br i1 %cmp24, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %land.lhs.true, %if.end.17
  br label %sw.epilog

if.end.27:                                        ; preds = %land.lhs.true
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr28 = getelementptr i8, i8* %27, i64 2
  store i8* %add.ptr28, i8** %ptr.addr, align 8
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %end.addr, align 8
  %cmp29 = icmp eq i8* %28, %29
  br i1 %cmp29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.27
  store i32 -1, i32* %retval
  br label %return

if.end.32:                                        ; preds = %if.end.27
  %30 = load i8*, i8** %ptr.addr, align 8
  %arrayidx33 = getelementptr i8, i8* %30, i64 1
  %31 = load i8, i8* %arrayidx33, align 1
  %conv34 = sext i8 %31 to i32
  %cmp35 = icmp eq i32 %conv34, 0
  br i1 %cmp35, label %land.lhs.true.37, label %if.then.42

land.lhs.true.37:                                 ; preds = %if.end.32
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx38 = getelementptr i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %33 to i32
  %cmp40 = icmp eq i32 %conv39, 62
  br i1 %cmp40, label %if.end.44, label %if.then.42

if.then.42:                                       ; preds = %land.lhs.true.37, %if.end.32
  %34 = load i8*, i8** %ptr.addr, align 8
  %add.ptr43 = getelementptr i8, i8* %34, i64 -2
  store i8* %add.ptr43, i8** %ptr.addr, align 8
  br label %sw.epilog

if.end.44:                                        ; preds = %land.lhs.true.37
  %35 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %35, i64 2
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr45, i8** %36, align 8
  store i32 40, i32* %retval
  br label %return

sw.bb.46:                                         ; preds = %cond.end
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr47 = getelementptr i8, i8* %37, i64 2
  store i8* %add.ptr47, i8** %ptr.addr, align 8
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp48 = icmp eq i8* %38, %39
  br i1 %cmp48, label %if.then.50, label %if.end.51

if.then.50:                                       ; preds = %sw.bb.46
  store i32 -1, i32* %retval
  br label %return

if.end.51:                                        ; preds = %sw.bb.46
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx52 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %41 to i32
  %cmp54 = icmp eq i32 %conv53, 0
  br i1 %cmp54, label %cond.true.56, label %cond.false.61

cond.true.56:                                     ; preds = %if.end.51
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom57 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type58 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx59 = getelementptr [256 x i8], [256 x i8]* %type58, i32 0, i64 %idxprom57
  %46 = load i8, i8* %arrayidx59, align 1
  %conv60 = zext i8 %46 to i32
  br label %cond.end.65

cond.false.61:                                    ; preds = %if.end.51
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx62 = getelementptr i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx62, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx63 = getelementptr i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx63, align 1
  %call64 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.61, %cond.true.56
  %cond66 = phi i32 [ %conv60, %cond.true.56 ], [ %call64, %cond.false.61 ]
  %cmp67 = icmp eq i32 %cond66, 10
  br i1 %cmp67, label %if.then.69, label %if.end.71

if.then.69:                                       ; preds = %cond.end.65
  %51 = load i8*, i8** %ptr.addr, align 8
  %add.ptr70 = getelementptr i8, i8* %51, i64 2
  store i8* %add.ptr70, i8** %ptr.addr, align 8
  br label %if.end.71

if.end.71:                                        ; preds = %if.then.69, %cond.end.65
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %52, i8** %53, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.72:                                         ; preds = %cond.end
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr73 = getelementptr i8, i8* %54, i64 2
  %55 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr73, i8** %55, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.74:                                         ; preds = %cond.end
  %56 = load i8*, i8** %end.addr, align 8
  %57 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast75 = ptrtoint i8* %56 to i64
  %sub.ptr.rhs.cast76 = ptrtoint i8* %57 to i64
  %sub.ptr.sub77 = sub i64 %sub.ptr.lhs.cast75, %sub.ptr.rhs.cast76
  %cmp78 = icmp slt i64 %sub.ptr.sub77, 2
  br i1 %cmp78, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %sw.bb.74
  store i32 -2, i32* %retval
  br label %return

if.end.81:                                        ; preds = %sw.bb.74
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr82 = getelementptr i8, i8* %58, i64 2
  store i8* %add.ptr82, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.83:                                         ; preds = %cond.end
  %59 = load i8*, i8** %end.addr, align 8
  %60 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast84 = ptrtoint i8* %59 to i64
  %sub.ptr.rhs.cast85 = ptrtoint i8* %60 to i64
  %sub.ptr.sub86 = sub i64 %sub.ptr.lhs.cast84, %sub.ptr.rhs.cast85
  %cmp87 = icmp slt i64 %sub.ptr.sub86, 3
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %sw.bb.83
  store i32 -2, i32* %retval
  br label %return

if.end.90:                                        ; preds = %sw.bb.83
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr91 = getelementptr i8, i8* %61, i64 3
  store i8* %add.ptr91, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.92:                                         ; preds = %cond.end
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast93 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast94 = ptrtoint i8* %63 to i64
  %sub.ptr.sub95 = sub i64 %sub.ptr.lhs.cast93, %sub.ptr.rhs.cast94
  %cmp96 = icmp slt i64 %sub.ptr.sub95, 4
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %sw.bb.92
  store i32 -2, i32* %retval
  br label %return

if.end.99:                                        ; preds = %sw.bb.92
  %64 = load i8*, i8** %ptr.addr, align 8
  %add.ptr100 = getelementptr i8, i8* %64, i64 4
  store i8* %add.ptr100, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.101:                                        ; preds = %cond.end, %cond.end, %cond.end
  %65 = load i8*, i8** %ptr.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %65, i8** %66, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %67 = load i8*, i8** %ptr.addr, align 8
  %add.ptr102 = getelementptr i8, i8* %67, i64 2
  store i8* %add.ptr102, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.99, %if.end.90, %if.end.81, %if.then.42, %if.then.26
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.150, %sw.epilog
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8*, i8** %end.addr, align 8
  %cmp103 = icmp ne i8* %68, %69
  br i1 %cmp103, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %70 = load i8*, i8** %ptr.addr, align 8
  %arrayidx105 = getelementptr i8, i8* %70, i64 1
  %71 = load i8, i8* %arrayidx105, align 1
  %conv106 = sext i8 %71 to i32
  %cmp107 = icmp eq i32 %conv106, 0
  br i1 %cmp107, label %cond.true.109, label %cond.false.114

cond.true.109:                                    ; preds = %while.body
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8, i8* %72, align 1
  %idxprom110 = zext i8 %73 to i64
  %74 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %75 = bitcast %struct.encoding* %74 to %struct.normal_encoding*
  %type111 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %75, i32 0, i32 1
  %arrayidx112 = getelementptr [256 x i8], [256 x i8]* %type111, i32 0, i64 %idxprom110
  %76 = load i8, i8* %arrayidx112, align 1
  %conv113 = zext i8 %76 to i32
  br label %cond.end.118

cond.false.114:                                   ; preds = %while.body
  %77 = load i8*, i8** %ptr.addr, align 8
  %arrayidx115 = getelementptr i8, i8* %77, i64 1
  %78 = load i8, i8* %arrayidx115, align 1
  %79 = load i8*, i8** %ptr.addr, align 8
  %arrayidx116 = getelementptr i8, i8* %79, i64 0
  %80 = load i8, i8* %arrayidx116, align 1
  %call117 = call i32 @unicode_byte_type(i8 signext %78, i8 signext %80)
  br label %cond.end.118

cond.end.118:                                     ; preds = %cond.false.114, %cond.true.109
  %cond119 = phi i32 [ %conv113, %cond.true.109 ], [ %call117, %cond.false.114 ]
  switch i32 %cond119, label %sw.default.148 [
    i32 5, label %sw.bb.120
    i32 6, label %sw.bb.129
    i32 7, label %sw.bb.138
    i32 0, label %sw.bb.147
    i32 1, label %sw.bb.147
    i32 8, label %sw.bb.147
    i32 9, label %sw.bb.147
    i32 10, label %sw.bb.147
    i32 4, label %sw.bb.147
  ]

sw.bb.120:                                        ; preds = %cond.end.118
  %81 = load i8*, i8** %end.addr, align 8
  %82 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast121 = ptrtoint i8* %81 to i64
  %sub.ptr.rhs.cast122 = ptrtoint i8* %82 to i64
  %sub.ptr.sub123 = sub i64 %sub.ptr.lhs.cast121, %sub.ptr.rhs.cast122
  %cmp124 = icmp slt i64 %sub.ptr.sub123, 2
  br i1 %cmp124, label %if.then.126, label %if.end.127

if.then.126:                                      ; preds = %sw.bb.120
  %83 = load i8*, i8** %ptr.addr, align 8
  %84 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %83, i8** %84, align 8
  store i32 6, i32* %retval
  br label %return

if.end.127:                                       ; preds = %sw.bb.120
  %85 = load i8*, i8** %ptr.addr, align 8
  %add.ptr128 = getelementptr i8, i8* %85, i64 2
  store i8* %add.ptr128, i8** %ptr.addr, align 8
  br label %sw.epilog.150

sw.bb.129:                                        ; preds = %cond.end.118
  %86 = load i8*, i8** %end.addr, align 8
  %87 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast130 = ptrtoint i8* %86 to i64
  %sub.ptr.rhs.cast131 = ptrtoint i8* %87 to i64
  %sub.ptr.sub132 = sub i64 %sub.ptr.lhs.cast130, %sub.ptr.rhs.cast131
  %cmp133 = icmp slt i64 %sub.ptr.sub132, 3
  br i1 %cmp133, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %sw.bb.129
  %88 = load i8*, i8** %ptr.addr, align 8
  %89 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %88, i8** %89, align 8
  store i32 6, i32* %retval
  br label %return

if.end.136:                                       ; preds = %sw.bb.129
  %90 = load i8*, i8** %ptr.addr, align 8
  %add.ptr137 = getelementptr i8, i8* %90, i64 3
  store i8* %add.ptr137, i8** %ptr.addr, align 8
  br label %sw.epilog.150

sw.bb.138:                                        ; preds = %cond.end.118
  %91 = load i8*, i8** %end.addr, align 8
  %92 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast139 = ptrtoint i8* %91 to i64
  %sub.ptr.rhs.cast140 = ptrtoint i8* %92 to i64
  %sub.ptr.sub141 = sub i64 %sub.ptr.lhs.cast139, %sub.ptr.rhs.cast140
  %cmp142 = icmp slt i64 %sub.ptr.sub141, 4
  br i1 %cmp142, label %if.then.144, label %if.end.145

if.then.144:                                      ; preds = %sw.bb.138
  %93 = load i8*, i8** %ptr.addr, align 8
  %94 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %93, i8** %94, align 8
  store i32 6, i32* %retval
  br label %return

if.end.145:                                       ; preds = %sw.bb.138
  %95 = load i8*, i8** %ptr.addr, align 8
  %add.ptr146 = getelementptr i8, i8* %95, i64 4
  store i8* %add.ptr146, i8** %ptr.addr, align 8
  br label %sw.epilog.150

sw.bb.147:                                        ; preds = %cond.end.118, %cond.end.118, %cond.end.118, %cond.end.118, %cond.end.118, %cond.end.118
  %96 = load i8*, i8** %ptr.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %96, i8** %97, align 8
  store i32 6, i32* %retval
  br label %return

sw.default.148:                                   ; preds = %cond.end.118
  %98 = load i8*, i8** %ptr.addr, align 8
  %add.ptr149 = getelementptr i8, i8* %98, i64 2
  store i8* %add.ptr149, i8** %ptr.addr, align 8
  br label %sw.epilog.150

sw.epilog.150:                                    ; preds = %sw.default.148, %if.end.145, %if.end.136, %if.end.127
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %99 = load i8*, i8** %ptr.addr, align 8
  %100 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %99, i8** %100, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.bb.147, %if.then.144, %if.then.135, %if.then.126, %sw.bb.101, %if.then.98, %if.then.89, %if.then.80, %sw.bb.72, %if.end.71, %if.then.50, %if.end.44, %if.then.31, %if.then.16, %if.then.4, %if.then
  %101 = load i32, i32* %retval
  ret i32 %101
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_ignoreSectionTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %level = alloca i32, align 4
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  store i32 0, i32* %level, align 4
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %2 = load i64, i64* %n, align 8
  %and = and i64 %2, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %n, align 8
  %and1 = and i64 %3, -2
  store i64 %and1, i64* %n, align 8
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %4, i64 %5
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %9 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %10 = load i8*, i8** %ptr.addr, align 8
  %11 = load i8, i8* %10, align 1
  %idxprom = zext i8 %11 to i64
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %14 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %14 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %15, i64 1
  %16 = load i8, i8* %arrayidx6, align 1
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %16, i8 signext %18)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.16
    i32 7, label %sw.bb.25
    i32 0, label %sw.bb.34
    i32 1, label %sw.bb.34
    i32 8, label %sw.bb.34
    i32 2, label %sw.bb.35
    i32 4, label %sw.bb.68
  ]

sw.bb:                                            ; preds = %cond.end
  %19 = load i8*, i8** %end.addr, align 8
  %20 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast8 = ptrtoint i8* %19 to i64
  %sub.ptr.rhs.cast9 = ptrtoint i8* %20 to i64
  %sub.ptr.sub10 = sub i64 %sub.ptr.lhs.cast8, %sub.ptr.rhs.cast9
  %cmp11 = icmp slt i64 %sub.ptr.sub10, 2
  br i1 %cmp11, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end.14:                                        ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %add.ptr15 = getelementptr i8, i8* %21, i64 2
  store i8* %add.ptr15, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.16:                                         ; preds = %cond.end
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast17 = ptrtoint i8* %22 to i64
  %sub.ptr.rhs.cast18 = ptrtoint i8* %23 to i64
  %sub.ptr.sub19 = sub i64 %sub.ptr.lhs.cast17, %sub.ptr.rhs.cast18
  %cmp20 = icmp slt i64 %sub.ptr.sub19, 3
  br i1 %cmp20, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %sw.bb.16
  store i32 -2, i32* %retval
  br label %return

if.end.23:                                        ; preds = %sw.bb.16
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr24 = getelementptr i8, i8* %24, i64 3
  store i8* %add.ptr24, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.25:                                         ; preds = %cond.end
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast26 = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast27 = ptrtoint i8* %26 to i64
  %sub.ptr.sub28 = sub i64 %sub.ptr.lhs.cast26, %sub.ptr.rhs.cast27
  %cmp29 = icmp slt i64 %sub.ptr.sub28, 4
  br i1 %cmp29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %sw.bb.25
  store i32 -2, i32* %retval
  br label %return

if.end.32:                                        ; preds = %sw.bb.25
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr33 = getelementptr i8, i8* %27, i64 4
  store i8* %add.ptr33, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.34:                                         ; preds = %cond.end, %cond.end, %cond.end
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %28, i8** %29, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %cond.end
  %30 = load i8*, i8** %ptr.addr, align 8
  %add.ptr36 = getelementptr i8, i8* %30, i64 2
  store i8* %add.ptr36, i8** %ptr.addr, align 8
  %31 = load i8*, i8** %end.addr, align 8
  %cmp37 = icmp eq i8* %add.ptr36, %31
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %sw.bb.35
  store i32 -1, i32* %retval
  br label %return

if.end.40:                                        ; preds = %sw.bb.35
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx41 = getelementptr i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx41, align 1
  %conv42 = sext i8 %33 to i32
  %cmp43 = icmp eq i32 %conv42, 0
  br i1 %cmp43, label %land.lhs.true, label %if.end.67

land.lhs.true:                                    ; preds = %if.end.40
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx45 = getelementptr i8, i8* %34, i64 0
  %35 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %35 to i32
  %cmp47 = icmp eq i32 %conv46, 33
  br i1 %cmp47, label %if.then.49, label %if.end.67

if.then.49:                                       ; preds = %land.lhs.true
  %36 = load i8*, i8** %ptr.addr, align 8
  %add.ptr50 = getelementptr i8, i8* %36, i64 2
  store i8* %add.ptr50, i8** %ptr.addr, align 8
  %37 = load i8*, i8** %end.addr, align 8
  %cmp51 = icmp eq i8* %add.ptr50, %37
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %if.then.49
  store i32 -1, i32* %retval
  br label %return

if.end.54:                                        ; preds = %if.then.49
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx55 = getelementptr i8, i8* %38, i64 1
  %39 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %39 to i32
  %cmp57 = icmp eq i32 %conv56, 0
  br i1 %cmp57, label %land.lhs.true.59, label %if.end.66

land.lhs.true.59:                                 ; preds = %if.end.54
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx60 = getelementptr i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx60, align 1
  %conv61 = sext i8 %41 to i32
  %cmp62 = icmp eq i32 %conv61, 91
  br i1 %cmp62, label %if.then.64, label %if.end.66

if.then.64:                                       ; preds = %land.lhs.true.59
  %42 = load i32, i32* %level, align 4
  %inc = add i32 %42, 1
  store i32 %inc, i32* %level, align 4
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr65 = getelementptr i8, i8* %43, i64 2
  store i8* %add.ptr65, i8** %ptr.addr, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.64, %land.lhs.true.59, %if.end.54
  br label %if.end.67

if.end.67:                                        ; preds = %if.end.66, %land.lhs.true, %if.end.40
  br label %sw.epilog

sw.bb.68:                                         ; preds = %cond.end
  %44 = load i8*, i8** %ptr.addr, align 8
  %add.ptr69 = getelementptr i8, i8* %44, i64 2
  store i8* %add.ptr69, i8** %ptr.addr, align 8
  %45 = load i8*, i8** %end.addr, align 8
  %cmp70 = icmp eq i8* %add.ptr69, %45
  br i1 %cmp70, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %sw.bb.68
  store i32 -1, i32* %retval
  br label %return

if.end.73:                                        ; preds = %sw.bb.68
  %46 = load i8*, i8** %ptr.addr, align 8
  %arrayidx74 = getelementptr i8, i8* %46, i64 1
  %47 = load i8, i8* %arrayidx74, align 1
  %conv75 = sext i8 %47 to i32
  %cmp76 = icmp eq i32 %conv75, 0
  br i1 %cmp76, label %land.lhs.true.78, label %if.end.105

land.lhs.true.78:                                 ; preds = %if.end.73
  %48 = load i8*, i8** %ptr.addr, align 8
  %arrayidx79 = getelementptr i8, i8* %48, i64 0
  %49 = load i8, i8* %arrayidx79, align 1
  %conv80 = sext i8 %49 to i32
  %cmp81 = icmp eq i32 %conv80, 93
  br i1 %cmp81, label %if.then.83, label %if.end.105

if.then.83:                                       ; preds = %land.lhs.true.78
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr84 = getelementptr i8, i8* %50, i64 2
  store i8* %add.ptr84, i8** %ptr.addr, align 8
  %51 = load i8*, i8** %end.addr, align 8
  %cmp85 = icmp eq i8* %add.ptr84, %51
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %if.then.83
  store i32 -1, i32* %retval
  br label %return

if.end.88:                                        ; preds = %if.then.83
  %52 = load i8*, i8** %ptr.addr, align 8
  %arrayidx89 = getelementptr i8, i8* %52, i64 1
  %53 = load i8, i8* %arrayidx89, align 1
  %conv90 = sext i8 %53 to i32
  %cmp91 = icmp eq i32 %conv90, 0
  br i1 %cmp91, label %land.lhs.true.93, label %if.end.104

land.lhs.true.93:                                 ; preds = %if.end.88
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx94 = getelementptr i8, i8* %54, i64 0
  %55 = load i8, i8* %arrayidx94, align 1
  %conv95 = sext i8 %55 to i32
  %cmp96 = icmp eq i32 %conv95, 62
  br i1 %cmp96, label %if.then.98, label %if.end.104

if.then.98:                                       ; preds = %land.lhs.true.93
  %56 = load i8*, i8** %ptr.addr, align 8
  %add.ptr99 = getelementptr i8, i8* %56, i64 2
  store i8* %add.ptr99, i8** %ptr.addr, align 8
  %57 = load i32, i32* %level, align 4
  %cmp100 = icmp eq i32 %57, 0
  br i1 %cmp100, label %if.then.102, label %if.end.103

if.then.102:                                      ; preds = %if.then.98
  %58 = load i8*, i8** %ptr.addr, align 8
  %59 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %58, i8** %59, align 8
  store i32 42, i32* %retval
  br label %return

if.end.103:                                       ; preds = %if.then.98
  %60 = load i32, i32* %level, align 4
  %dec = add i32 %60, -1
  store i32 %dec, i32* %level, align 4
  br label %if.end.104

if.end.104:                                       ; preds = %if.end.103, %land.lhs.true.93, %if.end.88
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %land.lhs.true.78, %if.end.73
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr106 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr106, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.105, %if.end.67, %if.end.32, %if.end.23, %if.end.14
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.102, %if.then.87, %if.then.72, %if.then.53, %if.then.39, %sw.bb.34, %if.then.31, %if.then.22, %if.then.13
  %62 = load i32, i32* %retval
  ret i32 %62
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_attributeValueTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %start = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  store i8* %2, i8** %start, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp ne i8* %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8, i8* %7, align 1
  %idxprom = zext i8 %8 to i64
  %9 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %10 = bitcast %struct.encoding* %9 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %10, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %11 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx6, align 1
  %14 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %14, i64 0
  %15 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %13, i8 signext %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.8
    i32 7, label %sw.bb.10
    i32 3, label %sw.bb.12
    i32 2, label %sw.bb.19
    i32 10, label %sw.bb.20
    i32 9, label %sw.bb.26
    i32 21, label %sw.bb.56
  ]

sw.bb:                                            ; preds = %cond.end
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %16, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.8:                                          ; preds = %cond.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %17, i64 3
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %cond.end
  %18 = load i8*, i8** %ptr.addr, align 8
  %add.ptr11 = getelementptr i8, i8* %18, i64 4
  store i8* %add.ptr11, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.12:                                         ; preds = %cond.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8*, i8** %start, align 8
  %cmp13 = icmp eq i8* %19, %20
  br i1 %cmp13, label %if.then.15, label %if.end.18

if.then.15:                                       ; preds = %sw.bb.12
  %21 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %22, i64 2
  %23 = load i8*, i8** %end.addr, align 8
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call17 = call i32 @little2_scanRef(%struct.encoding* %21, i8* %add.ptr16, i8* %23, i8** %24)
  store i32 %call17, i32* %retval
  br label %return

if.end.18:                                        ; preds = %sw.bb.12
  %25 = load i8*, i8** %ptr.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %25, i8** %26, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %cond.end
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.20:                                         ; preds = %cond.end
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %start, align 8
  %cmp21 = icmp eq i8* %29, %30
  br i1 %cmp21, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %sw.bb.20
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr24 = getelementptr i8, i8* %31, i64 2
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr24, i8** %32, align 8
  store i32 7, i32* %retval
  br label %return

if.end.25:                                        ; preds = %sw.bb.20
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %33, i8** %34, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.26:                                         ; preds = %cond.end
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8*, i8** %start, align 8
  %cmp27 = icmp eq i8* %35, %36
  br i1 %cmp27, label %if.then.29, label %if.end.55

if.then.29:                                       ; preds = %sw.bb.26
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr30 = getelementptr i8, i8* %37, i64 2
  store i8* %add.ptr30, i8** %ptr.addr, align 8
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp31 = icmp eq i8* %38, %39
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.then.29
  store i32 -3, i32* %retval
  br label %return

if.end.34:                                        ; preds = %if.then.29
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx35 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx35, align 1
  %conv36 = sext i8 %41 to i32
  %cmp37 = icmp eq i32 %conv36, 0
  br i1 %cmp37, label %cond.true.39, label %cond.false.44

cond.true.39:                                     ; preds = %if.end.34
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom40 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type41 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx42 = getelementptr [256 x i8], [256 x i8]* %type41, i32 0, i64 %idxprom40
  %46 = load i8, i8* %arrayidx42, align 1
  %conv43 = zext i8 %46 to i32
  br label %cond.end.48

cond.false.44:                                    ; preds = %if.end.34
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx45 = getelementptr i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx45, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx46 = getelementptr i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx46, align 1
  %call47 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.48

cond.end.48:                                      ; preds = %cond.false.44, %cond.true.39
  %cond49 = phi i32 [ %conv43, %cond.true.39 ], [ %call47, %cond.false.44 ]
  %cmp50 = icmp eq i32 %cond49, 10
  br i1 %cmp50, label %if.then.52, label %if.end.54

if.then.52:                                       ; preds = %cond.end.48
  %51 = load i8*, i8** %ptr.addr, align 8
  %add.ptr53 = getelementptr i8, i8* %51, i64 2
  store i8* %add.ptr53, i8** %ptr.addr, align 8
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.52, %cond.end.48
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %52, i8** %53, align 8
  store i32 7, i32* %retval
  br label %return

if.end.55:                                        ; preds = %sw.bb.26
  %54 = load i8*, i8** %ptr.addr, align 8
  %55 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %54, i8** %55, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.56:                                         ; preds = %cond.end
  %56 = load i8*, i8** %ptr.addr, align 8
  %57 = load i8*, i8** %start, align 8
  %cmp57 = icmp eq i8* %56, %57
  br i1 %cmp57, label %if.then.59, label %if.end.61

if.then.59:                                       ; preds = %sw.bb.56
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr60 = getelementptr i8, i8* %58, i64 2
  %59 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr60, i8** %59, align 8
  store i32 39, i32* %retval
  br label %return

if.end.61:                                        ; preds = %sw.bb.56
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 6, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr62 = getelementptr i8, i8* %62, i64 2
  store i8* %add.ptr62, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.10, %sw.bb.8, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end.61, %if.then.59, %if.end.55, %if.end.54, %if.then.33, %if.end.25, %if.then.23, %sw.bb.19, %if.end.18, %if.then.15, %if.then
  %65 = load i32, i32* %retval
  ret i32 %65
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_entityValueTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %start = alloca i8*, align 8
  %tok = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  store i8* %2, i8** %start, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp ne i8* %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i8, i8* %7, align 1
  %idxprom = zext i8 %8 to i64
  %9 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %10 = bitcast %struct.encoding* %9 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %10, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %11 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx6, align 1
  %14 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %14, i64 0
  %15 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %13, i8 signext %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.8
    i32 7, label %sw.bb.10
    i32 3, label %sw.bb.12
    i32 30, label %sw.bb.19
    i32 10, label %sw.bb.32
    i32 9, label %sw.bb.38
  ]

sw.bb:                                            ; preds = %cond.end
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %16, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.8:                                          ; preds = %cond.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %17, i64 3
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %cond.end
  %18 = load i8*, i8** %ptr.addr, align 8
  %add.ptr11 = getelementptr i8, i8* %18, i64 4
  store i8* %add.ptr11, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.12:                                         ; preds = %cond.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8*, i8** %start, align 8
  %cmp13 = icmp eq i8* %19, %20
  br i1 %cmp13, label %if.then.15, label %if.end.18

if.then.15:                                       ; preds = %sw.bb.12
  %21 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %22, i64 2
  %23 = load i8*, i8** %end.addr, align 8
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call17 = call i32 @little2_scanRef(%struct.encoding* %21, i8* %add.ptr16, i8* %23, i8** %24)
  store i32 %call17, i32* %retval
  br label %return

if.end.18:                                        ; preds = %sw.bb.12
  %25 = load i8*, i8** %ptr.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %25, i8** %26, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %cond.end
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8*, i8** %start, align 8
  %cmp20 = icmp eq i8* %27, %28
  br i1 %cmp20, label %if.then.22, label %if.end.31

if.then.22:                                       ; preds = %sw.bb.19
  %29 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %30 = load i8*, i8** %ptr.addr, align 8
  %add.ptr23 = getelementptr i8, i8* %30, i64 2
  %31 = load i8*, i8** %end.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call24 = call i32 @little2_scanPercent(%struct.encoding* %29, i8* %add.ptr23, i8* %31, i8** %32)
  store i32 %call24, i32* %tok, align 4
  %33 = load i32, i32* %tok, align 4
  %cmp25 = icmp eq i32 %33, 22
  br i1 %cmp25, label %cond.true.27, label %cond.false.28

cond.true.27:                                     ; preds = %if.then.22
  br label %cond.end.29

cond.false.28:                                    ; preds = %if.then.22
  %34 = load i32, i32* %tok, align 4
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.28, %cond.true.27
  %cond30 = phi i32 [ 0, %cond.true.27 ], [ %34, %cond.false.28 ]
  store i32 %cond30, i32* %retval
  br label %return

if.end.31:                                        ; preds = %sw.bb.19
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %35, i8** %36, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.32:                                         ; preds = %cond.end
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8*, i8** %start, align 8
  %cmp33 = icmp eq i8* %37, %38
  br i1 %cmp33, label %if.then.35, label %if.end.37

if.then.35:                                       ; preds = %sw.bb.32
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr36 = getelementptr i8, i8* %39, i64 2
  %40 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr36, i8** %40, align 8
  store i32 7, i32* %retval
  br label %return

if.end.37:                                        ; preds = %sw.bb.32
  %41 = load i8*, i8** %ptr.addr, align 8
  %42 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %41, i8** %42, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.38:                                         ; preds = %cond.end
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %start, align 8
  %cmp39 = icmp eq i8* %43, %44
  br i1 %cmp39, label %if.then.41, label %if.end.67

if.then.41:                                       ; preds = %sw.bb.38
  %45 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %45, i64 2
  store i8* %add.ptr42, i8** %ptr.addr, align 8
  %46 = load i8*, i8** %ptr.addr, align 8
  %47 = load i8*, i8** %end.addr, align 8
  %cmp43 = icmp eq i8* %46, %47
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.41
  store i32 -3, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.then.41
  %48 = load i8*, i8** %ptr.addr, align 8
  %arrayidx47 = getelementptr i8, i8* %48, i64 1
  %49 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %49 to i32
  %cmp49 = icmp eq i32 %conv48, 0
  br i1 %cmp49, label %cond.true.51, label %cond.false.56

cond.true.51:                                     ; preds = %if.end.46
  %50 = load i8*, i8** %ptr.addr, align 8
  %51 = load i8, i8* %50, align 1
  %idxprom52 = zext i8 %51 to i64
  %52 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %53 = bitcast %struct.encoding* %52 to %struct.normal_encoding*
  %type53 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %53, i32 0, i32 1
  %arrayidx54 = getelementptr [256 x i8], [256 x i8]* %type53, i32 0, i64 %idxprom52
  %54 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %54 to i32
  br label %cond.end.60

cond.false.56:                                    ; preds = %if.end.46
  %55 = load i8*, i8** %ptr.addr, align 8
  %arrayidx57 = getelementptr i8, i8* %55, i64 1
  %56 = load i8, i8* %arrayidx57, align 1
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx58, align 1
  %call59 = call i32 @unicode_byte_type(i8 signext %56, i8 signext %58)
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.56, %cond.true.51
  %cond61 = phi i32 [ %conv55, %cond.true.51 ], [ %call59, %cond.false.56 ]
  %cmp62 = icmp eq i32 %cond61, 10
  br i1 %cmp62, label %if.then.64, label %if.end.66

if.then.64:                                       ; preds = %cond.end.60
  %59 = load i8*, i8** %ptr.addr, align 8
  %add.ptr65 = getelementptr i8, i8* %59, i64 2
  store i8* %add.ptr65, i8** %ptr.addr, align 8
  br label %if.end.66

if.end.66:                                        ; preds = %if.then.64, %cond.end.60
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 7, i32* %retval
  br label %return

if.end.67:                                        ; preds = %sw.bb.38
  %62 = load i8*, i8** %ptr.addr, align 8
  %63 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %62, i8** %63, align 8
  store i32 6, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %64 = load i8*, i8** %ptr.addr, align 8
  %add.ptr68 = getelementptr i8, i8* %64, i64 2
  store i8* %add.ptr68, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.10, %sw.bb.8, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %65 = load i8*, i8** %ptr.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %65, i8** %66, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end.67, %if.end.66, %if.then.45, %if.end.37, %if.then.35, %if.end.31, %cond.end.29, %if.end.18, %if.then.15, %if.then
  %67 = load i32, i32* %retval
  ret i32 %67
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_sameName(%struct.encoding* %enc, i8* %ptr1, i8* %ptr2) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr1.addr = alloca i8*, align 8
  %ptr2.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr1, i8** %ptr1.addr, align 8
  store i8* %ptr2, i8** %ptr2.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 1
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %2 = load i8*, i8** %ptr1.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx2 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %7 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx4, align 1
  %9 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx5, align 1
  %call = call i32 @unicode_byte_type(i8 signext %8, i8 signext %10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv3, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 7, label %sw.bb
    i32 6, label %sw.bb.11
    i32 5, label %sw.bb.20
    i32 29, label %sw.bb.37
    i32 22, label %sw.bb.37
    i32 23, label %sw.bb.37
    i32 24, label %sw.bb.37
    i32 25, label %sw.bb.37
    i32 26, label %sw.bb.37
    i32 27, label %sw.bb.37
  ]

sw.bb:                                            ; preds = %cond.end
  %11 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr1.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv6 = sext i8 %12 to i32
  %13 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr7 = getelementptr i8, i8* %13, i32 1
  store i8* %incdec.ptr7, i8** %ptr2.addr, align 8
  %14 = load i8, i8* %13, align 1
  %conv8 = sext i8 %14 to i32
  %cmp9 = icmp ne i32 %conv6, %conv8
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.bb.11

sw.bb.11:                                         ; preds = %cond.end, %if.end
  %15 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr12 = getelementptr i8, i8* %15, i32 1
  store i8* %incdec.ptr12, i8** %ptr1.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv13 = sext i8 %16 to i32
  %17 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr14 = getelementptr i8, i8* %17, i32 1
  store i8* %incdec.ptr14, i8** %ptr2.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv15 = sext i8 %18 to i32
  %cmp16 = icmp ne i32 %conv13, %conv15
  br i1 %cmp16, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %sw.bb.11
  store i32 0, i32* %retval
  br label %return

if.end.19:                                        ; preds = %sw.bb.11
  br label %sw.bb.20

sw.bb.20:                                         ; preds = %cond.end, %if.end.19
  %19 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr21 = getelementptr i8, i8* %19, i32 1
  store i8* %incdec.ptr21, i8** %ptr1.addr, align 8
  %20 = load i8, i8* %19, align 1
  %conv22 = sext i8 %20 to i32
  %21 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr23 = getelementptr i8, i8* %21, i32 1
  store i8* %incdec.ptr23, i8** %ptr2.addr, align 8
  %22 = load i8, i8* %21, align 1
  %conv24 = sext i8 %22 to i32
  %cmp25 = icmp ne i32 %conv22, %conv24
  br i1 %cmp25, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %sw.bb.20
  store i32 0, i32* %retval
  br label %return

if.end.28:                                        ; preds = %sw.bb.20
  %23 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr29 = getelementptr i8, i8* %23, i32 1
  store i8* %incdec.ptr29, i8** %ptr1.addr, align 8
  %24 = load i8, i8* %23, align 1
  %conv30 = sext i8 %24 to i32
  %25 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr31 = getelementptr i8, i8* %25, i32 1
  store i8* %incdec.ptr31, i8** %ptr2.addr, align 8
  %26 = load i8, i8* %25, align 1
  %conv32 = sext i8 %26 to i32
  %cmp33 = icmp ne i32 %conv30, %conv32
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.28
  store i32 0, i32* %retval
  br label %return

if.end.36:                                        ; preds = %if.end.28
  br label %sw.epilog

sw.bb.37:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %27 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr38 = getelementptr i8, i8* %27, i32 1
  store i8* %incdec.ptr38, i8** %ptr2.addr, align 8
  %28 = load i8, i8* %27, align 1
  %conv39 = sext i8 %28 to i32
  %29 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr40 = getelementptr i8, i8* %29, i32 1
  store i8* %incdec.ptr40, i8** %ptr1.addr, align 8
  %30 = load i8, i8* %29, align 1
  %conv41 = sext i8 %30 to i32
  %cmp42 = icmp ne i32 %conv39, %conv41
  br i1 %cmp42, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %sw.bb.37
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %sw.bb.37
  %31 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr46 = getelementptr i8, i8* %31, i32 1
  store i8* %incdec.ptr46, i8** %ptr2.addr, align 8
  %32 = load i8, i8* %31, align 1
  %conv47 = sext i8 %32 to i32
  %33 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr48 = getelementptr i8, i8* %33, i32 1
  store i8* %incdec.ptr48, i8** %ptr1.addr, align 8
  %34 = load i8, i8* %33, align 1
  %conv49 = sext i8 %34 to i32
  %cmp50 = icmp ne i32 %conv47, %conv49
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %if.end.45
  store i32 0, i32* %retval
  br label %return

if.end.53:                                        ; preds = %if.end.45
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %35 = load i8*, i8** %ptr2.addr, align 8
  %arrayidx54 = getelementptr i8, i8* %35, i64 1
  %36 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %36 to i32
  %cmp56 = icmp eq i32 %conv55, 0
  br i1 %cmp56, label %cond.true.58, label %cond.false.63

cond.true.58:                                     ; preds = %sw.default
  %37 = load i8*, i8** %ptr2.addr, align 8
  %38 = load i8, i8* %37, align 1
  %idxprom59 = zext i8 %38 to i64
  %39 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %40 = bitcast %struct.encoding* %39 to %struct.normal_encoding*
  %type60 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %40, i32 0, i32 1
  %arrayidx61 = getelementptr [256 x i8], [256 x i8]* %type60, i32 0, i64 %idxprom59
  %41 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %41 to i32
  br label %cond.end.67

cond.false.63:                                    ; preds = %sw.default
  %42 = load i8*, i8** %ptr2.addr, align 8
  %arrayidx64 = getelementptr i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx64, align 1
  %44 = load i8*, i8** %ptr2.addr, align 8
  %arrayidx65 = getelementptr i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx65, align 1
  %call66 = call i32 @unicode_byte_type(i8 signext %43, i8 signext %45)
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.false.63, %cond.true.58
  %cond68 = phi i32 [ %conv62, %cond.true.58 ], [ %call66, %cond.false.63 ]
  switch i32 %cond68, label %sw.default.70 [
    i32 5, label %sw.bb.69
    i32 6, label %sw.bb.69
    i32 7, label %sw.bb.69
    i32 29, label %sw.bb.69
    i32 22, label %sw.bb.69
    i32 23, label %sw.bb.69
    i32 24, label %sw.bb.69
    i32 25, label %sw.bb.69
    i32 26, label %sw.bb.69
    i32 27, label %sw.bb.69
  ]

sw.bb.69:                                         ; preds = %cond.end.67, %cond.end.67, %cond.end.67, %cond.end.67, %cond.end.67, %cond.end.67, %cond.end.67, %cond.end.67, %cond.end.67, %cond.end.67
  store i32 0, i32* %retval
  br label %return

sw.default.70:                                    ; preds = %cond.end.67
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.53, %if.end.36
  br label %for.cond

return:                                           ; preds = %sw.default.70, %sw.bb.69, %if.then.52, %if.then.44, %if.then.35, %if.then.27, %if.then.18, %if.then
  %46 = load i32, i32* %retval
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_nameMatchesAscii(%struct.encoding* %enc, i8* %ptr1, i8* %end1, i8* %ptr2) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr1.addr = alloca i8*, align 8
  %end1.addr = alloca i8*, align 8
  %ptr2.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr1, i8** %ptr1.addr, align 8
  store i8* %end1, i8** %end1.addr, align 8
  store i8* %ptr2, i8** %ptr2.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %ptr2.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %ptr1.addr, align 8
  %3 = load i8*, i8** %end1.addr, align 8
  %cmp = icmp eq i8* %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %4 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %land.lhs.true, label %if.then.8

land.lhs.true:                                    ; preds = %if.end
  %6 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %7 to i32
  %8 = load i8*, i8** %ptr2.addr, align 8
  %9 = load i8, i8* %8, align 1
  %conv5 = sext i8 %9 to i32
  %cmp6 = icmp eq i32 %conv4, %conv5
  br i1 %cmp6, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.9:                                         ; preds = %land.lhs.true
  br label %for.inc

for.inc:                                          ; preds = %if.end.9
  %10 = load i8*, i8** %ptr1.addr, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 2
  store i8* %add.ptr, i8** %ptr1.addr, align 8
  %11 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr2.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %ptr1.addr, align 8
  %13 = load i8*, i8** %end1.addr, align 8
  %cmp10 = icmp eq i8* %12, %13
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.8, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_nameLength(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %start = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  store i8* %0, i8** %start, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8, i8* %3, align 1
  %idxprom = zext i8 %4 to i64
  %5 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %6 = bitcast %struct.encoding* %5 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %6, i32 0, i32 1
  %arrayidx2 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx4, align 1
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx5, align 1
  %call = call i32 @unicode_byte_type(i8 signext %9, i8 signext %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv3, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.6
    i32 7, label %sw.bb.8
    i32 29, label %sw.bb.10
    i32 22, label %sw.bb.10
    i32 23, label %sw.bb.10
    i32 24, label %sw.bb.10
    i32 25, label %sw.bb.10
    i32 26, label %sw.bb.10
    i32 27, label %sw.bb.10
  ]

sw.bb:                                            ; preds = %cond.end
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %12, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.6:                                          ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %add.ptr7 = getelementptr i8, i8* %13, i64 3
  store i8* %add.ptr7, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.8:                                          ; preds = %cond.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %14, i64 4
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr11 = getelementptr i8, i8* %15, i64 2
  store i8* %add.ptr11, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv12 = trunc i64 %sub.ptr.sub to i32
  ret i32 %conv12

sw.epilog:                                        ; preds = %sw.bb.10, %sw.bb.8, %sw.bb.6, %sw.bb
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i8* @little2_skipS(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 1
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx2 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %7 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx4, align 1
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx5, align 1
  %call = call i32 @unicode_byte_type(i8 signext %8, i8 signext %10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv3, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 10, label %sw.bb
    i32 9, label %sw.bb
    i32 21, label %sw.bb
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end
  %11 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %11, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %12 = load i8*, i8** %ptr.addr, align 8
  ret i8* %12

sw.epilog:                                        ; preds = %sw.bb
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_getAtts(%struct.encoding* %enc, i8* %ptr, i32 %attsMax, %struct.ATTRIBUTE* %atts) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %attsMax.addr = alloca i32, align 4
  %atts.addr = alloca %struct.ATTRIBUTE*, align 8
  %state = alloca i32, align 4
  %nAtts = alloca i32, align 4
  %open = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %attsMax, i32* %attsMax.addr, align 4
  store %struct.ATTRIBUTE* %atts, %struct.ATTRIBUTE** %atts.addr, align 8
  store i32 1, i32* %state, align 4
  store i32 0, i32* %nAtts, align 4
  store i32 0, i32* %open, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8, i8* %3, align 1
  %idxprom = zext i8 %4 to i64
  %5 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %6 = bitcast %struct.encoding* %5 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %6, i32 0, i32 1
  %arrayidx2 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx4, align 1
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx5, align 1
  %call = call i32 @unicode_byte_type(i8 signext %9, i8 signext %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv3, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.17
    i32 7, label %sw.bb.33
    i32 29, label %sw.bb.49
    i32 22, label %sw.bb.49
    i32 24, label %sw.bb.49
    i32 12, label %sw.bb.64
    i32 13, label %sw.bb.86
    i32 3, label %sw.bb.112
    i32 21, label %sw.bb.120
    i32 9, label %sw.bb.195
    i32 10, label %sw.bb.195
    i32 11, label %sw.bb.211
    i32 17, label %sw.bb.211
  ]

sw.bb:                                            ; preds = %cond.end
  %12 = load i32, i32* %state, align 4
  %cmp6 = icmp eq i32 %12, 0
  br i1 %cmp6, label %if.then, label %if.end.15

if.then:                                          ; preds = %sw.bb
  %13 = load i32, i32* %nAtts, align 4
  %14 = load i32, i32* %attsMax.addr, align 4
  %cmp8 = icmp slt i32 %13, %14
  br i1 %cmp8, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %if.then
  %15 = load i8*, i8** %ptr.addr, align 8
  %16 = load i32, i32* %nAtts, align 4
  %idxprom11 = sext i32 %16 to i64
  %17 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx12 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %17, i64 %idxprom11
  %name = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx12, i32 0, i32 0
  store i8* %15, i8** %name, align 8
  %18 = load i32, i32* %nAtts, align 4
  %idxprom13 = sext i32 %18 to i64
  %19 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx14 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %19, i64 %idxprom13
  %normalized = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx14, i32 0, i32 3
  store i8 1, i8* %normalized, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.10, %if.then
  store i32 1, i32* %state, align 4
  br label %if.end.15

if.end.15:                                        ; preds = %if.end, %sw.bb
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %20, i64 0
  store i8* %add.ptr16, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.17:                                         ; preds = %cond.end
  %21 = load i32, i32* %state, align 4
  %cmp18 = icmp eq i32 %21, 0
  br i1 %cmp18, label %if.then.20, label %if.end.31

if.then.20:                                       ; preds = %sw.bb.17
  %22 = load i32, i32* %nAtts, align 4
  %23 = load i32, i32* %attsMax.addr, align 4
  %cmp21 = icmp slt i32 %22, %23
  br i1 %cmp21, label %if.then.23, label %if.end.30

if.then.23:                                       ; preds = %if.then.20
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i32, i32* %nAtts, align 4
  %idxprom24 = sext i32 %25 to i64
  %26 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx25 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %26, i64 %idxprom24
  %name26 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx25, i32 0, i32 0
  store i8* %24, i8** %name26, align 8
  %27 = load i32, i32* %nAtts, align 4
  %idxprom27 = sext i32 %27 to i64
  %28 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx28 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %28, i64 %idxprom27
  %normalized29 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx28, i32 0, i32 3
  store i8 1, i8* %normalized29, align 1
  br label %if.end.30

if.end.30:                                        ; preds = %if.then.23, %if.then.20
  store i32 1, i32* %state, align 4
  br label %if.end.31

if.end.31:                                        ; preds = %if.end.30, %sw.bb.17
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr32 = getelementptr i8, i8* %29, i64 1
  store i8* %add.ptr32, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.33:                                         ; preds = %cond.end
  %30 = load i32, i32* %state, align 4
  %cmp34 = icmp eq i32 %30, 0
  br i1 %cmp34, label %if.then.36, label %if.end.47

if.then.36:                                       ; preds = %sw.bb.33
  %31 = load i32, i32* %nAtts, align 4
  %32 = load i32, i32* %attsMax.addr, align 4
  %cmp37 = icmp slt i32 %31, %32
  br i1 %cmp37, label %if.then.39, label %if.end.46

if.then.39:                                       ; preds = %if.then.36
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i32, i32* %nAtts, align 4
  %idxprom40 = sext i32 %34 to i64
  %35 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx41 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %35, i64 %idxprom40
  %name42 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx41, i32 0, i32 0
  store i8* %33, i8** %name42, align 8
  %36 = load i32, i32* %nAtts, align 4
  %idxprom43 = sext i32 %36 to i64
  %37 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx44 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %37, i64 %idxprom43
  %normalized45 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx44, i32 0, i32 3
  store i8 1, i8* %normalized45, align 1
  br label %if.end.46

if.end.46:                                        ; preds = %if.then.39, %if.then.36
  store i32 1, i32* %state, align 4
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %sw.bb.33
  %38 = load i8*, i8** %ptr.addr, align 8
  %add.ptr48 = getelementptr i8, i8* %38, i64 2
  store i8* %add.ptr48, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.49:                                         ; preds = %cond.end, %cond.end, %cond.end
  %39 = load i32, i32* %state, align 4
  %cmp50 = icmp eq i32 %39, 0
  br i1 %cmp50, label %if.then.52, label %if.end.63

if.then.52:                                       ; preds = %sw.bb.49
  %40 = load i32, i32* %nAtts, align 4
  %41 = load i32, i32* %attsMax.addr, align 4
  %cmp53 = icmp slt i32 %40, %41
  br i1 %cmp53, label %if.then.55, label %if.end.62

if.then.55:                                       ; preds = %if.then.52
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i32, i32* %nAtts, align 4
  %idxprom56 = sext i32 %43 to i64
  %44 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx57 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %44, i64 %idxprom56
  %name58 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx57, i32 0, i32 0
  store i8* %42, i8** %name58, align 8
  %45 = load i32, i32* %nAtts, align 4
  %idxprom59 = sext i32 %45 to i64
  %46 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx60 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %46, i64 %idxprom59
  %normalized61 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx60, i32 0, i32 3
  store i8 1, i8* %normalized61, align 1
  br label %if.end.62

if.end.62:                                        ; preds = %if.then.55, %if.then.52
  store i32 1, i32* %state, align 4
  br label %if.end.63

if.end.63:                                        ; preds = %if.end.62, %sw.bb.49
  br label %sw.epilog

sw.bb.64:                                         ; preds = %cond.end
  %47 = load i32, i32* %state, align 4
  %cmp65 = icmp ne i32 %47, 2
  br i1 %cmp65, label %if.then.67, label %if.else

if.then.67:                                       ; preds = %sw.bb.64
  %48 = load i32, i32* %nAtts, align 4
  %49 = load i32, i32* %attsMax.addr, align 4
  %cmp68 = icmp slt i32 %48, %49
  br i1 %cmp68, label %if.then.70, label %if.end.74

if.then.70:                                       ; preds = %if.then.67
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr71 = getelementptr i8, i8* %50, i64 2
  %51 = load i32, i32* %nAtts, align 4
  %idxprom72 = sext i32 %51 to i64
  %52 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx73 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %52, i64 %idxprom72
  %valuePtr = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx73, i32 0, i32 1
  store i8* %add.ptr71, i8** %valuePtr, align 8
  br label %if.end.74

if.end.74:                                        ; preds = %if.then.70, %if.then.67
  store i32 2, i32* %state, align 4
  store i32 12, i32* %open, align 4
  br label %if.end.85

if.else:                                          ; preds = %sw.bb.64
  %53 = load i32, i32* %open, align 4
  %cmp75 = icmp eq i32 %53, 12
  br i1 %cmp75, label %if.then.77, label %if.end.84

if.then.77:                                       ; preds = %if.else
  store i32 0, i32* %state, align 4
  %54 = load i32, i32* %nAtts, align 4
  %55 = load i32, i32* %attsMax.addr, align 4
  %cmp78 = icmp slt i32 %54, %55
  br i1 %cmp78, label %if.then.80, label %if.end.83

if.then.80:                                       ; preds = %if.then.77
  %56 = load i8*, i8** %ptr.addr, align 8
  %57 = load i32, i32* %nAtts, align 4
  %idxprom81 = sext i32 %57 to i64
  %58 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx82 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %58, i64 %idxprom81
  %valueEnd = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx82, i32 0, i32 2
  store i8* %56, i8** %valueEnd, align 8
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.80, %if.then.77
  %59 = load i32, i32* %nAtts, align 4
  %inc = add i32 %59, 1
  store i32 %inc, i32* %nAtts, align 4
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %if.else
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.end.74
  br label %sw.epilog

sw.bb.86:                                         ; preds = %cond.end
  %60 = load i32, i32* %state, align 4
  %cmp87 = icmp ne i32 %60, 2
  br i1 %cmp87, label %if.then.89, label %if.else.98

if.then.89:                                       ; preds = %sw.bb.86
  %61 = load i32, i32* %nAtts, align 4
  %62 = load i32, i32* %attsMax.addr, align 4
  %cmp90 = icmp slt i32 %61, %62
  br i1 %cmp90, label %if.then.92, label %if.end.97

if.then.92:                                       ; preds = %if.then.89
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr93 = getelementptr i8, i8* %63, i64 2
  %64 = load i32, i32* %nAtts, align 4
  %idxprom94 = sext i32 %64 to i64
  %65 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx95 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %65, i64 %idxprom94
  %valuePtr96 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx95, i32 0, i32 1
  store i8* %add.ptr93, i8** %valuePtr96, align 8
  br label %if.end.97

if.end.97:                                        ; preds = %if.then.92, %if.then.89
  store i32 2, i32* %state, align 4
  store i32 13, i32* %open, align 4
  br label %if.end.111

if.else.98:                                       ; preds = %sw.bb.86
  %66 = load i32, i32* %open, align 4
  %cmp99 = icmp eq i32 %66, 13
  br i1 %cmp99, label %if.then.101, label %if.end.110

if.then.101:                                      ; preds = %if.else.98
  store i32 0, i32* %state, align 4
  %67 = load i32, i32* %nAtts, align 4
  %68 = load i32, i32* %attsMax.addr, align 4
  %cmp102 = icmp slt i32 %67, %68
  br i1 %cmp102, label %if.then.104, label %if.end.108

if.then.104:                                      ; preds = %if.then.101
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i32, i32* %nAtts, align 4
  %idxprom105 = sext i32 %70 to i64
  %71 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx106 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %71, i64 %idxprom105
  %valueEnd107 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx106, i32 0, i32 2
  store i8* %69, i8** %valueEnd107, align 8
  br label %if.end.108

if.end.108:                                       ; preds = %if.then.104, %if.then.101
  %72 = load i32, i32* %nAtts, align 4
  %inc109 = add i32 %72, 1
  store i32 %inc109, i32* %nAtts, align 4
  br label %if.end.110

if.end.110:                                       ; preds = %if.end.108, %if.else.98
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.110, %if.end.97
  br label %sw.epilog

sw.bb.112:                                        ; preds = %cond.end
  %73 = load i32, i32* %nAtts, align 4
  %74 = load i32, i32* %attsMax.addr, align 4
  %cmp113 = icmp slt i32 %73, %74
  br i1 %cmp113, label %if.then.115, label %if.end.119

if.then.115:                                      ; preds = %sw.bb.112
  %75 = load i32, i32* %nAtts, align 4
  %idxprom116 = sext i32 %75 to i64
  %76 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx117 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %76, i64 %idxprom116
  %normalized118 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx117, i32 0, i32 3
  store i8 0, i8* %normalized118, align 1
  br label %if.end.119

if.end.119:                                       ; preds = %if.then.115, %sw.bb.112
  br label %sw.epilog

sw.bb.120:                                        ; preds = %cond.end
  %77 = load i32, i32* %state, align 4
  %cmp121 = icmp eq i32 %77, 1
  br i1 %cmp121, label %if.then.123, label %if.else.124

if.then.123:                                      ; preds = %sw.bb.120
  store i32 0, i32* %state, align 4
  br label %if.end.194

if.else.124:                                      ; preds = %sw.bb.120
  %78 = load i32, i32* %state, align 4
  %cmp125 = icmp eq i32 %78, 2
  br i1 %cmp125, label %land.lhs.true, label %if.end.193

land.lhs.true:                                    ; preds = %if.else.124
  %79 = load i32, i32* %nAtts, align 4
  %80 = load i32, i32* %attsMax.addr, align 4
  %cmp127 = icmp slt i32 %79, %80
  br i1 %cmp127, label %land.lhs.true.129, label %if.end.193

land.lhs.true.129:                                ; preds = %land.lhs.true
  %81 = load i32, i32* %nAtts, align 4
  %idxprom130 = sext i32 %81 to i64
  %82 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx131 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %82, i64 %idxprom130
  %normalized132 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx131, i32 0, i32 3
  %83 = load i8, i8* %normalized132, align 1
  %conv133 = sext i8 %83 to i32
  %tobool = icmp ne i32 %conv133, 0
  br i1 %tobool, label %land.lhs.true.134, label %if.end.193

land.lhs.true.134:                                ; preds = %land.lhs.true.129
  %84 = load i8*, i8** %ptr.addr, align 8
  %85 = load i32, i32* %nAtts, align 4
  %idxprom135 = sext i32 %85 to i64
  %86 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx136 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %86, i64 %idxprom135
  %valuePtr137 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx136, i32 0, i32 1
  %87 = load i8*, i8** %valuePtr137, align 8
  %cmp138 = icmp eq i8* %84, %87
  br i1 %cmp138, label %if.then.189, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.134
  %88 = load i8*, i8** %ptr.addr, align 8
  %arrayidx140 = getelementptr i8, i8* %88, i64 1
  %89 = load i8, i8* %arrayidx140, align 1
  %conv141 = sext i8 %89 to i32
  %cmp142 = icmp eq i32 %conv141, 0
  br i1 %cmp142, label %cond.true.144, label %cond.false.147

cond.true.144:                                    ; preds = %lor.lhs.false
  %90 = load i8*, i8** %ptr.addr, align 8
  %arrayidx145 = getelementptr i8, i8* %90, i64 0
  %91 = load i8, i8* %arrayidx145, align 1
  %conv146 = sext i8 %91 to i32
  br label %cond.end.148

cond.false.147:                                   ; preds = %lor.lhs.false
  br label %cond.end.148

cond.end.148:                                     ; preds = %cond.false.147, %cond.true.144
  %cond149 = phi i32 [ %conv146, %cond.true.144 ], [ -1, %cond.false.147 ]
  %cmp150 = icmp ne i32 %cond149, 32
  br i1 %cmp150, label %if.then.189, label %lor.lhs.false.152

lor.lhs.false.152:                                ; preds = %cond.end.148
  %92 = load i8*, i8** %ptr.addr, align 8
  %add.ptr153 = getelementptr i8, i8* %92, i64 2
  %arrayidx154 = getelementptr i8, i8* %add.ptr153, i64 1
  %93 = load i8, i8* %arrayidx154, align 1
  %conv155 = sext i8 %93 to i32
  %cmp156 = icmp eq i32 %conv155, 0
  br i1 %cmp156, label %cond.true.158, label %cond.false.162

cond.true.158:                                    ; preds = %lor.lhs.false.152
  %94 = load i8*, i8** %ptr.addr, align 8
  %add.ptr159 = getelementptr i8, i8* %94, i64 2
  %arrayidx160 = getelementptr i8, i8* %add.ptr159, i64 0
  %95 = load i8, i8* %arrayidx160, align 1
  %conv161 = sext i8 %95 to i32
  br label %cond.end.163

cond.false.162:                                   ; preds = %lor.lhs.false.152
  br label %cond.end.163

cond.end.163:                                     ; preds = %cond.false.162, %cond.true.158
  %cond164 = phi i32 [ %conv161, %cond.true.158 ], [ -1, %cond.false.162 ]
  %cmp165 = icmp eq i32 %cond164, 32
  br i1 %cmp165, label %if.then.189, label %lor.lhs.false.167

lor.lhs.false.167:                                ; preds = %cond.end.163
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr168 = getelementptr i8, i8* %96, i64 2
  %arrayidx169 = getelementptr i8, i8* %add.ptr168, i64 1
  %97 = load i8, i8* %arrayidx169, align 1
  %conv170 = sext i8 %97 to i32
  %cmp171 = icmp eq i32 %conv170, 0
  br i1 %cmp171, label %cond.true.173, label %cond.false.179

cond.true.173:                                    ; preds = %lor.lhs.false.167
  %98 = load i8*, i8** %ptr.addr, align 8
  %add.ptr174 = getelementptr i8, i8* %98, i64 2
  %99 = load i8, i8* %add.ptr174, align 1
  %idxprom175 = zext i8 %99 to i64
  %100 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %101 = bitcast %struct.encoding* %100 to %struct.normal_encoding*
  %type176 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %101, i32 0, i32 1
  %arrayidx177 = getelementptr [256 x i8], [256 x i8]* %type176, i32 0, i64 %idxprom175
  %102 = load i8, i8* %arrayidx177, align 1
  %conv178 = zext i8 %102 to i32
  br label %cond.end.185

cond.false.179:                                   ; preds = %lor.lhs.false.167
  %103 = load i8*, i8** %ptr.addr, align 8
  %add.ptr180 = getelementptr i8, i8* %103, i64 2
  %arrayidx181 = getelementptr i8, i8* %add.ptr180, i64 1
  %104 = load i8, i8* %arrayidx181, align 1
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr182 = getelementptr i8, i8* %105, i64 2
  %arrayidx183 = getelementptr i8, i8* %add.ptr182, i64 0
  %106 = load i8, i8* %arrayidx183, align 1
  %call184 = call i32 @unicode_byte_type(i8 signext %104, i8 signext %106)
  br label %cond.end.185

cond.end.185:                                     ; preds = %cond.false.179, %cond.true.173
  %cond186 = phi i32 [ %conv178, %cond.true.173 ], [ %call184, %cond.false.179 ]
  %107 = load i32, i32* %open, align 4
  %cmp187 = icmp eq i32 %cond186, %107
  br i1 %cmp187, label %if.then.189, label %if.end.193

if.then.189:                                      ; preds = %cond.end.185, %cond.end.163, %cond.end.148, %land.lhs.true.134
  %108 = load i32, i32* %nAtts, align 4
  %idxprom190 = sext i32 %108 to i64
  %109 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx191 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %109, i64 %idxprom190
  %normalized192 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx191, i32 0, i32 3
  store i8 0, i8* %normalized192, align 1
  br label %if.end.193

if.end.193:                                       ; preds = %if.then.189, %cond.end.185, %land.lhs.true.129, %land.lhs.true, %if.else.124
  br label %if.end.194

if.end.194:                                       ; preds = %if.end.193, %if.then.123
  br label %sw.epilog

sw.bb.195:                                        ; preds = %cond.end, %cond.end
  %110 = load i32, i32* %state, align 4
  %cmp196 = icmp eq i32 %110, 1
  br i1 %cmp196, label %if.then.198, label %if.else.199

if.then.198:                                      ; preds = %sw.bb.195
  store i32 0, i32* %state, align 4
  br label %if.end.210

if.else.199:                                      ; preds = %sw.bb.195
  %111 = load i32, i32* %state, align 4
  %cmp200 = icmp eq i32 %111, 2
  br i1 %cmp200, label %land.lhs.true.202, label %if.end.209

land.lhs.true.202:                                ; preds = %if.else.199
  %112 = load i32, i32* %nAtts, align 4
  %113 = load i32, i32* %attsMax.addr, align 4
  %cmp203 = icmp slt i32 %112, %113
  br i1 %cmp203, label %if.then.205, label %if.end.209

if.then.205:                                      ; preds = %land.lhs.true.202
  %114 = load i32, i32* %nAtts, align 4
  %idxprom206 = sext i32 %114 to i64
  %115 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx207 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %115, i64 %idxprom206
  %normalized208 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx207, i32 0, i32 3
  store i8 0, i8* %normalized208, align 1
  br label %if.end.209

if.end.209:                                       ; preds = %if.then.205, %land.lhs.true.202, %if.else.199
  br label %if.end.210

if.end.210:                                       ; preds = %if.end.209, %if.then.198
  br label %sw.epilog

sw.bb.211:                                        ; preds = %cond.end, %cond.end
  %116 = load i32, i32* %state, align 4
  %cmp212 = icmp ne i32 %116, 2
  br i1 %cmp212, label %if.then.214, label %if.end.215

if.then.214:                                      ; preds = %sw.bb.211
  %117 = load i32, i32* %nAtts, align 4
  ret i32 %117

if.end.215:                                       ; preds = %sw.bb.211
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.215, %if.end.210, %if.end.194, %if.end.119, %if.end.111, %if.end.85, %if.end.63, %if.end.47, %if.end.31, %if.end.15
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %118 = load i8*, i8** %ptr.addr, align 8
  %add.ptr216 = getelementptr i8, i8* %118, i64 2
  store i8* %add.ptr216, i8** %ptr.addr, align 8
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_charRefNumber(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  %c = alloca i32, align 4
  %c47 = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 0, i32* %result, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 4
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 1
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %5 = load i8*, i8** %ptr.addr, align 8
  %add.ptr6 = getelementptr i8, i8* %5, i64 2
  store i8* %add.ptr6, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %7 to i32
  %cmp9 = icmp eq i32 %conv8, 0
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %9 to i32
  %cmp13 = icmp eq i32 %conv12, 59
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp13, %land.rhs ]
  %lnot = xor i1 %10, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %12 to i32
  %cmp17 = icmp eq i32 %conv16, 0
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %14 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv20, %cond.true ], [ -1, %cond.false ]
  store i32 %cond, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  switch i32 %15, label %sw.epilog [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 65, label %sw.bb.21
    i32 66, label %sw.bb.21
    i32 67, label %sw.bb.21
    i32 68, label %sw.bb.21
    i32 69, label %sw.bb.21
    i32 70, label %sw.bb.21
    i32 97, label %sw.bb.25
    i32 98, label %sw.bb.25
    i32 99, label %sw.bb.25
    i32 100, label %sw.bb.25
    i32 101, label %sw.bb.25
    i32 102, label %sw.bb.25
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %16 = load i32, i32* %result, align 4
  %shl = shl i32 %16, 4
  store i32 %shl, i32* %result, align 4
  %17 = load i32, i32* %c, align 4
  %sub = sub i32 %17, 48
  %18 = load i32, i32* %result, align 4
  %or = or i32 %18, %sub
  store i32 %or, i32* %result, align 4
  br label %sw.epilog

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %19 = load i32, i32* %result, align 4
  %shl22 = shl i32 %19, 4
  store i32 %shl22, i32* %result, align 4
  %20 = load i32, i32* %c, align 4
  %sub23 = sub i32 %20, 65
  %add = add i32 10, %sub23
  %21 = load i32, i32* %result, align 4
  %add24 = add i32 %21, %add
  store i32 %add24, i32* %result, align 4
  br label %sw.epilog

sw.bb.25:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %22 = load i32, i32* %result, align 4
  %shl26 = shl i32 %22, 4
  store i32 %shl26, i32* %result, align 4
  %23 = load i32, i32* %c, align 4
  %sub27 = sub i32 %23, 97
  %add28 = add i32 10, %sub27
  %24 = load i32, i32* %result, align 4
  %add29 = add i32 %24, %add28
  store i32 %add29, i32* %result, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %sw.bb.25, %sw.bb.21, %sw.bb
  %25 = load i32, i32* %result, align 4
  %cmp30 = icmp sge i32 %25, 1114112
  br i1 %cmp30, label %if.then.32, label %if.end

if.then.32:                                       ; preds = %sw.epilog
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.epilog
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %26 = load i8*, i8** %ptr.addr, align 8
  %add.ptr33 = getelementptr i8, i8* %26, i64 2
  store i8* %add.ptr33, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.67

if.else:                                          ; preds = %land.lhs.true, %entry
  br label %for.cond.34

for.cond.34:                                      ; preds = %for.inc.64, %if.else
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx35 = getelementptr i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx35, align 1
  %conv36 = sext i8 %28 to i32
  %cmp37 = icmp eq i32 %conv36, 0
  br i1 %cmp37, label %land.rhs.39, label %land.end.44

land.rhs.39:                                      ; preds = %for.cond.34
  %29 = load i8*, i8** %ptr.addr, align 8
  %arrayidx40 = getelementptr i8, i8* %29, i64 0
  %30 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %30 to i32
  %cmp42 = icmp eq i32 %conv41, 59
  br label %land.end.44

land.end.44:                                      ; preds = %land.rhs.39, %for.cond.34
  %31 = phi i1 [ false, %for.cond.34 ], [ %cmp42, %land.rhs.39 ]
  %lnot45 = xor i1 %31, true
  br i1 %lnot45, label %for.body.46, label %for.end.66

for.body.46:                                      ; preds = %land.end.44
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %33 to i32
  %cmp50 = icmp eq i32 %conv49, 0
  br i1 %cmp50, label %cond.true.52, label %cond.false.55

cond.true.52:                                     ; preds = %for.body.46
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx53 = getelementptr i8, i8* %34, i64 0
  %35 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %35 to i32
  br label %cond.end.56

cond.false.55:                                    ; preds = %for.body.46
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.55, %cond.true.52
  %cond57 = phi i32 [ %conv54, %cond.true.52 ], [ -1, %cond.false.55 ]
  store i32 %cond57, i32* %c47, align 4
  %36 = load i32, i32* %result, align 4
  %mul = mul i32 %36, 10
  store i32 %mul, i32* %result, align 4
  %37 = load i32, i32* %c47, align 4
  %sub58 = sub i32 %37, 48
  %38 = load i32, i32* %result, align 4
  %add59 = add i32 %38, %sub58
  store i32 %add59, i32* %result, align 4
  %39 = load i32, i32* %result, align 4
  %cmp60 = icmp sge i32 %39, 1114112
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %cond.end.56
  store i32 -1, i32* %retval
  br label %return

if.end.63:                                        ; preds = %cond.end.56
  br label %for.inc.64

for.inc.64:                                       ; preds = %if.end.63
  %40 = load i8*, i8** %ptr.addr, align 8
  %add.ptr65 = getelementptr i8, i8* %40, i64 2
  store i8* %add.ptr65, i8** %ptr.addr, align 8
  br label %for.cond.34

for.end.66:                                       ; preds = %land.end.44
  br label %if.end.67

if.end.67:                                        ; preds = %for.end.66, %for.end
  %41 = load i32, i32* %result, align 4
  %call = call i32 @checkCharRefNumber(i32 %41)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.67, %if.then.62, %if.then.32
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_predefinedEntityName(%struct.encoding* %enc, i8* %ptr, i8* %end) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %div = sdiv i64 %sub.ptr.sub, 2
  switch i64 %div, label %sw.epilog.137 [
    i64 2, label %sw.bb
    i64 3, label %sw.bb.15
    i64 4, label %sw.bb.51
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %2, i64 2
  %arrayidx = getelementptr i8, i8* %add.ptr, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb
  %4 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %4, i64 2
  %arrayidx3 = getelementptr i8, i8* %add.ptr2, i64 0
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 116
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %7 to i32
  %cmp9 = icmp eq i32 %conv8, 0
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %9 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv12, %cond.true ], [ -1, %cond.false ]
  switch i32 %cond, label %sw.epilog [
    i32 108, label %sw.bb.13
    i32 103, label %sw.bb.14
  ]

sw.bb.13:                                         ; preds = %cond.end
  store i32 60, i32* %retval
  br label %return

sw.bb.14:                                         ; preds = %cond.end
  store i32 62, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %cond.end
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %land.lhs.true, %sw.bb
  br label %sw.epilog.137

sw.bb.15:                                         ; preds = %entry
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %11 to i32
  %cmp18 = icmp eq i32 %conv17, 0
  br i1 %cmp18, label %land.lhs.true.20, label %if.end.50

land.lhs.true.20:                                 ; preds = %sw.bb.15
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx21 = getelementptr i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %13 to i32
  %cmp23 = icmp eq i32 %conv22, 97
  br i1 %cmp23, label %if.then.25, label %if.end.50

if.then.25:                                       ; preds = %land.lhs.true.20
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %14, i64 2
  store i8* %add.ptr26, i8** %ptr.addr, align 8
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx27 = getelementptr i8, i8* %15, i64 1
  %16 = load i8, i8* %arrayidx27, align 1
  %conv28 = sext i8 %16 to i32
  %cmp29 = icmp eq i32 %conv28, 0
  br i1 %cmp29, label %land.lhs.true.31, label %if.end.49

land.lhs.true.31:                                 ; preds = %if.then.25
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx32 = getelementptr i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %18 to i32
  %cmp34 = icmp eq i32 %conv33, 109
  br i1 %cmp34, label %if.then.36, label %if.end.49

if.then.36:                                       ; preds = %land.lhs.true.31
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr37, i8** %ptr.addr, align 8
  %20 = load i8*, i8** %ptr.addr, align 8
  %arrayidx38 = getelementptr i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %21 to i32
  %cmp40 = icmp eq i32 %conv39, 0
  br i1 %cmp40, label %land.lhs.true.42, label %if.end.48

land.lhs.true.42:                                 ; preds = %if.then.36
  %22 = load i8*, i8** %ptr.addr, align 8
  %arrayidx43 = getelementptr i8, i8* %22, i64 0
  %23 = load i8, i8* %arrayidx43, align 1
  %conv44 = sext i8 %23 to i32
  %cmp45 = icmp eq i32 %conv44, 112
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %land.lhs.true.42
  store i32 38, i32* %retval
  br label %return

if.end.48:                                        ; preds = %land.lhs.true.42, %if.then.36
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %land.lhs.true.31, %if.then.25
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %land.lhs.true.20, %sw.bb.15
  br label %sw.epilog.137

sw.bb.51:                                         ; preds = %entry
  %24 = load i8*, i8** %ptr.addr, align 8
  %arrayidx52 = getelementptr i8, i8* %24, i64 1
  %25 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %25 to i32
  %cmp54 = icmp eq i32 %conv53, 0
  br i1 %cmp54, label %cond.true.56, label %cond.false.59

cond.true.56:                                     ; preds = %sw.bb.51
  %26 = load i8*, i8** %ptr.addr, align 8
  %arrayidx57 = getelementptr i8, i8* %26, i64 0
  %27 = load i8, i8* %arrayidx57, align 1
  %conv58 = sext i8 %27 to i32
  br label %cond.end.60

cond.false.59:                                    ; preds = %sw.bb.51
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.59, %cond.true.56
  %cond61 = phi i32 [ %conv58, %cond.true.56 ], [ -1, %cond.false.59 ]
  switch i32 %cond61, label %sw.epilog.136 [
    i32 113, label %sw.bb.62
    i32 97, label %sw.bb.99
  ]

sw.bb.62:                                         ; preds = %cond.end.60
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr63 = getelementptr i8, i8* %28, i64 2
  store i8* %add.ptr63, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %arrayidx64 = getelementptr i8, i8* %29, i64 1
  %30 = load i8, i8* %arrayidx64, align 1
  %conv65 = sext i8 %30 to i32
  %cmp66 = icmp eq i32 %conv65, 0
  br i1 %cmp66, label %land.lhs.true.68, label %if.end.98

land.lhs.true.68:                                 ; preds = %sw.bb.62
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx69 = getelementptr i8, i8* %31, i64 0
  %32 = load i8, i8* %arrayidx69, align 1
  %conv70 = sext i8 %32 to i32
  %cmp71 = icmp eq i32 %conv70, 117
  br i1 %cmp71, label %if.then.73, label %if.end.98

if.then.73:                                       ; preds = %land.lhs.true.68
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr74 = getelementptr i8, i8* %33, i64 2
  store i8* %add.ptr74, i8** %ptr.addr, align 8
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx75 = getelementptr i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx75, align 1
  %conv76 = sext i8 %35 to i32
  %cmp77 = icmp eq i32 %conv76, 0
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.97

land.lhs.true.79:                                 ; preds = %if.then.73
  %36 = load i8*, i8** %ptr.addr, align 8
  %arrayidx80 = getelementptr i8, i8* %36, i64 0
  %37 = load i8, i8* %arrayidx80, align 1
  %conv81 = sext i8 %37 to i32
  %cmp82 = icmp eq i32 %conv81, 111
  br i1 %cmp82, label %if.then.84, label %if.end.97

if.then.84:                                       ; preds = %land.lhs.true.79
  %38 = load i8*, i8** %ptr.addr, align 8
  %add.ptr85 = getelementptr i8, i8* %38, i64 2
  store i8* %add.ptr85, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %ptr.addr, align 8
  %arrayidx86 = getelementptr i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx86, align 1
  %conv87 = sext i8 %40 to i32
  %cmp88 = icmp eq i32 %conv87, 0
  br i1 %cmp88, label %land.lhs.true.90, label %if.end.96

land.lhs.true.90:                                 ; preds = %if.then.84
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx91 = getelementptr i8, i8* %41, i64 0
  %42 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %42 to i32
  %cmp93 = icmp eq i32 %conv92, 116
  br i1 %cmp93, label %if.then.95, label %if.end.96

if.then.95:                                       ; preds = %land.lhs.true.90
  store i32 34, i32* %retval
  br label %return

if.end.96:                                        ; preds = %land.lhs.true.90, %if.then.84
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %land.lhs.true.79, %if.then.73
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %land.lhs.true.68, %sw.bb.62
  br label %sw.epilog.136

sw.bb.99:                                         ; preds = %cond.end.60
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr100 = getelementptr i8, i8* %43, i64 2
  store i8* %add.ptr100, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %ptr.addr, align 8
  %arrayidx101 = getelementptr i8, i8* %44, i64 1
  %45 = load i8, i8* %arrayidx101, align 1
  %conv102 = sext i8 %45 to i32
  %cmp103 = icmp eq i32 %conv102, 0
  br i1 %cmp103, label %land.lhs.true.105, label %if.end.135

land.lhs.true.105:                                ; preds = %sw.bb.99
  %46 = load i8*, i8** %ptr.addr, align 8
  %arrayidx106 = getelementptr i8, i8* %46, i64 0
  %47 = load i8, i8* %arrayidx106, align 1
  %conv107 = sext i8 %47 to i32
  %cmp108 = icmp eq i32 %conv107, 112
  br i1 %cmp108, label %if.then.110, label %if.end.135

if.then.110:                                      ; preds = %land.lhs.true.105
  %48 = load i8*, i8** %ptr.addr, align 8
  %add.ptr111 = getelementptr i8, i8* %48, i64 2
  store i8* %add.ptr111, i8** %ptr.addr, align 8
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx112 = getelementptr i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx112, align 1
  %conv113 = sext i8 %50 to i32
  %cmp114 = icmp eq i32 %conv113, 0
  br i1 %cmp114, label %land.lhs.true.116, label %if.end.134

land.lhs.true.116:                                ; preds = %if.then.110
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx117 = getelementptr i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx117, align 1
  %conv118 = sext i8 %52 to i32
  %cmp119 = icmp eq i32 %conv118, 111
  br i1 %cmp119, label %if.then.121, label %if.end.134

if.then.121:                                      ; preds = %land.lhs.true.116
  %53 = load i8*, i8** %ptr.addr, align 8
  %add.ptr122 = getelementptr i8, i8* %53, i64 2
  store i8* %add.ptr122, i8** %ptr.addr, align 8
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx123 = getelementptr i8, i8* %54, i64 1
  %55 = load i8, i8* %arrayidx123, align 1
  %conv124 = sext i8 %55 to i32
  %cmp125 = icmp eq i32 %conv124, 0
  br i1 %cmp125, label %land.lhs.true.127, label %if.end.133

land.lhs.true.127:                                ; preds = %if.then.121
  %56 = load i8*, i8** %ptr.addr, align 8
  %arrayidx128 = getelementptr i8, i8* %56, i64 0
  %57 = load i8, i8* %arrayidx128, align 1
  %conv129 = sext i8 %57 to i32
  %cmp130 = icmp eq i32 %conv129, 115
  br i1 %cmp130, label %if.then.132, label %if.end.133

if.then.132:                                      ; preds = %land.lhs.true.127
  store i32 39, i32* %retval
  br label %return

if.end.133:                                       ; preds = %land.lhs.true.127, %if.then.121
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %land.lhs.true.116, %if.then.110
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %land.lhs.true.105, %sw.bb.99
  br label %sw.epilog.136

sw.epilog.136:                                    ; preds = %cond.end.60, %if.end.135, %if.end.98
  br label %sw.epilog.137

sw.epilog.137:                                    ; preds = %sw.epilog.136, %entry, %if.end.50, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog.137, %if.then.132, %if.then.95, %if.then.47, %sw.bb.14, %sw.bb.13
  %58 = load i32, i32* %retval
  ret i32 %58
}

; Function Attrs: nounwind uwtable
define internal void @little2_updatePosition(%struct.encoding* %enc, i8* %ptr, i8* %end, %struct.position* %pos) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %pos.addr = alloca %struct.position*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %struct.position* %pos, %struct.position** %pos.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.7
    i32 7, label %sw.bb.9
    i32 10, label %sw.bb.11
    i32 9, label %sw.bb.13
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %13, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %cond.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr8 = getelementptr i8, i8* %14, i64 3
  store i8* %add.ptr8, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %cond.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %15, i64 4
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.11:                                         ; preds = %cond.end
  %16 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber = getelementptr inbounds %struct.position, %struct.position* %16, i32 0, i32 1
  store i64 -1, i64* %columnNumber, align 8
  %17 = load %struct.position*, %struct.position** %pos.addr, align 8
  %lineNumber = getelementptr inbounds %struct.position, %struct.position* %17, i32 0, i32 0
  %18 = load i64, i64* %lineNumber, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %lineNumber, align 8
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr12 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr12, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.13:                                         ; preds = %cond.end
  %20 = load %struct.position*, %struct.position** %pos.addr, align 8
  %lineNumber14 = getelementptr inbounds %struct.position, %struct.position* %20, i32 0, i32 0
  %21 = load i64, i64* %lineNumber14, align 8
  %inc15 = add i64 %21, 1
  store i64 %inc15, i64* %lineNumber14, align 8
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %22, i64 2
  store i8* %add.ptr16, i8** %ptr.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8*, i8** %end.addr, align 8
  %cmp17 = icmp ne i8* %23, %24
  br i1 %cmp17, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.13
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %25, i64 1
  %26 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %26 to i32
  %cmp21 = icmp eq i32 %conv20, 0
  br i1 %cmp21, label %cond.true.23, label %cond.false.28

cond.true.23:                                     ; preds = %land.lhs.true
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8, i8* %27, align 1
  %idxprom24 = zext i8 %28 to i64
  %29 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %30 = bitcast %struct.encoding* %29 to %struct.normal_encoding*
  %type25 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %30, i32 0, i32 1
  %arrayidx26 = getelementptr [256 x i8], [256 x i8]* %type25, i32 0, i64 %idxprom24
  %31 = load i8, i8* %arrayidx26, align 1
  %conv27 = zext i8 %31 to i32
  br label %cond.end.32

cond.false.28:                                    ; preds = %land.lhs.true
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx29 = getelementptr i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx29, align 1
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx30 = getelementptr i8, i8* %34, i64 0
  %35 = load i8, i8* %arrayidx30, align 1
  %call31 = call i32 @unicode_byte_type(i8 signext %33, i8 signext %35)
  br label %cond.end.32

cond.end.32:                                      ; preds = %cond.false.28, %cond.true.23
  %cond33 = phi i32 [ %conv27, %cond.true.23 ], [ %call31, %cond.false.28 ]
  %cmp34 = icmp eq i32 %cond33, 10
  br i1 %cmp34, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.32
  %36 = load i8*, i8** %ptr.addr, align 8
  %add.ptr36 = getelementptr i8, i8* %36, i64 2
  store i8* %add.ptr36, i8** %ptr.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.32, %sw.bb.13
  %37 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber37 = getelementptr inbounds %struct.position, %struct.position* %37, i32 0, i32 1
  store i64 -1, i64* %columnNumber37, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %38 = load i8*, i8** %ptr.addr, align 8
  %add.ptr38 = getelementptr i8, i8* %38, i64 2
  store i8* %add.ptr38, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb.11, %sw.bb.9, %sw.bb.7, %sw.bb
  %39 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber39 = getelementptr inbounds %struct.position, %struct.position* %39, i32 0, i32 1
  %40 = load i64, i64* %columnNumber39, align 8
  %inc40 = add i64 %40, 1
  store i64 %inc40, i64* %columnNumber39, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_isPublicId(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %badPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %badPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %badPtr, i8*** %badPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %add.ptr1 = getelementptr i8, i8* %1, i64 -2
  store i8* %add.ptr1, i8** %end.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8, i8* %6, align 1
  %idxprom = zext i8 %7 to i64
  %8 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %9 = bitcast %struct.encoding* %8 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %9, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %10 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %10 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx6, align 1
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %12, i8 signext %14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 25, label %sw.bb
    i32 24, label %sw.bb
    i32 27, label %sw.bb
    i32 13, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 17, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 18, label %sw.bb
    i32 16, label %sw.bb
    i32 33, label %sw.bb
    i32 30, label %sw.bb
    i32 19, label %sw.bb
    i32 23, label %sw.bb
    i32 21, label %sw.bb.8
    i32 26, label %sw.bb.17
    i32 22, label %sw.bb.17
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  br label %sw.epilog.42

sw.bb.8:                                          ; preds = %cond.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx9 = getelementptr i8, i8* %15, i64 1
  %16 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %16 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.8
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx13 = getelementptr i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %18 to i32
  %cmp15 = icmp eq i32 %conv14, 9
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %19, i8** %20, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.bb.8
  br label %sw.epilog.42

sw.bb.17:                                         ; preds = %cond.end, %cond.end
  %21 = load i8*, i8** %ptr.addr, align 8
  %arrayidx18 = getelementptr i8, i8* %21, i64 1
  %22 = load i8, i8* %arrayidx18, align 1
  %conv19 = sext i8 %22 to i32
  %cmp20 = icmp eq i32 %conv19, 0
  br i1 %cmp20, label %cond.true.22, label %cond.false.25

cond.true.22:                                     ; preds = %sw.bb.17
  %23 = load i8*, i8** %ptr.addr, align 8
  %arrayidx23 = getelementptr i8, i8* %23, i64 0
  %24 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %24 to i32
  br label %cond.end.26

cond.false.25:                                    ; preds = %sw.bb.17
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.25, %cond.true.22
  %cond27 = phi i32 [ %conv24, %cond.true.22 ], [ -1, %cond.false.25 ]
  %and = and i32 %cond27, -128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.29, label %if.then.28

if.then.28:                                       ; preds = %cond.end.26
  br label %sw.epilog.42

if.end.29:                                        ; preds = %cond.end.26
  br label %sw.default

sw.default:                                       ; preds = %cond.end, %if.end.29
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx30 = getelementptr i8, i8* %25, i64 1
  %26 = load i8, i8* %arrayidx30, align 1
  %conv31 = sext i8 %26 to i32
  %cmp32 = icmp eq i32 %conv31, 0
  br i1 %cmp32, label %cond.true.34, label %cond.false.37

cond.true.34:                                     ; preds = %sw.default
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx35 = getelementptr i8, i8* %27, i64 0
  %28 = load i8, i8* %arrayidx35, align 1
  %conv36 = sext i8 %28 to i32
  br label %cond.end.38

cond.false.37:                                    ; preds = %sw.default
  br label %cond.end.38

cond.end.38:                                      ; preds = %cond.false.37, %cond.true.34
  %cond39 = phi i32 [ %conv36, %cond.true.34 ], [ -1, %cond.false.37 ]
  switch i32 %cond39, label %sw.default.41 [
    i32 36, label %sw.bb.40
    i32 64, label %sw.bb.40
  ]

sw.bb.40:                                         ; preds = %cond.end.38, %cond.end.38
  br label %sw.epilog

sw.default.41:                                    ; preds = %cond.end.38
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %29, i8** %30, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.40
  br label %sw.epilog.42

sw.epilog.42:                                     ; preds = %sw.epilog, %if.then.28, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.42
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr43 = getelementptr i8, i8* %31, i64 2
  store i8* %add.ptr43, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.default.41, %if.then
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal void @little2_toUtf8(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i8** %toP, i8* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i8**, align 8
  %toLim.addr = alloca i8*, align 8
  %from = alloca i8*, align 8
  %plane = alloca i32, align 4
  %lo2 = alloca i8, align 1
  %lo = alloca i8, align 1
  %hi = alloca i8, align 1
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i8** %toP, i8*** %toP.addr, align 8
  store i8* %toLim, i8** %toLim.addr, align 8
  %0 = load i8**, i8*** %fromP.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %from, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %from, align 8
  %3 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp ne i8* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %from, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %lo, align 1
  %6 = load i8*, i8** %from, align 8
  %arrayidx1 = getelementptr i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx1, align 1
  store i8 %7, i8* %hi, align 1
  %8 = load i8, i8* %hi, align 1
  %conv = zext i8 %8 to i32
  switch i32 %conv, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.9
    i32 2, label %sw.bb.9
    i32 3, label %sw.bb.9
    i32 4, label %sw.bb.9
    i32 5, label %sw.bb.9
    i32 6, label %sw.bb.9
    i32 7, label %sw.bb.9
    i32 216, label %sw.bb.49
    i32 217, label %sw.bb.49
    i32 218, label %sw.bb.49
    i32 219, label %sw.bb.49
  ]

sw.bb:                                            ; preds = %for.body
  %9 = load i8, i8* %lo, align 1
  %conv2 = zext i8 %9 to i32
  %cmp3 = icmp slt i32 %conv2, 128
  br i1 %cmp3, label %if.then, label %if.end.8

if.then:                                          ; preds = %sw.bb
  %10 = load i8**, i8*** %toP.addr, align 8
  %11 = load i8*, i8** %10, align 8
  %12 = load i8*, i8** %toLim.addr, align 8
  %cmp5 = icmp eq i8* %11, %12
  br i1 %cmp5, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then
  %13 = load i8*, i8** %from, align 8
  %14 = load i8**, i8*** %fromP.addr, align 8
  store i8* %13, i8** %14, align 8
  br label %return

if.end:                                           ; preds = %if.then
  %15 = load i8, i8* %lo, align 1
  %16 = load i8**, i8*** %toP.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %incdec.ptr = getelementptr i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %16, align 8
  store i8 %15, i8* %17, align 1
  br label %sw.epilog

if.end.8:                                         ; preds = %sw.bb
  br label %sw.bb.9

sw.bb.9:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %if.end.8
  %18 = load i8*, i8** %toLim.addr, align 8
  %19 = load i8**, i8*** %toP.addr, align 8
  %20 = load i8*, i8** %19, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp10 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %sw.bb.9
  %21 = load i8*, i8** %from, align 8
  %22 = load i8**, i8*** %fromP.addr, align 8
  store i8* %21, i8** %22, align 8
  br label %return

if.end.13:                                        ; preds = %sw.bb.9
  %23 = load i8, i8* %lo, align 1
  %conv14 = zext i8 %23 to i32
  %shr = ashr i32 %conv14, 6
  %24 = load i8, i8* %hi, align 1
  %conv15 = zext i8 %24 to i32
  %shl = shl i32 %conv15, 2
  %or = or i32 %shr, %shl
  %or16 = or i32 %or, 192
  %conv17 = trunc i32 %or16 to i8
  %25 = load i8**, i8*** %toP.addr, align 8
  %26 = load i8*, i8** %25, align 8
  %incdec.ptr18 = getelementptr i8, i8* %26, i32 1
  store i8* %incdec.ptr18, i8** %25, align 8
  store i8 %conv17, i8* %26, align 1
  %27 = load i8, i8* %lo, align 1
  %conv19 = zext i8 %27 to i32
  %and = and i32 %conv19, 63
  %or20 = or i32 %and, 128
  %conv21 = trunc i32 %or20 to i8
  %28 = load i8**, i8*** %toP.addr, align 8
  %29 = load i8*, i8** %28, align 8
  %incdec.ptr22 = getelementptr i8, i8* %29, i32 1
  store i8* %incdec.ptr22, i8** %28, align 8
  store i8 %conv21, i8* %29, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %30 = load i8*, i8** %toLim.addr, align 8
  %31 = load i8**, i8*** %toP.addr, align 8
  %32 = load i8*, i8** %31, align 8
  %sub.ptr.lhs.cast23 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast24 = ptrtoint i8* %32 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %cmp26 = icmp slt i64 %sub.ptr.sub25, 3
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %sw.default
  %33 = load i8*, i8** %from, align 8
  %34 = load i8**, i8*** %fromP.addr, align 8
  store i8* %33, i8** %34, align 8
  br label %return

if.end.29:                                        ; preds = %sw.default
  %35 = load i8, i8* %hi, align 1
  %conv30 = zext i8 %35 to i32
  %shr31 = ashr i32 %conv30, 4
  %or32 = or i32 %shr31, 224
  %conv33 = trunc i32 %or32 to i8
  %36 = load i8**, i8*** %toP.addr, align 8
  %37 = load i8*, i8** %36, align 8
  %incdec.ptr34 = getelementptr i8, i8* %37, i32 1
  store i8* %incdec.ptr34, i8** %36, align 8
  store i8 %conv33, i8* %37, align 1
  %38 = load i8, i8* %hi, align 1
  %conv35 = zext i8 %38 to i32
  %and36 = and i32 %conv35, 15
  %shl37 = shl i32 %and36, 2
  %39 = load i8, i8* %lo, align 1
  %conv38 = zext i8 %39 to i32
  %shr39 = ashr i32 %conv38, 6
  %or40 = or i32 %shl37, %shr39
  %or41 = or i32 %or40, 128
  %conv42 = trunc i32 %or41 to i8
  %40 = load i8**, i8*** %toP.addr, align 8
  %41 = load i8*, i8** %40, align 8
  %incdec.ptr43 = getelementptr i8, i8* %41, i32 1
  store i8* %incdec.ptr43, i8** %40, align 8
  store i8 %conv42, i8* %41, align 1
  %42 = load i8, i8* %lo, align 1
  %conv44 = zext i8 %42 to i32
  %and45 = and i32 %conv44, 63
  %or46 = or i32 %and45, 128
  %conv47 = trunc i32 %or46 to i8
  %43 = load i8**, i8*** %toP.addr, align 8
  %44 = load i8*, i8** %43, align 8
  %incdec.ptr48 = getelementptr i8, i8* %44, i32 1
  store i8* %incdec.ptr48, i8** %43, align 8
  store i8 %conv47, i8* %44, align 1
  br label %sw.epilog

sw.bb.49:                                         ; preds = %for.body, %for.body, %for.body, %for.body
  %45 = load i8*, i8** %toLim.addr, align 8
  %46 = load i8**, i8*** %toP.addr, align 8
  %47 = load i8*, i8** %46, align 8
  %sub.ptr.lhs.cast50 = ptrtoint i8* %45 to i64
  %sub.ptr.rhs.cast51 = ptrtoint i8* %47 to i64
  %sub.ptr.sub52 = sub i64 %sub.ptr.lhs.cast50, %sub.ptr.rhs.cast51
  %cmp53 = icmp slt i64 %sub.ptr.sub52, 4
  br i1 %cmp53, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %sw.bb.49
  %48 = load i8*, i8** %from, align 8
  %49 = load i8**, i8*** %fromP.addr, align 8
  store i8* %48, i8** %49, align 8
  br label %return

if.end.56:                                        ; preds = %sw.bb.49
  %50 = load i8, i8* %hi, align 1
  %conv57 = zext i8 %50 to i32
  %and58 = and i32 %conv57, 3
  %shl59 = shl i32 %and58, 2
  %51 = load i8, i8* %lo, align 1
  %conv60 = zext i8 %51 to i32
  %shr61 = ashr i32 %conv60, 6
  %and62 = and i32 %shr61, 3
  %or63 = or i32 %shl59, %and62
  %add = add i32 %or63, 1
  store i32 %add, i32* %plane, align 4
  %52 = load i32, i32* %plane, align 4
  %shr64 = ashr i32 %52, 2
  %or65 = or i32 %shr64, 240
  %conv66 = trunc i32 %or65 to i8
  %53 = load i8**, i8*** %toP.addr, align 8
  %54 = load i8*, i8** %53, align 8
  %incdec.ptr67 = getelementptr i8, i8* %54, i32 1
  store i8* %incdec.ptr67, i8** %53, align 8
  store i8 %conv66, i8* %54, align 1
  %55 = load i8, i8* %lo, align 1
  %conv68 = zext i8 %55 to i32
  %shr69 = ashr i32 %conv68, 2
  %and70 = and i32 %shr69, 15
  %56 = load i32, i32* %plane, align 4
  %and71 = and i32 %56, 3
  %shl72 = shl i32 %and71, 4
  %or73 = or i32 %and70, %shl72
  %or74 = or i32 %or73, 128
  %conv75 = trunc i32 %or74 to i8
  %57 = load i8**, i8*** %toP.addr, align 8
  %58 = load i8*, i8** %57, align 8
  %incdec.ptr76 = getelementptr i8, i8* %58, i32 1
  store i8* %incdec.ptr76, i8** %57, align 8
  store i8 %conv75, i8* %58, align 1
  %59 = load i8*, i8** %from, align 8
  %add.ptr = getelementptr i8, i8* %59, i64 2
  store i8* %add.ptr, i8** %from, align 8
  %60 = load i8*, i8** %from, align 8
  %arrayidx77 = getelementptr i8, i8* %60, i64 0
  %61 = load i8, i8* %arrayidx77, align 1
  store i8 %61, i8* %lo2, align 1
  %62 = load i8, i8* %lo, align 1
  %conv78 = zext i8 %62 to i32
  %and79 = and i32 %conv78, 3
  %shl80 = shl i32 %and79, 4
  %63 = load i8*, i8** %from, align 8
  %arrayidx81 = getelementptr i8, i8* %63, i64 1
  %64 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %64 to i32
  %and83 = and i32 %conv82, 3
  %shl84 = shl i32 %and83, 2
  %or85 = or i32 %shl80, %shl84
  %65 = load i8, i8* %lo2, align 1
  %conv86 = zext i8 %65 to i32
  %shr87 = ashr i32 %conv86, 6
  %or88 = or i32 %or85, %shr87
  %or89 = or i32 %or88, 128
  %conv90 = trunc i32 %or89 to i8
  %66 = load i8**, i8*** %toP.addr, align 8
  %67 = load i8*, i8** %66, align 8
  %incdec.ptr91 = getelementptr i8, i8* %67, i32 1
  store i8* %incdec.ptr91, i8** %66, align 8
  store i8 %conv90, i8* %67, align 1
  %68 = load i8, i8* %lo2, align 1
  %conv92 = zext i8 %68 to i32
  %and93 = and i32 %conv92, 63
  %or94 = or i32 %and93, 128
  %conv95 = trunc i32 %or94 to i8
  %69 = load i8**, i8*** %toP.addr, align 8
  %70 = load i8*, i8** %69, align 8
  %incdec.ptr96 = getelementptr i8, i8* %70, i32 1
  store i8* %incdec.ptr96, i8** %69, align 8
  store i8 %conv95, i8* %70, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.56, %if.end.29, %if.end.13, %if.end
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %71 = load i8*, i8** %from, align 8
  %add.ptr97 = getelementptr i8, i8* %71, i64 2
  store i8* %add.ptr97, i8** %from, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %72 = load i8*, i8** %from, align 8
  %73 = load i8**, i8*** %fromP.addr, align 8
  store i8* %72, i8** %73, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then.55, %if.then.28, %if.then.12, %if.then.7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @little2_toUtf16(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i16** %toP, i16* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i16**, align 8
  %toLim.addr = alloca i16*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i16** %toP, i16*** %toP.addr, align 8
  store i16* %toLim, i16** %toLim.addr, align 8
  %0 = load i8*, i8** %fromLim.addr, align 8
  %1 = load i8**, i8*** %fromP.addr, align 8
  %2 = load i8*, i8** %1, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %3 = load i16*, i16** %toLim.addr, align 8
  %4 = load i16**, i16*** %toP.addr, align 8
  %5 = load i16*, i16** %4, align 8
  %sub.ptr.lhs.cast1 = ptrtoint i16* %3 to i64
  %sub.ptr.rhs.cast2 = ptrtoint i16* %5 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub3, 2
  %shl = shl i64 %sub.ptr.div, 1
  %cmp = icmp sgt i64 %sub.ptr.sub, %shl
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %6 = load i8*, i8** %fromLim.addr, align 8
  %add.ptr = getelementptr i8, i8* %6, i64 -2
  %arrayidx = getelementptr i8, i8* %add.ptr, i64 1
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 248
  %cmp4 = icmp eq i32 %and, 216
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load i8*, i8** %fromLim.addr, align 8
  %add.ptr6 = getelementptr i8, i8* %8, i64 -2
  store i8* %add.ptr6, i8** %fromLim.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i8**, i8*** %fromP.addr, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = load i8*, i8** %fromLim.addr, align 8
  %cmp7 = icmp ne i8* %10, %11
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %12 = load i16**, i16*** %toP.addr, align 8
  %13 = load i16*, i16** %12, align 8
  %14 = load i16*, i16** %toLim.addr, align 8
  %cmp9 = icmp ne i16* %13, %14
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %15 = phi i1 [ false, %for.cond ], [ %cmp9, %land.rhs ]
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %16 = load i8**, i8*** %fromP.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %arrayidx11 = getelementptr i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %18 to i32
  %shl13 = shl i32 %conv12, 8
  %19 = load i8**, i8*** %fromP.addr, align 8
  %20 = load i8*, i8** %19, align 8
  %arrayidx14 = getelementptr i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %21 to i32
  %or = or i32 %shl13, %conv15
  %conv16 = trunc i32 %or to i16
  %22 = load i16**, i16*** %toP.addr, align 8
  %23 = load i16*, i16** %22, align 8
  %incdec.ptr = getelementptr i16, i16* %23, i32 1
  store i16* %incdec.ptr, i16** %22, align 8
  store i16 %conv16, i16* %23, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i8**, i8*** %fromP.addr, align 8
  %25 = load i8*, i8** %24, align 8
  %add.ptr17 = getelementptr i8, i8* %25, i64 2
  store i8* %add.ptr17, i8** %24, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @unicode_byte_type(i8 signext %hi, i8 signext %lo) #0 {
entry:
  %retval = alloca i32, align 4
  %hi.addr = alloca i8, align 1
  %lo.addr = alloca i8, align 1
  store i8 %hi, i8* %hi.addr, align 1
  store i8 %lo, i8* %lo.addr, align 1
  %0 = load i8, i8* %hi.addr, align 1
  %conv = zext i8 %0 to i32
  switch i32 %conv, label %sw.epilog.5 [
    i32 216, label %sw.bb
    i32 217, label %sw.bb
    i32 218, label %sw.bb
    i32 219, label %sw.bb
    i32 220, label %sw.bb.1
    i32 221, label %sw.bb.1
    i32 222, label %sw.bb.1
    i32 223, label %sw.bb.1
    i32 255, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry
  store i32 7, i32* %retval
  br label %return

sw.bb.1:                                          ; preds = %entry, %entry, %entry, %entry
  store i32 8, i32* %retval
  br label %return

sw.bb.2:                                          ; preds = %entry
  %1 = load i8, i8* %lo.addr, align 1
  %conv3 = zext i8 %1 to i32
  switch i32 %conv3, label %sw.epilog [
    i32 255, label %sw.bb.4
    i32 254, label %sw.bb.4
  ]

sw.bb.4:                                          ; preds = %sw.bb.2, %sw.bb.2
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.2
  br label %sw.epilog.5

sw.epilog.5:                                      ; preds = %entry, %sw.epilog
  store i32 29, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog.5, %sw.bb.4, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %retval
  ret i32 %2
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanLit(i32 %open, %struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %open.addr = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %t = alloca i32, align 4
  store i32 %open, i32* %open.addr, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  switch i32 %13, label %sw.default.54 [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.9
    i32 7, label %sw.bb.18
    i32 0, label %sw.bb.27
    i32 1, label %sw.bb.27
    i32 8, label %sw.bb.27
    i32 12, label %sw.bb.28
    i32 13, label %sw.bb.28
  ]

sw.bb:                                            ; preds = %cond.end
  %14 = load i8*, i8** %end.addr, align 8
  %15 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp7 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %16, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %cond.end
  %17 = load i8*, i8** %end.addr, align 8
  %18 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast10 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast11 = ptrtoint i8* %18 to i64
  %sub.ptr.sub12 = sub i64 %sub.ptr.lhs.cast10, %sub.ptr.rhs.cast11
  %cmp13 = icmp slt i64 %sub.ptr.sub12, 3
  br i1 %cmp13, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %sw.bb.9
  store i32 -2, i32* %retval
  br label %return

if.end.16:                                        ; preds = %sw.bb.9
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %19, i64 3
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.18:                                         ; preds = %cond.end
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast19 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast20 = ptrtoint i8* %21 to i64
  %sub.ptr.sub21 = sub i64 %sub.ptr.lhs.cast19, %sub.ptr.rhs.cast20
  %cmp22 = icmp slt i64 %sub.ptr.sub21, 4
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %sw.bb.18
  store i32 -2, i32* %retval
  br label %return

if.end.25:                                        ; preds = %sw.bb.18
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %22, i64 4
  store i8* %add.ptr26, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.27:                                         ; preds = %cond.end, %cond.end, %cond.end
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %23, i8** %24, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %cond.end, %cond.end
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr29 = getelementptr i8, i8* %25, i64 2
  store i8* %add.ptr29, i8** %ptr.addr, align 8
  %26 = load i32, i32* %t, align 4
  %27 = load i32, i32* %open.addr, align 4
  %cmp30 = icmp ne i32 %26, %27
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %sw.bb.28
  br label %sw.epilog

if.end.33:                                        ; preds = %sw.bb.28
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %end.addr, align 8
  %cmp34 = icmp eq i8* %28, %29
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.33
  store i32 -27, i32* %retval
  br label %return

if.end.37:                                        ; preds = %if.end.33
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx38 = getelementptr i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %33 to i32
  %cmp40 = icmp eq i32 %conv39, 0
  br i1 %cmp40, label %cond.true.42, label %cond.false.47

cond.true.42:                                     ; preds = %if.end.37
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8, i8* %34, align 1
  %idxprom43 = zext i8 %35 to i64
  %36 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %37 = bitcast %struct.encoding* %36 to %struct.normal_encoding*
  %type44 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %37, i32 0, i32 1
  %arrayidx45 = getelementptr [256 x i8], [256 x i8]* %type44, i32 0, i64 %idxprom43
  %38 = load i8, i8* %arrayidx45, align 1
  %conv46 = zext i8 %38 to i32
  br label %cond.end.51

cond.false.47:                                    ; preds = %if.end.37
  %39 = load i8*, i8** %ptr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %39, i64 1
  %40 = load i8, i8* %arrayidx48, align 1
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx49 = getelementptr i8, i8* %41, i64 0
  %42 = load i8, i8* %arrayidx49, align 1
  %call50 = call i32 @unicode_byte_type(i8 signext %40, i8 signext %42)
  br label %cond.end.51

cond.end.51:                                      ; preds = %cond.false.47, %cond.true.42
  %cond52 = phi i32 [ %conv46, %cond.true.42 ], [ %call50, %cond.false.47 ]
  switch i32 %cond52, label %sw.default [
    i32 21, label %sw.bb.53
    i32 9, label %sw.bb.53
    i32 10, label %sw.bb.53
    i32 11, label %sw.bb.53
    i32 30, label %sw.bb.53
    i32 20, label %sw.bb.53
  ]

sw.bb.53:                                         ; preds = %cond.end.51, %cond.end.51, %cond.end.51, %cond.end.51, %cond.end.51, %cond.end.51
  store i32 27, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end.51
  store i32 0, i32* %retval
  br label %return

sw.default.54:                                    ; preds = %cond.end
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr55 = getelementptr i8, i8* %43, i64 2
  store i8* %add.ptr55, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default.54, %if.then.32, %if.end.25, %if.end.16, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb.53, %if.then.36, %sw.bb.27, %if.then.24, %if.then.15, %if.then
  %44 = load i32, i32* %retval
  ret i32 %44
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanDecl(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 27, label %sw.bb
    i32 20, label %sw.bb.8
    i32 22, label %sw.bb.10
    i32 24, label %sw.bb.10
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %14, i64 2
  %15 = load i8*, i8** %end.addr, align 8
  %16 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call7 = call i32 @little2_scanComment(%struct.encoding* %13, i8* %add.ptr, i8* %15, i8** %16)
  store i32 %call7, i32* %retval
  br label %return

sw.bb.8:                                          ; preds = %cond.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %17, i64 2
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr9, i8** %18, align 8
  store i32 33, i32* %retval
  br label %return

sw.bb.10:                                         ; preds = %cond.end, %cond.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr11 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr11, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %20 = load i8*, i8** %ptr.addr, align 8
  %21 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %20, i8** %21, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.10
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.60, %sw.epilog
  %22 = load i8*, i8** %ptr.addr, align 8
  %23 = load i8*, i8** %end.addr, align 8
  %cmp12 = icmp ne i8* %22, %23
  br i1 %cmp12, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %24 = load i8*, i8** %ptr.addr, align 8
  %arrayidx14 = getelementptr i8, i8* %24, i64 1
  %25 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %25 to i32
  %cmp16 = icmp eq i32 %conv15, 0
  br i1 %cmp16, label %cond.true.18, label %cond.false.23

cond.true.18:                                     ; preds = %while.body
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8, i8* %26, align 1
  %idxprom19 = zext i8 %27 to i64
  %28 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %29 = bitcast %struct.encoding* %28 to %struct.normal_encoding*
  %type20 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %29, i32 0, i32 1
  %arrayidx21 = getelementptr [256 x i8], [256 x i8]* %type20, i32 0, i64 %idxprom19
  %30 = load i8, i8* %arrayidx21, align 1
  %conv22 = zext i8 %30 to i32
  br label %cond.end.27

cond.false.23:                                    ; preds = %while.body
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx24 = getelementptr i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx24, align 1
  %33 = load i8*, i8** %ptr.addr, align 8
  %arrayidx25 = getelementptr i8, i8* %33, i64 0
  %34 = load i8, i8* %arrayidx25, align 1
  %call26 = call i32 @unicode_byte_type(i8 signext %32, i8 signext %34)
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.23, %cond.true.18
  %cond28 = phi i32 [ %conv22, %cond.true.18 ], [ %call26, %cond.false.23 ]
  switch i32 %cond28, label %sw.default.59 [
    i32 30, label %sw.bb.29
    i32 21, label %sw.bb.56
    i32 9, label %sw.bb.56
    i32 10, label %sw.bb.56
    i32 22, label %sw.bb.57
    i32 24, label %sw.bb.57
  ]

sw.bb.29:                                         ; preds = %cond.end.27
  %35 = load i8*, i8** %ptr.addr, align 8
  %add.ptr30 = getelementptr i8, i8* %35, i64 2
  %36 = load i8*, i8** %end.addr, align 8
  %cmp31 = icmp eq i8* %add.ptr30, %36
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.29
  store i32 -1, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.29
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr35 = getelementptr i8, i8* %37, i64 2
  %arrayidx36 = getelementptr i8, i8* %add.ptr35, i64 1
  %38 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %38 to i32
  %cmp38 = icmp eq i32 %conv37, 0
  br i1 %cmp38, label %cond.true.40, label %cond.false.46

cond.true.40:                                     ; preds = %if.end.34
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr41 = getelementptr i8, i8* %39, i64 2
  %40 = load i8, i8* %add.ptr41, align 1
  %idxprom42 = zext i8 %40 to i64
  %41 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %42 = bitcast %struct.encoding* %41 to %struct.normal_encoding*
  %type43 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %42, i32 0, i32 1
  %arrayidx44 = getelementptr [256 x i8], [256 x i8]* %type43, i32 0, i64 %idxprom42
  %43 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %43 to i32
  br label %cond.end.52

cond.false.46:                                    ; preds = %if.end.34
  %44 = load i8*, i8** %ptr.addr, align 8
  %add.ptr47 = getelementptr i8, i8* %44, i64 2
  %arrayidx48 = getelementptr i8, i8* %add.ptr47, i64 1
  %45 = load i8, i8* %arrayidx48, align 1
  %46 = load i8*, i8** %ptr.addr, align 8
  %add.ptr49 = getelementptr i8, i8* %46, i64 2
  %arrayidx50 = getelementptr i8, i8* %add.ptr49, i64 0
  %47 = load i8, i8* %arrayidx50, align 1
  %call51 = call i32 @unicode_byte_type(i8 signext %45, i8 signext %47)
  br label %cond.end.52

cond.end.52:                                      ; preds = %cond.false.46, %cond.true.40
  %cond53 = phi i32 [ %conv45, %cond.true.40 ], [ %call51, %cond.false.46 ]
  switch i32 %cond53, label %sw.epilog.55 [
    i32 21, label %sw.bb.54
    i32 9, label %sw.bb.54
    i32 10, label %sw.bb.54
    i32 30, label %sw.bb.54
  ]

sw.bb.54:                                         ; preds = %cond.end.52, %cond.end.52, %cond.end.52, %cond.end.52
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %48, i8** %49, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.55:                                     ; preds = %cond.end.52
  br label %sw.bb.56

sw.bb.56:                                         ; preds = %cond.end.27, %cond.end.27, %cond.end.27, %sw.epilog.55
  %50 = load i8*, i8** %ptr.addr, align 8
  %51 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %50, i8** %51, align 8
  store i32 16, i32* %retval
  br label %return

sw.bb.57:                                         ; preds = %cond.end.27, %cond.end.27
  %52 = load i8*, i8** %ptr.addr, align 8
  %add.ptr58 = getelementptr i8, i8* %52, i64 2
  store i8* %add.ptr58, i8** %ptr.addr, align 8
  br label %sw.epilog.60

sw.default.59:                                    ; preds = %cond.end.27
  %53 = load i8*, i8** %ptr.addr, align 8
  %54 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %53, i8** %54, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.60:                                     ; preds = %sw.bb.57
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.59, %sw.bb.56, %sw.bb.54, %if.then.33, %sw.default, %sw.bb.8, %sw.bb, %if.then
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanPi(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %tok = alloca i32, align 4
  %target = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  store i8* %0, i8** %target, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load i8*, i8** %ptr.addr, align 8
  %6 = load i8, i8* %5, align 1
  %idxprom = zext i8 %6 to i64
  %7 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %8 = bitcast %struct.encoding* %7 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %8, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %9 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx5, align 1
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %11, i8 signext %13)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.21
    i32 24, label %sw.bb.21
    i32 5, label %sw.bb.22
    i32 6, label %sw.bb.27
    i32 7, label %sw.bb.35
  ]

sw.bb:                                            ; preds = %cond.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx7, align 1
  %idxprom8 = zext i8 %15 to i64
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom8
  %16 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %16 to i32
  %shl = shl i32 %conv10, 3
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %18 to i32
  %shr = ashr i32 %conv12, 5
  %add = add i32 %shl, %shr
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom13
  %19 = load i32, i32* %arrayidx14, align 4
  %20 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %21 to i32
  %and = and i32 %conv16, 31
  %shl17 = shl i32 1, %and
  %and18 = and i32 %19, %shl17
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %sw.bb
  %22 = load i8*, i8** %ptr.addr, align 8
  %23 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %22, i8** %23, align 8
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb
  br label %sw.bb.21

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %if.end.20
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %24, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.22:                                         ; preds = %cond.end
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %26 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp23 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.22
  store i32 -2, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.22
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %cond.end
  %29 = load i8*, i8** %end.addr, align 8
  %30 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %29 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %30 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %cmp31 = icmp slt i64 %sub.ptr.sub30, 3
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.27
  store i32 -2, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.27
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %31, i8** %32, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %cond.end
  %33 = load i8*, i8** %end.addr, align 8
  %34 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast36 = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %34 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %cmp39 = icmp slt i64 %sub.ptr.sub38, 4
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %sw.bb.35
  store i32 -2, i32* %retval
  br label %return

if.end.42:                                        ; preds = %sw.bb.35
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %35, i8** %36, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.21
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.202, %sw.epilog
  %39 = load i8*, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %end.addr, align 8
  %cmp43 = icmp ne i8* %39, %40
  br i1 %cmp43, label %while.body, label %while.end.203

while.body:                                       ; preds = %while.cond
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx45 = getelementptr i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %42 to i32
  %cmp47 = icmp eq i32 %conv46, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.54

cond.true.49:                                     ; preds = %while.body
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8, i8* %43, align 1
  %idxprom50 = zext i8 %44 to i64
  %45 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %46 = bitcast %struct.encoding* %45 to %struct.normal_encoding*
  %type51 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %46, i32 0, i32 1
  %arrayidx52 = getelementptr [256 x i8], [256 x i8]* %type51, i32 0, i64 %idxprom50
  %47 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %47 to i32
  br label %cond.end.58

cond.false.54:                                    ; preds = %while.body
  %48 = load i8*, i8** %ptr.addr, align 8
  %arrayidx55 = getelementptr i8, i8* %48, i64 1
  %49 = load i8, i8* %arrayidx55, align 1
  %50 = load i8*, i8** %ptr.addr, align 8
  %arrayidx56 = getelementptr i8, i8* %50, i64 0
  %51 = load i8, i8* %arrayidx56, align 1
  %call57 = call i32 @unicode_byte_type(i8 signext %49, i8 signext %51)
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.54, %cond.true.49
  %cond59 = phi i32 [ %conv53, %cond.true.49 ], [ %call57, %cond.false.54 ]
  switch i32 %cond59, label %sw.default.201 [
    i32 29, label %sw.bb.60
    i32 22, label %sw.bb.80
    i32 24, label %sw.bb.80
    i32 25, label %sw.bb.80
    i32 26, label %sw.bb.80
    i32 27, label %sw.bb.80
    i32 5, label %sw.bb.82
    i32 6, label %sw.bb.90
    i32 7, label %sw.bb.98
    i32 21, label %sw.bb.106
    i32 9, label %sw.bb.106
    i32 10, label %sw.bb.106
    i32 15, label %sw.bb.179
  ]

sw.bb.60:                                         ; preds = %cond.end.58
  %52 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %52, i64 1
  %53 = load i8, i8* %arrayidx61, align 1
  %idxprom62 = zext i8 %53 to i64
  %arrayidx63 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom62
  %54 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %54 to i32
  %shl65 = shl i32 %conv64, 3
  %55 = load i8*, i8** %ptr.addr, align 8
  %arrayidx66 = getelementptr i8, i8* %55, i64 0
  %56 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %56 to i32
  %shr68 = ashr i32 %conv67, 5
  %add69 = add i32 %shl65, %shr68
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom70
  %57 = load i32, i32* %arrayidx71, align 4
  %58 = load i8*, i8** %ptr.addr, align 8
  %arrayidx72 = getelementptr i8, i8* %58, i64 0
  %59 = load i8, i8* %arrayidx72, align 1
  %conv73 = zext i8 %59 to i32
  %and74 = and i32 %conv73, 31
  %shl75 = shl i32 1, %and74
  %and76 = and i32 %57, %shl75
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.end.79, label %if.then.78

if.then.78:                                       ; preds = %sw.bb.60
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 0, i32* %retval
  br label %return

if.end.79:                                        ; preds = %sw.bb.60
  br label %sw.bb.80

sw.bb.80:                                         ; preds = %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %if.end.79
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr81 = getelementptr i8, i8* %62, i64 2
  store i8* %add.ptr81, i8** %ptr.addr, align 8
  br label %sw.epilog.202

sw.bb.82:                                         ; preds = %cond.end.58
  %63 = load i8*, i8** %end.addr, align 8
  %64 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast83 = ptrtoint i8* %63 to i64
  %sub.ptr.rhs.cast84 = ptrtoint i8* %64 to i64
  %sub.ptr.sub85 = sub i64 %sub.ptr.lhs.cast83, %sub.ptr.rhs.cast84
  %cmp86 = icmp slt i64 %sub.ptr.sub85, 2
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %sw.bb.82
  store i32 -2, i32* %retval
  br label %return

if.end.89:                                        ; preds = %sw.bb.82
  %65 = load i8*, i8** %ptr.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %65, i8** %66, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.90:                                         ; preds = %cond.end.58
  %67 = load i8*, i8** %end.addr, align 8
  %68 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast91 = ptrtoint i8* %67 to i64
  %sub.ptr.rhs.cast92 = ptrtoint i8* %68 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92
  %cmp94 = icmp slt i64 %sub.ptr.sub93, 3
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %sw.bb.90
  store i32 -2, i32* %retval
  br label %return

if.end.97:                                        ; preds = %sw.bb.90
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %69, i8** %70, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %cond.end.58
  %71 = load i8*, i8** %end.addr, align 8
  %72 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast99 = ptrtoint i8* %71 to i64
  %sub.ptr.rhs.cast100 = ptrtoint i8* %72 to i64
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100
  %cmp102 = icmp slt i64 %sub.ptr.sub101, 4
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %sw.bb.98
  store i32 -2, i32* %retval
  br label %return

if.end.105:                                       ; preds = %sw.bb.98
  %73 = load i8*, i8** %ptr.addr, align 8
  %74 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %73, i8** %74, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.106:                                        ; preds = %cond.end.58, %cond.end.58, %cond.end.58
  %75 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %76 = load i8*, i8** %target, align 8
  %77 = load i8*, i8** %ptr.addr, align 8
  %call107 = call i32 @little2_checkPiTarget(%struct.encoding* %75, i8* %76, i8* %77, i32* %tok)
  %tobool108 = icmp ne i32 %call107, 0
  br i1 %tobool108, label %if.end.110, label %if.then.109

if.then.109:                                      ; preds = %sw.bb.106
  %78 = load i8*, i8** %ptr.addr, align 8
  %79 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %78, i8** %79, align 8
  store i32 0, i32* %retval
  br label %return

if.end.110:                                       ; preds = %sw.bb.106
  %80 = load i8*, i8** %ptr.addr, align 8
  %add.ptr111 = getelementptr i8, i8* %80, i64 2
  store i8* %add.ptr111, i8** %ptr.addr, align 8
  br label %while.cond.112

while.cond.112:                                   ; preds = %sw.epilog.178, %if.end.110
  %81 = load i8*, i8** %ptr.addr, align 8
  %82 = load i8*, i8** %end.addr, align 8
  %cmp113 = icmp ne i8* %81, %82
  br i1 %cmp113, label %while.body.115, label %while.end

while.body.115:                                   ; preds = %while.cond.112
  %83 = load i8*, i8** %ptr.addr, align 8
  %arrayidx116 = getelementptr i8, i8* %83, i64 1
  %84 = load i8, i8* %arrayidx116, align 1
  %conv117 = sext i8 %84 to i32
  %cmp118 = icmp eq i32 %conv117, 0
  br i1 %cmp118, label %cond.true.120, label %cond.false.125

cond.true.120:                                    ; preds = %while.body.115
  %85 = load i8*, i8** %ptr.addr, align 8
  %86 = load i8, i8* %85, align 1
  %idxprom121 = zext i8 %86 to i64
  %87 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %88 = bitcast %struct.encoding* %87 to %struct.normal_encoding*
  %type122 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %88, i32 0, i32 1
  %arrayidx123 = getelementptr [256 x i8], [256 x i8]* %type122, i32 0, i64 %idxprom121
  %89 = load i8, i8* %arrayidx123, align 1
  %conv124 = zext i8 %89 to i32
  br label %cond.end.129

cond.false.125:                                   ; preds = %while.body.115
  %90 = load i8*, i8** %ptr.addr, align 8
  %arrayidx126 = getelementptr i8, i8* %90, i64 1
  %91 = load i8, i8* %arrayidx126, align 1
  %92 = load i8*, i8** %ptr.addr, align 8
  %arrayidx127 = getelementptr i8, i8* %92, i64 0
  %93 = load i8, i8* %arrayidx127, align 1
  %call128 = call i32 @unicode_byte_type(i8 signext %91, i8 signext %93)
  br label %cond.end.129

cond.end.129:                                     ; preds = %cond.false.125, %cond.true.120
  %cond130 = phi i32 [ %conv124, %cond.true.120 ], [ %call128, %cond.false.125 ]
  switch i32 %cond130, label %sw.default.176 [
    i32 5, label %sw.bb.131
    i32 6, label %sw.bb.140
    i32 7, label %sw.bb.149
    i32 0, label %sw.bb.158
    i32 1, label %sw.bb.158
    i32 8, label %sw.bb.158
    i32 15, label %sw.bb.159
  ]

sw.bb.131:                                        ; preds = %cond.end.129
  %94 = load i8*, i8** %end.addr, align 8
  %95 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast132 = ptrtoint i8* %94 to i64
  %sub.ptr.rhs.cast133 = ptrtoint i8* %95 to i64
  %sub.ptr.sub134 = sub i64 %sub.ptr.lhs.cast132, %sub.ptr.rhs.cast133
  %cmp135 = icmp slt i64 %sub.ptr.sub134, 2
  br i1 %cmp135, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %sw.bb.131
  store i32 -2, i32* %retval
  br label %return

if.end.138:                                       ; preds = %sw.bb.131
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr139 = getelementptr i8, i8* %96, i64 2
  store i8* %add.ptr139, i8** %ptr.addr, align 8
  br label %sw.epilog.178

sw.bb.140:                                        ; preds = %cond.end.129
  %97 = load i8*, i8** %end.addr, align 8
  %98 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast141 = ptrtoint i8* %97 to i64
  %sub.ptr.rhs.cast142 = ptrtoint i8* %98 to i64
  %sub.ptr.sub143 = sub i64 %sub.ptr.lhs.cast141, %sub.ptr.rhs.cast142
  %cmp144 = icmp slt i64 %sub.ptr.sub143, 3
  br i1 %cmp144, label %if.then.146, label %if.end.147

if.then.146:                                      ; preds = %sw.bb.140
  store i32 -2, i32* %retval
  br label %return

if.end.147:                                       ; preds = %sw.bb.140
  %99 = load i8*, i8** %ptr.addr, align 8
  %add.ptr148 = getelementptr i8, i8* %99, i64 3
  store i8* %add.ptr148, i8** %ptr.addr, align 8
  br label %sw.epilog.178

sw.bb.149:                                        ; preds = %cond.end.129
  %100 = load i8*, i8** %end.addr, align 8
  %101 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast150 = ptrtoint i8* %100 to i64
  %sub.ptr.rhs.cast151 = ptrtoint i8* %101 to i64
  %sub.ptr.sub152 = sub i64 %sub.ptr.lhs.cast150, %sub.ptr.rhs.cast151
  %cmp153 = icmp slt i64 %sub.ptr.sub152, 4
  br i1 %cmp153, label %if.then.155, label %if.end.156

if.then.155:                                      ; preds = %sw.bb.149
  store i32 -2, i32* %retval
  br label %return

if.end.156:                                       ; preds = %sw.bb.149
  %102 = load i8*, i8** %ptr.addr, align 8
  %add.ptr157 = getelementptr i8, i8* %102, i64 4
  store i8* %add.ptr157, i8** %ptr.addr, align 8
  br label %sw.epilog.178

sw.bb.158:                                        ; preds = %cond.end.129, %cond.end.129, %cond.end.129
  %103 = load i8*, i8** %ptr.addr, align 8
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %103, i8** %104, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.159:                                        ; preds = %cond.end.129
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr160 = getelementptr i8, i8* %105, i64 2
  store i8* %add.ptr160, i8** %ptr.addr, align 8
  %106 = load i8*, i8** %ptr.addr, align 8
  %107 = load i8*, i8** %end.addr, align 8
  %cmp161 = icmp eq i8* %106, %107
  br i1 %cmp161, label %if.then.163, label %if.end.164

if.then.163:                                      ; preds = %sw.bb.159
  store i32 -1, i32* %retval
  br label %return

if.end.164:                                       ; preds = %sw.bb.159
  %108 = load i8*, i8** %ptr.addr, align 8
  %arrayidx165 = getelementptr i8, i8* %108, i64 1
  %109 = load i8, i8* %arrayidx165, align 1
  %conv166 = sext i8 %109 to i32
  %cmp167 = icmp eq i32 %conv166, 0
  br i1 %cmp167, label %land.lhs.true, label %if.end.175

land.lhs.true:                                    ; preds = %if.end.164
  %110 = load i8*, i8** %ptr.addr, align 8
  %arrayidx169 = getelementptr i8, i8* %110, i64 0
  %111 = load i8, i8* %arrayidx169, align 1
  %conv170 = sext i8 %111 to i32
  %cmp171 = icmp eq i32 %conv170, 62
  br i1 %cmp171, label %if.then.173, label %if.end.175

if.then.173:                                      ; preds = %land.lhs.true
  %112 = load i8*, i8** %ptr.addr, align 8
  %add.ptr174 = getelementptr i8, i8* %112, i64 2
  %113 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr174, i8** %113, align 8
  %114 = load i32, i32* %tok, align 4
  store i32 %114, i32* %retval
  br label %return

if.end.175:                                       ; preds = %land.lhs.true, %if.end.164
  br label %sw.epilog.178

sw.default.176:                                   ; preds = %cond.end.129
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr177 = getelementptr i8, i8* %115, i64 2
  store i8* %add.ptr177, i8** %ptr.addr, align 8
  br label %sw.epilog.178

sw.epilog.178:                                    ; preds = %sw.default.176, %if.end.175, %if.end.156, %if.end.147, %if.end.138
  br label %while.cond.112

while.end:                                        ; preds = %while.cond.112
  store i32 -1, i32* %retval
  br label %return

sw.bb.179:                                        ; preds = %cond.end.58
  %116 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %117 = load i8*, i8** %target, align 8
  %118 = load i8*, i8** %ptr.addr, align 8
  %call180 = call i32 @little2_checkPiTarget(%struct.encoding* %116, i8* %117, i8* %118, i32* %tok)
  %tobool181 = icmp ne i32 %call180, 0
  br i1 %tobool181, label %if.end.183, label %if.then.182

if.then.182:                                      ; preds = %sw.bb.179
  %119 = load i8*, i8** %ptr.addr, align 8
  %120 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %119, i8** %120, align 8
  store i32 0, i32* %retval
  br label %return

if.end.183:                                       ; preds = %sw.bb.179
  %121 = load i8*, i8** %ptr.addr, align 8
  %add.ptr184 = getelementptr i8, i8* %121, i64 2
  store i8* %add.ptr184, i8** %ptr.addr, align 8
  %122 = load i8*, i8** %ptr.addr, align 8
  %123 = load i8*, i8** %end.addr, align 8
  %cmp185 = icmp eq i8* %122, %123
  br i1 %cmp185, label %if.then.187, label %if.end.188

if.then.187:                                      ; preds = %if.end.183
  store i32 -1, i32* %retval
  br label %return

if.end.188:                                       ; preds = %if.end.183
  %124 = load i8*, i8** %ptr.addr, align 8
  %arrayidx189 = getelementptr i8, i8* %124, i64 1
  %125 = load i8, i8* %arrayidx189, align 1
  %conv190 = sext i8 %125 to i32
  %cmp191 = icmp eq i32 %conv190, 0
  br i1 %cmp191, label %land.lhs.true.193, label %if.end.200

land.lhs.true.193:                                ; preds = %if.end.188
  %126 = load i8*, i8** %ptr.addr, align 8
  %arrayidx194 = getelementptr i8, i8* %126, i64 0
  %127 = load i8, i8* %arrayidx194, align 1
  %conv195 = sext i8 %127 to i32
  %cmp196 = icmp eq i32 %conv195, 62
  br i1 %cmp196, label %if.then.198, label %if.end.200

if.then.198:                                      ; preds = %land.lhs.true.193
  %128 = load i8*, i8** %ptr.addr, align 8
  %add.ptr199 = getelementptr i8, i8* %128, i64 2
  %129 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr199, i8** %129, align 8
  %130 = load i32, i32* %tok, align 4
  store i32 %130, i32* %retval
  br label %return

if.end.200:                                       ; preds = %land.lhs.true.193, %if.end.188
  br label %sw.default.201

sw.default.201:                                   ; preds = %cond.end.58, %if.end.200
  %131 = load i8*, i8** %ptr.addr, align 8
  %132 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %131, i8** %132, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.202:                                    ; preds = %sw.bb.80
  br label %while.cond

while.end.203:                                    ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end.203, %sw.default.201, %if.then.198, %if.then.187, %if.then.182, %while.end, %if.then.173, %if.then.163, %sw.bb.158, %if.then.155, %if.then.146, %if.then.137, %if.then.109, %if.end.105, %if.then.104, %if.end.97, %if.then.96, %if.end.89, %if.then.88, %if.then.78, %sw.default, %if.end.42, %if.then.41, %if.end.34, %if.then.33, %if.end.26, %if.then.25, %if.then.19, %if.then
  %133 = load i32, i32* %retval
  ret i32 %133
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanPercent(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.21
    i32 24, label %sw.bb.21
    i32 5, label %sw.bb.22
    i32 6, label %sw.bb.27
    i32 7, label %sw.bb.35
    i32 21, label %sw.bb.43
    i32 10, label %sw.bb.43
    i32 9, label %sw.bb.43
    i32 30, label %sw.bb.43
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx7, align 1
  %idxprom8 = zext i8 %14 to i64
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom8
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  %shl = shl i32 %conv10, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %17 to i32
  %shr = ashr i32 %conv12, 5
  %add = add i32 %shl, %shr
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom13
  %18 = load i32, i32* %arrayidx14, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %20 to i32
  %and = and i32 %conv16, 31
  %shl17 = shl i32 1, %and
  %and18 = and i32 %18, %shl17
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb
  br label %sw.bb.21

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %if.end.20
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.22:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp23 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.22
  store i32 -2, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.22
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %29 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %cmp31 = icmp slt i64 %sub.ptr.sub30, 3
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.27
  store i32 -2, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.27
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast36 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %33 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %cmp39 = icmp slt i64 %sub.ptr.sub38, 4
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %sw.bb.35
  store i32 -2, i32* %retval
  br label %return

if.end.42:                                        ; preds = %sw.bb.35
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %36, i8** %37, align 8
  store i32 22, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %38, i8** %39, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.21
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.110, %sw.epilog
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp44 = icmp ne i8* %40, %41
  br i1 %cmp44, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx46 = getelementptr i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %43 to i32
  %cmp48 = icmp eq i32 %conv47, 0
  br i1 %cmp48, label %cond.true.50, label %cond.false.55

cond.true.50:                                     ; preds = %while.body
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8, i8* %44, align 1
  %idxprom51 = zext i8 %45 to i64
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = bitcast %struct.encoding* %46 to %struct.normal_encoding*
  %type52 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %47, i32 0, i32 1
  %arrayidx53 = getelementptr [256 x i8], [256 x i8]* %type52, i32 0, i64 %idxprom51
  %48 = load i8, i8* %arrayidx53, align 1
  %conv54 = zext i8 %48 to i32
  br label %cond.end.59

cond.false.55:                                    ; preds = %while.body
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx56 = getelementptr i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx56, align 1
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx57 = getelementptr i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx57, align 1
  %call58 = call i32 @unicode_byte_type(i8 signext %50, i8 signext %52)
  br label %cond.end.59

cond.end.59:                                      ; preds = %cond.false.55, %cond.true.50
  %cond60 = phi i32 [ %conv54, %cond.true.50 ], [ %call58, %cond.false.55 ]
  switch i32 %cond60, label %sw.default.109 [
    i32 29, label %sw.bb.61
    i32 22, label %sw.bb.81
    i32 24, label %sw.bb.81
    i32 25, label %sw.bb.81
    i32 26, label %sw.bb.81
    i32 27, label %sw.bb.81
    i32 5, label %sw.bb.83
    i32 6, label %sw.bb.91
    i32 7, label %sw.bb.99
    i32 18, label %sw.bb.107
  ]

sw.bb.61:                                         ; preds = %cond.end.59
  %53 = load i8*, i8** %ptr.addr, align 8
  %arrayidx62 = getelementptr i8, i8* %53, i64 1
  %54 = load i8, i8* %arrayidx62, align 1
  %idxprom63 = zext i8 %54 to i64
  %arrayidx64 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom63
  %55 = load i8, i8* %arrayidx64, align 1
  %conv65 = zext i8 %55 to i32
  %shl66 = shl i32 %conv65, 3
  %56 = load i8*, i8** %ptr.addr, align 8
  %arrayidx67 = getelementptr i8, i8* %56, i64 0
  %57 = load i8, i8* %arrayidx67, align 1
  %conv68 = zext i8 %57 to i32
  %shr69 = ashr i32 %conv68, 5
  %add70 = add i32 %shl66, %shr69
  %idxprom71 = sext i32 %add70 to i64
  %arrayidx72 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom71
  %58 = load i32, i32* %arrayidx72, align 4
  %59 = load i8*, i8** %ptr.addr, align 8
  %arrayidx73 = getelementptr i8, i8* %59, i64 0
  %60 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %60 to i32
  %and75 = and i32 %conv74, 31
  %shl76 = shl i32 1, %and75
  %and77 = and i32 %58, %shl76
  %tobool78 = icmp ne i32 %and77, 0
  br i1 %tobool78, label %if.end.80, label %if.then.79

if.then.79:                                       ; preds = %sw.bb.61
  %61 = load i8*, i8** %ptr.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %61, i8** %62, align 8
  store i32 0, i32* %retval
  br label %return

if.end.80:                                        ; preds = %sw.bb.61
  br label %sw.bb.81

sw.bb.81:                                         ; preds = %cond.end.59, %cond.end.59, %cond.end.59, %cond.end.59, %cond.end.59, %if.end.80
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr82 = getelementptr i8, i8* %63, i64 2
  store i8* %add.ptr82, i8** %ptr.addr, align 8
  br label %sw.epilog.110

sw.bb.83:                                         ; preds = %cond.end.59
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast84 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast85 = ptrtoint i8* %65 to i64
  %sub.ptr.sub86 = sub i64 %sub.ptr.lhs.cast84, %sub.ptr.rhs.cast85
  %cmp87 = icmp slt i64 %sub.ptr.sub86, 2
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %sw.bb.83
  store i32 -2, i32* %retval
  br label %return

if.end.90:                                        ; preds = %sw.bb.83
  %66 = load i8*, i8** %ptr.addr, align 8
  %67 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %66, i8** %67, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.91:                                         ; preds = %cond.end.59
  %68 = load i8*, i8** %end.addr, align 8
  %69 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast92 = ptrtoint i8* %68 to i64
  %sub.ptr.rhs.cast93 = ptrtoint i8* %69 to i64
  %sub.ptr.sub94 = sub i64 %sub.ptr.lhs.cast92, %sub.ptr.rhs.cast93
  %cmp95 = icmp slt i64 %sub.ptr.sub94, 3
  br i1 %cmp95, label %if.then.97, label %if.end.98

if.then.97:                                       ; preds = %sw.bb.91
  store i32 -2, i32* %retval
  br label %return

if.end.98:                                        ; preds = %sw.bb.91
  %70 = load i8*, i8** %ptr.addr, align 8
  %71 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %70, i8** %71, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.99:                                         ; preds = %cond.end.59
  %72 = load i8*, i8** %end.addr, align 8
  %73 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast100 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast101 = ptrtoint i8* %73 to i64
  %sub.ptr.sub102 = sub i64 %sub.ptr.lhs.cast100, %sub.ptr.rhs.cast101
  %cmp103 = icmp slt i64 %sub.ptr.sub102, 4
  br i1 %cmp103, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %sw.bb.99
  store i32 -2, i32* %retval
  br label %return

if.end.106:                                       ; preds = %sw.bb.99
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.107:                                        ; preds = %cond.end.59
  %76 = load i8*, i8** %ptr.addr, align 8
  %add.ptr108 = getelementptr i8, i8* %76, i64 2
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr108, i8** %77, align 8
  store i32 28, i32* %retval
  br label %return

sw.default.109:                                   ; preds = %cond.end.59
  %78 = load i8*, i8** %ptr.addr, align 8
  %79 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %78, i8** %79, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.110:                                    ; preds = %sw.bb.81
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.109, %sw.bb.107, %if.end.106, %if.then.105, %if.end.98, %if.then.97, %if.end.90, %if.then.89, %if.then.79, %sw.default, %sw.bb.43, %if.end.42, %if.then.41, %if.end.34, %if.then.33, %if.end.26, %if.then.25, %if.then.19, %if.then
  %80 = load i32, i32* %retval
  ret i32 %80
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanPoundName(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.21
    i32 24, label %sw.bb.21
    i32 5, label %sw.bb.22
    i32 6, label %sw.bb.27
    i32 7, label %sw.bb.35
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx7, align 1
  %idxprom8 = zext i8 %14 to i64
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom8
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  %shl = shl i32 %conv10, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %17 to i32
  %shr = ashr i32 %conv12, 5
  %add = add i32 %shl, %shr
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom13
  %18 = load i32, i32* %arrayidx14, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %20 to i32
  %and = and i32 %conv16, 31
  %shl17 = shl i32 1, %and
  %and18 = and i32 %18, %shl17
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb
  br label %sw.bb.21

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %if.end.20
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.22:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp23 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.22
  store i32 -2, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.22
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %29 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %cmp31 = icmp slt i64 %sub.ptr.sub30, 3
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.27
  store i32 -2, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.27
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast36 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %33 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %cmp39 = icmp slt i64 %sub.ptr.sub38, 4
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %sw.bb.35
  store i32 -2, i32* %retval
  br label %return

if.end.42:                                        ; preds = %sw.bb.35
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %36, i8** %37, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.21
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.108, %sw.epilog
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp43 = icmp ne i8* %38, %39
  br i1 %cmp43, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx45 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %41 to i32
  %cmp47 = icmp eq i32 %conv46, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.54

cond.true.49:                                     ; preds = %while.body
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom50 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type51 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx52 = getelementptr [256 x i8], [256 x i8]* %type51, i32 0, i64 %idxprom50
  %46 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %46 to i32
  br label %cond.end.58

cond.false.54:                                    ; preds = %while.body
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx55 = getelementptr i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx55, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx56 = getelementptr i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx56, align 1
  %call57 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.54, %cond.true.49
  %cond59 = phi i32 [ %conv53, %cond.true.49 ], [ %call57, %cond.false.54 ]
  switch i32 %cond59, label %sw.default.107 [
    i32 29, label %sw.bb.60
    i32 22, label %sw.bb.80
    i32 24, label %sw.bb.80
    i32 25, label %sw.bb.80
    i32 26, label %sw.bb.80
    i32 27, label %sw.bb.80
    i32 5, label %sw.bb.82
    i32 6, label %sw.bb.90
    i32 7, label %sw.bb.98
    i32 9, label %sw.bb.106
    i32 10, label %sw.bb.106
    i32 21, label %sw.bb.106
    i32 32, label %sw.bb.106
    i32 11, label %sw.bb.106
    i32 30, label %sw.bb.106
    i32 36, label %sw.bb.106
  ]

sw.bb.60:                                         ; preds = %cond.end.58
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx61, align 1
  %idxprom62 = zext i8 %52 to i64
  %arrayidx63 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom62
  %53 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %53 to i32
  %shl65 = shl i32 %conv64, 3
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx66 = getelementptr i8, i8* %54, i64 0
  %55 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %55 to i32
  %shr68 = ashr i32 %conv67, 5
  %add69 = add i32 %shl65, %shr68
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom70
  %56 = load i32, i32* %arrayidx71, align 4
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx72 = getelementptr i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx72, align 1
  %conv73 = zext i8 %58 to i32
  %and74 = and i32 %conv73, 31
  %shl75 = shl i32 1, %and74
  %and76 = and i32 %56, %shl75
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.end.79, label %if.then.78

if.then.78:                                       ; preds = %sw.bb.60
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %59, i8** %60, align 8
  store i32 0, i32* %retval
  br label %return

if.end.79:                                        ; preds = %sw.bb.60
  br label %sw.bb.80

sw.bb.80:                                         ; preds = %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %if.end.79
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr81 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr81, i8** %ptr.addr, align 8
  br label %sw.epilog.108

sw.bb.82:                                         ; preds = %cond.end.58
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast83 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast84 = ptrtoint i8* %63 to i64
  %sub.ptr.sub85 = sub i64 %sub.ptr.lhs.cast83, %sub.ptr.rhs.cast84
  %cmp86 = icmp slt i64 %sub.ptr.sub85, 2
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %sw.bb.82
  store i32 -2, i32* %retval
  br label %return

if.end.89:                                        ; preds = %sw.bb.82
  %64 = load i8*, i8** %ptr.addr, align 8
  %65 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %64, i8** %65, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.90:                                         ; preds = %cond.end.58
  %66 = load i8*, i8** %end.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast91 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast92 = ptrtoint i8* %67 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92
  %cmp94 = icmp slt i64 %sub.ptr.sub93, 3
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %sw.bb.90
  store i32 -2, i32* %retval
  br label %return

if.end.97:                                        ; preds = %sw.bb.90
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %68, i8** %69, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %cond.end.58
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast99 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast100 = ptrtoint i8* %71 to i64
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100
  %cmp102 = icmp slt i64 %sub.ptr.sub101, 4
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %sw.bb.98
  store i32 -2, i32* %retval
  br label %return

if.end.105:                                       ; preds = %sw.bb.98
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.106:                                        ; preds = %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 20, i32* %retval
  br label %return

sw.default.107:                                   ; preds = %cond.end.58
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.108:                                    ; preds = %sw.bb.80
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -20, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.107, %sw.bb.106, %if.end.105, %if.then.104, %if.end.97, %if.then.96, %if.end.89, %if.then.88, %if.then.78, %sw.default, %if.end.42, %if.then.41, %if.end.34, %if.then.33, %if.end.26, %if.then.25, %if.then.19, %if.then
  %78 = load i32, i32* %retval
  ret i32 %78
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanComment(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end.77

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %land.lhs.true, label %if.then.7

land.lhs.true:                                    ; preds = %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 0
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 45
  br i1 %cmp5, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %land.lhs.true, %if.then
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %6, i8** %7, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %8, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8*, i8** %end.addr, align 8
  %cmp8 = icmp ne i8* %9, %10
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx10 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %12 to i32
  %cmp12 = icmp eq i32 %conv11, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8, i8* %13, align 1
  %idxprom = zext i8 %14 to i64
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = bitcast %struct.encoding* %15 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %16, i32 0, i32 1
  %arrayidx14 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %17 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %17 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %18, i64 1
  %19 = load i8, i8* %arrayidx16, align 1
  %20 = load i8*, i8** %ptr.addr, align 8
  %arrayidx17 = getelementptr i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx17, align 1
  %call = call i32 @unicode_byte_type(i8 signext %19, i8 signext %21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv15, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.23
    i32 7, label %sw.bb.32
    i32 0, label %sw.bb.41
    i32 1, label %sw.bb.41
    i32 8, label %sw.bb.41
    i32 27, label %sw.bb.42
  ]

sw.bb:                                            ; preds = %cond.end
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp18 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp18, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr22 = getelementptr i8, i8* %24, i64 2
  store i8* %add.ptr22, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %cond.end
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast24 = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast25 = ptrtoint i8* %26 to i64
  %sub.ptr.sub26 = sub i64 %sub.ptr.lhs.cast24, %sub.ptr.rhs.cast25
  %cmp27 = icmp slt i64 %sub.ptr.sub26, 3
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.30:                                        ; preds = %sw.bb.23
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr31 = getelementptr i8, i8* %27, i64 3
  store i8* %add.ptr31, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.32:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast33 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast34 = ptrtoint i8* %29 to i64
  %sub.ptr.sub35 = sub i64 %sub.ptr.lhs.cast33, %sub.ptr.rhs.cast34
  %cmp36 = icmp slt i64 %sub.ptr.sub35, 4
  br i1 %cmp36, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %sw.bb.32
  store i32 -2, i32* %retval
  br label %return

if.end.39:                                        ; preds = %sw.bb.32
  %30 = load i8*, i8** %ptr.addr, align 8
  %add.ptr40 = getelementptr i8, i8* %30, i64 4
  store i8* %add.ptr40, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.41:                                         ; preds = %cond.end, %cond.end, %cond.end
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %31, i8** %32, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.42:                                         ; preds = %cond.end
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr43 = getelementptr i8, i8* %33, i64 2
  store i8* %add.ptr43, i8** %ptr.addr, align 8
  %34 = load i8*, i8** %end.addr, align 8
  %cmp44 = icmp eq i8* %add.ptr43, %34
  br i1 %cmp44, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %sw.bb.42
  store i32 -1, i32* %retval
  br label %return

if.end.47:                                        ; preds = %sw.bb.42
  %35 = load i8*, i8** %ptr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %35, i64 1
  %36 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %36 to i32
  %cmp50 = icmp eq i32 %conv49, 0
  br i1 %cmp50, label %land.lhs.true.52, label %if.end.75

land.lhs.true.52:                                 ; preds = %if.end.47
  %37 = load i8*, i8** %ptr.addr, align 8
  %arrayidx53 = getelementptr i8, i8* %37, i64 0
  %38 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %38 to i32
  %cmp55 = icmp eq i32 %conv54, 45
  br i1 %cmp55, label %if.then.57, label %if.end.75

if.then.57:                                       ; preds = %land.lhs.true.52
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr58 = getelementptr i8, i8* %39, i64 2
  store i8* %add.ptr58, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %end.addr, align 8
  %cmp59 = icmp eq i8* %add.ptr58, %40
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %if.then.57
  store i32 -1, i32* %retval
  br label %return

if.end.62:                                        ; preds = %if.then.57
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx63 = getelementptr i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx63, align 1
  %conv64 = sext i8 %42 to i32
  %cmp65 = icmp eq i32 %conv64, 0
  br i1 %cmp65, label %land.lhs.true.67, label %if.then.72

land.lhs.true.67:                                 ; preds = %if.end.62
  %43 = load i8*, i8** %ptr.addr, align 8
  %arrayidx68 = getelementptr i8, i8* %43, i64 0
  %44 = load i8, i8* %arrayidx68, align 1
  %conv69 = sext i8 %44 to i32
  %cmp70 = icmp eq i32 %conv69, 62
  br i1 %cmp70, label %if.end.73, label %if.then.72

if.then.72:                                       ; preds = %land.lhs.true.67, %if.end.62
  %45 = load i8*, i8** %ptr.addr, align 8
  %46 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %45, i8** %46, align 8
  store i32 0, i32* %retval
  br label %return

if.end.73:                                        ; preds = %land.lhs.true.67
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr74 = getelementptr i8, i8* %47, i64 2
  %48 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr74, i8** %48, align 8
  store i32 13, i32* %retval
  br label %return

if.end.75:                                        ; preds = %land.lhs.true.52, %if.end.47
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %49 = load i8*, i8** %ptr.addr, align 8
  %add.ptr76 = getelementptr i8, i8* %49, i64 2
  store i8* %add.ptr76, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.75, %if.end.39, %if.end.30, %if.end.21
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.77

if.end.77:                                        ; preds = %while.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.77, %if.end.73, %if.then.72, %if.then.61, %if.then.46, %sw.bb.41, %if.then.38, %if.then.29, %if.then.20, %if.then.7
  %50 = load i32, i32* %retval
  ret i32 %50
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_checkPiTarget(%struct.encoding* %enc, i8* %ptr, i8* %end, i32* %tokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %tokPtr.addr = alloca i32*, align 8
  %upper = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32* %tokPtr, i32** %tokPtr.addr, align 8
  store i32 0, i32* %upper, align 4
  %0 = load i32*, i32** %tokPtr.addr, align 8
  store i32 11, i32* %0, align 4
  %1 = load i8*, i8** %end.addr, align 8
  %2 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp ne i64 %sub.ptr.sub, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ -1, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 120, label %sw.bb
    i32 88, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %cond.end
  br label %sw.epilog

sw.bb.5:                                          ; preds = %cond.end
  store i32 1, i32* %upper, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.5, %sw.bb
  %7 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %9 to i32
  %cmp8 = icmp eq i32 %conv7, 0
  br i1 %cmp8, label %cond.true.10, label %cond.false.13

cond.true.10:                                     ; preds = %sw.epilog
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  br label %cond.end.14

cond.false.13:                                    ; preds = %sw.epilog
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.10
  %cond15 = phi i32 [ %conv12, %cond.true.10 ], [ -1, %cond.false.13 ]
  switch i32 %cond15, label %sw.default.18 [
    i32 109, label %sw.bb.16
    i32 77, label %sw.bb.17
  ]

sw.bb.16:                                         ; preds = %cond.end.14
  br label %sw.epilog.19

sw.bb.17:                                         ; preds = %cond.end.14
  store i32 1, i32* %upper, align 4
  br label %sw.epilog.19

sw.default.18:                                    ; preds = %cond.end.14
  store i32 1, i32* %retval
  br label %return

sw.epilog.19:                                     ; preds = %sw.bb.17, %sw.bb.16
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr20 = getelementptr i8, i8* %12, i64 2
  store i8* %add.ptr20, i8** %ptr.addr, align 8
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx21 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %14 to i32
  %cmp23 = icmp eq i32 %conv22, 0
  br i1 %cmp23, label %cond.true.25, label %cond.false.28

cond.true.25:                                     ; preds = %sw.epilog.19
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx26 = getelementptr i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %16 to i32
  br label %cond.end.29

cond.false.28:                                    ; preds = %sw.epilog.19
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.28, %cond.true.25
  %cond30 = phi i32 [ %conv27, %cond.true.25 ], [ -1, %cond.false.28 ]
  switch i32 %cond30, label %sw.default.33 [
    i32 108, label %sw.bb.31
    i32 76, label %sw.bb.32
  ]

sw.bb.31:                                         ; preds = %cond.end.29
  br label %sw.epilog.34

sw.bb.32:                                         ; preds = %cond.end.29
  store i32 1, i32* %upper, align 4
  br label %sw.epilog.34

sw.default.33:                                    ; preds = %cond.end.29
  store i32 1, i32* %retval
  br label %return

sw.epilog.34:                                     ; preds = %sw.bb.32, %sw.bb.31
  %17 = load i32, i32* %upper, align 4
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %sw.epilog.34
  store i32 0, i32* %retval
  br label %return

if.end.36:                                        ; preds = %sw.epilog.34
  %18 = load i32*, i32** %tokPtr.addr, align 8
  store i32 12, i32* %18, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.35, %sw.default.33, %sw.default.18, %sw.default, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanLt(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %hadColon = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.21
    i32 24, label %sw.bb.21
    i32 5, label %sw.bb.22
    i32 6, label %sw.bb.27
    i32 7, label %sw.bb.35
    i32 16, label %sw.bb.43
    i32 15, label %sw.bb.70
    i32 17, label %sw.bb.73
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx7, align 1
  %idxprom8 = zext i8 %14 to i64
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom8
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  %shl = shl i32 %conv10, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %17 to i32
  %shr = ashr i32 %conv12, 5
  %add = add i32 %shl, %shr
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom13
  %18 = load i32, i32* %arrayidx14, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %20 to i32
  %and = and i32 %conv16, 31
  %shl17 = shl i32 1, %and
  %and18 = and i32 %18, %shl17
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb
  br label %sw.bb.21

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %if.end.20
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog.76

sw.bb.22:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp23 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.22
  store i32 -2, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.22
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %29 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %cmp31 = icmp slt i64 %sub.ptr.sub30, 3
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.27
  store i32 -2, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.27
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast36 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %33 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %cmp39 = icmp slt i64 %sub.ptr.sub38, 4
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %sw.bb.35
  store i32 -2, i32* %retval
  br label %return

if.end.42:                                        ; preds = %sw.bb.35
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %36, i64 2
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  %37 = load i8*, i8** %end.addr, align 8
  %cmp45 = icmp eq i8* %add.ptr44, %37
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %sw.bb.43
  store i32 -1, i32* %retval
  br label %return

if.end.48:                                        ; preds = %sw.bb.43
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx49 = getelementptr i8, i8* %38, i64 1
  %39 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %39 to i32
  %cmp51 = icmp eq i32 %conv50, 0
  br i1 %cmp51, label %cond.true.53, label %cond.false.58

cond.true.53:                                     ; preds = %if.end.48
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8, i8* %40, align 1
  %idxprom54 = zext i8 %41 to i64
  %42 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %43 = bitcast %struct.encoding* %42 to %struct.normal_encoding*
  %type55 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %43, i32 0, i32 1
  %arrayidx56 = getelementptr [256 x i8], [256 x i8]* %type55, i32 0, i64 %idxprom54
  %44 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %44 to i32
  br label %cond.end.62

cond.false.58:                                    ; preds = %if.end.48
  %45 = load i8*, i8** %ptr.addr, align 8
  %arrayidx59 = getelementptr i8, i8* %45, i64 1
  %46 = load i8, i8* %arrayidx59, align 1
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx60 = getelementptr i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx60, align 1
  %call61 = call i32 @unicode_byte_type(i8 signext %46, i8 signext %48)
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.58, %cond.true.53
  %cond63 = phi i32 [ %conv57, %cond.true.53 ], [ %call61, %cond.false.58 ]
  switch i32 %cond63, label %sw.epilog [
    i32 27, label %sw.bb.64
    i32 20, label %sw.bb.67
  ]

sw.bb.64:                                         ; preds = %cond.end.62
  %49 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr65 = getelementptr i8, i8* %50, i64 2
  %51 = load i8*, i8** %end.addr, align 8
  %52 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call66 = call i32 @little2_scanComment(%struct.encoding* %49, i8* %add.ptr65, i8* %51, i8** %52)
  store i32 %call66, i32* %retval
  br label %return

sw.bb.67:                                         ; preds = %cond.end.62
  %53 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr68 = getelementptr i8, i8* %54, i64 2
  %55 = load i8*, i8** %end.addr, align 8
  %56 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call69 = call i32 @little2_scanCdataSection(%struct.encoding* %53, i8* %add.ptr68, i8* %55, i8** %56)
  store i32 %call69, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %cond.end.62
  %57 = load i8*, i8** %ptr.addr, align 8
  %58 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %57, i8** %58, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.70:                                         ; preds = %cond.end
  %59 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %60 = load i8*, i8** %ptr.addr, align 8
  %add.ptr71 = getelementptr i8, i8* %60, i64 2
  %61 = load i8*, i8** %end.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call72 = call i32 @little2_scanPi(%struct.encoding* %59, i8* %add.ptr71, i8* %61, i8** %62)
  store i32 %call72, i32* %retval
  br label %return

sw.bb.73:                                         ; preds = %cond.end
  %63 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %64 = load i8*, i8** %ptr.addr, align 8
  %add.ptr74 = getelementptr i8, i8* %64, i64 2
  %65 = load i8*, i8** %end.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call75 = call i32 @little2_scanEndTag(%struct.encoding* %63, i8* %add.ptr74, i8* %65, i8** %66)
  store i32 %call75, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %67 = load i8*, i8** %ptr.addr, align 8
  %68 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %67, i8** %68, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.76:                                     ; preds = %sw.bb.21
  store i32 0, i32* %hadColon, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.306, %sw.epilog.76
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8*, i8** %end.addr, align 8
  %cmp77 = icmp ne i8* %69, %70
  br i1 %cmp77, label %while.body, label %while.end.307

while.body:                                       ; preds = %while.cond
  %71 = load i8*, i8** %ptr.addr, align 8
  %arrayidx79 = getelementptr i8, i8* %71, i64 1
  %72 = load i8, i8* %arrayidx79, align 1
  %conv80 = sext i8 %72 to i32
  %cmp81 = icmp eq i32 %conv80, 0
  br i1 %cmp81, label %cond.true.83, label %cond.false.88

cond.true.83:                                     ; preds = %while.body
  %73 = load i8*, i8** %ptr.addr, align 8
  %74 = load i8, i8* %73, align 1
  %idxprom84 = zext i8 %74 to i64
  %75 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %76 = bitcast %struct.encoding* %75 to %struct.normal_encoding*
  %type85 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %76, i32 0, i32 1
  %arrayidx86 = getelementptr [256 x i8], [256 x i8]* %type85, i32 0, i64 %idxprom84
  %77 = load i8, i8* %arrayidx86, align 1
  %conv87 = zext i8 %77 to i32
  br label %cond.end.92

cond.false.88:                                    ; preds = %while.body
  %78 = load i8*, i8** %ptr.addr, align 8
  %arrayidx89 = getelementptr i8, i8* %78, i64 1
  %79 = load i8, i8* %arrayidx89, align 1
  %80 = load i8*, i8** %ptr.addr, align 8
  %arrayidx90 = getelementptr i8, i8* %80, i64 0
  %81 = load i8, i8* %arrayidx90, align 1
  %call91 = call i32 @unicode_byte_type(i8 signext %79, i8 signext %81)
  br label %cond.end.92

cond.end.92:                                      ; preds = %cond.false.88, %cond.true.83
  %cond93 = phi i32 [ %conv87, %cond.true.83 ], [ %call91, %cond.false.88 ]
  switch i32 %cond93, label %sw.default.305 [
    i32 29, label %sw.bb.94
    i32 22, label %sw.bb.114
    i32 24, label %sw.bb.114
    i32 25, label %sw.bb.114
    i32 26, label %sw.bb.114
    i32 27, label %sw.bb.114
    i32 5, label %sw.bb.116
    i32 6, label %sw.bb.124
    i32 7, label %sw.bb.132
    i32 23, label %sw.bb.140
    i32 21, label %sw.bb.212
    i32 9, label %sw.bb.212
    i32 10, label %sw.bb.212
    i32 11, label %sw.bb.286
    i32 17, label %sw.bb.288
  ]

sw.bb.94:                                         ; preds = %cond.end.92
  %82 = load i8*, i8** %ptr.addr, align 8
  %arrayidx95 = getelementptr i8, i8* %82, i64 1
  %83 = load i8, i8* %arrayidx95, align 1
  %idxprom96 = zext i8 %83 to i64
  %arrayidx97 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom96
  %84 = load i8, i8* %arrayidx97, align 1
  %conv98 = zext i8 %84 to i32
  %shl99 = shl i32 %conv98, 3
  %85 = load i8*, i8** %ptr.addr, align 8
  %arrayidx100 = getelementptr i8, i8* %85, i64 0
  %86 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %86 to i32
  %shr102 = ashr i32 %conv101, 5
  %add103 = add i32 %shl99, %shr102
  %idxprom104 = sext i32 %add103 to i64
  %arrayidx105 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom104
  %87 = load i32, i32* %arrayidx105, align 4
  %88 = load i8*, i8** %ptr.addr, align 8
  %arrayidx106 = getelementptr i8, i8* %88, i64 0
  %89 = load i8, i8* %arrayidx106, align 1
  %conv107 = zext i8 %89 to i32
  %and108 = and i32 %conv107, 31
  %shl109 = shl i32 1, %and108
  %and110 = and i32 %87, %shl109
  %tobool111 = icmp ne i32 %and110, 0
  br i1 %tobool111, label %if.end.113, label %if.then.112

if.then.112:                                      ; preds = %sw.bb.94
  %90 = load i8*, i8** %ptr.addr, align 8
  %91 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %90, i8** %91, align 8
  store i32 0, i32* %retval
  br label %return

if.end.113:                                       ; preds = %sw.bb.94
  br label %sw.bb.114

sw.bb.114:                                        ; preds = %cond.end.92, %cond.end.92, %cond.end.92, %cond.end.92, %cond.end.92, %if.end.113
  %92 = load i8*, i8** %ptr.addr, align 8
  %add.ptr115 = getelementptr i8, i8* %92, i64 2
  store i8* %add.ptr115, i8** %ptr.addr, align 8
  br label %sw.epilog.306

sw.bb.116:                                        ; preds = %cond.end.92
  %93 = load i8*, i8** %end.addr, align 8
  %94 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast117 = ptrtoint i8* %93 to i64
  %sub.ptr.rhs.cast118 = ptrtoint i8* %94 to i64
  %sub.ptr.sub119 = sub i64 %sub.ptr.lhs.cast117, %sub.ptr.rhs.cast118
  %cmp120 = icmp slt i64 %sub.ptr.sub119, 2
  br i1 %cmp120, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %sw.bb.116
  store i32 -2, i32* %retval
  br label %return

if.end.123:                                       ; preds = %sw.bb.116
  %95 = load i8*, i8** %ptr.addr, align 8
  %96 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %95, i8** %96, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.124:                                        ; preds = %cond.end.92
  %97 = load i8*, i8** %end.addr, align 8
  %98 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast125 = ptrtoint i8* %97 to i64
  %sub.ptr.rhs.cast126 = ptrtoint i8* %98 to i64
  %sub.ptr.sub127 = sub i64 %sub.ptr.lhs.cast125, %sub.ptr.rhs.cast126
  %cmp128 = icmp slt i64 %sub.ptr.sub127, 3
  br i1 %cmp128, label %if.then.130, label %if.end.131

if.then.130:                                      ; preds = %sw.bb.124
  store i32 -2, i32* %retval
  br label %return

if.end.131:                                       ; preds = %sw.bb.124
  %99 = load i8*, i8** %ptr.addr, align 8
  %100 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %99, i8** %100, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.132:                                        ; preds = %cond.end.92
  %101 = load i8*, i8** %end.addr, align 8
  %102 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast133 = ptrtoint i8* %101 to i64
  %sub.ptr.rhs.cast134 = ptrtoint i8* %102 to i64
  %sub.ptr.sub135 = sub i64 %sub.ptr.lhs.cast133, %sub.ptr.rhs.cast134
  %cmp136 = icmp slt i64 %sub.ptr.sub135, 4
  br i1 %cmp136, label %if.then.138, label %if.end.139

if.then.138:                                      ; preds = %sw.bb.132
  store i32 -2, i32* %retval
  br label %return

if.end.139:                                       ; preds = %sw.bb.132
  %103 = load i8*, i8** %ptr.addr, align 8
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %103, i8** %104, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.140:                                        ; preds = %cond.end.92
  %105 = load i32, i32* %hadColon, align 4
  %tobool141 = icmp ne i32 %105, 0
  br i1 %tobool141, label %if.then.142, label %if.end.143

if.then.142:                                      ; preds = %sw.bb.140
  %106 = load i8*, i8** %ptr.addr, align 8
  %107 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %106, i8** %107, align 8
  store i32 0, i32* %retval
  br label %return

if.end.143:                                       ; preds = %sw.bb.140
  store i32 1, i32* %hadColon, align 4
  %108 = load i8*, i8** %ptr.addr, align 8
  %add.ptr144 = getelementptr i8, i8* %108, i64 2
  store i8* %add.ptr144, i8** %ptr.addr, align 8
  %109 = load i8*, i8** %ptr.addr, align 8
  %110 = load i8*, i8** %end.addr, align 8
  %cmp145 = icmp eq i8* %109, %110
  br i1 %cmp145, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %if.end.143
  store i32 -1, i32* %retval
  br label %return

if.end.148:                                       ; preds = %if.end.143
  %111 = load i8*, i8** %ptr.addr, align 8
  %arrayidx149 = getelementptr i8, i8* %111, i64 1
  %112 = load i8, i8* %arrayidx149, align 1
  %conv150 = sext i8 %112 to i32
  %cmp151 = icmp eq i32 %conv150, 0
  br i1 %cmp151, label %cond.true.153, label %cond.false.158

cond.true.153:                                    ; preds = %if.end.148
  %113 = load i8*, i8** %ptr.addr, align 8
  %114 = load i8, i8* %113, align 1
  %idxprom154 = zext i8 %114 to i64
  %115 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %116 = bitcast %struct.encoding* %115 to %struct.normal_encoding*
  %type155 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %116, i32 0, i32 1
  %arrayidx156 = getelementptr [256 x i8], [256 x i8]* %type155, i32 0, i64 %idxprom154
  %117 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %117 to i32
  br label %cond.end.162

cond.false.158:                                   ; preds = %if.end.148
  %118 = load i8*, i8** %ptr.addr, align 8
  %arrayidx159 = getelementptr i8, i8* %118, i64 1
  %119 = load i8, i8* %arrayidx159, align 1
  %120 = load i8*, i8** %ptr.addr, align 8
  %arrayidx160 = getelementptr i8, i8* %120, i64 0
  %121 = load i8, i8* %arrayidx160, align 1
  %call161 = call i32 @unicode_byte_type(i8 signext %119, i8 signext %121)
  br label %cond.end.162

cond.end.162:                                     ; preds = %cond.false.158, %cond.true.153
  %cond163 = phi i32 [ %conv157, %cond.true.153 ], [ %call161, %cond.false.158 ]
  switch i32 %cond163, label %sw.default.210 [
    i32 29, label %sw.bb.164
    i32 22, label %sw.bb.184
    i32 24, label %sw.bb.184
    i32 5, label %sw.bb.186
    i32 6, label %sw.bb.194
    i32 7, label %sw.bb.202
  ]

sw.bb.164:                                        ; preds = %cond.end.162
  %122 = load i8*, i8** %ptr.addr, align 8
  %arrayidx165 = getelementptr i8, i8* %122, i64 1
  %123 = load i8, i8* %arrayidx165, align 1
  %idxprom166 = zext i8 %123 to i64
  %arrayidx167 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom166
  %124 = load i8, i8* %arrayidx167, align 1
  %conv168 = zext i8 %124 to i32
  %shl169 = shl i32 %conv168, 3
  %125 = load i8*, i8** %ptr.addr, align 8
  %arrayidx170 = getelementptr i8, i8* %125, i64 0
  %126 = load i8, i8* %arrayidx170, align 1
  %conv171 = zext i8 %126 to i32
  %shr172 = ashr i32 %conv171, 5
  %add173 = add i32 %shl169, %shr172
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom174
  %127 = load i32, i32* %arrayidx175, align 4
  %128 = load i8*, i8** %ptr.addr, align 8
  %arrayidx176 = getelementptr i8, i8* %128, i64 0
  %129 = load i8, i8* %arrayidx176, align 1
  %conv177 = zext i8 %129 to i32
  %and178 = and i32 %conv177, 31
  %shl179 = shl i32 1, %and178
  %and180 = and i32 %127, %shl179
  %tobool181 = icmp ne i32 %and180, 0
  br i1 %tobool181, label %if.end.183, label %if.then.182

if.then.182:                                      ; preds = %sw.bb.164
  %130 = load i8*, i8** %ptr.addr, align 8
  %131 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %130, i8** %131, align 8
  store i32 0, i32* %retval
  br label %return

if.end.183:                                       ; preds = %sw.bb.164
  br label %sw.bb.184

sw.bb.184:                                        ; preds = %cond.end.162, %cond.end.162, %if.end.183
  %132 = load i8*, i8** %ptr.addr, align 8
  %add.ptr185 = getelementptr i8, i8* %132, i64 2
  store i8* %add.ptr185, i8** %ptr.addr, align 8
  br label %sw.epilog.211

sw.bb.186:                                        ; preds = %cond.end.162
  %133 = load i8*, i8** %end.addr, align 8
  %134 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast187 = ptrtoint i8* %133 to i64
  %sub.ptr.rhs.cast188 = ptrtoint i8* %134 to i64
  %sub.ptr.sub189 = sub i64 %sub.ptr.lhs.cast187, %sub.ptr.rhs.cast188
  %cmp190 = icmp slt i64 %sub.ptr.sub189, 2
  br i1 %cmp190, label %if.then.192, label %if.end.193

if.then.192:                                      ; preds = %sw.bb.186
  store i32 -2, i32* %retval
  br label %return

if.end.193:                                       ; preds = %sw.bb.186
  %135 = load i8*, i8** %ptr.addr, align 8
  %136 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %135, i8** %136, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.194:                                        ; preds = %cond.end.162
  %137 = load i8*, i8** %end.addr, align 8
  %138 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast195 = ptrtoint i8* %137 to i64
  %sub.ptr.rhs.cast196 = ptrtoint i8* %138 to i64
  %sub.ptr.sub197 = sub i64 %sub.ptr.lhs.cast195, %sub.ptr.rhs.cast196
  %cmp198 = icmp slt i64 %sub.ptr.sub197, 3
  br i1 %cmp198, label %if.then.200, label %if.end.201

if.then.200:                                      ; preds = %sw.bb.194
  store i32 -2, i32* %retval
  br label %return

if.end.201:                                       ; preds = %sw.bb.194
  %139 = load i8*, i8** %ptr.addr, align 8
  %140 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %139, i8** %140, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.202:                                        ; preds = %cond.end.162
  %141 = load i8*, i8** %end.addr, align 8
  %142 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast203 = ptrtoint i8* %141 to i64
  %sub.ptr.rhs.cast204 = ptrtoint i8* %142 to i64
  %sub.ptr.sub205 = sub i64 %sub.ptr.lhs.cast203, %sub.ptr.rhs.cast204
  %cmp206 = icmp slt i64 %sub.ptr.sub205, 4
  br i1 %cmp206, label %if.then.208, label %if.end.209

if.then.208:                                      ; preds = %sw.bb.202
  store i32 -2, i32* %retval
  br label %return

if.end.209:                                       ; preds = %sw.bb.202
  %143 = load i8*, i8** %ptr.addr, align 8
  %144 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %143, i8** %144, align 8
  store i32 0, i32* %retval
  br label %return

sw.default.210:                                   ; preds = %cond.end.162
  %145 = load i8*, i8** %ptr.addr, align 8
  %146 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %145, i8** %146, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.211:                                    ; preds = %sw.bb.184
  br label %sw.epilog.306

sw.bb.212:                                        ; preds = %cond.end.92, %cond.end.92, %cond.end.92
  %147 = load i8*, i8** %ptr.addr, align 8
  %add.ptr213 = getelementptr i8, i8* %147, i64 2
  store i8* %add.ptr213, i8** %ptr.addr, align 8
  br label %while.cond.214

while.cond.214:                                   ; preds = %sw.bb.281, %sw.bb.212
  %148 = load i8*, i8** %ptr.addr, align 8
  %149 = load i8*, i8** %end.addr, align 8
  %cmp215 = icmp ne i8* %148, %149
  br i1 %cmp215, label %while.body.217, label %while.end

while.body.217:                                   ; preds = %while.cond.214
  %150 = load i8*, i8** %ptr.addr, align 8
  %arrayidx218 = getelementptr i8, i8* %150, i64 1
  %151 = load i8, i8* %arrayidx218, align 1
  %conv219 = sext i8 %151 to i32
  %cmp220 = icmp eq i32 %conv219, 0
  br i1 %cmp220, label %cond.true.222, label %cond.false.227

cond.true.222:                                    ; preds = %while.body.217
  %152 = load i8*, i8** %ptr.addr, align 8
  %153 = load i8, i8* %152, align 1
  %idxprom223 = zext i8 %153 to i64
  %154 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %155 = bitcast %struct.encoding* %154 to %struct.normal_encoding*
  %type224 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %155, i32 0, i32 1
  %arrayidx225 = getelementptr [256 x i8], [256 x i8]* %type224, i32 0, i64 %idxprom223
  %156 = load i8, i8* %arrayidx225, align 1
  %conv226 = zext i8 %156 to i32
  br label %cond.end.231

cond.false.227:                                   ; preds = %while.body.217
  %157 = load i8*, i8** %ptr.addr, align 8
  %arrayidx228 = getelementptr i8, i8* %157, i64 1
  %158 = load i8, i8* %arrayidx228, align 1
  %159 = load i8*, i8** %ptr.addr, align 8
  %arrayidx229 = getelementptr i8, i8* %159, i64 0
  %160 = load i8, i8* %arrayidx229, align 1
  %call230 = call i32 @unicode_byte_type(i8 signext %158, i8 signext %160)
  br label %cond.end.231

cond.end.231:                                     ; preds = %cond.false.227, %cond.true.222
  %cond232 = phi i32 [ %conv226, %cond.true.222 ], [ %call230, %cond.false.227 ]
  switch i32 %cond232, label %sw.default.283 [
    i32 29, label %sw.bb.233
    i32 22, label %sw.bb.253
    i32 24, label %sw.bb.253
    i32 5, label %sw.bb.255
    i32 6, label %sw.bb.263
    i32 7, label %sw.bb.271
    i32 11, label %sw.bb.279
    i32 17, label %sw.bb.280
    i32 21, label %sw.bb.281
    i32 9, label %sw.bb.281
    i32 10, label %sw.bb.281
  ]

sw.bb.233:                                        ; preds = %cond.end.231
  %161 = load i8*, i8** %ptr.addr, align 8
  %arrayidx234 = getelementptr i8, i8* %161, i64 1
  %162 = load i8, i8* %arrayidx234, align 1
  %idxprom235 = zext i8 %162 to i64
  %arrayidx236 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom235
  %163 = load i8, i8* %arrayidx236, align 1
  %conv237 = zext i8 %163 to i32
  %shl238 = shl i32 %conv237, 3
  %164 = load i8*, i8** %ptr.addr, align 8
  %arrayidx239 = getelementptr i8, i8* %164, i64 0
  %165 = load i8, i8* %arrayidx239, align 1
  %conv240 = zext i8 %165 to i32
  %shr241 = ashr i32 %conv240, 5
  %add242 = add i32 %shl238, %shr241
  %idxprom243 = sext i32 %add242 to i64
  %arrayidx244 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom243
  %166 = load i32, i32* %arrayidx244, align 4
  %167 = load i8*, i8** %ptr.addr, align 8
  %arrayidx245 = getelementptr i8, i8* %167, i64 0
  %168 = load i8, i8* %arrayidx245, align 1
  %conv246 = zext i8 %168 to i32
  %and247 = and i32 %conv246, 31
  %shl248 = shl i32 1, %and247
  %and249 = and i32 %166, %shl248
  %tobool250 = icmp ne i32 %and249, 0
  br i1 %tobool250, label %if.end.252, label %if.then.251

if.then.251:                                      ; preds = %sw.bb.233
  %169 = load i8*, i8** %ptr.addr, align 8
  %170 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %169, i8** %170, align 8
  store i32 0, i32* %retval
  br label %return

if.end.252:                                       ; preds = %sw.bb.233
  br label %sw.bb.253

sw.bb.253:                                        ; preds = %cond.end.231, %cond.end.231, %if.end.252
  %171 = load i8*, i8** %ptr.addr, align 8
  %add.ptr254 = getelementptr i8, i8* %171, i64 2
  store i8* %add.ptr254, i8** %ptr.addr, align 8
  br label %sw.epilog.284

sw.bb.255:                                        ; preds = %cond.end.231
  %172 = load i8*, i8** %end.addr, align 8
  %173 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast256 = ptrtoint i8* %172 to i64
  %sub.ptr.rhs.cast257 = ptrtoint i8* %173 to i64
  %sub.ptr.sub258 = sub i64 %sub.ptr.lhs.cast256, %sub.ptr.rhs.cast257
  %cmp259 = icmp slt i64 %sub.ptr.sub258, 2
  br i1 %cmp259, label %if.then.261, label %if.end.262

if.then.261:                                      ; preds = %sw.bb.255
  store i32 -2, i32* %retval
  br label %return

if.end.262:                                       ; preds = %sw.bb.255
  %174 = load i8*, i8** %ptr.addr, align 8
  %175 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %174, i8** %175, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.263:                                        ; preds = %cond.end.231
  %176 = load i8*, i8** %end.addr, align 8
  %177 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast264 = ptrtoint i8* %176 to i64
  %sub.ptr.rhs.cast265 = ptrtoint i8* %177 to i64
  %sub.ptr.sub266 = sub i64 %sub.ptr.lhs.cast264, %sub.ptr.rhs.cast265
  %cmp267 = icmp slt i64 %sub.ptr.sub266, 3
  br i1 %cmp267, label %if.then.269, label %if.end.270

if.then.269:                                      ; preds = %sw.bb.263
  store i32 -2, i32* %retval
  br label %return

if.end.270:                                       ; preds = %sw.bb.263
  %178 = load i8*, i8** %ptr.addr, align 8
  %179 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %178, i8** %179, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.271:                                        ; preds = %cond.end.231
  %180 = load i8*, i8** %end.addr, align 8
  %181 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast272 = ptrtoint i8* %180 to i64
  %sub.ptr.rhs.cast273 = ptrtoint i8* %181 to i64
  %sub.ptr.sub274 = sub i64 %sub.ptr.lhs.cast272, %sub.ptr.rhs.cast273
  %cmp275 = icmp slt i64 %sub.ptr.sub274, 4
  br i1 %cmp275, label %if.then.277, label %if.end.278

if.then.277:                                      ; preds = %sw.bb.271
  store i32 -2, i32* %retval
  br label %return

if.end.278:                                       ; preds = %sw.bb.271
  %182 = load i8*, i8** %ptr.addr, align 8
  %183 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %182, i8** %183, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.279:                                        ; preds = %cond.end.231
  br label %gt

sw.bb.280:                                        ; preds = %cond.end.231
  br label %sol

sw.bb.281:                                        ; preds = %cond.end.231, %cond.end.231, %cond.end.231
  %184 = load i8*, i8** %ptr.addr, align 8
  %add.ptr282 = getelementptr i8, i8* %184, i64 2
  store i8* %add.ptr282, i8** %ptr.addr, align 8
  br label %while.cond.214

sw.default.283:                                   ; preds = %cond.end.231
  %185 = load i8*, i8** %ptr.addr, align 8
  %186 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %185, i8** %186, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.284:                                    ; preds = %sw.bb.253
  %187 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %188 = load i8*, i8** %ptr.addr, align 8
  %189 = load i8*, i8** %end.addr, align 8
  %190 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call285 = call i32 @little2_scanAtts(%struct.encoding* %187, i8* %188, i8* %189, i8** %190)
  store i32 %call285, i32* %retval
  br label %return

while.end:                                        ; preds = %while.cond.214
  store i32 -1, i32* %retval
  br label %return

sw.bb.286:                                        ; preds = %cond.end.92
  br label %gt

gt:                                               ; preds = %sw.bb.286, %sw.bb.279
  %191 = load i8*, i8** %ptr.addr, align 8
  %add.ptr287 = getelementptr i8, i8* %191, i64 2
  %192 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr287, i8** %192, align 8
  store i32 2, i32* %retval
  br label %return

sw.bb.288:                                        ; preds = %cond.end.92
  br label %sol

sol:                                              ; preds = %sw.bb.288, %sw.bb.280
  %193 = load i8*, i8** %ptr.addr, align 8
  %add.ptr289 = getelementptr i8, i8* %193, i64 2
  store i8* %add.ptr289, i8** %ptr.addr, align 8
  %194 = load i8*, i8** %ptr.addr, align 8
  %195 = load i8*, i8** %end.addr, align 8
  %cmp290 = icmp eq i8* %194, %195
  br i1 %cmp290, label %if.then.292, label %if.end.293

if.then.292:                                      ; preds = %sol
  store i32 -1, i32* %retval
  br label %return

if.end.293:                                       ; preds = %sol
  %196 = load i8*, i8** %ptr.addr, align 8
  %arrayidx294 = getelementptr i8, i8* %196, i64 1
  %197 = load i8, i8* %arrayidx294, align 1
  %conv295 = sext i8 %197 to i32
  %cmp296 = icmp eq i32 %conv295, 0
  br i1 %cmp296, label %land.lhs.true, label %if.then.302

land.lhs.true:                                    ; preds = %if.end.293
  %198 = load i8*, i8** %ptr.addr, align 8
  %arrayidx298 = getelementptr i8, i8* %198, i64 0
  %199 = load i8, i8* %arrayidx298, align 1
  %conv299 = sext i8 %199 to i32
  %cmp300 = icmp eq i32 %conv299, 62
  br i1 %cmp300, label %if.end.303, label %if.then.302

if.then.302:                                      ; preds = %land.lhs.true, %if.end.293
  %200 = load i8*, i8** %ptr.addr, align 8
  %201 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %200, i8** %201, align 8
  store i32 0, i32* %retval
  br label %return

if.end.303:                                       ; preds = %land.lhs.true
  %202 = load i8*, i8** %ptr.addr, align 8
  %add.ptr304 = getelementptr i8, i8* %202, i64 2
  %203 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr304, i8** %203, align 8
  store i32 4, i32* %retval
  br label %return

sw.default.305:                                   ; preds = %cond.end.92
  %204 = load i8*, i8** %ptr.addr, align 8
  %205 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %204, i8** %205, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.306:                                    ; preds = %sw.epilog.211, %sw.bb.114
  br label %while.cond

while.end.307:                                    ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end.307, %sw.default.305, %if.end.303, %if.then.302, %if.then.292, %gt, %while.end, %sw.epilog.284, %sw.default.283, %if.end.278, %if.then.277, %if.end.270, %if.then.269, %if.end.262, %if.then.261, %if.then.251, %sw.default.210, %if.end.209, %if.then.208, %if.end.201, %if.then.200, %if.end.193, %if.then.192, %if.then.182, %if.then.147, %if.then.142, %if.end.139, %if.then.138, %if.end.131, %if.then.130, %if.end.123, %if.then.122, %if.then.112, %sw.default, %sw.bb.73, %sw.bb.70, %sw.epilog, %sw.bb.67, %sw.bb.64, %if.then.47, %if.end.42, %if.then.41, %if.end.34, %if.then.33, %if.end.26, %if.then.25, %if.then.19, %if.then
  %206 = load i32, i32* %retval
  ret i32 %206
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.21
    i32 24, label %sw.bb.21
    i32 5, label %sw.bb.22
    i32 6, label %sw.bb.27
    i32 7, label %sw.bb.35
    i32 19, label %sw.bb.43
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx7, align 1
  %idxprom8 = zext i8 %14 to i64
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom8
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  %shl = shl i32 %conv10, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %17 to i32
  %shr = ashr i32 %conv12, 5
  %add = add i32 %shl, %shr
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom13
  %18 = load i32, i32* %arrayidx14, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %20 to i32
  %and = and i32 %conv16, 31
  %shl17 = shl i32 1, %and
  %and18 = and i32 %18, %shl17
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb
  br label %sw.bb.21

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %if.end.20
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.22:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp23 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.22
  store i32 -2, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.22
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %29 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %cmp31 = icmp slt i64 %sub.ptr.sub30, 3
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.27
  store i32 -2, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.27
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast36 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %33 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %cmp39 = icmp slt i64 %sub.ptr.sub38, 4
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %sw.bb.35
  store i32 -2, i32* %retval
  br label %return

if.end.42:                                        ; preds = %sw.bb.35
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %cond.end
  %36 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %37, i64 2
  %38 = load i8*, i8** %end.addr, align 8
  %39 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call45 = call i32 @little2_scanCharRef(%struct.encoding* %36, i8* %add.ptr44, i8* %38, i8** %39)
  store i32 %call45, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %40, i8** %41, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.21
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.112, %sw.epilog
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8*, i8** %end.addr, align 8
  %cmp46 = icmp ne i8* %42, %43
  br i1 %cmp46, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load i8*, i8** %ptr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %44, i64 1
  %45 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %45 to i32
  %cmp50 = icmp eq i32 %conv49, 0
  br i1 %cmp50, label %cond.true.52, label %cond.false.57

cond.true.52:                                     ; preds = %while.body
  %46 = load i8*, i8** %ptr.addr, align 8
  %47 = load i8, i8* %46, align 1
  %idxprom53 = zext i8 %47 to i64
  %48 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %49 = bitcast %struct.encoding* %48 to %struct.normal_encoding*
  %type54 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %49, i32 0, i32 1
  %arrayidx55 = getelementptr [256 x i8], [256 x i8]* %type54, i32 0, i64 %idxprom53
  %50 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %50 to i32
  br label %cond.end.61

cond.false.57:                                    ; preds = %while.body
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx58, align 1
  %53 = load i8*, i8** %ptr.addr, align 8
  %arrayidx59 = getelementptr i8, i8* %53, i64 0
  %54 = load i8, i8* %arrayidx59, align 1
  %call60 = call i32 @unicode_byte_type(i8 signext %52, i8 signext %54)
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.false.57, %cond.true.52
  %cond62 = phi i32 [ %conv56, %cond.true.52 ], [ %call60, %cond.false.57 ]
  switch i32 %cond62, label %sw.default.111 [
    i32 29, label %sw.bb.63
    i32 22, label %sw.bb.83
    i32 24, label %sw.bb.83
    i32 25, label %sw.bb.83
    i32 26, label %sw.bb.83
    i32 27, label %sw.bb.83
    i32 5, label %sw.bb.85
    i32 6, label %sw.bb.93
    i32 7, label %sw.bb.101
    i32 18, label %sw.bb.109
  ]

sw.bb.63:                                         ; preds = %cond.end.61
  %55 = load i8*, i8** %ptr.addr, align 8
  %arrayidx64 = getelementptr i8, i8* %55, i64 1
  %56 = load i8, i8* %arrayidx64, align 1
  %idxprom65 = zext i8 %56 to i64
  %arrayidx66 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom65
  %57 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %57 to i32
  %shl68 = shl i32 %conv67, 3
  %58 = load i8*, i8** %ptr.addr, align 8
  %arrayidx69 = getelementptr i8, i8* %58, i64 0
  %59 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %59 to i32
  %shr71 = ashr i32 %conv70, 5
  %add72 = add i32 %shl68, %shr71
  %idxprom73 = sext i32 %add72 to i64
  %arrayidx74 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom73
  %60 = load i32, i32* %arrayidx74, align 4
  %61 = load i8*, i8** %ptr.addr, align 8
  %arrayidx75 = getelementptr i8, i8* %61, i64 0
  %62 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %62 to i32
  %and77 = and i32 %conv76, 31
  %shl78 = shl i32 1, %and77
  %and79 = and i32 %60, %shl78
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.end.82, label %if.then.81

if.then.81:                                       ; preds = %sw.bb.63
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 0, i32* %retval
  br label %return

if.end.82:                                        ; preds = %sw.bb.63
  br label %sw.bb.83

sw.bb.83:                                         ; preds = %cond.end.61, %cond.end.61, %cond.end.61, %cond.end.61, %cond.end.61, %if.end.82
  %65 = load i8*, i8** %ptr.addr, align 8
  %add.ptr84 = getelementptr i8, i8* %65, i64 2
  store i8* %add.ptr84, i8** %ptr.addr, align 8
  br label %sw.epilog.112

sw.bb.85:                                         ; preds = %cond.end.61
  %66 = load i8*, i8** %end.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast86 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast87 = ptrtoint i8* %67 to i64
  %sub.ptr.sub88 = sub i64 %sub.ptr.lhs.cast86, %sub.ptr.rhs.cast87
  %cmp89 = icmp slt i64 %sub.ptr.sub88, 2
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %sw.bb.85
  store i32 -2, i32* %retval
  br label %return

if.end.92:                                        ; preds = %sw.bb.85
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %68, i8** %69, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.93:                                         ; preds = %cond.end.61
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast94 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast95 = ptrtoint i8* %71 to i64
  %sub.ptr.sub96 = sub i64 %sub.ptr.lhs.cast94, %sub.ptr.rhs.cast95
  %cmp97 = icmp slt i64 %sub.ptr.sub96, 3
  br i1 %cmp97, label %if.then.99, label %if.end.100

if.then.99:                                       ; preds = %sw.bb.93
  store i32 -2, i32* %retval
  br label %return

if.end.100:                                       ; preds = %sw.bb.93
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.101:                                        ; preds = %cond.end.61
  %74 = load i8*, i8** %end.addr, align 8
  %75 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast102 = ptrtoint i8* %74 to i64
  %sub.ptr.rhs.cast103 = ptrtoint i8* %75 to i64
  %sub.ptr.sub104 = sub i64 %sub.ptr.lhs.cast102, %sub.ptr.rhs.cast103
  %cmp105 = icmp slt i64 %sub.ptr.sub104, 4
  br i1 %cmp105, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %sw.bb.101
  store i32 -2, i32* %retval
  br label %return

if.end.108:                                       ; preds = %sw.bb.101
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.109:                                        ; preds = %cond.end.61
  %78 = load i8*, i8** %ptr.addr, align 8
  %add.ptr110 = getelementptr i8, i8* %78, i64 2
  %79 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr110, i8** %79, align 8
  store i32 9, i32* %retval
  br label %return

sw.default.111:                                   ; preds = %cond.end.61
  %80 = load i8*, i8** %ptr.addr, align 8
  %81 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %80, i8** %81, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.112:                                    ; preds = %sw.bb.83
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.111, %sw.bb.109, %if.end.108, %if.then.107, %if.end.100, %if.then.99, %if.end.92, %if.then.91, %if.then.81, %sw.default, %sw.bb.43, %if.end.42, %if.then.41, %if.end.34, %if.then.33, %if.end.26, %if.then.25, %if.then.19, %if.then
  %82 = load i32, i32* %retval
  ret i32 %82
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanCdataSection(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %2, 6
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %land.lhs.true, label %if.then.10

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx6 = getelementptr [6 x i8], [6 x i8]* @little2_scanCdataSection.CDATA_LSQB, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp eq i32 %conv5, %conv7
  br i1 %cmp8, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true, %for.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %9, i8** %10, align 8
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %land.lhs.true
  br label %for.inc

for.inc:                                          ; preds = %if.end.11
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %12, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %13, i8** %14, align 8
  store i32 8, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.10, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanEndTag(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.21
    i32 24, label %sw.bb.21
    i32 5, label %sw.bb.22
    i32 6, label %sw.bb.27
    i32 7, label %sw.bb.35
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx7, align 1
  %idxprom8 = zext i8 %14 to i64
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom8
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  %shl = shl i32 %conv10, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %17 to i32
  %shr = ashr i32 %conv12, 5
  %add = add i32 %shl, %shr
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom13
  %18 = load i32, i32* %arrayidx14, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %20 to i32
  %and = and i32 %conv16, 31
  %shl17 = shl i32 1, %and
  %and18 = and i32 %18, %shl17
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end.20, label %if.then.19

if.then.19:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb
  br label %sw.bb.21

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %if.end.20
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.22:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp23 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.22
  store i32 -2, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.22
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast28 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast29 = ptrtoint i8* %29 to i64
  %sub.ptr.sub30 = sub i64 %sub.ptr.lhs.cast28, %sub.ptr.rhs.cast29
  %cmp31 = icmp slt i64 %sub.ptr.sub30, 3
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.27
  store i32 -2, i32* %retval
  br label %return

if.end.34:                                        ; preds = %sw.bb.27
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.35:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast36 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast37 = ptrtoint i8* %33 to i64
  %sub.ptr.sub38 = sub i64 %sub.ptr.lhs.cast36, %sub.ptr.rhs.cast37
  %cmp39 = icmp slt i64 %sub.ptr.sub38, 4
  br i1 %cmp39, label %if.then.41, label %if.end.42

if.then.41:                                       ; preds = %sw.bb.35
  store i32 -2, i32* %retval
  br label %return

if.end.42:                                        ; preds = %sw.bb.35
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %36, i8** %37, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.21
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.136, %sw.epilog
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp43 = icmp ne i8* %38, %39
  br i1 %cmp43, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx45 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx45, align 1
  %conv46 = sext i8 %41 to i32
  %cmp47 = icmp eq i32 %conv46, 0
  br i1 %cmp47, label %cond.true.49, label %cond.false.54

cond.true.49:                                     ; preds = %while.body
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8, i8* %42, align 1
  %idxprom50 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type51 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx52 = getelementptr [256 x i8], [256 x i8]* %type51, i32 0, i64 %idxprom50
  %46 = load i8, i8* %arrayidx52, align 1
  %conv53 = zext i8 %46 to i32
  br label %cond.end.58

cond.false.54:                                    ; preds = %while.body
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx55 = getelementptr i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx55, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx56 = getelementptr i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx56, align 1
  %call57 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.58

cond.end.58:                                      ; preds = %cond.false.54, %cond.true.49
  %cond59 = phi i32 [ %conv53, %cond.true.49 ], [ %call57, %cond.false.54 ]
  switch i32 %cond59, label %sw.default.135 [
    i32 29, label %sw.bb.60
    i32 22, label %sw.bb.80
    i32 24, label %sw.bb.80
    i32 25, label %sw.bb.80
    i32 26, label %sw.bb.80
    i32 27, label %sw.bb.80
    i32 5, label %sw.bb.82
    i32 6, label %sw.bb.90
    i32 7, label %sw.bb.98
    i32 21, label %sw.bb.106
    i32 9, label %sw.bb.106
    i32 10, label %sw.bb.106
    i32 23, label %sw.bb.131
    i32 11, label %sw.bb.133
  ]

sw.bb.60:                                         ; preds = %cond.end.58
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx61, align 1
  %idxprom62 = zext i8 %52 to i64
  %arrayidx63 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom62
  %53 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %53 to i32
  %shl65 = shl i32 %conv64, 3
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx66 = getelementptr i8, i8* %54, i64 0
  %55 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %55 to i32
  %shr68 = ashr i32 %conv67, 5
  %add69 = add i32 %shl65, %shr68
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom70
  %56 = load i32, i32* %arrayidx71, align 4
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx72 = getelementptr i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx72, align 1
  %conv73 = zext i8 %58 to i32
  %and74 = and i32 %conv73, 31
  %shl75 = shl i32 1, %and74
  %and76 = and i32 %56, %shl75
  %tobool77 = icmp ne i32 %and76, 0
  br i1 %tobool77, label %if.end.79, label %if.then.78

if.then.78:                                       ; preds = %sw.bb.60
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %59, i8** %60, align 8
  store i32 0, i32* %retval
  br label %return

if.end.79:                                        ; preds = %sw.bb.60
  br label %sw.bb.80

sw.bb.80:                                         ; preds = %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %cond.end.58, %if.end.79
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr81 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr81, i8** %ptr.addr, align 8
  br label %sw.epilog.136

sw.bb.82:                                         ; preds = %cond.end.58
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast83 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast84 = ptrtoint i8* %63 to i64
  %sub.ptr.sub85 = sub i64 %sub.ptr.lhs.cast83, %sub.ptr.rhs.cast84
  %cmp86 = icmp slt i64 %sub.ptr.sub85, 2
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %sw.bb.82
  store i32 -2, i32* %retval
  br label %return

if.end.89:                                        ; preds = %sw.bb.82
  %64 = load i8*, i8** %ptr.addr, align 8
  %65 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %64, i8** %65, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.90:                                         ; preds = %cond.end.58
  %66 = load i8*, i8** %end.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast91 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast92 = ptrtoint i8* %67 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92
  %cmp94 = icmp slt i64 %sub.ptr.sub93, 3
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %sw.bb.90
  store i32 -2, i32* %retval
  br label %return

if.end.97:                                        ; preds = %sw.bb.90
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %68, i8** %69, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.98:                                         ; preds = %cond.end.58
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast99 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast100 = ptrtoint i8* %71 to i64
  %sub.ptr.sub101 = sub i64 %sub.ptr.lhs.cast99, %sub.ptr.rhs.cast100
  %cmp102 = icmp slt i64 %sub.ptr.sub101, 4
  br i1 %cmp102, label %if.then.104, label %if.end.105

if.then.104:                                      ; preds = %sw.bb.98
  store i32 -2, i32* %retval
  br label %return

if.end.105:                                       ; preds = %sw.bb.98
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.106:                                        ; preds = %cond.end.58, %cond.end.58, %cond.end.58
  %74 = load i8*, i8** %ptr.addr, align 8
  %add.ptr107 = getelementptr i8, i8* %74, i64 2
  store i8* %add.ptr107, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.106
  %75 = load i8*, i8** %ptr.addr, align 8
  %76 = load i8*, i8** %end.addr, align 8
  %cmp108 = icmp ne i8* %75, %76
  br i1 %cmp108, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %77 = load i8*, i8** %ptr.addr, align 8
  %arrayidx110 = getelementptr i8, i8* %77, i64 1
  %78 = load i8, i8* %arrayidx110, align 1
  %conv111 = sext i8 %78 to i32
  %cmp112 = icmp eq i32 %conv111, 0
  br i1 %cmp112, label %cond.true.114, label %cond.false.119

cond.true.114:                                    ; preds = %for.body
  %79 = load i8*, i8** %ptr.addr, align 8
  %80 = load i8, i8* %79, align 1
  %idxprom115 = zext i8 %80 to i64
  %81 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %82 = bitcast %struct.encoding* %81 to %struct.normal_encoding*
  %type116 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %82, i32 0, i32 1
  %arrayidx117 = getelementptr [256 x i8], [256 x i8]* %type116, i32 0, i64 %idxprom115
  %83 = load i8, i8* %arrayidx117, align 1
  %conv118 = zext i8 %83 to i32
  br label %cond.end.123

cond.false.119:                                   ; preds = %for.body
  %84 = load i8*, i8** %ptr.addr, align 8
  %arrayidx120 = getelementptr i8, i8* %84, i64 1
  %85 = load i8, i8* %arrayidx120, align 1
  %86 = load i8*, i8** %ptr.addr, align 8
  %arrayidx121 = getelementptr i8, i8* %86, i64 0
  %87 = load i8, i8* %arrayidx121, align 1
  %call122 = call i32 @unicode_byte_type(i8 signext %85, i8 signext %87)
  br label %cond.end.123

cond.end.123:                                     ; preds = %cond.false.119, %cond.true.114
  %cond124 = phi i32 [ %conv118, %cond.true.114 ], [ %call122, %cond.false.119 ]
  switch i32 %cond124, label %sw.default.128 [
    i32 21, label %sw.bb.125
    i32 9, label %sw.bb.125
    i32 10, label %sw.bb.125
    i32 11, label %sw.bb.126
  ]

sw.bb.125:                                        ; preds = %cond.end.123, %cond.end.123, %cond.end.123
  br label %sw.epilog.129

sw.bb.126:                                        ; preds = %cond.end.123
  %88 = load i8*, i8** %ptr.addr, align 8
  %add.ptr127 = getelementptr i8, i8* %88, i64 2
  %89 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr127, i8** %89, align 8
  store i32 5, i32* %retval
  br label %return

sw.default.128:                                   ; preds = %cond.end.123
  %90 = load i8*, i8** %ptr.addr, align 8
  %91 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %90, i8** %91, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.129:                                    ; preds = %sw.bb.125
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.129
  %92 = load i8*, i8** %ptr.addr, align 8
  %add.ptr130 = getelementptr i8, i8* %92, i64 2
  store i8* %add.ptr130, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

sw.bb.131:                                        ; preds = %cond.end.58
  %93 = load i8*, i8** %ptr.addr, align 8
  %add.ptr132 = getelementptr i8, i8* %93, i64 2
  store i8* %add.ptr132, i8** %ptr.addr, align 8
  br label %sw.epilog.136

sw.bb.133:                                        ; preds = %cond.end.58
  %94 = load i8*, i8** %ptr.addr, align 8
  %add.ptr134 = getelementptr i8, i8* %94, i64 2
  %95 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr134, i8** %95, align 8
  store i32 5, i32* %retval
  br label %return

sw.default.135:                                   ; preds = %cond.end.58
  %96 = load i8*, i8** %ptr.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %96, i8** %97, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.136:                                    ; preds = %sw.bb.131, %sw.bb.80
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.135, %sw.bb.133, %for.end, %sw.default.128, %sw.bb.126, %if.end.105, %if.then.104, %if.end.97, %if.then.96, %if.end.89, %if.then.88, %if.then.78, %sw.default, %if.end.42, %if.then.41, %if.end.34, %if.then.33, %if.end.26, %if.then.25, %if.then.19, %if.then
  %98 = load i32, i32* %retval
  ret i32 %98
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanAtts(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %hadColon = alloca i32, align 4
  %t = alloca i32, align 4
  %open = alloca i32, align 4
  %t173 = alloca i32, align 4
  %tok = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  store i32 0, i32* %hadColon, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.357, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default.356 [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.19
    i32 24, label %sw.bb.19
    i32 25, label %sw.bb.19
    i32 26, label %sw.bb.19
    i32 27, label %sw.bb.19
    i32 5, label %sw.bb.20
    i32 6, label %sw.bb.25
    i32 7, label %sw.bb.33
    i32 23, label %sw.bb.41
    i32 21, label %sw.bb.111
    i32 9, label %sw.bb.111
    i32 10, label %sw.bb.111
    i32 14, label %sw.bb.139
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx7, align 1
  %idxprom8 = zext i8 %14 to i64
  %arrayidx9 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom8
  %15 = load i8, i8* %arrayidx9, align 1
  %conv10 = zext i8 %15 to i32
  %shl = shl i32 %conv10, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %17 to i32
  %shr = ashr i32 %conv12, 5
  %add = add i32 %shl, %shr
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom13
  %18 = load i32, i32* %arrayidx14, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %20 to i32
  %and = and i32 %conv16, 31
  %shl17 = shl i32 1, %and
  %and18 = and i32 %18, %shl17
  %tobool = icmp ne i32 %and18, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.bb.19

sw.bb.19:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %if.end
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog.357

sw.bb.20:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp21 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %sw.bb.20
  store i32 -2, i32* %retval
  br label %return

if.end.24:                                        ; preds = %sw.bb.20
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.25:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast26 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast27 = ptrtoint i8* %29 to i64
  %sub.ptr.sub28 = sub i64 %sub.ptr.lhs.cast26, %sub.ptr.rhs.cast27
  %cmp29 = icmp slt i64 %sub.ptr.sub28, 3
  br i1 %cmp29, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %sw.bb.25
  store i32 -2, i32* %retval
  br label %return

if.end.32:                                        ; preds = %sw.bb.25
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.33:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast34 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast35 = ptrtoint i8* %33 to i64
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast35
  %cmp37 = icmp slt i64 %sub.ptr.sub36, 4
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %sw.bb.33
  store i32 -2, i32* %retval
  br label %return

if.end.40:                                        ; preds = %sw.bb.33
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.41:                                         ; preds = %cond.end
  %36 = load i32, i32* %hadColon, align 4
  %tobool42 = icmp ne i32 %36, 0
  br i1 %tobool42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %sw.bb.41
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.44:                                        ; preds = %sw.bb.41
  store i32 1, i32* %hadColon, align 4
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %39, i64 2
  store i8* %add.ptr45, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp46 = icmp eq i8* %40, %41
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %if.end.44
  store i32 -1, i32* %retval
  br label %return

if.end.49:                                        ; preds = %if.end.44
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx50 = getelementptr i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %43 to i32
  %cmp52 = icmp eq i32 %conv51, 0
  br i1 %cmp52, label %cond.true.54, label %cond.false.59

cond.true.54:                                     ; preds = %if.end.49
  %44 = load i8*, i8** %ptr.addr, align 8
  %45 = load i8, i8* %44, align 1
  %idxprom55 = zext i8 %45 to i64
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = bitcast %struct.encoding* %46 to %struct.normal_encoding*
  %type56 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %47, i32 0, i32 1
  %arrayidx57 = getelementptr [256 x i8], [256 x i8]* %type56, i32 0, i64 %idxprom55
  %48 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %48 to i32
  br label %cond.end.63

cond.false.59:                                    ; preds = %if.end.49
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx60 = getelementptr i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx60, align 1
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx61, align 1
  %call62 = call i32 @unicode_byte_type(i8 signext %50, i8 signext %52)
  br label %cond.end.63

cond.end.63:                                      ; preds = %cond.false.59, %cond.true.54
  %cond64 = phi i32 [ %conv58, %cond.true.54 ], [ %call62, %cond.false.59 ]
  switch i32 %cond64, label %sw.default [
    i32 29, label %sw.bb.65
    i32 22, label %sw.bb.85
    i32 24, label %sw.bb.85
    i32 5, label %sw.bb.87
    i32 6, label %sw.bb.95
    i32 7, label %sw.bb.103
  ]

sw.bb.65:                                         ; preds = %cond.end.63
  %53 = load i8*, i8** %ptr.addr, align 8
  %arrayidx66 = getelementptr i8, i8* %53, i64 1
  %54 = load i8, i8* %arrayidx66, align 1
  %idxprom67 = zext i8 %54 to i64
  %arrayidx68 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom67
  %55 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %55 to i32
  %shl70 = shl i32 %conv69, 3
  %56 = load i8*, i8** %ptr.addr, align 8
  %arrayidx71 = getelementptr i8, i8* %56, i64 0
  %57 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %57 to i32
  %shr73 = ashr i32 %conv72, 5
  %add74 = add i32 %shl70, %shr73
  %idxprom75 = sext i32 %add74 to i64
  %arrayidx76 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom75
  %58 = load i32, i32* %arrayidx76, align 4
  %59 = load i8*, i8** %ptr.addr, align 8
  %arrayidx77 = getelementptr i8, i8* %59, i64 0
  %60 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %60 to i32
  %and79 = and i32 %conv78, 31
  %shl80 = shl i32 1, %and79
  %and81 = and i32 %58, %shl80
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %if.end.84, label %if.then.83

if.then.83:                                       ; preds = %sw.bb.65
  %61 = load i8*, i8** %ptr.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %61, i8** %62, align 8
  store i32 0, i32* %retval
  br label %return

if.end.84:                                        ; preds = %sw.bb.65
  br label %sw.bb.85

sw.bb.85:                                         ; preds = %cond.end.63, %cond.end.63, %if.end.84
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr86 = getelementptr i8, i8* %63, i64 2
  store i8* %add.ptr86, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.87:                                         ; preds = %cond.end.63
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast88 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast89 = ptrtoint i8* %65 to i64
  %sub.ptr.sub90 = sub i64 %sub.ptr.lhs.cast88, %sub.ptr.rhs.cast89
  %cmp91 = icmp slt i64 %sub.ptr.sub90, 2
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %sw.bb.87
  store i32 -2, i32* %retval
  br label %return

if.end.94:                                        ; preds = %sw.bb.87
  %66 = load i8*, i8** %ptr.addr, align 8
  %67 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %66, i8** %67, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.95:                                         ; preds = %cond.end.63
  %68 = load i8*, i8** %end.addr, align 8
  %69 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast96 = ptrtoint i8* %68 to i64
  %sub.ptr.rhs.cast97 = ptrtoint i8* %69 to i64
  %sub.ptr.sub98 = sub i64 %sub.ptr.lhs.cast96, %sub.ptr.rhs.cast97
  %cmp99 = icmp slt i64 %sub.ptr.sub98, 3
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %sw.bb.95
  store i32 -2, i32* %retval
  br label %return

if.end.102:                                       ; preds = %sw.bb.95
  %70 = load i8*, i8** %ptr.addr, align 8
  %71 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %70, i8** %71, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.103:                                        ; preds = %cond.end.63
  %72 = load i8*, i8** %end.addr, align 8
  %73 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast104 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast105 = ptrtoint i8* %73 to i64
  %sub.ptr.sub106 = sub i64 %sub.ptr.lhs.cast104, %sub.ptr.rhs.cast105
  %cmp107 = icmp slt i64 %sub.ptr.sub106, 4
  br i1 %cmp107, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %sw.bb.103
  store i32 -2, i32* %retval
  br label %return

if.end.110:                                       ; preds = %sw.bb.103
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end.63
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.85
  br label %sw.epilog.357

sw.bb.111:                                        ; preds = %cond.end, %cond.end, %cond.end
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog.138, %sw.bb.111
  %78 = load i8*, i8** %ptr.addr, align 8
  %add.ptr112 = getelementptr i8, i8* %78, i64 2
  store i8* %add.ptr112, i8** %ptr.addr, align 8
  %79 = load i8*, i8** %ptr.addr, align 8
  %80 = load i8*, i8** %end.addr, align 8
  %cmp113 = icmp eq i8* %79, %80
  br i1 %cmp113, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

if.end.116:                                       ; preds = %for.cond
  %81 = load i8*, i8** %ptr.addr, align 8
  %arrayidx117 = getelementptr i8, i8* %81, i64 1
  %82 = load i8, i8* %arrayidx117, align 1
  %conv118 = sext i8 %82 to i32
  %cmp119 = icmp eq i32 %conv118, 0
  br i1 %cmp119, label %cond.true.121, label %cond.false.126

cond.true.121:                                    ; preds = %if.end.116
  %83 = load i8*, i8** %ptr.addr, align 8
  %84 = load i8, i8* %83, align 1
  %idxprom122 = zext i8 %84 to i64
  %85 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %86 = bitcast %struct.encoding* %85 to %struct.normal_encoding*
  %type123 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %86, i32 0, i32 1
  %arrayidx124 = getelementptr [256 x i8], [256 x i8]* %type123, i32 0, i64 %idxprom122
  %87 = load i8, i8* %arrayidx124, align 1
  %conv125 = zext i8 %87 to i32
  br label %cond.end.130

cond.false.126:                                   ; preds = %if.end.116
  %88 = load i8*, i8** %ptr.addr, align 8
  %arrayidx127 = getelementptr i8, i8* %88, i64 1
  %89 = load i8, i8* %arrayidx127, align 1
  %90 = load i8*, i8** %ptr.addr, align 8
  %arrayidx128 = getelementptr i8, i8* %90, i64 0
  %91 = load i8, i8* %arrayidx128, align 1
  %call129 = call i32 @unicode_byte_type(i8 signext %89, i8 signext %91)
  br label %cond.end.130

cond.end.130:                                     ; preds = %cond.false.126, %cond.true.121
  %cond131 = phi i32 [ %conv125, %cond.true.121 ], [ %call129, %cond.false.126 ]
  store i32 %cond131, i32* %t, align 4
  %92 = load i32, i32* %t, align 4
  %cmp132 = icmp eq i32 %92, 14
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %cond.end.130
  br label %for.end

if.end.135:                                       ; preds = %cond.end.130
  %93 = load i32, i32* %t, align 4
  switch i32 %93, label %sw.default.137 [
    i32 21, label %sw.bb.136
    i32 10, label %sw.bb.136
    i32 9, label %sw.bb.136
  ]

sw.bb.136:                                        ; preds = %if.end.135, %if.end.135, %if.end.135
  br label %sw.epilog.138

sw.default.137:                                   ; preds = %if.end.135
  %94 = load i8*, i8** %ptr.addr, align 8
  %95 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %94, i8** %95, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.138:                                    ; preds = %sw.bb.136
  br label %for.cond

for.end:                                          ; preds = %if.then.134
  br label %sw.bb.139

sw.bb.139:                                        ; preds = %cond.end, %for.end
  store i32 0, i32* %hadColon, align 4
  br label %for.cond.140

for.cond.140:                                     ; preds = %sw.epilog.169, %sw.bb.139
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr141 = getelementptr i8, i8* %96, i64 2
  store i8* %add.ptr141, i8** %ptr.addr, align 8
  %97 = load i8*, i8** %ptr.addr, align 8
  %98 = load i8*, i8** %end.addr, align 8
  %cmp142 = icmp eq i8* %97, %98
  br i1 %cmp142, label %if.then.144, label %if.end.145

if.then.144:                                      ; preds = %for.cond.140
  store i32 -1, i32* %retval
  br label %return

if.end.145:                                       ; preds = %for.cond.140
  %99 = load i8*, i8** %ptr.addr, align 8
  %arrayidx146 = getelementptr i8, i8* %99, i64 1
  %100 = load i8, i8* %arrayidx146, align 1
  %conv147 = sext i8 %100 to i32
  %cmp148 = icmp eq i32 %conv147, 0
  br i1 %cmp148, label %cond.true.150, label %cond.false.155

cond.true.150:                                    ; preds = %if.end.145
  %101 = load i8*, i8** %ptr.addr, align 8
  %102 = load i8, i8* %101, align 1
  %idxprom151 = zext i8 %102 to i64
  %103 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %104 = bitcast %struct.encoding* %103 to %struct.normal_encoding*
  %type152 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %104, i32 0, i32 1
  %arrayidx153 = getelementptr [256 x i8], [256 x i8]* %type152, i32 0, i64 %idxprom151
  %105 = load i8, i8* %arrayidx153, align 1
  %conv154 = zext i8 %105 to i32
  br label %cond.end.159

cond.false.155:                                   ; preds = %if.end.145
  %106 = load i8*, i8** %ptr.addr, align 8
  %arrayidx156 = getelementptr i8, i8* %106, i64 1
  %107 = load i8, i8* %arrayidx156, align 1
  %108 = load i8*, i8** %ptr.addr, align 8
  %arrayidx157 = getelementptr i8, i8* %108, i64 0
  %109 = load i8, i8* %arrayidx157, align 1
  %call158 = call i32 @unicode_byte_type(i8 signext %107, i8 signext %109)
  br label %cond.end.159

cond.end.159:                                     ; preds = %cond.false.155, %cond.true.150
  %cond160 = phi i32 [ %conv154, %cond.true.150 ], [ %call158, %cond.false.155 ]
  store i32 %cond160, i32* %open, align 4
  %110 = load i32, i32* %open, align 4
  %cmp161 = icmp eq i32 %110, 12
  br i1 %cmp161, label %if.then.165, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.159
  %111 = load i32, i32* %open, align 4
  %cmp163 = icmp eq i32 %111, 13
  br i1 %cmp163, label %if.then.165, label %if.end.166

if.then.165:                                      ; preds = %lor.lhs.false, %cond.end.159
  br label %for.end.170

if.end.166:                                       ; preds = %lor.lhs.false
  %112 = load i32, i32* %open, align 4
  switch i32 %112, label %sw.default.168 [
    i32 21, label %sw.bb.167
    i32 10, label %sw.bb.167
    i32 9, label %sw.bb.167
  ]

sw.bb.167:                                        ; preds = %if.end.166, %if.end.166, %if.end.166
  br label %sw.epilog.169

sw.default.168:                                   ; preds = %if.end.166
  %113 = load i8*, i8** %ptr.addr, align 8
  %114 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %113, i8** %114, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.169:                                    ; preds = %sw.bb.167
  br label %for.cond.140

for.end.170:                                      ; preds = %if.then.165
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr171 = getelementptr i8, i8* %115, i64 2
  store i8* %add.ptr171, i8** %ptr.addr, align 8
  br label %for.cond.172

for.cond.172:                                     ; preds = %sw.epilog.239, %for.end.170
  %116 = load i8*, i8** %ptr.addr, align 8
  %117 = load i8*, i8** %end.addr, align 8
  %cmp174 = icmp eq i8* %116, %117
  br i1 %cmp174, label %if.then.176, label %if.end.177

if.then.176:                                      ; preds = %for.cond.172
  store i32 -1, i32* %retval
  br label %return

if.end.177:                                       ; preds = %for.cond.172
  %118 = load i8*, i8** %ptr.addr, align 8
  %arrayidx178 = getelementptr i8, i8* %118, i64 1
  %119 = load i8, i8* %arrayidx178, align 1
  %conv179 = sext i8 %119 to i32
  %cmp180 = icmp eq i32 %conv179, 0
  br i1 %cmp180, label %cond.true.182, label %cond.false.187

cond.true.182:                                    ; preds = %if.end.177
  %120 = load i8*, i8** %ptr.addr, align 8
  %121 = load i8, i8* %120, align 1
  %idxprom183 = zext i8 %121 to i64
  %122 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %123 = bitcast %struct.encoding* %122 to %struct.normal_encoding*
  %type184 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %123, i32 0, i32 1
  %arrayidx185 = getelementptr [256 x i8], [256 x i8]* %type184, i32 0, i64 %idxprom183
  %124 = load i8, i8* %arrayidx185, align 1
  %conv186 = zext i8 %124 to i32
  br label %cond.end.191

cond.false.187:                                   ; preds = %if.end.177
  %125 = load i8*, i8** %ptr.addr, align 8
  %arrayidx188 = getelementptr i8, i8* %125, i64 1
  %126 = load i8, i8* %arrayidx188, align 1
  %127 = load i8*, i8** %ptr.addr, align 8
  %arrayidx189 = getelementptr i8, i8* %127, i64 0
  %128 = load i8, i8* %arrayidx189, align 1
  %call190 = call i32 @unicode_byte_type(i8 signext %126, i8 signext %128)
  br label %cond.end.191

cond.end.191:                                     ; preds = %cond.false.187, %cond.true.182
  %cond192 = phi i32 [ %conv186, %cond.true.182 ], [ %call190, %cond.false.187 ]
  store i32 %cond192, i32* %t173, align 4
  %129 = load i32, i32* %t173, align 4
  %130 = load i32, i32* %open, align 4
  %cmp193 = icmp eq i32 %129, %130
  br i1 %cmp193, label %if.then.195, label %if.end.196

if.then.195:                                      ; preds = %cond.end.191
  br label %for.end.240

if.end.196:                                       ; preds = %cond.end.191
  %131 = load i32, i32* %t173, align 4
  switch i32 %131, label %sw.default.237 [
    i32 5, label %sw.bb.197
    i32 6, label %sw.bb.206
    i32 7, label %sw.bb.215
    i32 0, label %sw.bb.224
    i32 1, label %sw.bb.224
    i32 8, label %sw.bb.224
    i32 3, label %sw.bb.225
    i32 2, label %sw.bb.236
  ]

sw.bb.197:                                        ; preds = %if.end.196
  %132 = load i8*, i8** %end.addr, align 8
  %133 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast198 = ptrtoint i8* %132 to i64
  %sub.ptr.rhs.cast199 = ptrtoint i8* %133 to i64
  %sub.ptr.sub200 = sub i64 %sub.ptr.lhs.cast198, %sub.ptr.rhs.cast199
  %cmp201 = icmp slt i64 %sub.ptr.sub200, 2
  br i1 %cmp201, label %if.then.203, label %if.end.204

if.then.203:                                      ; preds = %sw.bb.197
  store i32 -2, i32* %retval
  br label %return

if.end.204:                                       ; preds = %sw.bb.197
  %134 = load i8*, i8** %ptr.addr, align 8
  %add.ptr205 = getelementptr i8, i8* %134, i64 2
  store i8* %add.ptr205, i8** %ptr.addr, align 8
  br label %sw.epilog.239

sw.bb.206:                                        ; preds = %if.end.196
  %135 = load i8*, i8** %end.addr, align 8
  %136 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast207 = ptrtoint i8* %135 to i64
  %sub.ptr.rhs.cast208 = ptrtoint i8* %136 to i64
  %sub.ptr.sub209 = sub i64 %sub.ptr.lhs.cast207, %sub.ptr.rhs.cast208
  %cmp210 = icmp slt i64 %sub.ptr.sub209, 3
  br i1 %cmp210, label %if.then.212, label %if.end.213

if.then.212:                                      ; preds = %sw.bb.206
  store i32 -2, i32* %retval
  br label %return

if.end.213:                                       ; preds = %sw.bb.206
  %137 = load i8*, i8** %ptr.addr, align 8
  %add.ptr214 = getelementptr i8, i8* %137, i64 3
  store i8* %add.ptr214, i8** %ptr.addr, align 8
  br label %sw.epilog.239

sw.bb.215:                                        ; preds = %if.end.196
  %138 = load i8*, i8** %end.addr, align 8
  %139 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast216 = ptrtoint i8* %138 to i64
  %sub.ptr.rhs.cast217 = ptrtoint i8* %139 to i64
  %sub.ptr.sub218 = sub i64 %sub.ptr.lhs.cast216, %sub.ptr.rhs.cast217
  %cmp219 = icmp slt i64 %sub.ptr.sub218, 4
  br i1 %cmp219, label %if.then.221, label %if.end.222

if.then.221:                                      ; preds = %sw.bb.215
  store i32 -2, i32* %retval
  br label %return

if.end.222:                                       ; preds = %sw.bb.215
  %140 = load i8*, i8** %ptr.addr, align 8
  %add.ptr223 = getelementptr i8, i8* %140, i64 4
  store i8* %add.ptr223, i8** %ptr.addr, align 8
  br label %sw.epilog.239

sw.bb.224:                                        ; preds = %if.end.196, %if.end.196, %if.end.196
  %141 = load i8*, i8** %ptr.addr, align 8
  %142 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %141, i8** %142, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.225:                                        ; preds = %if.end.196
  %143 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %144 = load i8*, i8** %ptr.addr, align 8
  %add.ptr226 = getelementptr i8, i8* %144, i64 2
  %145 = load i8*, i8** %end.addr, align 8
  %call227 = call i32 @little2_scanRef(%struct.encoding* %143, i8* %add.ptr226, i8* %145, i8** %ptr.addr)
  store i32 %call227, i32* %tok, align 4
  %146 = load i32, i32* %tok, align 4
  %cmp228 = icmp sle i32 %146, 0
  br i1 %cmp228, label %if.then.230, label %if.end.235

if.then.230:                                      ; preds = %sw.bb.225
  %147 = load i32, i32* %tok, align 4
  %cmp231 = icmp eq i32 %147, 0
  br i1 %cmp231, label %if.then.233, label %if.end.234

if.then.233:                                      ; preds = %if.then.230
  %148 = load i8*, i8** %ptr.addr, align 8
  %149 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %148, i8** %149, align 8
  br label %if.end.234

if.end.234:                                       ; preds = %if.then.233, %if.then.230
  %150 = load i32, i32* %tok, align 4
  store i32 %150, i32* %retval
  br label %return

if.end.235:                                       ; preds = %sw.bb.225
  br label %sw.epilog.239

sw.bb.236:                                        ; preds = %if.end.196
  %151 = load i8*, i8** %ptr.addr, align 8
  %152 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %151, i8** %152, align 8
  store i32 0, i32* %retval
  br label %return

sw.default.237:                                   ; preds = %if.end.196
  %153 = load i8*, i8** %ptr.addr, align 8
  %add.ptr238 = getelementptr i8, i8* %153, i64 2
  store i8* %add.ptr238, i8** %ptr.addr, align 8
  br label %sw.epilog.239

sw.epilog.239:                                    ; preds = %sw.default.237, %if.end.235, %if.end.222, %if.end.213, %if.end.204
  br label %for.cond.172

for.end.240:                                      ; preds = %if.then.195
  %154 = load i8*, i8** %ptr.addr, align 8
  %add.ptr241 = getelementptr i8, i8* %154, i64 2
  store i8* %add.ptr241, i8** %ptr.addr, align 8
  %155 = load i8*, i8** %ptr.addr, align 8
  %156 = load i8*, i8** %end.addr, align 8
  %cmp242 = icmp eq i8* %155, %156
  br i1 %cmp242, label %if.then.244, label %if.end.245

if.then.244:                                      ; preds = %for.end.240
  store i32 -1, i32* %retval
  br label %return

if.end.245:                                       ; preds = %for.end.240
  %157 = load i8*, i8** %ptr.addr, align 8
  %arrayidx246 = getelementptr i8, i8* %157, i64 1
  %158 = load i8, i8* %arrayidx246, align 1
  %conv247 = sext i8 %158 to i32
  %cmp248 = icmp eq i32 %conv247, 0
  br i1 %cmp248, label %cond.true.250, label %cond.false.255

cond.true.250:                                    ; preds = %if.end.245
  %159 = load i8*, i8** %ptr.addr, align 8
  %160 = load i8, i8* %159, align 1
  %idxprom251 = zext i8 %160 to i64
  %161 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %162 = bitcast %struct.encoding* %161 to %struct.normal_encoding*
  %type252 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %162, i32 0, i32 1
  %arrayidx253 = getelementptr [256 x i8], [256 x i8]* %type252, i32 0, i64 %idxprom251
  %163 = load i8, i8* %arrayidx253, align 1
  %conv254 = zext i8 %163 to i32
  br label %cond.end.259

cond.false.255:                                   ; preds = %if.end.245
  %164 = load i8*, i8** %ptr.addr, align 8
  %arrayidx256 = getelementptr i8, i8* %164, i64 1
  %165 = load i8, i8* %arrayidx256, align 1
  %166 = load i8*, i8** %ptr.addr, align 8
  %arrayidx257 = getelementptr i8, i8* %166, i64 0
  %167 = load i8, i8* %arrayidx257, align 1
  %call258 = call i32 @unicode_byte_type(i8 signext %165, i8 signext %167)
  br label %cond.end.259

cond.end.259:                                     ; preds = %cond.false.255, %cond.true.250
  %cond260 = phi i32 [ %conv254, %cond.true.250 ], [ %call258, %cond.false.255 ]
  switch i32 %cond260, label %sw.default.264 [
    i32 21, label %sw.bb.261
    i32 9, label %sw.bb.261
    i32 10, label %sw.bb.261
    i32 17, label %sw.bb.262
    i32 11, label %sw.bb.263
  ]

sw.bb.261:                                        ; preds = %cond.end.259, %cond.end.259, %cond.end.259
  br label %sw.epilog.265

sw.bb.262:                                        ; preds = %cond.end.259
  br label %sol

sw.bb.263:                                        ; preds = %cond.end.259
  br label %gt

sw.default.264:                                   ; preds = %cond.end.259
  %168 = load i8*, i8** %ptr.addr, align 8
  %169 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %168, i8** %169, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.265:                                    ; preds = %sw.bb.261
  br label %for.cond.266

for.cond.266:                                     ; preds = %sw.bb.333, %sw.epilog.265
  %170 = load i8*, i8** %ptr.addr, align 8
  %add.ptr267 = getelementptr i8, i8* %170, i64 2
  store i8* %add.ptr267, i8** %ptr.addr, align 8
  %171 = load i8*, i8** %ptr.addr, align 8
  %172 = load i8*, i8** %end.addr, align 8
  %cmp268 = icmp eq i8* %171, %172
  br i1 %cmp268, label %if.then.270, label %if.end.271

if.then.270:                                      ; preds = %for.cond.266
  store i32 -1, i32* %retval
  br label %return

if.end.271:                                       ; preds = %for.cond.266
  %173 = load i8*, i8** %ptr.addr, align 8
  %arrayidx272 = getelementptr i8, i8* %173, i64 1
  %174 = load i8, i8* %arrayidx272, align 1
  %conv273 = sext i8 %174 to i32
  %cmp274 = icmp eq i32 %conv273, 0
  br i1 %cmp274, label %cond.true.276, label %cond.false.281

cond.true.276:                                    ; preds = %if.end.271
  %175 = load i8*, i8** %ptr.addr, align 8
  %176 = load i8, i8* %175, align 1
  %idxprom277 = zext i8 %176 to i64
  %177 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %178 = bitcast %struct.encoding* %177 to %struct.normal_encoding*
  %type278 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %178, i32 0, i32 1
  %arrayidx279 = getelementptr [256 x i8], [256 x i8]* %type278, i32 0, i64 %idxprom277
  %179 = load i8, i8* %arrayidx279, align 1
  %conv280 = zext i8 %179 to i32
  br label %cond.end.285

cond.false.281:                                   ; preds = %if.end.271
  %180 = load i8*, i8** %ptr.addr, align 8
  %arrayidx282 = getelementptr i8, i8* %180, i64 1
  %181 = load i8, i8* %arrayidx282, align 1
  %182 = load i8*, i8** %ptr.addr, align 8
  %arrayidx283 = getelementptr i8, i8* %182, i64 0
  %183 = load i8, i8* %arrayidx283, align 1
  %call284 = call i32 @unicode_byte_type(i8 signext %181, i8 signext %183)
  br label %cond.end.285

cond.end.285:                                     ; preds = %cond.false.281, %cond.true.276
  %cond286 = phi i32 [ %conv280, %cond.true.276 ], [ %call284, %cond.false.281 ]
  switch i32 %cond286, label %sw.default.353 [
    i32 29, label %sw.bb.287
    i32 22, label %sw.bb.307
    i32 24, label %sw.bb.307
    i32 5, label %sw.bb.309
    i32 6, label %sw.bb.317
    i32 7, label %sw.bb.325
    i32 21, label %sw.bb.333
    i32 9, label %sw.bb.333
    i32 10, label %sw.bb.333
    i32 11, label %sw.bb.334
    i32 17, label %sw.bb.336
  ]

sw.bb.287:                                        ; preds = %cond.end.285
  %184 = load i8*, i8** %ptr.addr, align 8
  %arrayidx288 = getelementptr i8, i8* %184, i64 1
  %185 = load i8, i8* %arrayidx288, align 1
  %idxprom289 = zext i8 %185 to i64
  %arrayidx290 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom289
  %186 = load i8, i8* %arrayidx290, align 1
  %conv291 = zext i8 %186 to i32
  %shl292 = shl i32 %conv291, 3
  %187 = load i8*, i8** %ptr.addr, align 8
  %arrayidx293 = getelementptr i8, i8* %187, i64 0
  %188 = load i8, i8* %arrayidx293, align 1
  %conv294 = zext i8 %188 to i32
  %shr295 = ashr i32 %conv294, 5
  %add296 = add i32 %shl292, %shr295
  %idxprom297 = sext i32 %add296 to i64
  %arrayidx298 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom297
  %189 = load i32, i32* %arrayidx298, align 4
  %190 = load i8*, i8** %ptr.addr, align 8
  %arrayidx299 = getelementptr i8, i8* %190, i64 0
  %191 = load i8, i8* %arrayidx299, align 1
  %conv300 = zext i8 %191 to i32
  %and301 = and i32 %conv300, 31
  %shl302 = shl i32 1, %and301
  %and303 = and i32 %189, %shl302
  %tobool304 = icmp ne i32 %and303, 0
  br i1 %tobool304, label %if.end.306, label %if.then.305

if.then.305:                                      ; preds = %sw.bb.287
  %192 = load i8*, i8** %ptr.addr, align 8
  %193 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %192, i8** %193, align 8
  store i32 0, i32* %retval
  br label %return

if.end.306:                                       ; preds = %sw.bb.287
  br label %sw.bb.307

sw.bb.307:                                        ; preds = %cond.end.285, %cond.end.285, %if.end.306
  %194 = load i8*, i8** %ptr.addr, align 8
  %add.ptr308 = getelementptr i8, i8* %194, i64 2
  store i8* %add.ptr308, i8** %ptr.addr, align 8
  br label %sw.epilog.354

sw.bb.309:                                        ; preds = %cond.end.285
  %195 = load i8*, i8** %end.addr, align 8
  %196 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast310 = ptrtoint i8* %195 to i64
  %sub.ptr.rhs.cast311 = ptrtoint i8* %196 to i64
  %sub.ptr.sub312 = sub i64 %sub.ptr.lhs.cast310, %sub.ptr.rhs.cast311
  %cmp313 = icmp slt i64 %sub.ptr.sub312, 2
  br i1 %cmp313, label %if.then.315, label %if.end.316

if.then.315:                                      ; preds = %sw.bb.309
  store i32 -2, i32* %retval
  br label %return

if.end.316:                                       ; preds = %sw.bb.309
  %197 = load i8*, i8** %ptr.addr, align 8
  %198 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %197, i8** %198, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.317:                                        ; preds = %cond.end.285
  %199 = load i8*, i8** %end.addr, align 8
  %200 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast318 = ptrtoint i8* %199 to i64
  %sub.ptr.rhs.cast319 = ptrtoint i8* %200 to i64
  %sub.ptr.sub320 = sub i64 %sub.ptr.lhs.cast318, %sub.ptr.rhs.cast319
  %cmp321 = icmp slt i64 %sub.ptr.sub320, 3
  br i1 %cmp321, label %if.then.323, label %if.end.324

if.then.323:                                      ; preds = %sw.bb.317
  store i32 -2, i32* %retval
  br label %return

if.end.324:                                       ; preds = %sw.bb.317
  %201 = load i8*, i8** %ptr.addr, align 8
  %202 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %201, i8** %202, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.325:                                        ; preds = %cond.end.285
  %203 = load i8*, i8** %end.addr, align 8
  %204 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast326 = ptrtoint i8* %203 to i64
  %sub.ptr.rhs.cast327 = ptrtoint i8* %204 to i64
  %sub.ptr.sub328 = sub i64 %sub.ptr.lhs.cast326, %sub.ptr.rhs.cast327
  %cmp329 = icmp slt i64 %sub.ptr.sub328, 4
  br i1 %cmp329, label %if.then.331, label %if.end.332

if.then.331:                                      ; preds = %sw.bb.325
  store i32 -2, i32* %retval
  br label %return

if.end.332:                                       ; preds = %sw.bb.325
  %205 = load i8*, i8** %ptr.addr, align 8
  %206 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %205, i8** %206, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.333:                                        ; preds = %cond.end.285, %cond.end.285, %cond.end.285
  br label %for.cond.266

sw.bb.334:                                        ; preds = %cond.end.285
  br label %gt

gt:                                               ; preds = %sw.bb.334, %sw.bb.263
  %207 = load i8*, i8** %ptr.addr, align 8
  %add.ptr335 = getelementptr i8, i8* %207, i64 2
  %208 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr335, i8** %208, align 8
  store i32 1, i32* %retval
  br label %return

sw.bb.336:                                        ; preds = %cond.end.285
  br label %sol

sol:                                              ; preds = %sw.bb.336, %sw.bb.262
  %209 = load i8*, i8** %ptr.addr, align 8
  %add.ptr337 = getelementptr i8, i8* %209, i64 2
  store i8* %add.ptr337, i8** %ptr.addr, align 8
  %210 = load i8*, i8** %ptr.addr, align 8
  %211 = load i8*, i8** %end.addr, align 8
  %cmp338 = icmp eq i8* %210, %211
  br i1 %cmp338, label %if.then.340, label %if.end.341

if.then.340:                                      ; preds = %sol
  store i32 -1, i32* %retval
  br label %return

if.end.341:                                       ; preds = %sol
  %212 = load i8*, i8** %ptr.addr, align 8
  %arrayidx342 = getelementptr i8, i8* %212, i64 1
  %213 = load i8, i8* %arrayidx342, align 1
  %conv343 = sext i8 %213 to i32
  %cmp344 = icmp eq i32 %conv343, 0
  br i1 %cmp344, label %land.lhs.true, label %if.then.350

land.lhs.true:                                    ; preds = %if.end.341
  %214 = load i8*, i8** %ptr.addr, align 8
  %arrayidx346 = getelementptr i8, i8* %214, i64 0
  %215 = load i8, i8* %arrayidx346, align 1
  %conv347 = sext i8 %215 to i32
  %cmp348 = icmp eq i32 %conv347, 62
  br i1 %cmp348, label %if.end.351, label %if.then.350

if.then.350:                                      ; preds = %land.lhs.true, %if.end.341
  %216 = load i8*, i8** %ptr.addr, align 8
  %217 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %216, i8** %217, align 8
  store i32 0, i32* %retval
  br label %return

if.end.351:                                       ; preds = %land.lhs.true
  %218 = load i8*, i8** %ptr.addr, align 8
  %add.ptr352 = getelementptr i8, i8* %218, i64 2
  %219 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr352, i8** %219, align 8
  store i32 3, i32* %retval
  br label %return

sw.default.353:                                   ; preds = %cond.end.285
  %220 = load i8*, i8** %ptr.addr, align 8
  %221 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %220, i8** %221, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.354:                                    ; preds = %sw.bb.307
  br label %for.end.355

for.end.355:                                      ; preds = %sw.epilog.354
  br label %sw.epilog.357

sw.default.356:                                   ; preds = %cond.end
  %222 = load i8*, i8** %ptr.addr, align 8
  %223 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %222, i8** %223, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.357:                                    ; preds = %for.end.355, %sw.epilog, %sw.bb.19
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.356, %sw.default.353, %if.end.351, %if.then.350, %if.then.340, %gt, %if.end.332, %if.then.331, %if.end.324, %if.then.323, %if.end.316, %if.then.315, %if.then.305, %if.then.270, %sw.default.264, %if.then.244, %sw.bb.236, %if.end.234, %sw.bb.224, %if.then.221, %if.then.212, %if.then.203, %if.then.176, %sw.default.168, %if.then.144, %sw.default.137, %if.then.115, %sw.default, %if.end.110, %if.then.109, %if.end.102, %if.then.101, %if.end.94, %if.then.93, %if.then.83, %if.then.48, %if.then.43, %if.end.40, %if.then.39, %if.end.32, %if.then.31, %if.end.24, %if.then.23, %if.then
  %224 = load i32, i32* %retval
  ret i32 %224
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanCharRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end.41

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 0
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 120
  br i1 %cmp5, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 2
  %8 = load i8*, i8** %end.addr, align 8
  %9 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @little2_scanHexCharRef(%struct.encoding* %6, i8* %add.ptr, i8* %8, i8** %9)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %11 to i32
  %cmp10 = icmp eq i32 %conv9, 0
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %12 = load i8*, i8** %ptr.addr, align 8
  %13 = load i8, i8* %12, align 1
  %idxprom = zext i8 %13 to i64
  %14 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %15 = bitcast %struct.encoding* %14 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %15, i32 0, i32 1
  %arrayidx12 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %16 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %16 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx14 = getelementptr i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx14, align 1
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %19, i64 0
  %20 = load i8, i8* %arrayidx15, align 1
  %call16 = call i32 @unicode_byte_type(i8 signext %18, i8 signext %20)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv13, %cond.true ], [ %call16, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 25, label %sw.bb
  ]

sw.bb:                                            ; preds = %cond.end
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i8*, i8** %end.addr, align 8
  %cmp18 = icmp ne i8* %24, %25
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i8*, i8** %ptr.addr, align 8
  %arrayidx20 = getelementptr i8, i8* %26, i64 1
  %27 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %27 to i32
  %cmp22 = icmp eq i32 %conv21, 0
  br i1 %cmp22, label %cond.true.24, label %cond.false.29

cond.true.24:                                     ; preds = %for.body
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8, i8* %28, align 1
  %idxprom25 = zext i8 %29 to i64
  %30 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %31 = bitcast %struct.encoding* %30 to %struct.normal_encoding*
  %type26 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %31, i32 0, i32 1
  %arrayidx27 = getelementptr [256 x i8], [256 x i8]* %type26, i32 0, i64 %idxprom25
  %32 = load i8, i8* %arrayidx27, align 1
  %conv28 = zext i8 %32 to i32
  br label %cond.end.33

cond.false.29:                                    ; preds = %for.body
  %33 = load i8*, i8** %ptr.addr, align 8
  %arrayidx30 = getelementptr i8, i8* %33, i64 1
  %34 = load i8, i8* %arrayidx30, align 1
  %35 = load i8*, i8** %ptr.addr, align 8
  %arrayidx31 = getelementptr i8, i8* %35, i64 0
  %36 = load i8, i8* %arrayidx31, align 1
  %call32 = call i32 @unicode_byte_type(i8 signext %34, i8 signext %36)
  br label %cond.end.33

cond.end.33:                                      ; preds = %cond.false.29, %cond.true.24
  %cond34 = phi i32 [ %conv28, %cond.true.24 ], [ %call32, %cond.false.29 ]
  switch i32 %cond34, label %sw.default.38 [
    i32 25, label %sw.bb.35
    i32 18, label %sw.bb.36
  ]

sw.bb.35:                                         ; preds = %cond.end.33
  br label %sw.epilog.39

sw.bb.36:                                         ; preds = %cond.end.33
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %37, i64 2
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr37, i8** %38, align 8
  store i32 10, i32* %retval
  br label %return

sw.default.38:                                    ; preds = %cond.end.33
  %39 = load i8*, i8** %ptr.addr, align 8
  %40 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %39, i8** %40, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.39:                                     ; preds = %sw.bb.35
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.39
  %41 = load i8*, i8** %ptr.addr, align 8
  %add.ptr40 = getelementptr i8, i8* %41, i64 2
  store i8* %add.ptr40, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.41

if.end.41:                                        ; preds = %for.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.41, %sw.default.38, %sw.bb.36, %sw.default, %if.then.7
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i32 @little2_scanHexCharRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8, i8* %4, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx5, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 25, label %sw.bb
    i32 24, label %sw.bb
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %13, i8** %14, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %15, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %end.addr, align 8
  %cmp7 = icmp ne i8* %16, %17
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx9 = getelementptr i8, i8* %18, i64 1
  %19 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %19 to i32
  %cmp11 = icmp eq i32 %conv10, 0
  br i1 %cmp11, label %cond.true.13, label %cond.false.18

cond.true.13:                                     ; preds = %for.body
  %20 = load i8*, i8** %ptr.addr, align 8
  %21 = load i8, i8* %20, align 1
  %idxprom14 = zext i8 %21 to i64
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %type15 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 1
  %arrayidx16 = getelementptr [256 x i8], [256 x i8]* %type15, i32 0, i64 %idxprom14
  %24 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %24 to i32
  br label %cond.end.22

cond.false.18:                                    ; preds = %for.body
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %25, i64 1
  %26 = load i8, i8* %arrayidx19, align 1
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx20 = getelementptr i8, i8* %27, i64 0
  %28 = load i8, i8* %arrayidx20, align 1
  %call21 = call i32 @unicode_byte_type(i8 signext %26, i8 signext %28)
  br label %cond.end.22

cond.end.22:                                      ; preds = %cond.false.18, %cond.true.13
  %cond23 = phi i32 [ %conv17, %cond.true.13 ], [ %call21, %cond.false.18 ]
  switch i32 %cond23, label %sw.default.27 [
    i32 25, label %sw.bb.24
    i32 24, label %sw.bb.24
    i32 18, label %sw.bb.25
  ]

sw.bb.24:                                         ; preds = %cond.end.22, %cond.end.22
  br label %sw.epilog.28

sw.bb.25:                                         ; preds = %cond.end.22
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %29, i64 2
  %30 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr26, i8** %30, align 8
  store i32 10, i32* %retval
  br label %return

sw.default.27:                                    ; preds = %cond.end.22
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %31, i8** %32, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.28:                                     ; preds = %sw.bb.24
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.28
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr29 = getelementptr i8, i8* %33, i64 2
  store i8* %add.ptr29, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %sw.default.27, %sw.bb.25, %sw.default
  %34 = load i32, i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @streqci(i8* %s1, i8* %s2) #0 {
entry:
  %retval = alloca i32, align 4
  %s1.addr = alloca i8*, align 8
  %s2.addr = alloca i8*, align 8
  %c1 = alloca i8, align 1
  %c2 = alloca i8, align 1
  store i8* %s1, i8** %s1.addr, align 8
  store i8* %s2, i8** %s2.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.27, %entry
  %0 = load i8*, i8** %s1.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %0, i32 1
  store i8* %incdec.ptr, i8** %s1.addr, align 8
  %1 = load i8, i8* %0, align 1
  store i8 %1, i8* %c1, align 1
  %2 = load i8*, i8** %s2.addr, align 8
  %incdec.ptr1 = getelementptr i8, i8* %2, i32 1
  store i8* %incdec.ptr1, i8** %s2.addr, align 8
  %3 = load i8, i8* %2, align 1
  store i8 %3, i8* %c2, align 1
  %4 = load i8, i8* %c1, align 1
  %conv = sext i8 %4 to i32
  %cmp = icmp sle i32 97, %conv
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.cond
  %5 = load i8, i8* %c1, align 1
  %conv3 = sext i8 %5 to i32
  %cmp4 = icmp sle i32 %conv3, 122
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8, i8* %c1, align 1
  %conv6 = sext i8 %6 to i32
  %add = add i32 %conv6, -32
  %conv7 = trunc i32 %add to i8
  store i8 %conv7, i8* %c1, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.cond
  %7 = load i8, i8* %c2, align 1
  %conv8 = sext i8 %7 to i32
  %cmp9 = icmp sle i32 97, %conv8
  br i1 %cmp9, label %land.lhs.true.11, label %if.end.19

land.lhs.true.11:                                 ; preds = %if.end
  %8 = load i8, i8* %c2, align 1
  %conv12 = sext i8 %8 to i32
  %cmp13 = icmp sle i32 %conv12, 122
  br i1 %cmp13, label %if.then.15, label %if.end.19

if.then.15:                                       ; preds = %land.lhs.true.11
  %9 = load i8, i8* %c2, align 1
  %conv16 = sext i8 %9 to i32
  %add17 = add i32 %conv16, -32
  %conv18 = trunc i32 %add17 to i8
  store i8 %conv18, i8* %c2, align 1
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.15, %land.lhs.true.11, %if.end
  %10 = load i8, i8* %c1, align 1
  %conv20 = sext i8 %10 to i32
  %11 = load i8, i8* %c2, align 1
  %conv21 = sext i8 %11 to i32
  %cmp22 = icmp ne i32 %conv20, %conv21
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.19
  store i32 0, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.19
  %12 = load i8, i8* %c1, align 1
  %tobool = icmp ne i8 %12, 0
  br i1 %tobool, label %if.end.27, label %if.then.26

if.then.26:                                       ; preds = %if.end.25
  br label %for.end

if.end.27:                                        ; preds = %if.end.25
  br label %for.cond

for.end:                                          ; preds = %if.then.26
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.24
  %13 = load i32, i32* %retval
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define internal i32 @initScan(%struct.encoding** %encodingTable, %struct.INIT_ENCODING* %enc, i32 %state, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %encodingTable.addr = alloca %struct.encoding**, align 8
  %enc.addr = alloca %struct.INIT_ENCODING*, align 8
  %state.addr = alloca i32, align 4
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %encPtr = alloca %struct.encoding**, align 8
  %e = alloca i32, align 4
  store %struct.encoding** %encodingTable, %struct.encoding*** %encodingTable.addr, align 8
  store %struct.INIT_ENCODING* %enc, %struct.INIT_ENCODING** %enc.addr, align 8
  store i32 %state, i32* %state.addr, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %encPtr1 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %2, i32 0, i32 1
  %3 = load %struct.encoding**, %struct.encoding*** %encPtr1, align 8
  store %struct.encoding** %3, %struct.encoding*** %encPtr, align 8
  %4 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %4, i64 1
  %5 = load i8*, i8** %end.addr, align 8
  %cmp2 = icmp eq i8* %add.ptr, %5
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.end
  %6 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %6, i32 0, i32 0
  %isUtf16 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc, i32 0, i32 15
  %7 = load i8, i8* %isUtf16, align 1
  %conv = sext i8 %7 to i32
  switch i32 %conv, label %sw.epilog [
    i32 3, label %sw.bb
    i32 5, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.3, %if.then.3, %if.then.3
  store i32 -1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.then.3
  %8 = load i8*, i8** %ptr.addr, align 8
  %9 = load i8, i8* %8, align 1
  %conv4 = zext i8 %9 to i32
  switch i32 %conv4, label %sw.epilog.16 [
    i32 254, label %sw.bb.5
    i32 255, label %sw.bb.5
    i32 239, label %sw.bb.5
    i32 0, label %sw.bb.15
    i32 60, label %sw.bb.15
  ]

sw.bb.5:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  %10 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc6 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %10, i32 0, i32 0
  %isUtf167 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc6, i32 0, i32 15
  %11 = load i8, i8* %isUtf167, align 1
  %conv8 = sext i8 %11 to i32
  %cmp9 = icmp eq i32 %conv8, 0
  br i1 %cmp9, label %land.lhs.true, label %if.end.14

land.lhs.true:                                    ; preds = %sw.bb.5
  %12 = load i32, i32* %state.addr, align 4
  %cmp11 = icmp eq i32 %12, 1
  br i1 %cmp11, label %if.then.13, label %if.end.14

if.then.13:                                       ; preds = %land.lhs.true
  br label %sw.epilog.16

if.end.14:                                        ; preds = %land.lhs.true, %sw.bb.5
  br label %sw.bb.15

sw.bb.15:                                         ; preds = %sw.epilog, %sw.epilog, %if.end.14
  store i32 -1, i32* %retval
  br label %return

sw.epilog.16:                                     ; preds = %sw.epilog, %if.then.13
  br label %if.end.136

if.else:                                          ; preds = %if.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx, align 1
  %conv17 = zext i8 %14 to i32
  %shl = shl i32 %conv17, 8
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx18 = getelementptr i8, i8* %15, i64 1
  %16 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %16 to i32
  %or = or i32 %shl, %conv19
  switch i32 %or, label %sw.default [
    i32 65279, label %sw.bb.20
    i32 15360, label %sw.bb.33
    i32 65534, label %sw.bb.51
    i32 61371, label %sw.bb.64
  ]

sw.bb.20:                                         ; preds = %if.else
  %17 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc21 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %17, i32 0, i32 0
  %isUtf1622 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc21, i32 0, i32 15
  %18 = load i8, i8* %isUtf1622, align 1
  %conv23 = sext i8 %18 to i32
  %cmp24 = icmp eq i32 %conv23, 0
  br i1 %cmp24, label %land.lhs.true.26, label %if.end.30

land.lhs.true.26:                                 ; preds = %sw.bb.20
  %19 = load i32, i32* %state.addr, align 4
  %cmp27 = icmp eq i32 %19, 1
  br i1 %cmp27, label %if.then.29, label %if.end.30

if.then.29:                                       ; preds = %land.lhs.true.26
  br label %sw.epilog.135

if.end.30:                                        ; preds = %land.lhs.true.26, %sw.bb.20
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr31 = getelementptr i8, i8* %20, i64 2
  %21 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr31, i8** %21, align 8
  %22 = load %struct.encoding**, %struct.encoding*** %encodingTable.addr, align 8
  %arrayidx32 = getelementptr %struct.encoding*, %struct.encoding** %22, i64 4
  %23 = load %struct.encoding*, %struct.encoding** %arrayidx32, align 8
  %24 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  store %struct.encoding* %23, %struct.encoding** %24, align 8
  store i32 14, i32* %retval
  br label %return

sw.bb.33:                                         ; preds = %if.else
  %25 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc34 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %25, i32 0, i32 0
  %isUtf1635 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc34, i32 0, i32 15
  %26 = load i8, i8* %isUtf1635, align 1
  %conv36 = sext i8 %26 to i32
  %cmp37 = icmp eq i32 %conv36, 4
  br i1 %cmp37, label %land.lhs.true.44, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb.33
  %27 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc39 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %27, i32 0, i32 0
  %isUtf1640 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc39, i32 0, i32 15
  %28 = load i8, i8* %isUtf1640, align 1
  %conv41 = sext i8 %28 to i32
  %cmp42 = icmp eq i32 %conv41, 3
  br i1 %cmp42, label %land.lhs.true.44, label %if.end.48

land.lhs.true.44:                                 ; preds = %lor.lhs.false, %sw.bb.33
  %29 = load i32, i32* %state.addr, align 4
  %cmp45 = icmp eq i32 %29, 1
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %land.lhs.true.44
  br label %sw.epilog.135

if.end.48:                                        ; preds = %land.lhs.true.44, %lor.lhs.false
  %30 = load %struct.encoding**, %struct.encoding*** %encodingTable.addr, align 8
  %arrayidx49 = getelementptr %struct.encoding*, %struct.encoding** %30, i64 5
  %31 = load %struct.encoding*, %struct.encoding** %arrayidx49, align 8
  %32 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  store %struct.encoding* %31, %struct.encoding** %32, align 8
  %33 = load i32, i32* %state.addr, align 4
  %idxprom = sext i32 %33 to i64
  %34 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %35 = load %struct.encoding*, %struct.encoding** %34, align 8
  %scanners = getelementptr inbounds %struct.encoding, %struct.encoding* %35, i32 0, i32 0
  %arrayidx50 = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners, i32 0, i64 %idxprom
  %36 = load i32 (%struct.encoding*, i8*, i8*, i8**)*, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx50, align 8
  %37 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %38 = load %struct.encoding*, %struct.encoding** %37, align 8
  %39 = load i8*, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %end.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 %36(%struct.encoding* %38, i8* %39, i8* %40, i8** %41)
  store i32 %call, i32* %retval
  br label %return

sw.bb.51:                                         ; preds = %if.else
  %42 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc52 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %42, i32 0, i32 0
  %isUtf1653 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc52, i32 0, i32 15
  %43 = load i8, i8* %isUtf1653, align 1
  %conv54 = sext i8 %43 to i32
  %cmp55 = icmp eq i32 %conv54, 0
  br i1 %cmp55, label %land.lhs.true.57, label %if.end.61

land.lhs.true.57:                                 ; preds = %sw.bb.51
  %44 = load i32, i32* %state.addr, align 4
  %cmp58 = icmp eq i32 %44, 1
  br i1 %cmp58, label %if.then.60, label %if.end.61

if.then.60:                                       ; preds = %land.lhs.true.57
  br label %sw.epilog.135

if.end.61:                                        ; preds = %land.lhs.true.57, %sw.bb.51
  %45 = load i8*, i8** %ptr.addr, align 8
  %add.ptr62 = getelementptr i8, i8* %45, i64 2
  %46 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr62, i8** %46, align 8
  %47 = load %struct.encoding**, %struct.encoding*** %encodingTable.addr, align 8
  %arrayidx63 = getelementptr %struct.encoding*, %struct.encoding** %47, i64 5
  %48 = load %struct.encoding*, %struct.encoding** %arrayidx63, align 8
  %49 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  store %struct.encoding* %48, %struct.encoding** %49, align 8
  store i32 14, i32* %retval
  br label %return

sw.bb.64:                                         ; preds = %if.else
  %50 = load i32, i32* %state.addr, align 4
  %cmp65 = icmp eq i32 %50, 1
  br i1 %cmp65, label %if.then.67, label %if.end.84

if.then.67:                                       ; preds = %sw.bb.64
  %51 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc68 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %51, i32 0, i32 0
  %isUtf1669 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc68, i32 0, i32 15
  %52 = load i8, i8* %isUtf1669, align 1
  %conv70 = sext i8 %52 to i32
  store i32 %conv70, i32* %e, align 4
  %53 = load i32, i32* %e, align 4
  %cmp71 = icmp eq i32 %53, 0
  br i1 %cmp71, label %if.then.82, label %lor.lhs.false.73

lor.lhs.false.73:                                 ; preds = %if.then.67
  %54 = load i32, i32* %e, align 4
  %cmp74 = icmp eq i32 %54, 4
  br i1 %cmp74, label %if.then.82, label %lor.lhs.false.76

lor.lhs.false.76:                                 ; preds = %lor.lhs.false.73
  %55 = load i32, i32* %e, align 4
  %cmp77 = icmp eq i32 %55, 5
  br i1 %cmp77, label %if.then.82, label %lor.lhs.false.79

lor.lhs.false.79:                                 ; preds = %lor.lhs.false.76
  %56 = load i32, i32* %e, align 4
  %cmp80 = icmp eq i32 %56, 3
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %lor.lhs.false.79, %lor.lhs.false.76, %lor.lhs.false.73, %if.then.67
  br label %sw.epilog.135

if.end.83:                                        ; preds = %lor.lhs.false.79
  br label %if.end.84

if.end.84:                                        ; preds = %if.end.83, %sw.bb.64
  %57 = load i8*, i8** %ptr.addr, align 8
  %add.ptr85 = getelementptr i8, i8* %57, i64 2
  %58 = load i8*, i8** %end.addr, align 8
  %cmp86 = icmp eq i8* %add.ptr85, %58
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.end.84
  store i32 -1, i32* %retval
  br label %return

if.end.89:                                        ; preds = %if.end.84
  %59 = load i8*, i8** %ptr.addr, align 8
  %arrayidx90 = getelementptr i8, i8* %59, i64 2
  %60 = load i8, i8* %arrayidx90, align 1
  %conv91 = zext i8 %60 to i32
  %cmp92 = icmp eq i32 %conv91, 191
  br i1 %cmp92, label %if.then.94, label %if.end.97

if.then.94:                                       ; preds = %if.end.89
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr95 = getelementptr i8, i8* %61, i64 3
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr95, i8** %62, align 8
  %63 = load %struct.encoding**, %struct.encoding*** %encodingTable.addr, align 8
  %arrayidx96 = getelementptr %struct.encoding*, %struct.encoding** %63, i64 2
  %64 = load %struct.encoding*, %struct.encoding** %arrayidx96, align 8
  %65 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  store %struct.encoding* %64, %struct.encoding** %65, align 8
  store i32 14, i32* %retval
  br label %return

if.end.97:                                        ; preds = %if.end.89
  br label %sw.epilog.135

sw.default:                                       ; preds = %if.else
  %66 = load i8*, i8** %ptr.addr, align 8
  %arrayidx98 = getelementptr i8, i8* %66, i64 0
  %67 = load i8, i8* %arrayidx98, align 1
  %conv99 = sext i8 %67 to i32
  %cmp100 = icmp eq i32 %conv99, 0
  br i1 %cmp100, label %if.then.102, label %if.else.118

if.then.102:                                      ; preds = %sw.default
  %68 = load i32, i32* %state.addr, align 4
  %cmp103 = icmp eq i32 %68, 1
  br i1 %cmp103, label %land.lhs.true.105, label %if.end.112

land.lhs.true.105:                                ; preds = %if.then.102
  %69 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc106 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %69, i32 0, i32 0
  %isUtf16107 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc106, i32 0, i32 15
  %70 = load i8, i8* %isUtf16107, align 1
  %conv108 = sext i8 %70 to i32
  %cmp109 = icmp eq i32 %conv108, 5
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %land.lhs.true.105
  br label %sw.epilog.135

if.end.112:                                       ; preds = %land.lhs.true.105, %if.then.102
  %71 = load %struct.encoding**, %struct.encoding*** %encodingTable.addr, align 8
  %arrayidx113 = getelementptr %struct.encoding*, %struct.encoding** %71, i64 4
  %72 = load %struct.encoding*, %struct.encoding** %arrayidx113, align 8
  %73 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  store %struct.encoding* %72, %struct.encoding** %73, align 8
  %74 = load i32, i32* %state.addr, align 4
  %idxprom114 = sext i32 %74 to i64
  %75 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %76 = load %struct.encoding*, %struct.encoding** %75, align 8
  %scanners115 = getelementptr inbounds %struct.encoding, %struct.encoding* %76, i32 0, i32 0
  %arrayidx116 = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners115, i32 0, i64 %idxprom114
  %77 = load i32 (%struct.encoding*, i8*, i8*, i8**)*, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx116, align 8
  %78 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %79 = load %struct.encoding*, %struct.encoding** %78, align 8
  %80 = load i8*, i8** %ptr.addr, align 8
  %81 = load i8*, i8** %end.addr, align 8
  %82 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call117 = call i32 %77(%struct.encoding* %79, i8* %80, i8* %81, i8** %82)
  store i32 %call117, i32* %retval
  br label %return

if.else.118:                                      ; preds = %sw.default
  %83 = load i8*, i8** %ptr.addr, align 8
  %arrayidx119 = getelementptr i8, i8* %83, i64 1
  %84 = load i8, i8* %arrayidx119, align 1
  %conv120 = sext i8 %84 to i32
  %cmp121 = icmp eq i32 %conv120, 0
  br i1 %cmp121, label %if.then.123, label %if.end.133

if.then.123:                                      ; preds = %if.else.118
  %85 = load i32, i32* %state.addr, align 4
  %cmp124 = icmp eq i32 %85, 1
  br i1 %cmp124, label %if.then.126, label %if.end.127

if.then.126:                                      ; preds = %if.then.123
  br label %sw.epilog.135

if.end.127:                                       ; preds = %if.then.123
  %86 = load %struct.encoding**, %struct.encoding*** %encodingTable.addr, align 8
  %arrayidx128 = getelementptr %struct.encoding*, %struct.encoding** %86, i64 5
  %87 = load %struct.encoding*, %struct.encoding** %arrayidx128, align 8
  %88 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  store %struct.encoding* %87, %struct.encoding** %88, align 8
  %89 = load i32, i32* %state.addr, align 4
  %idxprom129 = sext i32 %89 to i64
  %90 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %91 = load %struct.encoding*, %struct.encoding** %90, align 8
  %scanners130 = getelementptr inbounds %struct.encoding, %struct.encoding* %91, i32 0, i32 0
  %arrayidx131 = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners130, i32 0, i64 %idxprom129
  %92 = load i32 (%struct.encoding*, i8*, i8*, i8**)*, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx131, align 8
  %93 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %94 = load %struct.encoding*, %struct.encoding** %93, align 8
  %95 = load i8*, i8** %ptr.addr, align 8
  %96 = load i8*, i8** %end.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call132 = call i32 %92(%struct.encoding* %94, i8* %95, i8* %96, i8** %97)
  store i32 %call132, i32* %retval
  br label %return

if.end.133:                                       ; preds = %if.else.118
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133
  br label %sw.epilog.135

sw.epilog.135:                                    ; preds = %if.end.134, %if.then.126, %if.then.111, %if.end.97, %if.then.82, %if.then.60, %if.then.47, %if.then.29
  br label %if.end.136

if.end.136:                                       ; preds = %sw.epilog.135, %sw.epilog.16
  %98 = load %struct.INIT_ENCODING*, %struct.INIT_ENCODING** %enc.addr, align 8
  %initEnc137 = getelementptr inbounds %struct.INIT_ENCODING, %struct.INIT_ENCODING* %98, i32 0, i32 0
  %isUtf16138 = getelementptr inbounds %struct.encoding, %struct.encoding* %initEnc137, i32 0, i32 15
  %99 = load i8, i8* %isUtf16138, align 1
  %conv139 = sext i8 %99 to i32
  %idxprom140 = sext i32 %conv139 to i64
  %100 = load %struct.encoding**, %struct.encoding*** %encodingTable.addr, align 8
  %arrayidx141 = getelementptr %struct.encoding*, %struct.encoding** %100, i64 %idxprom140
  %101 = load %struct.encoding*, %struct.encoding** %arrayidx141, align 8
  %102 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  store %struct.encoding* %101, %struct.encoding** %102, align 8
  %103 = load i32, i32* %state.addr, align 4
  %idxprom142 = sext i32 %103 to i64
  %104 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %105 = load %struct.encoding*, %struct.encoding** %104, align 8
  %scanners143 = getelementptr inbounds %struct.encoding, %struct.encoding* %105, i32 0, i32 0
  %arrayidx144 = getelementptr [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*], [4 x i32 (%struct.encoding*, i8*, i8*, i8**)*]* %scanners143, i32 0, i64 %idxprom142
  %106 = load i32 (%struct.encoding*, i8*, i8*, i8**)*, i32 (%struct.encoding*, i8*, i8*, i8**)** %arrayidx144, align 8
  %107 = load %struct.encoding**, %struct.encoding*** %encPtr, align 8
  %108 = load %struct.encoding*, %struct.encoding** %107, align 8
  %109 = load i8*, i8** %ptr.addr, align 8
  %110 = load i8*, i8** %end.addr, align 8
  %111 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call145 = call i32 %106(%struct.encoding* %108, i8* %109, i8* %110, i8** %111)
  store i32 %call145, i32* %retval
  br label %return

return:                                           ; preds = %if.end.136, %if.end.127, %if.end.112, %if.then.94, %if.then.88, %if.end.61, %if.end.48, %if.end.30, %sw.bb.15, %sw.bb, %if.then
  %112 = load i32, i32* %retval
  ret i32 %112
}

; Function Attrs: nounwind uwtable
define internal void @ascii_toUtf8(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i8** %toP, i8* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i8**, align 8
  %toLim.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i8** %toP, i8*** %toP.addr, align 8
  store i8* %toLim, i8** %toLim.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load i8**, i8*** %fromP.addr, align 8
  %1 = load i8*, i8** %0, align 8
  %2 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp ne i8* %1, %2
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %3 = load i8**, i8*** %toP.addr, align 8
  %4 = load i8*, i8** %3, align 8
  %5 = load i8*, i8** %toLim.addr, align 8
  %cmp1 = icmp ne i8* %4, %5
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %6 = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %6, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %7 = load i8**, i8*** %fromP.addr, align 8
  %8 = load i8*, i8** %7, align 8
  %incdec.ptr = getelementptr i8, i8* %8, i32 1
  store i8* %incdec.ptr, i8** %7, align 8
  %9 = load i8, i8* %8, align 1
  %10 = load i8**, i8*** %toP.addr, align 8
  %11 = load i8*, i8** %10, align 8
  %incdec.ptr2 = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr2, i8** %10, align 8
  store i8 %9, i8* %11, align 1
  br label %while.cond

while.end:                                        ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_prologTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %tok = alloca i32, align 4
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %4 = load i64, i64* %n, align 8
  %and = and i64 %4, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %5 = load i64, i64* %n, align 8
  %and2 = and i64 %5, -2
  store i64 %and2, i64* %n, align 8
  %6 = load i64, i64* %n, align 8
  %cmp3 = icmp eq i64 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv, 0
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.6
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx9 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx9, align 1
  %idxprom = zext i8 %12 to i64
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = bitcast %struct.encoding* %13 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %14, i32 0, i32 1
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.6
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx12, align 1
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx13 = getelementptr i8, i8* %18, i64 1
  %19 = load i8, i8* %arrayidx13, align 1
  %call = call i32 @unicode_byte_type(i8 signext %17, i8 signext %19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv11, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default.232 [
    i32 12, label %sw.bb
    i32 13, label %sw.bb.16
    i32 2, label %sw.bb.19
    i32 9, label %sw.bb.49
    i32 21, label %sw.bb.55
    i32 10, label %sw.bb.55
    i32 30, label %sw.bb.85
    i32 35, label %sw.bb.88
    i32 20, label %sw.bb.90
    i32 4, label %sw.bb.92
    i32 31, label %sw.bb.127
    i32 32, label %sw.bb.129
    i32 36, label %sw.bb.159
    i32 11, label %sw.bb.161
    i32 19, label %sw.bb.163
    i32 5, label %sw.bb.166
    i32 6, label %sw.bb.174
    i32 7, label %sw.bb.182
    i32 22, label %sw.bb.190
    i32 24, label %sw.bb.190
    i32 25, label %sw.bb.192
    i32 26, label %sw.bb.192
    i32 27, label %sw.bb.192
    i32 23, label %sw.bb.192
    i32 29, label %sw.bb.194
  ]

sw.bb:                                            ; preds = %cond.end
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %add.ptr14 = getelementptr i8, i8* %21, i64 2
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call15 = call i32 @big2_scanLit(i32 12, %struct.encoding* %20, i8* %add.ptr14, i8* %22, i8** %23)
  store i32 %call15, i32* %retval
  br label %return

sw.bb.16:                                         ; preds = %cond.end
  %24 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %25, i64 2
  %26 = load i8*, i8** %end.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call18 = call i32 @big2_scanLit(i32 13, %struct.encoding* %24, i8* %add.ptr17, i8* %26, i8** %27)
  store i32 %call18, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %cond.end
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr20 = getelementptr i8, i8* %28, i64 2
  store i8* %add.ptr20, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %end.addr, align 8
  %cmp21 = icmp eq i8* %29, %30
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %sw.bb.19
  store i32 -1, i32* %retval
  br label %return

if.end.24:                                        ; preds = %sw.bb.19
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx25 = getelementptr i8, i8* %31, i64 0
  %32 = load i8, i8* %arrayidx25, align 1
  %conv26 = sext i8 %32 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %cond.true.29, label %cond.false.35

cond.true.29:                                     ; preds = %if.end.24
  %33 = load i8*, i8** %ptr.addr, align 8
  %arrayidx30 = getelementptr i8, i8* %33, i64 1
  %34 = load i8, i8* %arrayidx30, align 1
  %idxprom31 = zext i8 %34 to i64
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = bitcast %struct.encoding* %35 to %struct.normal_encoding*
  %type32 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %36, i32 0, i32 1
  %arrayidx33 = getelementptr [256 x i8], [256 x i8]* %type32, i32 0, i64 %idxprom31
  %37 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %37 to i32
  br label %cond.end.39

cond.false.35:                                    ; preds = %if.end.24
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx36 = getelementptr i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx36, align 1
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx37 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx37, align 1
  %call38 = call i32 @unicode_byte_type(i8 signext %39, i8 signext %41)
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.35, %cond.true.29
  %cond40 = phi i32 [ %conv34, %cond.true.29 ], [ %call38, %cond.false.35 ]
  switch i32 %cond40, label %sw.epilog [
    i32 16, label %sw.bb.41
    i32 15, label %sw.bb.44
    i32 22, label %sw.bb.47
    i32 24, label %sw.bb.47
    i32 29, label %sw.bb.47
    i32 5, label %sw.bb.47
    i32 6, label %sw.bb.47
    i32 7, label %sw.bb.47
  ]

sw.bb.41:                                         ; preds = %cond.end.39
  %42 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %43, i64 2
  %44 = load i8*, i8** %end.addr, align 8
  %45 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call43 = call i32 @big2_scanDecl(%struct.encoding* %42, i8* %add.ptr42, i8* %44, i8** %45)
  store i32 %call43, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %cond.end.39
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %47, i64 2
  %48 = load i8*, i8** %end.addr, align 8
  %49 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call46 = call i32 @big2_scanPi(%struct.encoding* %46, i8* %add.ptr45, i8* %48, i8** %49)
  store i32 %call46, i32* %retval
  br label %return

sw.bb.47:                                         ; preds = %cond.end.39, %cond.end.39, %cond.end.39, %cond.end.39, %cond.end.39, %cond.end.39
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr48 = getelementptr i8, i8* %50, i64 -2
  %51 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr48, i8** %51, align 8
  store i32 29, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %cond.end.39
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %52, i8** %53, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.49:                                         ; preds = %cond.end
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr50 = getelementptr i8, i8* %54, i64 2
  %55 = load i8*, i8** %end.addr, align 8
  %cmp51 = icmp eq i8* %add.ptr50, %55
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %sw.bb.49
  %56 = load i8*, i8** %end.addr, align 8
  %57 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %56, i8** %57, align 8
  store i32 -15, i32* %retval
  br label %return

if.end.54:                                        ; preds = %sw.bb.49
  br label %sw.bb.55

sw.bb.55:                                         ; preds = %cond.end, %cond.end, %if.end.54
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog.84, %sw.bb.55
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr56 = getelementptr i8, i8* %58, i64 2
  store i8* %add.ptr56, i8** %ptr.addr, align 8
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8*, i8** %end.addr, align 8
  %cmp57 = icmp eq i8* %59, %60
  br i1 %cmp57, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %for.cond
  br label %for.end

if.end.60:                                        ; preds = %for.cond
  %61 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %61, i64 0
  %62 = load i8, i8* %arrayidx61, align 1
  %conv62 = sext i8 %62 to i32
  %cmp63 = icmp eq i32 %conv62, 0
  br i1 %cmp63, label %cond.true.65, label %cond.false.71

cond.true.65:                                     ; preds = %if.end.60
  %63 = load i8*, i8** %ptr.addr, align 8
  %arrayidx66 = getelementptr i8, i8* %63, i64 1
  %64 = load i8, i8* %arrayidx66, align 1
  %idxprom67 = zext i8 %64 to i64
  %65 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %66 = bitcast %struct.encoding* %65 to %struct.normal_encoding*
  %type68 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %66, i32 0, i32 1
  %arrayidx69 = getelementptr [256 x i8], [256 x i8]* %type68, i32 0, i64 %idxprom67
  %67 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %67 to i32
  br label %cond.end.75

cond.false.71:                                    ; preds = %if.end.60
  %68 = load i8*, i8** %ptr.addr, align 8
  %arrayidx72 = getelementptr i8, i8* %68, i64 0
  %69 = load i8, i8* %arrayidx72, align 1
  %70 = load i8*, i8** %ptr.addr, align 8
  %arrayidx73 = getelementptr i8, i8* %70, i64 1
  %71 = load i8, i8* %arrayidx73, align 1
  %call74 = call i32 @unicode_byte_type(i8 signext %69, i8 signext %71)
  br label %cond.end.75

cond.end.75:                                      ; preds = %cond.false.71, %cond.true.65
  %cond76 = phi i32 [ %conv70, %cond.true.65 ], [ %call74, %cond.false.71 ]
  switch i32 %cond76, label %sw.default [
    i32 21, label %sw.bb.77
    i32 10, label %sw.bb.77
    i32 9, label %sw.bb.78
  ]

sw.bb.77:                                         ; preds = %cond.end.75, %cond.end.75
  br label %sw.epilog.84

sw.bb.78:                                         ; preds = %cond.end.75
  %72 = load i8*, i8** %ptr.addr, align 8
  %add.ptr79 = getelementptr i8, i8* %72, i64 2
  %73 = load i8*, i8** %end.addr, align 8
  %cmp80 = icmp ne i8* %add.ptr79, %73
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %sw.bb.78
  br label %sw.epilog.84

if.end.83:                                        ; preds = %sw.bb.78
  br label %sw.default

sw.default:                                       ; preds = %cond.end.75, %if.end.83
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 15, i32* %retval
  br label %return

sw.epilog.84:                                     ; preds = %if.then.82, %sw.bb.77
  br label %for.cond

for.end:                                          ; preds = %if.then.59
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 15, i32* %retval
  br label %return

sw.bb.85:                                         ; preds = %cond.end
  %78 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %79 = load i8*, i8** %ptr.addr, align 8
  %add.ptr86 = getelementptr i8, i8* %79, i64 2
  %80 = load i8*, i8** %end.addr, align 8
  %81 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call87 = call i32 @big2_scanPercent(%struct.encoding* %78, i8* %add.ptr86, i8* %80, i8** %81)
  store i32 %call87, i32* %retval
  br label %return

sw.bb.88:                                         ; preds = %cond.end
  %82 = load i8*, i8** %ptr.addr, align 8
  %add.ptr89 = getelementptr i8, i8* %82, i64 2
  %83 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr89, i8** %83, align 8
  store i32 38, i32* %retval
  br label %return

sw.bb.90:                                         ; preds = %cond.end
  %84 = load i8*, i8** %ptr.addr, align 8
  %add.ptr91 = getelementptr i8, i8* %84, i64 2
  %85 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr91, i8** %85, align 8
  store i32 25, i32* %retval
  br label %return

sw.bb.92:                                         ; preds = %cond.end
  %86 = load i8*, i8** %ptr.addr, align 8
  %add.ptr93 = getelementptr i8, i8* %86, i64 2
  store i8* %add.ptr93, i8** %ptr.addr, align 8
  %87 = load i8*, i8** %ptr.addr, align 8
  %88 = load i8*, i8** %end.addr, align 8
  %cmp94 = icmp eq i8* %87, %88
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %sw.bb.92
  store i32 -26, i32* %retval
  br label %return

if.end.97:                                        ; preds = %sw.bb.92
  %89 = load i8*, i8** %ptr.addr, align 8
  %arrayidx98 = getelementptr i8, i8* %89, i64 0
  %90 = load i8, i8* %arrayidx98, align 1
  %conv99 = sext i8 %90 to i32
  %cmp100 = icmp eq i32 %conv99, 0
  br i1 %cmp100, label %land.lhs.true, label %if.end.126

land.lhs.true:                                    ; preds = %if.end.97
  %91 = load i8*, i8** %ptr.addr, align 8
  %arrayidx102 = getelementptr i8, i8* %91, i64 1
  %92 = load i8, i8* %arrayidx102, align 1
  %conv103 = sext i8 %92 to i32
  %cmp104 = icmp eq i32 %conv103, 93
  br i1 %cmp104, label %if.then.106, label %if.end.126

if.then.106:                                      ; preds = %land.lhs.true
  %93 = load i8*, i8** %ptr.addr, align 8
  %add.ptr107 = getelementptr i8, i8* %93, i64 2
  %94 = load i8*, i8** %end.addr, align 8
  %cmp108 = icmp eq i8* %add.ptr107, %94
  br i1 %cmp108, label %if.then.110, label %if.end.111

if.then.110:                                      ; preds = %if.then.106
  store i32 -1, i32* %retval
  br label %return

if.end.111:                                       ; preds = %if.then.106
  %95 = load i8*, i8** %ptr.addr, align 8
  %add.ptr112 = getelementptr i8, i8* %95, i64 2
  %arrayidx113 = getelementptr i8, i8* %add.ptr112, i64 0
  %96 = load i8, i8* %arrayidx113, align 1
  %conv114 = sext i8 %96 to i32
  %cmp115 = icmp eq i32 %conv114, 0
  br i1 %cmp115, label %land.lhs.true.117, label %if.end.125

land.lhs.true.117:                                ; preds = %if.end.111
  %97 = load i8*, i8** %ptr.addr, align 8
  %add.ptr118 = getelementptr i8, i8* %97, i64 2
  %arrayidx119 = getelementptr i8, i8* %add.ptr118, i64 1
  %98 = load i8, i8* %arrayidx119, align 1
  %conv120 = sext i8 %98 to i32
  %cmp121 = icmp eq i32 %conv120, 62
  br i1 %cmp121, label %if.then.123, label %if.end.125

if.then.123:                                      ; preds = %land.lhs.true.117
  %99 = load i8*, i8** %ptr.addr, align 8
  %add.ptr124 = getelementptr i8, i8* %99, i64 4
  %100 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr124, i8** %100, align 8
  store i32 34, i32* %retval
  br label %return

if.end.125:                                       ; preds = %land.lhs.true.117, %if.end.111
  br label %if.end.126

if.end.126:                                       ; preds = %if.end.125, %land.lhs.true, %if.end.97
  %101 = load i8*, i8** %ptr.addr, align 8
  %102 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %101, i8** %102, align 8
  store i32 26, i32* %retval
  br label %return

sw.bb.127:                                        ; preds = %cond.end
  %103 = load i8*, i8** %ptr.addr, align 8
  %add.ptr128 = getelementptr i8, i8* %103, i64 2
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr128, i8** %104, align 8
  store i32 23, i32* %retval
  br label %return

sw.bb.129:                                        ; preds = %cond.end
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr130 = getelementptr i8, i8* %105, i64 2
  store i8* %add.ptr130, i8** %ptr.addr, align 8
  %106 = load i8*, i8** %ptr.addr, align 8
  %107 = load i8*, i8** %end.addr, align 8
  %cmp131 = icmp eq i8* %106, %107
  br i1 %cmp131, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %sw.bb.129
  store i32 -24, i32* %retval
  br label %return

if.end.134:                                       ; preds = %sw.bb.129
  %108 = load i8*, i8** %ptr.addr, align 8
  %arrayidx135 = getelementptr i8, i8* %108, i64 0
  %109 = load i8, i8* %arrayidx135, align 1
  %conv136 = sext i8 %109 to i32
  %cmp137 = icmp eq i32 %conv136, 0
  br i1 %cmp137, label %cond.true.139, label %cond.false.145

cond.true.139:                                    ; preds = %if.end.134
  %110 = load i8*, i8** %ptr.addr, align 8
  %arrayidx140 = getelementptr i8, i8* %110, i64 1
  %111 = load i8, i8* %arrayidx140, align 1
  %idxprom141 = zext i8 %111 to i64
  %112 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %113 = bitcast %struct.encoding* %112 to %struct.normal_encoding*
  %type142 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %113, i32 0, i32 1
  %arrayidx143 = getelementptr [256 x i8], [256 x i8]* %type142, i32 0, i64 %idxprom141
  %114 = load i8, i8* %arrayidx143, align 1
  %conv144 = zext i8 %114 to i32
  br label %cond.end.149

cond.false.145:                                   ; preds = %if.end.134
  %115 = load i8*, i8** %ptr.addr, align 8
  %arrayidx146 = getelementptr i8, i8* %115, i64 0
  %116 = load i8, i8* %arrayidx146, align 1
  %117 = load i8*, i8** %ptr.addr, align 8
  %arrayidx147 = getelementptr i8, i8* %117, i64 1
  %118 = load i8, i8* %arrayidx147, align 1
  %call148 = call i32 @unicode_byte_type(i8 signext %116, i8 signext %118)
  br label %cond.end.149

cond.end.149:                                     ; preds = %cond.false.145, %cond.true.139
  %cond150 = phi i32 [ %conv144, %cond.true.139 ], [ %call148, %cond.false.145 ]
  switch i32 %cond150, label %sw.epilog.158 [
    i32 33, label %sw.bb.151
    i32 15, label %sw.bb.153
    i32 34, label %sw.bb.155
    i32 9, label %sw.bb.157
    i32 10, label %sw.bb.157
    i32 21, label %sw.bb.157
    i32 11, label %sw.bb.157
    i32 35, label %sw.bb.157
    i32 36, label %sw.bb.157
    i32 32, label %sw.bb.157
  ]

sw.bb.151:                                        ; preds = %cond.end.149
  %119 = load i8*, i8** %ptr.addr, align 8
  %add.ptr152 = getelementptr i8, i8* %119, i64 2
  %120 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr152, i8** %120, align 8
  store i32 36, i32* %retval
  br label %return

sw.bb.153:                                        ; preds = %cond.end.149
  %121 = load i8*, i8** %ptr.addr, align 8
  %add.ptr154 = getelementptr i8, i8* %121, i64 2
  %122 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr154, i8** %122, align 8
  store i32 35, i32* %retval
  br label %return

sw.bb.155:                                        ; preds = %cond.end.149
  %123 = load i8*, i8** %ptr.addr, align 8
  %add.ptr156 = getelementptr i8, i8* %123, i64 2
  %124 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr156, i8** %124, align 8
  store i32 37, i32* %retval
  br label %return

sw.bb.157:                                        ; preds = %cond.end.149, %cond.end.149, %cond.end.149, %cond.end.149, %cond.end.149, %cond.end.149, %cond.end.149
  %125 = load i8*, i8** %ptr.addr, align 8
  %126 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %125, i8** %126, align 8
  store i32 24, i32* %retval
  br label %return

sw.epilog.158:                                    ; preds = %cond.end.149
  %127 = load i8*, i8** %ptr.addr, align 8
  %128 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %127, i8** %128, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.159:                                        ; preds = %cond.end
  %129 = load i8*, i8** %ptr.addr, align 8
  %add.ptr160 = getelementptr i8, i8* %129, i64 2
  %130 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr160, i8** %130, align 8
  store i32 21, i32* %retval
  br label %return

sw.bb.161:                                        ; preds = %cond.end
  %131 = load i8*, i8** %ptr.addr, align 8
  %add.ptr162 = getelementptr i8, i8* %131, i64 2
  %132 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr162, i8** %132, align 8
  store i32 17, i32* %retval
  br label %return

sw.bb.163:                                        ; preds = %cond.end
  %133 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %134 = load i8*, i8** %ptr.addr, align 8
  %add.ptr164 = getelementptr i8, i8* %134, i64 2
  %135 = load i8*, i8** %end.addr, align 8
  %136 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call165 = call i32 @big2_scanPoundName(%struct.encoding* %133, i8* %add.ptr164, i8* %135, i8** %136)
  store i32 %call165, i32* %retval
  br label %return

sw.bb.166:                                        ; preds = %cond.end
  %137 = load i8*, i8** %end.addr, align 8
  %138 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast167 = ptrtoint i8* %137 to i64
  %sub.ptr.rhs.cast168 = ptrtoint i8* %138 to i64
  %sub.ptr.sub169 = sub i64 %sub.ptr.lhs.cast167, %sub.ptr.rhs.cast168
  %cmp170 = icmp slt i64 %sub.ptr.sub169, 2
  br i1 %cmp170, label %if.then.172, label %if.end.173

if.then.172:                                      ; preds = %sw.bb.166
  store i32 -2, i32* %retval
  br label %return

if.end.173:                                       ; preds = %sw.bb.166
  %139 = load i8*, i8** %ptr.addr, align 8
  %140 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %139, i8** %140, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.174:                                        ; preds = %cond.end
  %141 = load i8*, i8** %end.addr, align 8
  %142 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast175 = ptrtoint i8* %141 to i64
  %sub.ptr.rhs.cast176 = ptrtoint i8* %142 to i64
  %sub.ptr.sub177 = sub i64 %sub.ptr.lhs.cast175, %sub.ptr.rhs.cast176
  %cmp178 = icmp slt i64 %sub.ptr.sub177, 3
  br i1 %cmp178, label %if.then.180, label %if.end.181

if.then.180:                                      ; preds = %sw.bb.174
  store i32 -2, i32* %retval
  br label %return

if.end.181:                                       ; preds = %sw.bb.174
  %143 = load i8*, i8** %ptr.addr, align 8
  %144 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %143, i8** %144, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.182:                                        ; preds = %cond.end
  %145 = load i8*, i8** %end.addr, align 8
  %146 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast183 = ptrtoint i8* %145 to i64
  %sub.ptr.rhs.cast184 = ptrtoint i8* %146 to i64
  %sub.ptr.sub185 = sub i64 %sub.ptr.lhs.cast183, %sub.ptr.rhs.cast184
  %cmp186 = icmp slt i64 %sub.ptr.sub185, 4
  br i1 %cmp186, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %sw.bb.182
  store i32 -2, i32* %retval
  br label %return

if.end.189:                                       ; preds = %sw.bb.182
  %147 = load i8*, i8** %ptr.addr, align 8
  %148 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %147, i8** %148, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.190:                                        ; preds = %cond.end, %cond.end
  store i32 18, i32* %tok, align 4
  %149 = load i8*, i8** %ptr.addr, align 8
  %add.ptr191 = getelementptr i8, i8* %149, i64 2
  store i8* %add.ptr191, i8** %ptr.addr, align 8
  br label %sw.epilog.233

sw.bb.192:                                        ; preds = %cond.end, %cond.end, %cond.end, %cond.end
  store i32 19, i32* %tok, align 4
  %150 = load i8*, i8** %ptr.addr, align 8
  %add.ptr193 = getelementptr i8, i8* %150, i64 2
  store i8* %add.ptr193, i8** %ptr.addr, align 8
  br label %sw.epilog.233

sw.bb.194:                                        ; preds = %cond.end
  %151 = load i8*, i8** %ptr.addr, align 8
  %arrayidx195 = getelementptr i8, i8* %151, i64 0
  %152 = load i8, i8* %arrayidx195, align 1
  %idxprom196 = zext i8 %152 to i64
  %arrayidx197 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom196
  %153 = load i8, i8* %arrayidx197, align 1
  %conv198 = zext i8 %153 to i32
  %shl = shl i32 %conv198, 3
  %154 = load i8*, i8** %ptr.addr, align 8
  %arrayidx199 = getelementptr i8, i8* %154, i64 1
  %155 = load i8, i8* %arrayidx199, align 1
  %conv200 = zext i8 %155 to i32
  %shr = ashr i32 %conv200, 5
  %add = add i32 %shl, %shr
  %idxprom201 = sext i32 %add to i64
  %arrayidx202 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom201
  %156 = load i32, i32* %arrayidx202, align 4
  %157 = load i8*, i8** %ptr.addr, align 8
  %arrayidx203 = getelementptr i8, i8* %157, i64 1
  %158 = load i8, i8* %arrayidx203, align 1
  %conv204 = zext i8 %158 to i32
  %and205 = and i32 %conv204, 31
  %shl206 = shl i32 1, %and205
  %and207 = and i32 %156, %shl206
  %tobool208 = icmp ne i32 %and207, 0
  br i1 %tobool208, label %if.then.209, label %if.end.211

if.then.209:                                      ; preds = %sw.bb.194
  %159 = load i8*, i8** %ptr.addr, align 8
  %add.ptr210 = getelementptr i8, i8* %159, i64 2
  store i8* %add.ptr210, i8** %ptr.addr, align 8
  store i32 18, i32* %tok, align 4
  br label %sw.epilog.233

if.end.211:                                       ; preds = %sw.bb.194
  %160 = load i8*, i8** %ptr.addr, align 8
  %arrayidx212 = getelementptr i8, i8* %160, i64 0
  %161 = load i8, i8* %arrayidx212, align 1
  %idxprom213 = zext i8 %161 to i64
  %arrayidx214 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom213
  %162 = load i8, i8* %arrayidx214, align 1
  %conv215 = zext i8 %162 to i32
  %shl216 = shl i32 %conv215, 3
  %163 = load i8*, i8** %ptr.addr, align 8
  %arrayidx217 = getelementptr i8, i8* %163, i64 1
  %164 = load i8, i8* %arrayidx217, align 1
  %conv218 = zext i8 %164 to i32
  %shr219 = ashr i32 %conv218, 5
  %add220 = add i32 %shl216, %shr219
  %idxprom221 = sext i32 %add220 to i64
  %arrayidx222 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom221
  %165 = load i32, i32* %arrayidx222, align 4
  %166 = load i8*, i8** %ptr.addr, align 8
  %arrayidx223 = getelementptr i8, i8* %166, i64 1
  %167 = load i8, i8* %arrayidx223, align 1
  %conv224 = zext i8 %167 to i32
  %and225 = and i32 %conv224, 31
  %shl226 = shl i32 1, %and225
  %and227 = and i32 %165, %shl226
  %tobool228 = icmp ne i32 %and227, 0
  br i1 %tobool228, label %if.then.229, label %if.end.231

if.then.229:                                      ; preds = %if.end.211
  %168 = load i8*, i8** %ptr.addr, align 8
  %add.ptr230 = getelementptr i8, i8* %168, i64 2
  store i8* %add.ptr230, i8** %ptr.addr, align 8
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.233

if.end.231:                                       ; preds = %if.end.211
  br label %sw.default.232

sw.default.232:                                   ; preds = %cond.end, %if.end.231
  %169 = load i8*, i8** %ptr.addr, align 8
  %170 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %169, i8** %170, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.233:                                    ; preds = %if.then.229, %if.then.209, %sw.bb.192, %sw.bb.190
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.391, %sw.epilog.233
  %171 = load i8*, i8** %ptr.addr, align 8
  %172 = load i8*, i8** %end.addr, align 8
  %cmp234 = icmp ne i8* %171, %172
  br i1 %cmp234, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %173 = load i8*, i8** %ptr.addr, align 8
  %arrayidx236 = getelementptr i8, i8* %173, i64 0
  %174 = load i8, i8* %arrayidx236, align 1
  %conv237 = sext i8 %174 to i32
  %cmp238 = icmp eq i32 %conv237, 0
  br i1 %cmp238, label %cond.true.240, label %cond.false.246

cond.true.240:                                    ; preds = %while.body
  %175 = load i8*, i8** %ptr.addr, align 8
  %arrayidx241 = getelementptr i8, i8* %175, i64 1
  %176 = load i8, i8* %arrayidx241, align 1
  %idxprom242 = zext i8 %176 to i64
  %177 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %178 = bitcast %struct.encoding* %177 to %struct.normal_encoding*
  %type243 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %178, i32 0, i32 1
  %arrayidx244 = getelementptr [256 x i8], [256 x i8]* %type243, i32 0, i64 %idxprom242
  %179 = load i8, i8* %arrayidx244, align 1
  %conv245 = zext i8 %179 to i32
  br label %cond.end.250

cond.false.246:                                   ; preds = %while.body
  %180 = load i8*, i8** %ptr.addr, align 8
  %arrayidx247 = getelementptr i8, i8* %180, i64 0
  %181 = load i8, i8* %arrayidx247, align 1
  %182 = load i8*, i8** %ptr.addr, align 8
  %arrayidx248 = getelementptr i8, i8* %182, i64 1
  %183 = load i8, i8* %arrayidx248, align 1
  %call249 = call i32 @unicode_byte_type(i8 signext %181, i8 signext %183)
  br label %cond.end.250

cond.end.250:                                     ; preds = %cond.false.246, %cond.true.240
  %cond251 = phi i32 [ %conv245, %cond.true.240 ], [ %call249, %cond.false.246 ]
  switch i32 %cond251, label %sw.default.390 [
    i32 29, label %sw.bb.252
    i32 22, label %sw.bb.272
    i32 24, label %sw.bb.272
    i32 25, label %sw.bb.272
    i32 26, label %sw.bb.272
    i32 27, label %sw.bb.272
    i32 5, label %sw.bb.274
    i32 6, label %sw.bb.282
    i32 7, label %sw.bb.290
    i32 11, label %sw.bb.298
    i32 32, label %sw.bb.298
    i32 35, label %sw.bb.298
    i32 36, label %sw.bb.298
    i32 20, label %sw.bb.298
    i32 30, label %sw.bb.298
    i32 21, label %sw.bb.298
    i32 9, label %sw.bb.298
    i32 10, label %sw.bb.298
    i32 23, label %sw.bb.299
    i32 34, label %sw.bb.372
    i32 33, label %sw.bb.378
    i32 15, label %sw.bb.384
  ]

sw.bb.252:                                        ; preds = %cond.end.250
  %184 = load i8*, i8** %ptr.addr, align 8
  %arrayidx253 = getelementptr i8, i8* %184, i64 0
  %185 = load i8, i8* %arrayidx253, align 1
  %idxprom254 = zext i8 %185 to i64
  %arrayidx255 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom254
  %186 = load i8, i8* %arrayidx255, align 1
  %conv256 = zext i8 %186 to i32
  %shl257 = shl i32 %conv256, 3
  %187 = load i8*, i8** %ptr.addr, align 8
  %arrayidx258 = getelementptr i8, i8* %187, i64 1
  %188 = load i8, i8* %arrayidx258, align 1
  %conv259 = zext i8 %188 to i32
  %shr260 = ashr i32 %conv259, 5
  %add261 = add i32 %shl257, %shr260
  %idxprom262 = sext i32 %add261 to i64
  %arrayidx263 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom262
  %189 = load i32, i32* %arrayidx263, align 4
  %190 = load i8*, i8** %ptr.addr, align 8
  %arrayidx264 = getelementptr i8, i8* %190, i64 1
  %191 = load i8, i8* %arrayidx264, align 1
  %conv265 = zext i8 %191 to i32
  %and266 = and i32 %conv265, 31
  %shl267 = shl i32 1, %and266
  %and268 = and i32 %189, %shl267
  %tobool269 = icmp ne i32 %and268, 0
  br i1 %tobool269, label %if.end.271, label %if.then.270

if.then.270:                                      ; preds = %sw.bb.252
  %192 = load i8*, i8** %ptr.addr, align 8
  %193 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %192, i8** %193, align 8
  store i32 0, i32* %retval
  br label %return

if.end.271:                                       ; preds = %sw.bb.252
  br label %sw.bb.272

sw.bb.272:                                        ; preds = %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250, %if.end.271
  %194 = load i8*, i8** %ptr.addr, align 8
  %add.ptr273 = getelementptr i8, i8* %194, i64 2
  store i8* %add.ptr273, i8** %ptr.addr, align 8
  br label %sw.epilog.391

sw.bb.274:                                        ; preds = %cond.end.250
  %195 = load i8*, i8** %end.addr, align 8
  %196 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast275 = ptrtoint i8* %195 to i64
  %sub.ptr.rhs.cast276 = ptrtoint i8* %196 to i64
  %sub.ptr.sub277 = sub i64 %sub.ptr.lhs.cast275, %sub.ptr.rhs.cast276
  %cmp278 = icmp slt i64 %sub.ptr.sub277, 2
  br i1 %cmp278, label %if.then.280, label %if.end.281

if.then.280:                                      ; preds = %sw.bb.274
  store i32 -2, i32* %retval
  br label %return

if.end.281:                                       ; preds = %sw.bb.274
  %197 = load i8*, i8** %ptr.addr, align 8
  %198 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %197, i8** %198, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.282:                                        ; preds = %cond.end.250
  %199 = load i8*, i8** %end.addr, align 8
  %200 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast283 = ptrtoint i8* %199 to i64
  %sub.ptr.rhs.cast284 = ptrtoint i8* %200 to i64
  %sub.ptr.sub285 = sub i64 %sub.ptr.lhs.cast283, %sub.ptr.rhs.cast284
  %cmp286 = icmp slt i64 %sub.ptr.sub285, 3
  br i1 %cmp286, label %if.then.288, label %if.end.289

if.then.288:                                      ; preds = %sw.bb.282
  store i32 -2, i32* %retval
  br label %return

if.end.289:                                       ; preds = %sw.bb.282
  %201 = load i8*, i8** %ptr.addr, align 8
  %202 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %201, i8** %202, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.290:                                        ; preds = %cond.end.250
  %203 = load i8*, i8** %end.addr, align 8
  %204 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast291 = ptrtoint i8* %203 to i64
  %sub.ptr.rhs.cast292 = ptrtoint i8* %204 to i64
  %sub.ptr.sub293 = sub i64 %sub.ptr.lhs.cast291, %sub.ptr.rhs.cast292
  %cmp294 = icmp slt i64 %sub.ptr.sub293, 4
  br i1 %cmp294, label %if.then.296, label %if.end.297

if.then.296:                                      ; preds = %sw.bb.290
  store i32 -2, i32* %retval
  br label %return

if.end.297:                                       ; preds = %sw.bb.290
  %205 = load i8*, i8** %ptr.addr, align 8
  %206 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %205, i8** %206, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.298:                                        ; preds = %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250, %cond.end.250
  %207 = load i8*, i8** %ptr.addr, align 8
  %208 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %207, i8** %208, align 8
  %209 = load i32, i32* %tok, align 4
  store i32 %209, i32* %retval
  br label %return

sw.bb.299:                                        ; preds = %cond.end.250
  %210 = load i8*, i8** %ptr.addr, align 8
  %add.ptr300 = getelementptr i8, i8* %210, i64 2
  store i8* %add.ptr300, i8** %ptr.addr, align 8
  %211 = load i32, i32* %tok, align 4
  switch i32 %211, label %sw.epilog.371 [
    i32 18, label %sw.bb.301
    i32 41, label %sw.bb.370
  ]

sw.bb.301:                                        ; preds = %sw.bb.299
  %212 = load i8*, i8** %ptr.addr, align 8
  %213 = load i8*, i8** %end.addr, align 8
  %cmp302 = icmp eq i8* %212, %213
  br i1 %cmp302, label %if.then.304, label %if.end.305

if.then.304:                                      ; preds = %sw.bb.301
  store i32 -1, i32* %retval
  br label %return

if.end.305:                                       ; preds = %sw.bb.301
  store i32 41, i32* %tok, align 4
  %214 = load i8*, i8** %ptr.addr, align 8
  %arrayidx306 = getelementptr i8, i8* %214, i64 0
  %215 = load i8, i8* %arrayidx306, align 1
  %conv307 = sext i8 %215 to i32
  %cmp308 = icmp eq i32 %conv307, 0
  br i1 %cmp308, label %cond.true.310, label %cond.false.316

cond.true.310:                                    ; preds = %if.end.305
  %216 = load i8*, i8** %ptr.addr, align 8
  %arrayidx311 = getelementptr i8, i8* %216, i64 1
  %217 = load i8, i8* %arrayidx311, align 1
  %idxprom312 = zext i8 %217 to i64
  %218 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %219 = bitcast %struct.encoding* %218 to %struct.normal_encoding*
  %type313 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %219, i32 0, i32 1
  %arrayidx314 = getelementptr [256 x i8], [256 x i8]* %type313, i32 0, i64 %idxprom312
  %220 = load i8, i8* %arrayidx314, align 1
  %conv315 = zext i8 %220 to i32
  br label %cond.end.320

cond.false.316:                                   ; preds = %if.end.305
  %221 = load i8*, i8** %ptr.addr, align 8
  %arrayidx317 = getelementptr i8, i8* %221, i64 0
  %222 = load i8, i8* %arrayidx317, align 1
  %223 = load i8*, i8** %ptr.addr, align 8
  %arrayidx318 = getelementptr i8, i8* %223, i64 1
  %224 = load i8, i8* %arrayidx318, align 1
  %call319 = call i32 @unicode_byte_type(i8 signext %222, i8 signext %224)
  br label %cond.end.320

cond.end.320:                                     ; preds = %cond.false.316, %cond.true.310
  %cond321 = phi i32 [ %conv315, %cond.true.310 ], [ %call319, %cond.false.316 ]
  switch i32 %cond321, label %sw.default.368 [
    i32 29, label %sw.bb.322
    i32 22, label %sw.bb.342
    i32 24, label %sw.bb.342
    i32 25, label %sw.bb.342
    i32 26, label %sw.bb.342
    i32 27, label %sw.bb.342
    i32 5, label %sw.bb.344
    i32 6, label %sw.bb.352
    i32 7, label %sw.bb.360
  ]

sw.bb.322:                                        ; preds = %cond.end.320
  %225 = load i8*, i8** %ptr.addr, align 8
  %arrayidx323 = getelementptr i8, i8* %225, i64 0
  %226 = load i8, i8* %arrayidx323, align 1
  %idxprom324 = zext i8 %226 to i64
  %arrayidx325 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom324
  %227 = load i8, i8* %arrayidx325, align 1
  %conv326 = zext i8 %227 to i32
  %shl327 = shl i32 %conv326, 3
  %228 = load i8*, i8** %ptr.addr, align 8
  %arrayidx328 = getelementptr i8, i8* %228, i64 1
  %229 = load i8, i8* %arrayidx328, align 1
  %conv329 = zext i8 %229 to i32
  %shr330 = ashr i32 %conv329, 5
  %add331 = add i32 %shl327, %shr330
  %idxprom332 = sext i32 %add331 to i64
  %arrayidx333 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom332
  %230 = load i32, i32* %arrayidx333, align 4
  %231 = load i8*, i8** %ptr.addr, align 8
  %arrayidx334 = getelementptr i8, i8* %231, i64 1
  %232 = load i8, i8* %arrayidx334, align 1
  %conv335 = zext i8 %232 to i32
  %and336 = and i32 %conv335, 31
  %shl337 = shl i32 1, %and336
  %and338 = and i32 %230, %shl337
  %tobool339 = icmp ne i32 %and338, 0
  br i1 %tobool339, label %if.end.341, label %if.then.340

if.then.340:                                      ; preds = %sw.bb.322
  %233 = load i8*, i8** %ptr.addr, align 8
  %234 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %233, i8** %234, align 8
  store i32 0, i32* %retval
  br label %return

if.end.341:                                       ; preds = %sw.bb.322
  br label %sw.bb.342

sw.bb.342:                                        ; preds = %cond.end.320, %cond.end.320, %cond.end.320, %cond.end.320, %cond.end.320, %if.end.341
  %235 = load i8*, i8** %ptr.addr, align 8
  %add.ptr343 = getelementptr i8, i8* %235, i64 2
  store i8* %add.ptr343, i8** %ptr.addr, align 8
  br label %sw.epilog.369

sw.bb.344:                                        ; preds = %cond.end.320
  %236 = load i8*, i8** %end.addr, align 8
  %237 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast345 = ptrtoint i8* %236 to i64
  %sub.ptr.rhs.cast346 = ptrtoint i8* %237 to i64
  %sub.ptr.sub347 = sub i64 %sub.ptr.lhs.cast345, %sub.ptr.rhs.cast346
  %cmp348 = icmp slt i64 %sub.ptr.sub347, 2
  br i1 %cmp348, label %if.then.350, label %if.end.351

if.then.350:                                      ; preds = %sw.bb.344
  store i32 -2, i32* %retval
  br label %return

if.end.351:                                       ; preds = %sw.bb.344
  %238 = load i8*, i8** %ptr.addr, align 8
  %239 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %238, i8** %239, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.352:                                        ; preds = %cond.end.320
  %240 = load i8*, i8** %end.addr, align 8
  %241 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast353 = ptrtoint i8* %240 to i64
  %sub.ptr.rhs.cast354 = ptrtoint i8* %241 to i64
  %sub.ptr.sub355 = sub i64 %sub.ptr.lhs.cast353, %sub.ptr.rhs.cast354
  %cmp356 = icmp slt i64 %sub.ptr.sub355, 3
  br i1 %cmp356, label %if.then.358, label %if.end.359

if.then.358:                                      ; preds = %sw.bb.352
  store i32 -2, i32* %retval
  br label %return

if.end.359:                                       ; preds = %sw.bb.352
  %242 = load i8*, i8** %ptr.addr, align 8
  %243 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %242, i8** %243, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.360:                                        ; preds = %cond.end.320
  %244 = load i8*, i8** %end.addr, align 8
  %245 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast361 = ptrtoint i8* %244 to i64
  %sub.ptr.rhs.cast362 = ptrtoint i8* %245 to i64
  %sub.ptr.sub363 = sub i64 %sub.ptr.lhs.cast361, %sub.ptr.rhs.cast362
  %cmp364 = icmp slt i64 %sub.ptr.sub363, 4
  br i1 %cmp364, label %if.then.366, label %if.end.367

if.then.366:                                      ; preds = %sw.bb.360
  store i32 -2, i32* %retval
  br label %return

if.end.367:                                       ; preds = %sw.bb.360
  %246 = load i8*, i8** %ptr.addr, align 8
  %247 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %246, i8** %247, align 8
  store i32 0, i32* %retval
  br label %return

sw.default.368:                                   ; preds = %cond.end.320
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.369

sw.epilog.369:                                    ; preds = %sw.default.368, %sw.bb.342
  br label %sw.epilog.371

sw.bb.370:                                        ; preds = %sw.bb.299
  store i32 19, i32* %tok, align 4
  br label %sw.epilog.371

sw.epilog.371:                                    ; preds = %sw.bb.299, %sw.bb.370, %sw.epilog.369
  br label %sw.epilog.391

sw.bb.372:                                        ; preds = %cond.end.250
  %248 = load i32, i32* %tok, align 4
  %cmp373 = icmp eq i32 %248, 19
  br i1 %cmp373, label %if.then.375, label %if.end.376

if.then.375:                                      ; preds = %sw.bb.372
  %249 = load i8*, i8** %ptr.addr, align 8
  %250 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %249, i8** %250, align 8
  store i32 0, i32* %retval
  br label %return

if.end.376:                                       ; preds = %sw.bb.372
  %251 = load i8*, i8** %ptr.addr, align 8
  %add.ptr377 = getelementptr i8, i8* %251, i64 2
  %252 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr377, i8** %252, align 8
  store i32 32, i32* %retval
  br label %return

sw.bb.378:                                        ; preds = %cond.end.250
  %253 = load i32, i32* %tok, align 4
  %cmp379 = icmp eq i32 %253, 19
  br i1 %cmp379, label %if.then.381, label %if.end.382

if.then.381:                                      ; preds = %sw.bb.378
  %254 = load i8*, i8** %ptr.addr, align 8
  %255 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %254, i8** %255, align 8
  store i32 0, i32* %retval
  br label %return

if.end.382:                                       ; preds = %sw.bb.378
  %256 = load i8*, i8** %ptr.addr, align 8
  %add.ptr383 = getelementptr i8, i8* %256, i64 2
  %257 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr383, i8** %257, align 8
  store i32 31, i32* %retval
  br label %return

sw.bb.384:                                        ; preds = %cond.end.250
  %258 = load i32, i32* %tok, align 4
  %cmp385 = icmp eq i32 %258, 19
  br i1 %cmp385, label %if.then.387, label %if.end.388

if.then.387:                                      ; preds = %sw.bb.384
  %259 = load i8*, i8** %ptr.addr, align 8
  %260 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %259, i8** %260, align 8
  store i32 0, i32* %retval
  br label %return

if.end.388:                                       ; preds = %sw.bb.384
  %261 = load i8*, i8** %ptr.addr, align 8
  %add.ptr389 = getelementptr i8, i8* %261, i64 2
  %262 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr389, i8** %262, align 8
  store i32 30, i32* %retval
  br label %return

sw.default.390:                                   ; preds = %cond.end.250
  %263 = load i8*, i8** %ptr.addr, align 8
  %264 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %263, i8** %264, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.391:                                    ; preds = %sw.epilog.371, %sw.bb.272
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %265 = load i32, i32* %tok, align 4
  %sub = sub i32 0, %265
  store i32 %sub, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.390, %if.end.388, %if.then.387, %if.end.382, %if.then.381, %if.end.376, %if.then.375, %if.end.367, %if.then.366, %if.end.359, %if.then.358, %if.end.351, %if.then.350, %if.then.340, %if.then.304, %sw.bb.298, %if.end.297, %if.then.296, %if.end.289, %if.then.288, %if.end.281, %if.then.280, %if.then.270, %sw.default.232, %if.end.189, %if.then.188, %if.end.181, %if.then.180, %if.end.173, %if.then.172, %sw.bb.163, %sw.bb.161, %sw.bb.159, %sw.epilog.158, %sw.bb.157, %sw.bb.155, %sw.bb.153, %sw.bb.151, %if.then.133, %sw.bb.127, %if.end.126, %if.then.123, %if.then.110, %if.then.96, %sw.bb.90, %sw.bb.88, %sw.bb.85, %for.end, %sw.default, %if.then.53, %sw.epilog, %sw.bb.47, %sw.bb.44, %sw.bb.41, %if.then.23, %sw.bb.16, %sw.bb, %if.then.4, %if.then
  %266 = load i32, i32* %retval
  ret i32 %266
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_contentTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %4 = load i64, i64* %n, align 8
  %and = and i64 %4, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %5 = load i64, i64* %n, align 8
  %and2 = and i64 %5, -2
  store i64 %and2, i64* %n, align 8
  %6 = load i64, i64* %n, align 8
  %cmp3 = icmp eq i64 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv, 0
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.6
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx9 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx9, align 1
  %idxprom = zext i8 %12 to i64
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = bitcast %struct.encoding* %13 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %14, i32 0, i32 1
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.6
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx12, align 1
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx13 = getelementptr i8, i8* %18, i64 1
  %19 = load i8, i8* %arrayidx13, align 1
  %call = call i32 @unicode_byte_type(i8 signext %17, i8 signext %19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv11, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb.16
    i32 9, label %sw.bb.19
    i32 10, label %sw.bb.46
    i32 4, label %sw.bb.48
    i32 5, label %sw.bb.81
    i32 6, label %sw.bb.90
    i32 7, label %sw.bb.99
    i32 0, label %sw.bb.108
    i32 1, label %sw.bb.108
    i32 8, label %sw.bb.108
  ]

sw.bb:                                            ; preds = %cond.end
  %20 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %add.ptr14 = getelementptr i8, i8* %21, i64 2
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call15 = call i32 @big2_scanLt(%struct.encoding* %20, i8* %add.ptr14, i8* %22, i8** %23)
  store i32 %call15, i32* %retval
  br label %return

sw.bb.16:                                         ; preds = %cond.end
  %24 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %25, i64 2
  %26 = load i8*, i8** %end.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call18 = call i32 @big2_scanRef(%struct.encoding* %24, i8* %add.ptr17, i8* %26, i8** %27)
  store i32 %call18, i32* %retval
  br label %return

sw.bb.19:                                         ; preds = %cond.end
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr20 = getelementptr i8, i8* %28, i64 2
  store i8* %add.ptr20, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %end.addr, align 8
  %cmp21 = icmp eq i8* %29, %30
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %sw.bb.19
  store i32 -3, i32* %retval
  br label %return

if.end.24:                                        ; preds = %sw.bb.19
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx25 = getelementptr i8, i8* %31, i64 0
  %32 = load i8, i8* %arrayidx25, align 1
  %conv26 = sext i8 %32 to i32
  %cmp27 = icmp eq i32 %conv26, 0
  br i1 %cmp27, label %cond.true.29, label %cond.false.35

cond.true.29:                                     ; preds = %if.end.24
  %33 = load i8*, i8** %ptr.addr, align 8
  %arrayidx30 = getelementptr i8, i8* %33, i64 1
  %34 = load i8, i8* %arrayidx30, align 1
  %idxprom31 = zext i8 %34 to i64
  %35 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %36 = bitcast %struct.encoding* %35 to %struct.normal_encoding*
  %type32 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %36, i32 0, i32 1
  %arrayidx33 = getelementptr [256 x i8], [256 x i8]* %type32, i32 0, i64 %idxprom31
  %37 = load i8, i8* %arrayidx33, align 1
  %conv34 = zext i8 %37 to i32
  br label %cond.end.39

cond.false.35:                                    ; preds = %if.end.24
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx36 = getelementptr i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx36, align 1
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx37 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx37, align 1
  %call38 = call i32 @unicode_byte_type(i8 signext %39, i8 signext %41)
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.35, %cond.true.29
  %cond40 = phi i32 [ %conv34, %cond.true.29 ], [ %call38, %cond.false.35 ]
  %cmp41 = icmp eq i32 %cond40, 10
  br i1 %cmp41, label %if.then.43, label %if.end.45

if.then.43:                                       ; preds = %cond.end.39
  %42 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %42, i64 2
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  br label %if.end.45

if.end.45:                                        ; preds = %if.then.43, %cond.end.39
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %43, i8** %44, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.46:                                         ; preds = %cond.end
  %45 = load i8*, i8** %ptr.addr, align 8
  %add.ptr47 = getelementptr i8, i8* %45, i64 2
  %46 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr47, i8** %46, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.48:                                         ; preds = %cond.end
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr49 = getelementptr i8, i8* %47, i64 2
  store i8* %add.ptr49, i8** %ptr.addr, align 8
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8*, i8** %end.addr, align 8
  %cmp50 = icmp eq i8* %48, %49
  br i1 %cmp50, label %if.then.52, label %if.end.53

if.then.52:                                       ; preds = %sw.bb.48
  store i32 -5, i32* %retval
  br label %return

if.end.53:                                        ; preds = %sw.bb.48
  %50 = load i8*, i8** %ptr.addr, align 8
  %arrayidx54 = getelementptr i8, i8* %50, i64 0
  %51 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %51 to i32
  %cmp56 = icmp eq i32 %conv55, 0
  br i1 %cmp56, label %land.lhs.true, label %if.then.62

land.lhs.true:                                    ; preds = %if.end.53
  %52 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %52, i64 1
  %53 = load i8, i8* %arrayidx58, align 1
  %conv59 = sext i8 %53 to i32
  %cmp60 = icmp eq i32 %conv59, 93
  br i1 %cmp60, label %if.end.63, label %if.then.62

if.then.62:                                       ; preds = %land.lhs.true, %if.end.53
  br label %sw.epilog

if.end.63:                                        ; preds = %land.lhs.true
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr64 = getelementptr i8, i8* %54, i64 2
  store i8* %add.ptr64, i8** %ptr.addr, align 8
  %55 = load i8*, i8** %ptr.addr, align 8
  %56 = load i8*, i8** %end.addr, align 8
  %cmp65 = icmp eq i8* %55, %56
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.end.63
  store i32 -5, i32* %retval
  br label %return

if.end.68:                                        ; preds = %if.end.63
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx69 = getelementptr i8, i8* %57, i64 0
  %58 = load i8, i8* %arrayidx69, align 1
  %conv70 = sext i8 %58 to i32
  %cmp71 = icmp eq i32 %conv70, 0
  br i1 %cmp71, label %land.lhs.true.73, label %if.then.78

land.lhs.true.73:                                 ; preds = %if.end.68
  %59 = load i8*, i8** %ptr.addr, align 8
  %arrayidx74 = getelementptr i8, i8* %59, i64 1
  %60 = load i8, i8* %arrayidx74, align 1
  %conv75 = sext i8 %60 to i32
  %cmp76 = icmp eq i32 %conv75, 62
  br i1 %cmp76, label %if.end.80, label %if.then.78

if.then.78:                                       ; preds = %land.lhs.true.73, %if.end.68
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr79 = getelementptr i8, i8* %61, i64 -2
  store i8* %add.ptr79, i8** %ptr.addr, align 8
  br label %sw.epilog

if.end.80:                                        ; preds = %land.lhs.true.73
  %62 = load i8*, i8** %ptr.addr, align 8
  %63 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %62, i8** %63, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.81:                                         ; preds = %cond.end
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast82 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast83 = ptrtoint i8* %65 to i64
  %sub.ptr.sub84 = sub i64 %sub.ptr.lhs.cast82, %sub.ptr.rhs.cast83
  %cmp85 = icmp slt i64 %sub.ptr.sub84, 2
  br i1 %cmp85, label %if.then.87, label %if.end.88

if.then.87:                                       ; preds = %sw.bb.81
  store i32 -2, i32* %retval
  br label %return

if.end.88:                                        ; preds = %sw.bb.81
  %66 = load i8*, i8** %ptr.addr, align 8
  %add.ptr89 = getelementptr i8, i8* %66, i64 2
  store i8* %add.ptr89, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.90:                                         ; preds = %cond.end
  %67 = load i8*, i8** %end.addr, align 8
  %68 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast91 = ptrtoint i8* %67 to i64
  %sub.ptr.rhs.cast92 = ptrtoint i8* %68 to i64
  %sub.ptr.sub93 = sub i64 %sub.ptr.lhs.cast91, %sub.ptr.rhs.cast92
  %cmp94 = icmp slt i64 %sub.ptr.sub93, 3
  br i1 %cmp94, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %sw.bb.90
  store i32 -2, i32* %retval
  br label %return

if.end.97:                                        ; preds = %sw.bb.90
  %69 = load i8*, i8** %ptr.addr, align 8
  %add.ptr98 = getelementptr i8, i8* %69, i64 3
  store i8* %add.ptr98, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.99:                                         ; preds = %cond.end
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast100 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast101 = ptrtoint i8* %71 to i64
  %sub.ptr.sub102 = sub i64 %sub.ptr.lhs.cast100, %sub.ptr.rhs.cast101
  %cmp103 = icmp slt i64 %sub.ptr.sub102, 4
  br i1 %cmp103, label %if.then.105, label %if.end.106

if.then.105:                                      ; preds = %sw.bb.99
  store i32 -2, i32* %retval
  br label %return

if.end.106:                                       ; preds = %sw.bb.99
  %72 = load i8*, i8** %ptr.addr, align 8
  %add.ptr107 = getelementptr i8, i8* %72, i64 4
  store i8* %add.ptr107, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.108:                                        ; preds = %cond.end, %cond.end, %cond.end
  %73 = load i8*, i8** %ptr.addr, align 8
  %74 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %73, i8** %74, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %75 = load i8*, i8** %ptr.addr, align 8
  %add.ptr109 = getelementptr i8, i8* %75, i64 2
  store i8* %add.ptr109, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.106, %if.end.97, %if.end.88, %if.then.78, %if.then.62
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.198, %sw.epilog
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8*, i8** %end.addr, align 8
  %cmp110 = icmp ne i8* %76, %77
  br i1 %cmp110, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %78 = load i8*, i8** %ptr.addr, align 8
  %arrayidx112 = getelementptr i8, i8* %78, i64 0
  %79 = load i8, i8* %arrayidx112, align 1
  %conv113 = sext i8 %79 to i32
  %cmp114 = icmp eq i32 %conv113, 0
  br i1 %cmp114, label %cond.true.116, label %cond.false.122

cond.true.116:                                    ; preds = %while.body
  %80 = load i8*, i8** %ptr.addr, align 8
  %arrayidx117 = getelementptr i8, i8* %80, i64 1
  %81 = load i8, i8* %arrayidx117, align 1
  %idxprom118 = zext i8 %81 to i64
  %82 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %83 = bitcast %struct.encoding* %82 to %struct.normal_encoding*
  %type119 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %83, i32 0, i32 1
  %arrayidx120 = getelementptr [256 x i8], [256 x i8]* %type119, i32 0, i64 %idxprom118
  %84 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %84 to i32
  br label %cond.end.126

cond.false.122:                                   ; preds = %while.body
  %85 = load i8*, i8** %ptr.addr, align 8
  %arrayidx123 = getelementptr i8, i8* %85, i64 0
  %86 = load i8, i8* %arrayidx123, align 1
  %87 = load i8*, i8** %ptr.addr, align 8
  %arrayidx124 = getelementptr i8, i8* %87, i64 1
  %88 = load i8, i8* %arrayidx124, align 1
  %call125 = call i32 @unicode_byte_type(i8 signext %86, i8 signext %88)
  br label %cond.end.126

cond.end.126:                                     ; preds = %cond.false.122, %cond.true.116
  %cond127 = phi i32 [ %conv121, %cond.true.116 ], [ %call125, %cond.false.122 ]
  switch i32 %cond127, label %sw.default.196 [
    i32 5, label %sw.bb.128
    i32 6, label %sw.bb.137
    i32 7, label %sw.bb.146
    i32 4, label %sw.bb.155
    i32 3, label %sw.bb.195
    i32 2, label %sw.bb.195
    i32 0, label %sw.bb.195
    i32 1, label %sw.bb.195
    i32 8, label %sw.bb.195
    i32 9, label %sw.bb.195
    i32 10, label %sw.bb.195
  ]

sw.bb.128:                                        ; preds = %cond.end.126
  %89 = load i8*, i8** %end.addr, align 8
  %90 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast129 = ptrtoint i8* %89 to i64
  %sub.ptr.rhs.cast130 = ptrtoint i8* %90 to i64
  %sub.ptr.sub131 = sub i64 %sub.ptr.lhs.cast129, %sub.ptr.rhs.cast130
  %cmp132 = icmp slt i64 %sub.ptr.sub131, 2
  br i1 %cmp132, label %if.then.134, label %if.end.135

if.then.134:                                      ; preds = %sw.bb.128
  %91 = load i8*, i8** %ptr.addr, align 8
  %92 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %91, i8** %92, align 8
  store i32 6, i32* %retval
  br label %return

if.end.135:                                       ; preds = %sw.bb.128
  %93 = load i8*, i8** %ptr.addr, align 8
  %add.ptr136 = getelementptr i8, i8* %93, i64 2
  store i8* %add.ptr136, i8** %ptr.addr, align 8
  br label %sw.epilog.198

sw.bb.137:                                        ; preds = %cond.end.126
  %94 = load i8*, i8** %end.addr, align 8
  %95 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast138 = ptrtoint i8* %94 to i64
  %sub.ptr.rhs.cast139 = ptrtoint i8* %95 to i64
  %sub.ptr.sub140 = sub i64 %sub.ptr.lhs.cast138, %sub.ptr.rhs.cast139
  %cmp141 = icmp slt i64 %sub.ptr.sub140, 3
  br i1 %cmp141, label %if.then.143, label %if.end.144

if.then.143:                                      ; preds = %sw.bb.137
  %96 = load i8*, i8** %ptr.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %96, i8** %97, align 8
  store i32 6, i32* %retval
  br label %return

if.end.144:                                       ; preds = %sw.bb.137
  %98 = load i8*, i8** %ptr.addr, align 8
  %add.ptr145 = getelementptr i8, i8* %98, i64 3
  store i8* %add.ptr145, i8** %ptr.addr, align 8
  br label %sw.epilog.198

sw.bb.146:                                        ; preds = %cond.end.126
  %99 = load i8*, i8** %end.addr, align 8
  %100 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast147 = ptrtoint i8* %99 to i64
  %sub.ptr.rhs.cast148 = ptrtoint i8* %100 to i64
  %sub.ptr.sub149 = sub i64 %sub.ptr.lhs.cast147, %sub.ptr.rhs.cast148
  %cmp150 = icmp slt i64 %sub.ptr.sub149, 4
  br i1 %cmp150, label %if.then.152, label %if.end.153

if.then.152:                                      ; preds = %sw.bb.146
  %101 = load i8*, i8** %ptr.addr, align 8
  %102 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %101, i8** %102, align 8
  store i32 6, i32* %retval
  br label %return

if.end.153:                                       ; preds = %sw.bb.146
  %103 = load i8*, i8** %ptr.addr, align 8
  %add.ptr154 = getelementptr i8, i8* %103, i64 4
  store i8* %add.ptr154, i8** %ptr.addr, align 8
  br label %sw.epilog.198

sw.bb.155:                                        ; preds = %cond.end.126
  %104 = load i8*, i8** %ptr.addr, align 8
  %add.ptr156 = getelementptr i8, i8* %104, i64 2
  %105 = load i8*, i8** %end.addr, align 8
  %cmp157 = icmp ne i8* %add.ptr156, %105
  br i1 %cmp157, label %if.then.159, label %if.end.194

if.then.159:                                      ; preds = %sw.bb.155
  %106 = load i8*, i8** %ptr.addr, align 8
  %add.ptr160 = getelementptr i8, i8* %106, i64 2
  %arrayidx161 = getelementptr i8, i8* %add.ptr160, i64 0
  %107 = load i8, i8* %arrayidx161, align 1
  %conv162 = sext i8 %107 to i32
  %cmp163 = icmp eq i32 %conv162, 0
  br i1 %cmp163, label %land.lhs.true.165, label %if.then.171

land.lhs.true.165:                                ; preds = %if.then.159
  %108 = load i8*, i8** %ptr.addr, align 8
  %add.ptr166 = getelementptr i8, i8* %108, i64 2
  %arrayidx167 = getelementptr i8, i8* %add.ptr166, i64 1
  %109 = load i8, i8* %arrayidx167, align 1
  %conv168 = sext i8 %109 to i32
  %cmp169 = icmp eq i32 %conv168, 93
  br i1 %cmp169, label %if.end.173, label %if.then.171

if.then.171:                                      ; preds = %land.lhs.true.165, %if.then.159
  %110 = load i8*, i8** %ptr.addr, align 8
  %add.ptr172 = getelementptr i8, i8* %110, i64 2
  store i8* %add.ptr172, i8** %ptr.addr, align 8
  br label %sw.epilog.198

if.end.173:                                       ; preds = %land.lhs.true.165
  %111 = load i8*, i8** %ptr.addr, align 8
  %add.ptr174 = getelementptr i8, i8* %111, i64 4
  %112 = load i8*, i8** %end.addr, align 8
  %cmp175 = icmp ne i8* %add.ptr174, %112
  br i1 %cmp175, label %if.then.177, label %if.end.193

if.then.177:                                      ; preds = %if.end.173
  %113 = load i8*, i8** %ptr.addr, align 8
  %add.ptr178 = getelementptr i8, i8* %113, i64 4
  %arrayidx179 = getelementptr i8, i8* %add.ptr178, i64 0
  %114 = load i8, i8* %arrayidx179, align 1
  %conv180 = sext i8 %114 to i32
  %cmp181 = icmp eq i32 %conv180, 0
  br i1 %cmp181, label %land.lhs.true.183, label %if.then.189

land.lhs.true.183:                                ; preds = %if.then.177
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr184 = getelementptr i8, i8* %115, i64 4
  %arrayidx185 = getelementptr i8, i8* %add.ptr184, i64 1
  %116 = load i8, i8* %arrayidx185, align 1
  %conv186 = sext i8 %116 to i32
  %cmp187 = icmp eq i32 %conv186, 62
  br i1 %cmp187, label %if.end.191, label %if.then.189

if.then.189:                                      ; preds = %land.lhs.true.183, %if.then.177
  %117 = load i8*, i8** %ptr.addr, align 8
  %add.ptr190 = getelementptr i8, i8* %117, i64 2
  store i8* %add.ptr190, i8** %ptr.addr, align 8
  br label %sw.epilog.198

if.end.191:                                       ; preds = %land.lhs.true.183
  %118 = load i8*, i8** %ptr.addr, align 8
  %add.ptr192 = getelementptr i8, i8* %118, i64 4
  %119 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr192, i8** %119, align 8
  store i32 0, i32* %retval
  br label %return

if.end.193:                                       ; preds = %if.end.173
  br label %if.end.194

if.end.194:                                       ; preds = %if.end.193, %sw.bb.155
  br label %sw.bb.195

sw.bb.195:                                        ; preds = %cond.end.126, %cond.end.126, %cond.end.126, %cond.end.126, %cond.end.126, %cond.end.126, %cond.end.126, %if.end.194
  %120 = load i8*, i8** %ptr.addr, align 8
  %121 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %120, i8** %121, align 8
  store i32 6, i32* %retval
  br label %return

sw.default.196:                                   ; preds = %cond.end.126
  %122 = load i8*, i8** %ptr.addr, align 8
  %add.ptr197 = getelementptr i8, i8* %122, i64 2
  store i8* %add.ptr197, i8** %ptr.addr, align 8
  br label %sw.epilog.198

sw.epilog.198:                                    ; preds = %sw.default.196, %if.then.189, %if.then.171, %if.end.153, %if.end.144, %if.end.135
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %123 = load i8*, i8** %ptr.addr, align 8
  %124 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %123, i8** %124, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.bb.195, %if.end.191, %if.then.152, %if.then.143, %if.then.134, %sw.bb.108, %if.then.105, %if.then.96, %if.then.87, %if.end.80, %if.then.67, %if.then.52, %sw.bb.46, %if.end.45, %if.then.23, %sw.bb.16, %sw.bb, %if.then.4, %if.then
  %125 = load i32, i32* %retval
  ret i32 %125
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_cdataSectionTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %end.addr, align 8
  %3 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %4 = load i64, i64* %n, align 8
  %and = and i64 %4, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %if.end
  %5 = load i64, i64* %n, align 8
  %and2 = and i64 %5, -2
  store i64 %and2, i64* %n, align 8
  %6 = load i64, i64* %n, align 8
  %cmp3 = icmp eq i64 %6, 0
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  %7 = load i8*, i8** %ptr.addr, align 8
  %8 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 %8
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %10 to i32
  %cmp7 = icmp eq i32 %conv, 0
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.6
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx9 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx9, align 1
  %idxprom = zext i8 %12 to i64
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = bitcast %struct.encoding* %13 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %14, i32 0, i32 1
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end.6
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 0
  %17 = load i8, i8* %arrayidx12, align 1
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx13 = getelementptr i8, i8* %18, i64 1
  %19 = load i8, i8* %arrayidx13, align 1
  %call = call i32 @unicode_byte_type(i8 signext %17, i8 signext %19)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv11, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 4, label %sw.bb
    i32 9, label %sw.bb.47
    i32 10, label %sw.bb.74
    i32 5, label %sw.bb.76
    i32 6, label %sw.bb.85
    i32 7, label %sw.bb.94
    i32 0, label %sw.bb.103
    i32 1, label %sw.bb.103
    i32 8, label %sw.bb.103
  ]

sw.bb:                                            ; preds = %cond.end
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr14 = getelementptr i8, i8* %20, i64 2
  store i8* %add.ptr14, i8** %ptr.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8*, i8** %end.addr, align 8
  %cmp15 = icmp eq i8* %21, %22
  br i1 %cmp15, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %sw.bb
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %sw.bb
  %23 = load i8*, i8** %ptr.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %23, i64 0
  %24 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %24 to i32
  %cmp21 = icmp eq i32 %conv20, 0
  br i1 %cmp21, label %land.lhs.true, label %if.then.27

land.lhs.true:                                    ; preds = %if.end.18
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx23 = getelementptr i8, i8* %25, i64 1
  %26 = load i8, i8* %arrayidx23, align 1
  %conv24 = sext i8 %26 to i32
  %cmp25 = icmp eq i32 %conv24, 93
  br i1 %cmp25, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %land.lhs.true, %if.end.18
  br label %sw.epilog

if.end.28:                                        ; preds = %land.lhs.true
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr29 = getelementptr i8, i8* %27, i64 2
  store i8* %add.ptr29, i8** %ptr.addr, align 8
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %end.addr, align 8
  %cmp30 = icmp eq i8* %28, %29
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.28
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %if.end.28
  %30 = load i8*, i8** %ptr.addr, align 8
  %arrayidx34 = getelementptr i8, i8* %30, i64 0
  %31 = load i8, i8* %arrayidx34, align 1
  %conv35 = sext i8 %31 to i32
  %cmp36 = icmp eq i32 %conv35, 0
  br i1 %cmp36, label %land.lhs.true.38, label %if.then.43

land.lhs.true.38:                                 ; preds = %if.end.33
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx39 = getelementptr i8, i8* %32, i64 1
  %33 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %33 to i32
  %cmp41 = icmp eq i32 %conv40, 62
  br i1 %cmp41, label %if.end.45, label %if.then.43

if.then.43:                                       ; preds = %land.lhs.true.38, %if.end.33
  %34 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %34, i64 -2
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  br label %sw.epilog

if.end.45:                                        ; preds = %land.lhs.true.38
  %35 = load i8*, i8** %ptr.addr, align 8
  %add.ptr46 = getelementptr i8, i8* %35, i64 2
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr46, i8** %36, align 8
  store i32 40, i32* %retval
  br label %return

sw.bb.47:                                         ; preds = %cond.end
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr48 = getelementptr i8, i8* %37, i64 2
  store i8* %add.ptr48, i8** %ptr.addr, align 8
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp49 = icmp eq i8* %38, %39
  br i1 %cmp49, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %sw.bb.47
  store i32 -1, i32* %retval
  br label %return

if.end.52:                                        ; preds = %sw.bb.47
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx53 = getelementptr i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %41 to i32
  %cmp55 = icmp eq i32 %conv54, 0
  br i1 %cmp55, label %cond.true.57, label %cond.false.63

cond.true.57:                                     ; preds = %if.end.52
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx58, align 1
  %idxprom59 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type60 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx61 = getelementptr [256 x i8], [256 x i8]* %type60, i32 0, i64 %idxprom59
  %46 = load i8, i8* %arrayidx61, align 1
  %conv62 = zext i8 %46 to i32
  br label %cond.end.67

cond.false.63:                                    ; preds = %if.end.52
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx64 = getelementptr i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx64, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx65 = getelementptr i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx65, align 1
  %call66 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.67

cond.end.67:                                      ; preds = %cond.false.63, %cond.true.57
  %cond68 = phi i32 [ %conv62, %cond.true.57 ], [ %call66, %cond.false.63 ]
  %cmp69 = icmp eq i32 %cond68, 10
  br i1 %cmp69, label %if.then.71, label %if.end.73

if.then.71:                                       ; preds = %cond.end.67
  %51 = load i8*, i8** %ptr.addr, align 8
  %add.ptr72 = getelementptr i8, i8* %51, i64 2
  store i8* %add.ptr72, i8** %ptr.addr, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.then.71, %cond.end.67
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %52, i8** %53, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.74:                                         ; preds = %cond.end
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr75 = getelementptr i8, i8* %54, i64 2
  %55 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr75, i8** %55, align 8
  store i32 7, i32* %retval
  br label %return

sw.bb.76:                                         ; preds = %cond.end
  %56 = load i8*, i8** %end.addr, align 8
  %57 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast77 = ptrtoint i8* %56 to i64
  %sub.ptr.rhs.cast78 = ptrtoint i8* %57 to i64
  %sub.ptr.sub79 = sub i64 %sub.ptr.lhs.cast77, %sub.ptr.rhs.cast78
  %cmp80 = icmp slt i64 %sub.ptr.sub79, 2
  br i1 %cmp80, label %if.then.82, label %if.end.83

if.then.82:                                       ; preds = %sw.bb.76
  store i32 -2, i32* %retval
  br label %return

if.end.83:                                        ; preds = %sw.bb.76
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr84 = getelementptr i8, i8* %58, i64 2
  store i8* %add.ptr84, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.85:                                         ; preds = %cond.end
  %59 = load i8*, i8** %end.addr, align 8
  %60 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast86 = ptrtoint i8* %59 to i64
  %sub.ptr.rhs.cast87 = ptrtoint i8* %60 to i64
  %sub.ptr.sub88 = sub i64 %sub.ptr.lhs.cast86, %sub.ptr.rhs.cast87
  %cmp89 = icmp slt i64 %sub.ptr.sub88, 3
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %sw.bb.85
  store i32 -2, i32* %retval
  br label %return

if.end.92:                                        ; preds = %sw.bb.85
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr93 = getelementptr i8, i8* %61, i64 3
  store i8* %add.ptr93, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.94:                                         ; preds = %cond.end
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast95 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast96 = ptrtoint i8* %63 to i64
  %sub.ptr.sub97 = sub i64 %sub.ptr.lhs.cast95, %sub.ptr.rhs.cast96
  %cmp98 = icmp slt i64 %sub.ptr.sub97, 4
  br i1 %cmp98, label %if.then.100, label %if.end.101

if.then.100:                                      ; preds = %sw.bb.94
  store i32 -2, i32* %retval
  br label %return

if.end.101:                                       ; preds = %sw.bb.94
  %64 = load i8*, i8** %ptr.addr, align 8
  %add.ptr102 = getelementptr i8, i8* %64, i64 4
  store i8* %add.ptr102, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.103:                                        ; preds = %cond.end, %cond.end, %cond.end
  %65 = load i8*, i8** %ptr.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %65, i8** %66, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %67 = load i8*, i8** %ptr.addr, align 8
  %add.ptr104 = getelementptr i8, i8* %67, i64 2
  store i8* %add.ptr104, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.101, %if.end.92, %if.end.83, %if.then.43, %if.then.27
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.153, %sw.epilog
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8*, i8** %end.addr, align 8
  %cmp105 = icmp ne i8* %68, %69
  br i1 %cmp105, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %70 = load i8*, i8** %ptr.addr, align 8
  %arrayidx107 = getelementptr i8, i8* %70, i64 0
  %71 = load i8, i8* %arrayidx107, align 1
  %conv108 = sext i8 %71 to i32
  %cmp109 = icmp eq i32 %conv108, 0
  br i1 %cmp109, label %cond.true.111, label %cond.false.117

cond.true.111:                                    ; preds = %while.body
  %72 = load i8*, i8** %ptr.addr, align 8
  %arrayidx112 = getelementptr i8, i8* %72, i64 1
  %73 = load i8, i8* %arrayidx112, align 1
  %idxprom113 = zext i8 %73 to i64
  %74 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %75 = bitcast %struct.encoding* %74 to %struct.normal_encoding*
  %type114 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %75, i32 0, i32 1
  %arrayidx115 = getelementptr [256 x i8], [256 x i8]* %type114, i32 0, i64 %idxprom113
  %76 = load i8, i8* %arrayidx115, align 1
  %conv116 = zext i8 %76 to i32
  br label %cond.end.121

cond.false.117:                                   ; preds = %while.body
  %77 = load i8*, i8** %ptr.addr, align 8
  %arrayidx118 = getelementptr i8, i8* %77, i64 0
  %78 = load i8, i8* %arrayidx118, align 1
  %79 = load i8*, i8** %ptr.addr, align 8
  %arrayidx119 = getelementptr i8, i8* %79, i64 1
  %80 = load i8, i8* %arrayidx119, align 1
  %call120 = call i32 @unicode_byte_type(i8 signext %78, i8 signext %80)
  br label %cond.end.121

cond.end.121:                                     ; preds = %cond.false.117, %cond.true.111
  %cond122 = phi i32 [ %conv116, %cond.true.111 ], [ %call120, %cond.false.117 ]
  switch i32 %cond122, label %sw.default.151 [
    i32 5, label %sw.bb.123
    i32 6, label %sw.bb.132
    i32 7, label %sw.bb.141
    i32 0, label %sw.bb.150
    i32 1, label %sw.bb.150
    i32 8, label %sw.bb.150
    i32 9, label %sw.bb.150
    i32 10, label %sw.bb.150
    i32 4, label %sw.bb.150
  ]

sw.bb.123:                                        ; preds = %cond.end.121
  %81 = load i8*, i8** %end.addr, align 8
  %82 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast124 = ptrtoint i8* %81 to i64
  %sub.ptr.rhs.cast125 = ptrtoint i8* %82 to i64
  %sub.ptr.sub126 = sub i64 %sub.ptr.lhs.cast124, %sub.ptr.rhs.cast125
  %cmp127 = icmp slt i64 %sub.ptr.sub126, 2
  br i1 %cmp127, label %if.then.129, label %if.end.130

if.then.129:                                      ; preds = %sw.bb.123
  %83 = load i8*, i8** %ptr.addr, align 8
  %84 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %83, i8** %84, align 8
  store i32 6, i32* %retval
  br label %return

if.end.130:                                       ; preds = %sw.bb.123
  %85 = load i8*, i8** %ptr.addr, align 8
  %add.ptr131 = getelementptr i8, i8* %85, i64 2
  store i8* %add.ptr131, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.bb.132:                                        ; preds = %cond.end.121
  %86 = load i8*, i8** %end.addr, align 8
  %87 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast133 = ptrtoint i8* %86 to i64
  %sub.ptr.rhs.cast134 = ptrtoint i8* %87 to i64
  %sub.ptr.sub135 = sub i64 %sub.ptr.lhs.cast133, %sub.ptr.rhs.cast134
  %cmp136 = icmp slt i64 %sub.ptr.sub135, 3
  br i1 %cmp136, label %if.then.138, label %if.end.139

if.then.138:                                      ; preds = %sw.bb.132
  %88 = load i8*, i8** %ptr.addr, align 8
  %89 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %88, i8** %89, align 8
  store i32 6, i32* %retval
  br label %return

if.end.139:                                       ; preds = %sw.bb.132
  %90 = load i8*, i8** %ptr.addr, align 8
  %add.ptr140 = getelementptr i8, i8* %90, i64 3
  store i8* %add.ptr140, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.bb.141:                                        ; preds = %cond.end.121
  %91 = load i8*, i8** %end.addr, align 8
  %92 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast142 = ptrtoint i8* %91 to i64
  %sub.ptr.rhs.cast143 = ptrtoint i8* %92 to i64
  %sub.ptr.sub144 = sub i64 %sub.ptr.lhs.cast142, %sub.ptr.rhs.cast143
  %cmp145 = icmp slt i64 %sub.ptr.sub144, 4
  br i1 %cmp145, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %sw.bb.141
  %93 = load i8*, i8** %ptr.addr, align 8
  %94 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %93, i8** %94, align 8
  store i32 6, i32* %retval
  br label %return

if.end.148:                                       ; preds = %sw.bb.141
  %95 = load i8*, i8** %ptr.addr, align 8
  %add.ptr149 = getelementptr i8, i8* %95, i64 4
  store i8* %add.ptr149, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.bb.150:                                        ; preds = %cond.end.121, %cond.end.121, %cond.end.121, %cond.end.121, %cond.end.121, %cond.end.121
  %96 = load i8*, i8** %ptr.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %96, i8** %97, align 8
  store i32 6, i32* %retval
  br label %return

sw.default.151:                                   ; preds = %cond.end.121
  %98 = load i8*, i8** %ptr.addr, align 8
  %add.ptr152 = getelementptr i8, i8* %98, i64 2
  store i8* %add.ptr152, i8** %ptr.addr, align 8
  br label %sw.epilog.153

sw.epilog.153:                                    ; preds = %sw.default.151, %if.end.148, %if.end.139, %if.end.130
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %99 = load i8*, i8** %ptr.addr, align 8
  %100 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %99, i8** %100, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.bb.150, %if.then.147, %if.then.138, %if.then.129, %sw.bb.103, %if.then.100, %if.then.91, %if.then.82, %sw.bb.74, %if.end.73, %if.then.51, %if.end.45, %if.then.32, %if.then.17, %if.then.4, %if.then
  %101 = load i32, i32* %retval
  ret i32 %101
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_ignoreSectionTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %level = alloca i32, align 4
  %n = alloca i64, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  store i32 0, i32* %level, align 4
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  store i64 %sub.ptr.sub, i64* %n, align 8
  %2 = load i64, i64* %n, align 8
  %and = and i64 %2, 1
  %tobool = icmp ne i64 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load i64, i64* %n, align 8
  %and1 = and i64 %3, -2
  store i64 %and1, i64* %n, align 8
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i64, i64* %n, align 8
  %add.ptr = getelementptr i8, i8* %4, i64 %5
  store i8* %add.ptr, i8** %end.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %6, %7
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %9 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx4, align 1
  %idxprom = zext i8 %11 to i64
  %12 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %13 = bitcast %struct.encoding* %12 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %13, i32 0, i32 1
  %arrayidx5 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %14 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %14 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx7, align 1
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx8, align 1
  %call = call i32 @unicode_byte_type(i8 signext %16, i8 signext %18)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv6, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.17
    i32 7, label %sw.bb.26
    i32 0, label %sw.bb.35
    i32 1, label %sw.bb.35
    i32 8, label %sw.bb.35
    i32 2, label %sw.bb.36
    i32 4, label %sw.bb.69
  ]

sw.bb:                                            ; preds = %cond.end
  %19 = load i8*, i8** %end.addr, align 8
  %20 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast9 = ptrtoint i8* %19 to i64
  %sub.ptr.rhs.cast10 = ptrtoint i8* %20 to i64
  %sub.ptr.sub11 = sub i64 %sub.ptr.lhs.cast9, %sub.ptr.rhs.cast10
  %cmp12 = icmp slt i64 %sub.ptr.sub11, 2
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end.15:                                        ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %add.ptr16 = getelementptr i8, i8* %21, i64 2
  store i8* %add.ptr16, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.17:                                         ; preds = %cond.end
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast18 = ptrtoint i8* %22 to i64
  %sub.ptr.rhs.cast19 = ptrtoint i8* %23 to i64
  %sub.ptr.sub20 = sub i64 %sub.ptr.lhs.cast18, %sub.ptr.rhs.cast19
  %cmp21 = icmp slt i64 %sub.ptr.sub20, 3
  br i1 %cmp21, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %sw.bb.17
  store i32 -2, i32* %retval
  br label %return

if.end.24:                                        ; preds = %sw.bb.17
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr25 = getelementptr i8, i8* %24, i64 3
  store i8* %add.ptr25, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.26:                                         ; preds = %cond.end
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast27 = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast28 = ptrtoint i8* %26 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  %cmp30 = icmp slt i64 %sub.ptr.sub29, 4
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %sw.bb.26
  store i32 -2, i32* %retval
  br label %return

if.end.33:                                        ; preds = %sw.bb.26
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr34 = getelementptr i8, i8* %27, i64 4
  store i8* %add.ptr34, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.35:                                         ; preds = %cond.end, %cond.end, %cond.end
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %28, i8** %29, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %cond.end
  %30 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %30, i64 2
  store i8* %add.ptr37, i8** %ptr.addr, align 8
  %31 = load i8*, i8** %end.addr, align 8
  %cmp38 = icmp eq i8* %add.ptr37, %31
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %sw.bb.36
  store i32 -1, i32* %retval
  br label %return

if.end.41:                                        ; preds = %sw.bb.36
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx42 = getelementptr i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx42, align 1
  %conv43 = sext i8 %33 to i32
  %cmp44 = icmp eq i32 %conv43, 0
  br i1 %cmp44, label %land.lhs.true, label %if.end.68

land.lhs.true:                                    ; preds = %if.end.41
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx46 = getelementptr i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %35 to i32
  %cmp48 = icmp eq i32 %conv47, 33
  br i1 %cmp48, label %if.then.50, label %if.end.68

if.then.50:                                       ; preds = %land.lhs.true
  %36 = load i8*, i8** %ptr.addr, align 8
  %add.ptr51 = getelementptr i8, i8* %36, i64 2
  store i8* %add.ptr51, i8** %ptr.addr, align 8
  %37 = load i8*, i8** %end.addr, align 8
  %cmp52 = icmp eq i8* %add.ptr51, %37
  br i1 %cmp52, label %if.then.54, label %if.end.55

if.then.54:                                       ; preds = %if.then.50
  store i32 -1, i32* %retval
  br label %return

if.end.55:                                        ; preds = %if.then.50
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx56 = getelementptr i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx56, align 1
  %conv57 = sext i8 %39 to i32
  %cmp58 = icmp eq i32 %conv57, 0
  br i1 %cmp58, label %land.lhs.true.60, label %if.end.67

land.lhs.true.60:                                 ; preds = %if.end.55
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx61, align 1
  %conv62 = sext i8 %41 to i32
  %cmp63 = icmp eq i32 %conv62, 91
  br i1 %cmp63, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %land.lhs.true.60
  %42 = load i32, i32* %level, align 4
  %inc = add i32 %42, 1
  store i32 %inc, i32* %level, align 4
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr66 = getelementptr i8, i8* %43, i64 2
  store i8* %add.ptr66, i8** %ptr.addr, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %if.then.65, %land.lhs.true.60, %if.end.55
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %land.lhs.true, %if.end.41
  br label %sw.epilog

sw.bb.69:                                         ; preds = %cond.end
  %44 = load i8*, i8** %ptr.addr, align 8
  %add.ptr70 = getelementptr i8, i8* %44, i64 2
  store i8* %add.ptr70, i8** %ptr.addr, align 8
  %45 = load i8*, i8** %end.addr, align 8
  %cmp71 = icmp eq i8* %add.ptr70, %45
  br i1 %cmp71, label %if.then.73, label %if.end.74

if.then.73:                                       ; preds = %sw.bb.69
  store i32 -1, i32* %retval
  br label %return

if.end.74:                                        ; preds = %sw.bb.69
  %46 = load i8*, i8** %ptr.addr, align 8
  %arrayidx75 = getelementptr i8, i8* %46, i64 0
  %47 = load i8, i8* %arrayidx75, align 1
  %conv76 = sext i8 %47 to i32
  %cmp77 = icmp eq i32 %conv76, 0
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.106

land.lhs.true.79:                                 ; preds = %if.end.74
  %48 = load i8*, i8** %ptr.addr, align 8
  %arrayidx80 = getelementptr i8, i8* %48, i64 1
  %49 = load i8, i8* %arrayidx80, align 1
  %conv81 = sext i8 %49 to i32
  %cmp82 = icmp eq i32 %conv81, 93
  br i1 %cmp82, label %if.then.84, label %if.end.106

if.then.84:                                       ; preds = %land.lhs.true.79
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr85 = getelementptr i8, i8* %50, i64 2
  store i8* %add.ptr85, i8** %ptr.addr, align 8
  %51 = load i8*, i8** %end.addr, align 8
  %cmp86 = icmp eq i8* %add.ptr85, %51
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.then.84
  store i32 -1, i32* %retval
  br label %return

if.end.89:                                        ; preds = %if.then.84
  %52 = load i8*, i8** %ptr.addr, align 8
  %arrayidx90 = getelementptr i8, i8* %52, i64 0
  %53 = load i8, i8* %arrayidx90, align 1
  %conv91 = sext i8 %53 to i32
  %cmp92 = icmp eq i32 %conv91, 0
  br i1 %cmp92, label %land.lhs.true.94, label %if.end.105

land.lhs.true.94:                                 ; preds = %if.end.89
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx95 = getelementptr i8, i8* %54, i64 1
  %55 = load i8, i8* %arrayidx95, align 1
  %conv96 = sext i8 %55 to i32
  %cmp97 = icmp eq i32 %conv96, 62
  br i1 %cmp97, label %if.then.99, label %if.end.105

if.then.99:                                       ; preds = %land.lhs.true.94
  %56 = load i8*, i8** %ptr.addr, align 8
  %add.ptr100 = getelementptr i8, i8* %56, i64 2
  store i8* %add.ptr100, i8** %ptr.addr, align 8
  %57 = load i32, i32* %level, align 4
  %cmp101 = icmp eq i32 %57, 0
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %if.then.99
  %58 = load i8*, i8** %ptr.addr, align 8
  %59 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %58, i8** %59, align 8
  store i32 42, i32* %retval
  br label %return

if.end.104:                                       ; preds = %if.then.99
  %60 = load i32, i32* %level, align 4
  %dec = add i32 %60, -1
  store i32 %dec, i32* %level, align 4
  br label %if.end.105

if.end.105:                                       ; preds = %if.end.104, %land.lhs.true.94, %if.end.89
  br label %if.end.106

if.end.106:                                       ; preds = %if.end.105, %land.lhs.true.79, %if.end.74
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr107 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr107, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.106, %if.end.68, %if.end.33, %if.end.24, %if.end.15
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.then.103, %if.then.88, %if.then.73, %if.then.54, %if.then.40, %sw.bb.35, %if.then.32, %if.then.23, %if.then.14
  %62 = load i32, i32* %retval
  ret i32 %62
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_attributeValueTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %start = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  store i8* %2, i8** %start, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp ne i8* %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %7 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx4, align 1
  %idxprom = zext i8 %8 to i64
  %9 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %10 = bitcast %struct.encoding* %9 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %10, i32 0, i32 1
  %arrayidx5 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %11 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx7, align 1
  %14 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx8, align 1
  %call = call i32 @unicode_byte_type(i8 signext %13, i8 signext %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv6, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.9
    i32 7, label %sw.bb.11
    i32 3, label %sw.bb.13
    i32 2, label %sw.bb.20
    i32 10, label %sw.bb.21
    i32 9, label %sw.bb.27
    i32 21, label %sw.bb.58
  ]

sw.bb:                                            ; preds = %cond.end
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %16, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %cond.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %17, i64 3
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.11:                                         ; preds = %cond.end
  %18 = load i8*, i8** %ptr.addr, align 8
  %add.ptr12 = getelementptr i8, i8* %18, i64 4
  store i8* %add.ptr12, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.13:                                         ; preds = %cond.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8*, i8** %start, align 8
  %cmp14 = icmp eq i8* %19, %20
  br i1 %cmp14, label %if.then.16, label %if.end.19

if.then.16:                                       ; preds = %sw.bb.13
  %21 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %22, i64 2
  %23 = load i8*, i8** %end.addr, align 8
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call18 = call i32 @big2_scanRef(%struct.encoding* %21, i8* %add.ptr17, i8* %23, i8** %24)
  store i32 %call18, i32* %retval
  br label %return

if.end.19:                                        ; preds = %sw.bb.13
  %25 = load i8*, i8** %ptr.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %25, i8** %26, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.20:                                         ; preds = %cond.end
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.21:                                         ; preds = %cond.end
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8*, i8** %start, align 8
  %cmp22 = icmp eq i8* %29, %30
  br i1 %cmp22, label %if.then.24, label %if.end.26

if.then.24:                                       ; preds = %sw.bb.21
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr25 = getelementptr i8, i8* %31, i64 2
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr25, i8** %32, align 8
  store i32 7, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.21
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %33, i8** %34, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.27:                                         ; preds = %cond.end
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8*, i8** %start, align 8
  %cmp28 = icmp eq i8* %35, %36
  br i1 %cmp28, label %if.then.30, label %if.end.57

if.then.30:                                       ; preds = %sw.bb.27
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr31 = getelementptr i8, i8* %37, i64 2
  store i8* %add.ptr31, i8** %ptr.addr, align 8
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp32 = icmp eq i8* %38, %39
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.30
  store i32 -3, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.30
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx36 = getelementptr i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %41 to i32
  %cmp38 = icmp eq i32 %conv37, 0
  br i1 %cmp38, label %cond.true.40, label %cond.false.46

cond.true.40:                                     ; preds = %if.end.35
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx41 = getelementptr i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx41, align 1
  %idxprom42 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type43 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx44 = getelementptr [256 x i8], [256 x i8]* %type43, i32 0, i64 %idxprom42
  %46 = load i8, i8* %arrayidx44, align 1
  %conv45 = zext i8 %46 to i32
  br label %cond.end.50

cond.false.46:                                    ; preds = %if.end.35
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx47 = getelementptr i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx47, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx48, align 1
  %call49 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.50

cond.end.50:                                      ; preds = %cond.false.46, %cond.true.40
  %cond51 = phi i32 [ %conv45, %cond.true.40 ], [ %call49, %cond.false.46 ]
  %cmp52 = icmp eq i32 %cond51, 10
  br i1 %cmp52, label %if.then.54, label %if.end.56

if.then.54:                                       ; preds = %cond.end.50
  %51 = load i8*, i8** %ptr.addr, align 8
  %add.ptr55 = getelementptr i8, i8* %51, i64 2
  store i8* %add.ptr55, i8** %ptr.addr, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.then.54, %cond.end.50
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %52, i8** %53, align 8
  store i32 7, i32* %retval
  br label %return

if.end.57:                                        ; preds = %sw.bb.27
  %54 = load i8*, i8** %ptr.addr, align 8
  %55 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %54, i8** %55, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.58:                                         ; preds = %cond.end
  %56 = load i8*, i8** %ptr.addr, align 8
  %57 = load i8*, i8** %start, align 8
  %cmp59 = icmp eq i8* %56, %57
  br i1 %cmp59, label %if.then.61, label %if.end.63

if.then.61:                                       ; preds = %sw.bb.58
  %58 = load i8*, i8** %ptr.addr, align 8
  %add.ptr62 = getelementptr i8, i8* %58, i64 2
  %59 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr62, i8** %59, align 8
  store i32 39, i32* %retval
  br label %return

if.end.63:                                        ; preds = %sw.bb.58
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 6, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr64 = getelementptr i8, i8* %62, i64 2
  store i8* %add.ptr64, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.11, %sw.bb.9, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end.63, %if.then.61, %if.end.57, %if.end.56, %if.then.34, %if.end.26, %if.then.24, %sw.bb.20, %if.end.19, %if.then.16, %if.then
  %65 = load i32, i32* %retval
  ret i32 %65
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_entityValueTok(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %start = alloca i8*, align 8
  %tok = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -4, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  store i8* %2, i8** %start, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i8*, i8** %end.addr, align 8
  %cmp1 = icmp ne i8* %3, %4
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %5, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %7 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %7, i64 1
  %8 = load i8, i8* %arrayidx4, align 1
  %idxprom = zext i8 %8 to i64
  %9 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %10 = bitcast %struct.encoding* %9 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %10, i32 0, i32 1
  %arrayidx5 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %11 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %11 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx7, align 1
  %14 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %14, i64 1
  %15 = load i8, i8* %arrayidx8, align 1
  %call = call i32 @unicode_byte_type(i8 signext %13, i8 signext %15)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv6, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.9
    i32 7, label %sw.bb.11
    i32 3, label %sw.bb.13
    i32 30, label %sw.bb.20
    i32 10, label %sw.bb.33
    i32 9, label %sw.bb.39
  ]

sw.bb:                                            ; preds = %cond.end
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %16, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %cond.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %17, i64 3
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.11:                                         ; preds = %cond.end
  %18 = load i8*, i8** %ptr.addr, align 8
  %add.ptr12 = getelementptr i8, i8* %18, i64 4
  store i8* %add.ptr12, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.13:                                         ; preds = %cond.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8*, i8** %start, align 8
  %cmp14 = icmp eq i8* %19, %20
  br i1 %cmp14, label %if.then.16, label %if.end.19

if.then.16:                                       ; preds = %sw.bb.13
  %21 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %22, i64 2
  %23 = load i8*, i8** %end.addr, align 8
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call18 = call i32 @big2_scanRef(%struct.encoding* %21, i8* %add.ptr17, i8* %23, i8** %24)
  store i32 %call18, i32* %retval
  br label %return

if.end.19:                                        ; preds = %sw.bb.13
  %25 = load i8*, i8** %ptr.addr, align 8
  %26 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %25, i8** %26, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.20:                                         ; preds = %cond.end
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8*, i8** %start, align 8
  %cmp21 = icmp eq i8* %27, %28
  br i1 %cmp21, label %if.then.23, label %if.end.32

if.then.23:                                       ; preds = %sw.bb.20
  %29 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %30 = load i8*, i8** %ptr.addr, align 8
  %add.ptr24 = getelementptr i8, i8* %30, i64 2
  %31 = load i8*, i8** %end.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call25 = call i32 @big2_scanPercent(%struct.encoding* %29, i8* %add.ptr24, i8* %31, i8** %32)
  store i32 %call25, i32* %tok, align 4
  %33 = load i32, i32* %tok, align 4
  %cmp26 = icmp eq i32 %33, 22
  br i1 %cmp26, label %cond.true.28, label %cond.false.29

cond.true.28:                                     ; preds = %if.then.23
  br label %cond.end.30

cond.false.29:                                    ; preds = %if.then.23
  %34 = load i32, i32* %tok, align 4
  br label %cond.end.30

cond.end.30:                                      ; preds = %cond.false.29, %cond.true.28
  %cond31 = phi i32 [ 0, %cond.true.28 ], [ %34, %cond.false.29 ]
  store i32 %cond31, i32* %retval
  br label %return

if.end.32:                                        ; preds = %sw.bb.20
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %35, i8** %36, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.33:                                         ; preds = %cond.end
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8*, i8** %start, align 8
  %cmp34 = icmp eq i8* %37, %38
  br i1 %cmp34, label %if.then.36, label %if.end.38

if.then.36:                                       ; preds = %sw.bb.33
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %39, i64 2
  %40 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr37, i8** %40, align 8
  store i32 7, i32* %retval
  br label %return

if.end.38:                                        ; preds = %sw.bb.33
  %41 = load i8*, i8** %ptr.addr, align 8
  %42 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %41, i8** %42, align 8
  store i32 6, i32* %retval
  br label %return

sw.bb.39:                                         ; preds = %cond.end
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %start, align 8
  %cmp40 = icmp eq i8* %43, %44
  br i1 %cmp40, label %if.then.42, label %if.end.69

if.then.42:                                       ; preds = %sw.bb.39
  %45 = load i8*, i8** %ptr.addr, align 8
  %add.ptr43 = getelementptr i8, i8* %45, i64 2
  store i8* %add.ptr43, i8** %ptr.addr, align 8
  %46 = load i8*, i8** %ptr.addr, align 8
  %47 = load i8*, i8** %end.addr, align 8
  %cmp44 = icmp eq i8* %46, %47
  br i1 %cmp44, label %if.then.46, label %if.end.47

if.then.46:                                       ; preds = %if.then.42
  store i32 -3, i32* %retval
  br label %return

if.end.47:                                        ; preds = %if.then.42
  %48 = load i8*, i8** %ptr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %48, i64 0
  %49 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %49 to i32
  %cmp50 = icmp eq i32 %conv49, 0
  br i1 %cmp50, label %cond.true.52, label %cond.false.58

cond.true.52:                                     ; preds = %if.end.47
  %50 = load i8*, i8** %ptr.addr, align 8
  %arrayidx53 = getelementptr i8, i8* %50, i64 1
  %51 = load i8, i8* %arrayidx53, align 1
  %idxprom54 = zext i8 %51 to i64
  %52 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %53 = bitcast %struct.encoding* %52 to %struct.normal_encoding*
  %type55 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %53, i32 0, i32 1
  %arrayidx56 = getelementptr [256 x i8], [256 x i8]* %type55, i32 0, i64 %idxprom54
  %54 = load i8, i8* %arrayidx56, align 1
  %conv57 = zext i8 %54 to i32
  br label %cond.end.62

cond.false.58:                                    ; preds = %if.end.47
  %55 = load i8*, i8** %ptr.addr, align 8
  %arrayidx59 = getelementptr i8, i8* %55, i64 0
  %56 = load i8, i8* %arrayidx59, align 1
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx60 = getelementptr i8, i8* %57, i64 1
  %58 = load i8, i8* %arrayidx60, align 1
  %call61 = call i32 @unicode_byte_type(i8 signext %56, i8 signext %58)
  br label %cond.end.62

cond.end.62:                                      ; preds = %cond.false.58, %cond.true.52
  %cond63 = phi i32 [ %conv57, %cond.true.52 ], [ %call61, %cond.false.58 ]
  %cmp64 = icmp eq i32 %cond63, 10
  br i1 %cmp64, label %if.then.66, label %if.end.68

if.then.66:                                       ; preds = %cond.end.62
  %59 = load i8*, i8** %ptr.addr, align 8
  %add.ptr67 = getelementptr i8, i8* %59, i64 2
  store i8* %add.ptr67, i8** %ptr.addr, align 8
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.66, %cond.end.62
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 7, i32* %retval
  br label %return

if.end.69:                                        ; preds = %sw.bb.39
  %62 = load i8*, i8** %ptr.addr, align 8
  %63 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %62, i8** %63, align 8
  store i32 6, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %64 = load i8*, i8** %ptr.addr, align 8
  %add.ptr70 = getelementptr i8, i8* %64, i64 2
  store i8* %add.ptr70, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.11, %sw.bb.9, %sw.bb
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %65 = load i8*, i8** %ptr.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %65, i8** %66, align 8
  store i32 6, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %if.end.69, %if.end.68, %if.then.46, %if.end.38, %if.then.36, %if.end.32, %cond.end.30, %if.end.19, %if.then.16, %if.then
  %67 = load i32, i32* %retval
  ret i32 %67
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_sameName(%struct.encoding* %enc, i8* %ptr1, i8* %ptr2) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr1.addr = alloca i8*, align 8
  %ptr2.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr1, i8** %ptr1.addr, align 8
  store i8* %ptr2, i8** %ptr2.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %2 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %7 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx5, align 1
  %9 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %8, i8 signext %10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 7, label %sw.bb
    i32 6, label %sw.bb.12
    i32 5, label %sw.bb.21
    i32 29, label %sw.bb.38
    i32 22, label %sw.bb.38
    i32 23, label %sw.bb.38
    i32 24, label %sw.bb.38
    i32 25, label %sw.bb.38
    i32 26, label %sw.bb.38
    i32 27, label %sw.bb.38
  ]

sw.bb:                                            ; preds = %cond.end
  %11 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr1.addr, align 8
  %12 = load i8, i8* %11, align 1
  %conv7 = sext i8 %12 to i32
  %13 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr8 = getelementptr i8, i8* %13, i32 1
  store i8* %incdec.ptr8, i8** %ptr2.addr, align 8
  %14 = load i8, i8* %13, align 1
  %conv9 = sext i8 %14 to i32
  %cmp10 = icmp ne i32 %conv7, %conv9
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.bb.12

sw.bb.12:                                         ; preds = %cond.end, %if.end
  %15 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr13 = getelementptr i8, i8* %15, i32 1
  store i8* %incdec.ptr13, i8** %ptr1.addr, align 8
  %16 = load i8, i8* %15, align 1
  %conv14 = sext i8 %16 to i32
  %17 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr15 = getelementptr i8, i8* %17, i32 1
  store i8* %incdec.ptr15, i8** %ptr2.addr, align 8
  %18 = load i8, i8* %17, align 1
  %conv16 = sext i8 %18 to i32
  %cmp17 = icmp ne i32 %conv14, %conv16
  br i1 %cmp17, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %sw.bb.12
  store i32 0, i32* %retval
  br label %return

if.end.20:                                        ; preds = %sw.bb.12
  br label %sw.bb.21

sw.bb.21:                                         ; preds = %cond.end, %if.end.20
  %19 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr22 = getelementptr i8, i8* %19, i32 1
  store i8* %incdec.ptr22, i8** %ptr1.addr, align 8
  %20 = load i8, i8* %19, align 1
  %conv23 = sext i8 %20 to i32
  %21 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr24 = getelementptr i8, i8* %21, i32 1
  store i8* %incdec.ptr24, i8** %ptr2.addr, align 8
  %22 = load i8, i8* %21, align 1
  %conv25 = sext i8 %22 to i32
  %cmp26 = icmp ne i32 %conv23, %conv25
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %sw.bb.21
  store i32 0, i32* %retval
  br label %return

if.end.29:                                        ; preds = %sw.bb.21
  %23 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr30 = getelementptr i8, i8* %23, i32 1
  store i8* %incdec.ptr30, i8** %ptr1.addr, align 8
  %24 = load i8, i8* %23, align 1
  %conv31 = sext i8 %24 to i32
  %25 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr32 = getelementptr i8, i8* %25, i32 1
  store i8* %incdec.ptr32, i8** %ptr2.addr, align 8
  %26 = load i8, i8* %25, align 1
  %conv33 = sext i8 %26 to i32
  %cmp34 = icmp ne i32 %conv31, %conv33
  br i1 %cmp34, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.end.29
  store i32 0, i32* %retval
  br label %return

if.end.37:                                        ; preds = %if.end.29
  br label %sw.epilog

sw.bb.38:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %27 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr39 = getelementptr i8, i8* %27, i32 1
  store i8* %incdec.ptr39, i8** %ptr2.addr, align 8
  %28 = load i8, i8* %27, align 1
  %conv40 = sext i8 %28 to i32
  %29 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr41 = getelementptr i8, i8* %29, i32 1
  store i8* %incdec.ptr41, i8** %ptr1.addr, align 8
  %30 = load i8, i8* %29, align 1
  %conv42 = sext i8 %30 to i32
  %cmp43 = icmp ne i32 %conv40, %conv42
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %sw.bb.38
  store i32 0, i32* %retval
  br label %return

if.end.46:                                        ; preds = %sw.bb.38
  %31 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr47 = getelementptr i8, i8* %31, i32 1
  store i8* %incdec.ptr47, i8** %ptr2.addr, align 8
  %32 = load i8, i8* %31, align 1
  %conv48 = sext i8 %32 to i32
  %33 = load i8*, i8** %ptr1.addr, align 8
  %incdec.ptr49 = getelementptr i8, i8* %33, i32 1
  store i8* %incdec.ptr49, i8** %ptr1.addr, align 8
  %34 = load i8, i8* %33, align 1
  %conv50 = sext i8 %34 to i32
  %cmp51 = icmp ne i32 %conv48, %conv50
  br i1 %cmp51, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %if.end.46
  store i32 0, i32* %retval
  br label %return

if.end.54:                                        ; preds = %if.end.46
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %35 = load i8*, i8** %ptr2.addr, align 8
  %arrayidx55 = getelementptr i8, i8* %35, i64 0
  %36 = load i8, i8* %arrayidx55, align 1
  %conv56 = sext i8 %36 to i32
  %cmp57 = icmp eq i32 %conv56, 0
  br i1 %cmp57, label %cond.true.59, label %cond.false.65

cond.true.59:                                     ; preds = %sw.default
  %37 = load i8*, i8** %ptr2.addr, align 8
  %arrayidx60 = getelementptr i8, i8* %37, i64 1
  %38 = load i8, i8* %arrayidx60, align 1
  %idxprom61 = zext i8 %38 to i64
  %39 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %40 = bitcast %struct.encoding* %39 to %struct.normal_encoding*
  %type62 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %40, i32 0, i32 1
  %arrayidx63 = getelementptr [256 x i8], [256 x i8]* %type62, i32 0, i64 %idxprom61
  %41 = load i8, i8* %arrayidx63, align 1
  %conv64 = zext i8 %41 to i32
  br label %cond.end.69

cond.false.65:                                    ; preds = %sw.default
  %42 = load i8*, i8** %ptr2.addr, align 8
  %arrayidx66 = getelementptr i8, i8* %42, i64 0
  %43 = load i8, i8* %arrayidx66, align 1
  %44 = load i8*, i8** %ptr2.addr, align 8
  %arrayidx67 = getelementptr i8, i8* %44, i64 1
  %45 = load i8, i8* %arrayidx67, align 1
  %call68 = call i32 @unicode_byte_type(i8 signext %43, i8 signext %45)
  br label %cond.end.69

cond.end.69:                                      ; preds = %cond.false.65, %cond.true.59
  %cond70 = phi i32 [ %conv64, %cond.true.59 ], [ %call68, %cond.false.65 ]
  switch i32 %cond70, label %sw.default.72 [
    i32 5, label %sw.bb.71
    i32 6, label %sw.bb.71
    i32 7, label %sw.bb.71
    i32 29, label %sw.bb.71
    i32 22, label %sw.bb.71
    i32 23, label %sw.bb.71
    i32 24, label %sw.bb.71
    i32 25, label %sw.bb.71
    i32 26, label %sw.bb.71
    i32 27, label %sw.bb.71
  ]

sw.bb.71:                                         ; preds = %cond.end.69, %cond.end.69, %cond.end.69, %cond.end.69, %cond.end.69, %cond.end.69, %cond.end.69, %cond.end.69, %cond.end.69, %cond.end.69
  store i32 0, i32* %retval
  br label %return

sw.default.72:                                    ; preds = %cond.end.69
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.54, %if.end.37
  br label %for.cond

return:                                           ; preds = %sw.default.72, %sw.bb.71, %if.then.53, %if.then.45, %if.then.36, %if.then.28, %if.then.19, %if.then
  %46 = load i32, i32* %retval
  ret i32 %46
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_nameMatchesAscii(%struct.encoding* %enc, i8* %ptr1, i8* %end1, i8* %ptr2) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr1.addr = alloca i8*, align 8
  %end1.addr = alloca i8*, align 8
  %ptr2.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr1, i8** %ptr1.addr, align 8
  store i8* %end1, i8** %end1.addr, align 8
  store i8* %ptr2, i8** %ptr2.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i8*, i8** %ptr2.addr, align 8
  %1 = load i8, i8* %0, align 1
  %tobool = icmp ne i8 %1, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %ptr1.addr, align 8
  %3 = load i8*, i8** %end1.addr, align 8
  %cmp = icmp eq i8* %2, %3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %4 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %land.lhs.true, label %if.then.8

land.lhs.true:                                    ; preds = %if.end
  %6 = load i8*, i8** %ptr1.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %7 to i32
  %8 = load i8*, i8** %ptr2.addr, align 8
  %9 = load i8, i8* %8, align 1
  %conv5 = sext i8 %9 to i32
  %cmp6 = icmp eq i32 %conv4, %conv5
  br i1 %cmp6, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval
  br label %return

if.end.9:                                         ; preds = %land.lhs.true
  br label %for.inc

for.inc:                                          ; preds = %if.end.9
  %10 = load i8*, i8** %ptr1.addr, align 8
  %add.ptr = getelementptr i8, i8* %10, i64 2
  store i8* %add.ptr, i8** %ptr1.addr, align 8
  %11 = load i8*, i8** %ptr2.addr, align 8
  %incdec.ptr = getelementptr i8, i8* %11, i32 1
  store i8* %incdec.ptr, i8** %ptr2.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i8*, i8** %ptr1.addr, align 8
  %13 = load i8*, i8** %end1.addr, align 8
  %cmp10 = icmp eq i8* %12, %13
  %conv11 = zext i1 %cmp10 to i32
  store i32 %conv11, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.8, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_nameLength(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %start = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  store i8* %0, i8** %start, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx2, align 1
  %idxprom = zext i8 %4 to i64
  %5 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %6 = bitcast %struct.encoding* %5 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %6, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %7 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %9, i8 signext %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.7
    i32 7, label %sw.bb.9
    i32 29, label %sw.bb.11
    i32 22, label %sw.bb.11
    i32 23, label %sw.bb.11
    i32 24, label %sw.bb.11
    i32 25, label %sw.bb.11
    i32 26, label %sw.bb.11
    i32 27, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %cond.end
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %12, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.7:                                          ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %add.ptr8 = getelementptr i8, i8* %13, i64 3
  store i8* %add.ptr8, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.9:                                          ; preds = %cond.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %14, i64 4
  store i8* %add.ptr10, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.11:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr12 = getelementptr i8, i8* %15, i64 2
  store i8* %add.ptr12, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %start, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %16 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %17 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv13 = trunc i64 %sub.ptr.sub to i32
  ret i32 %conv13

sw.epilog:                                        ; preds = %sw.bb.11, %sw.bb.9, %sw.bb.7, %sw.bb
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i8* @big2_skipS(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %0, i64 0
  %1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %1 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %2, i64 1
  %3 = load i8, i8* %arrayidx2, align 1
  %idxprom = zext i8 %3 to i64
  %4 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %5 = bitcast %struct.encoding* %4 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %5, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %7 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %7, i64 0
  %8 = load i8, i8* %arrayidx5, align 1
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 1
  %10 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %8, i8 signext %10)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 10, label %sw.bb
    i32 9, label %sw.bb
    i32 21, label %sw.bb
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end
  %11 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %11, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %12 = load i8*, i8** %ptr.addr, align 8
  ret i8* %12

sw.epilog:                                        ; preds = %sw.bb
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_getAtts(%struct.encoding* %enc, i8* %ptr, i32 %attsMax, %struct.ATTRIBUTE* %atts) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %attsMax.addr = alloca i32, align 4
  %atts.addr = alloca %struct.ATTRIBUTE*, align 8
  %state = alloca i32, align 4
  %nAtts = alloca i32, align 4
  %open = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %attsMax, i32* %attsMax.addr, align 4
  store %struct.ATTRIBUTE* %atts, %struct.ATTRIBUTE** %atts.addr, align 8
  store i32 1, i32* %state, align 4
  store i32 0, i32* %nAtts, align 4
  store i32 0, i32* %open, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.cond
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx2, align 1
  %idxprom = zext i8 %4 to i64
  %5 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %6 = bitcast %struct.encoding* %5 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %6, i32 0, i32 1
  %arrayidx3 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %7 = load i8, i8* %arrayidx3, align 1
  %conv4 = zext i8 %7 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx5 = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx5, align 1
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx6, align 1
  %call = call i32 @unicode_byte_type(i8 signext %9, i8 signext %11)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.18
    i32 7, label %sw.bb.34
    i32 29, label %sw.bb.50
    i32 22, label %sw.bb.50
    i32 24, label %sw.bb.50
    i32 12, label %sw.bb.65
    i32 13, label %sw.bb.87
    i32 3, label %sw.bb.113
    i32 21, label %sw.bb.121
    i32 9, label %sw.bb.197
    i32 10, label %sw.bb.197
    i32 11, label %sw.bb.213
    i32 17, label %sw.bb.213
  ]

sw.bb:                                            ; preds = %cond.end
  %12 = load i32, i32* %state, align 4
  %cmp7 = icmp eq i32 %12, 0
  br i1 %cmp7, label %if.then, label %if.end.16

if.then:                                          ; preds = %sw.bb
  %13 = load i32, i32* %nAtts, align 4
  %14 = load i32, i32* %attsMax.addr, align 4
  %cmp9 = icmp slt i32 %13, %14
  br i1 %cmp9, label %if.then.11, label %if.end

if.then.11:                                       ; preds = %if.then
  %15 = load i8*, i8** %ptr.addr, align 8
  %16 = load i32, i32* %nAtts, align 4
  %idxprom12 = sext i32 %16 to i64
  %17 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx13 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %17, i64 %idxprom12
  %name = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx13, i32 0, i32 0
  store i8* %15, i8** %name, align 8
  %18 = load i32, i32* %nAtts, align 4
  %idxprom14 = sext i32 %18 to i64
  %19 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx15 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %19, i64 %idxprom14
  %normalized = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx15, i32 0, i32 3
  store i8 1, i8* %normalized, align 1
  br label %if.end

if.end:                                           ; preds = %if.then.11, %if.then
  store i32 1, i32* %state, align 4
  br label %if.end.16

if.end.16:                                        ; preds = %if.end, %sw.bb
  %20 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %20, i64 0
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.18:                                         ; preds = %cond.end
  %21 = load i32, i32* %state, align 4
  %cmp19 = icmp eq i32 %21, 0
  br i1 %cmp19, label %if.then.21, label %if.end.32

if.then.21:                                       ; preds = %sw.bb.18
  %22 = load i32, i32* %nAtts, align 4
  %23 = load i32, i32* %attsMax.addr, align 4
  %cmp22 = icmp slt i32 %22, %23
  br i1 %cmp22, label %if.then.24, label %if.end.31

if.then.24:                                       ; preds = %if.then.21
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i32, i32* %nAtts, align 4
  %idxprom25 = sext i32 %25 to i64
  %26 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx26 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %26, i64 %idxprom25
  %name27 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx26, i32 0, i32 0
  store i8* %24, i8** %name27, align 8
  %27 = load i32, i32* %nAtts, align 4
  %idxprom28 = sext i32 %27 to i64
  %28 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx29 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %28, i64 %idxprom28
  %normalized30 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx29, i32 0, i32 3
  store i8 1, i8* %normalized30, align 1
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.24, %if.then.21
  store i32 1, i32* %state, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.end.31, %sw.bb.18
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr33 = getelementptr i8, i8* %29, i64 1
  store i8* %add.ptr33, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.34:                                         ; preds = %cond.end
  %30 = load i32, i32* %state, align 4
  %cmp35 = icmp eq i32 %30, 0
  br i1 %cmp35, label %if.then.37, label %if.end.48

if.then.37:                                       ; preds = %sw.bb.34
  %31 = load i32, i32* %nAtts, align 4
  %32 = load i32, i32* %attsMax.addr, align 4
  %cmp38 = icmp slt i32 %31, %32
  br i1 %cmp38, label %if.then.40, label %if.end.47

if.then.40:                                       ; preds = %if.then.37
  %33 = load i8*, i8** %ptr.addr, align 8
  %34 = load i32, i32* %nAtts, align 4
  %idxprom41 = sext i32 %34 to i64
  %35 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx42 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %35, i64 %idxprom41
  %name43 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx42, i32 0, i32 0
  store i8* %33, i8** %name43, align 8
  %36 = load i32, i32* %nAtts, align 4
  %idxprom44 = sext i32 %36 to i64
  %37 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx45 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %37, i64 %idxprom44
  %normalized46 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx45, i32 0, i32 3
  store i8 1, i8* %normalized46, align 1
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.40, %if.then.37
  store i32 1, i32* %state, align 4
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %sw.bb.34
  %38 = load i8*, i8** %ptr.addr, align 8
  %add.ptr49 = getelementptr i8, i8* %38, i64 2
  store i8* %add.ptr49, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.50:                                         ; preds = %cond.end, %cond.end, %cond.end
  %39 = load i32, i32* %state, align 4
  %cmp51 = icmp eq i32 %39, 0
  br i1 %cmp51, label %if.then.53, label %if.end.64

if.then.53:                                       ; preds = %sw.bb.50
  %40 = load i32, i32* %nAtts, align 4
  %41 = load i32, i32* %attsMax.addr, align 4
  %cmp54 = icmp slt i32 %40, %41
  br i1 %cmp54, label %if.then.56, label %if.end.63

if.then.56:                                       ; preds = %if.then.53
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i32, i32* %nAtts, align 4
  %idxprom57 = sext i32 %43 to i64
  %44 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx58 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %44, i64 %idxprom57
  %name59 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx58, i32 0, i32 0
  store i8* %42, i8** %name59, align 8
  %45 = load i32, i32* %nAtts, align 4
  %idxprom60 = sext i32 %45 to i64
  %46 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx61 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %46, i64 %idxprom60
  %normalized62 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx61, i32 0, i32 3
  store i8 1, i8* %normalized62, align 1
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.56, %if.then.53
  store i32 1, i32* %state, align 4
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %sw.bb.50
  br label %sw.epilog

sw.bb.65:                                         ; preds = %cond.end
  %47 = load i32, i32* %state, align 4
  %cmp66 = icmp ne i32 %47, 2
  br i1 %cmp66, label %if.then.68, label %if.else

if.then.68:                                       ; preds = %sw.bb.65
  %48 = load i32, i32* %nAtts, align 4
  %49 = load i32, i32* %attsMax.addr, align 4
  %cmp69 = icmp slt i32 %48, %49
  br i1 %cmp69, label %if.then.71, label %if.end.75

if.then.71:                                       ; preds = %if.then.68
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr72 = getelementptr i8, i8* %50, i64 2
  %51 = load i32, i32* %nAtts, align 4
  %idxprom73 = sext i32 %51 to i64
  %52 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx74 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %52, i64 %idxprom73
  %valuePtr = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx74, i32 0, i32 1
  store i8* %add.ptr72, i8** %valuePtr, align 8
  br label %if.end.75

if.end.75:                                        ; preds = %if.then.71, %if.then.68
  store i32 2, i32* %state, align 4
  store i32 12, i32* %open, align 4
  br label %if.end.86

if.else:                                          ; preds = %sw.bb.65
  %53 = load i32, i32* %open, align 4
  %cmp76 = icmp eq i32 %53, 12
  br i1 %cmp76, label %if.then.78, label %if.end.85

if.then.78:                                       ; preds = %if.else
  store i32 0, i32* %state, align 4
  %54 = load i32, i32* %nAtts, align 4
  %55 = load i32, i32* %attsMax.addr, align 4
  %cmp79 = icmp slt i32 %54, %55
  br i1 %cmp79, label %if.then.81, label %if.end.84

if.then.81:                                       ; preds = %if.then.78
  %56 = load i8*, i8** %ptr.addr, align 8
  %57 = load i32, i32* %nAtts, align 4
  %idxprom82 = sext i32 %57 to i64
  %58 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx83 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %58, i64 %idxprom82
  %valueEnd = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx83, i32 0, i32 2
  store i8* %56, i8** %valueEnd, align 8
  br label %if.end.84

if.end.84:                                        ; preds = %if.then.81, %if.then.78
  %59 = load i32, i32* %nAtts, align 4
  %inc = add i32 %59, 1
  store i32 %inc, i32* %nAtts, align 4
  br label %if.end.85

if.end.85:                                        ; preds = %if.end.84, %if.else
  br label %if.end.86

if.end.86:                                        ; preds = %if.end.85, %if.end.75
  br label %sw.epilog

sw.bb.87:                                         ; preds = %cond.end
  %60 = load i32, i32* %state, align 4
  %cmp88 = icmp ne i32 %60, 2
  br i1 %cmp88, label %if.then.90, label %if.else.99

if.then.90:                                       ; preds = %sw.bb.87
  %61 = load i32, i32* %nAtts, align 4
  %62 = load i32, i32* %attsMax.addr, align 4
  %cmp91 = icmp slt i32 %61, %62
  br i1 %cmp91, label %if.then.93, label %if.end.98

if.then.93:                                       ; preds = %if.then.90
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr94 = getelementptr i8, i8* %63, i64 2
  %64 = load i32, i32* %nAtts, align 4
  %idxprom95 = sext i32 %64 to i64
  %65 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx96 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %65, i64 %idxprom95
  %valuePtr97 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx96, i32 0, i32 1
  store i8* %add.ptr94, i8** %valuePtr97, align 8
  br label %if.end.98

if.end.98:                                        ; preds = %if.then.93, %if.then.90
  store i32 2, i32* %state, align 4
  store i32 13, i32* %open, align 4
  br label %if.end.112

if.else.99:                                       ; preds = %sw.bb.87
  %66 = load i32, i32* %open, align 4
  %cmp100 = icmp eq i32 %66, 13
  br i1 %cmp100, label %if.then.102, label %if.end.111

if.then.102:                                      ; preds = %if.else.99
  store i32 0, i32* %state, align 4
  %67 = load i32, i32* %nAtts, align 4
  %68 = load i32, i32* %attsMax.addr, align 4
  %cmp103 = icmp slt i32 %67, %68
  br i1 %cmp103, label %if.then.105, label %if.end.109

if.then.105:                                      ; preds = %if.then.102
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i32, i32* %nAtts, align 4
  %idxprom106 = sext i32 %70 to i64
  %71 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx107 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %71, i64 %idxprom106
  %valueEnd108 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx107, i32 0, i32 2
  store i8* %69, i8** %valueEnd108, align 8
  br label %if.end.109

if.end.109:                                       ; preds = %if.then.105, %if.then.102
  %72 = load i32, i32* %nAtts, align 4
  %inc110 = add i32 %72, 1
  store i32 %inc110, i32* %nAtts, align 4
  br label %if.end.111

if.end.111:                                       ; preds = %if.end.109, %if.else.99
  br label %if.end.112

if.end.112:                                       ; preds = %if.end.111, %if.end.98
  br label %sw.epilog

sw.bb.113:                                        ; preds = %cond.end
  %73 = load i32, i32* %nAtts, align 4
  %74 = load i32, i32* %attsMax.addr, align 4
  %cmp114 = icmp slt i32 %73, %74
  br i1 %cmp114, label %if.then.116, label %if.end.120

if.then.116:                                      ; preds = %sw.bb.113
  %75 = load i32, i32* %nAtts, align 4
  %idxprom117 = sext i32 %75 to i64
  %76 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx118 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %76, i64 %idxprom117
  %normalized119 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx118, i32 0, i32 3
  store i8 0, i8* %normalized119, align 1
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.116, %sw.bb.113
  br label %sw.epilog

sw.bb.121:                                        ; preds = %cond.end
  %77 = load i32, i32* %state, align 4
  %cmp122 = icmp eq i32 %77, 1
  br i1 %cmp122, label %if.then.124, label %if.else.125

if.then.124:                                      ; preds = %sw.bb.121
  store i32 0, i32* %state, align 4
  br label %if.end.196

if.else.125:                                      ; preds = %sw.bb.121
  %78 = load i32, i32* %state, align 4
  %cmp126 = icmp eq i32 %78, 2
  br i1 %cmp126, label %land.lhs.true, label %if.end.195

land.lhs.true:                                    ; preds = %if.else.125
  %79 = load i32, i32* %nAtts, align 4
  %80 = load i32, i32* %attsMax.addr, align 4
  %cmp128 = icmp slt i32 %79, %80
  br i1 %cmp128, label %land.lhs.true.130, label %if.end.195

land.lhs.true.130:                                ; preds = %land.lhs.true
  %81 = load i32, i32* %nAtts, align 4
  %idxprom131 = sext i32 %81 to i64
  %82 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx132 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %82, i64 %idxprom131
  %normalized133 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx132, i32 0, i32 3
  %83 = load i8, i8* %normalized133, align 1
  %conv134 = sext i8 %83 to i32
  %tobool = icmp ne i32 %conv134, 0
  br i1 %tobool, label %land.lhs.true.135, label %if.end.195

land.lhs.true.135:                                ; preds = %land.lhs.true.130
  %84 = load i8*, i8** %ptr.addr, align 8
  %85 = load i32, i32* %nAtts, align 4
  %idxprom136 = sext i32 %85 to i64
  %86 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx137 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %86, i64 %idxprom136
  %valuePtr138 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx137, i32 0, i32 1
  %87 = load i8*, i8** %valuePtr138, align 8
  %cmp139 = icmp eq i8* %84, %87
  br i1 %cmp139, label %if.then.191, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.135
  %88 = load i8*, i8** %ptr.addr, align 8
  %arrayidx141 = getelementptr i8, i8* %88, i64 0
  %89 = load i8, i8* %arrayidx141, align 1
  %conv142 = sext i8 %89 to i32
  %cmp143 = icmp eq i32 %conv142, 0
  br i1 %cmp143, label %cond.true.145, label %cond.false.148

cond.true.145:                                    ; preds = %lor.lhs.false
  %90 = load i8*, i8** %ptr.addr, align 8
  %arrayidx146 = getelementptr i8, i8* %90, i64 1
  %91 = load i8, i8* %arrayidx146, align 1
  %conv147 = sext i8 %91 to i32
  br label %cond.end.149

cond.false.148:                                   ; preds = %lor.lhs.false
  br label %cond.end.149

cond.end.149:                                     ; preds = %cond.false.148, %cond.true.145
  %cond150 = phi i32 [ %conv147, %cond.true.145 ], [ -1, %cond.false.148 ]
  %cmp151 = icmp ne i32 %cond150, 32
  br i1 %cmp151, label %if.then.191, label %lor.lhs.false.153

lor.lhs.false.153:                                ; preds = %cond.end.149
  %92 = load i8*, i8** %ptr.addr, align 8
  %add.ptr154 = getelementptr i8, i8* %92, i64 2
  %arrayidx155 = getelementptr i8, i8* %add.ptr154, i64 0
  %93 = load i8, i8* %arrayidx155, align 1
  %conv156 = sext i8 %93 to i32
  %cmp157 = icmp eq i32 %conv156, 0
  br i1 %cmp157, label %cond.true.159, label %cond.false.163

cond.true.159:                                    ; preds = %lor.lhs.false.153
  %94 = load i8*, i8** %ptr.addr, align 8
  %add.ptr160 = getelementptr i8, i8* %94, i64 2
  %arrayidx161 = getelementptr i8, i8* %add.ptr160, i64 1
  %95 = load i8, i8* %arrayidx161, align 1
  %conv162 = sext i8 %95 to i32
  br label %cond.end.164

cond.false.163:                                   ; preds = %lor.lhs.false.153
  br label %cond.end.164

cond.end.164:                                     ; preds = %cond.false.163, %cond.true.159
  %cond165 = phi i32 [ %conv162, %cond.true.159 ], [ -1, %cond.false.163 ]
  %cmp166 = icmp eq i32 %cond165, 32
  br i1 %cmp166, label %if.then.191, label %lor.lhs.false.168

lor.lhs.false.168:                                ; preds = %cond.end.164
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr169 = getelementptr i8, i8* %96, i64 2
  %arrayidx170 = getelementptr i8, i8* %add.ptr169, i64 0
  %97 = load i8, i8* %arrayidx170, align 1
  %conv171 = sext i8 %97 to i32
  %cmp172 = icmp eq i32 %conv171, 0
  br i1 %cmp172, label %cond.true.174, label %cond.false.181

cond.true.174:                                    ; preds = %lor.lhs.false.168
  %98 = load i8*, i8** %ptr.addr, align 8
  %add.ptr175 = getelementptr i8, i8* %98, i64 2
  %arrayidx176 = getelementptr i8, i8* %add.ptr175, i64 1
  %99 = load i8, i8* %arrayidx176, align 1
  %idxprom177 = zext i8 %99 to i64
  %100 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %101 = bitcast %struct.encoding* %100 to %struct.normal_encoding*
  %type178 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %101, i32 0, i32 1
  %arrayidx179 = getelementptr [256 x i8], [256 x i8]* %type178, i32 0, i64 %idxprom177
  %102 = load i8, i8* %arrayidx179, align 1
  %conv180 = zext i8 %102 to i32
  br label %cond.end.187

cond.false.181:                                   ; preds = %lor.lhs.false.168
  %103 = load i8*, i8** %ptr.addr, align 8
  %add.ptr182 = getelementptr i8, i8* %103, i64 2
  %arrayidx183 = getelementptr i8, i8* %add.ptr182, i64 0
  %104 = load i8, i8* %arrayidx183, align 1
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr184 = getelementptr i8, i8* %105, i64 2
  %arrayidx185 = getelementptr i8, i8* %add.ptr184, i64 1
  %106 = load i8, i8* %arrayidx185, align 1
  %call186 = call i32 @unicode_byte_type(i8 signext %104, i8 signext %106)
  br label %cond.end.187

cond.end.187:                                     ; preds = %cond.false.181, %cond.true.174
  %cond188 = phi i32 [ %conv180, %cond.true.174 ], [ %call186, %cond.false.181 ]
  %107 = load i32, i32* %open, align 4
  %cmp189 = icmp eq i32 %cond188, %107
  br i1 %cmp189, label %if.then.191, label %if.end.195

if.then.191:                                      ; preds = %cond.end.187, %cond.end.164, %cond.end.149, %land.lhs.true.135
  %108 = load i32, i32* %nAtts, align 4
  %idxprom192 = sext i32 %108 to i64
  %109 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx193 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %109, i64 %idxprom192
  %normalized194 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx193, i32 0, i32 3
  store i8 0, i8* %normalized194, align 1
  br label %if.end.195

if.end.195:                                       ; preds = %if.then.191, %cond.end.187, %land.lhs.true.130, %land.lhs.true, %if.else.125
  br label %if.end.196

if.end.196:                                       ; preds = %if.end.195, %if.then.124
  br label %sw.epilog

sw.bb.197:                                        ; preds = %cond.end, %cond.end
  %110 = load i32, i32* %state, align 4
  %cmp198 = icmp eq i32 %110, 1
  br i1 %cmp198, label %if.then.200, label %if.else.201

if.then.200:                                      ; preds = %sw.bb.197
  store i32 0, i32* %state, align 4
  br label %if.end.212

if.else.201:                                      ; preds = %sw.bb.197
  %111 = load i32, i32* %state, align 4
  %cmp202 = icmp eq i32 %111, 2
  br i1 %cmp202, label %land.lhs.true.204, label %if.end.211

land.lhs.true.204:                                ; preds = %if.else.201
  %112 = load i32, i32* %nAtts, align 4
  %113 = load i32, i32* %attsMax.addr, align 4
  %cmp205 = icmp slt i32 %112, %113
  br i1 %cmp205, label %if.then.207, label %if.end.211

if.then.207:                                      ; preds = %land.lhs.true.204
  %114 = load i32, i32* %nAtts, align 4
  %idxprom208 = sext i32 %114 to i64
  %115 = load %struct.ATTRIBUTE*, %struct.ATTRIBUTE** %atts.addr, align 8
  %arrayidx209 = getelementptr %struct.ATTRIBUTE, %struct.ATTRIBUTE* %115, i64 %idxprom208
  %normalized210 = getelementptr inbounds %struct.ATTRIBUTE, %struct.ATTRIBUTE* %arrayidx209, i32 0, i32 3
  store i8 0, i8* %normalized210, align 1
  br label %if.end.211

if.end.211:                                       ; preds = %if.then.207, %land.lhs.true.204, %if.else.201
  br label %if.end.212

if.end.212:                                       ; preds = %if.end.211, %if.then.200
  br label %sw.epilog

sw.bb.213:                                        ; preds = %cond.end, %cond.end
  %116 = load i32, i32* %state, align 4
  %cmp214 = icmp ne i32 %116, 2
  br i1 %cmp214, label %if.then.216, label %if.end.217

if.then.216:                                      ; preds = %sw.bb.213
  %117 = load i32, i32* %nAtts, align 4
  ret i32 %117

if.end.217:                                       ; preds = %sw.bb.213
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.217, %if.end.212, %if.end.196, %if.end.120, %if.end.112, %if.end.86, %if.end.64, %if.end.48, %if.end.32, %if.end.16
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %118 = load i8*, i8** %ptr.addr, align 8
  %add.ptr218 = getelementptr i8, i8* %118, i64 2
  store i8* %add.ptr218, i8** %ptr.addr, align 8
  br label %for.cond
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_charRefNumber(%struct.encoding* %enc, i8* %ptr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %result = alloca i32, align 4
  %c = alloca i32, align 4
  %c47 = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 0, i32* %result, align 4
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 4
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %1, i64 0
  %2 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %2 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %3, i64 1
  %4 = load i8, i8* %arrayidx2, align 1
  %conv3 = sext i8 %4 to i32
  %cmp4 = icmp eq i32 %conv3, 120
  br i1 %cmp4, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %5 = load i8*, i8** %ptr.addr, align 8
  %add.ptr6 = getelementptr i8, i8* %5, i64 2
  store i8* %add.ptr6, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %6 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %7 to i32
  %cmp9 = icmp eq i32 %conv8, 0
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %9 to i32
  %cmp13 = icmp eq i32 %conv12, 59
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %10 = phi i1 [ false, %for.cond ], [ %cmp13, %land.rhs ]
  %lnot = xor i1 %10, true
  br i1 %lnot, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %12 to i32
  %cmp17 = icmp eq i32 %conv16, 0
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %14 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv20, %cond.true ], [ -1, %cond.false ]
  store i32 %cond, i32* %c, align 4
  %15 = load i32, i32* %c, align 4
  switch i32 %15, label %sw.epilog [
    i32 48, label %sw.bb
    i32 49, label %sw.bb
    i32 50, label %sw.bb
    i32 51, label %sw.bb
    i32 52, label %sw.bb
    i32 53, label %sw.bb
    i32 54, label %sw.bb
    i32 55, label %sw.bb
    i32 56, label %sw.bb
    i32 57, label %sw.bb
    i32 65, label %sw.bb.21
    i32 66, label %sw.bb.21
    i32 67, label %sw.bb.21
    i32 68, label %sw.bb.21
    i32 69, label %sw.bb.21
    i32 70, label %sw.bb.21
    i32 97, label %sw.bb.25
    i32 98, label %sw.bb.25
    i32 99, label %sw.bb.25
    i32 100, label %sw.bb.25
    i32 101, label %sw.bb.25
    i32 102, label %sw.bb.25
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %16 = load i32, i32* %result, align 4
  %shl = shl i32 %16, 4
  store i32 %shl, i32* %result, align 4
  %17 = load i32, i32* %c, align 4
  %sub = sub i32 %17, 48
  %18 = load i32, i32* %result, align 4
  %or = or i32 %18, %sub
  store i32 %or, i32* %result, align 4
  br label %sw.epilog

sw.bb.21:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %19 = load i32, i32* %result, align 4
  %shl22 = shl i32 %19, 4
  store i32 %shl22, i32* %result, align 4
  %20 = load i32, i32* %c, align 4
  %sub23 = sub i32 %20, 65
  %add = add i32 10, %sub23
  %21 = load i32, i32* %result, align 4
  %add24 = add i32 %21, %add
  store i32 %add24, i32* %result, align 4
  br label %sw.epilog

sw.bb.25:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  %22 = load i32, i32* %result, align 4
  %shl26 = shl i32 %22, 4
  store i32 %shl26, i32* %result, align 4
  %23 = load i32, i32* %c, align 4
  %sub27 = sub i32 %23, 97
  %add28 = add i32 10, %sub27
  %24 = load i32, i32* %result, align 4
  %add29 = add i32 %24, %add28
  store i32 %add29, i32* %result, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %cond.end, %sw.bb.25, %sw.bb.21, %sw.bb
  %25 = load i32, i32* %result, align 4
  %cmp30 = icmp sge i32 %25, 1114112
  br i1 %cmp30, label %if.then.32, label %if.end

if.then.32:                                       ; preds = %sw.epilog
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.epilog
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %26 = load i8*, i8** %ptr.addr, align 8
  %add.ptr33 = getelementptr i8, i8* %26, i64 2
  store i8* %add.ptr33, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end.67

if.else:                                          ; preds = %land.lhs.true, %entry
  br label %for.cond.34

for.cond.34:                                      ; preds = %for.inc.64, %if.else
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx35 = getelementptr i8, i8* %27, i64 0
  %28 = load i8, i8* %arrayidx35, align 1
  %conv36 = sext i8 %28 to i32
  %cmp37 = icmp eq i32 %conv36, 0
  br i1 %cmp37, label %land.rhs.39, label %land.end.44

land.rhs.39:                                      ; preds = %for.cond.34
  %29 = load i8*, i8** %ptr.addr, align 8
  %arrayidx40 = getelementptr i8, i8* %29, i64 1
  %30 = load i8, i8* %arrayidx40, align 1
  %conv41 = sext i8 %30 to i32
  %cmp42 = icmp eq i32 %conv41, 59
  br label %land.end.44

land.end.44:                                      ; preds = %land.rhs.39, %for.cond.34
  %31 = phi i1 [ false, %for.cond.34 ], [ %cmp42, %land.rhs.39 ]
  %lnot45 = xor i1 %31, true
  br i1 %lnot45, label %for.body.46, label %for.end.66

for.body.46:                                      ; preds = %land.end.44
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx48, align 1
  %conv49 = sext i8 %33 to i32
  %cmp50 = icmp eq i32 %conv49, 0
  br i1 %cmp50, label %cond.true.52, label %cond.false.55

cond.true.52:                                     ; preds = %for.body.46
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx53 = getelementptr i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %35 to i32
  br label %cond.end.56

cond.false.55:                                    ; preds = %for.body.46
  br label %cond.end.56

cond.end.56:                                      ; preds = %cond.false.55, %cond.true.52
  %cond57 = phi i32 [ %conv54, %cond.true.52 ], [ -1, %cond.false.55 ]
  store i32 %cond57, i32* %c47, align 4
  %36 = load i32, i32* %result, align 4
  %mul = mul i32 %36, 10
  store i32 %mul, i32* %result, align 4
  %37 = load i32, i32* %c47, align 4
  %sub58 = sub i32 %37, 48
  %38 = load i32, i32* %result, align 4
  %add59 = add i32 %38, %sub58
  store i32 %add59, i32* %result, align 4
  %39 = load i32, i32* %result, align 4
  %cmp60 = icmp sge i32 %39, 1114112
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %cond.end.56
  store i32 -1, i32* %retval
  br label %return

if.end.63:                                        ; preds = %cond.end.56
  br label %for.inc.64

for.inc.64:                                       ; preds = %if.end.63
  %40 = load i8*, i8** %ptr.addr, align 8
  %add.ptr65 = getelementptr i8, i8* %40, i64 2
  store i8* %add.ptr65, i8** %ptr.addr, align 8
  br label %for.cond.34

for.end.66:                                       ; preds = %land.end.44
  br label %if.end.67

if.end.67:                                        ; preds = %for.end.66, %for.end
  %41 = load i32, i32* %result, align 4
  %call = call i32 @checkCharRefNumber(i32 %41)
  store i32 %call, i32* %retval
  br label %return

return:                                           ; preds = %if.end.67, %if.then.62, %if.then.32
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_predefinedEntityName(%struct.encoding* %enc, i8* %ptr, i8* %end) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %div = sdiv i64 %sub.ptr.sub, 2
  switch i64 %div, label %sw.epilog.137 [
    i64 2, label %sw.bb
    i64 3, label %sw.bb.15
    i64 4, label %sw.bb.51
  ]

sw.bb:                                            ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %2, i64 2
  %arrayidx = getelementptr i8, i8* %add.ptr, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp = icmp eq i32 %conv, 0
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb
  %4 = load i8*, i8** %ptr.addr, align 8
  %add.ptr2 = getelementptr i8, i8* %4, i64 2
  %arrayidx3 = getelementptr i8, i8* %add.ptr2, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 116
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %6 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx7, align 1
  %conv8 = sext i8 %7 to i32
  %cmp9 = icmp eq i32 %conv8, 0
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %8, i64 1
  %9 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %9 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv12, %cond.true ], [ -1, %cond.false ]
  switch i32 %cond, label %sw.epilog [
    i32 108, label %sw.bb.13
    i32 103, label %sw.bb.14
  ]

sw.bb.13:                                         ; preds = %cond.end
  store i32 60, i32* %retval
  br label %return

sw.bb.14:                                         ; preds = %cond.end
  store i32 62, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %cond.end
  br label %if.end

if.end:                                           ; preds = %sw.epilog, %land.lhs.true, %sw.bb
  br label %sw.epilog.137

sw.bb.15:                                         ; preds = %entry
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx16, align 1
  %conv17 = sext i8 %11 to i32
  %cmp18 = icmp eq i32 %conv17, 0
  br i1 %cmp18, label %land.lhs.true.20, label %if.end.50

land.lhs.true.20:                                 ; preds = %sw.bb.15
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx21 = getelementptr i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %13 to i32
  %cmp23 = icmp eq i32 %conv22, 97
  br i1 %cmp23, label %if.then.25, label %if.end.50

if.then.25:                                       ; preds = %land.lhs.true.20
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr26 = getelementptr i8, i8* %14, i64 2
  store i8* %add.ptr26, i8** %ptr.addr, align 8
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx27 = getelementptr i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx27, align 1
  %conv28 = sext i8 %16 to i32
  %cmp29 = icmp eq i32 %conv28, 0
  br i1 %cmp29, label %land.lhs.true.31, label %if.end.49

land.lhs.true.31:                                 ; preds = %if.then.25
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx32 = getelementptr i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx32, align 1
  %conv33 = sext i8 %18 to i32
  %cmp34 = icmp eq i32 %conv33, 109
  br i1 %cmp34, label %if.then.36, label %if.end.49

if.then.36:                                       ; preds = %land.lhs.true.31
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr37, i8** %ptr.addr, align 8
  %20 = load i8*, i8** %ptr.addr, align 8
  %arrayidx38 = getelementptr i8, i8* %20, i64 0
  %21 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %21 to i32
  %cmp40 = icmp eq i32 %conv39, 0
  br i1 %cmp40, label %land.lhs.true.42, label %if.end.48

land.lhs.true.42:                                 ; preds = %if.then.36
  %22 = load i8*, i8** %ptr.addr, align 8
  %arrayidx43 = getelementptr i8, i8* %22, i64 1
  %23 = load i8, i8* %arrayidx43, align 1
  %conv44 = sext i8 %23 to i32
  %cmp45 = icmp eq i32 %conv44, 112
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %land.lhs.true.42
  store i32 38, i32* %retval
  br label %return

if.end.48:                                        ; preds = %land.lhs.true.42, %if.then.36
  br label %if.end.49

if.end.49:                                        ; preds = %if.end.48, %land.lhs.true.31, %if.then.25
  br label %if.end.50

if.end.50:                                        ; preds = %if.end.49, %land.lhs.true.20, %sw.bb.15
  br label %sw.epilog.137

sw.bb.51:                                         ; preds = %entry
  %24 = load i8*, i8** %ptr.addr, align 8
  %arrayidx52 = getelementptr i8, i8* %24, i64 0
  %25 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %25 to i32
  %cmp54 = icmp eq i32 %conv53, 0
  br i1 %cmp54, label %cond.true.56, label %cond.false.59

cond.true.56:                                     ; preds = %sw.bb.51
  %26 = load i8*, i8** %ptr.addr, align 8
  %arrayidx57 = getelementptr i8, i8* %26, i64 1
  %27 = load i8, i8* %arrayidx57, align 1
  %conv58 = sext i8 %27 to i32
  br label %cond.end.60

cond.false.59:                                    ; preds = %sw.bb.51
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.59, %cond.true.56
  %cond61 = phi i32 [ %conv58, %cond.true.56 ], [ -1, %cond.false.59 ]
  switch i32 %cond61, label %sw.epilog.136 [
    i32 113, label %sw.bb.62
    i32 97, label %sw.bb.99
  ]

sw.bb.62:                                         ; preds = %cond.end.60
  %28 = load i8*, i8** %ptr.addr, align 8
  %add.ptr63 = getelementptr i8, i8* %28, i64 2
  store i8* %add.ptr63, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %arrayidx64 = getelementptr i8, i8* %29, i64 0
  %30 = load i8, i8* %arrayidx64, align 1
  %conv65 = sext i8 %30 to i32
  %cmp66 = icmp eq i32 %conv65, 0
  br i1 %cmp66, label %land.lhs.true.68, label %if.end.98

land.lhs.true.68:                                 ; preds = %sw.bb.62
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx69 = getelementptr i8, i8* %31, i64 1
  %32 = load i8, i8* %arrayidx69, align 1
  %conv70 = sext i8 %32 to i32
  %cmp71 = icmp eq i32 %conv70, 117
  br i1 %cmp71, label %if.then.73, label %if.end.98

if.then.73:                                       ; preds = %land.lhs.true.68
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr74 = getelementptr i8, i8* %33, i64 2
  store i8* %add.ptr74, i8** %ptr.addr, align 8
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx75 = getelementptr i8, i8* %34, i64 0
  %35 = load i8, i8* %arrayidx75, align 1
  %conv76 = sext i8 %35 to i32
  %cmp77 = icmp eq i32 %conv76, 0
  br i1 %cmp77, label %land.lhs.true.79, label %if.end.97

land.lhs.true.79:                                 ; preds = %if.then.73
  %36 = load i8*, i8** %ptr.addr, align 8
  %arrayidx80 = getelementptr i8, i8* %36, i64 1
  %37 = load i8, i8* %arrayidx80, align 1
  %conv81 = sext i8 %37 to i32
  %cmp82 = icmp eq i32 %conv81, 111
  br i1 %cmp82, label %if.then.84, label %if.end.97

if.then.84:                                       ; preds = %land.lhs.true.79
  %38 = load i8*, i8** %ptr.addr, align 8
  %add.ptr85 = getelementptr i8, i8* %38, i64 2
  store i8* %add.ptr85, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %ptr.addr, align 8
  %arrayidx86 = getelementptr i8, i8* %39, i64 0
  %40 = load i8, i8* %arrayidx86, align 1
  %conv87 = sext i8 %40 to i32
  %cmp88 = icmp eq i32 %conv87, 0
  br i1 %cmp88, label %land.lhs.true.90, label %if.end.96

land.lhs.true.90:                                 ; preds = %if.then.84
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx91 = getelementptr i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx91, align 1
  %conv92 = sext i8 %42 to i32
  %cmp93 = icmp eq i32 %conv92, 116
  br i1 %cmp93, label %if.then.95, label %if.end.96

if.then.95:                                       ; preds = %land.lhs.true.90
  store i32 34, i32* %retval
  br label %return

if.end.96:                                        ; preds = %land.lhs.true.90, %if.then.84
  br label %if.end.97

if.end.97:                                        ; preds = %if.end.96, %land.lhs.true.79, %if.then.73
  br label %if.end.98

if.end.98:                                        ; preds = %if.end.97, %land.lhs.true.68, %sw.bb.62
  br label %sw.epilog.136

sw.bb.99:                                         ; preds = %cond.end.60
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr100 = getelementptr i8, i8* %43, i64 2
  store i8* %add.ptr100, i8** %ptr.addr, align 8
  %44 = load i8*, i8** %ptr.addr, align 8
  %arrayidx101 = getelementptr i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx101, align 1
  %conv102 = sext i8 %45 to i32
  %cmp103 = icmp eq i32 %conv102, 0
  br i1 %cmp103, label %land.lhs.true.105, label %if.end.135

land.lhs.true.105:                                ; preds = %sw.bb.99
  %46 = load i8*, i8** %ptr.addr, align 8
  %arrayidx106 = getelementptr i8, i8* %46, i64 1
  %47 = load i8, i8* %arrayidx106, align 1
  %conv107 = sext i8 %47 to i32
  %cmp108 = icmp eq i32 %conv107, 112
  br i1 %cmp108, label %if.then.110, label %if.end.135

if.then.110:                                      ; preds = %land.lhs.true.105
  %48 = load i8*, i8** %ptr.addr, align 8
  %add.ptr111 = getelementptr i8, i8* %48, i64 2
  store i8* %add.ptr111, i8** %ptr.addr, align 8
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx112 = getelementptr i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx112, align 1
  %conv113 = sext i8 %50 to i32
  %cmp114 = icmp eq i32 %conv113, 0
  br i1 %cmp114, label %land.lhs.true.116, label %if.end.134

land.lhs.true.116:                                ; preds = %if.then.110
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx117 = getelementptr i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx117, align 1
  %conv118 = sext i8 %52 to i32
  %cmp119 = icmp eq i32 %conv118, 111
  br i1 %cmp119, label %if.then.121, label %if.end.134

if.then.121:                                      ; preds = %land.lhs.true.116
  %53 = load i8*, i8** %ptr.addr, align 8
  %add.ptr122 = getelementptr i8, i8* %53, i64 2
  store i8* %add.ptr122, i8** %ptr.addr, align 8
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx123 = getelementptr i8, i8* %54, i64 0
  %55 = load i8, i8* %arrayidx123, align 1
  %conv124 = sext i8 %55 to i32
  %cmp125 = icmp eq i32 %conv124, 0
  br i1 %cmp125, label %land.lhs.true.127, label %if.end.133

land.lhs.true.127:                                ; preds = %if.then.121
  %56 = load i8*, i8** %ptr.addr, align 8
  %arrayidx128 = getelementptr i8, i8* %56, i64 1
  %57 = load i8, i8* %arrayidx128, align 1
  %conv129 = sext i8 %57 to i32
  %cmp130 = icmp eq i32 %conv129, 115
  br i1 %cmp130, label %if.then.132, label %if.end.133

if.then.132:                                      ; preds = %land.lhs.true.127
  store i32 39, i32* %retval
  br label %return

if.end.133:                                       ; preds = %land.lhs.true.127, %if.then.121
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %land.lhs.true.116, %if.then.110
  br label %if.end.135

if.end.135:                                       ; preds = %if.end.134, %land.lhs.true.105, %sw.bb.99
  br label %sw.epilog.136

sw.epilog.136:                                    ; preds = %cond.end.60, %if.end.135, %if.end.98
  br label %sw.epilog.137

sw.epilog.137:                                    ; preds = %sw.epilog.136, %entry, %if.end.50, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog.137, %if.then.132, %if.then.95, %if.then.47, %sw.bb.14, %sw.bb.13
  %58 = load i32, i32* %retval
  ret i32 %58
}

; Function Attrs: nounwind uwtable
define internal void @big2_updatePosition(%struct.encoding* %enc, i8* %ptr, i8* %end, %struct.position* %pos) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %pos.addr = alloca %struct.position*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store %struct.position* %pos, %struct.position** %pos.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.8
    i32 7, label %sw.bb.10
    i32 10, label %sw.bb.12
    i32 9, label %sw.bb.14
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %13, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.8:                                          ; preds = %cond.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr9 = getelementptr i8, i8* %14, i64 3
  store i8* %add.ptr9, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %cond.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr11 = getelementptr i8, i8* %15, i64 4
  store i8* %add.ptr11, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.12:                                         ; preds = %cond.end
  %16 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber = getelementptr inbounds %struct.position, %struct.position* %16, i32 0, i32 1
  store i64 -1, i64* %columnNumber, align 8
  %17 = load %struct.position*, %struct.position** %pos.addr, align 8
  %lineNumber = getelementptr inbounds %struct.position, %struct.position* %17, i32 0, i32 0
  %18 = load i64, i64* %lineNumber, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %lineNumber, align 8
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr13 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr13, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.14:                                         ; preds = %cond.end
  %20 = load %struct.position*, %struct.position** %pos.addr, align 8
  %lineNumber15 = getelementptr inbounds %struct.position, %struct.position* %20, i32 0, i32 0
  %21 = load i64, i64* %lineNumber15, align 8
  %inc16 = add i64 %21, 1
  store i64 %inc16, i64* %lineNumber15, align 8
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr17 = getelementptr i8, i8* %22, i64 2
  store i8* %add.ptr17, i8** %ptr.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8*, i8** %end.addr, align 8
  %cmp18 = icmp ne i8* %23, %24
  br i1 %cmp18, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.14
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx20 = getelementptr i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx20, align 1
  %conv21 = sext i8 %26 to i32
  %cmp22 = icmp eq i32 %conv21, 0
  br i1 %cmp22, label %cond.true.24, label %cond.false.30

cond.true.24:                                     ; preds = %land.lhs.true
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx25 = getelementptr i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx25, align 1
  %idxprom26 = zext i8 %28 to i64
  %29 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %30 = bitcast %struct.encoding* %29 to %struct.normal_encoding*
  %type27 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %30, i32 0, i32 1
  %arrayidx28 = getelementptr [256 x i8], [256 x i8]* %type27, i32 0, i64 %idxprom26
  %31 = load i8, i8* %arrayidx28, align 1
  %conv29 = zext i8 %31 to i32
  br label %cond.end.34

cond.false.30:                                    ; preds = %land.lhs.true
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx31 = getelementptr i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx31, align 1
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx32 = getelementptr i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx32, align 1
  %call33 = call i32 @unicode_byte_type(i8 signext %33, i8 signext %35)
  br label %cond.end.34

cond.end.34:                                      ; preds = %cond.false.30, %cond.true.24
  %cond35 = phi i32 [ %conv29, %cond.true.24 ], [ %call33, %cond.false.30 ]
  %cmp36 = icmp eq i32 %cond35, 10
  br i1 %cmp36, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.34
  %36 = load i8*, i8** %ptr.addr, align 8
  %add.ptr38 = getelementptr i8, i8* %36, i64 2
  store i8* %add.ptr38, i8** %ptr.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end.34, %sw.bb.14
  %37 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber39 = getelementptr inbounds %struct.position, %struct.position* %37, i32 0, i32 1
  store i64 -1, i64* %columnNumber39, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %38 = load i8*, i8** %ptr.addr, align 8
  %add.ptr40 = getelementptr i8, i8* %38, i64 2
  store i8* %add.ptr40, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end, %sw.bb.12, %sw.bb.10, %sw.bb.8, %sw.bb
  %39 = load %struct.position*, %struct.position** %pos.addr, align 8
  %columnNumber41 = getelementptr inbounds %struct.position, %struct.position* %39, i32 0, i32 1
  %40 = load i64, i64* %columnNumber41, align 8
  %inc42 = add i64 %40, 1
  store i64 %inc42, i64* %columnNumber41, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_isPublicId(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %badPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %badPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %badPtr, i8*** %badPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %0, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %add.ptr1 = getelementptr i8, i8* %1, i64 -2
  store i8* %add.ptr1, i8** %end.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 0
  %5 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %5 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %6 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx4, align 1
  %idxprom = zext i8 %7 to i64
  %8 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %9 = bitcast %struct.encoding* %8 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %9, i32 0, i32 1
  %arrayidx5 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %10 = load i8, i8* %arrayidx5, align 1
  %conv6 = zext i8 %10 to i32
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx7, align 1
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx8, align 1
  %call = call i32 @unicode_byte_type(i8 signext %12, i8 signext %14)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv6, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 25, label %sw.bb
    i32 24, label %sw.bb
    i32 27, label %sw.bb
    i32 13, label %sw.bb
    i32 31, label %sw.bb
    i32 32, label %sw.bb
    i32 34, label %sw.bb
    i32 35, label %sw.bb
    i32 17, label %sw.bb
    i32 14, label %sw.bb
    i32 15, label %sw.bb
    i32 9, label %sw.bb
    i32 10, label %sw.bb
    i32 18, label %sw.bb
    i32 16, label %sw.bb
    i32 33, label %sw.bb
    i32 30, label %sw.bb
    i32 19, label %sw.bb
    i32 23, label %sw.bb
    i32 21, label %sw.bb.9
    i32 26, label %sw.bb.18
    i32 22, label %sw.bb.18
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %cond.end
  br label %sw.epilog.43

sw.bb.9:                                          ; preds = %cond.end
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx10 = getelementptr i8, i8* %15, i64 0
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %16 to i32
  %cmp12 = icmp eq i32 %conv11, 0
  br i1 %cmp12, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.bb.9
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx14 = getelementptr i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx14, align 1
  %conv15 = sext i8 %18 to i32
  %cmp16 = icmp eq i32 %conv15, 9
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %19 = load i8*, i8** %ptr.addr, align 8
  %20 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %19, i8** %20, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.bb.9
  br label %sw.epilog.43

sw.bb.18:                                         ; preds = %cond.end, %cond.end
  %21 = load i8*, i8** %ptr.addr, align 8
  %arrayidx19 = getelementptr i8, i8* %21, i64 0
  %22 = load i8, i8* %arrayidx19, align 1
  %conv20 = sext i8 %22 to i32
  %cmp21 = icmp eq i32 %conv20, 0
  br i1 %cmp21, label %cond.true.23, label %cond.false.26

cond.true.23:                                     ; preds = %sw.bb.18
  %23 = load i8*, i8** %ptr.addr, align 8
  %arrayidx24 = getelementptr i8, i8* %23, i64 1
  %24 = load i8, i8* %arrayidx24, align 1
  %conv25 = sext i8 %24 to i32
  br label %cond.end.27

cond.false.26:                                    ; preds = %sw.bb.18
  br label %cond.end.27

cond.end.27:                                      ; preds = %cond.false.26, %cond.true.23
  %cond28 = phi i32 [ %conv25, %cond.true.23 ], [ -1, %cond.false.26 ]
  %and = and i32 %cond28, -128
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %cond.end.27
  br label %sw.epilog.43

if.end.30:                                        ; preds = %cond.end.27
  br label %sw.default

sw.default:                                       ; preds = %cond.end, %if.end.30
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx31 = getelementptr i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx31, align 1
  %conv32 = sext i8 %26 to i32
  %cmp33 = icmp eq i32 %conv32, 0
  br i1 %cmp33, label %cond.true.35, label %cond.false.38

cond.true.35:                                     ; preds = %sw.default
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx36 = getelementptr i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx36, align 1
  %conv37 = sext i8 %28 to i32
  br label %cond.end.39

cond.false.38:                                    ; preds = %sw.default
  br label %cond.end.39

cond.end.39:                                      ; preds = %cond.false.38, %cond.true.35
  %cond40 = phi i32 [ %conv37, %cond.true.35 ], [ -1, %cond.false.38 ]
  switch i32 %cond40, label %sw.default.42 [
    i32 36, label %sw.bb.41
    i32 64, label %sw.bb.41
  ]

sw.bb.41:                                         ; preds = %cond.end.39, %cond.end.39
  br label %sw.epilog

sw.default.42:                                    ; preds = %cond.end.39
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8**, i8*** %badPtr.addr, align 8
  store i8* %29, i8** %30, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.41
  br label %sw.epilog.43

sw.epilog.43:                                     ; preds = %sw.epilog, %if.then.29, %if.end, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.43
  %31 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %31, i64 2
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.default.42, %if.then
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: nounwind uwtable
define internal void @big2_toUtf8(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i8** %toP, i8* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i8**, align 8
  %toLim.addr = alloca i8*, align 8
  %from = alloca i8*, align 8
  %plane = alloca i32, align 4
  %lo2 = alloca i8, align 1
  %lo = alloca i8, align 1
  %hi = alloca i8, align 1
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i8** %toP, i8*** %toP.addr, align 8
  store i8* %toLim, i8** %toLim.addr, align 8
  %0 = load i8**, i8*** %fromP.addr, align 8
  %1 = load i8*, i8** %0, align 8
  store i8* %1, i8** %from, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i8*, i8** %from, align 8
  %3 = load i8*, i8** %fromLim.addr, align 8
  %cmp = icmp ne i8* %2, %3
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %from, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx, align 1
  store i8 %5, i8* %lo, align 1
  %6 = load i8*, i8** %from, align 8
  %arrayidx1 = getelementptr i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx1, align 1
  store i8 %7, i8* %hi, align 1
  %8 = load i8, i8* %hi, align 1
  %conv = zext i8 %8 to i32
  switch i32 %conv, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb.9
    i32 2, label %sw.bb.9
    i32 3, label %sw.bb.9
    i32 4, label %sw.bb.9
    i32 5, label %sw.bb.9
    i32 6, label %sw.bb.9
    i32 7, label %sw.bb.9
    i32 216, label %sw.bb.49
    i32 217, label %sw.bb.49
    i32 218, label %sw.bb.49
    i32 219, label %sw.bb.49
  ]

sw.bb:                                            ; preds = %for.body
  %9 = load i8, i8* %lo, align 1
  %conv2 = zext i8 %9 to i32
  %cmp3 = icmp slt i32 %conv2, 128
  br i1 %cmp3, label %if.then, label %if.end.8

if.then:                                          ; preds = %sw.bb
  %10 = load i8**, i8*** %toP.addr, align 8
  %11 = load i8*, i8** %10, align 8
  %12 = load i8*, i8** %toLim.addr, align 8
  %cmp5 = icmp eq i8* %11, %12
  br i1 %cmp5, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then
  %13 = load i8*, i8** %from, align 8
  %14 = load i8**, i8*** %fromP.addr, align 8
  store i8* %13, i8** %14, align 8
  br label %return

if.end:                                           ; preds = %if.then
  %15 = load i8, i8* %lo, align 1
  %16 = load i8**, i8*** %toP.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %incdec.ptr = getelementptr i8, i8* %17, i32 1
  store i8* %incdec.ptr, i8** %16, align 8
  store i8 %15, i8* %17, align 1
  br label %sw.epilog

if.end.8:                                         ; preds = %sw.bb
  br label %sw.bb.9

sw.bb.9:                                          ; preds = %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %for.body, %if.end.8
  %18 = load i8*, i8** %toLim.addr, align 8
  %19 = load i8**, i8*** %toP.addr, align 8
  %20 = load i8*, i8** %19, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %18 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %20 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp10 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %sw.bb.9
  %21 = load i8*, i8** %from, align 8
  %22 = load i8**, i8*** %fromP.addr, align 8
  store i8* %21, i8** %22, align 8
  br label %return

if.end.13:                                        ; preds = %sw.bb.9
  %23 = load i8, i8* %lo, align 1
  %conv14 = zext i8 %23 to i32
  %shr = ashr i32 %conv14, 6
  %24 = load i8, i8* %hi, align 1
  %conv15 = zext i8 %24 to i32
  %shl = shl i32 %conv15, 2
  %or = or i32 %shr, %shl
  %or16 = or i32 %or, 192
  %conv17 = trunc i32 %or16 to i8
  %25 = load i8**, i8*** %toP.addr, align 8
  %26 = load i8*, i8** %25, align 8
  %incdec.ptr18 = getelementptr i8, i8* %26, i32 1
  store i8* %incdec.ptr18, i8** %25, align 8
  store i8 %conv17, i8* %26, align 1
  %27 = load i8, i8* %lo, align 1
  %conv19 = zext i8 %27 to i32
  %and = and i32 %conv19, 63
  %or20 = or i32 %and, 128
  %conv21 = trunc i32 %or20 to i8
  %28 = load i8**, i8*** %toP.addr, align 8
  %29 = load i8*, i8** %28, align 8
  %incdec.ptr22 = getelementptr i8, i8* %29, i32 1
  store i8* %incdec.ptr22, i8** %28, align 8
  store i8 %conv21, i8* %29, align 1
  br label %sw.epilog

sw.default:                                       ; preds = %for.body
  %30 = load i8*, i8** %toLim.addr, align 8
  %31 = load i8**, i8*** %toP.addr, align 8
  %32 = load i8*, i8** %31, align 8
  %sub.ptr.lhs.cast23 = ptrtoint i8* %30 to i64
  %sub.ptr.rhs.cast24 = ptrtoint i8* %32 to i64
  %sub.ptr.sub25 = sub i64 %sub.ptr.lhs.cast23, %sub.ptr.rhs.cast24
  %cmp26 = icmp slt i64 %sub.ptr.sub25, 3
  br i1 %cmp26, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %sw.default
  %33 = load i8*, i8** %from, align 8
  %34 = load i8**, i8*** %fromP.addr, align 8
  store i8* %33, i8** %34, align 8
  br label %return

if.end.29:                                        ; preds = %sw.default
  %35 = load i8, i8* %hi, align 1
  %conv30 = zext i8 %35 to i32
  %shr31 = ashr i32 %conv30, 4
  %or32 = or i32 %shr31, 224
  %conv33 = trunc i32 %or32 to i8
  %36 = load i8**, i8*** %toP.addr, align 8
  %37 = load i8*, i8** %36, align 8
  %incdec.ptr34 = getelementptr i8, i8* %37, i32 1
  store i8* %incdec.ptr34, i8** %36, align 8
  store i8 %conv33, i8* %37, align 1
  %38 = load i8, i8* %hi, align 1
  %conv35 = zext i8 %38 to i32
  %and36 = and i32 %conv35, 15
  %shl37 = shl i32 %and36, 2
  %39 = load i8, i8* %lo, align 1
  %conv38 = zext i8 %39 to i32
  %shr39 = ashr i32 %conv38, 6
  %or40 = or i32 %shl37, %shr39
  %or41 = or i32 %or40, 128
  %conv42 = trunc i32 %or41 to i8
  %40 = load i8**, i8*** %toP.addr, align 8
  %41 = load i8*, i8** %40, align 8
  %incdec.ptr43 = getelementptr i8, i8* %41, i32 1
  store i8* %incdec.ptr43, i8** %40, align 8
  store i8 %conv42, i8* %41, align 1
  %42 = load i8, i8* %lo, align 1
  %conv44 = zext i8 %42 to i32
  %and45 = and i32 %conv44, 63
  %or46 = or i32 %and45, 128
  %conv47 = trunc i32 %or46 to i8
  %43 = load i8**, i8*** %toP.addr, align 8
  %44 = load i8*, i8** %43, align 8
  %incdec.ptr48 = getelementptr i8, i8* %44, i32 1
  store i8* %incdec.ptr48, i8** %43, align 8
  store i8 %conv47, i8* %44, align 1
  br label %sw.epilog

sw.bb.49:                                         ; preds = %for.body, %for.body, %for.body, %for.body
  %45 = load i8*, i8** %toLim.addr, align 8
  %46 = load i8**, i8*** %toP.addr, align 8
  %47 = load i8*, i8** %46, align 8
  %sub.ptr.lhs.cast50 = ptrtoint i8* %45 to i64
  %sub.ptr.rhs.cast51 = ptrtoint i8* %47 to i64
  %sub.ptr.sub52 = sub i64 %sub.ptr.lhs.cast50, %sub.ptr.rhs.cast51
  %cmp53 = icmp slt i64 %sub.ptr.sub52, 4
  br i1 %cmp53, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %sw.bb.49
  %48 = load i8*, i8** %from, align 8
  %49 = load i8**, i8*** %fromP.addr, align 8
  store i8* %48, i8** %49, align 8
  br label %return

if.end.56:                                        ; preds = %sw.bb.49
  %50 = load i8, i8* %hi, align 1
  %conv57 = zext i8 %50 to i32
  %and58 = and i32 %conv57, 3
  %shl59 = shl i32 %and58, 2
  %51 = load i8, i8* %lo, align 1
  %conv60 = zext i8 %51 to i32
  %shr61 = ashr i32 %conv60, 6
  %and62 = and i32 %shr61, 3
  %or63 = or i32 %shl59, %and62
  %add = add i32 %or63, 1
  store i32 %add, i32* %plane, align 4
  %52 = load i32, i32* %plane, align 4
  %shr64 = ashr i32 %52, 2
  %or65 = or i32 %shr64, 240
  %conv66 = trunc i32 %or65 to i8
  %53 = load i8**, i8*** %toP.addr, align 8
  %54 = load i8*, i8** %53, align 8
  %incdec.ptr67 = getelementptr i8, i8* %54, i32 1
  store i8* %incdec.ptr67, i8** %53, align 8
  store i8 %conv66, i8* %54, align 1
  %55 = load i8, i8* %lo, align 1
  %conv68 = zext i8 %55 to i32
  %shr69 = ashr i32 %conv68, 2
  %and70 = and i32 %shr69, 15
  %56 = load i32, i32* %plane, align 4
  %and71 = and i32 %56, 3
  %shl72 = shl i32 %and71, 4
  %or73 = or i32 %and70, %shl72
  %or74 = or i32 %or73, 128
  %conv75 = trunc i32 %or74 to i8
  %57 = load i8**, i8*** %toP.addr, align 8
  %58 = load i8*, i8** %57, align 8
  %incdec.ptr76 = getelementptr i8, i8* %58, i32 1
  store i8* %incdec.ptr76, i8** %57, align 8
  store i8 %conv75, i8* %58, align 1
  %59 = load i8*, i8** %from, align 8
  %add.ptr = getelementptr i8, i8* %59, i64 2
  store i8* %add.ptr, i8** %from, align 8
  %60 = load i8*, i8** %from, align 8
  %arrayidx77 = getelementptr i8, i8* %60, i64 1
  %61 = load i8, i8* %arrayidx77, align 1
  store i8 %61, i8* %lo2, align 1
  %62 = load i8, i8* %lo, align 1
  %conv78 = zext i8 %62 to i32
  %and79 = and i32 %conv78, 3
  %shl80 = shl i32 %and79, 4
  %63 = load i8*, i8** %from, align 8
  %arrayidx81 = getelementptr i8, i8* %63, i64 0
  %64 = load i8, i8* %arrayidx81, align 1
  %conv82 = zext i8 %64 to i32
  %and83 = and i32 %conv82, 3
  %shl84 = shl i32 %and83, 2
  %or85 = or i32 %shl80, %shl84
  %65 = load i8, i8* %lo2, align 1
  %conv86 = zext i8 %65 to i32
  %shr87 = ashr i32 %conv86, 6
  %or88 = or i32 %or85, %shr87
  %or89 = or i32 %or88, 128
  %conv90 = trunc i32 %or89 to i8
  %66 = load i8**, i8*** %toP.addr, align 8
  %67 = load i8*, i8** %66, align 8
  %incdec.ptr91 = getelementptr i8, i8* %67, i32 1
  store i8* %incdec.ptr91, i8** %66, align 8
  store i8 %conv90, i8* %67, align 1
  %68 = load i8, i8* %lo2, align 1
  %conv92 = zext i8 %68 to i32
  %and93 = and i32 %conv92, 63
  %or94 = or i32 %and93, 128
  %conv95 = trunc i32 %or94 to i8
  %69 = load i8**, i8*** %toP.addr, align 8
  %70 = load i8*, i8** %69, align 8
  %incdec.ptr96 = getelementptr i8, i8* %70, i32 1
  store i8* %incdec.ptr96, i8** %69, align 8
  store i8 %conv95, i8* %70, align 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.56, %if.end.29, %if.end.13, %if.end
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %71 = load i8*, i8** %from, align 8
  %add.ptr97 = getelementptr i8, i8* %71, i64 2
  store i8* %add.ptr97, i8** %from, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %72 = load i8*, i8** %from, align 8
  %73 = load i8**, i8*** %fromP.addr, align 8
  store i8* %72, i8** %73, align 8
  br label %return

return:                                           ; preds = %for.end, %if.then.55, %if.then.28, %if.then.12, %if.then.7
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @big2_toUtf16(%struct.encoding* %enc, i8** %fromP, i8* %fromLim, i16** %toP, i16* %toLim) #0 {
entry:
  %enc.addr = alloca %struct.encoding*, align 8
  %fromP.addr = alloca i8**, align 8
  %fromLim.addr = alloca i8*, align 8
  %toP.addr = alloca i16**, align 8
  %toLim.addr = alloca i16*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8** %fromP, i8*** %fromP.addr, align 8
  store i8* %fromLim, i8** %fromLim.addr, align 8
  store i16** %toP, i16*** %toP.addr, align 8
  store i16* %toLim, i16** %toLim.addr, align 8
  %0 = load i8*, i8** %fromLim.addr, align 8
  %1 = load i8**, i8*** %fromP.addr, align 8
  %2 = load i8*, i8** %1, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %3 = load i16*, i16** %toLim.addr, align 8
  %4 = load i16**, i16*** %toP.addr, align 8
  %5 = load i16*, i16** %4, align 8
  %sub.ptr.lhs.cast1 = ptrtoint i16* %3 to i64
  %sub.ptr.rhs.cast2 = ptrtoint i16* %5 to i64
  %sub.ptr.sub3 = sub i64 %sub.ptr.lhs.cast1, %sub.ptr.rhs.cast2
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub3, 2
  %shl = shl i64 %sub.ptr.div, 1
  %cmp = icmp sgt i64 %sub.ptr.sub, %shl
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %6 = load i8*, i8** %fromLim.addr, align 8
  %add.ptr = getelementptr i8, i8* %6, i64 -2
  %arrayidx = getelementptr i8, i8* %add.ptr, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  %conv = zext i8 %7 to i32
  %and = and i32 %conv, 248
  %cmp4 = icmp eq i32 %and, 216
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %8 = load i8*, i8** %fromLim.addr, align 8
  %add.ptr6 = getelementptr i8, i8* %8, i64 -2
  store i8* %add.ptr6, i8** %fromLim.addr, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i8**, i8*** %fromP.addr, align 8
  %10 = load i8*, i8** %9, align 8
  %11 = load i8*, i8** %fromLim.addr, align 8
  %cmp7 = icmp ne i8* %10, %11
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %12 = load i16**, i16*** %toP.addr, align 8
  %13 = load i16*, i16** %12, align 8
  %14 = load i16*, i16** %toLim.addr, align 8
  %cmp9 = icmp ne i16* %13, %14
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %15 = phi i1 [ false, %for.cond ], [ %cmp9, %land.rhs ]
  br i1 %15, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %16 = load i8**, i8*** %fromP.addr, align 8
  %17 = load i8*, i8** %16, align 8
  %arrayidx11 = getelementptr i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx11, align 1
  %conv12 = zext i8 %18 to i32
  %shl13 = shl i32 %conv12, 8
  %19 = load i8**, i8*** %fromP.addr, align 8
  %20 = load i8*, i8** %19, align 8
  %arrayidx14 = getelementptr i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx14, align 1
  %conv15 = zext i8 %21 to i32
  %or = or i32 %shl13, %conv15
  %conv16 = trunc i32 %or to i16
  %22 = load i16**, i16*** %toP.addr, align 8
  %23 = load i16*, i16** %22, align 8
  %incdec.ptr = getelementptr i16, i16* %23, i32 1
  store i16* %incdec.ptr, i16** %22, align 8
  store i16 %conv16, i16* %23, align 2
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %24 = load i8**, i8*** %fromP.addr, align 8
  %25 = load i8*, i8** %24, align 8
  %add.ptr17 = getelementptr i8, i8* %25, i64 2
  store i8* %add.ptr17, i8** %24, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanLit(i32 %open, %struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %open.addr = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %t = alloca i32, align 4
  store i32 %open, i32* %open.addr, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  store i32 %cond, i32* %t, align 4
  %13 = load i32, i32* %t, align 4
  switch i32 %13, label %sw.default.56 [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.10
    i32 7, label %sw.bb.19
    i32 0, label %sw.bb.28
    i32 1, label %sw.bb.28
    i32 8, label %sw.bb.28
    i32 12, label %sw.bb.29
    i32 13, label %sw.bb.29
  ]

sw.bb:                                            ; preds = %cond.end
  %14 = load i8*, i8** %end.addr, align 8
  %15 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %15 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp8 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  %16 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %16, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.10:                                         ; preds = %cond.end
  %17 = load i8*, i8** %end.addr, align 8
  %18 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast11 = ptrtoint i8* %17 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %18 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %cmp14 = icmp slt i64 %sub.ptr.sub13, 3
  br i1 %cmp14, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %sw.bb.10
  store i32 -2, i32* %retval
  br label %return

if.end.17:                                        ; preds = %sw.bb.10
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr18 = getelementptr i8, i8* %19, i64 3
  store i8* %add.ptr18, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.19:                                         ; preds = %cond.end
  %20 = load i8*, i8** %end.addr, align 8
  %21 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast20 = ptrtoint i8* %20 to i64
  %sub.ptr.rhs.cast21 = ptrtoint i8* %21 to i64
  %sub.ptr.sub22 = sub i64 %sub.ptr.lhs.cast20, %sub.ptr.rhs.cast21
  %cmp23 = icmp slt i64 %sub.ptr.sub22, 4
  br i1 %cmp23, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %sw.bb.19
  store i32 -2, i32* %retval
  br label %return

if.end.26:                                        ; preds = %sw.bb.19
  %22 = load i8*, i8** %ptr.addr, align 8
  %add.ptr27 = getelementptr i8, i8* %22, i64 4
  store i8* %add.ptr27, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.28:                                         ; preds = %cond.end, %cond.end, %cond.end
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %23, i8** %24, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.29:                                         ; preds = %cond.end, %cond.end
  %25 = load i8*, i8** %ptr.addr, align 8
  %add.ptr30 = getelementptr i8, i8* %25, i64 2
  store i8* %add.ptr30, i8** %ptr.addr, align 8
  %26 = load i32, i32* %t, align 4
  %27 = load i32, i32* %open.addr, align 4
  %cmp31 = icmp ne i32 %26, %27
  br i1 %cmp31, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %sw.bb.29
  br label %sw.epilog

if.end.34:                                        ; preds = %sw.bb.29
  %28 = load i8*, i8** %ptr.addr, align 8
  %29 = load i8*, i8** %end.addr, align 8
  %cmp35 = icmp eq i8* %28, %29
  br i1 %cmp35, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %if.end.34
  store i32 -27, i32* %retval
  br label %return

if.end.38:                                        ; preds = %if.end.34
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  %32 = load i8*, i8** %ptr.addr, align 8
  %arrayidx39 = getelementptr i8, i8* %32, i64 0
  %33 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %33 to i32
  %cmp41 = icmp eq i32 %conv40, 0
  br i1 %cmp41, label %cond.true.43, label %cond.false.49

cond.true.43:                                     ; preds = %if.end.38
  %34 = load i8*, i8** %ptr.addr, align 8
  %arrayidx44 = getelementptr i8, i8* %34, i64 1
  %35 = load i8, i8* %arrayidx44, align 1
  %idxprom45 = zext i8 %35 to i64
  %36 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %37 = bitcast %struct.encoding* %36 to %struct.normal_encoding*
  %type46 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %37, i32 0, i32 1
  %arrayidx47 = getelementptr [256 x i8], [256 x i8]* %type46, i32 0, i64 %idxprom45
  %38 = load i8, i8* %arrayidx47, align 1
  %conv48 = zext i8 %38 to i32
  br label %cond.end.53

cond.false.49:                                    ; preds = %if.end.38
  %39 = load i8*, i8** %ptr.addr, align 8
  %arrayidx50 = getelementptr i8, i8* %39, i64 0
  %40 = load i8, i8* %arrayidx50, align 1
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx51 = getelementptr i8, i8* %41, i64 1
  %42 = load i8, i8* %arrayidx51, align 1
  %call52 = call i32 @unicode_byte_type(i8 signext %40, i8 signext %42)
  br label %cond.end.53

cond.end.53:                                      ; preds = %cond.false.49, %cond.true.43
  %cond54 = phi i32 [ %conv48, %cond.true.43 ], [ %call52, %cond.false.49 ]
  switch i32 %cond54, label %sw.default [
    i32 21, label %sw.bb.55
    i32 9, label %sw.bb.55
    i32 10, label %sw.bb.55
    i32 11, label %sw.bb.55
    i32 30, label %sw.bb.55
    i32 20, label %sw.bb.55
  ]

sw.bb.55:                                         ; preds = %cond.end.53, %cond.end.53, %cond.end.53, %cond.end.53, %cond.end.53, %cond.end.53
  store i32 27, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end.53
  store i32 0, i32* %retval
  br label %return

sw.default.56:                                    ; preds = %cond.end
  %43 = load i8*, i8** %ptr.addr, align 8
  %add.ptr57 = getelementptr i8, i8* %43, i64 2
  store i8* %add.ptr57, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default.56, %if.then.33, %if.end.26, %if.end.17, %if.end
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default, %sw.bb.55, %if.then.37, %sw.bb.28, %if.then.25, %if.then.16, %if.then
  %44 = load i32, i32* %retval
  ret i32 %44
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanDecl(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 27, label %sw.bb
    i32 20, label %sw.bb.9
    i32 22, label %sw.bb.11
    i32 24, label %sw.bb.11
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %14 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %14, i64 2
  %15 = load i8*, i8** %end.addr, align 8
  %16 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call8 = call i32 @big2_scanComment(%struct.encoding* %13, i8* %add.ptr, i8* %15, i8** %16)
  store i32 %call8, i32* %retval
  br label %return

sw.bb.9:                                          ; preds = %cond.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %add.ptr10 = getelementptr i8, i8* %17, i64 2
  %18 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr10, i8** %18, align 8
  store i32 33, i32* %retval
  br label %return

sw.bb.11:                                         ; preds = %cond.end, %cond.end
  %19 = load i8*, i8** %ptr.addr, align 8
  %add.ptr12 = getelementptr i8, i8* %19, i64 2
  store i8* %add.ptr12, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %20 = load i8*, i8** %ptr.addr, align 8
  %21 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %20, i8** %21, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.11
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.63, %sw.epilog
  %22 = load i8*, i8** %ptr.addr, align 8
  %23 = load i8*, i8** %end.addr, align 8
  %cmp13 = icmp ne i8* %22, %23
  br i1 %cmp13, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %24 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %24, i64 0
  %25 = load i8, i8* %arrayidx15, align 1
  %conv16 = sext i8 %25 to i32
  %cmp17 = icmp eq i32 %conv16, 0
  br i1 %cmp17, label %cond.true.19, label %cond.false.25

cond.true.19:                                     ; preds = %while.body
  %26 = load i8*, i8** %ptr.addr, align 8
  %arrayidx20 = getelementptr i8, i8* %26, i64 1
  %27 = load i8, i8* %arrayidx20, align 1
  %idxprom21 = zext i8 %27 to i64
  %28 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %29 = bitcast %struct.encoding* %28 to %struct.normal_encoding*
  %type22 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %29, i32 0, i32 1
  %arrayidx23 = getelementptr [256 x i8], [256 x i8]* %type22, i32 0, i64 %idxprom21
  %30 = load i8, i8* %arrayidx23, align 1
  %conv24 = zext i8 %30 to i32
  br label %cond.end.29

cond.false.25:                                    ; preds = %while.body
  %31 = load i8*, i8** %ptr.addr, align 8
  %arrayidx26 = getelementptr i8, i8* %31, i64 0
  %32 = load i8, i8* %arrayidx26, align 1
  %33 = load i8*, i8** %ptr.addr, align 8
  %arrayidx27 = getelementptr i8, i8* %33, i64 1
  %34 = load i8, i8* %arrayidx27, align 1
  %call28 = call i32 @unicode_byte_type(i8 signext %32, i8 signext %34)
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.25, %cond.true.19
  %cond30 = phi i32 [ %conv24, %cond.true.19 ], [ %call28, %cond.false.25 ]
  switch i32 %cond30, label %sw.default.62 [
    i32 30, label %sw.bb.31
    i32 21, label %sw.bb.59
    i32 9, label %sw.bb.59
    i32 10, label %sw.bb.59
    i32 22, label %sw.bb.60
    i32 24, label %sw.bb.60
  ]

sw.bb.31:                                         ; preds = %cond.end.29
  %35 = load i8*, i8** %ptr.addr, align 8
  %add.ptr32 = getelementptr i8, i8* %35, i64 2
  %36 = load i8*, i8** %end.addr, align 8
  %cmp33 = icmp eq i8* %add.ptr32, %36
  br i1 %cmp33, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %sw.bb.31
  store i32 -1, i32* %retval
  br label %return

if.end.36:                                        ; preds = %sw.bb.31
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr37 = getelementptr i8, i8* %37, i64 2
  %arrayidx38 = getelementptr i8, i8* %add.ptr37, i64 0
  %38 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %38 to i32
  %cmp40 = icmp eq i32 %conv39, 0
  br i1 %cmp40, label %cond.true.42, label %cond.false.49

cond.true.42:                                     ; preds = %if.end.36
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr43 = getelementptr i8, i8* %39, i64 2
  %arrayidx44 = getelementptr i8, i8* %add.ptr43, i64 1
  %40 = load i8, i8* %arrayidx44, align 1
  %idxprom45 = zext i8 %40 to i64
  %41 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %42 = bitcast %struct.encoding* %41 to %struct.normal_encoding*
  %type46 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %42, i32 0, i32 1
  %arrayidx47 = getelementptr [256 x i8], [256 x i8]* %type46, i32 0, i64 %idxprom45
  %43 = load i8, i8* %arrayidx47, align 1
  %conv48 = zext i8 %43 to i32
  br label %cond.end.55

cond.false.49:                                    ; preds = %if.end.36
  %44 = load i8*, i8** %ptr.addr, align 8
  %add.ptr50 = getelementptr i8, i8* %44, i64 2
  %arrayidx51 = getelementptr i8, i8* %add.ptr50, i64 0
  %45 = load i8, i8* %arrayidx51, align 1
  %46 = load i8*, i8** %ptr.addr, align 8
  %add.ptr52 = getelementptr i8, i8* %46, i64 2
  %arrayidx53 = getelementptr i8, i8* %add.ptr52, i64 1
  %47 = load i8, i8* %arrayidx53, align 1
  %call54 = call i32 @unicode_byte_type(i8 signext %45, i8 signext %47)
  br label %cond.end.55

cond.end.55:                                      ; preds = %cond.false.49, %cond.true.42
  %cond56 = phi i32 [ %conv48, %cond.true.42 ], [ %call54, %cond.false.49 ]
  switch i32 %cond56, label %sw.epilog.58 [
    i32 21, label %sw.bb.57
    i32 9, label %sw.bb.57
    i32 10, label %sw.bb.57
    i32 30, label %sw.bb.57
  ]

sw.bb.57:                                         ; preds = %cond.end.55, %cond.end.55, %cond.end.55, %cond.end.55
  %48 = load i8*, i8** %ptr.addr, align 8
  %49 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %48, i8** %49, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.58:                                     ; preds = %cond.end.55
  br label %sw.bb.59

sw.bb.59:                                         ; preds = %cond.end.29, %cond.end.29, %cond.end.29, %sw.epilog.58
  %50 = load i8*, i8** %ptr.addr, align 8
  %51 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %50, i8** %51, align 8
  store i32 16, i32* %retval
  br label %return

sw.bb.60:                                         ; preds = %cond.end.29, %cond.end.29
  %52 = load i8*, i8** %ptr.addr, align 8
  %add.ptr61 = getelementptr i8, i8* %52, i64 2
  store i8* %add.ptr61, i8** %ptr.addr, align 8
  br label %sw.epilog.63

sw.default.62:                                    ; preds = %cond.end.29
  %53 = load i8*, i8** %ptr.addr, align 8
  %54 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %53, i8** %54, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.63:                                     ; preds = %sw.bb.60
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.62, %sw.bb.59, %sw.bb.57, %if.then.35, %sw.default, %sw.bb.9, %sw.bb, %if.then
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanPi(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %tok = alloca i32, align 4
  %target = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  store i8* %0, i8** %target, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %1, %2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %6 to i64
  %7 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %8 = bitcast %struct.encoding* %7 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %8, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %9 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %9 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx6, align 1
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %11, i8 signext %13)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.22
    i32 24, label %sw.bb.22
    i32 5, label %sw.bb.23
    i32 6, label %sw.bb.28
    i32 7, label %sw.bb.36
  ]

sw.bb:                                            ; preds = %cond.end
  %14 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %14, i64 0
  %15 = load i8, i8* %arrayidx8, align 1
  %idxprom9 = zext i8 %15 to i64
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom9
  %16 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %16 to i32
  %shl = shl i32 %conv11, 3
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %17, i64 1
  %18 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %18 to i32
  %shr = ashr i32 %conv13, 5
  %add = add i32 %shl, %shr
  %idxprom14 = sext i32 %add to i64
  %arrayidx15 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom14
  %19 = load i32, i32* %arrayidx15, align 4
  %20 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %21 to i32
  %and = and i32 %conv17, 31
  %shl18 = shl i32 1, %and
  %and19 = and i32 %19, %shl18
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %sw.bb
  %22 = load i8*, i8** %ptr.addr, align 8
  %23 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %22, i8** %23, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %cond.end, %cond.end, %if.end.21
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %24, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %cond.end
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %26 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp24 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.23
  %27 = load i8*, i8** %ptr.addr, align 8
  %28 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %27, i8** %28, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %cond.end
  %29 = load i8*, i8** %end.addr, align 8
  %30 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast29 = ptrtoint i8* %29 to i64
  %sub.ptr.rhs.cast30 = ptrtoint i8* %30 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %cmp32 = icmp slt i64 %sub.ptr.sub31, 3
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %sw.bb.28
  store i32 -2, i32* %retval
  br label %return

if.end.35:                                        ; preds = %sw.bb.28
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %31, i8** %32, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %cond.end
  %33 = load i8*, i8** %end.addr, align 8
  %34 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i8* %33 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %34 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %cmp40 = icmp slt i64 %sub.ptr.sub39, 4
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.36
  store i32 -2, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.36
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %35, i8** %36, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.22
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.205, %sw.epilog
  %39 = load i8*, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %end.addr, align 8
  %cmp44 = icmp ne i8* %39, %40
  br i1 %cmp44, label %while.body, label %while.end.206

while.body:                                       ; preds = %while.cond
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx46 = getelementptr i8, i8* %41, i64 0
  %42 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %42 to i32
  %cmp48 = icmp eq i32 %conv47, 0
  br i1 %cmp48, label %cond.true.50, label %cond.false.56

cond.true.50:                                     ; preds = %while.body
  %43 = load i8*, i8** %ptr.addr, align 8
  %arrayidx51 = getelementptr i8, i8* %43, i64 1
  %44 = load i8, i8* %arrayidx51, align 1
  %idxprom52 = zext i8 %44 to i64
  %45 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %46 = bitcast %struct.encoding* %45 to %struct.normal_encoding*
  %type53 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %46, i32 0, i32 1
  %arrayidx54 = getelementptr [256 x i8], [256 x i8]* %type53, i32 0, i64 %idxprom52
  %47 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %47 to i32
  br label %cond.end.60

cond.false.56:                                    ; preds = %while.body
  %48 = load i8*, i8** %ptr.addr, align 8
  %arrayidx57 = getelementptr i8, i8* %48, i64 0
  %49 = load i8, i8* %arrayidx57, align 1
  %50 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %50, i64 1
  %51 = load i8, i8* %arrayidx58, align 1
  %call59 = call i32 @unicode_byte_type(i8 signext %49, i8 signext %51)
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.56, %cond.true.50
  %cond61 = phi i32 [ %conv55, %cond.true.50 ], [ %call59, %cond.false.56 ]
  switch i32 %cond61, label %sw.default.204 [
    i32 29, label %sw.bb.62
    i32 22, label %sw.bb.82
    i32 24, label %sw.bb.82
    i32 25, label %sw.bb.82
    i32 26, label %sw.bb.82
    i32 27, label %sw.bb.82
    i32 5, label %sw.bb.84
    i32 6, label %sw.bb.92
    i32 7, label %sw.bb.100
    i32 21, label %sw.bb.108
    i32 9, label %sw.bb.108
    i32 10, label %sw.bb.108
    i32 15, label %sw.bb.182
  ]

sw.bb.62:                                         ; preds = %cond.end.60
  %52 = load i8*, i8** %ptr.addr, align 8
  %arrayidx63 = getelementptr i8, i8* %52, i64 0
  %53 = load i8, i8* %arrayidx63, align 1
  %idxprom64 = zext i8 %53 to i64
  %arrayidx65 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom64
  %54 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %54 to i32
  %shl67 = shl i32 %conv66, 3
  %55 = load i8*, i8** %ptr.addr, align 8
  %arrayidx68 = getelementptr i8, i8* %55, i64 1
  %56 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %56 to i32
  %shr70 = ashr i32 %conv69, 5
  %add71 = add i32 %shl67, %shr70
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom72
  %57 = load i32, i32* %arrayidx73, align 4
  %58 = load i8*, i8** %ptr.addr, align 8
  %arrayidx74 = getelementptr i8, i8* %58, i64 1
  %59 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %59 to i32
  %and76 = and i32 %conv75, 31
  %shl77 = shl i32 1, %and76
  %and78 = and i32 %57, %shl77
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.end.81, label %if.then.80

if.then.80:                                       ; preds = %sw.bb.62
  %60 = load i8*, i8** %ptr.addr, align 8
  %61 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %60, i8** %61, align 8
  store i32 0, i32* %retval
  br label %return

if.end.81:                                        ; preds = %sw.bb.62
  br label %sw.bb.82

sw.bb.82:                                         ; preds = %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %if.end.81
  %62 = load i8*, i8** %ptr.addr, align 8
  %add.ptr83 = getelementptr i8, i8* %62, i64 2
  store i8* %add.ptr83, i8** %ptr.addr, align 8
  br label %sw.epilog.205

sw.bb.84:                                         ; preds = %cond.end.60
  %63 = load i8*, i8** %end.addr, align 8
  %64 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast85 = ptrtoint i8* %63 to i64
  %sub.ptr.rhs.cast86 = ptrtoint i8* %64 to i64
  %sub.ptr.sub87 = sub i64 %sub.ptr.lhs.cast85, %sub.ptr.rhs.cast86
  %cmp88 = icmp slt i64 %sub.ptr.sub87, 2
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %sw.bb.84
  store i32 -2, i32* %retval
  br label %return

if.end.91:                                        ; preds = %sw.bb.84
  %65 = load i8*, i8** %ptr.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %65, i8** %66, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.92:                                         ; preds = %cond.end.60
  %67 = load i8*, i8** %end.addr, align 8
  %68 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast93 = ptrtoint i8* %67 to i64
  %sub.ptr.rhs.cast94 = ptrtoint i8* %68 to i64
  %sub.ptr.sub95 = sub i64 %sub.ptr.lhs.cast93, %sub.ptr.rhs.cast94
  %cmp96 = icmp slt i64 %sub.ptr.sub95, 3
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %sw.bb.92
  store i32 -2, i32* %retval
  br label %return

if.end.99:                                        ; preds = %sw.bb.92
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %69, i8** %70, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.100:                                        ; preds = %cond.end.60
  %71 = load i8*, i8** %end.addr, align 8
  %72 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast101 = ptrtoint i8* %71 to i64
  %sub.ptr.rhs.cast102 = ptrtoint i8* %72 to i64
  %sub.ptr.sub103 = sub i64 %sub.ptr.lhs.cast101, %sub.ptr.rhs.cast102
  %cmp104 = icmp slt i64 %sub.ptr.sub103, 4
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %sw.bb.100
  store i32 -2, i32* %retval
  br label %return

if.end.107:                                       ; preds = %sw.bb.100
  %73 = load i8*, i8** %ptr.addr, align 8
  %74 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %73, i8** %74, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.108:                                        ; preds = %cond.end.60, %cond.end.60, %cond.end.60
  %75 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %76 = load i8*, i8** %target, align 8
  %77 = load i8*, i8** %ptr.addr, align 8
  %call109 = call i32 @big2_checkPiTarget(%struct.encoding* %75, i8* %76, i8* %77, i32* %tok)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.end.112, label %if.then.111

if.then.111:                                      ; preds = %sw.bb.108
  %78 = load i8*, i8** %ptr.addr, align 8
  %79 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %78, i8** %79, align 8
  store i32 0, i32* %retval
  br label %return

if.end.112:                                       ; preds = %sw.bb.108
  %80 = load i8*, i8** %ptr.addr, align 8
  %add.ptr113 = getelementptr i8, i8* %80, i64 2
  store i8* %add.ptr113, i8** %ptr.addr, align 8
  br label %while.cond.114

while.cond.114:                                   ; preds = %sw.epilog.181, %if.end.112
  %81 = load i8*, i8** %ptr.addr, align 8
  %82 = load i8*, i8** %end.addr, align 8
  %cmp115 = icmp ne i8* %81, %82
  br i1 %cmp115, label %while.body.117, label %while.end

while.body.117:                                   ; preds = %while.cond.114
  %83 = load i8*, i8** %ptr.addr, align 8
  %arrayidx118 = getelementptr i8, i8* %83, i64 0
  %84 = load i8, i8* %arrayidx118, align 1
  %conv119 = sext i8 %84 to i32
  %cmp120 = icmp eq i32 %conv119, 0
  br i1 %cmp120, label %cond.true.122, label %cond.false.128

cond.true.122:                                    ; preds = %while.body.117
  %85 = load i8*, i8** %ptr.addr, align 8
  %arrayidx123 = getelementptr i8, i8* %85, i64 1
  %86 = load i8, i8* %arrayidx123, align 1
  %idxprom124 = zext i8 %86 to i64
  %87 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %88 = bitcast %struct.encoding* %87 to %struct.normal_encoding*
  %type125 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %88, i32 0, i32 1
  %arrayidx126 = getelementptr [256 x i8], [256 x i8]* %type125, i32 0, i64 %idxprom124
  %89 = load i8, i8* %arrayidx126, align 1
  %conv127 = zext i8 %89 to i32
  br label %cond.end.132

cond.false.128:                                   ; preds = %while.body.117
  %90 = load i8*, i8** %ptr.addr, align 8
  %arrayidx129 = getelementptr i8, i8* %90, i64 0
  %91 = load i8, i8* %arrayidx129, align 1
  %92 = load i8*, i8** %ptr.addr, align 8
  %arrayidx130 = getelementptr i8, i8* %92, i64 1
  %93 = load i8, i8* %arrayidx130, align 1
  %call131 = call i32 @unicode_byte_type(i8 signext %91, i8 signext %93)
  br label %cond.end.132

cond.end.132:                                     ; preds = %cond.false.128, %cond.true.122
  %cond133 = phi i32 [ %conv127, %cond.true.122 ], [ %call131, %cond.false.128 ]
  switch i32 %cond133, label %sw.default.179 [
    i32 5, label %sw.bb.134
    i32 6, label %sw.bb.143
    i32 7, label %sw.bb.152
    i32 0, label %sw.bb.161
    i32 1, label %sw.bb.161
    i32 8, label %sw.bb.161
    i32 15, label %sw.bb.162
  ]

sw.bb.134:                                        ; preds = %cond.end.132
  %94 = load i8*, i8** %end.addr, align 8
  %95 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast135 = ptrtoint i8* %94 to i64
  %sub.ptr.rhs.cast136 = ptrtoint i8* %95 to i64
  %sub.ptr.sub137 = sub i64 %sub.ptr.lhs.cast135, %sub.ptr.rhs.cast136
  %cmp138 = icmp slt i64 %sub.ptr.sub137, 2
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %sw.bb.134
  store i32 -2, i32* %retval
  br label %return

if.end.141:                                       ; preds = %sw.bb.134
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr142 = getelementptr i8, i8* %96, i64 2
  store i8* %add.ptr142, i8** %ptr.addr, align 8
  br label %sw.epilog.181

sw.bb.143:                                        ; preds = %cond.end.132
  %97 = load i8*, i8** %end.addr, align 8
  %98 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast144 = ptrtoint i8* %97 to i64
  %sub.ptr.rhs.cast145 = ptrtoint i8* %98 to i64
  %sub.ptr.sub146 = sub i64 %sub.ptr.lhs.cast144, %sub.ptr.rhs.cast145
  %cmp147 = icmp slt i64 %sub.ptr.sub146, 3
  br i1 %cmp147, label %if.then.149, label %if.end.150

if.then.149:                                      ; preds = %sw.bb.143
  store i32 -2, i32* %retval
  br label %return

if.end.150:                                       ; preds = %sw.bb.143
  %99 = load i8*, i8** %ptr.addr, align 8
  %add.ptr151 = getelementptr i8, i8* %99, i64 3
  store i8* %add.ptr151, i8** %ptr.addr, align 8
  br label %sw.epilog.181

sw.bb.152:                                        ; preds = %cond.end.132
  %100 = load i8*, i8** %end.addr, align 8
  %101 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast153 = ptrtoint i8* %100 to i64
  %sub.ptr.rhs.cast154 = ptrtoint i8* %101 to i64
  %sub.ptr.sub155 = sub i64 %sub.ptr.lhs.cast153, %sub.ptr.rhs.cast154
  %cmp156 = icmp slt i64 %sub.ptr.sub155, 4
  br i1 %cmp156, label %if.then.158, label %if.end.159

if.then.158:                                      ; preds = %sw.bb.152
  store i32 -2, i32* %retval
  br label %return

if.end.159:                                       ; preds = %sw.bb.152
  %102 = load i8*, i8** %ptr.addr, align 8
  %add.ptr160 = getelementptr i8, i8* %102, i64 4
  store i8* %add.ptr160, i8** %ptr.addr, align 8
  br label %sw.epilog.181

sw.bb.161:                                        ; preds = %cond.end.132, %cond.end.132, %cond.end.132
  %103 = load i8*, i8** %ptr.addr, align 8
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %103, i8** %104, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.162:                                        ; preds = %cond.end.132
  %105 = load i8*, i8** %ptr.addr, align 8
  %add.ptr163 = getelementptr i8, i8* %105, i64 2
  store i8* %add.ptr163, i8** %ptr.addr, align 8
  %106 = load i8*, i8** %ptr.addr, align 8
  %107 = load i8*, i8** %end.addr, align 8
  %cmp164 = icmp eq i8* %106, %107
  br i1 %cmp164, label %if.then.166, label %if.end.167

if.then.166:                                      ; preds = %sw.bb.162
  store i32 -1, i32* %retval
  br label %return

if.end.167:                                       ; preds = %sw.bb.162
  %108 = load i8*, i8** %ptr.addr, align 8
  %arrayidx168 = getelementptr i8, i8* %108, i64 0
  %109 = load i8, i8* %arrayidx168, align 1
  %conv169 = sext i8 %109 to i32
  %cmp170 = icmp eq i32 %conv169, 0
  br i1 %cmp170, label %land.lhs.true, label %if.end.178

land.lhs.true:                                    ; preds = %if.end.167
  %110 = load i8*, i8** %ptr.addr, align 8
  %arrayidx172 = getelementptr i8, i8* %110, i64 1
  %111 = load i8, i8* %arrayidx172, align 1
  %conv173 = sext i8 %111 to i32
  %cmp174 = icmp eq i32 %conv173, 62
  br i1 %cmp174, label %if.then.176, label %if.end.178

if.then.176:                                      ; preds = %land.lhs.true
  %112 = load i8*, i8** %ptr.addr, align 8
  %add.ptr177 = getelementptr i8, i8* %112, i64 2
  %113 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr177, i8** %113, align 8
  %114 = load i32, i32* %tok, align 4
  store i32 %114, i32* %retval
  br label %return

if.end.178:                                       ; preds = %land.lhs.true, %if.end.167
  br label %sw.epilog.181

sw.default.179:                                   ; preds = %cond.end.132
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr180 = getelementptr i8, i8* %115, i64 2
  store i8* %add.ptr180, i8** %ptr.addr, align 8
  br label %sw.epilog.181

sw.epilog.181:                                    ; preds = %sw.default.179, %if.end.178, %if.end.159, %if.end.150, %if.end.141
  br label %while.cond.114

while.end:                                        ; preds = %while.cond.114
  store i32 -1, i32* %retval
  br label %return

sw.bb.182:                                        ; preds = %cond.end.60
  %116 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %117 = load i8*, i8** %target, align 8
  %118 = load i8*, i8** %ptr.addr, align 8
  %call183 = call i32 @big2_checkPiTarget(%struct.encoding* %116, i8* %117, i8* %118, i32* %tok)
  %tobool184 = icmp ne i32 %call183, 0
  br i1 %tobool184, label %if.end.186, label %if.then.185

if.then.185:                                      ; preds = %sw.bb.182
  %119 = load i8*, i8** %ptr.addr, align 8
  %120 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %119, i8** %120, align 8
  store i32 0, i32* %retval
  br label %return

if.end.186:                                       ; preds = %sw.bb.182
  %121 = load i8*, i8** %ptr.addr, align 8
  %add.ptr187 = getelementptr i8, i8* %121, i64 2
  store i8* %add.ptr187, i8** %ptr.addr, align 8
  %122 = load i8*, i8** %ptr.addr, align 8
  %123 = load i8*, i8** %end.addr, align 8
  %cmp188 = icmp eq i8* %122, %123
  br i1 %cmp188, label %if.then.190, label %if.end.191

if.then.190:                                      ; preds = %if.end.186
  store i32 -1, i32* %retval
  br label %return

if.end.191:                                       ; preds = %if.end.186
  %124 = load i8*, i8** %ptr.addr, align 8
  %arrayidx192 = getelementptr i8, i8* %124, i64 0
  %125 = load i8, i8* %arrayidx192, align 1
  %conv193 = sext i8 %125 to i32
  %cmp194 = icmp eq i32 %conv193, 0
  br i1 %cmp194, label %land.lhs.true.196, label %if.end.203

land.lhs.true.196:                                ; preds = %if.end.191
  %126 = load i8*, i8** %ptr.addr, align 8
  %arrayidx197 = getelementptr i8, i8* %126, i64 1
  %127 = load i8, i8* %arrayidx197, align 1
  %conv198 = sext i8 %127 to i32
  %cmp199 = icmp eq i32 %conv198, 62
  br i1 %cmp199, label %if.then.201, label %if.end.203

if.then.201:                                      ; preds = %land.lhs.true.196
  %128 = load i8*, i8** %ptr.addr, align 8
  %add.ptr202 = getelementptr i8, i8* %128, i64 2
  %129 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr202, i8** %129, align 8
  %130 = load i32, i32* %tok, align 4
  store i32 %130, i32* %retval
  br label %return

if.end.203:                                       ; preds = %land.lhs.true.196, %if.end.191
  br label %sw.default.204

sw.default.204:                                   ; preds = %cond.end.60, %if.end.203
  %131 = load i8*, i8** %ptr.addr, align 8
  %132 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %131, i8** %132, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.205:                                    ; preds = %sw.bb.82
  br label %while.cond

while.end.206:                                    ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end.206, %sw.default.204, %if.then.201, %if.then.190, %if.then.185, %while.end, %if.then.176, %if.then.166, %sw.bb.161, %if.then.158, %if.then.149, %if.then.140, %if.then.111, %if.end.107, %if.then.106, %if.end.99, %if.then.98, %if.end.91, %if.then.90, %if.then.80, %sw.default, %if.end.43, %if.then.42, %if.end.35, %if.then.34, %if.end.27, %if.then.26, %if.then.20, %if.then
  %133 = load i32, i32* %retval
  ret i32 %133
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanPercent(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.22
    i32 24, label %sw.bb.22
    i32 5, label %sw.bb.23
    i32 6, label %sw.bb.28
    i32 7, label %sw.bb.36
    i32 21, label %sw.bb.44
    i32 10, label %sw.bb.44
    i32 9, label %sw.bb.44
    i32 30, label %sw.bb.44
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx8, align 1
  %idxprom9 = zext i8 %14 to i64
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  %shl = shl i32 %conv11, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %17 to i32
  %shr = ashr i32 %conv13, 5
  %add = add i32 %shl, %shr
  %idxprom14 = sext i32 %add to i64
  %arrayidx15 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom14
  %18 = load i32, i32* %arrayidx15, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %20 to i32
  %and = and i32 %conv17, 31
  %shl18 = shl i32 1, %and
  %and19 = and i32 %18, %shl18
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %cond.end, %cond.end, %if.end.21
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp24 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.23
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast29 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast30 = ptrtoint i8* %29 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %cmp32 = icmp slt i64 %sub.ptr.sub31, 3
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %sw.bb.28
  store i32 -2, i32* %retval
  br label %return

if.end.35:                                        ; preds = %sw.bb.28
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %33 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %cmp40 = icmp slt i64 %sub.ptr.sub39, 4
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.36
  store i32 -2, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.36
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %36, i8** %37, align 8
  store i32 22, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %38, i8** %39, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.22
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.112, %sw.epilog
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp45 = icmp ne i8* %40, %41
  br i1 %cmp45, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx47 = getelementptr i8, i8* %42, i64 0
  %43 = load i8, i8* %arrayidx47, align 1
  %conv48 = sext i8 %43 to i32
  %cmp49 = icmp eq i32 %conv48, 0
  br i1 %cmp49, label %cond.true.51, label %cond.false.57

cond.true.51:                                     ; preds = %while.body
  %44 = load i8*, i8** %ptr.addr, align 8
  %arrayidx52 = getelementptr i8, i8* %44, i64 1
  %45 = load i8, i8* %arrayidx52, align 1
  %idxprom53 = zext i8 %45 to i64
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = bitcast %struct.encoding* %46 to %struct.normal_encoding*
  %type54 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %47, i32 0, i32 1
  %arrayidx55 = getelementptr [256 x i8], [256 x i8]* %type54, i32 0, i64 %idxprom53
  %48 = load i8, i8* %arrayidx55, align 1
  %conv56 = zext i8 %48 to i32
  br label %cond.end.61

cond.false.57:                                    ; preds = %while.body
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx58, align 1
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx59 = getelementptr i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx59, align 1
  %call60 = call i32 @unicode_byte_type(i8 signext %50, i8 signext %52)
  br label %cond.end.61

cond.end.61:                                      ; preds = %cond.false.57, %cond.true.51
  %cond62 = phi i32 [ %conv56, %cond.true.51 ], [ %call60, %cond.false.57 ]
  switch i32 %cond62, label %sw.default.111 [
    i32 29, label %sw.bb.63
    i32 22, label %sw.bb.83
    i32 24, label %sw.bb.83
    i32 25, label %sw.bb.83
    i32 26, label %sw.bb.83
    i32 27, label %sw.bb.83
    i32 5, label %sw.bb.85
    i32 6, label %sw.bb.93
    i32 7, label %sw.bb.101
    i32 18, label %sw.bb.109
  ]

sw.bb.63:                                         ; preds = %cond.end.61
  %53 = load i8*, i8** %ptr.addr, align 8
  %arrayidx64 = getelementptr i8, i8* %53, i64 0
  %54 = load i8, i8* %arrayidx64, align 1
  %idxprom65 = zext i8 %54 to i64
  %arrayidx66 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom65
  %55 = load i8, i8* %arrayidx66, align 1
  %conv67 = zext i8 %55 to i32
  %shl68 = shl i32 %conv67, 3
  %56 = load i8*, i8** %ptr.addr, align 8
  %arrayidx69 = getelementptr i8, i8* %56, i64 1
  %57 = load i8, i8* %arrayidx69, align 1
  %conv70 = zext i8 %57 to i32
  %shr71 = ashr i32 %conv70, 5
  %add72 = add i32 %shl68, %shr71
  %idxprom73 = sext i32 %add72 to i64
  %arrayidx74 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom73
  %58 = load i32, i32* %arrayidx74, align 4
  %59 = load i8*, i8** %ptr.addr, align 8
  %arrayidx75 = getelementptr i8, i8* %59, i64 1
  %60 = load i8, i8* %arrayidx75, align 1
  %conv76 = zext i8 %60 to i32
  %and77 = and i32 %conv76, 31
  %shl78 = shl i32 1, %and77
  %and79 = and i32 %58, %shl78
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.end.82, label %if.then.81

if.then.81:                                       ; preds = %sw.bb.63
  %61 = load i8*, i8** %ptr.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %61, i8** %62, align 8
  store i32 0, i32* %retval
  br label %return

if.end.82:                                        ; preds = %sw.bb.63
  br label %sw.bb.83

sw.bb.83:                                         ; preds = %cond.end.61, %cond.end.61, %cond.end.61, %cond.end.61, %cond.end.61, %if.end.82
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr84 = getelementptr i8, i8* %63, i64 2
  store i8* %add.ptr84, i8** %ptr.addr, align 8
  br label %sw.epilog.112

sw.bb.85:                                         ; preds = %cond.end.61
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast86 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast87 = ptrtoint i8* %65 to i64
  %sub.ptr.sub88 = sub i64 %sub.ptr.lhs.cast86, %sub.ptr.rhs.cast87
  %cmp89 = icmp slt i64 %sub.ptr.sub88, 2
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %sw.bb.85
  store i32 -2, i32* %retval
  br label %return

if.end.92:                                        ; preds = %sw.bb.85
  %66 = load i8*, i8** %ptr.addr, align 8
  %67 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %66, i8** %67, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.93:                                         ; preds = %cond.end.61
  %68 = load i8*, i8** %end.addr, align 8
  %69 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast94 = ptrtoint i8* %68 to i64
  %sub.ptr.rhs.cast95 = ptrtoint i8* %69 to i64
  %sub.ptr.sub96 = sub i64 %sub.ptr.lhs.cast94, %sub.ptr.rhs.cast95
  %cmp97 = icmp slt i64 %sub.ptr.sub96, 3
  br i1 %cmp97, label %if.then.99, label %if.end.100

if.then.99:                                       ; preds = %sw.bb.93
  store i32 -2, i32* %retval
  br label %return

if.end.100:                                       ; preds = %sw.bb.93
  %70 = load i8*, i8** %ptr.addr, align 8
  %71 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %70, i8** %71, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.101:                                        ; preds = %cond.end.61
  %72 = load i8*, i8** %end.addr, align 8
  %73 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast102 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast103 = ptrtoint i8* %73 to i64
  %sub.ptr.sub104 = sub i64 %sub.ptr.lhs.cast102, %sub.ptr.rhs.cast103
  %cmp105 = icmp slt i64 %sub.ptr.sub104, 4
  br i1 %cmp105, label %if.then.107, label %if.end.108

if.then.107:                                      ; preds = %sw.bb.101
  store i32 -2, i32* %retval
  br label %return

if.end.108:                                       ; preds = %sw.bb.101
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.109:                                        ; preds = %cond.end.61
  %76 = load i8*, i8** %ptr.addr, align 8
  %add.ptr110 = getelementptr i8, i8* %76, i64 2
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr110, i8** %77, align 8
  store i32 28, i32* %retval
  br label %return

sw.default.111:                                   ; preds = %cond.end.61
  %78 = load i8*, i8** %ptr.addr, align 8
  %79 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %78, i8** %79, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.112:                                    ; preds = %sw.bb.83
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.111, %sw.bb.109, %if.end.108, %if.then.107, %if.end.100, %if.then.99, %if.end.92, %if.then.91, %if.then.81, %sw.default, %sw.bb.44, %if.end.43, %if.then.42, %if.end.35, %if.then.34, %if.end.27, %if.then.26, %if.then.20, %if.then
  %80 = load i32, i32* %retval
  ret i32 %80
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanPoundName(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.22
    i32 24, label %sw.bb.22
    i32 5, label %sw.bb.23
    i32 6, label %sw.bb.28
    i32 7, label %sw.bb.36
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx8, align 1
  %idxprom9 = zext i8 %14 to i64
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  %shl = shl i32 %conv11, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %17 to i32
  %shr = ashr i32 %conv13, 5
  %add = add i32 %shl, %shr
  %idxprom14 = sext i32 %add to i64
  %arrayidx15 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom14
  %18 = load i32, i32* %arrayidx15, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %20 to i32
  %and = and i32 %conv17, 31
  %shl18 = shl i32 1, %and
  %and19 = and i32 %18, %shl18
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %cond.end, %cond.end, %if.end.21
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp24 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.23
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast29 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast30 = ptrtoint i8* %29 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %cmp32 = icmp slt i64 %sub.ptr.sub31, 3
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %sw.bb.28
  store i32 -2, i32* %retval
  br label %return

if.end.35:                                        ; preds = %sw.bb.28
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %33 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %cmp40 = icmp slt i64 %sub.ptr.sub39, 4
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.36
  store i32 -2, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.36
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %36, i8** %37, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.22
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.110, %sw.epilog
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp44 = icmp ne i8* %38, %39
  br i1 %cmp44, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx46 = getelementptr i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %41 to i32
  %cmp48 = icmp eq i32 %conv47, 0
  br i1 %cmp48, label %cond.true.50, label %cond.false.56

cond.true.50:                                     ; preds = %while.body
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx51 = getelementptr i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx51, align 1
  %idxprom52 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type53 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx54 = getelementptr [256 x i8], [256 x i8]* %type53, i32 0, i64 %idxprom52
  %46 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %46 to i32
  br label %cond.end.60

cond.false.56:                                    ; preds = %while.body
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx57 = getelementptr i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx57, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx58, align 1
  %call59 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.56, %cond.true.50
  %cond61 = phi i32 [ %conv55, %cond.true.50 ], [ %call59, %cond.false.56 ]
  switch i32 %cond61, label %sw.default.109 [
    i32 29, label %sw.bb.62
    i32 22, label %sw.bb.82
    i32 24, label %sw.bb.82
    i32 25, label %sw.bb.82
    i32 26, label %sw.bb.82
    i32 27, label %sw.bb.82
    i32 5, label %sw.bb.84
    i32 6, label %sw.bb.92
    i32 7, label %sw.bb.100
    i32 9, label %sw.bb.108
    i32 10, label %sw.bb.108
    i32 21, label %sw.bb.108
    i32 32, label %sw.bb.108
    i32 11, label %sw.bb.108
    i32 30, label %sw.bb.108
    i32 36, label %sw.bb.108
  ]

sw.bb.62:                                         ; preds = %cond.end.60
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx63 = getelementptr i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx63, align 1
  %idxprom64 = zext i8 %52 to i64
  %arrayidx65 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom64
  %53 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %53 to i32
  %shl67 = shl i32 %conv66, 3
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx68 = getelementptr i8, i8* %54, i64 1
  %55 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %55 to i32
  %shr70 = ashr i32 %conv69, 5
  %add71 = add i32 %shl67, %shr70
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom72
  %56 = load i32, i32* %arrayidx73, align 4
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx74 = getelementptr i8, i8* %57, i64 1
  %58 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %58 to i32
  %and76 = and i32 %conv75, 31
  %shl77 = shl i32 1, %and76
  %and78 = and i32 %56, %shl77
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.end.81, label %if.then.80

if.then.80:                                       ; preds = %sw.bb.62
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %59, i8** %60, align 8
  store i32 0, i32* %retval
  br label %return

if.end.81:                                        ; preds = %sw.bb.62
  br label %sw.bb.82

sw.bb.82:                                         ; preds = %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %if.end.81
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr83 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr83, i8** %ptr.addr, align 8
  br label %sw.epilog.110

sw.bb.84:                                         ; preds = %cond.end.60
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast85 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast86 = ptrtoint i8* %63 to i64
  %sub.ptr.sub87 = sub i64 %sub.ptr.lhs.cast85, %sub.ptr.rhs.cast86
  %cmp88 = icmp slt i64 %sub.ptr.sub87, 2
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %sw.bb.84
  store i32 -2, i32* %retval
  br label %return

if.end.91:                                        ; preds = %sw.bb.84
  %64 = load i8*, i8** %ptr.addr, align 8
  %65 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %64, i8** %65, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.92:                                         ; preds = %cond.end.60
  %66 = load i8*, i8** %end.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast93 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast94 = ptrtoint i8* %67 to i64
  %sub.ptr.sub95 = sub i64 %sub.ptr.lhs.cast93, %sub.ptr.rhs.cast94
  %cmp96 = icmp slt i64 %sub.ptr.sub95, 3
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %sw.bb.92
  store i32 -2, i32* %retval
  br label %return

if.end.99:                                        ; preds = %sw.bb.92
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %68, i8** %69, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.100:                                        ; preds = %cond.end.60
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast101 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast102 = ptrtoint i8* %71 to i64
  %sub.ptr.sub103 = sub i64 %sub.ptr.lhs.cast101, %sub.ptr.rhs.cast102
  %cmp104 = icmp slt i64 %sub.ptr.sub103, 4
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %sw.bb.100
  store i32 -2, i32* %retval
  br label %return

if.end.107:                                       ; preds = %sw.bb.100
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.108:                                        ; preds = %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 20, i32* %retval
  br label %return

sw.default.109:                                   ; preds = %cond.end.60
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.110:                                    ; preds = %sw.bb.82
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -20, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.109, %sw.bb.108, %if.end.107, %if.then.106, %if.end.99, %if.then.98, %if.end.91, %if.then.90, %if.then.80, %sw.default, %if.end.43, %if.then.42, %if.end.35, %if.then.34, %if.end.27, %if.then.26, %if.then.20, %if.then
  %78 = load i32, i32* %retval
  ret i32 %78
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanComment(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end.78

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %land.lhs.true, label %if.then.7

land.lhs.true:                                    ; preds = %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 45
  br i1 %cmp5, label %if.end, label %if.then.7

if.then.7:                                        ; preds = %land.lhs.true, %if.then
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %6, i8** %7, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true
  %8 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %8, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog, %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8*, i8** %end.addr, align 8
  %cmp8 = icmp ne i8* %9, %10
  br i1 %cmp8, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx10 = getelementptr i8, i8* %11, i64 0
  %12 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %12 to i32
  %cmp12 = icmp eq i32 %conv11, 0
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx14 = getelementptr i8, i8* %13, i64 1
  %14 = load i8, i8* %arrayidx14, align 1
  %idxprom = zext i8 %14 to i64
  %15 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %16 = bitcast %struct.encoding* %15 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %16, i32 0, i32 1
  %arrayidx15 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %17 = load i8, i8* %arrayidx15, align 1
  %conv16 = zext i8 %17 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx17 = getelementptr i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx17, align 1
  %20 = load i8*, i8** %ptr.addr, align 8
  %arrayidx18 = getelementptr i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx18, align 1
  %call = call i32 @unicode_byte_type(i8 signext %19, i8 signext %21)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv16, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 5, label %sw.bb
    i32 6, label %sw.bb.24
    i32 7, label %sw.bb.33
    i32 0, label %sw.bb.42
    i32 1, label %sw.bb.42
    i32 8, label %sw.bb.42
    i32 27, label %sw.bb.43
  ]

sw.bb:                                            ; preds = %cond.end
  %22 = load i8*, i8** %end.addr, align 8
  %23 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %22 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %23 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp19 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp19, label %if.then.21, label %if.end.22

if.then.21:                                       ; preds = %sw.bb
  store i32 -2, i32* %retval
  br label %return

if.end.22:                                        ; preds = %sw.bb
  %24 = load i8*, i8** %ptr.addr, align 8
  %add.ptr23 = getelementptr i8, i8* %24, i64 2
  store i8* %add.ptr23, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.24:                                         ; preds = %cond.end
  %25 = load i8*, i8** %end.addr, align 8
  %26 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast25 = ptrtoint i8* %25 to i64
  %sub.ptr.rhs.cast26 = ptrtoint i8* %26 to i64
  %sub.ptr.sub27 = sub i64 %sub.ptr.lhs.cast25, %sub.ptr.rhs.cast26
  %cmp28 = icmp slt i64 %sub.ptr.sub27, 3
  br i1 %cmp28, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %sw.bb.24
  store i32 -2, i32* %retval
  br label %return

if.end.31:                                        ; preds = %sw.bb.24
  %27 = load i8*, i8** %ptr.addr, align 8
  %add.ptr32 = getelementptr i8, i8* %27, i64 3
  store i8* %add.ptr32, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.33:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast34 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast35 = ptrtoint i8* %29 to i64
  %sub.ptr.sub36 = sub i64 %sub.ptr.lhs.cast34, %sub.ptr.rhs.cast35
  %cmp37 = icmp slt i64 %sub.ptr.sub36, 4
  br i1 %cmp37, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %sw.bb.33
  store i32 -2, i32* %retval
  br label %return

if.end.40:                                        ; preds = %sw.bb.33
  %30 = load i8*, i8** %ptr.addr, align 8
  %add.ptr41 = getelementptr i8, i8* %30, i64 4
  store i8* %add.ptr41, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.42:                                         ; preds = %cond.end, %cond.end, %cond.end
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %31, i8** %32, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.43:                                         ; preds = %cond.end
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr44 = getelementptr i8, i8* %33, i64 2
  store i8* %add.ptr44, i8** %ptr.addr, align 8
  %34 = load i8*, i8** %end.addr, align 8
  %cmp45 = icmp eq i8* %add.ptr44, %34
  br i1 %cmp45, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %sw.bb.43
  store i32 -1, i32* %retval
  br label %return

if.end.48:                                        ; preds = %sw.bb.43
  %35 = load i8*, i8** %ptr.addr, align 8
  %arrayidx49 = getelementptr i8, i8* %35, i64 0
  %36 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %36 to i32
  %cmp51 = icmp eq i32 %conv50, 0
  br i1 %cmp51, label %land.lhs.true.53, label %if.end.76

land.lhs.true.53:                                 ; preds = %if.end.48
  %37 = load i8*, i8** %ptr.addr, align 8
  %arrayidx54 = getelementptr i8, i8* %37, i64 1
  %38 = load i8, i8* %arrayidx54, align 1
  %conv55 = sext i8 %38 to i32
  %cmp56 = icmp eq i32 %conv55, 45
  br i1 %cmp56, label %if.then.58, label %if.end.76

if.then.58:                                       ; preds = %land.lhs.true.53
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr59 = getelementptr i8, i8* %39, i64 2
  store i8* %add.ptr59, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %end.addr, align 8
  %cmp60 = icmp eq i8* %add.ptr59, %40
  br i1 %cmp60, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.then.58
  store i32 -1, i32* %retval
  br label %return

if.end.63:                                        ; preds = %if.then.58
  %41 = load i8*, i8** %ptr.addr, align 8
  %arrayidx64 = getelementptr i8, i8* %41, i64 0
  %42 = load i8, i8* %arrayidx64, align 1
  %conv65 = sext i8 %42 to i32
  %cmp66 = icmp eq i32 %conv65, 0
  br i1 %cmp66, label %land.lhs.true.68, label %if.then.73

land.lhs.true.68:                                 ; preds = %if.end.63
  %43 = load i8*, i8** %ptr.addr, align 8
  %arrayidx69 = getelementptr i8, i8* %43, i64 1
  %44 = load i8, i8* %arrayidx69, align 1
  %conv70 = sext i8 %44 to i32
  %cmp71 = icmp eq i32 %conv70, 62
  br i1 %cmp71, label %if.end.74, label %if.then.73

if.then.73:                                       ; preds = %land.lhs.true.68, %if.end.63
  %45 = load i8*, i8** %ptr.addr, align 8
  %46 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %45, i8** %46, align 8
  store i32 0, i32* %retval
  br label %return

if.end.74:                                        ; preds = %land.lhs.true.68
  %47 = load i8*, i8** %ptr.addr, align 8
  %add.ptr75 = getelementptr i8, i8* %47, i64 2
  %48 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr75, i8** %48, align 8
  store i32 13, i32* %retval
  br label %return

if.end.76:                                        ; preds = %land.lhs.true.53, %if.end.48
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %49 = load i8*, i8** %ptr.addr, align 8
  %add.ptr77 = getelementptr i8, i8* %49, i64 2
  store i8* %add.ptr77, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end.76, %if.end.40, %if.end.31, %if.end.22
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.78

if.end.78:                                        ; preds = %while.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.78, %if.end.74, %if.then.73, %if.then.62, %if.then.47, %sw.bb.42, %if.then.39, %if.then.30, %if.then.21, %if.then.7
  %50 = load i32, i32* %retval
  ret i32 %50
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_checkPiTarget(%struct.encoding* %enc, i8* %ptr, i8* %end, i32* %tokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %tokPtr.addr = alloca i32*, align 8
  %upper = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i32* %tokPtr, i32** %tokPtr.addr, align 8
  store i32 0, i32* %upper, align 4
  %0 = load i32*, i32** %tokPtr.addr, align 8
  store i32 11, i32* %0, align 4
  %1 = load i8*, i8** %end.addr, align 8
  %2 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %2 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp ne i64 %sub.ptr.sub, 6
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %6 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv4, %cond.true ], [ -1, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 120, label %sw.bb
    i32 88, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %cond.end
  br label %sw.epilog

sw.bb.5:                                          ; preds = %cond.end
  store i32 1, i32* %upper, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.5, %sw.bb
  %7 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  %8 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %8, i64 0
  %9 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %9 to i32
  %cmp8 = icmp eq i32 %conv7, 0
  br i1 %cmp8, label %cond.true.10, label %cond.false.13

cond.true.10:                                     ; preds = %sw.epilog
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx11 = getelementptr i8, i8* %10, i64 1
  %11 = load i8, i8* %arrayidx11, align 1
  %conv12 = sext i8 %11 to i32
  br label %cond.end.14

cond.false.13:                                    ; preds = %sw.epilog
  br label %cond.end.14

cond.end.14:                                      ; preds = %cond.false.13, %cond.true.10
  %cond15 = phi i32 [ %conv12, %cond.true.10 ], [ -1, %cond.false.13 ]
  switch i32 %cond15, label %sw.default.18 [
    i32 109, label %sw.bb.16
    i32 77, label %sw.bb.17
  ]

sw.bb.16:                                         ; preds = %cond.end.14
  br label %sw.epilog.19

sw.bb.17:                                         ; preds = %cond.end.14
  store i32 1, i32* %upper, align 4
  br label %sw.epilog.19

sw.default.18:                                    ; preds = %cond.end.14
  store i32 1, i32* %retval
  br label %return

sw.epilog.19:                                     ; preds = %sw.bb.17, %sw.bb.16
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr20 = getelementptr i8, i8* %12, i64 2
  store i8* %add.ptr20, i8** %ptr.addr, align 8
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx21 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %14 to i32
  %cmp23 = icmp eq i32 %conv22, 0
  br i1 %cmp23, label %cond.true.25, label %cond.false.28

cond.true.25:                                     ; preds = %sw.epilog.19
  %15 = load i8*, i8** %ptr.addr, align 8
  %arrayidx26 = getelementptr i8, i8* %15, i64 1
  %16 = load i8, i8* %arrayidx26, align 1
  %conv27 = sext i8 %16 to i32
  br label %cond.end.29

cond.false.28:                                    ; preds = %sw.epilog.19
  br label %cond.end.29

cond.end.29:                                      ; preds = %cond.false.28, %cond.true.25
  %cond30 = phi i32 [ %conv27, %cond.true.25 ], [ -1, %cond.false.28 ]
  switch i32 %cond30, label %sw.default.33 [
    i32 108, label %sw.bb.31
    i32 76, label %sw.bb.32
  ]

sw.bb.31:                                         ; preds = %cond.end.29
  br label %sw.epilog.34

sw.bb.32:                                         ; preds = %cond.end.29
  store i32 1, i32* %upper, align 4
  br label %sw.epilog.34

sw.default.33:                                    ; preds = %cond.end.29
  store i32 1, i32* %retval
  br label %return

sw.epilog.34:                                     ; preds = %sw.bb.32, %sw.bb.31
  %17 = load i32, i32* %upper, align 4
  %tobool = icmp ne i32 %17, 0
  br i1 %tobool, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %sw.epilog.34
  store i32 0, i32* %retval
  br label %return

if.end.36:                                        ; preds = %sw.epilog.34
  %18 = load i32*, i32** %tokPtr.addr, align 8
  store i32 12, i32* %18, align 4
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.36, %if.then.35, %sw.default.33, %sw.default.18, %sw.default, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanLt(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %hadColon = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.22
    i32 24, label %sw.bb.22
    i32 5, label %sw.bb.23
    i32 6, label %sw.bb.28
    i32 7, label %sw.bb.36
    i32 16, label %sw.bb.44
    i32 15, label %sw.bb.72
    i32 17, label %sw.bb.75
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx8, align 1
  %idxprom9 = zext i8 %14 to i64
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  %shl = shl i32 %conv11, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %17 to i32
  %shr = ashr i32 %conv13, 5
  %add = add i32 %shl, %shr
  %idxprom14 = sext i32 %add to i64
  %arrayidx15 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom14
  %18 = load i32, i32* %arrayidx15, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %20 to i32
  %and = and i32 %conv17, 31
  %shl18 = shl i32 1, %and
  %and19 = and i32 %18, %shl18
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %cond.end, %cond.end, %if.end.21
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog.78

sw.bb.23:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp24 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.23
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast29 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast30 = ptrtoint i8* %29 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %cmp32 = icmp slt i64 %sub.ptr.sub31, 3
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %sw.bb.28
  store i32 -2, i32* %retval
  br label %return

if.end.35:                                        ; preds = %sw.bb.28
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %33 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %cmp40 = icmp slt i64 %sub.ptr.sub39, 4
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.36
  store i32 -2, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.36
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %36, i64 2
  store i8* %add.ptr45, i8** %ptr.addr, align 8
  %37 = load i8*, i8** %end.addr, align 8
  %cmp46 = icmp eq i8* %add.ptr45, %37
  br i1 %cmp46, label %if.then.48, label %if.end.49

if.then.48:                                       ; preds = %sw.bb.44
  store i32 -1, i32* %retval
  br label %return

if.end.49:                                        ; preds = %sw.bb.44
  %38 = load i8*, i8** %ptr.addr, align 8
  %arrayidx50 = getelementptr i8, i8* %38, i64 0
  %39 = load i8, i8* %arrayidx50, align 1
  %conv51 = sext i8 %39 to i32
  %cmp52 = icmp eq i32 %conv51, 0
  br i1 %cmp52, label %cond.true.54, label %cond.false.60

cond.true.54:                                     ; preds = %if.end.49
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx55 = getelementptr i8, i8* %40, i64 1
  %41 = load i8, i8* %arrayidx55, align 1
  %idxprom56 = zext i8 %41 to i64
  %42 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %43 = bitcast %struct.encoding* %42 to %struct.normal_encoding*
  %type57 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %43, i32 0, i32 1
  %arrayidx58 = getelementptr [256 x i8], [256 x i8]* %type57, i32 0, i64 %idxprom56
  %44 = load i8, i8* %arrayidx58, align 1
  %conv59 = zext i8 %44 to i32
  br label %cond.end.64

cond.false.60:                                    ; preds = %if.end.49
  %45 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %45, i64 0
  %46 = load i8, i8* %arrayidx61, align 1
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx62 = getelementptr i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx62, align 1
  %call63 = call i32 @unicode_byte_type(i8 signext %46, i8 signext %48)
  br label %cond.end.64

cond.end.64:                                      ; preds = %cond.false.60, %cond.true.54
  %cond65 = phi i32 [ %conv59, %cond.true.54 ], [ %call63, %cond.false.60 ]
  switch i32 %cond65, label %sw.epilog [
    i32 27, label %sw.bb.66
    i32 20, label %sw.bb.69
  ]

sw.bb.66:                                         ; preds = %cond.end.64
  %49 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %50 = load i8*, i8** %ptr.addr, align 8
  %add.ptr67 = getelementptr i8, i8* %50, i64 2
  %51 = load i8*, i8** %end.addr, align 8
  %52 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call68 = call i32 @big2_scanComment(%struct.encoding* %49, i8* %add.ptr67, i8* %51, i8** %52)
  store i32 %call68, i32* %retval
  br label %return

sw.bb.69:                                         ; preds = %cond.end.64
  %53 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %54 = load i8*, i8** %ptr.addr, align 8
  %add.ptr70 = getelementptr i8, i8* %54, i64 2
  %55 = load i8*, i8** %end.addr, align 8
  %56 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call71 = call i32 @big2_scanCdataSection(%struct.encoding* %53, i8* %add.ptr70, i8* %55, i8** %56)
  store i32 %call71, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %cond.end.64
  %57 = load i8*, i8** %ptr.addr, align 8
  %58 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %57, i8** %58, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.72:                                         ; preds = %cond.end
  %59 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %60 = load i8*, i8** %ptr.addr, align 8
  %add.ptr73 = getelementptr i8, i8* %60, i64 2
  %61 = load i8*, i8** %end.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call74 = call i32 @big2_scanPi(%struct.encoding* %59, i8* %add.ptr73, i8* %61, i8** %62)
  store i32 %call74, i32* %retval
  br label %return

sw.bb.75:                                         ; preds = %cond.end
  %63 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %64 = load i8*, i8** %ptr.addr, align 8
  %add.ptr76 = getelementptr i8, i8* %64, i64 2
  %65 = load i8*, i8** %end.addr, align 8
  %66 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call77 = call i32 @big2_scanEndTag(%struct.encoding* %63, i8* %add.ptr76, i8* %65, i8** %66)
  store i32 %call77, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %67 = load i8*, i8** %ptr.addr, align 8
  %68 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %67, i8** %68, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.78:                                     ; preds = %sw.bb.22
  store i32 0, i32* %hadColon, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.311, %sw.epilog.78
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8*, i8** %end.addr, align 8
  %cmp79 = icmp ne i8* %69, %70
  br i1 %cmp79, label %while.body, label %while.end.312

while.body:                                       ; preds = %while.cond
  %71 = load i8*, i8** %ptr.addr, align 8
  %arrayidx81 = getelementptr i8, i8* %71, i64 0
  %72 = load i8, i8* %arrayidx81, align 1
  %conv82 = sext i8 %72 to i32
  %cmp83 = icmp eq i32 %conv82, 0
  br i1 %cmp83, label %cond.true.85, label %cond.false.91

cond.true.85:                                     ; preds = %while.body
  %73 = load i8*, i8** %ptr.addr, align 8
  %arrayidx86 = getelementptr i8, i8* %73, i64 1
  %74 = load i8, i8* %arrayidx86, align 1
  %idxprom87 = zext i8 %74 to i64
  %75 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %76 = bitcast %struct.encoding* %75 to %struct.normal_encoding*
  %type88 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %76, i32 0, i32 1
  %arrayidx89 = getelementptr [256 x i8], [256 x i8]* %type88, i32 0, i64 %idxprom87
  %77 = load i8, i8* %arrayidx89, align 1
  %conv90 = zext i8 %77 to i32
  br label %cond.end.95

cond.false.91:                                    ; preds = %while.body
  %78 = load i8*, i8** %ptr.addr, align 8
  %arrayidx92 = getelementptr i8, i8* %78, i64 0
  %79 = load i8, i8* %arrayidx92, align 1
  %80 = load i8*, i8** %ptr.addr, align 8
  %arrayidx93 = getelementptr i8, i8* %80, i64 1
  %81 = load i8, i8* %arrayidx93, align 1
  %call94 = call i32 @unicode_byte_type(i8 signext %79, i8 signext %81)
  br label %cond.end.95

cond.end.95:                                      ; preds = %cond.false.91, %cond.true.85
  %cond96 = phi i32 [ %conv90, %cond.true.85 ], [ %call94, %cond.false.91 ]
  switch i32 %cond96, label %sw.default.310 [
    i32 29, label %sw.bb.97
    i32 22, label %sw.bb.117
    i32 24, label %sw.bb.117
    i32 25, label %sw.bb.117
    i32 26, label %sw.bb.117
    i32 27, label %sw.bb.117
    i32 5, label %sw.bb.119
    i32 6, label %sw.bb.127
    i32 7, label %sw.bb.135
    i32 23, label %sw.bb.143
    i32 21, label %sw.bb.216
    i32 9, label %sw.bb.216
    i32 10, label %sw.bb.216
    i32 11, label %sw.bb.291
    i32 17, label %sw.bb.293
  ]

sw.bb.97:                                         ; preds = %cond.end.95
  %82 = load i8*, i8** %ptr.addr, align 8
  %arrayidx98 = getelementptr i8, i8* %82, i64 0
  %83 = load i8, i8* %arrayidx98, align 1
  %idxprom99 = zext i8 %83 to i64
  %arrayidx100 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom99
  %84 = load i8, i8* %arrayidx100, align 1
  %conv101 = zext i8 %84 to i32
  %shl102 = shl i32 %conv101, 3
  %85 = load i8*, i8** %ptr.addr, align 8
  %arrayidx103 = getelementptr i8, i8* %85, i64 1
  %86 = load i8, i8* %arrayidx103, align 1
  %conv104 = zext i8 %86 to i32
  %shr105 = ashr i32 %conv104, 5
  %add106 = add i32 %shl102, %shr105
  %idxprom107 = sext i32 %add106 to i64
  %arrayidx108 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom107
  %87 = load i32, i32* %arrayidx108, align 4
  %88 = load i8*, i8** %ptr.addr, align 8
  %arrayidx109 = getelementptr i8, i8* %88, i64 1
  %89 = load i8, i8* %arrayidx109, align 1
  %conv110 = zext i8 %89 to i32
  %and111 = and i32 %conv110, 31
  %shl112 = shl i32 1, %and111
  %and113 = and i32 %87, %shl112
  %tobool114 = icmp ne i32 %and113, 0
  br i1 %tobool114, label %if.end.116, label %if.then.115

if.then.115:                                      ; preds = %sw.bb.97
  %90 = load i8*, i8** %ptr.addr, align 8
  %91 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %90, i8** %91, align 8
  store i32 0, i32* %retval
  br label %return

if.end.116:                                       ; preds = %sw.bb.97
  br label %sw.bb.117

sw.bb.117:                                        ; preds = %cond.end.95, %cond.end.95, %cond.end.95, %cond.end.95, %cond.end.95, %if.end.116
  %92 = load i8*, i8** %ptr.addr, align 8
  %add.ptr118 = getelementptr i8, i8* %92, i64 2
  store i8* %add.ptr118, i8** %ptr.addr, align 8
  br label %sw.epilog.311

sw.bb.119:                                        ; preds = %cond.end.95
  %93 = load i8*, i8** %end.addr, align 8
  %94 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast120 = ptrtoint i8* %93 to i64
  %sub.ptr.rhs.cast121 = ptrtoint i8* %94 to i64
  %sub.ptr.sub122 = sub i64 %sub.ptr.lhs.cast120, %sub.ptr.rhs.cast121
  %cmp123 = icmp slt i64 %sub.ptr.sub122, 2
  br i1 %cmp123, label %if.then.125, label %if.end.126

if.then.125:                                      ; preds = %sw.bb.119
  store i32 -2, i32* %retval
  br label %return

if.end.126:                                       ; preds = %sw.bb.119
  %95 = load i8*, i8** %ptr.addr, align 8
  %96 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %95, i8** %96, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.127:                                        ; preds = %cond.end.95
  %97 = load i8*, i8** %end.addr, align 8
  %98 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast128 = ptrtoint i8* %97 to i64
  %sub.ptr.rhs.cast129 = ptrtoint i8* %98 to i64
  %sub.ptr.sub130 = sub i64 %sub.ptr.lhs.cast128, %sub.ptr.rhs.cast129
  %cmp131 = icmp slt i64 %sub.ptr.sub130, 3
  br i1 %cmp131, label %if.then.133, label %if.end.134

if.then.133:                                      ; preds = %sw.bb.127
  store i32 -2, i32* %retval
  br label %return

if.end.134:                                       ; preds = %sw.bb.127
  %99 = load i8*, i8** %ptr.addr, align 8
  %100 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %99, i8** %100, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.135:                                        ; preds = %cond.end.95
  %101 = load i8*, i8** %end.addr, align 8
  %102 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast136 = ptrtoint i8* %101 to i64
  %sub.ptr.rhs.cast137 = ptrtoint i8* %102 to i64
  %sub.ptr.sub138 = sub i64 %sub.ptr.lhs.cast136, %sub.ptr.rhs.cast137
  %cmp139 = icmp slt i64 %sub.ptr.sub138, 4
  br i1 %cmp139, label %if.then.141, label %if.end.142

if.then.141:                                      ; preds = %sw.bb.135
  store i32 -2, i32* %retval
  br label %return

if.end.142:                                       ; preds = %sw.bb.135
  %103 = load i8*, i8** %ptr.addr, align 8
  %104 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %103, i8** %104, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.143:                                        ; preds = %cond.end.95
  %105 = load i32, i32* %hadColon, align 4
  %tobool144 = icmp ne i32 %105, 0
  br i1 %tobool144, label %if.then.145, label %if.end.146

if.then.145:                                      ; preds = %sw.bb.143
  %106 = load i8*, i8** %ptr.addr, align 8
  %107 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %106, i8** %107, align 8
  store i32 0, i32* %retval
  br label %return

if.end.146:                                       ; preds = %sw.bb.143
  store i32 1, i32* %hadColon, align 4
  %108 = load i8*, i8** %ptr.addr, align 8
  %add.ptr147 = getelementptr i8, i8* %108, i64 2
  store i8* %add.ptr147, i8** %ptr.addr, align 8
  %109 = load i8*, i8** %ptr.addr, align 8
  %110 = load i8*, i8** %end.addr, align 8
  %cmp148 = icmp eq i8* %109, %110
  br i1 %cmp148, label %if.then.150, label %if.end.151

if.then.150:                                      ; preds = %if.end.146
  store i32 -1, i32* %retval
  br label %return

if.end.151:                                       ; preds = %if.end.146
  %111 = load i8*, i8** %ptr.addr, align 8
  %arrayidx152 = getelementptr i8, i8* %111, i64 0
  %112 = load i8, i8* %arrayidx152, align 1
  %conv153 = sext i8 %112 to i32
  %cmp154 = icmp eq i32 %conv153, 0
  br i1 %cmp154, label %cond.true.156, label %cond.false.162

cond.true.156:                                    ; preds = %if.end.151
  %113 = load i8*, i8** %ptr.addr, align 8
  %arrayidx157 = getelementptr i8, i8* %113, i64 1
  %114 = load i8, i8* %arrayidx157, align 1
  %idxprom158 = zext i8 %114 to i64
  %115 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %116 = bitcast %struct.encoding* %115 to %struct.normal_encoding*
  %type159 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %116, i32 0, i32 1
  %arrayidx160 = getelementptr [256 x i8], [256 x i8]* %type159, i32 0, i64 %idxprom158
  %117 = load i8, i8* %arrayidx160, align 1
  %conv161 = zext i8 %117 to i32
  br label %cond.end.166

cond.false.162:                                   ; preds = %if.end.151
  %118 = load i8*, i8** %ptr.addr, align 8
  %arrayidx163 = getelementptr i8, i8* %118, i64 0
  %119 = load i8, i8* %arrayidx163, align 1
  %120 = load i8*, i8** %ptr.addr, align 8
  %arrayidx164 = getelementptr i8, i8* %120, i64 1
  %121 = load i8, i8* %arrayidx164, align 1
  %call165 = call i32 @unicode_byte_type(i8 signext %119, i8 signext %121)
  br label %cond.end.166

cond.end.166:                                     ; preds = %cond.false.162, %cond.true.156
  %cond167 = phi i32 [ %conv161, %cond.true.156 ], [ %call165, %cond.false.162 ]
  switch i32 %cond167, label %sw.default.214 [
    i32 29, label %sw.bb.168
    i32 22, label %sw.bb.188
    i32 24, label %sw.bb.188
    i32 5, label %sw.bb.190
    i32 6, label %sw.bb.198
    i32 7, label %sw.bb.206
  ]

sw.bb.168:                                        ; preds = %cond.end.166
  %122 = load i8*, i8** %ptr.addr, align 8
  %arrayidx169 = getelementptr i8, i8* %122, i64 0
  %123 = load i8, i8* %arrayidx169, align 1
  %idxprom170 = zext i8 %123 to i64
  %arrayidx171 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom170
  %124 = load i8, i8* %arrayidx171, align 1
  %conv172 = zext i8 %124 to i32
  %shl173 = shl i32 %conv172, 3
  %125 = load i8*, i8** %ptr.addr, align 8
  %arrayidx174 = getelementptr i8, i8* %125, i64 1
  %126 = load i8, i8* %arrayidx174, align 1
  %conv175 = zext i8 %126 to i32
  %shr176 = ashr i32 %conv175, 5
  %add177 = add i32 %shl173, %shr176
  %idxprom178 = sext i32 %add177 to i64
  %arrayidx179 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom178
  %127 = load i32, i32* %arrayidx179, align 4
  %128 = load i8*, i8** %ptr.addr, align 8
  %arrayidx180 = getelementptr i8, i8* %128, i64 1
  %129 = load i8, i8* %arrayidx180, align 1
  %conv181 = zext i8 %129 to i32
  %and182 = and i32 %conv181, 31
  %shl183 = shl i32 1, %and182
  %and184 = and i32 %127, %shl183
  %tobool185 = icmp ne i32 %and184, 0
  br i1 %tobool185, label %if.end.187, label %if.then.186

if.then.186:                                      ; preds = %sw.bb.168
  %130 = load i8*, i8** %ptr.addr, align 8
  %131 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %130, i8** %131, align 8
  store i32 0, i32* %retval
  br label %return

if.end.187:                                       ; preds = %sw.bb.168
  br label %sw.bb.188

sw.bb.188:                                        ; preds = %cond.end.166, %cond.end.166, %if.end.187
  %132 = load i8*, i8** %ptr.addr, align 8
  %add.ptr189 = getelementptr i8, i8* %132, i64 2
  store i8* %add.ptr189, i8** %ptr.addr, align 8
  br label %sw.epilog.215

sw.bb.190:                                        ; preds = %cond.end.166
  %133 = load i8*, i8** %end.addr, align 8
  %134 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast191 = ptrtoint i8* %133 to i64
  %sub.ptr.rhs.cast192 = ptrtoint i8* %134 to i64
  %sub.ptr.sub193 = sub i64 %sub.ptr.lhs.cast191, %sub.ptr.rhs.cast192
  %cmp194 = icmp slt i64 %sub.ptr.sub193, 2
  br i1 %cmp194, label %if.then.196, label %if.end.197

if.then.196:                                      ; preds = %sw.bb.190
  store i32 -2, i32* %retval
  br label %return

if.end.197:                                       ; preds = %sw.bb.190
  %135 = load i8*, i8** %ptr.addr, align 8
  %136 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %135, i8** %136, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.198:                                        ; preds = %cond.end.166
  %137 = load i8*, i8** %end.addr, align 8
  %138 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast199 = ptrtoint i8* %137 to i64
  %sub.ptr.rhs.cast200 = ptrtoint i8* %138 to i64
  %sub.ptr.sub201 = sub i64 %sub.ptr.lhs.cast199, %sub.ptr.rhs.cast200
  %cmp202 = icmp slt i64 %sub.ptr.sub201, 3
  br i1 %cmp202, label %if.then.204, label %if.end.205

if.then.204:                                      ; preds = %sw.bb.198
  store i32 -2, i32* %retval
  br label %return

if.end.205:                                       ; preds = %sw.bb.198
  %139 = load i8*, i8** %ptr.addr, align 8
  %140 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %139, i8** %140, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.206:                                        ; preds = %cond.end.166
  %141 = load i8*, i8** %end.addr, align 8
  %142 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast207 = ptrtoint i8* %141 to i64
  %sub.ptr.rhs.cast208 = ptrtoint i8* %142 to i64
  %sub.ptr.sub209 = sub i64 %sub.ptr.lhs.cast207, %sub.ptr.rhs.cast208
  %cmp210 = icmp slt i64 %sub.ptr.sub209, 4
  br i1 %cmp210, label %if.then.212, label %if.end.213

if.then.212:                                      ; preds = %sw.bb.206
  store i32 -2, i32* %retval
  br label %return

if.end.213:                                       ; preds = %sw.bb.206
  %143 = load i8*, i8** %ptr.addr, align 8
  %144 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %143, i8** %144, align 8
  store i32 0, i32* %retval
  br label %return

sw.default.214:                                   ; preds = %cond.end.166
  %145 = load i8*, i8** %ptr.addr, align 8
  %146 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %145, i8** %146, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.215:                                    ; preds = %sw.bb.188
  br label %sw.epilog.311

sw.bb.216:                                        ; preds = %cond.end.95, %cond.end.95, %cond.end.95
  %147 = load i8*, i8** %ptr.addr, align 8
  %add.ptr217 = getelementptr i8, i8* %147, i64 2
  store i8* %add.ptr217, i8** %ptr.addr, align 8
  br label %while.cond.218

while.cond.218:                                   ; preds = %sw.bb.286, %sw.bb.216
  %148 = load i8*, i8** %ptr.addr, align 8
  %149 = load i8*, i8** %end.addr, align 8
  %cmp219 = icmp ne i8* %148, %149
  br i1 %cmp219, label %while.body.221, label %while.end

while.body.221:                                   ; preds = %while.cond.218
  %150 = load i8*, i8** %ptr.addr, align 8
  %arrayidx222 = getelementptr i8, i8* %150, i64 0
  %151 = load i8, i8* %arrayidx222, align 1
  %conv223 = sext i8 %151 to i32
  %cmp224 = icmp eq i32 %conv223, 0
  br i1 %cmp224, label %cond.true.226, label %cond.false.232

cond.true.226:                                    ; preds = %while.body.221
  %152 = load i8*, i8** %ptr.addr, align 8
  %arrayidx227 = getelementptr i8, i8* %152, i64 1
  %153 = load i8, i8* %arrayidx227, align 1
  %idxprom228 = zext i8 %153 to i64
  %154 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %155 = bitcast %struct.encoding* %154 to %struct.normal_encoding*
  %type229 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %155, i32 0, i32 1
  %arrayidx230 = getelementptr [256 x i8], [256 x i8]* %type229, i32 0, i64 %idxprom228
  %156 = load i8, i8* %arrayidx230, align 1
  %conv231 = zext i8 %156 to i32
  br label %cond.end.236

cond.false.232:                                   ; preds = %while.body.221
  %157 = load i8*, i8** %ptr.addr, align 8
  %arrayidx233 = getelementptr i8, i8* %157, i64 0
  %158 = load i8, i8* %arrayidx233, align 1
  %159 = load i8*, i8** %ptr.addr, align 8
  %arrayidx234 = getelementptr i8, i8* %159, i64 1
  %160 = load i8, i8* %arrayidx234, align 1
  %call235 = call i32 @unicode_byte_type(i8 signext %158, i8 signext %160)
  br label %cond.end.236

cond.end.236:                                     ; preds = %cond.false.232, %cond.true.226
  %cond237 = phi i32 [ %conv231, %cond.true.226 ], [ %call235, %cond.false.232 ]
  switch i32 %cond237, label %sw.default.288 [
    i32 29, label %sw.bb.238
    i32 22, label %sw.bb.258
    i32 24, label %sw.bb.258
    i32 5, label %sw.bb.260
    i32 6, label %sw.bb.268
    i32 7, label %sw.bb.276
    i32 11, label %sw.bb.284
    i32 17, label %sw.bb.285
    i32 21, label %sw.bb.286
    i32 9, label %sw.bb.286
    i32 10, label %sw.bb.286
  ]

sw.bb.238:                                        ; preds = %cond.end.236
  %161 = load i8*, i8** %ptr.addr, align 8
  %arrayidx239 = getelementptr i8, i8* %161, i64 0
  %162 = load i8, i8* %arrayidx239, align 1
  %idxprom240 = zext i8 %162 to i64
  %arrayidx241 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom240
  %163 = load i8, i8* %arrayidx241, align 1
  %conv242 = zext i8 %163 to i32
  %shl243 = shl i32 %conv242, 3
  %164 = load i8*, i8** %ptr.addr, align 8
  %arrayidx244 = getelementptr i8, i8* %164, i64 1
  %165 = load i8, i8* %arrayidx244, align 1
  %conv245 = zext i8 %165 to i32
  %shr246 = ashr i32 %conv245, 5
  %add247 = add i32 %shl243, %shr246
  %idxprom248 = sext i32 %add247 to i64
  %arrayidx249 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom248
  %166 = load i32, i32* %arrayidx249, align 4
  %167 = load i8*, i8** %ptr.addr, align 8
  %arrayidx250 = getelementptr i8, i8* %167, i64 1
  %168 = load i8, i8* %arrayidx250, align 1
  %conv251 = zext i8 %168 to i32
  %and252 = and i32 %conv251, 31
  %shl253 = shl i32 1, %and252
  %and254 = and i32 %166, %shl253
  %tobool255 = icmp ne i32 %and254, 0
  br i1 %tobool255, label %if.end.257, label %if.then.256

if.then.256:                                      ; preds = %sw.bb.238
  %169 = load i8*, i8** %ptr.addr, align 8
  %170 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %169, i8** %170, align 8
  store i32 0, i32* %retval
  br label %return

if.end.257:                                       ; preds = %sw.bb.238
  br label %sw.bb.258

sw.bb.258:                                        ; preds = %cond.end.236, %cond.end.236, %if.end.257
  %171 = load i8*, i8** %ptr.addr, align 8
  %add.ptr259 = getelementptr i8, i8* %171, i64 2
  store i8* %add.ptr259, i8** %ptr.addr, align 8
  br label %sw.epilog.289

sw.bb.260:                                        ; preds = %cond.end.236
  %172 = load i8*, i8** %end.addr, align 8
  %173 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast261 = ptrtoint i8* %172 to i64
  %sub.ptr.rhs.cast262 = ptrtoint i8* %173 to i64
  %sub.ptr.sub263 = sub i64 %sub.ptr.lhs.cast261, %sub.ptr.rhs.cast262
  %cmp264 = icmp slt i64 %sub.ptr.sub263, 2
  br i1 %cmp264, label %if.then.266, label %if.end.267

if.then.266:                                      ; preds = %sw.bb.260
  store i32 -2, i32* %retval
  br label %return

if.end.267:                                       ; preds = %sw.bb.260
  %174 = load i8*, i8** %ptr.addr, align 8
  %175 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %174, i8** %175, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.268:                                        ; preds = %cond.end.236
  %176 = load i8*, i8** %end.addr, align 8
  %177 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast269 = ptrtoint i8* %176 to i64
  %sub.ptr.rhs.cast270 = ptrtoint i8* %177 to i64
  %sub.ptr.sub271 = sub i64 %sub.ptr.lhs.cast269, %sub.ptr.rhs.cast270
  %cmp272 = icmp slt i64 %sub.ptr.sub271, 3
  br i1 %cmp272, label %if.then.274, label %if.end.275

if.then.274:                                      ; preds = %sw.bb.268
  store i32 -2, i32* %retval
  br label %return

if.end.275:                                       ; preds = %sw.bb.268
  %178 = load i8*, i8** %ptr.addr, align 8
  %179 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %178, i8** %179, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.276:                                        ; preds = %cond.end.236
  %180 = load i8*, i8** %end.addr, align 8
  %181 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast277 = ptrtoint i8* %180 to i64
  %sub.ptr.rhs.cast278 = ptrtoint i8* %181 to i64
  %sub.ptr.sub279 = sub i64 %sub.ptr.lhs.cast277, %sub.ptr.rhs.cast278
  %cmp280 = icmp slt i64 %sub.ptr.sub279, 4
  br i1 %cmp280, label %if.then.282, label %if.end.283

if.then.282:                                      ; preds = %sw.bb.276
  store i32 -2, i32* %retval
  br label %return

if.end.283:                                       ; preds = %sw.bb.276
  %182 = load i8*, i8** %ptr.addr, align 8
  %183 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %182, i8** %183, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.284:                                        ; preds = %cond.end.236
  br label %gt

sw.bb.285:                                        ; preds = %cond.end.236
  br label %sol

sw.bb.286:                                        ; preds = %cond.end.236, %cond.end.236, %cond.end.236
  %184 = load i8*, i8** %ptr.addr, align 8
  %add.ptr287 = getelementptr i8, i8* %184, i64 2
  store i8* %add.ptr287, i8** %ptr.addr, align 8
  br label %while.cond.218

sw.default.288:                                   ; preds = %cond.end.236
  %185 = load i8*, i8** %ptr.addr, align 8
  %186 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %185, i8** %186, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.289:                                    ; preds = %sw.bb.258
  %187 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %188 = load i8*, i8** %ptr.addr, align 8
  %189 = load i8*, i8** %end.addr, align 8
  %190 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call290 = call i32 @big2_scanAtts(%struct.encoding* %187, i8* %188, i8* %189, i8** %190)
  store i32 %call290, i32* %retval
  br label %return

while.end:                                        ; preds = %while.cond.218
  store i32 -1, i32* %retval
  br label %return

sw.bb.291:                                        ; preds = %cond.end.95
  br label %gt

gt:                                               ; preds = %sw.bb.291, %sw.bb.284
  %191 = load i8*, i8** %ptr.addr, align 8
  %add.ptr292 = getelementptr i8, i8* %191, i64 2
  %192 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr292, i8** %192, align 8
  store i32 2, i32* %retval
  br label %return

sw.bb.293:                                        ; preds = %cond.end.95
  br label %sol

sol:                                              ; preds = %sw.bb.293, %sw.bb.285
  %193 = load i8*, i8** %ptr.addr, align 8
  %add.ptr294 = getelementptr i8, i8* %193, i64 2
  store i8* %add.ptr294, i8** %ptr.addr, align 8
  %194 = load i8*, i8** %ptr.addr, align 8
  %195 = load i8*, i8** %end.addr, align 8
  %cmp295 = icmp eq i8* %194, %195
  br i1 %cmp295, label %if.then.297, label %if.end.298

if.then.297:                                      ; preds = %sol
  store i32 -1, i32* %retval
  br label %return

if.end.298:                                       ; preds = %sol
  %196 = load i8*, i8** %ptr.addr, align 8
  %arrayidx299 = getelementptr i8, i8* %196, i64 0
  %197 = load i8, i8* %arrayidx299, align 1
  %conv300 = sext i8 %197 to i32
  %cmp301 = icmp eq i32 %conv300, 0
  br i1 %cmp301, label %land.lhs.true, label %if.then.307

land.lhs.true:                                    ; preds = %if.end.298
  %198 = load i8*, i8** %ptr.addr, align 8
  %arrayidx303 = getelementptr i8, i8* %198, i64 1
  %199 = load i8, i8* %arrayidx303, align 1
  %conv304 = sext i8 %199 to i32
  %cmp305 = icmp eq i32 %conv304, 62
  br i1 %cmp305, label %if.end.308, label %if.then.307

if.then.307:                                      ; preds = %land.lhs.true, %if.end.298
  %200 = load i8*, i8** %ptr.addr, align 8
  %201 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %200, i8** %201, align 8
  store i32 0, i32* %retval
  br label %return

if.end.308:                                       ; preds = %land.lhs.true
  %202 = load i8*, i8** %ptr.addr, align 8
  %add.ptr309 = getelementptr i8, i8* %202, i64 2
  %203 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr309, i8** %203, align 8
  store i32 4, i32* %retval
  br label %return

sw.default.310:                                   ; preds = %cond.end.95
  %204 = load i8*, i8** %ptr.addr, align 8
  %205 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %204, i8** %205, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.311:                                    ; preds = %sw.epilog.215, %sw.bb.117
  br label %while.cond

while.end.312:                                    ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end.312, %sw.default.310, %if.end.308, %if.then.307, %if.then.297, %gt, %while.end, %sw.epilog.289, %sw.default.288, %if.end.283, %if.then.282, %if.end.275, %if.then.274, %if.end.267, %if.then.266, %if.then.256, %sw.default.214, %if.end.213, %if.then.212, %if.end.205, %if.then.204, %if.end.197, %if.then.196, %if.then.186, %if.then.150, %if.then.145, %if.end.142, %if.then.141, %if.end.134, %if.then.133, %if.end.126, %if.then.125, %if.then.115, %sw.default, %sw.bb.75, %sw.bb.72, %sw.epilog, %sw.bb.69, %sw.bb.66, %if.then.48, %if.end.43, %if.then.42, %if.end.35, %if.then.34, %if.end.27, %if.then.26, %if.then.20, %if.then
  %206 = load i32, i32* %retval
  ret i32 %206
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.22
    i32 24, label %sw.bb.22
    i32 5, label %sw.bb.23
    i32 6, label %sw.bb.28
    i32 7, label %sw.bb.36
    i32 19, label %sw.bb.44
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx8, align 1
  %idxprom9 = zext i8 %14 to i64
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  %shl = shl i32 %conv11, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %17 to i32
  %shr = ashr i32 %conv13, 5
  %add = add i32 %shl, %shr
  %idxprom14 = sext i32 %add to i64
  %arrayidx15 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom14
  %18 = load i32, i32* %arrayidx15, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %20 to i32
  %and = and i32 %conv17, 31
  %shl18 = shl i32 1, %and
  %and19 = and i32 %18, %shl18
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %cond.end, %cond.end, %if.end.21
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp24 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.23
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast29 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast30 = ptrtoint i8* %29 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %cmp32 = icmp slt i64 %sub.ptr.sub31, 3
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %sw.bb.28
  store i32 -2, i32* %retval
  br label %return

if.end.35:                                        ; preds = %sw.bb.28
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %33 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %cmp40 = icmp slt i64 %sub.ptr.sub39, 4
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.36
  store i32 -2, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.36
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.44:                                         ; preds = %cond.end
  %36 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr45 = getelementptr i8, i8* %37, i64 2
  %38 = load i8*, i8** %end.addr, align 8
  %39 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call46 = call i32 @big2_scanCharRef(%struct.encoding* %36, i8* %add.ptr45, i8* %38, i8** %39)
  store i32 %call46, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %40, i8** %41, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.22
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.114, %sw.epilog
  %42 = load i8*, i8** %ptr.addr, align 8
  %43 = load i8*, i8** %end.addr, align 8
  %cmp47 = icmp ne i8* %42, %43
  br i1 %cmp47, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %44 = load i8*, i8** %ptr.addr, align 8
  %arrayidx49 = getelementptr i8, i8* %44, i64 0
  %45 = load i8, i8* %arrayidx49, align 1
  %conv50 = sext i8 %45 to i32
  %cmp51 = icmp eq i32 %conv50, 0
  br i1 %cmp51, label %cond.true.53, label %cond.false.59

cond.true.53:                                     ; preds = %while.body
  %46 = load i8*, i8** %ptr.addr, align 8
  %arrayidx54 = getelementptr i8, i8* %46, i64 1
  %47 = load i8, i8* %arrayidx54, align 1
  %idxprom55 = zext i8 %47 to i64
  %48 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %49 = bitcast %struct.encoding* %48 to %struct.normal_encoding*
  %type56 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %49, i32 0, i32 1
  %arrayidx57 = getelementptr [256 x i8], [256 x i8]* %type56, i32 0, i64 %idxprom55
  %50 = load i8, i8* %arrayidx57, align 1
  %conv58 = zext i8 %50 to i32
  br label %cond.end.63

cond.false.59:                                    ; preds = %while.body
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx60 = getelementptr i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx60, align 1
  %53 = load i8*, i8** %ptr.addr, align 8
  %arrayidx61 = getelementptr i8, i8* %53, i64 1
  %54 = load i8, i8* %arrayidx61, align 1
  %call62 = call i32 @unicode_byte_type(i8 signext %52, i8 signext %54)
  br label %cond.end.63

cond.end.63:                                      ; preds = %cond.false.59, %cond.true.53
  %cond64 = phi i32 [ %conv58, %cond.true.53 ], [ %call62, %cond.false.59 ]
  switch i32 %cond64, label %sw.default.113 [
    i32 29, label %sw.bb.65
    i32 22, label %sw.bb.85
    i32 24, label %sw.bb.85
    i32 25, label %sw.bb.85
    i32 26, label %sw.bb.85
    i32 27, label %sw.bb.85
    i32 5, label %sw.bb.87
    i32 6, label %sw.bb.95
    i32 7, label %sw.bb.103
    i32 18, label %sw.bb.111
  ]

sw.bb.65:                                         ; preds = %cond.end.63
  %55 = load i8*, i8** %ptr.addr, align 8
  %arrayidx66 = getelementptr i8, i8* %55, i64 0
  %56 = load i8, i8* %arrayidx66, align 1
  %idxprom67 = zext i8 %56 to i64
  %arrayidx68 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom67
  %57 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %57 to i32
  %shl70 = shl i32 %conv69, 3
  %58 = load i8*, i8** %ptr.addr, align 8
  %arrayidx71 = getelementptr i8, i8* %58, i64 1
  %59 = load i8, i8* %arrayidx71, align 1
  %conv72 = zext i8 %59 to i32
  %shr73 = ashr i32 %conv72, 5
  %add74 = add i32 %shl70, %shr73
  %idxprom75 = sext i32 %add74 to i64
  %arrayidx76 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom75
  %60 = load i32, i32* %arrayidx76, align 4
  %61 = load i8*, i8** %ptr.addr, align 8
  %arrayidx77 = getelementptr i8, i8* %61, i64 1
  %62 = load i8, i8* %arrayidx77, align 1
  %conv78 = zext i8 %62 to i32
  %and79 = and i32 %conv78, 31
  %shl80 = shl i32 1, %and79
  %and81 = and i32 %60, %shl80
  %tobool82 = icmp ne i32 %and81, 0
  br i1 %tobool82, label %if.end.84, label %if.then.83

if.then.83:                                       ; preds = %sw.bb.65
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 0, i32* %retval
  br label %return

if.end.84:                                        ; preds = %sw.bb.65
  br label %sw.bb.85

sw.bb.85:                                         ; preds = %cond.end.63, %cond.end.63, %cond.end.63, %cond.end.63, %cond.end.63, %if.end.84
  %65 = load i8*, i8** %ptr.addr, align 8
  %add.ptr86 = getelementptr i8, i8* %65, i64 2
  store i8* %add.ptr86, i8** %ptr.addr, align 8
  br label %sw.epilog.114

sw.bb.87:                                         ; preds = %cond.end.63
  %66 = load i8*, i8** %end.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast88 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast89 = ptrtoint i8* %67 to i64
  %sub.ptr.sub90 = sub i64 %sub.ptr.lhs.cast88, %sub.ptr.rhs.cast89
  %cmp91 = icmp slt i64 %sub.ptr.sub90, 2
  br i1 %cmp91, label %if.then.93, label %if.end.94

if.then.93:                                       ; preds = %sw.bb.87
  store i32 -2, i32* %retval
  br label %return

if.end.94:                                        ; preds = %sw.bb.87
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %68, i8** %69, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.95:                                         ; preds = %cond.end.63
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast96 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast97 = ptrtoint i8* %71 to i64
  %sub.ptr.sub98 = sub i64 %sub.ptr.lhs.cast96, %sub.ptr.rhs.cast97
  %cmp99 = icmp slt i64 %sub.ptr.sub98, 3
  br i1 %cmp99, label %if.then.101, label %if.end.102

if.then.101:                                      ; preds = %sw.bb.95
  store i32 -2, i32* %retval
  br label %return

if.end.102:                                       ; preds = %sw.bb.95
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.103:                                        ; preds = %cond.end.63
  %74 = load i8*, i8** %end.addr, align 8
  %75 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast104 = ptrtoint i8* %74 to i64
  %sub.ptr.rhs.cast105 = ptrtoint i8* %75 to i64
  %sub.ptr.sub106 = sub i64 %sub.ptr.lhs.cast104, %sub.ptr.rhs.cast105
  %cmp107 = icmp slt i64 %sub.ptr.sub106, 4
  br i1 %cmp107, label %if.then.109, label %if.end.110

if.then.109:                                      ; preds = %sw.bb.103
  store i32 -2, i32* %retval
  br label %return

if.end.110:                                       ; preds = %sw.bb.103
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.111:                                        ; preds = %cond.end.63
  %78 = load i8*, i8** %ptr.addr, align 8
  %add.ptr112 = getelementptr i8, i8* %78, i64 2
  %79 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr112, i8** %79, align 8
  store i32 9, i32* %retval
  br label %return

sw.default.113:                                   ; preds = %cond.end.63
  %80 = load i8*, i8** %ptr.addr, align 8
  %81 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %80, i8** %81, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.114:                                    ; preds = %sw.bb.85
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.113, %sw.bb.111, %if.end.110, %if.then.109, %if.end.102, %if.then.101, %if.end.94, %if.then.93, %if.then.83, %sw.default, %sw.bb.44, %if.end.43, %if.then.42, %if.end.35, %if.then.34, %if.end.27, %if.then.26, %if.then.20, %if.then
  %82 = load i32, i32* %retval
  ret i32 %82
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanCdataSection(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %i = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %end.addr, align 8
  %1 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %0 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp = icmp slt i64 %sub.ptr.sub, 12
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %2, 6
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %3, i64 0
  %4 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %4 to i32
  %cmp2 = icmp eq i32 %conv, 0
  br i1 %cmp2, label %land.lhs.true, label %if.then.10

land.lhs.true:                                    ; preds = %for.body
  %5 = load i8*, i8** %ptr.addr, align 8
  %arrayidx4 = getelementptr i8, i8* %5, i64 1
  %6 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %6 to i32
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %arrayidx6 = getelementptr [6 x i8], [6 x i8]* @big2_scanCdataSection.CDATA_LSQB, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx6, align 1
  %conv7 = sext i8 %8 to i32
  %cmp8 = icmp eq i32 %conv5, %conv7
  br i1 %cmp8, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %land.lhs.true, %for.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %10 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %9, i8** %10, align 8
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %land.lhs.true
  br label %for.inc

for.inc:                                          ; preds = %if.end.11
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  %12 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %12, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %13, i8** %14, align 8
  store i32 8, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.10, %if.then
  %15 = load i32, i32* %retval
  ret i32 %15
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanEndTag(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.22
    i32 24, label %sw.bb.22
    i32 5, label %sw.bb.23
    i32 6, label %sw.bb.28
    i32 7, label %sw.bb.36
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx8, align 1
  %idxprom9 = zext i8 %14 to i64
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  %shl = shl i32 %conv11, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %17 to i32
  %shr = ashr i32 %conv13, 5
  %add = add i32 %shl, %shr
  %idxprom14 = sext i32 %add to i64
  %arrayidx15 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom14
  %18 = load i32, i32* %arrayidx15, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %20 to i32
  %and = and i32 %conv17, 31
  %shl18 = shl i32 1, %and
  %and19 = and i32 %18, %shl18
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end.21, label %if.then.20

if.then.20:                                       ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end.21:                                        ; preds = %sw.bb
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %cond.end, %cond.end, %if.end.21
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.23:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp24 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp24, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %sw.bb.23
  store i32 -2, i32* %retval
  br label %return

if.end.27:                                        ; preds = %sw.bb.23
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.28:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast29 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast30 = ptrtoint i8* %29 to i64
  %sub.ptr.sub31 = sub i64 %sub.ptr.lhs.cast29, %sub.ptr.rhs.cast30
  %cmp32 = icmp slt i64 %sub.ptr.sub31, 3
  br i1 %cmp32, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %sw.bb.28
  store i32 -2, i32* %retval
  br label %return

if.end.35:                                        ; preds = %sw.bb.28
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.36:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast37 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast38 = ptrtoint i8* %33 to i64
  %sub.ptr.sub39 = sub i64 %sub.ptr.lhs.cast37, %sub.ptr.rhs.cast38
  %cmp40 = icmp slt i64 %sub.ptr.sub39, 4
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.36
  store i32 -2, i32* %retval
  br label %return

if.end.43:                                        ; preds = %sw.bb.36
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end
  %36 = load i8*, i8** %ptr.addr, align 8
  %37 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %36, i8** %37, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.22
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.139, %sw.epilog
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8*, i8** %end.addr, align 8
  %cmp44 = icmp ne i8* %38, %39
  br i1 %cmp44, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %40 = load i8*, i8** %ptr.addr, align 8
  %arrayidx46 = getelementptr i8, i8* %40, i64 0
  %41 = load i8, i8* %arrayidx46, align 1
  %conv47 = sext i8 %41 to i32
  %cmp48 = icmp eq i32 %conv47, 0
  br i1 %cmp48, label %cond.true.50, label %cond.false.56

cond.true.50:                                     ; preds = %while.body
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx51 = getelementptr i8, i8* %42, i64 1
  %43 = load i8, i8* %arrayidx51, align 1
  %idxprom52 = zext i8 %43 to i64
  %44 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %45 = bitcast %struct.encoding* %44 to %struct.normal_encoding*
  %type53 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %45, i32 0, i32 1
  %arrayidx54 = getelementptr [256 x i8], [256 x i8]* %type53, i32 0, i64 %idxprom52
  %46 = load i8, i8* %arrayidx54, align 1
  %conv55 = zext i8 %46 to i32
  br label %cond.end.60

cond.false.56:                                    ; preds = %while.body
  %47 = load i8*, i8** %ptr.addr, align 8
  %arrayidx57 = getelementptr i8, i8* %47, i64 0
  %48 = load i8, i8* %arrayidx57, align 1
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx58 = getelementptr i8, i8* %49, i64 1
  %50 = load i8, i8* %arrayidx58, align 1
  %call59 = call i32 @unicode_byte_type(i8 signext %48, i8 signext %50)
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.56, %cond.true.50
  %cond61 = phi i32 [ %conv55, %cond.true.50 ], [ %call59, %cond.false.56 ]
  switch i32 %cond61, label %sw.default.138 [
    i32 29, label %sw.bb.62
    i32 22, label %sw.bb.82
    i32 24, label %sw.bb.82
    i32 25, label %sw.bb.82
    i32 26, label %sw.bb.82
    i32 27, label %sw.bb.82
    i32 5, label %sw.bb.84
    i32 6, label %sw.bb.92
    i32 7, label %sw.bb.100
    i32 21, label %sw.bb.108
    i32 9, label %sw.bb.108
    i32 10, label %sw.bb.108
    i32 23, label %sw.bb.134
    i32 11, label %sw.bb.136
  ]

sw.bb.62:                                         ; preds = %cond.end.60
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx63 = getelementptr i8, i8* %51, i64 0
  %52 = load i8, i8* %arrayidx63, align 1
  %idxprom64 = zext i8 %52 to i64
  %arrayidx65 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom64
  %53 = load i8, i8* %arrayidx65, align 1
  %conv66 = zext i8 %53 to i32
  %shl67 = shl i32 %conv66, 3
  %54 = load i8*, i8** %ptr.addr, align 8
  %arrayidx68 = getelementptr i8, i8* %54, i64 1
  %55 = load i8, i8* %arrayidx68, align 1
  %conv69 = zext i8 %55 to i32
  %shr70 = ashr i32 %conv69, 5
  %add71 = add i32 %shl67, %shr70
  %idxprom72 = sext i32 %add71 to i64
  %arrayidx73 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom72
  %56 = load i32, i32* %arrayidx73, align 4
  %57 = load i8*, i8** %ptr.addr, align 8
  %arrayidx74 = getelementptr i8, i8* %57, i64 1
  %58 = load i8, i8* %arrayidx74, align 1
  %conv75 = zext i8 %58 to i32
  %and76 = and i32 %conv75, 31
  %shl77 = shl i32 1, %and76
  %and78 = and i32 %56, %shl77
  %tobool79 = icmp ne i32 %and78, 0
  br i1 %tobool79, label %if.end.81, label %if.then.80

if.then.80:                                       ; preds = %sw.bb.62
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %59, i8** %60, align 8
  store i32 0, i32* %retval
  br label %return

if.end.81:                                        ; preds = %sw.bb.62
  br label %sw.bb.82

sw.bb.82:                                         ; preds = %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %cond.end.60, %if.end.81
  %61 = load i8*, i8** %ptr.addr, align 8
  %add.ptr83 = getelementptr i8, i8* %61, i64 2
  store i8* %add.ptr83, i8** %ptr.addr, align 8
  br label %sw.epilog.139

sw.bb.84:                                         ; preds = %cond.end.60
  %62 = load i8*, i8** %end.addr, align 8
  %63 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast85 = ptrtoint i8* %62 to i64
  %sub.ptr.rhs.cast86 = ptrtoint i8* %63 to i64
  %sub.ptr.sub87 = sub i64 %sub.ptr.lhs.cast85, %sub.ptr.rhs.cast86
  %cmp88 = icmp slt i64 %sub.ptr.sub87, 2
  br i1 %cmp88, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %sw.bb.84
  store i32 -2, i32* %retval
  br label %return

if.end.91:                                        ; preds = %sw.bb.84
  %64 = load i8*, i8** %ptr.addr, align 8
  %65 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %64, i8** %65, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.92:                                         ; preds = %cond.end.60
  %66 = load i8*, i8** %end.addr, align 8
  %67 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast93 = ptrtoint i8* %66 to i64
  %sub.ptr.rhs.cast94 = ptrtoint i8* %67 to i64
  %sub.ptr.sub95 = sub i64 %sub.ptr.lhs.cast93, %sub.ptr.rhs.cast94
  %cmp96 = icmp slt i64 %sub.ptr.sub95, 3
  br i1 %cmp96, label %if.then.98, label %if.end.99

if.then.98:                                       ; preds = %sw.bb.92
  store i32 -2, i32* %retval
  br label %return

if.end.99:                                        ; preds = %sw.bb.92
  %68 = load i8*, i8** %ptr.addr, align 8
  %69 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %68, i8** %69, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.100:                                        ; preds = %cond.end.60
  %70 = load i8*, i8** %end.addr, align 8
  %71 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast101 = ptrtoint i8* %70 to i64
  %sub.ptr.rhs.cast102 = ptrtoint i8* %71 to i64
  %sub.ptr.sub103 = sub i64 %sub.ptr.lhs.cast101, %sub.ptr.rhs.cast102
  %cmp104 = icmp slt i64 %sub.ptr.sub103, 4
  br i1 %cmp104, label %if.then.106, label %if.end.107

if.then.106:                                      ; preds = %sw.bb.100
  store i32 -2, i32* %retval
  br label %return

if.end.107:                                       ; preds = %sw.bb.100
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %72, i8** %73, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.108:                                        ; preds = %cond.end.60, %cond.end.60, %cond.end.60
  %74 = load i8*, i8** %ptr.addr, align 8
  %add.ptr109 = getelementptr i8, i8* %74, i64 2
  store i8* %add.ptr109, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.bb.108
  %75 = load i8*, i8** %ptr.addr, align 8
  %76 = load i8*, i8** %end.addr, align 8
  %cmp110 = icmp ne i8* %75, %76
  br i1 %cmp110, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %77 = load i8*, i8** %ptr.addr, align 8
  %arrayidx112 = getelementptr i8, i8* %77, i64 0
  %78 = load i8, i8* %arrayidx112, align 1
  %conv113 = sext i8 %78 to i32
  %cmp114 = icmp eq i32 %conv113, 0
  br i1 %cmp114, label %cond.true.116, label %cond.false.122

cond.true.116:                                    ; preds = %for.body
  %79 = load i8*, i8** %ptr.addr, align 8
  %arrayidx117 = getelementptr i8, i8* %79, i64 1
  %80 = load i8, i8* %arrayidx117, align 1
  %idxprom118 = zext i8 %80 to i64
  %81 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %82 = bitcast %struct.encoding* %81 to %struct.normal_encoding*
  %type119 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %82, i32 0, i32 1
  %arrayidx120 = getelementptr [256 x i8], [256 x i8]* %type119, i32 0, i64 %idxprom118
  %83 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %83 to i32
  br label %cond.end.126

cond.false.122:                                   ; preds = %for.body
  %84 = load i8*, i8** %ptr.addr, align 8
  %arrayidx123 = getelementptr i8, i8* %84, i64 0
  %85 = load i8, i8* %arrayidx123, align 1
  %86 = load i8*, i8** %ptr.addr, align 8
  %arrayidx124 = getelementptr i8, i8* %86, i64 1
  %87 = load i8, i8* %arrayidx124, align 1
  %call125 = call i32 @unicode_byte_type(i8 signext %85, i8 signext %87)
  br label %cond.end.126

cond.end.126:                                     ; preds = %cond.false.122, %cond.true.116
  %cond127 = phi i32 [ %conv121, %cond.true.116 ], [ %call125, %cond.false.122 ]
  switch i32 %cond127, label %sw.default.131 [
    i32 21, label %sw.bb.128
    i32 9, label %sw.bb.128
    i32 10, label %sw.bb.128
    i32 11, label %sw.bb.129
  ]

sw.bb.128:                                        ; preds = %cond.end.126, %cond.end.126, %cond.end.126
  br label %sw.epilog.132

sw.bb.129:                                        ; preds = %cond.end.126
  %88 = load i8*, i8** %ptr.addr, align 8
  %add.ptr130 = getelementptr i8, i8* %88, i64 2
  %89 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr130, i8** %89, align 8
  store i32 5, i32* %retval
  br label %return

sw.default.131:                                   ; preds = %cond.end.126
  %90 = load i8*, i8** %ptr.addr, align 8
  %91 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %90, i8** %91, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.132:                                    ; preds = %sw.bb.128
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.132
  %92 = load i8*, i8** %ptr.addr, align 8
  %add.ptr133 = getelementptr i8, i8* %92, i64 2
  store i8* %add.ptr133, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

sw.bb.134:                                        ; preds = %cond.end.60
  %93 = load i8*, i8** %ptr.addr, align 8
  %add.ptr135 = getelementptr i8, i8* %93, i64 2
  store i8* %add.ptr135, i8** %ptr.addr, align 8
  br label %sw.epilog.139

sw.bb.136:                                        ; preds = %cond.end.60
  %94 = load i8*, i8** %ptr.addr, align 8
  %add.ptr137 = getelementptr i8, i8* %94, i64 2
  %95 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr137, i8** %95, align 8
  store i32 5, i32* %retval
  br label %return

sw.default.138:                                   ; preds = %cond.end.60
  %96 = load i8*, i8** %ptr.addr, align 8
  %97 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %96, i8** %97, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.139:                                    ; preds = %sw.bb.134, %sw.bb.82
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.138, %sw.bb.136, %for.end, %sw.default.131, %sw.bb.129, %if.end.107, %if.then.106, %if.end.99, %if.then.98, %if.end.91, %if.then.90, %if.then.80, %sw.default, %if.end.43, %if.then.42, %if.end.35, %if.then.34, %if.end.27, %if.then.26, %if.then.20, %if.then
  %98 = load i32, i32* %retval
  ret i32 %98
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanAtts(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %hadColon = alloca i32, align 4
  %t = alloca i32, align 4
  %open = alloca i32, align 4
  %t177 = alloca i32, align 4
  %tok = alloca i32, align 4
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  store i32 0, i32* %hadColon, align 4
  br label %while.cond

while.cond:                                       ; preds = %sw.epilog.364, %entry
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %while.body
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default.363 [
    i32 29, label %sw.bb
    i32 22, label %sw.bb.20
    i32 24, label %sw.bb.20
    i32 25, label %sw.bb.20
    i32 26, label %sw.bb.20
    i32 27, label %sw.bb.20
    i32 5, label %sw.bb.21
    i32 6, label %sw.bb.26
    i32 7, label %sw.bb.34
    i32 23, label %sw.bb.42
    i32 21, label %sw.bb.113
    i32 9, label %sw.bb.113
    i32 10, label %sw.bb.113
    i32 14, label %sw.bb.142
  ]

sw.bb:                                            ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %13, i64 0
  %14 = load i8, i8* %arrayidx8, align 1
  %idxprom9 = zext i8 %14 to i64
  %arrayidx10 = getelementptr [256 x i8], [256 x i8]* @namePages, i32 0, i64 %idxprom9
  %15 = load i8, i8* %arrayidx10, align 1
  %conv11 = zext i8 %15 to i32
  %shl = shl i32 %conv11, 3
  %16 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %16, i64 1
  %17 = load i8, i8* %arrayidx12, align 1
  %conv13 = zext i8 %17 to i32
  %shr = ashr i32 %conv13, 5
  %add = add i32 %shl, %shr
  %idxprom14 = sext i32 %add to i64
  %arrayidx15 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom14
  %18 = load i32, i32* %arrayidx15, align 4
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx16, align 1
  %conv17 = zext i8 %20 to i32
  %and = and i32 %conv17, 31
  %shl18 = shl i32 1, %and
  %and19 = and i32 %18, %shl18
  %tobool = icmp ne i32 %and19, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.bb
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.bb
  br label %sw.bb.20

sw.bb.20:                                         ; preds = %cond.end, %cond.end, %cond.end, %cond.end, %cond.end, %if.end
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %sw.epilog.364

sw.bb.21:                                         ; preds = %cond.end
  %24 = load i8*, i8** %end.addr, align 8
  %25 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %24 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %25 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %cmp22 = icmp slt i64 %sub.ptr.sub, 2
  br i1 %cmp22, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %sw.bb.21
  store i32 -2, i32* %retval
  br label %return

if.end.25:                                        ; preds = %sw.bb.21
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.26:                                         ; preds = %cond.end
  %28 = load i8*, i8** %end.addr, align 8
  %29 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast27 = ptrtoint i8* %28 to i64
  %sub.ptr.rhs.cast28 = ptrtoint i8* %29 to i64
  %sub.ptr.sub29 = sub i64 %sub.ptr.lhs.cast27, %sub.ptr.rhs.cast28
  %cmp30 = icmp slt i64 %sub.ptr.sub29, 3
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %sw.bb.26
  store i32 -2, i32* %retval
  br label %return

if.end.33:                                        ; preds = %sw.bb.26
  %30 = load i8*, i8** %ptr.addr, align 8
  %31 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %30, i8** %31, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.34:                                         ; preds = %cond.end
  %32 = load i8*, i8** %end.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast35 = ptrtoint i8* %32 to i64
  %sub.ptr.rhs.cast36 = ptrtoint i8* %33 to i64
  %sub.ptr.sub37 = sub i64 %sub.ptr.lhs.cast35, %sub.ptr.rhs.cast36
  %cmp38 = icmp slt i64 %sub.ptr.sub37, 4
  br i1 %cmp38, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %sw.bb.34
  store i32 -2, i32* %retval
  br label %return

if.end.41:                                        ; preds = %sw.bb.34
  %34 = load i8*, i8** %ptr.addr, align 8
  %35 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %34, i8** %35, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.42:                                         ; preds = %cond.end
  %36 = load i32, i32* %hadColon, align 4
  %tobool43 = icmp ne i32 %36, 0
  br i1 %tobool43, label %if.then.44, label %if.end.45

if.then.44:                                       ; preds = %sw.bb.42
  %37 = load i8*, i8** %ptr.addr, align 8
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %37, i8** %38, align 8
  store i32 0, i32* %retval
  br label %return

if.end.45:                                        ; preds = %sw.bb.42
  store i32 1, i32* %hadColon, align 4
  %39 = load i8*, i8** %ptr.addr, align 8
  %add.ptr46 = getelementptr i8, i8* %39, i64 2
  store i8* %add.ptr46, i8** %ptr.addr, align 8
  %40 = load i8*, i8** %ptr.addr, align 8
  %41 = load i8*, i8** %end.addr, align 8
  %cmp47 = icmp eq i8* %40, %41
  br i1 %cmp47, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %if.end.45
  store i32 -1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %if.end.45
  %42 = load i8*, i8** %ptr.addr, align 8
  %arrayidx51 = getelementptr i8, i8* %42, i64 0
  %43 = load i8, i8* %arrayidx51, align 1
  %conv52 = sext i8 %43 to i32
  %cmp53 = icmp eq i32 %conv52, 0
  br i1 %cmp53, label %cond.true.55, label %cond.false.61

cond.true.55:                                     ; preds = %if.end.50
  %44 = load i8*, i8** %ptr.addr, align 8
  %arrayidx56 = getelementptr i8, i8* %44, i64 1
  %45 = load i8, i8* %arrayidx56, align 1
  %idxprom57 = zext i8 %45 to i64
  %46 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %47 = bitcast %struct.encoding* %46 to %struct.normal_encoding*
  %type58 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %47, i32 0, i32 1
  %arrayidx59 = getelementptr [256 x i8], [256 x i8]* %type58, i32 0, i64 %idxprom57
  %48 = load i8, i8* %arrayidx59, align 1
  %conv60 = zext i8 %48 to i32
  br label %cond.end.65

cond.false.61:                                    ; preds = %if.end.50
  %49 = load i8*, i8** %ptr.addr, align 8
  %arrayidx62 = getelementptr i8, i8* %49, i64 0
  %50 = load i8, i8* %arrayidx62, align 1
  %51 = load i8*, i8** %ptr.addr, align 8
  %arrayidx63 = getelementptr i8, i8* %51, i64 1
  %52 = load i8, i8* %arrayidx63, align 1
  %call64 = call i32 @unicode_byte_type(i8 signext %50, i8 signext %52)
  br label %cond.end.65

cond.end.65:                                      ; preds = %cond.false.61, %cond.true.55
  %cond66 = phi i32 [ %conv60, %cond.true.55 ], [ %call64, %cond.false.61 ]
  switch i32 %cond66, label %sw.default [
    i32 29, label %sw.bb.67
    i32 22, label %sw.bb.87
    i32 24, label %sw.bb.87
    i32 5, label %sw.bb.89
    i32 6, label %sw.bb.97
    i32 7, label %sw.bb.105
  ]

sw.bb.67:                                         ; preds = %cond.end.65
  %53 = load i8*, i8** %ptr.addr, align 8
  %arrayidx68 = getelementptr i8, i8* %53, i64 0
  %54 = load i8, i8* %arrayidx68, align 1
  %idxprom69 = zext i8 %54 to i64
  %arrayidx70 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom69
  %55 = load i8, i8* %arrayidx70, align 1
  %conv71 = zext i8 %55 to i32
  %shl72 = shl i32 %conv71, 3
  %56 = load i8*, i8** %ptr.addr, align 8
  %arrayidx73 = getelementptr i8, i8* %56, i64 1
  %57 = load i8, i8* %arrayidx73, align 1
  %conv74 = zext i8 %57 to i32
  %shr75 = ashr i32 %conv74, 5
  %add76 = add i32 %shl72, %shr75
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom77
  %58 = load i32, i32* %arrayidx78, align 4
  %59 = load i8*, i8** %ptr.addr, align 8
  %arrayidx79 = getelementptr i8, i8* %59, i64 1
  %60 = load i8, i8* %arrayidx79, align 1
  %conv80 = zext i8 %60 to i32
  %and81 = and i32 %conv80, 31
  %shl82 = shl i32 1, %and81
  %and83 = and i32 %58, %shl82
  %tobool84 = icmp ne i32 %and83, 0
  br i1 %tobool84, label %if.end.86, label %if.then.85

if.then.85:                                       ; preds = %sw.bb.67
  %61 = load i8*, i8** %ptr.addr, align 8
  %62 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %61, i8** %62, align 8
  store i32 0, i32* %retval
  br label %return

if.end.86:                                        ; preds = %sw.bb.67
  br label %sw.bb.87

sw.bb.87:                                         ; preds = %cond.end.65, %cond.end.65, %if.end.86
  %63 = load i8*, i8** %ptr.addr, align 8
  %add.ptr88 = getelementptr i8, i8* %63, i64 2
  store i8* %add.ptr88, i8** %ptr.addr, align 8
  br label %sw.epilog

sw.bb.89:                                         ; preds = %cond.end.65
  %64 = load i8*, i8** %end.addr, align 8
  %65 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast90 = ptrtoint i8* %64 to i64
  %sub.ptr.rhs.cast91 = ptrtoint i8* %65 to i64
  %sub.ptr.sub92 = sub i64 %sub.ptr.lhs.cast90, %sub.ptr.rhs.cast91
  %cmp93 = icmp slt i64 %sub.ptr.sub92, 2
  br i1 %cmp93, label %if.then.95, label %if.end.96

if.then.95:                                       ; preds = %sw.bb.89
  store i32 -2, i32* %retval
  br label %return

if.end.96:                                        ; preds = %sw.bb.89
  %66 = load i8*, i8** %ptr.addr, align 8
  %67 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %66, i8** %67, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.97:                                         ; preds = %cond.end.65
  %68 = load i8*, i8** %end.addr, align 8
  %69 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast98 = ptrtoint i8* %68 to i64
  %sub.ptr.rhs.cast99 = ptrtoint i8* %69 to i64
  %sub.ptr.sub100 = sub i64 %sub.ptr.lhs.cast98, %sub.ptr.rhs.cast99
  %cmp101 = icmp slt i64 %sub.ptr.sub100, 3
  br i1 %cmp101, label %if.then.103, label %if.end.104

if.then.103:                                      ; preds = %sw.bb.97
  store i32 -2, i32* %retval
  br label %return

if.end.104:                                       ; preds = %sw.bb.97
  %70 = load i8*, i8** %ptr.addr, align 8
  %71 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %70, i8** %71, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.105:                                        ; preds = %cond.end.65
  %72 = load i8*, i8** %end.addr, align 8
  %73 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast106 = ptrtoint i8* %72 to i64
  %sub.ptr.rhs.cast107 = ptrtoint i8* %73 to i64
  %sub.ptr.sub108 = sub i64 %sub.ptr.lhs.cast106, %sub.ptr.rhs.cast107
  %cmp109 = icmp slt i64 %sub.ptr.sub108, 4
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %sw.bb.105
  store i32 -2, i32* %retval
  br label %return

if.end.112:                                       ; preds = %sw.bb.105
  %74 = load i8*, i8** %ptr.addr, align 8
  %75 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %74, i8** %75, align 8
  store i32 0, i32* %retval
  br label %return

sw.default:                                       ; preds = %cond.end.65
  %76 = load i8*, i8** %ptr.addr, align 8
  %77 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %76, i8** %77, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb.87
  br label %sw.epilog.364

sw.bb.113:                                        ; preds = %cond.end, %cond.end, %cond.end
  br label %for.cond

for.cond:                                         ; preds = %sw.epilog.141, %sw.bb.113
  %78 = load i8*, i8** %ptr.addr, align 8
  %add.ptr114 = getelementptr i8, i8* %78, i64 2
  store i8* %add.ptr114, i8** %ptr.addr, align 8
  %79 = load i8*, i8** %ptr.addr, align 8
  %80 = load i8*, i8** %end.addr, align 8
  %cmp115 = icmp eq i8* %79, %80
  br i1 %cmp115, label %if.then.117, label %if.end.118

if.then.117:                                      ; preds = %for.cond
  store i32 -1, i32* %retval
  br label %return

if.end.118:                                       ; preds = %for.cond
  %81 = load i8*, i8** %ptr.addr, align 8
  %arrayidx119 = getelementptr i8, i8* %81, i64 0
  %82 = load i8, i8* %arrayidx119, align 1
  %conv120 = sext i8 %82 to i32
  %cmp121 = icmp eq i32 %conv120, 0
  br i1 %cmp121, label %cond.true.123, label %cond.false.129

cond.true.123:                                    ; preds = %if.end.118
  %83 = load i8*, i8** %ptr.addr, align 8
  %arrayidx124 = getelementptr i8, i8* %83, i64 1
  %84 = load i8, i8* %arrayidx124, align 1
  %idxprom125 = zext i8 %84 to i64
  %85 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %86 = bitcast %struct.encoding* %85 to %struct.normal_encoding*
  %type126 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %86, i32 0, i32 1
  %arrayidx127 = getelementptr [256 x i8], [256 x i8]* %type126, i32 0, i64 %idxprom125
  %87 = load i8, i8* %arrayidx127, align 1
  %conv128 = zext i8 %87 to i32
  br label %cond.end.133

cond.false.129:                                   ; preds = %if.end.118
  %88 = load i8*, i8** %ptr.addr, align 8
  %arrayidx130 = getelementptr i8, i8* %88, i64 0
  %89 = load i8, i8* %arrayidx130, align 1
  %90 = load i8*, i8** %ptr.addr, align 8
  %arrayidx131 = getelementptr i8, i8* %90, i64 1
  %91 = load i8, i8* %arrayidx131, align 1
  %call132 = call i32 @unicode_byte_type(i8 signext %89, i8 signext %91)
  br label %cond.end.133

cond.end.133:                                     ; preds = %cond.false.129, %cond.true.123
  %cond134 = phi i32 [ %conv128, %cond.true.123 ], [ %call132, %cond.false.129 ]
  store i32 %cond134, i32* %t, align 4
  %92 = load i32, i32* %t, align 4
  %cmp135 = icmp eq i32 %92, 14
  br i1 %cmp135, label %if.then.137, label %if.end.138

if.then.137:                                      ; preds = %cond.end.133
  br label %for.end

if.end.138:                                       ; preds = %cond.end.133
  %93 = load i32, i32* %t, align 4
  switch i32 %93, label %sw.default.140 [
    i32 21, label %sw.bb.139
    i32 10, label %sw.bb.139
    i32 9, label %sw.bb.139
  ]

sw.bb.139:                                        ; preds = %if.end.138, %if.end.138, %if.end.138
  br label %sw.epilog.141

sw.default.140:                                   ; preds = %if.end.138
  %94 = load i8*, i8** %ptr.addr, align 8
  %95 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %94, i8** %95, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.141:                                    ; preds = %sw.bb.139
  br label %for.cond

for.end:                                          ; preds = %if.then.137
  br label %sw.bb.142

sw.bb.142:                                        ; preds = %cond.end, %for.end
  store i32 0, i32* %hadColon, align 4
  br label %for.cond.143

for.cond.143:                                     ; preds = %sw.epilog.173, %sw.bb.142
  %96 = load i8*, i8** %ptr.addr, align 8
  %add.ptr144 = getelementptr i8, i8* %96, i64 2
  store i8* %add.ptr144, i8** %ptr.addr, align 8
  %97 = load i8*, i8** %ptr.addr, align 8
  %98 = load i8*, i8** %end.addr, align 8
  %cmp145 = icmp eq i8* %97, %98
  br i1 %cmp145, label %if.then.147, label %if.end.148

if.then.147:                                      ; preds = %for.cond.143
  store i32 -1, i32* %retval
  br label %return

if.end.148:                                       ; preds = %for.cond.143
  %99 = load i8*, i8** %ptr.addr, align 8
  %arrayidx149 = getelementptr i8, i8* %99, i64 0
  %100 = load i8, i8* %arrayidx149, align 1
  %conv150 = sext i8 %100 to i32
  %cmp151 = icmp eq i32 %conv150, 0
  br i1 %cmp151, label %cond.true.153, label %cond.false.159

cond.true.153:                                    ; preds = %if.end.148
  %101 = load i8*, i8** %ptr.addr, align 8
  %arrayidx154 = getelementptr i8, i8* %101, i64 1
  %102 = load i8, i8* %arrayidx154, align 1
  %idxprom155 = zext i8 %102 to i64
  %103 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %104 = bitcast %struct.encoding* %103 to %struct.normal_encoding*
  %type156 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %104, i32 0, i32 1
  %arrayidx157 = getelementptr [256 x i8], [256 x i8]* %type156, i32 0, i64 %idxprom155
  %105 = load i8, i8* %arrayidx157, align 1
  %conv158 = zext i8 %105 to i32
  br label %cond.end.163

cond.false.159:                                   ; preds = %if.end.148
  %106 = load i8*, i8** %ptr.addr, align 8
  %arrayidx160 = getelementptr i8, i8* %106, i64 0
  %107 = load i8, i8* %arrayidx160, align 1
  %108 = load i8*, i8** %ptr.addr, align 8
  %arrayidx161 = getelementptr i8, i8* %108, i64 1
  %109 = load i8, i8* %arrayidx161, align 1
  %call162 = call i32 @unicode_byte_type(i8 signext %107, i8 signext %109)
  br label %cond.end.163

cond.end.163:                                     ; preds = %cond.false.159, %cond.true.153
  %cond164 = phi i32 [ %conv158, %cond.true.153 ], [ %call162, %cond.false.159 ]
  store i32 %cond164, i32* %open, align 4
  %110 = load i32, i32* %open, align 4
  %cmp165 = icmp eq i32 %110, 12
  br i1 %cmp165, label %if.then.169, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.end.163
  %111 = load i32, i32* %open, align 4
  %cmp167 = icmp eq i32 %111, 13
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %lor.lhs.false, %cond.end.163
  br label %for.end.174

if.end.170:                                       ; preds = %lor.lhs.false
  %112 = load i32, i32* %open, align 4
  switch i32 %112, label %sw.default.172 [
    i32 21, label %sw.bb.171
    i32 10, label %sw.bb.171
    i32 9, label %sw.bb.171
  ]

sw.bb.171:                                        ; preds = %if.end.170, %if.end.170, %if.end.170
  br label %sw.epilog.173

sw.default.172:                                   ; preds = %if.end.170
  %113 = load i8*, i8** %ptr.addr, align 8
  %114 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %113, i8** %114, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.173:                                    ; preds = %sw.bb.171
  br label %for.cond.143

for.end.174:                                      ; preds = %if.then.169
  %115 = load i8*, i8** %ptr.addr, align 8
  %add.ptr175 = getelementptr i8, i8* %115, i64 2
  store i8* %add.ptr175, i8** %ptr.addr, align 8
  br label %for.cond.176

for.cond.176:                                     ; preds = %sw.epilog.244, %for.end.174
  %116 = load i8*, i8** %ptr.addr, align 8
  %117 = load i8*, i8** %end.addr, align 8
  %cmp178 = icmp eq i8* %116, %117
  br i1 %cmp178, label %if.then.180, label %if.end.181

if.then.180:                                      ; preds = %for.cond.176
  store i32 -1, i32* %retval
  br label %return

if.end.181:                                       ; preds = %for.cond.176
  %118 = load i8*, i8** %ptr.addr, align 8
  %arrayidx182 = getelementptr i8, i8* %118, i64 0
  %119 = load i8, i8* %arrayidx182, align 1
  %conv183 = sext i8 %119 to i32
  %cmp184 = icmp eq i32 %conv183, 0
  br i1 %cmp184, label %cond.true.186, label %cond.false.192

cond.true.186:                                    ; preds = %if.end.181
  %120 = load i8*, i8** %ptr.addr, align 8
  %arrayidx187 = getelementptr i8, i8* %120, i64 1
  %121 = load i8, i8* %arrayidx187, align 1
  %idxprom188 = zext i8 %121 to i64
  %122 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %123 = bitcast %struct.encoding* %122 to %struct.normal_encoding*
  %type189 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %123, i32 0, i32 1
  %arrayidx190 = getelementptr [256 x i8], [256 x i8]* %type189, i32 0, i64 %idxprom188
  %124 = load i8, i8* %arrayidx190, align 1
  %conv191 = zext i8 %124 to i32
  br label %cond.end.196

cond.false.192:                                   ; preds = %if.end.181
  %125 = load i8*, i8** %ptr.addr, align 8
  %arrayidx193 = getelementptr i8, i8* %125, i64 0
  %126 = load i8, i8* %arrayidx193, align 1
  %127 = load i8*, i8** %ptr.addr, align 8
  %arrayidx194 = getelementptr i8, i8* %127, i64 1
  %128 = load i8, i8* %arrayidx194, align 1
  %call195 = call i32 @unicode_byte_type(i8 signext %126, i8 signext %128)
  br label %cond.end.196

cond.end.196:                                     ; preds = %cond.false.192, %cond.true.186
  %cond197 = phi i32 [ %conv191, %cond.true.186 ], [ %call195, %cond.false.192 ]
  store i32 %cond197, i32* %t177, align 4
  %129 = load i32, i32* %t177, align 4
  %130 = load i32, i32* %open, align 4
  %cmp198 = icmp eq i32 %129, %130
  br i1 %cmp198, label %if.then.200, label %if.end.201

if.then.200:                                      ; preds = %cond.end.196
  br label %for.end.245

if.end.201:                                       ; preds = %cond.end.196
  %131 = load i32, i32* %t177, align 4
  switch i32 %131, label %sw.default.242 [
    i32 5, label %sw.bb.202
    i32 6, label %sw.bb.211
    i32 7, label %sw.bb.220
    i32 0, label %sw.bb.229
    i32 1, label %sw.bb.229
    i32 8, label %sw.bb.229
    i32 3, label %sw.bb.230
    i32 2, label %sw.bb.241
  ]

sw.bb.202:                                        ; preds = %if.end.201
  %132 = load i8*, i8** %end.addr, align 8
  %133 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast203 = ptrtoint i8* %132 to i64
  %sub.ptr.rhs.cast204 = ptrtoint i8* %133 to i64
  %sub.ptr.sub205 = sub i64 %sub.ptr.lhs.cast203, %sub.ptr.rhs.cast204
  %cmp206 = icmp slt i64 %sub.ptr.sub205, 2
  br i1 %cmp206, label %if.then.208, label %if.end.209

if.then.208:                                      ; preds = %sw.bb.202
  store i32 -2, i32* %retval
  br label %return

if.end.209:                                       ; preds = %sw.bb.202
  %134 = load i8*, i8** %ptr.addr, align 8
  %add.ptr210 = getelementptr i8, i8* %134, i64 2
  store i8* %add.ptr210, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.bb.211:                                        ; preds = %if.end.201
  %135 = load i8*, i8** %end.addr, align 8
  %136 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast212 = ptrtoint i8* %135 to i64
  %sub.ptr.rhs.cast213 = ptrtoint i8* %136 to i64
  %sub.ptr.sub214 = sub i64 %sub.ptr.lhs.cast212, %sub.ptr.rhs.cast213
  %cmp215 = icmp slt i64 %sub.ptr.sub214, 3
  br i1 %cmp215, label %if.then.217, label %if.end.218

if.then.217:                                      ; preds = %sw.bb.211
  store i32 -2, i32* %retval
  br label %return

if.end.218:                                       ; preds = %sw.bb.211
  %137 = load i8*, i8** %ptr.addr, align 8
  %add.ptr219 = getelementptr i8, i8* %137, i64 3
  store i8* %add.ptr219, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.bb.220:                                        ; preds = %if.end.201
  %138 = load i8*, i8** %end.addr, align 8
  %139 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast221 = ptrtoint i8* %138 to i64
  %sub.ptr.rhs.cast222 = ptrtoint i8* %139 to i64
  %sub.ptr.sub223 = sub i64 %sub.ptr.lhs.cast221, %sub.ptr.rhs.cast222
  %cmp224 = icmp slt i64 %sub.ptr.sub223, 4
  br i1 %cmp224, label %if.then.226, label %if.end.227

if.then.226:                                      ; preds = %sw.bb.220
  store i32 -2, i32* %retval
  br label %return

if.end.227:                                       ; preds = %sw.bb.220
  %140 = load i8*, i8** %ptr.addr, align 8
  %add.ptr228 = getelementptr i8, i8* %140, i64 4
  store i8* %add.ptr228, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.bb.229:                                        ; preds = %if.end.201, %if.end.201, %if.end.201
  %141 = load i8*, i8** %ptr.addr, align 8
  %142 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %141, i8** %142, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.230:                                        ; preds = %if.end.201
  %143 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %144 = load i8*, i8** %ptr.addr, align 8
  %add.ptr231 = getelementptr i8, i8* %144, i64 2
  %145 = load i8*, i8** %end.addr, align 8
  %call232 = call i32 @big2_scanRef(%struct.encoding* %143, i8* %add.ptr231, i8* %145, i8** %ptr.addr)
  store i32 %call232, i32* %tok, align 4
  %146 = load i32, i32* %tok, align 4
  %cmp233 = icmp sle i32 %146, 0
  br i1 %cmp233, label %if.then.235, label %if.end.240

if.then.235:                                      ; preds = %sw.bb.230
  %147 = load i32, i32* %tok, align 4
  %cmp236 = icmp eq i32 %147, 0
  br i1 %cmp236, label %if.then.238, label %if.end.239

if.then.238:                                      ; preds = %if.then.235
  %148 = load i8*, i8** %ptr.addr, align 8
  %149 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %148, i8** %149, align 8
  br label %if.end.239

if.end.239:                                       ; preds = %if.then.238, %if.then.235
  %150 = load i32, i32* %tok, align 4
  store i32 %150, i32* %retval
  br label %return

if.end.240:                                       ; preds = %sw.bb.230
  br label %sw.epilog.244

sw.bb.241:                                        ; preds = %if.end.201
  %151 = load i8*, i8** %ptr.addr, align 8
  %152 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %151, i8** %152, align 8
  store i32 0, i32* %retval
  br label %return

sw.default.242:                                   ; preds = %if.end.201
  %153 = load i8*, i8** %ptr.addr, align 8
  %add.ptr243 = getelementptr i8, i8* %153, i64 2
  store i8* %add.ptr243, i8** %ptr.addr, align 8
  br label %sw.epilog.244

sw.epilog.244:                                    ; preds = %sw.default.242, %if.end.240, %if.end.227, %if.end.218, %if.end.209
  br label %for.cond.176

for.end.245:                                      ; preds = %if.then.200
  %154 = load i8*, i8** %ptr.addr, align 8
  %add.ptr246 = getelementptr i8, i8* %154, i64 2
  store i8* %add.ptr246, i8** %ptr.addr, align 8
  %155 = load i8*, i8** %ptr.addr, align 8
  %156 = load i8*, i8** %end.addr, align 8
  %cmp247 = icmp eq i8* %155, %156
  br i1 %cmp247, label %if.then.249, label %if.end.250

if.then.249:                                      ; preds = %for.end.245
  store i32 -1, i32* %retval
  br label %return

if.end.250:                                       ; preds = %for.end.245
  %157 = load i8*, i8** %ptr.addr, align 8
  %arrayidx251 = getelementptr i8, i8* %157, i64 0
  %158 = load i8, i8* %arrayidx251, align 1
  %conv252 = sext i8 %158 to i32
  %cmp253 = icmp eq i32 %conv252, 0
  br i1 %cmp253, label %cond.true.255, label %cond.false.261

cond.true.255:                                    ; preds = %if.end.250
  %159 = load i8*, i8** %ptr.addr, align 8
  %arrayidx256 = getelementptr i8, i8* %159, i64 1
  %160 = load i8, i8* %arrayidx256, align 1
  %idxprom257 = zext i8 %160 to i64
  %161 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %162 = bitcast %struct.encoding* %161 to %struct.normal_encoding*
  %type258 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %162, i32 0, i32 1
  %arrayidx259 = getelementptr [256 x i8], [256 x i8]* %type258, i32 0, i64 %idxprom257
  %163 = load i8, i8* %arrayidx259, align 1
  %conv260 = zext i8 %163 to i32
  br label %cond.end.265

cond.false.261:                                   ; preds = %if.end.250
  %164 = load i8*, i8** %ptr.addr, align 8
  %arrayidx262 = getelementptr i8, i8* %164, i64 0
  %165 = load i8, i8* %arrayidx262, align 1
  %166 = load i8*, i8** %ptr.addr, align 8
  %arrayidx263 = getelementptr i8, i8* %166, i64 1
  %167 = load i8, i8* %arrayidx263, align 1
  %call264 = call i32 @unicode_byte_type(i8 signext %165, i8 signext %167)
  br label %cond.end.265

cond.end.265:                                     ; preds = %cond.false.261, %cond.true.255
  %cond266 = phi i32 [ %conv260, %cond.true.255 ], [ %call264, %cond.false.261 ]
  switch i32 %cond266, label %sw.default.270 [
    i32 21, label %sw.bb.267
    i32 9, label %sw.bb.267
    i32 10, label %sw.bb.267
    i32 17, label %sw.bb.268
    i32 11, label %sw.bb.269
  ]

sw.bb.267:                                        ; preds = %cond.end.265, %cond.end.265, %cond.end.265
  br label %sw.epilog.271

sw.bb.268:                                        ; preds = %cond.end.265
  br label %sol

sw.bb.269:                                        ; preds = %cond.end.265
  br label %gt

sw.default.270:                                   ; preds = %cond.end.265
  %168 = load i8*, i8** %ptr.addr, align 8
  %169 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %168, i8** %169, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.271:                                    ; preds = %sw.bb.267
  br label %for.cond.272

for.cond.272:                                     ; preds = %sw.bb.340, %sw.epilog.271
  %170 = load i8*, i8** %ptr.addr, align 8
  %add.ptr273 = getelementptr i8, i8* %170, i64 2
  store i8* %add.ptr273, i8** %ptr.addr, align 8
  %171 = load i8*, i8** %ptr.addr, align 8
  %172 = load i8*, i8** %end.addr, align 8
  %cmp274 = icmp eq i8* %171, %172
  br i1 %cmp274, label %if.then.276, label %if.end.277

if.then.276:                                      ; preds = %for.cond.272
  store i32 -1, i32* %retval
  br label %return

if.end.277:                                       ; preds = %for.cond.272
  %173 = load i8*, i8** %ptr.addr, align 8
  %arrayidx278 = getelementptr i8, i8* %173, i64 0
  %174 = load i8, i8* %arrayidx278, align 1
  %conv279 = sext i8 %174 to i32
  %cmp280 = icmp eq i32 %conv279, 0
  br i1 %cmp280, label %cond.true.282, label %cond.false.288

cond.true.282:                                    ; preds = %if.end.277
  %175 = load i8*, i8** %ptr.addr, align 8
  %arrayidx283 = getelementptr i8, i8* %175, i64 1
  %176 = load i8, i8* %arrayidx283, align 1
  %idxprom284 = zext i8 %176 to i64
  %177 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %178 = bitcast %struct.encoding* %177 to %struct.normal_encoding*
  %type285 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %178, i32 0, i32 1
  %arrayidx286 = getelementptr [256 x i8], [256 x i8]* %type285, i32 0, i64 %idxprom284
  %179 = load i8, i8* %arrayidx286, align 1
  %conv287 = zext i8 %179 to i32
  br label %cond.end.292

cond.false.288:                                   ; preds = %if.end.277
  %180 = load i8*, i8** %ptr.addr, align 8
  %arrayidx289 = getelementptr i8, i8* %180, i64 0
  %181 = load i8, i8* %arrayidx289, align 1
  %182 = load i8*, i8** %ptr.addr, align 8
  %arrayidx290 = getelementptr i8, i8* %182, i64 1
  %183 = load i8, i8* %arrayidx290, align 1
  %call291 = call i32 @unicode_byte_type(i8 signext %181, i8 signext %183)
  br label %cond.end.292

cond.end.292:                                     ; preds = %cond.false.288, %cond.true.282
  %cond293 = phi i32 [ %conv287, %cond.true.282 ], [ %call291, %cond.false.288 ]
  switch i32 %cond293, label %sw.default.360 [
    i32 29, label %sw.bb.294
    i32 22, label %sw.bb.314
    i32 24, label %sw.bb.314
    i32 5, label %sw.bb.316
    i32 6, label %sw.bb.324
    i32 7, label %sw.bb.332
    i32 21, label %sw.bb.340
    i32 9, label %sw.bb.340
    i32 10, label %sw.bb.340
    i32 11, label %sw.bb.341
    i32 17, label %sw.bb.343
  ]

sw.bb.294:                                        ; preds = %cond.end.292
  %184 = load i8*, i8** %ptr.addr, align 8
  %arrayidx295 = getelementptr i8, i8* %184, i64 0
  %185 = load i8, i8* %arrayidx295, align 1
  %idxprom296 = zext i8 %185 to i64
  %arrayidx297 = getelementptr [256 x i8], [256 x i8]* @nmstrtPages, i32 0, i64 %idxprom296
  %186 = load i8, i8* %arrayidx297, align 1
  %conv298 = zext i8 %186 to i32
  %shl299 = shl i32 %conv298, 3
  %187 = load i8*, i8** %ptr.addr, align 8
  %arrayidx300 = getelementptr i8, i8* %187, i64 1
  %188 = load i8, i8* %arrayidx300, align 1
  %conv301 = zext i8 %188 to i32
  %shr302 = ashr i32 %conv301, 5
  %add303 = add i32 %shl299, %shr302
  %idxprom304 = sext i32 %add303 to i64
  %arrayidx305 = getelementptr [320 x i32], [320 x i32]* @namingBitmap, i32 0, i64 %idxprom304
  %189 = load i32, i32* %arrayidx305, align 4
  %190 = load i8*, i8** %ptr.addr, align 8
  %arrayidx306 = getelementptr i8, i8* %190, i64 1
  %191 = load i8, i8* %arrayidx306, align 1
  %conv307 = zext i8 %191 to i32
  %and308 = and i32 %conv307, 31
  %shl309 = shl i32 1, %and308
  %and310 = and i32 %189, %shl309
  %tobool311 = icmp ne i32 %and310, 0
  br i1 %tobool311, label %if.end.313, label %if.then.312

if.then.312:                                      ; preds = %sw.bb.294
  %192 = load i8*, i8** %ptr.addr, align 8
  %193 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %192, i8** %193, align 8
  store i32 0, i32* %retval
  br label %return

if.end.313:                                       ; preds = %sw.bb.294
  br label %sw.bb.314

sw.bb.314:                                        ; preds = %cond.end.292, %cond.end.292, %if.end.313
  %194 = load i8*, i8** %ptr.addr, align 8
  %add.ptr315 = getelementptr i8, i8* %194, i64 2
  store i8* %add.ptr315, i8** %ptr.addr, align 8
  br label %sw.epilog.361

sw.bb.316:                                        ; preds = %cond.end.292
  %195 = load i8*, i8** %end.addr, align 8
  %196 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast317 = ptrtoint i8* %195 to i64
  %sub.ptr.rhs.cast318 = ptrtoint i8* %196 to i64
  %sub.ptr.sub319 = sub i64 %sub.ptr.lhs.cast317, %sub.ptr.rhs.cast318
  %cmp320 = icmp slt i64 %sub.ptr.sub319, 2
  br i1 %cmp320, label %if.then.322, label %if.end.323

if.then.322:                                      ; preds = %sw.bb.316
  store i32 -2, i32* %retval
  br label %return

if.end.323:                                       ; preds = %sw.bb.316
  %197 = load i8*, i8** %ptr.addr, align 8
  %198 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %197, i8** %198, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.324:                                        ; preds = %cond.end.292
  %199 = load i8*, i8** %end.addr, align 8
  %200 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast325 = ptrtoint i8* %199 to i64
  %sub.ptr.rhs.cast326 = ptrtoint i8* %200 to i64
  %sub.ptr.sub327 = sub i64 %sub.ptr.lhs.cast325, %sub.ptr.rhs.cast326
  %cmp328 = icmp slt i64 %sub.ptr.sub327, 3
  br i1 %cmp328, label %if.then.330, label %if.end.331

if.then.330:                                      ; preds = %sw.bb.324
  store i32 -2, i32* %retval
  br label %return

if.end.331:                                       ; preds = %sw.bb.324
  %201 = load i8*, i8** %ptr.addr, align 8
  %202 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %201, i8** %202, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.332:                                        ; preds = %cond.end.292
  %203 = load i8*, i8** %end.addr, align 8
  %204 = load i8*, i8** %ptr.addr, align 8
  %sub.ptr.lhs.cast333 = ptrtoint i8* %203 to i64
  %sub.ptr.rhs.cast334 = ptrtoint i8* %204 to i64
  %sub.ptr.sub335 = sub i64 %sub.ptr.lhs.cast333, %sub.ptr.rhs.cast334
  %cmp336 = icmp slt i64 %sub.ptr.sub335, 4
  br i1 %cmp336, label %if.then.338, label %if.end.339

if.then.338:                                      ; preds = %sw.bb.332
  store i32 -2, i32* %retval
  br label %return

if.end.339:                                       ; preds = %sw.bb.332
  %205 = load i8*, i8** %ptr.addr, align 8
  %206 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %205, i8** %206, align 8
  store i32 0, i32* %retval
  br label %return

sw.bb.340:                                        ; preds = %cond.end.292, %cond.end.292, %cond.end.292
  br label %for.cond.272

sw.bb.341:                                        ; preds = %cond.end.292
  br label %gt

gt:                                               ; preds = %sw.bb.341, %sw.bb.269
  %207 = load i8*, i8** %ptr.addr, align 8
  %add.ptr342 = getelementptr i8, i8* %207, i64 2
  %208 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr342, i8** %208, align 8
  store i32 1, i32* %retval
  br label %return

sw.bb.343:                                        ; preds = %cond.end.292
  br label %sol

sol:                                              ; preds = %sw.bb.343, %sw.bb.268
  %209 = load i8*, i8** %ptr.addr, align 8
  %add.ptr344 = getelementptr i8, i8* %209, i64 2
  store i8* %add.ptr344, i8** %ptr.addr, align 8
  %210 = load i8*, i8** %ptr.addr, align 8
  %211 = load i8*, i8** %end.addr, align 8
  %cmp345 = icmp eq i8* %210, %211
  br i1 %cmp345, label %if.then.347, label %if.end.348

if.then.347:                                      ; preds = %sol
  store i32 -1, i32* %retval
  br label %return

if.end.348:                                       ; preds = %sol
  %212 = load i8*, i8** %ptr.addr, align 8
  %arrayidx349 = getelementptr i8, i8* %212, i64 0
  %213 = load i8, i8* %arrayidx349, align 1
  %conv350 = sext i8 %213 to i32
  %cmp351 = icmp eq i32 %conv350, 0
  br i1 %cmp351, label %land.lhs.true, label %if.then.357

land.lhs.true:                                    ; preds = %if.end.348
  %214 = load i8*, i8** %ptr.addr, align 8
  %arrayidx353 = getelementptr i8, i8* %214, i64 1
  %215 = load i8, i8* %arrayidx353, align 1
  %conv354 = sext i8 %215 to i32
  %cmp355 = icmp eq i32 %conv354, 62
  br i1 %cmp355, label %if.end.358, label %if.then.357

if.then.357:                                      ; preds = %land.lhs.true, %if.end.348
  %216 = load i8*, i8** %ptr.addr, align 8
  %217 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %216, i8** %217, align 8
  store i32 0, i32* %retval
  br label %return

if.end.358:                                       ; preds = %land.lhs.true
  %218 = load i8*, i8** %ptr.addr, align 8
  %add.ptr359 = getelementptr i8, i8* %218, i64 2
  %219 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr359, i8** %219, align 8
  store i32 3, i32* %retval
  br label %return

sw.default.360:                                   ; preds = %cond.end.292
  %220 = load i8*, i8** %ptr.addr, align 8
  %221 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %220, i8** %221, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.361:                                    ; preds = %sw.bb.314
  br label %for.end.362

for.end.362:                                      ; preds = %sw.epilog.361
  br label %sw.epilog.364

sw.default.363:                                   ; preds = %cond.end
  %222 = load i8*, i8** %ptr.addr, align 8
  %223 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %222, i8** %223, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.364:                                    ; preds = %for.end.362, %sw.epilog, %sw.bb.20
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %while.end, %sw.default.363, %sw.default.360, %if.end.358, %if.then.357, %if.then.347, %gt, %if.end.339, %if.then.338, %if.end.331, %if.then.330, %if.end.323, %if.then.322, %if.then.312, %if.then.276, %sw.default.270, %if.then.249, %sw.bb.241, %if.end.239, %sw.bb.229, %if.then.226, %if.then.217, %if.then.208, %if.then.180, %sw.default.172, %if.then.147, %sw.default.140, %if.then.117, %sw.default, %if.end.112, %if.then.111, %if.end.104, %if.then.103, %if.end.96, %if.then.95, %if.then.85, %if.then.49, %if.then.44, %if.end.41, %if.then.40, %if.end.33, %if.then.32, %if.end.25, %if.then.24, %if.then
  %224 = load i32, i32* %retval
  ret i32 %224
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanCharRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end.43

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %conv4 = sext i8 %5 to i32
  %cmp5 = icmp eq i32 %conv4, 120
  br i1 %cmp5, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %7, i64 2
  %8 = load i8*, i8** %end.addr, align 8
  %9 = load i8**, i8*** %nextTokPtr.addr, align 8
  %call = call i32 @big2_scanHexCharRef(%struct.encoding* %6, i8* %add.ptr, i8* %8, i8** %9)
  store i32 %call, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %if.then
  %10 = load i8*, i8** %ptr.addr, align 8
  %arrayidx8 = getelementptr i8, i8* %10, i64 0
  %11 = load i8, i8* %arrayidx8, align 1
  %conv9 = sext i8 %11 to i32
  %cmp10 = icmp eq i32 %conv9, 0
  br i1 %cmp10, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %12 = load i8*, i8** %ptr.addr, align 8
  %arrayidx12 = getelementptr i8, i8* %12, i64 1
  %13 = load i8, i8* %arrayidx12, align 1
  %idxprom = zext i8 %13 to i64
  %14 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %15 = bitcast %struct.encoding* %14 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %15, i32 0, i32 1
  %arrayidx13 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %16 = load i8, i8* %arrayidx13, align 1
  %conv14 = zext i8 %16 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %17, i64 0
  %18 = load i8, i8* %arrayidx15, align 1
  %19 = load i8*, i8** %ptr.addr, align 8
  %arrayidx16 = getelementptr i8, i8* %19, i64 1
  %20 = load i8, i8* %arrayidx16, align 1
  %call17 = call i32 @unicode_byte_type(i8 signext %18, i8 signext %20)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv14, %cond.true ], [ %call17, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 25, label %sw.bb
  ]

sw.bb:                                            ; preds = %cond.end
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %21 = load i8*, i8** %ptr.addr, align 8
  %22 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %21, i8** %22, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %23 = load i8*, i8** %ptr.addr, align 8
  %add.ptr18 = getelementptr i8, i8* %23, i64 2
  store i8* %add.ptr18, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %24 = load i8*, i8** %ptr.addr, align 8
  %25 = load i8*, i8** %end.addr, align 8
  %cmp19 = icmp ne i8* %24, %25
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %26 = load i8*, i8** %ptr.addr, align 8
  %arrayidx21 = getelementptr i8, i8* %26, i64 0
  %27 = load i8, i8* %arrayidx21, align 1
  %conv22 = sext i8 %27 to i32
  %cmp23 = icmp eq i32 %conv22, 0
  br i1 %cmp23, label %cond.true.25, label %cond.false.31

cond.true.25:                                     ; preds = %for.body
  %28 = load i8*, i8** %ptr.addr, align 8
  %arrayidx26 = getelementptr i8, i8* %28, i64 1
  %29 = load i8, i8* %arrayidx26, align 1
  %idxprom27 = zext i8 %29 to i64
  %30 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %31 = bitcast %struct.encoding* %30 to %struct.normal_encoding*
  %type28 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %31, i32 0, i32 1
  %arrayidx29 = getelementptr [256 x i8], [256 x i8]* %type28, i32 0, i64 %idxprom27
  %32 = load i8, i8* %arrayidx29, align 1
  %conv30 = zext i8 %32 to i32
  br label %cond.end.35

cond.false.31:                                    ; preds = %for.body
  %33 = load i8*, i8** %ptr.addr, align 8
  %arrayidx32 = getelementptr i8, i8* %33, i64 0
  %34 = load i8, i8* %arrayidx32, align 1
  %35 = load i8*, i8** %ptr.addr, align 8
  %arrayidx33 = getelementptr i8, i8* %35, i64 1
  %36 = load i8, i8* %arrayidx33, align 1
  %call34 = call i32 @unicode_byte_type(i8 signext %34, i8 signext %36)
  br label %cond.end.35

cond.end.35:                                      ; preds = %cond.false.31, %cond.true.25
  %cond36 = phi i32 [ %conv30, %cond.true.25 ], [ %call34, %cond.false.31 ]
  switch i32 %cond36, label %sw.default.40 [
    i32 25, label %sw.bb.37
    i32 18, label %sw.bb.38
  ]

sw.bb.37:                                         ; preds = %cond.end.35
  br label %sw.epilog.41

sw.bb.38:                                         ; preds = %cond.end.35
  %37 = load i8*, i8** %ptr.addr, align 8
  %add.ptr39 = getelementptr i8, i8* %37, i64 2
  %38 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr39, i8** %38, align 8
  store i32 10, i32* %retval
  br label %return

sw.default.40:                                    ; preds = %cond.end.35
  %39 = load i8*, i8** %ptr.addr, align 8
  %40 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %39, i8** %40, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.41:                                     ; preds = %sw.bb.37
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.41
  %41 = load i8*, i8** %ptr.addr, align 8
  %add.ptr42 = getelementptr i8, i8* %41, i64 2
  store i8* %add.ptr42, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.43

if.end.43:                                        ; preds = %for.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.43, %sw.default.40, %sw.bb.38, %sw.default, %if.then.7
  %42 = load i32, i32* %retval
  ret i32 %42
}

; Function Attrs: nounwind uwtable
define internal i32 @big2_scanHexCharRef(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp ne i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %ptr.addr, align 8
  %arrayidx = getelementptr i8, i8* %2, i64 0
  %3 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %3 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then
  %4 = load i8*, i8** %ptr.addr, align 8
  %arrayidx3 = getelementptr i8, i8* %4, i64 1
  %5 = load i8, i8* %arrayidx3, align 1
  %idxprom = zext i8 %5 to i64
  %6 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %7 = bitcast %struct.encoding* %6 to %struct.normal_encoding*
  %type = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %7, i32 0, i32 1
  %arrayidx4 = getelementptr [256 x i8], [256 x i8]* %type, i32 0, i64 %idxprom
  %8 = load i8, i8* %arrayidx4, align 1
  %conv5 = zext i8 %8 to i32
  br label %cond.end

cond.false:                                       ; preds = %if.then
  %9 = load i8*, i8** %ptr.addr, align 8
  %arrayidx6 = getelementptr i8, i8* %9, i64 0
  %10 = load i8, i8* %arrayidx6, align 1
  %11 = load i8*, i8** %ptr.addr, align 8
  %arrayidx7 = getelementptr i8, i8* %11, i64 1
  %12 = load i8, i8* %arrayidx7, align 1
  %call = call i32 @unicode_byte_type(i8 signext %10, i8 signext %12)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv5, %cond.true ], [ %call, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 25, label %sw.bb
    i32 24, label %sw.bb
  ]

sw.bb:                                            ; preds = %cond.end, %cond.end
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  %13 = load i8*, i8** %ptr.addr, align 8
  %14 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %13, i8** %14, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %sw.bb
  %15 = load i8*, i8** %ptr.addr, align 8
  %add.ptr = getelementptr i8, i8* %15, i64 2
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %sw.epilog
  %16 = load i8*, i8** %ptr.addr, align 8
  %17 = load i8*, i8** %end.addr, align 8
  %cmp8 = icmp ne i8* %16, %17
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i8*, i8** %ptr.addr, align 8
  %arrayidx10 = getelementptr i8, i8* %18, i64 0
  %19 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %19 to i32
  %cmp12 = icmp eq i32 %conv11, 0
  br i1 %cmp12, label %cond.true.14, label %cond.false.20

cond.true.14:                                     ; preds = %for.body
  %20 = load i8*, i8** %ptr.addr, align 8
  %arrayidx15 = getelementptr i8, i8* %20, i64 1
  %21 = load i8, i8* %arrayidx15, align 1
  %idxprom16 = zext i8 %21 to i64
  %22 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %23 = bitcast %struct.encoding* %22 to %struct.normal_encoding*
  %type17 = getelementptr inbounds %struct.normal_encoding, %struct.normal_encoding* %23, i32 0, i32 1
  %arrayidx18 = getelementptr [256 x i8], [256 x i8]* %type17, i32 0, i64 %idxprom16
  %24 = load i8, i8* %arrayidx18, align 1
  %conv19 = zext i8 %24 to i32
  br label %cond.end.24

cond.false.20:                                    ; preds = %for.body
  %25 = load i8*, i8** %ptr.addr, align 8
  %arrayidx21 = getelementptr i8, i8* %25, i64 0
  %26 = load i8, i8* %arrayidx21, align 1
  %27 = load i8*, i8** %ptr.addr, align 8
  %arrayidx22 = getelementptr i8, i8* %27, i64 1
  %28 = load i8, i8* %arrayidx22, align 1
  %call23 = call i32 @unicode_byte_type(i8 signext %26, i8 signext %28)
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.20, %cond.true.14
  %cond25 = phi i32 [ %conv19, %cond.true.14 ], [ %call23, %cond.false.20 ]
  switch i32 %cond25, label %sw.default.29 [
    i32 25, label %sw.bb.26
    i32 24, label %sw.bb.26
    i32 18, label %sw.bb.27
  ]

sw.bb.26:                                         ; preds = %cond.end.24, %cond.end.24
  br label %sw.epilog.30

sw.bb.27:                                         ; preds = %cond.end.24
  %29 = load i8*, i8** %ptr.addr, align 8
  %add.ptr28 = getelementptr i8, i8* %29, i64 2
  %30 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr28, i8** %30, align 8
  store i32 10, i32* %retval
  br label %return

sw.default.29:                                    ; preds = %cond.end.24
  %31 = load i8*, i8** %ptr.addr, align 8
  %32 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %31, i8** %32, align 8
  store i32 0, i32* %retval
  br label %return

sw.epilog.30:                                     ; preds = %sw.bb.26
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog.30
  %33 = load i8*, i8** %ptr.addr, align 8
  %add.ptr31 = getelementptr i8, i8* %33, i64 2
  store i8* %add.ptr31, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.end:                                           ; preds = %for.end, %entry
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %sw.default.29, %sw.bb.27, %sw.default
  %34 = load i32, i32* %retval
  ret i32 %34
}

; Function Attrs: nounwind uwtable
define internal i32 @parsePseudoAttribute(%struct.encoding* %enc, i8* %ptr, i8* %end, i8** %namePtr, i8** %nameEndPtr, i8** %valPtr, i8** %nextTokPtr) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %namePtr.addr = alloca i8**, align 8
  %nameEndPtr.addr = alloca i8**, align 8
  %valPtr.addr = alloca i8**, align 8
  %nextTokPtr.addr = alloca i8**, align 8
  %c = alloca i32, align 4
  %open = alloca i8, align 1
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  store i8** %namePtr, i8*** %namePtr.addr, align 8
  store i8** %nameEndPtr, i8*** %nameEndPtr.addr, align 8
  store i8** %valPtr, i8*** %valPtr.addr, align 8
  store i8** %nextTokPtr, i8*** %nextTokPtr.addr, align 8
  %0 = load i8*, i8** %ptr.addr, align 8
  %1 = load i8*, i8** %end.addr, align 8
  %cmp = icmp eq i8* %0, %1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8**, i8*** %namePtr.addr, align 8
  store i8* null, i8** %2, align 8
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %4 = load i8*, i8** %ptr.addr, align 8
  %5 = load i8*, i8** %end.addr, align 8
  %call = call i32 @toAscii(%struct.encoding* %3, i8* %4, i8* %5)
  %call1 = call i32 @isSpace(i32 %call)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %6 = load i8*, i8** %ptr.addr, align 8
  %7 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %6, i8** %7, align 8
  store i32 0, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.end.3
  %8 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar = getelementptr inbounds %struct.encoding, %struct.encoding* %8, i32 0, i32 13
  %9 = load i32, i32* %minBytesPerChar, align 4
  %10 = load i8*, i8** %ptr.addr, align 8
  %idx.ext = sext i32 %9 to i64
  %add.ptr = getelementptr i8, i8* %10, i64 %idx.ext
  store i8* %add.ptr, i8** %ptr.addr, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %11 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %12 = load i8*, i8** %ptr.addr, align 8
  %13 = load i8*, i8** %end.addr, align 8
  %call4 = call i32 @toAscii(%struct.encoding* %11, i8* %12, i8* %13)
  %call5 = call i32 @isSpace(i32 %call4)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %14 = load i8*, i8** %ptr.addr, align 8
  %15 = load i8*, i8** %end.addr, align 8
  %cmp7 = icmp eq i8* %14, %15
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %do.end
  %16 = load i8**, i8*** %namePtr.addr, align 8
  store i8* null, i8** %16, align 8
  store i32 1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %do.end
  %17 = load i8*, i8** %ptr.addr, align 8
  %18 = load i8**, i8*** %namePtr.addr, align 8
  store i8* %17, i8** %18, align 8
  br label %for.cond

for.cond:                                         ; preds = %if.end.32, %if.end.9
  %19 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %20 = load i8*, i8** %ptr.addr, align 8
  %21 = load i8*, i8** %end.addr, align 8
  %call10 = call i32 @toAscii(%struct.encoding* %19, i8* %20, i8* %21)
  store i32 %call10, i32* %c, align 4
  %22 = load i32, i32* %c, align 4
  %cmp11 = icmp eq i32 %22, -1
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %for.cond
  %23 = load i8*, i8** %ptr.addr, align 8
  %24 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %23, i8** %24, align 8
  store i32 0, i32* %retval
  br label %return

if.end.13:                                        ; preds = %for.cond
  %25 = load i32, i32* %c, align 4
  %cmp14 = icmp eq i32 %25, 61
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.13
  %26 = load i8*, i8** %ptr.addr, align 8
  %27 = load i8**, i8*** %nameEndPtr.addr, align 8
  store i8* %26, i8** %27, align 8
  br label %for.end

if.end.16:                                        ; preds = %if.end.13
  %28 = load i32, i32* %c, align 4
  %call17 = call i32 @isSpace(i32 %28)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.end.32

if.then.19:                                       ; preds = %if.end.16
  %29 = load i8*, i8** %ptr.addr, align 8
  %30 = load i8**, i8*** %nameEndPtr.addr, align 8
  store i8* %29, i8** %30, align 8
  br label %do.body.20

do.body.20:                                       ; preds = %do.cond.24, %if.then.19
  %31 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar21 = getelementptr inbounds %struct.encoding, %struct.encoding* %31, i32 0, i32 13
  %32 = load i32, i32* %minBytesPerChar21, align 4
  %33 = load i8*, i8** %ptr.addr, align 8
  %idx.ext22 = sext i32 %32 to i64
  %add.ptr23 = getelementptr i8, i8* %33, i64 %idx.ext22
  store i8* %add.ptr23, i8** %ptr.addr, align 8
  br label %do.cond.24

do.cond.24:                                       ; preds = %do.body.20
  %34 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %35 = load i8*, i8** %ptr.addr, align 8
  %36 = load i8*, i8** %end.addr, align 8
  %call25 = call i32 @toAscii(%struct.encoding* %34, i8* %35, i8* %36)
  store i32 %call25, i32* %c, align 4
  %call26 = call i32 @isSpace(i32 %call25)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %do.body.20, label %do.end.28

do.end.28:                                        ; preds = %do.cond.24
  %37 = load i32, i32* %c, align 4
  %cmp29 = icmp ne i32 %37, 61
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %do.end.28
  %38 = load i8*, i8** %ptr.addr, align 8
  %39 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %38, i8** %39, align 8
  store i32 0, i32* %retval
  br label %return

if.end.31:                                        ; preds = %do.end.28
  br label %for.end

if.end.32:                                        ; preds = %if.end.16
  %40 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar33 = getelementptr inbounds %struct.encoding, %struct.encoding* %40, i32 0, i32 13
  %41 = load i32, i32* %minBytesPerChar33, align 4
  %42 = load i8*, i8** %ptr.addr, align 8
  %idx.ext34 = sext i32 %41 to i64
  %add.ptr35 = getelementptr i8, i8* %42, i64 %idx.ext34
  store i8* %add.ptr35, i8** %ptr.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %if.end.31, %if.then.15
  %43 = load i8*, i8** %ptr.addr, align 8
  %44 = load i8**, i8*** %namePtr.addr, align 8
  %45 = load i8*, i8** %44, align 8
  %cmp36 = icmp eq i8* %43, %45
  br i1 %cmp36, label %if.then.37, label %if.end.38

if.then.37:                                       ; preds = %for.end
  %46 = load i8*, i8** %ptr.addr, align 8
  %47 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %46, i8** %47, align 8
  store i32 0, i32* %retval
  br label %return

if.end.38:                                        ; preds = %for.end
  %48 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar39 = getelementptr inbounds %struct.encoding, %struct.encoding* %48, i32 0, i32 13
  %49 = load i32, i32* %minBytesPerChar39, align 4
  %50 = load i8*, i8** %ptr.addr, align 8
  %idx.ext40 = sext i32 %49 to i64
  %add.ptr41 = getelementptr i8, i8* %50, i64 %idx.ext40
  store i8* %add.ptr41, i8** %ptr.addr, align 8
  %51 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %52 = load i8*, i8** %ptr.addr, align 8
  %53 = load i8*, i8** %end.addr, align 8
  %call42 = call i32 @toAscii(%struct.encoding* %51, i8* %52, i8* %53)
  store i32 %call42, i32* %c, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.38
  %54 = load i32, i32* %c, align 4
  %call43 = call i32 @isSpace(i32 %54)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %55 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar45 = getelementptr inbounds %struct.encoding, %struct.encoding* %55, i32 0, i32 13
  %56 = load i32, i32* %minBytesPerChar45, align 4
  %57 = load i8*, i8** %ptr.addr, align 8
  %idx.ext46 = sext i32 %56 to i64
  %add.ptr47 = getelementptr i8, i8* %57, i64 %idx.ext46
  store i8* %add.ptr47, i8** %ptr.addr, align 8
  %58 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %59 = load i8*, i8** %ptr.addr, align 8
  %60 = load i8*, i8** %end.addr, align 8
  %call48 = call i32 @toAscii(%struct.encoding* %58, i8* %59, i8* %60)
  store i32 %call48, i32* %c, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %61 = load i32, i32* %c, align 4
  %cmp49 = icmp ne i32 %61, 34
  br i1 %cmp49, label %land.lhs.true, label %if.end.52

land.lhs.true:                                    ; preds = %while.end
  %62 = load i32, i32* %c, align 4
  %cmp50 = icmp ne i32 %62, 39
  br i1 %cmp50, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %land.lhs.true
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %63, i8** %64, align 8
  store i32 0, i32* %retval
  br label %return

if.end.52:                                        ; preds = %land.lhs.true, %while.end
  %65 = load i32, i32* %c, align 4
  %conv = trunc i32 %65 to i8
  store i8 %conv, i8* %open, align 1
  %66 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar53 = getelementptr inbounds %struct.encoding, %struct.encoding* %66, i32 0, i32 13
  %67 = load i32, i32* %minBytesPerChar53, align 4
  %68 = load i8*, i8** %ptr.addr, align 8
  %idx.ext54 = sext i32 %67 to i64
  %add.ptr55 = getelementptr i8, i8* %68, i64 %idx.ext54
  store i8* %add.ptr55, i8** %ptr.addr, align 8
  %69 = load i8*, i8** %ptr.addr, align 8
  %70 = load i8**, i8*** %valPtr.addr, align 8
  store i8* %69, i8** %70, align 8
  br label %for.cond.56

for.cond.56:                                      ; preds = %for.inc, %if.end.52
  %71 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %72 = load i8*, i8** %ptr.addr, align 8
  %73 = load i8*, i8** %end.addr, align 8
  %call57 = call i32 @toAscii(%struct.encoding* %71, i8* %72, i8* %73)
  store i32 %call57, i32* %c, align 4
  %74 = load i32, i32* %c, align 4
  %75 = load i8, i8* %open, align 1
  %conv58 = sext i8 %75 to i32
  %cmp59 = icmp eq i32 %74, %conv58
  br i1 %cmp59, label %if.then.61, label %if.end.62

if.then.61:                                       ; preds = %for.cond.56
  br label %for.end.94

if.end.62:                                        ; preds = %for.cond.56
  %76 = load i32, i32* %c, align 4
  %cmp63 = icmp sle i32 97, %76
  br i1 %cmp63, label %land.lhs.true.65, label %land.lhs.true.68

land.lhs.true.65:                                 ; preds = %if.end.62
  %77 = load i32, i32* %c, align 4
  %cmp66 = icmp sle i32 %77, 122
  br i1 %cmp66, label %if.end.90, label %land.lhs.true.68

land.lhs.true.68:                                 ; preds = %land.lhs.true.65, %if.end.62
  %78 = load i32, i32* %c, align 4
  %cmp69 = icmp sle i32 65, %78
  br i1 %cmp69, label %land.lhs.true.71, label %land.lhs.true.74

land.lhs.true.71:                                 ; preds = %land.lhs.true.68
  %79 = load i32, i32* %c, align 4
  %cmp72 = icmp sle i32 %79, 90
  br i1 %cmp72, label %if.end.90, label %land.lhs.true.74

land.lhs.true.74:                                 ; preds = %land.lhs.true.71, %land.lhs.true.68
  %80 = load i32, i32* %c, align 4
  %cmp75 = icmp sle i32 48, %80
  br i1 %cmp75, label %land.lhs.true.77, label %land.lhs.true.80

land.lhs.true.77:                                 ; preds = %land.lhs.true.74
  %81 = load i32, i32* %c, align 4
  %cmp78 = icmp sle i32 %81, 57
  br i1 %cmp78, label %if.end.90, label %land.lhs.true.80

land.lhs.true.80:                                 ; preds = %land.lhs.true.77, %land.lhs.true.74
  %82 = load i32, i32* %c, align 4
  %cmp81 = icmp ne i32 %82, 46
  br i1 %cmp81, label %land.lhs.true.83, label %if.end.90

land.lhs.true.83:                                 ; preds = %land.lhs.true.80
  %83 = load i32, i32* %c, align 4
  %cmp84 = icmp ne i32 %83, 45
  br i1 %cmp84, label %land.lhs.true.86, label %if.end.90

land.lhs.true.86:                                 ; preds = %land.lhs.true.83
  %84 = load i32, i32* %c, align 4
  %cmp87 = icmp ne i32 %84, 95
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %land.lhs.true.86
  %85 = load i8*, i8** %ptr.addr, align 8
  %86 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %85, i8** %86, align 8
  store i32 0, i32* %retval
  br label %return

if.end.90:                                        ; preds = %land.lhs.true.86, %land.lhs.true.83, %land.lhs.true.80, %land.lhs.true.77, %land.lhs.true.71, %land.lhs.true.65
  br label %for.inc

for.inc:                                          ; preds = %if.end.90
  %87 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar91 = getelementptr inbounds %struct.encoding, %struct.encoding* %87, i32 0, i32 13
  %88 = load i32, i32* %minBytesPerChar91, align 4
  %89 = load i8*, i8** %ptr.addr, align 8
  %idx.ext92 = sext i32 %88 to i64
  %add.ptr93 = getelementptr i8, i8* %89, i64 %idx.ext92
  store i8* %add.ptr93, i8** %ptr.addr, align 8
  br label %for.cond.56

for.end.94:                                       ; preds = %if.then.61
  %90 = load i8*, i8** %ptr.addr, align 8
  %91 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %minBytesPerChar95 = getelementptr inbounds %struct.encoding, %struct.encoding* %91, i32 0, i32 13
  %92 = load i32, i32* %minBytesPerChar95, align 4
  %idx.ext96 = sext i32 %92 to i64
  %add.ptr97 = getelementptr i8, i8* %90, i64 %idx.ext96
  %93 = load i8**, i8*** %nextTokPtr.addr, align 8
  store i8* %add.ptr97, i8** %93, align 8
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end.94, %if.then.89, %if.then.51, %if.then.37, %if.then.30, %if.then.12, %if.then.8, %if.then.2, %if.then
  %94 = load i32, i32* %retval
  ret i32 %94
}

; Function Attrs: nounwind uwtable
define internal i32 @toAscii(%struct.encoding* %enc, i8* %ptr, i8* %end) #0 {
entry:
  %retval = alloca i32, align 4
  %enc.addr = alloca %struct.encoding*, align 8
  %ptr.addr = alloca i8*, align 8
  %end.addr = alloca i8*, align 8
  %buf = alloca [1 x i8], align 1
  %p = alloca i8*, align 8
  store %struct.encoding* %enc, %struct.encoding** %enc.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store i8* %end, i8** %end.addr, align 8
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %buf, i32 0, i32 0
  store i8* %arraydecay, i8** %p, align 8
  %0 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %utf8Convert = getelementptr inbounds %struct.encoding, %struct.encoding* %0, i32 0, i32 11
  %1 = load void (%struct.encoding*, i8**, i8*, i8**, i8*)*, void (%struct.encoding*, i8**, i8*, i8**, i8*)** %utf8Convert, align 8
  %2 = load %struct.encoding*, %struct.encoding** %enc.addr, align 8
  %3 = load i8*, i8** %end.addr, align 8
  %4 = load i8*, i8** %p, align 8
  %add.ptr = getelementptr i8, i8* %4, i64 1
  call void %1(%struct.encoding* %2, i8** %ptr.addr, i8* %3, i8** %p, i8* %add.ptr)
  %5 = load i8*, i8** %p, align 8
  %arraydecay1 = getelementptr inbounds [1 x i8], [1 x i8]* %buf, i32 0, i32 0
  %cmp = icmp eq i8* %5, %arraydecay1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  %arrayidx = getelementptr [1 x i8], [1 x i8]* %buf, i32 0, i64 0
  %6 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %6 to i32
  store i32 %conv, i32* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then
  %7 = load i32, i32* %retval
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define internal i32 @isSpace(i32 %c) #0 {
entry:
  %retval = alloca i32, align 4
  %c.addr = alloca i32, align 4
  store i32 %c, i32* %c.addr, align 4
  %0 = load i32, i32* %c.addr, align 4
  switch i32 %0, label %sw.epilog [
    i32 32, label %sw.bb
    i32 13, label %sw.bb
    i32 10, label %sw.bb
    i32 9, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry, %entry
  store i32 1, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %entry
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb
  %1 = load i32, i32* %retval
  ret i32 %1
}

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
