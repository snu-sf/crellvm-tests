; ModuleID = './_ctypes.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, i64, {}*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._object = type { i64, %struct._typeobject* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*)* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct.PyModuleDef = type { %struct.PyModuleDef_Base, i8*, i8*, i64, %struct.PyMethodDef*, i32 (%struct._object*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, void (i8*)* }
%struct.PyModuleDef_Base = type { %struct._object, %struct._object* ()*, i64, %struct._object* }
%struct._ffi_type = type { i64, i16, i16, %struct._ffi_type** }
%struct._Py_atomic_address = type { i8* }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct.DictRemoverObject = type { %struct._object, %struct._object*, %struct._object* }
%struct._PyWeakReference = type { %struct._object, %struct._object*, %struct._object*, i64, %struct._PyWeakReference*, %struct._PyWeakReference* }
%struct.StgDictObject = type { %struct.PyDictObject, i64, i64, i64, %struct._ffi_type, %struct._object*, %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, i64)*, %struct.tagPyCArgObject* (%struct.tagCDataObject*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i8*, i32, i64* }
%struct.PyDictObject = type { %struct._object, i64, %struct._dictkeysobject*, %struct._object** }
%struct._dictkeysobject = type opaque
%struct.tagPyCArgObject = type { %struct._object, %struct._ffi_type*, i8, %union.anon, %struct._object*, i64 }
%union.anon = type { x86_fp80 }
%struct.tagCDataObject = type { %struct._object, i8*, i32, %struct.tagCDataObject*, i64, i64, i64, %struct._object*, %union.value }
%union.value = type { x86_fp80 }
%struct.fielddesc = type { i8, %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, i64)*, %struct._ffi_type*, %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, i64)* }
%struct.PyCFuncPtrObject = type { %struct._object, i8*, i32, %struct.tagCDataObject*, i64, i64, i64, %struct._object*, %union.value, %struct.CThunkObject*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object* }
%struct.CThunkObject = type { %struct.PyVarObject, %struct.ffi_closure*, i8*, %struct.ffi_cif, i32, %struct._object*, %struct._object*, %struct._object*, %struct._object* (i8*, %struct._object*, i64)*, %struct._ffi_type*, [1 x %struct._ffi_type*] }
%struct.ffi_closure = type { [24 x i8], %struct.ffi_cif*, void (%struct.ffi_cif*, i8*, i8**, i8*)*, i8* }
%struct.ffi_cif = type { i32, i32, %struct._ffi_type**, %struct._ffi_type*, i32, i32 }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type opaque
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.PySliceObject = type { %struct._object, %struct._object*, %struct._object*, %struct._object* }

@_PyWeakref_ProxyType = external global %struct._typeobject, align 8
@_PyWeakref_CallableProxyType = external global %struct._typeobject, align 8
@_Py_NoneStruct = external global %struct._object, align 8
@.str = private unnamed_addr constant [2 x i8] c"(\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%zd,\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%zd)\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"_ctypes.PyCStructType\00", align 1
@CDataType_as_sequence = internal global %struct.PySequenceMethods { i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, i64)* @CDataType_repeat, %struct._object* (%struct._object*, i64)* null, i8* null, i32 (%struct._object*, i64, %struct._object*)* null, i8* null, i32 (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, i64)* null }, align 8
@.str.4 = private unnamed_addr constant [31 x i8] c"metatype for the CData Objects\00", align 1
@CDataType_methods = internal global [6 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_param, i32 8, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @from_param_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.54, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_address, i32 8, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @from_address_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_buffer, i32 1, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @from_buffer_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.56, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_buffer_copy, i32 1, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @from_buffer_copy_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_in_dll, i32 1, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @in_dll_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@PyCStructType_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i64 0, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @CDataType_as_sequence, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* @PyCStructType_setattro, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct._typeobject*, i32 (%struct._object*, i8*)*, i8*)* @CDataType_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct._typeobject*)* @CDataType_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([6 x %struct.PyMethodDef], [6 x %struct.PyMethodDef]* @CDataType_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyCStructType_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.5 = private unnamed_addr constant [23 x i8] c"_ctypes.PyCPointerType\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"metatype for the Pointer Objects\00", align 1
@PyCPointerType_methods = internal global [7 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.54, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_address, i32 8, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @from_address_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_buffer, i32 1, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @from_buffer_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.56, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_buffer_copy, i32 1, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @from_buffer_copy_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_in_dll, i32 1, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @in_dll_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyCPointerType_from_param, i32 8, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @from_param_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* bitcast (%struct._object* (%struct._typeobject*, %struct._object*)* @PyCPointerType_set_type to %struct._object* (%struct._object*, %struct._object*)*), i32 8, i8* null }, %struct.PyMethodDef zeroinitializer], align 16
@PyCPointerType_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i32 0, i32 0), i64 0, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @CDataType_as_sequence, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct._typeobject*, i32 (%struct._object*, i8*)*, i8*)* @CDataType_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct._typeobject*)* @CDataType_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([7 x %struct.PyMethodDef], [7 x %struct.PyMethodDef]* @PyCPointerType_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyCPointerType_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.7 = private unnamed_addr constant [21 x i8] c"_ctypes.PyCArrayType\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"metatype for the Array Objects\00", align 1
@PyCArrayType_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i32 0, i32 0), i64 0, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @CDataType_as_sequence, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([6 x %struct.PyMethodDef], [6 x %struct.PyMethodDef]* @CDataType_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyCArrayType_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.9 = private unnamed_addr constant [22 x i8] c"_ctypes.PyCSimpleType\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"metatype for the PyCSimpleType Objects\00", align 1
@PyCSimpleType_methods = internal global [6 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyCSimpleType_from_param, i32 8, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @from_param_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.54, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_address, i32 8, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @from_address_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.55, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_buffer, i32 1, i8* getelementptr inbounds ([90 x i8], [90 x i8]* @from_buffer_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.56, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_from_buffer_copy, i32 1, i8* getelementptr inbounds ([94 x i8], [94 x i8]* @from_buffer_copy_doc, i32 0, i32 0) }, %struct.PyMethodDef { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @CDataType_in_dll, i32 1, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @in_dll_doc, i32 0, i32 0) }, %struct.PyMethodDef zeroinitializer], align 16
@PyCSimpleType_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i32 0, i32 0), i64 0, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @CDataType_as_sequence, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 263168, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([6 x %struct.PyMethodDef], [6 x %struct.PyMethodDef]* @PyCSimpleType_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyCSimpleType_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.11 = private unnamed_addr constant [23 x i8] c"_ctypes.PyCFuncPtrType\00", align 1
@.str.12 = private unnamed_addr constant [33 x i8] c"metatype for C function pointers\00", align 1
@PyCFuncPtrType_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i32 0, i32 0), i64 0, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @CDataType_as_sequence, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct._typeobject*, i32 (%struct._object*, i8*)*, i8*)* @CDataType_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct._typeobject*)* @CDataType_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([6 x %struct.PyMethodDef], [6 x %struct.PyMethodDef]* @CDataType_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyCFuncPtrType_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.13 = private unnamed_addr constant [15 x i8] c"_ctypes._CData\00", align 1
@PyCData_as_buffer = internal global %struct.PyBufferProcs { i32 (%struct._object*, %struct.bufferinfo*, i32)* @PyCData_NewGetBuffer, void (%struct._object*, %struct.bufferinfo*)* null }, align 8
@.str.14 = private unnamed_addr constant [19 x i8] c"XXX to be provided\00", align 1
@PyCData_methods = internal global [4 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.115, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyCData_from_outparam, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.116, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyCData_reduce, i32 4, i8* null }, %struct.PyMethodDef { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.117, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @PyCData_setstate, i32 1, i8* null }, %struct.PyMethodDef zeroinitializer], align 16
@PyCData_members = internal global [4 x %struct.PyMemberDef] [%struct.PyMemberDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.122, i32 0, i32 0), i32 6, i64 32, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.123, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.124, i32 0, i32 0), i32 1, i64 24, i32 1, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.125, i32 0, i32 0) }, %struct.PyMemberDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.126, i32 0, i32 0), i32 6, i64 64, i32 1, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.127, i32 0, i32 0) }, %struct.PyMemberDef zeroinitializer], align 16
@PyCData_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.13, i32 0, i32 0), i64 96, i64 0, void (%struct._object*)* @PyCData_dealloc, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* @PyCData_nohash, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @PyCData_as_buffer, i64 263168, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.tagCDataObject*, i32 (%struct._object*, i8*)*, i8*)* @PyCData_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @PyCData_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([4 x %struct.PyMethodDef], [4 x %struct.PyMethodDef]* @PyCData_methods, i32 0, i32 0), %struct.PyMemberDef* getelementptr inbounds ([4 x %struct.PyMemberDef], [4 x %struct.PyMemberDef]* @PyCData_members, i32 0, i32 0), %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyExc_TypeError = external global %struct._object*, align 8
@.str.15 = private unnamed_addr constant [15 x i8] c"abstract class\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"not a ctype instance\00", align 1
@.str.17 = private unnamed_addr constant [19 x i8] c"_ctypes.PyCFuncPtr\00", align 1
@PyCFuncPtr_as_number = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, i32 (%struct._object*)* bitcast (i32 (%struct.PyCFuncPtrObject*)* @PyCFuncPtr_bool to i32 (%struct._object*)*), %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@.str.18 = private unnamed_addr constant [17 x i8] c"Function Pointer\00", align 1
@PyCFuncPtr_getsets = internal global [4 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyCFuncPtrObject*)* @PyCFuncPtr_get_errcheck to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.PyCFuncPtrObject*, %struct._object*)* @PyCFuncPtr_set_errcheck to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.146, i32 0, i32 0), i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.147, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyCFuncPtrObject*)* @PyCFuncPtr_get_restype to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.PyCFuncPtrObject*, %struct._object*)* @PyCFuncPtr_set_restype to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.148, i32 0, i32 0), i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.149, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.PyCFuncPtrObject*)* @PyCFuncPtr_get_argtypes to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.PyCFuncPtrObject*, %struct._object*)* @PyCFuncPtr_set_argtypes to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.150, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@PyCFuncPtr_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i32 0, i32 0), i64 160, i64 0, void (%struct._object*)* bitcast (void (%struct.PyCFuncPtrObject*)* @PyCFuncPtr_dealloc to void (%struct._object*)*), i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.PyCFuncPtrObject*)* @PyCFuncPtr_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* @PyCFuncPtr_as_number, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* bitcast (%struct._object* (%struct.PyCFuncPtrObject*, %struct._object*, %struct._object*)* @PyCFuncPtr_call to %struct._object* (%struct._object*, %struct._object*, %struct._object*)*), %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @PyCData_as_buffer, i64 263168, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.18, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.PyCFuncPtrObject*, i32 (%struct._object*, i8*)*, i8*)* @PyCFuncPtr_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.PyCFuncPtrObject*)* @PyCFuncPtr_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([4 x %struct.PyGetSetDef], [4 x %struct.PyGetSetDef]* @PyCFuncPtr_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyCFuncPtr_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.19 = private unnamed_addr constant [14 x i8] c"_ctypes.Array\00", align 1
@Array_as_sequence = internal global %struct.PySequenceMethods { i64 (%struct._object*)* @Array_length, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, i64)* null, %struct._object* (%struct._object*, i64)* @Array_item, i8* null, i32 (%struct._object*, i64, %struct._object*)* @Array_ass_item, i8* null, i32 (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, i64)* null }, align 8
@PyCArray_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i32 0, i32 0), i64 96, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @Array_as_sequence, %struct.PyMappingMethods* bitcast ({ i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }* @Array_as_mapping to %struct.PyMappingMethods*), i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @PyCData_as_buffer, i64 263168, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.tagCDataObject*, i32 (%struct._object*, i8*)*, i8*)* @PyCData_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @PyCData_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*, %struct._object*)* @Array_init to i32 (%struct._object*, %struct._object*, %struct._object*)*), %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @GenericPyCData_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyCArrayType_from_ctype.cache = internal global %struct._object* null, align 8
@.str.20 = private unnamed_addr constant [23 x i8] c"Expected a type object\00", align 1
@.str.21 = private unnamed_addr constant [17 x i8] c"%.200s_Array_%ld\00", align 1
@.str.22 = private unnamed_addr constant [14 x i8] c"s(O){s:n,s:O}\00", align 1
@.str.23 = private unnamed_addr constant [9 x i8] c"_length_\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"_type_\00", align 1
@.str.25 = private unnamed_addr constant [17 x i8] c"_ctypes._Pointer\00", align 1
@Pointer_as_number = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @Pointer_bool to i32 (%struct._object*)*), %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@Pointer_as_sequence = internal global %struct.PySequenceMethods { i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, i64)* null, %struct._object* (%struct._object*, i64)* @Pointer_item, i8* null, i32 (%struct._object*, i64, %struct._object*)* @Pointer_ass_item, i8* null, i32 (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, i64)* null }, align 8
@Pointer_getsets = internal global [2 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.183, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.tagCDataObject*, i8*)* @Pointer_get_contents to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*, i8*)* @Pointer_set_contents to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.184, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@PyCPointer_Type = global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.25, i32 0, i32 0), i64 96, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* @Pointer_as_number, %struct.PySequenceMethods* @Pointer_as_sequence, %struct.PyMappingMethods* bitcast ({ i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }* @Pointer_as_mapping to %struct.PyMappingMethods*), i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @PyCData_as_buffer, i64 263168, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.tagCDataObject*, i32 (%struct._object*, i8*)*, i8*)* @PyCData_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @PyCData_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([2 x %struct.PyGetSetDef], [2 x %struct.PyGetSetDef]* @Pointer_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*, %struct._object*)* @Pointer_init to i32 (%struct._object*, %struct._object*, %struct._object*)*), %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @Pointer_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@_ctypesmodule = internal global %struct.PyModuleDef { %struct.PyModuleDef_Base { %struct._object { i64 1, %struct._typeobject* null }, %struct._object* ()* null, i64 0, %struct._object* null }, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.188, i32 0, i32 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @module_docs, i32 0, i32 0), i64 -1, %struct.PyMethodDef* getelementptr inbounds ([0 x %struct.PyMethodDef], [0 x %struct.PyMethodDef]* @_ctypes_module_methods, i32 0, i32 0), i32 (%struct._object*)* null, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, void (i8*)* null }, align 8
@_ctypes_ptrtype_cache = common global %struct._object* null, align 8
@.str.26 = private unnamed_addr constant [20 x i8] c"_pointer_type_cache\00", align 1
@.str.27 = private unnamed_addr constant [10 x i8] c"_unpickle\00", align 1
@_unpickle = internal global %struct._object* null, align 8
@PyCArg_Type = external global %struct._typeobject, align 8
@PyCThunk_Type = external global %struct._typeobject, align 8
@PyDict_Type = external global %struct._typeobject, align 8
@PyCStgDict_Type = external global %struct._typeobject, align 8
@PyType_Type = external global %struct._typeobject, align 8
@.str.28 = private unnamed_addr constant [10 x i8] c"Structure\00", align 1
@.str.29 = private unnamed_addr constant [6 x i8] c"Union\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"_Pointer\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Array\00", align 1
@.str.32 = private unnamed_addr constant [13 x i8] c"_SimpleCData\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"CFuncPtr\00", align 1
@PyCField_Type = external global %struct._typeobject, align 8
@.str.34 = private unnamed_addr constant [15 x i8] c"FUNCFLAG_CDECL\00", align 1
@.str.35 = private unnamed_addr constant [19 x i8] c"FUNCFLAG_USE_ERRNO\00", align 1
@.str.36 = private unnamed_addr constant [23 x i8] c"FUNCFLAG_USE_LASTERROR\00", align 1
@.str.37 = private unnamed_addr constant [19 x i8] c"FUNCFLAG_PYTHONAPI\00", align 1
@.str.38 = private unnamed_addr constant [12 x i8] c"__version__\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"1.1.0\00", align 1
@.str.40 = private unnamed_addr constant [14 x i8] c"_memmove_addr\00", align 1
@.str.41 = private unnamed_addr constant [13 x i8] c"_memset_addr\00", align 1
@.str.42 = private unnamed_addr constant [16 x i8] c"_string_at_addr\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"_cast_addr\00", align 1
@.str.44 = private unnamed_addr constant [17 x i8] c"_wstring_at_addr\00", align 1
@.str.45 = private unnamed_addr constant [11 x i8] c"RTLD_LOCAL\00", align 1
@.str.46 = private unnamed_addr constant [12 x i8] c"RTLD_GLOBAL\00", align 1
@.str.47 = private unnamed_addr constant [21 x i8] c"ctypes.ArgumentError\00", align 1
@PyExc_ArgError = common global %struct._object* null, align 8
@.str.48 = private unnamed_addr constant [14 x i8] c"ArgumentError\00", align 1
@.str.49 = private unnamed_addr constant [20 x i8] c"_ctypes.DictRemover\00", align 1
@.str.50 = private unnamed_addr constant [32 x i8] c"deletes a key from a dictionary\00", align 1
@DictRemover_Type = internal global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.49, i32 0, i32 0), i64 32, i64 0, void (%struct._object*)* @_DictRemover_dealloc, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* @_DictRemover_call, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* null, i64 262144, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.50, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* null, i32 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* null, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@PyExc_ValueError = external global %struct._object*, align 8
@.str.51 = private unnamed_addr constant [35 x i8] c"Array length must be >= 0, not %zd\00", align 1
@.str.52 = private unnamed_addr constant [9 x i8] c"_fields_\00", align 1
@.str.53 = private unnamed_addr constant [11 x i8] c"from_param\00", align 1
@from_param_doc = internal global [56 x i8] c"Convert a Python object into a function call parameter.\00", align 16
@.str.54 = private unnamed_addr constant [13 x i8] c"from_address\00", align 1
@from_address_doc = internal global [83 x i8] c"C.from_address(integer) -> C instance\0Aaccess a C instance at the specified address\00", align 16
@.str.55 = private unnamed_addr constant [12 x i8] c"from_buffer\00", align 1
@from_buffer_doc = internal global [90 x i8] c"C.from_buffer(object, offset=0) -> C instance\0Acreate a C instance from a writeable buffer\00", align 16
@.str.56 = private unnamed_addr constant [17 x i8] c"from_buffer_copy\00", align 1
@from_buffer_copy_doc = internal global [94 x i8] c"C.from_buffer_copy(object, offset=0) -> C instance\0Acreate a C instance from a readable buffer\00", align 16
@.str.57 = private unnamed_addr constant [7 x i8] c"in_dll\00", align 1
@in_dll_doc = internal global [63 x i8] c"C.in_dll(dll, name) -> C instance\0Aaccess a C instance in a dll\00", align 16
@.str.58 = private unnamed_addr constant [4 x i8] c"???\00", align 1
@.str.59 = private unnamed_addr constant [46 x i8] c"expected %s instance instead of pointer to %s\00", align 1
@.str.60 = private unnamed_addr constant [15 x i8] c"_as_parameter_\00", align 1
@.str.61 = private unnamed_addr constant [35 x i8] c"expected %s instance instead of %s\00", align 1
@.str.62 = private unnamed_addr constant [17 x i8] c"integer expected\00", align 1
@.str.63 = private unnamed_addr constant [16 x i8] c"O|n:from_buffer\00", align 1
@.str.64 = private unnamed_addr constant [26 x i8] c"offset cannot be negative\00", align 1
@.str.65 = private unnamed_addr constant [58 x i8] c"Buffer size too small (%zd instead of at least %zd bytes)\00", align 1
@.str.66 = private unnamed_addr constant [10 x i8] c"Os:in_dll\00", align 1
@.str.67 = private unnamed_addr constant [8 x i8] c"_handle\00", align 1
@.str.68 = private unnamed_addr constant [64 x i8] c"the _handle attribute of the second argument must be an integer\00", align 1
@.str.69 = private unnamed_addr constant [53 x i8] c"could not convert the _handle attribute to a pointer\00", align 1
@.str.70 = private unnamed_addr constant [11 x i8] c"_abstract_\00", align 1
@.str.71 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@.str.72 = private unnamed_addr constant [9 x i8] c"set_type\00", align 1
@.str.73 = private unnamed_addr constant [24 x i8] c"expected CData instance\00", align 1
@ffi_type_pointer = external global %struct._ffi_type, align 8
@.str.74 = private unnamed_addr constant [22 x i8] c"_type_ must be a type\00", align 1
@.str.75 = private unnamed_addr constant [30 x i8] c"_type_ must have storage info\00", align 1
@.str.76 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.77 = private unnamed_addr constant [2 x i8] c"&\00", align 1
@PyExc_AttributeError = external global %struct._object*, align 8
@.str.78 = private unnamed_addr constant [75 x i8] c"class must define a '_length_' attribute, which must be a positive integer\00", align 1
@PyExc_OverflowError = external global %struct._object*, align 8
@.str.79 = private unnamed_addr constant [38 x i8] c"The '_length_' attribute is too large\00", align 1
@.str.80 = private unnamed_addr constant [39 x i8] c"class must define a '_type_' attribute\00", align 1
@.str.81 = private unnamed_addr constant [16 x i8] c"array too large\00", align 1
@.str.82 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@CharArray_getsets = internal global [3 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.84, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.tagCDataObject*)* @CharArray_get_raw to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*)* @CharArray_set_raw to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0), i8* null }, %struct.PyGetSetDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.tagCDataObject*)* @CharArray_get_value to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*)* @CharArray_set_value to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.86, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.83 = private unnamed_addr constant [2 x i8] c"u\00", align 1
@WCharArray_getsets = internal global [2 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.tagCDataObject*)* @WCharArray_get_value to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*)* @WCharArray_set_value to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.86, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@.str.84 = private unnamed_addr constant [4 x i8] c"raw\00", align 1
@.str.85 = private unnamed_addr constant [6 x i8] c"value\00", align 1
@.str.86 = private unnamed_addr constant [13 x i8] c"string value\00", align 1
@.str.87 = private unnamed_addr constant [16 x i8] c"string too long\00", align 1
@.str.88 = private unnamed_addr constant [23 x i8] c"can't delete attribute\00", align 1
@.str.89 = private unnamed_addr constant [38 x i8] c"bytes expected instead of %s instance\00", align 1
@.str.90 = private unnamed_addr constant [47 x i8] c"unicode string expected instead of %s instance\00", align 1
@_PyThreadState_Current = external global %struct._Py_atomic_address, align 8
@_Py_CheckRecursionLimit = external global i32, align 4
@.str.91 = private unnamed_addr constant [32 x i8] c"while processing _as_parameter_\00", align 1
@.str.92 = private unnamed_addr constant [11 x i8] c"wrong type\00", align 1
@.str.93 = private unnamed_addr constant [46 x i8] c"class must define a '_type_' string attribute\00", align 1
@.str.94 = private unnamed_addr constant [74 x i8] c"class must define a '_type_' attribute which must be a string of length 1\00", align 1
@SIMPLE_TYPE_CHARS = internal global i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.101, i32 0, i32 0), align 8
@.str.95 = private unnamed_addr constant [103 x i8] c"class must define a '_type_' attribute which must be\0Aa single character string containing one of '%s'.\00", align 1
@.str.96 = private unnamed_addr constant [26 x i8] c"_type_ '%s' not supported\00", align 1
@.str.97 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@c_char_p_method = internal global %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @c_char_p_from_param, i32 8, i8* null }, align 8
@c_wchar_p_method = internal global %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @c_wchar_p_from_param, i32 8, i8* null }, align 8
@c_void_p_method = internal global %struct.PyMethodDef { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @c_void_p_from_param, i32 8, i8* null }, align 8
@.str.98 = private unnamed_addr constant [13 x i8] c"__ctype_be__\00", align 1
@.str.99 = private unnamed_addr constant [13 x i8] c"__ctype_le__\00", align 1
@.str.100 = private unnamed_addr constant [2 x i8] c">\00", align 1
@.str.101 = private unnamed_addr constant [23 x i8] c"cbBhHiIlLdfuzZqQPXOv?g\00", align 1
@.str.102 = private unnamed_addr constant [2 x i8] c"z\00", align 1
@.str.103 = private unnamed_addr constant [2 x i8] c"Z\00", align 1
@PyByteArray_Type = external global %struct._typeobject, align 8
@CreateSwappedType.suffix = internal global %struct._object* null, align 8
@.str.104 = private unnamed_addr constant [4 x i8] c"_be\00", align 1
@.str.105 = private unnamed_addr constant [4 x i8] c"X{}\00", align 1
@.str.106 = private unnamed_addr constant [8 x i8] c"_flags_\00", align 1
@.str.107 = private unnamed_addr constant [51 x i8] c"class must define _flags_ which must be an integer\00", align 1
@.str.108 = private unnamed_addr constant [11 x i8] c"_argtypes_\00", align 1
@.str.109 = private unnamed_addr constant [10 x i8] c"_restype_\00", align 1
@.str.110 = private unnamed_addr constant [46 x i8] c"_restype_ must be a type, a callable, or None\00", align 1
@.str.111 = private unnamed_addr constant [15 x i8] c"_check_retval_\00", align 1
@.str.112 = private unnamed_addr constant [39 x i8] c"_argtypes_ must be a sequence of types\00", align 1
@.str.113 = private unnamed_addr constant [48 x i8] c"item %zd in _argtypes_ has no from_param method\00", align 1
@.str.114 = private unnamed_addr constant [16 x i8] c"unhashable type\00", align 1
@.str.115 = private unnamed_addr constant [25 x i8] c"__ctypes_from_outparam__\00", align 1
@.str.116 = private unnamed_addr constant [11 x i8] c"__reduce__\00", align 1
@.str.117 = private unnamed_addr constant [13 x i8] c"__setstate__\00", align 1
@.str.118 = private unnamed_addr constant [53 x i8] c"ctypes objects containing pointers cannot be pickled\00", align 1
@.str.119 = private unnamed_addr constant [9 x i8] c"O(O(NN))\00", align 1
@.str.120 = private unnamed_addr constant [9 x i8] c"__dict__\00", align 1
@.str.121 = private unnamed_addr constant [4 x i8] c"Os#\00", align 1
@.str.122 = private unnamed_addr constant [9 x i8] c"_b_base_\00", align 1
@.str.123 = private unnamed_addr constant [16 x i8] c"the base object\00", align 1
@.str.124 = private unnamed_addr constant [14 x i8] c"_b_needsfree_\00", align 1
@.str.125 = private unnamed_addr constant [42 x i8] c"whether the object owns the memory or not\00", align 1
@.str.126 = private unnamed_addr constant [9 x i8] c"_objects\00", align 1
@.str.127 = private unnamed_addr constant [50 x i8] c"internal objects tree (NEVER CHANGE THIS OBJECT!)\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.128 = private unnamed_addr constant [6 x i8] c"(%s) \00", align 1
@.str.129 = private unnamed_addr constant [29 x i8] c"expected %s instance, got %s\00", align 1
@.str.130 = private unnamed_addr constant [55 x i8] c"incompatible types, %s instance instead of %s instance\00", align 1
@.str.131 = private unnamed_addr constant [3 x i8] c"%x\00", align 1
@.str.132 = private unnamed_addr constant [33 x i8] c"ctypes object structure too deep\00", align 1
@.str.133 = private unnamed_addr constant [4 x i8] c":%x\00", align 1
@.str.134 = private unnamed_addr constant [18 x i8] c"<%s object at %p>\00", align 1
@.str.135 = private unnamed_addr constant [54 x i8] c"this function takes at least %d argument%s (%d given)\00", align 1
@.str.136 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.137 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.138 = private unnamed_addr constant [45 x i8] c"this function takes %d argument%s (%d given)\00", align 1
@.str.139 = private unnamed_addr constant [24 x i8] c"NULL stgdict unexpected\00", align 1
@.str.140 = private unnamed_addr constant [51 x i8] c"%s 'out' parameter must be passed as default value\00", align 1
@.str.141 = private unnamed_addr constant [33 x i8] c"paramflag %d not yet implemented\00", align 1
@.str.142 = private unnamed_addr constant [44 x i8] c"call takes exactly %d arguments (%zd given)\00", align 1
@.str.143 = private unnamed_addr constant [31 x i8] c"required argument '%S' missing\00", align 1
@.str.144 = private unnamed_addr constant [21 x i8] c"not enough arguments\00", align 1
@_build_result.PyId___ctypes_from_outparam__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.115, i32 0, i32 0), %struct._object* null }, align 8
@.str.145 = private unnamed_addr constant [9 x i8] c"errcheck\00", align 1
@.str.146 = private unnamed_addr constant [31 x i8] c"a function to check for errors\00", align 1
@.str.147 = private unnamed_addr constant [8 x i8] c"restype\00", align 1
@.str.148 = private unnamed_addr constant [24 x i8] c"specify the result type\00", align 1
@.str.149 = private unnamed_addr constant [9 x i8] c"argtypes\00", align 1
@.str.150 = private unnamed_addr constant [27 x i8] c"specify the argument types\00", align 1
@.str.151 = private unnamed_addr constant [40 x i8] c"the errcheck attribute must be callable\00", align 1
@.str.152 = private unnamed_addr constant [44 x i8] c"restype must be a type, a callable, or None\00", align 1
@.str.153 = private unnamed_addr constant [2 x i8] c"O\00", align 1
@.str.154 = private unnamed_addr constant [54 x i8] c"argument must be callable or integer function address\00", align 1
@.str.155 = private unnamed_addr constant [53 x i8] c"cannot construct instance of this class: no argtypes\00", align 1
@.str.156 = private unnamed_addr constant [4 x i8] c"O|O\00", align 1
@.str.157 = private unnamed_addr constant [4 x i8] c"O&O\00", align 1
@.str.158 = private unnamed_addr constant [40 x i8] c"function name must be string or integer\00", align 1
@.str.159 = private unnamed_addr constant [35 x i8] c"paramflags must be a tuple or None\00", align 1
@.str.160 = private unnamed_addr constant [49 x i8] c"paramflags must have the same length as argtypes\00", align 1
@.str.161 = private unnamed_addr constant [5 x i8] c"i|ZO\00", align 1
@.str.162 = private unnamed_addr constant [65 x i8] c"paramflags must be a sequence of (int [,string [,value]]) tuples\00", align 1
@.str.163 = private unnamed_addr constant [33 x i8] c"paramflag value %d not supported\00", align 1
@.str.164 = private unnamed_addr constant [4 x i8] c"PzZ\00", align 1
@.str.165 = private unnamed_addr constant [50 x i8] c"'out' parameter %d must be a pointer type, not %s\00", align 1
@PyExc_IndexError = external global %struct._object*, align 8
@.str.166 = private unnamed_addr constant [14 x i8] c"invalid index\00", align 1
@.str.167 = private unnamed_addr constant [37 x i8] c"Array does not support item deletion\00", align 1
@Array_as_mapping = internal global { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* } { i64 (%struct._object*)* @Array_length, %struct._object* (%struct._object*, %struct._object*)* @Array_subscript, i32 (%struct._object*, %struct._object*, %struct._object*)* @Array_ass_subscript }, align 8
@PySlice_Type = external global %struct._typeobject, align 8
@.str.168 = private unnamed_addr constant [25 x i8] c"indices must be integers\00", align 1
@.str.169 = private unnamed_addr constant [38 x i8] c"Can only assign sequence of same size\00", align 1
@.str.170 = private unnamed_addr constant [24 x i8] c"indices must be integer\00", align 1
@.str.171 = private unnamed_addr constant [18 x i8] c"args not a tuple?\00", align 1
@.str.172 = private unnamed_addr constant [21 x i8] c"_ctypes._SimpleCData\00", align 1
@Simple_as_number = internal global %struct.PyNumberMethods { %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @Simple_bool to i32 (%struct._object*)*), %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null }, align 8
@Simple_methods = internal global [2 x %struct.PyMethodDef] [%struct.PyMethodDef { i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.115, i32 0, i32 0), %struct._object* (%struct._object*, %struct._object*)* @Simple_from_outparm, i32 4, i8* null }, %struct.PyMethodDef zeroinitializer], align 16
@Simple_getsets = internal global [2 x %struct.PyGetSetDef] [%struct.PyGetSetDef { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.85, i32 0, i32 0), %struct._object* (%struct._object*, i8*)* bitcast (%struct._object* (%struct.tagCDataObject*)* @Simple_get_value to %struct._object* (%struct._object*, i8*)*), i32 (%struct._object*, %struct._object*, i8*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*)* @Simple_set_value to i32 (%struct._object*, %struct._object*, i8*)*), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.175, i32 0, i32 0), i8* null }, %struct.PyGetSetDef zeroinitializer], align 16
@Simple_Type = internal global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.172, i32 0, i32 0), i64 96, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* bitcast (%struct._object* (%struct.tagCDataObject*)* @Simple_repr to %struct._object* (%struct._object*)*), %struct.PyNumberMethods* @Simple_as_number, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @PyCData_as_buffer, i64 263168, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.14, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.tagCDataObject*, i32 (%struct._object*, i8*)*, i8*)* @PyCData_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @PyCData_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([2 x %struct.PyMethodDef], [2 x %struct.PyMethodDef]* @Simple_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* getelementptr inbounds ([2 x %struct.PyGetSetDef], [2 x %struct.PyGetSetDef]* @Simple_getsets, i32 0, i32 0), %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* bitcast (i32 (%struct.tagCDataObject*, %struct._object*, %struct._object*)* @Simple_init to i32 (%struct._object*, %struct._object*, %struct._object*)*), %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @GenericPyCData_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.173 = private unnamed_addr constant [7 x i8] c"%s(%R)\00", align 1
@.str.174 = private unnamed_addr constant [17 x i8] zeroinitializer, align 1
@.str.175 = private unnamed_addr constant [14 x i8] c"current value\00", align 1
@.str.176 = private unnamed_addr constant [9 x i8] c"__init__\00", align 1
@.str.177 = private unnamed_addr constant [20 x i8] c"NULL pointer access\00", align 1
@.str.178 = private unnamed_addr constant [39 x i8] c"Pointer does not support item deletion\00", align 1
@Pointer_as_mapping = internal global { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* } { i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* @Pointer_subscript, i32 (%struct._object*, %struct._object*, %struct._object*)* null }, align 8
@.str.179 = private unnamed_addr constant [26 x i8] c"slice step cannot be zero\00", align 1
@.str.180 = private unnamed_addr constant [37 x i8] c"slice start is required for step < 0\00", align 1
@.str.181 = private unnamed_addr constant [23 x i8] c"slice stop is required\00", align 1
@.str.182 = private unnamed_addr constant [32 x i8] c"Pointer indices must be integer\00", align 1
@.str.183 = private unnamed_addr constant [9 x i8] c"contents\00", align 1
@.str.184 = private unnamed_addr constant [47 x i8] c"the object this pointer points to (read-write)\00", align 1
@.str.185 = private unnamed_addr constant [26 x i8] c"expected %s instead of %s\00", align 1
@.str.186 = private unnamed_addr constant [8 x i8] c"POINTER\00", align 1
@.str.187 = private unnamed_addr constant [38 x i8] c"Cannot create instance: has no _type_\00", align 1
@.str.188 = private unnamed_addr constant [8 x i8] c"_ctypes\00", align 1
@module_docs = internal constant [57 x i8] c"Create and manipulate C compatible data types in Python.\00", align 16
@_ctypes_module_methods = external global [0 x %struct.PyMethodDef], align 8
@.str.189 = private unnamed_addr constant [18 x i8] c"_ctypes.UnionType\00", align 1
@UnionType_Type = internal global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.189, i32 0, i32 0), i64 0, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* @CDataType_as_sequence, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* @UnionType_setattro, %struct.PyBufferProcs* null, i64 279552, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct._typeobject*, i32 (%struct._object*, i8*)*, i8*)* @CDataType_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct._typeobject*)* @CDataType_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* getelementptr inbounds ([6 x %struct.PyMethodDef], [6 x %struct.PyMethodDef]* @CDataType_methods, i32 0, i32 0), %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @UnionType_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.190 = private unnamed_addr constant [18 x i8] c"_ctypes.Structure\00", align 1
@.str.191 = private unnamed_addr constant [21 x i8] c"Structure base class\00", align 1
@Struct_Type = internal global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.190, i32 0, i32 0), i64 96, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @PyCData_as_buffer, i64 263168, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.191, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.tagCDataObject*, i32 (%struct._object*, i8*)*, i8*)* @PyCData_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @PyCData_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @Struct_init, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @GenericPyCData_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.192 = private unnamed_addr constant [22 x i8] c"too many initializers\00", align 1
@.str.193 = private unnamed_addr constant [32 x i8] c"duplicate values for field '%s'\00", align 1
@.str.194 = private unnamed_addr constant [14 x i8] c"_ctypes.Union\00", align 1
@.str.195 = private unnamed_addr constant [17 x i8] c"Union base class\00", align 1
@Union_Type = internal global { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* } { %struct.PyVarObject { %struct._object { i64 1, %struct._typeobject* null }, i64 0 }, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.194, i32 0, i32 0), i64 96, i64 0, void (%struct._object*)* null, i32 (%struct._object*, %struct._IO_FILE*, i32)* null, %struct._object* (%struct._object*, i8*)* null, i32 (%struct._object*, i8*, %struct._object*)* null, i8* null, %struct._object* (%struct._object*)* null, %struct.PyNumberMethods* null, %struct.PySequenceMethods* null, %struct.PyMappingMethods* null, i64 (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, %struct.PyBufferProcs* @PyCData_as_buffer, i64 263168, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.195, i32 0, i32 0), i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)* bitcast (i32 (%struct.tagCDataObject*, i32 (%struct._object*, i8*)*, i8*)* @PyCData_traverse to i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*), i32 (%struct._object*)* bitcast (i32 (%struct.tagCDataObject*)* @PyCData_clear to i32 (%struct._object*)*), %struct._object* (%struct._object*, %struct._object*, i32)* null, i64 0, %struct._object* (%struct._object*)* null, %struct._object* (%struct._object*)* null, %struct.PyMethodDef* null, %struct.PyMemberDef* null, %struct.PyGetSetDef* null, %struct._typeobject* null, %struct._object* null, %struct._object* (%struct._object*, %struct._object*, %struct._object*)* null, i32 (%struct._object*, %struct._object*, %struct._object*)* null, i64 0, i32 (%struct._object*, %struct._object*, %struct._object*)* @Struct_init, %struct._object* (%struct._typeobject*, i64)* null, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @GenericPyCData_new, void (i8*)* null, i32 (%struct._object*)* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, %struct._object* null, void (%struct._object*)* null, i32 0, void (%struct._object*)* null }, align 8
@.str.196 = private unnamed_addr constant [8 x i8] c"sPzUZXO\00", align 1
@.str.197 = private unnamed_addr constant [49 x i8] c"cast() argument 2 must be a pointer type, not %s\00", align 1

; Function Attrs: uwtable
define i32 @PyDict_SetItemProxy(%struct._object* %dict, %struct._object* %key, %struct._object* %item) #0 {
entry:
  %retval = alloca i32, align 4
  %dict.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %item.addr = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %remover = alloca %struct.DictRemoverObject*, align 8
  %proxy = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  store %struct._object* %item, %struct._object** %item.addr, align 8
  %call = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @DictRemover_Type to %struct._typeobject*), i32 0, i32 0, i32 0), %struct._object* null)
  store %struct._object* %call, %struct._object** %obj, align 8
  %0 = load %struct._object*, %struct._object** %obj, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %obj, align 8
  %2 = bitcast %struct._object* %1 to %struct.DictRemoverObject*
  store %struct.DictRemoverObject* %2, %struct.DictRemoverObject** %remover, align 8
  %3 = load %struct._object*, %struct._object** %key.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct._object*, %struct._object** %key.addr, align 8
  %6 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %remover, align 8
  %key1 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %6, i32 0, i32 1
  store %struct._object* %5, %struct._object** %key1, align 8
  %7 = load %struct._object*, %struct._object** %dict.addr, align 8
  %ob_refcnt2 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt2, align 8
  %inc3 = add i64 %8, 1
  store i64 %inc3, i64* %ob_refcnt2, align 8
  %9 = load %struct._object*, %struct._object** %dict.addr, align 8
  %10 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %remover, align 8
  %dict4 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %10, i32 0, i32 2
  store %struct._object* %9, %struct._object** %dict4, align 8
  %11 = load %struct._object*, %struct._object** %item.addr, align 8
  %12 = load %struct._object*, %struct._object** %obj, align 8
  %call5 = call %struct._object* @PyWeakref_NewProxy(%struct._object* %11, %struct._object* %12)
  store %struct._object* %call5, %struct._object** %proxy, align 8
  br label %do.body

do.body:                                          ; preds = %if.end
  %13 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt6 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt6, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt6, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %20 = load %struct._object*, %struct._object** %proxy, align 8
  %cmp10 = icmp eq %struct._object* %20, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.12:                                        ; preds = %do.end
  %21 = load %struct._object*, %struct._object** %dict.addr, align 8
  %22 = load %struct._object*, %struct._object** %key.addr, align 8
  %23 = load %struct._object*, %struct._object** %proxy, align 8
  %call13 = call i32 @PyDict_SetItem(%struct._object* %21, %struct._object* %22, %struct._object* %23)
  store i32 %call13, i32* %result, align 4
  br label %do.body.14

do.body.14:                                       ; preds = %if.end.12
  %24 = load %struct._object*, %struct._object** %proxy, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp15, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %26, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %29(%struct._object* %30)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  %31 = load i32, i32* %result, align 4
  store i32 %31, i32* %retval
  br label %return

return:                                           ; preds = %do.end.24, %if.then.11, %if.then
  %32 = load i32, i32* %retval
  ret i32 %32
}

declare %struct._object* @PyObject_CallObject(%struct._object*, %struct._object*) #1

declare %struct._object* @PyWeakref_NewProxy(%struct._object*, %struct._object*) #1

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: uwtable
define %struct._object* @PyDict_GetItemProxy(%struct._object* %dict, %struct._object* %key) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dict.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  store %struct._object* %dict, %struct._object** %dict.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  %0 = load %struct._object*, %struct._object** %dict.addr, align 8
  %1 = load %struct._object*, %struct._object** %key.addr, align 8
  %call = call %struct._object* @PyDict_GetItem(%struct._object* %0, %struct._object* %1)
  store %struct._object* %call, %struct._object** %item, align 8
  %2 = load %struct._object*, %struct._object** %item, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %item, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %4, @_PyWeakref_ProxyType
  br i1 %cmp1, label %if.end.5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %item, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %6, @_PyWeakref_CallableProxyType
  br i1 %cmp3, label %if.end.5, label %if.then.4

if.then.4:                                        ; preds = %lor.lhs.false
  %7 = load %struct._object*, %struct._object** %item, align 8
  store %struct._object* %7, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %lor.lhs.false, %if.end
  %8 = load %struct._object*, %struct._object** %item, align 8
  %9 = bitcast %struct._object* %8 to %struct._PyWeakReference*
  %wr_object = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %9, i32 0, i32 1
  %10 = load %struct._object*, %struct._object** %wr_object, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %cmp6 = icmp sgt i64 %11, 0
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.5
  %12 = load %struct._object*, %struct._object** %item, align 8
  %13 = bitcast %struct._object* %12 to %struct._PyWeakReference*
  %wr_object7 = getelementptr inbounds %struct._PyWeakReference, %struct._PyWeakReference* %13, i32 0, i32 1
  %14 = load %struct._object*, %struct._object** %wr_object7, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.5
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %14, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %result, align 8
  %15 = load %struct._object*, %struct._object** %result, align 8
  %cmp8 = icmp eq %struct._object* %15, @_Py_NoneStruct
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %cond.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %cond.end
  %16 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %16, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.9, %if.then.4, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

declare %struct._object* @PyDict_GetItem(%struct._object*, %struct._object*) #1

; Function Attrs: uwtable
define i8* @_ctypes_alloc_format_string(i8* %prefix, i8* %suffix) #0 {
entry:
  %retval = alloca i8*, align 8
  %prefix.addr = alloca i8*, align 8
  %suffix.addr = alloca i8*, align 8
  %len = alloca i64, align 8
  %result = alloca i8*, align 8
  store i8* %prefix, i8** %prefix.addr, align 8
  store i8* %suffix, i8** %suffix.addr, align 8
  %0 = load i8*, i8** %suffix.addr, align 8
  %cmp = icmp eq i8* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8*, i8** %suffix.addr, align 8
  %call = call i64 @strlen(i8* %1) #7
  store i64 %call, i64* %len, align 8
  %2 = load i8*, i8** %prefix.addr, align 8
  %tobool = icmp ne i8* %2, null
  br i1 %tobool, label %if.then.1, label %if.end.3

if.then.1:                                        ; preds = %if.end
  %3 = load i8*, i8** %prefix.addr, align 8
  %call2 = call i64 @strlen(i8* %3) #7
  %4 = load i64, i64* %len, align 8
  %add = add i64 %4, %call2
  store i64 %add, i64* %len, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.1, %if.end
  %5 = load i64, i64* %len, align 8
  %add4 = add i64 %5, 1
  %call5 = call i8* @PyMem_Malloc(i64 %add4)
  store i8* %call5, i8** %result, align 8
  %6 = load i8*, i8** %result, align 8
  %cmp6 = icmp eq i8* %6, null
  br i1 %cmp6, label %if.then.7, label %if.end.9

if.then.7:                                        ; preds = %if.end.3
  %call8 = call %struct._object* @PyErr_NoMemory()
  store i8* null, i8** %retval
  br label %return

if.end.9:                                         ; preds = %if.end.3
  %7 = load i8*, i8** %prefix.addr, align 8
  %tobool10 = icmp ne i8* %7, null
  br i1 %tobool10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %if.end.9
  %8 = load i8*, i8** %result, align 8
  %9 = load i8*, i8** %prefix.addr, align 8
  %call12 = call i8* @strcpy(i8* %8, i8* %9) #4
  br label %if.end.13

if.else:                                          ; preds = %if.end.9
  %10 = load i8*, i8** %result, align 8
  %arrayidx = getelementptr i8, i8* %10, i64 0
  store i8 0, i8* %arrayidx, align 1
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.11
  %11 = load i8*, i8** %result, align 8
  %12 = load i8*, i8** %suffix.addr, align 8
  %call14 = call i8* @strcat(i8* %11, i8* %12) #4
  %13 = load i8*, i8** %result, align 8
  store i8* %13, i8** %retval
  br label %return

return:                                           ; preds = %if.end.13, %if.then.7, %if.then
  %14 = load i8*, i8** %retval
  ret i8* %14
}

; Function Attrs: nounwind readonly
declare i64 @strlen(i8*) #2

declare i8* @PyMem_Malloc(i64) #1

declare %struct._object* @PyErr_NoMemory() #1

; Function Attrs: nounwind
declare i8* @strcpy(i8*, i8*) #3

; Function Attrs: nounwind
declare i8* @strcat(i8*, i8*) #3

; Function Attrs: uwtable
define i8* @_ctypes_alloc_format_string_with_shape(i32 %ndim, i64* %shape, i8* %prefix, i8* %suffix) #0 {
entry:
  %retval = alloca i8*, align 8
  %ndim.addr = alloca i32, align 4
  %shape.addr = alloca i64*, align 8
  %prefix.addr = alloca i8*, align 8
  %suffix.addr = alloca i8*, align 8
  %new_prefix = alloca i8*, align 8
  %result = alloca i8*, align 8
  %buf = alloca [32 x i8], align 16
  %prefix_len = alloca i32, align 4
  %k = alloca i32, align 4
  store i32 %ndim, i32* %ndim.addr, align 4
  store i64* %shape, i64** %shape.addr, align 8
  store i8* %prefix, i8** %prefix.addr, align 8
  store i8* %suffix, i8** %suffix.addr, align 8
  %0 = load i32, i32* %ndim.addr, align 4
  %mul = mul i32 32, %0
  %add = add i32 %mul, 3
  store i32 %add, i32* %prefix_len, align 4
  %1 = load i8*, i8** %prefix.addr, align 8
  %tobool = icmp ne i8* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %prefix.addr, align 8
  %call = call i64 @strlen(i8* %2) #7
  %3 = load i32, i32* %prefix_len, align 4
  %conv = sext i32 %3 to i64
  %add1 = add i64 %conv, %call
  %conv2 = trunc i64 %add1 to i32
  store i32 %conv2, i32* %prefix_len, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %4 = load i32, i32* %prefix_len, align 4
  %conv3 = sext i32 %4 to i64
  %call4 = call i8* @PyMem_Malloc(i64 %conv3)
  store i8* %call4, i8** %new_prefix, align 8
  %5 = load i8*, i8** %new_prefix, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end
  store i8* null, i8** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %6 = load i8*, i8** %new_prefix, align 8
  %arrayidx = getelementptr i8, i8* %6, i64 0
  store i8 0, i8* %arrayidx, align 1
  %7 = load i8*, i8** %prefix.addr, align 8
  %tobool8 = icmp ne i8* %7, null
  br i1 %tobool8, label %if.then.9, label %if.end.11

if.then.9:                                        ; preds = %if.end.7
  %8 = load i8*, i8** %new_prefix, align 8
  %9 = load i8*, i8** %prefix.addr, align 8
  %call10 = call i8* @strcpy(i8* %8, i8* %9) #4
  br label %if.end.11

if.end.11:                                        ; preds = %if.then.9, %if.end.7
  %10 = load i32, i32* %ndim.addr, align 4
  %cmp12 = icmp sgt i32 %10, 0
  br i1 %cmp12, label %if.then.14, label %if.end.30

if.then.14:                                       ; preds = %if.end.11
  %11 = load i8*, i8** %new_prefix, align 8
  %call15 = call i8* @strcat(i8* %11, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0)) #4
  store i32 0, i32* %k, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.14
  %12 = load i32, i32* %k, align 4
  %13 = load i32, i32* %ndim.addr, align 4
  %cmp16 = icmp slt i32 %12, %13
  br i1 %cmp16, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32, i32* %k, align 4
  %15 = load i32, i32* %ndim.addr, align 4
  %sub = sub i32 %15, 1
  %cmp18 = icmp slt i32 %14, %sub
  br i1 %cmp18, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %for.body
  %arraydecay = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %16 = load i32, i32* %k, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load i64*, i64** %shape.addr, align 8
  %arrayidx21 = getelementptr i64, i64* %17, i64 %idxprom
  %18 = load i64, i64* %arrayidx21, align 8
  %call22 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i64 %18) #4
  br label %if.end.27

if.else:                                          ; preds = %for.body
  %arraydecay23 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %19 = load i32, i32* %k, align 4
  %idxprom24 = sext i32 %19 to i64
  %20 = load i64*, i64** %shape.addr, align 8
  %arrayidx25 = getelementptr i64, i64* %20, i64 %idxprom24
  %21 = load i64, i64* %arrayidx25, align 8
  %call26 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay23, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i64 %21) #4
  br label %if.end.27

if.end.27:                                        ; preds = %if.else, %if.then.20
  %22 = load i8*, i8** %new_prefix, align 8
  %arraydecay28 = getelementptr inbounds [32 x i8], [32 x i8]* %buf, i32 0, i32 0
  %call29 = call i8* @strcat(i8* %22, i8* %arraydecay28) #4
  br label %for.inc

for.inc:                                          ; preds = %if.end.27
  %23 = load i32, i32* %k, align 4
  %inc = add i32 %23, 1
  store i32 %inc, i32* %k, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.30

if.end.30:                                        ; preds = %for.end, %if.end.11
  %24 = load i8*, i8** %new_prefix, align 8
  %25 = load i8*, i8** %suffix.addr, align 8
  %call31 = call i8* @_ctypes_alloc_format_string(i8* %24, i8* %25)
  store i8* %call31, i8** %result, align 8
  %26 = load i8*, i8** %new_prefix, align 8
  call void @PyMem_Free(i8* %26)
  %27 = load i8*, i8** %result, align 8
  store i8* %27, i8** %retval
  br label %return

return:                                           ; preds = %if.end.30, %if.then.6
  %28 = load i8*, i8** %retval
  ret i8* %28
}

; Function Attrs: nounwind
declare i32 @sprintf(i8*, i8*, ...) #3

declare void @PyMem_Free(i8*) #1

; Function Attrs: uwtable
define internal i32 @PyCStructType_setattro(%struct._object* %self, %struct._object* %key, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load i32 (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)** bitcast ({}** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 17) to i32 (%struct._object*, %struct._object*, %struct._object*)**), align 8
  %1 = load %struct._object*, %struct._object** %self.addr, align 8
  %2 = load %struct._object*, %struct._object** %key.addr, align 8
  %3 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 %0(%struct._object* %1, %struct._object* %2, %struct._object* %3)
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %value.addr, align 8
  %tobool = icmp ne %struct._object* %4, null
  br i1 %tobool, label %land.lhs.true, label %if.end.8

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %key.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19
  %7 = load i64, i64* %tp_flags, align 8
  %and = and i64 %7, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %land.lhs.true.2, label %if.end.8

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %8 = load %struct._object*, %struct._object** %key.addr, align 8
  %call3 = call i8* @PyUnicode_AsUTF8(%struct._object* %8)
  %call4 = call i32 @strcmp(i8* %call3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52, i32 0, i32 0)) #7
  %cmp5 = icmp eq i32 0, %call4
  br i1 %cmp5, label %if.then.6, label %if.end.8

if.then.6:                                        ; preds = %land.lhs.true.2
  %9 = load %struct._object*, %struct._object** %self.addr, align 8
  %10 = load %struct._object*, %struct._object** %value.addr, align 8
  %call7 = call i32 @PyCStructUnionType_update_stgdict(%struct._object* %9, %struct._object* %10, i32 1)
  store i32 %call7, i32* %retval
  br label %return

if.end.8:                                         ; preds = %land.lhs.true.2, %land.lhs.true, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.6, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: uwtable
define internal i32 @CDataType_traverse(%struct._typeobject* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._typeobject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %vret = alloca i32, align 4
  store %struct._typeobject* %self, %struct._typeobject** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %self.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool = icmp ne %struct.StgDictObject* %2, null
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %3, i32 0, i32 5
  %4 = load %struct._object*, %struct._object** %proto, align 8
  %tobool1 = icmp ne %struct._object* %4, null
  br i1 %tobool1, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %do.body
  %5 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto3 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %6, i32 0, i32 5
  %7 = load %struct._object*, %struct._object** %proto3, align 8
  %8 = load i8*, i8** %arg.addr, align 8
  %call4 = call i32 %5(%struct._object* %7, i8* %8)
  store i32 %call4, i32* %vret, align 4
  %9 = load i32, i32* %vret, align 4
  %tobool5 = icmp ne i32 %9, 0
  br i1 %tobool5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %if.then.2
  %10 = load i32, i32* %vret, align 4
  store i32 %10, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then.2
  br label %if.end.7

if.end.7:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.7
  br label %if.end.8

if.end.8:                                         ; preds = %do.end, %entry
  %11 = load i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 21), align 8
  %12 = load %struct._typeobject*, %struct._typeobject** %self.addr, align 8
  %13 = bitcast %struct._typeobject* %12 to %struct._object*
  %14 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %15 = load i8*, i8** %arg.addr, align 8
  %call9 = call i32 %11(%struct._object* %13, i32 (%struct._object*, i8*)* %14, i8* %15)
  store i32 %call9, i32* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.6
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: uwtable
define internal i32 @CDataType_clear(%struct._typeobject* %self) #0 {
entry:
  %self.addr = alloca %struct._typeobject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %self, %struct._typeobject** %self.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %self.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool = icmp ne %struct.StgDictObject* %2, null
  br i1 %tobool, label %if.then, label %if.end.8

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %3, i32 0, i32 5
  %4 = load %struct._object*, %struct._object** %proto, align 8
  store %struct._object* %4, %struct._object** %_py_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %5, null
  br i1 %cmp, label %if.then.1, label %if.end.6

if.then.1:                                        ; preds = %do.body
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto2 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %6, i32 0, i32 5
  store %struct._object* null, %struct._object** %proto2, align 8
  br label %do.body.3

do.body.3:                                        ; preds = %if.then.1
  %7 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body.3
  br label %if.end

if.else:                                          ; preds = %do.body.3
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.6

if.end.6:                                         ; preds = %do.end, %do.body
  br label %do.end.7

do.end.7:                                         ; preds = %if.end.6
  br label %if.end.8

if.end.8:                                         ; preds = %do.end.7, %entry
  %14 = load i32 (%struct._object*)*, i32 (%struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 22), align 8
  %15 = load %struct._typeobject*, %struct._typeobject** %self.addr, align 8
  %16 = bitcast %struct._typeobject* %15 to %struct._object*
  %call9 = call i32 %14(%struct._object* %16)
  ret i32 %call9
}

; Function Attrs: uwtable
define internal %struct._object* @PyCStructType_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* @StructUnionType_new(%struct._typeobject* %0, %struct._object* %1, %struct._object* %2, i32 1)
  ret %struct._object* %call
}

; Function Attrs: uwtable
define internal %struct._object* @PyCPointerType_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._typeobject*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %proto = alloca %struct._object*, align 8
  %typedict = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %itemdict = alloca %struct.StgDictObject*, align 8
  %current_format = alloca i8*, align 8
  %_py_decref_tmp36 = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  %_py_decref_tmp83 = alloca %struct._object*, align 8
  %_py_decref_tmp96 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call %struct._object* @PyTuple_GetItem(%struct._object* %0, i64 2)
  store %struct._object* %call, %struct._object** %typedict, align 8
  %1 = load %struct._object*, %struct._object** %typedict, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyCStgDict_Type, i32 0, i32 0, i32 0), %struct._object* null)
  %2 = bitcast %struct._object* %call1 to %struct.StgDictObject*
  store %struct.StgDictObject* %2, %struct.StgDictObject** %stgdict, align 8
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %tobool2 = icmp ne %struct.StgDictObject* %3, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %4, i32 0, i32 1
  store i64 8, i64* %size, align 8
  %call5 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.76, i32 0, i32 0))
  %pffi_type = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call5, i32 0, i32 3
  %5 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type, align 8
  %alignment = getelementptr inbounds %struct._ffi_type, %struct._ffi_type* %5, i32 0, i32 1
  %6 = load i16, i16* %alignment, align 2
  %conv = zext i16 %6 to i64
  %7 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %align = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %7, i32 0, i32 2
  store i64 %conv, i64* %align, align 8
  %8 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %8, i32 0, i32 3
  store i64 1, i64* %length, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ffi_type_pointer = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 4
  %10 = bitcast %struct._ffi_type* %ffi_type_pointer to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %10, i8* bitcast (%struct._ffi_type* @ffi_type_pointer to i8*), i64 24, i32 8, i1 false)
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %paramfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 8
  store %struct.tagPyCArgObject* (%struct.tagCDataObject*)* @PyCPointerType_paramfunc, %struct.tagPyCArgObject* (%struct.tagCDataObject*)** %paramfunc, align 8
  %12 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %12, i32 0, i32 13
  %13 = load i32, i32* %flags, align 4
  %or = or i32 %13, 256
  store i32 %or, i32* %flags, align 4
  %14 = load %struct._object*, %struct._object** %typedict, align 8
  %call6 = call %struct._object* @PyDict_GetItemString(%struct._object* %14, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0))
  store %struct._object* %call6, %struct._object** %proto, align 8
  %15 = load %struct._object*, %struct._object** %proto, align 8
  %tobool7 = icmp ne %struct._object* %15, null
  br i1 %tobool7, label %land.lhs.true, label %if.end.15

land.lhs.true:                                    ; preds = %if.end.4
  %16 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %17 = load %struct._object*, %struct._object** %proto, align 8
  %call8 = call i32 @PyCPointerType_SetProto(%struct.StgDictObject* %16, %struct._object* %17)
  %cmp = icmp eq i32 -1, %call8
  br i1 %cmp, label %if.then.10, label %if.end.15

if.then.10:                                       ; preds = %land.lhs.true
  br label %do.body

do.body:                                          ; preds = %if.then.10
  %18 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %19 = bitcast %struct.StgDictObject* %18 to %struct._object*
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.14

if.else:                                          ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.15:                                        ; preds = %land.lhs.true, %if.end.4
  %26 = load %struct._object*, %struct._object** %proto, align 8
  %tobool16 = icmp ne %struct._object* %26, null
  br i1 %tobool16, label %if.then.17, label %if.end.48

if.then.17:                                       ; preds = %if.end.15
  %27 = load %struct._object*, %struct._object** %proto, align 8
  %call18 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %27)
  store %struct.StgDictObject* %call18, %struct.StgDictObject** %itemdict, align 8
  %28 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %format = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %28, i32 0, i32 14
  %29 = load i8*, i8** %format, align 8
  %tobool19 = icmp ne i8* %29, null
  br i1 %tobool19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.17
  %30 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %format20 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %30, i32 0, i32 14
  %31 = load i8*, i8** %format20, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then.17
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %31, %cond.true ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.71, i32 0, i32 0), %cond.false ]
  store i8* %cond, i8** %current_format, align 8
  %32 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %shape = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %32, i32 0, i32 16
  %33 = load i64*, i64** %shape, align 8
  %cmp21 = icmp ne i64* %33, null
  br i1 %cmp21, label %if.then.23, label %if.else.27

if.then.23:                                       ; preds = %cond.end
  %34 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %ndim = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %34, i32 0, i32 15
  %35 = load i32, i32* %ndim, align 4
  %36 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %shape24 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %36, i32 0, i32 16
  %37 = load i64*, i64** %shape24, align 8
  %38 = load i8*, i8** %current_format, align 8
  %call25 = call i8* @_ctypes_alloc_format_string_with_shape(i32 %35, i64* %37, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.77, i32 0, i32 0), i8* %38)
  %39 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format26 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %39, i32 0, i32 14
  store i8* %call25, i8** %format26, align 8
  br label %if.end.30

if.else.27:                                       ; preds = %cond.end
  %40 = load i8*, i8** %current_format, align 8
  %call28 = call i8* @_ctypes_alloc_format_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.77, i32 0, i32 0), i8* %40)
  %41 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format29 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %41, i32 0, i32 14
  store i8* %call28, i8** %format29, align 8
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.23
  %42 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format31 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %42, i32 0, i32 14
  %43 = load i8*, i8** %format31, align 8
  %cmp32 = icmp eq i8* %43, null
  br i1 %cmp32, label %if.then.34, label %if.end.47

if.then.34:                                       ; preds = %if.end.30
  br label %do.body.35

do.body.35:                                       ; preds = %if.then.34
  %44 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %45 = bitcast %struct.StgDictObject* %44 to %struct._object*
  store %struct._object* %45, %struct._object** %_py_decref_tmp36, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_refcnt37 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt37, align 8
  %dec38 = add i64 %47, -1
  store i64 %dec38, i64* %ob_refcnt37, align 8
  %cmp39 = icmp ne i64 %dec38, 0
  br i1 %cmp39, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.35
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.35
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp36, align 8
  call void %50(%struct._object* %51)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.47:                                        ; preds = %if.end.30
  br label %if.end.48

if.end.48:                                        ; preds = %if.end.47, %if.end.15
  %52 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 37), align 8
  %53 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %54 = load %struct._object*, %struct._object** %args.addr, align 8
  %55 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call49 = call %struct._object* %52(%struct._typeobject* %53, %struct._object* %54, %struct._object* %55)
  %56 = bitcast %struct._object* %call49 to %struct._typeobject*
  store %struct._typeobject* %56, %struct._typeobject** %result, align 8
  %57 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %cmp50 = icmp eq %struct._typeobject* %57, null
  br i1 %cmp50, label %if.then.52, label %if.end.65

if.then.52:                                       ; preds = %if.end.48
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.52
  %58 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %59 = bitcast %struct.StgDictObject* %58 to %struct._object*
  store %struct._object* %59, %struct._object** %_py_decref_tmp54, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %61, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.53
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.53
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %64(%struct._object* %65)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.65:                                        ; preds = %if.end.48
  %66 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %67 = bitcast %struct.StgDictObject* %66 to %struct._object*
  %68 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %68, i32 0, i32 31
  %69 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call66 = call i32 @PyDict_Update(%struct._object* %67, %struct._object* %69)
  %cmp67 = icmp eq i32 -1, %call66
  br i1 %cmp67, label %if.then.69, label %if.end.94

if.then.69:                                       ; preds = %if.end.65
  br label %do.body.70

do.body.70:                                       ; preds = %if.then.69
  %70 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %71 = bitcast %struct._typeobject* %70 to %struct._object*
  store %struct._object* %71, %struct._object** %_py_decref_tmp71, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0
  %73 = load i64, i64* %ob_refcnt72, align 8
  %dec73 = add i64 %73, -1
  store i64 %dec73, i64* %ob_refcnt72, align 8
  %cmp74 = icmp ne i64 %dec73, 0
  br i1 %cmp74, label %if.then.76, label %if.else.77

if.then.76:                                       ; preds = %do.body.70
  br label %if.end.80

if.else.77:                                       ; preds = %do.body.70
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8
  %tp_dealloc79 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc79, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  call void %76(%struct._object* %77)
  br label %if.end.80

if.end.80:                                        ; preds = %if.else.77, %if.then.76
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  br label %do.body.82

do.body.82:                                       ; preds = %do.end.81
  %78 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %79 = bitcast %struct.StgDictObject* %78 to %struct._object*
  store %struct._object* %79, %struct._object** %_py_decref_tmp83, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_refcnt84 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 0
  %81 = load i64, i64* %ob_refcnt84, align 8
  %dec85 = add i64 %81, -1
  store i64 %dec85, i64* %ob_refcnt84, align 8
  %cmp86 = icmp ne i64 %dec85, 0
  br i1 %cmp86, label %if.then.88, label %if.else.89

if.then.88:                                       ; preds = %do.body.82
  br label %if.end.92

if.else.89:                                       ; preds = %do.body.82
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_type90 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type90, align 8
  %tp_dealloc91 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 4
  %84 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc91, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  call void %84(%struct._object* %85)
  br label %if.end.92

if.end.92:                                        ; preds = %if.else.89, %if.then.88
  br label %do.end.93

do.end.93:                                        ; preds = %if.end.92
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.94:                                        ; preds = %if.end.65
  br label %do.body.95

do.body.95:                                       ; preds = %if.end.94
  %86 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict97 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 31
  %87 = load %struct._object*, %struct._object** %tp_dict97, align 8
  store %struct._object* %87, %struct._object** %_py_decref_tmp96, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 0
  %89 = load i64, i64* %ob_refcnt98, align 8
  %dec99 = add i64 %89, -1
  store i64 %dec99, i64* %ob_refcnt98, align 8
  %cmp100 = icmp ne i64 %dec99, 0
  br i1 %cmp100, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %do.body.95
  br label %if.end.106

if.else.103:                                      ; preds = %do.body.95
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 1
  %91 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %91, i32 0, i32 4
  %92 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  call void %92(%struct._object* %93)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  %94 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %95 = bitcast %struct.StgDictObject* %94 to %struct._object*
  %96 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict108 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 31
  store %struct._object* %95, %struct._object** %tp_dict108, align 8
  %97 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %98 = bitcast %struct._typeobject* %97 to %struct._object*
  store %struct._object* %98, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.107, %do.end.93, %do.end.64, %do.end.46, %do.end, %if.then.3, %if.then
  %99 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %99
}

; Function Attrs: uwtable
define internal %struct._object* @PyCArrayType_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._typeobject*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %itemdict = alloca %struct.StgDictObject*, align 8
  %length_attr = alloca %struct._object*, align 8
  %type_attr = alloca %struct._object*, align 8
  %length = alloca i64, align 8
  %overflow = alloca i32, align 4
  %itemsize = alloca i64, align 8
  %itemalign = alloca i64, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp94 = alloca %struct._object*, align 8
  %_py_xdecref_tmp132 = alloca %struct._object*, align 8
  %_py_decref_tmp137 = alloca %struct._object*, align 8
  %_py_xdecref_tmp151 = alloca %struct._object*, align 8
  %_py_decref_tmp156 = alloca %struct._object*, align 8
  %_py_decref_tmp170 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 37), align 8
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %3 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* %0(%struct._typeobject* %1, %struct._object* %2, %struct._object* %3)
  %4 = bitcast %struct._object* %call to %struct._typeobject*
  store %struct._typeobject* %4, %struct._typeobject** %result, align 8
  %5 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %cmp = icmp eq %struct._typeobject* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  store %struct.StgDictObject* null, %struct.StgDictObject** %stgdict, align 8
  store %struct._object* null, %struct._object** %type_attr, align 8
  %6 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %7 = bitcast %struct._typeobject* %6 to %struct._object*
  %call1 = call %struct._object* @PyObject_GetAttrString(%struct._object* %7, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0))
  store %struct._object* %call1, %struct._object** %length_attr, align 8
  %8 = load %struct._object*, %struct._object** %length_attr, align 8
  %tobool = icmp ne %struct._object* %8, null
  br i1 %tobool, label %lor.lhs.false, label %if.then.3

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %length_attr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 19
  %11 = load i64, i64* %tp_flags, align 8
  %and = and i64 %11, 16777216
  %cmp2 = icmp ne i64 %and, 0
  br i1 %cmp2, label %if.end.13, label %if.then.3

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  %12 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.78, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %13 = load %struct._object*, %struct._object** %length_attr, align 8
  store %struct._object* %13, %struct._object** %_py_xdecref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp4 = icmp ne %struct._object* %14, null
  br i1 %cmp4, label %if.then.5, label %if.end.11

if.then.5:                                        ; preds = %do.body
  br label %do.body.6

do.body.6:                                        ; preds = %if.then.5
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body.6
  br label %if.end.10

if.else:                                          ; preds = %do.body.6
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end.10

if.end.10:                                        ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %if.end.11

if.end.11:                                        ; preds = %do.end, %do.body
  br label %do.end.12

do.end.12:                                        ; preds = %if.end.11
  br label %error

if.end.13:                                        ; preds = %lor.lhs.false
  %22 = load %struct._object*, %struct._object** %length_attr, align 8
  %call14 = call i64 @PyLong_AsLongAndOverflow(%struct._object* %22, i32* %overflow)
  store i64 %call14, i64* %length, align 8
  %23 = load i32, i32* %overflow, align 4
  %tobool15 = icmp ne i32 %23, 0
  br i1 %tobool15, label %if.then.16, label %if.end.28

if.then.16:                                       ; preds = %if.end.13
  %24 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %24, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.79, i32 0, i32 0))
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.16
  %25 = load %struct._object*, %struct._object** %length_attr, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp18, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %27, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %30(%struct._object* %31)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %error

if.end.28:                                        ; preds = %if.end.13
  br label %do.body.29

do.body.29:                                       ; preds = %if.end.28
  %32 = load %struct._object*, %struct._object** %length_attr, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp30, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %34, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %37(%struct._object* %38)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  %39 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %40 = bitcast %struct._typeobject* %39 to %struct._object*
  %call40 = call %struct._object* @PyObject_GetAttrString(%struct._object* %40, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0))
  store %struct._object* %call40, %struct._object** %type_attr, align 8
  %41 = load %struct._object*, %struct._object** %type_attr, align 8
  %tobool41 = icmp ne %struct._object* %41, null
  br i1 %tobool41, label %if.end.43, label %if.then.42

if.then.42:                                       ; preds = %do.end.39
  %42 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %42, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.80, i32 0, i32 0))
  br label %error

if.end.43:                                        ; preds = %do.end.39
  %call44 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyCStgDict_Type, i32 0, i32 0, i32 0), %struct._object* null)
  %43 = bitcast %struct._object* %call44 to %struct.StgDictObject*
  store %struct.StgDictObject* %43, %struct.StgDictObject** %stgdict, align 8
  %44 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %tobool45 = icmp ne %struct.StgDictObject* %44, null
  br i1 %tobool45, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %if.end.43
  br label %error

if.end.47:                                        ; preds = %if.end.43
  %45 = load %struct._object*, %struct._object** %type_attr, align 8
  %call48 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %45)
  store %struct.StgDictObject* %call48, %struct.StgDictObject** %itemdict, align 8
  %46 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %tobool49 = icmp ne %struct.StgDictObject* %46, null
  br i1 %tobool49, label %if.end.51, label %if.then.50

if.then.50:                                       ; preds = %if.end.47
  %47 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %47, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.75, i32 0, i32 0))
  br label %error

if.end.51:                                        ; preds = %if.end.47
  %48 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %format = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %48, i32 0, i32 14
  %49 = load i8*, i8** %format, align 8
  %call52 = call i8* @_ctypes_alloc_format_string(i8* null, i8* %49)
  %50 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format53 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %50, i32 0, i32 14
  store i8* %call52, i8** %format53, align 8
  %51 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format54 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %51, i32 0, i32 14
  %52 = load i8*, i8** %format54, align 8
  %cmp55 = icmp eq i8* %52, null
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.51
  br label %error

if.end.57:                                        ; preds = %if.end.51
  %53 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %ndim = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %53, i32 0, i32 15
  %54 = load i32, i32* %ndim, align 4
  %add = add i32 %54, 1
  %55 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ndim58 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %55, i32 0, i32 15
  store i32 %add, i32* %ndim58, align 4
  %56 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ndim59 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %56, i32 0, i32 15
  %57 = load i32, i32* %ndim59, align 4
  %conv = sext i32 %57 to i64
  %mul = mul i64 8, %conv
  %call60 = call i8* @PyMem_Malloc(i64 %mul)
  %58 = bitcast i8* %call60 to i64*
  %59 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %shape = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %59, i32 0, i32 16
  store i64* %58, i64** %shape, align 8
  %60 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %shape61 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %60, i32 0, i32 16
  %61 = load i64*, i64** %shape61, align 8
  %cmp62 = icmp eq i64* %61, null
  br i1 %cmp62, label %if.then.64, label %if.end.66

if.then.64:                                       ; preds = %if.end.57
  %call65 = call %struct._object* @PyErr_NoMemory()
  br label %error

if.end.66:                                        ; preds = %if.end.57
  %62 = load i64, i64* %length, align 8
  %63 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %shape67 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %63, i32 0, i32 16
  %64 = load i64*, i64** %shape67, align 8
  %arrayidx = getelementptr i64, i64* %64, i64 0
  store i64 %62, i64* %arrayidx, align 8
  %65 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %shape68 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %65, i32 0, i32 16
  %66 = load i64*, i64** %shape68, align 8
  %arrayidx69 = getelementptr i64, i64* %66, i64 1
  %67 = bitcast i64* %arrayidx69 to i8*
  %68 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %shape70 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %68, i32 0, i32 16
  %69 = load i64*, i64** %shape70, align 8
  %70 = bitcast i64* %69 to i8*
  %71 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ndim71 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %71, i32 0, i32 15
  %72 = load i32, i32* %ndim71, align 4
  %sub = sub i32 %72, 1
  %conv72 = sext i32 %sub to i64
  %mul73 = mul i64 8, %conv72
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %67, i8* %70, i64 %mul73, i32 8, i1 false)
  %73 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %73, i32 0, i32 1
  %74 = load i64, i64* %size, align 8
  store i64 %74, i64* %itemsize, align 8
  %75 = load i64, i64* %length, align 8
  %76 = load i64, i64* %itemsize, align 8
  %mul74 = mul i64 %75, %76
  %cmp75 = icmp slt i64 %mul74, 0
  br i1 %cmp75, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.end.66
  %77 = load %struct._object*, %struct._object** @PyExc_OverflowError, align 8
  call void @PyErr_SetString(%struct._object* %77, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.81, i32 0, i32 0))
  br label %error

if.end.78:                                        ; preds = %if.end.66
  %78 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %align = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %78, i32 0, i32 2
  %79 = load i64, i64* %align, align 8
  store i64 %79, i64* %itemalign, align 8
  %80 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %80, i32 0, i32 13
  %81 = load i32, i32* %flags, align 4
  %and79 = and i32 %81, 768
  %tobool80 = icmp ne i32 %and79, 0
  br i1 %tobool80, label %if.then.81, label %if.end.83

if.then.81:                                       ; preds = %if.end.78
  %82 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %flags82 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %82, i32 0, i32 13
  %83 = load i32, i32* %flags82, align 4
  %or = or i32 %83, 512
  store i32 %or, i32* %flags82, align 4
  br label %if.end.83

if.end.83:                                        ; preds = %if.then.81, %if.end.78
  %84 = load i64, i64* %itemsize, align 8
  %85 = load i64, i64* %length, align 8
  %mul84 = mul i64 %84, %85
  %86 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %size85 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %86, i32 0, i32 1
  store i64 %mul84, i64* %size85, align 8
  %87 = load i64, i64* %itemalign, align 8
  %88 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %align86 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %88, i32 0, i32 2
  store i64 %87, i64* %align86, align 8
  %89 = load i64, i64* %length, align 8
  %90 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %length87 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %90, i32 0, i32 3
  store i64 %89, i64* %length87, align 8
  %91 = load %struct._object*, %struct._object** %type_attr, align 8
  %92 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %92, i32 0, i32 5
  store %struct._object* %91, %struct._object** %proto, align 8
  %93 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %paramfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %93, i32 0, i32 8
  store %struct.tagPyCArgObject* (%struct.tagCDataObject*)* @PyCArrayType_paramfunc, %struct.tagPyCArgObject* (%struct.tagCDataObject*)** %paramfunc, align 8
  %94 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ffi_type_pointer = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %94, i32 0, i32 4
  %95 = bitcast %struct._ffi_type* %ffi_type_pointer to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %95, i8* bitcast (%struct._ffi_type* @ffi_type_pointer to i8*), i64 24, i32 8, i1 false)
  %96 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %97 = bitcast %struct.StgDictObject* %96 to %struct._object*
  %98 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %98, i32 0, i32 31
  %99 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call88 = call i32 @PyDict_Update(%struct._object* %97, %struct._object* %99)
  %cmp89 = icmp eq i32 -1, %call88
  br i1 %cmp89, label %if.then.91, label %if.end.92

if.then.91:                                       ; preds = %if.end.83
  br label %error

if.end.92:                                        ; preds = %if.end.83
  br label %do.body.93

do.body.93:                                       ; preds = %if.end.92
  %100 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 31
  %101 = load %struct._object*, %struct._object** %tp_dict95, align 8
  store %struct._object* %101, %struct._object** %_py_decref_tmp94, align 8
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_refcnt96 = getelementptr inbounds %struct._object, %struct._object* %102, i32 0, i32 0
  %103 = load i64, i64* %ob_refcnt96, align 8
  %dec97 = add i64 %103, -1
  store i64 %dec97, i64* %ob_refcnt96, align 8
  %cmp98 = icmp ne i64 %dec97, 0
  br i1 %cmp98, label %if.then.100, label %if.else.101

if.then.100:                                      ; preds = %do.body.93
  br label %if.end.104

if.else.101:                                      ; preds = %do.body.93
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  %ob_type102 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 1
  %105 = load %struct._typeobject*, %struct._typeobject** %ob_type102, align 8
  %tp_dealloc103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %105, i32 0, i32 4
  %106 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc103, align 8
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp94, align 8
  call void %106(%struct._object* %107)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.101, %if.then.100
  br label %do.end.105

do.end.105:                                       ; preds = %if.end.104
  %108 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %109 = bitcast %struct.StgDictObject* %108 to %struct._object*
  %110 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict106 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 31
  store %struct._object* %109, %struct._object** %tp_dict106, align 8
  store %struct.StgDictObject* null, %struct.StgDictObject** %stgdict, align 8
  %111 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %111, i32 0, i32 7
  %112 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc, align 8
  %call107 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i32 0, i32 0))
  %getfunc108 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call107, i32 0, i32 2
  %113 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc108, align 8
  %cmp109 = icmp eq %struct._object* (i8*, i64)* %112, %113
  br i1 %cmp109, label %if.then.111, label %if.else.117

if.then.111:                                      ; preds = %do.end.105
  %114 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %call112 = call i32 @add_getset(%struct._typeobject* %114, %struct.PyGetSetDef* getelementptr inbounds ([3 x %struct.PyGetSetDef], [3 x %struct.PyGetSetDef]* @CharArray_getsets, i32 0, i32 0))
  %cmp113 = icmp eq i32 -1, %call112
  br i1 %cmp113, label %if.then.115, label %if.end.116

if.then.115:                                      ; preds = %if.then.111
  br label %error

if.end.116:                                       ; preds = %if.then.111
  br label %if.end.130

if.else.117:                                      ; preds = %do.end.105
  %115 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %getfunc118 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %115, i32 0, i32 7
  %116 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc118, align 8
  %call119 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  %getfunc120 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call119, i32 0, i32 2
  %117 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc120, align 8
  %cmp121 = icmp eq %struct._object* (i8*, i64)* %116, %117
  br i1 %cmp121, label %if.then.123, label %if.end.129

if.then.123:                                      ; preds = %if.else.117
  %118 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %call124 = call i32 @add_getset(%struct._typeobject* %118, %struct.PyGetSetDef* getelementptr inbounds ([2 x %struct.PyGetSetDef], [2 x %struct.PyGetSetDef]* @WCharArray_getsets, i32 0, i32 0))
  %cmp125 = icmp eq i32 -1, %call124
  br i1 %cmp125, label %if.then.127, label %if.end.128

if.then.127:                                      ; preds = %if.then.123
  br label %error

if.end.128:                                       ; preds = %if.then.123
  br label %if.end.129

if.end.129:                                       ; preds = %if.end.128, %if.else.117
  br label %if.end.130

if.end.130:                                       ; preds = %if.end.129, %if.end.116
  %119 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %120 = bitcast %struct._typeobject* %119 to %struct._object*
  store %struct._object* %120, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.127, %if.then.115, %if.then.91, %if.then.77, %if.then.64, %if.then.56, %if.then.50, %if.then.46, %if.then.42, %do.end.27, %do.end.12
  br label %do.body.131

do.body.131:                                      ; preds = %error
  %121 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %122 = bitcast %struct.StgDictObject* %121 to %struct._object*
  store %struct._object* %122, %struct._object** %_py_xdecref_tmp132, align 8
  %123 = load %struct._object*, %struct._object** %_py_xdecref_tmp132, align 8
  %cmp133 = icmp ne %struct._object* %123, null
  br i1 %cmp133, label %if.then.135, label %if.end.148

if.then.135:                                      ; preds = %do.body.131
  br label %do.body.136

do.body.136:                                      ; preds = %if.then.135
  %124 = load %struct._object*, %struct._object** %_py_xdecref_tmp132, align 8
  store %struct._object* %124, %struct._object** %_py_decref_tmp137, align 8
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp137, align 8
  %ob_refcnt138 = getelementptr inbounds %struct._object, %struct._object* %125, i32 0, i32 0
  %126 = load i64, i64* %ob_refcnt138, align 8
  %dec139 = add i64 %126, -1
  store i64 %dec139, i64* %ob_refcnt138, align 8
  %cmp140 = icmp ne i64 %dec139, 0
  br i1 %cmp140, label %if.then.142, label %if.else.143

if.then.142:                                      ; preds = %do.body.136
  br label %if.end.146

if.else.143:                                      ; preds = %do.body.136
  %127 = load %struct._object*, %struct._object** %_py_decref_tmp137, align 8
  %ob_type144 = getelementptr inbounds %struct._object, %struct._object* %127, i32 0, i32 1
  %128 = load %struct._typeobject*, %struct._typeobject** %ob_type144, align 8
  %tp_dealloc145 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %128, i32 0, i32 4
  %129 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc145, align 8
  %130 = load %struct._object*, %struct._object** %_py_decref_tmp137, align 8
  call void %129(%struct._object* %130)
  br label %if.end.146

if.end.146:                                       ; preds = %if.else.143, %if.then.142
  br label %do.end.147

do.end.147:                                       ; preds = %if.end.146
  br label %if.end.148

if.end.148:                                       ; preds = %do.end.147, %do.body.131
  br label %do.end.149

do.end.149:                                       ; preds = %if.end.148
  br label %do.body.150

do.body.150:                                      ; preds = %do.end.149
  %131 = load %struct._object*, %struct._object** %type_attr, align 8
  store %struct._object* %131, %struct._object** %_py_xdecref_tmp151, align 8
  %132 = load %struct._object*, %struct._object** %_py_xdecref_tmp151, align 8
  %cmp152 = icmp ne %struct._object* %132, null
  br i1 %cmp152, label %if.then.154, label %if.end.167

if.then.154:                                      ; preds = %do.body.150
  br label %do.body.155

do.body.155:                                      ; preds = %if.then.154
  %133 = load %struct._object*, %struct._object** %_py_xdecref_tmp151, align 8
  store %struct._object* %133, %struct._object** %_py_decref_tmp156, align 8
  %134 = load %struct._object*, %struct._object** %_py_decref_tmp156, align 8
  %ob_refcnt157 = getelementptr inbounds %struct._object, %struct._object* %134, i32 0, i32 0
  %135 = load i64, i64* %ob_refcnt157, align 8
  %dec158 = add i64 %135, -1
  store i64 %dec158, i64* %ob_refcnt157, align 8
  %cmp159 = icmp ne i64 %dec158, 0
  br i1 %cmp159, label %if.then.161, label %if.else.162

if.then.161:                                      ; preds = %do.body.155
  br label %if.end.165

if.else.162:                                      ; preds = %do.body.155
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp156, align 8
  %ob_type163 = getelementptr inbounds %struct._object, %struct._object* %136, i32 0, i32 1
  %137 = load %struct._typeobject*, %struct._typeobject** %ob_type163, align 8
  %tp_dealloc164 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %137, i32 0, i32 4
  %138 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc164, align 8
  %139 = load %struct._object*, %struct._object** %_py_decref_tmp156, align 8
  call void %138(%struct._object* %139)
  br label %if.end.165

if.end.165:                                       ; preds = %if.else.162, %if.then.161
  br label %do.end.166

do.end.166:                                       ; preds = %if.end.165
  br label %if.end.167

if.end.167:                                       ; preds = %do.end.166, %do.body.150
  br label %do.end.168

do.end.168:                                       ; preds = %if.end.167
  br label %do.body.169

do.body.169:                                      ; preds = %do.end.168
  %140 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %141 = bitcast %struct._typeobject* %140 to %struct._object*
  store %struct._object* %141, %struct._object** %_py_decref_tmp170, align 8
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  %ob_refcnt171 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 0
  %143 = load i64, i64* %ob_refcnt171, align 8
  %dec172 = add i64 %143, -1
  store i64 %dec172, i64* %ob_refcnt171, align 8
  %cmp173 = icmp ne i64 %dec172, 0
  br i1 %cmp173, label %if.then.175, label %if.else.176

if.then.175:                                      ; preds = %do.body.169
  br label %if.end.179

if.else.176:                                      ; preds = %do.body.169
  %144 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  %ob_type177 = getelementptr inbounds %struct._object, %struct._object* %144, i32 0, i32 1
  %145 = load %struct._typeobject*, %struct._typeobject** %ob_type177, align 8
  %tp_dealloc178 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %145, i32 0, i32 4
  %146 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc178, align 8
  %147 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  call void %146(%struct._object* %147)
  br label %if.end.179

if.end.179:                                       ; preds = %if.else.176, %if.then.175
  br label %do.end.180

do.end.180:                                       ; preds = %if.end.179
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.180, %if.end.130, %if.then
  %148 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %148
}

; Function Attrs: uwtable
define internal %struct._object* @PyCSimpleType_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._typeobject*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %proto = alloca %struct._object*, align 8
  %proto_str = alloca i8*, align 8
  %proto_len = alloca i64, align 8
  %ml = alloca %struct.PyMethodDef*, align 8
  %fmt = alloca %struct.fielddesc*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp12 = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %_py_decref_tmp68 = alloca %struct._object*, align 8
  %_py_decref_tmp80 = alloca %struct._object*, align 8
  %_py_decref_tmp92 = alloca %struct._object*, align 8
  %_py_decref_tmp110 = alloca %struct._object*, align 8
  %_py_decref_tmp122 = alloca %struct._object*, align 8
  %_py_decref_tmp135 = alloca %struct._object*, align 8
  %meth = alloca %struct._object*, align 8
  %x = alloca i32, align 4
  %_py_decref_tmp170 = alloca %struct._object*, align 8
  %_py_decref_tmp185 = alloca %struct._object*, align 8
  %swapped = alloca %struct._object*, align 8
  %sw_dict = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp210 = alloca %struct._object*, align 8
  %_py_decref_tmp231 = alloca %struct._object*, align 8
  %_py_decref_tmp246 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 37), align 8
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %3 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* %0(%struct._typeobject* %1, %struct._object* %2, %struct._object* %3)
  %4 = bitcast %struct._object* %call to %struct._typeobject*
  store %struct._typeobject* %4, %struct._typeobject** %result, align 8
  %5 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %cmp = icmp eq %struct._typeobject* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %7 = bitcast %struct._typeobject* %6 to %struct._object*
  %call1 = call %struct._object* @PyObject_GetAttrString(%struct._object* %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0))
  store %struct._object* %call1, %struct._object** %proto, align 8
  %8 = load %struct._object*, %struct._object** %proto, align 8
  %tobool = icmp ne %struct._object* %8, null
  br i1 %tobool, label %if.end.28, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %9 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  call void @PyErr_SetString(%struct._object* %9, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.80, i32 0, i32 0))
  br label %error

error:                                            ; preds = %if.then.54, %if.then.49, %if.then.43, %if.then.39, %if.else.36, %if.then.34, %if.then.2
  br label %do.body

do.body:                                          ; preds = %error
  %10 = load %struct._object*, %struct._object** %proto, align 8
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp3 = icmp ne %struct._object* %11, null
  br i1 %cmp3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %do.body
  br label %do.body.5

do.body.5:                                        ; preds = %if.then.4
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body.5
  br label %if.end.8

if.else:                                          ; preds = %do.body.5
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  br label %if.end.9

if.end.9:                                         ; preds = %do.end, %do.body
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %19 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %20 = bitcast %struct._typeobject* %19 to %struct._object*
  store %struct._object* %20, %struct._object** %_py_xdecref_tmp12, align 8
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp12, align 8
  %cmp13 = icmp ne %struct._object* %21, null
  br i1 %cmp13, label %if.then.14, label %if.end.26

if.then.14:                                       ; preds = %do.body.11
  br label %do.body.15

do.body.15:                                       ; preds = %if.then.14
  %22 = load %struct._object*, %struct._object** %_py_xdecref_tmp12, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp16, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %24, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %27(%struct._object* %28)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %do.end.25, %do.body.11
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end
  %29 = load %struct._object*, %struct._object** %proto, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 19
  %31 = load i64, i64* %tp_flags, align 8
  %and = and i64 %31, 268435456
  %cmp30 = icmp ne i64 %and, 0
  br i1 %cmp30, label %if.then.31, label %if.else.36

if.then.31:                                       ; preds = %if.end.28
  %32 = load %struct._object*, %struct._object** %proto, align 8
  %call32 = call i8* @PyUnicode_AsUTF8AndSize(%struct._object* %32, i64* %proto_len)
  store i8* %call32, i8** %proto_str, align 8
  %33 = load i8*, i8** %proto_str, align 8
  %tobool33 = icmp ne i8* %33, null
  br i1 %tobool33, label %if.end.35, label %if.then.34

if.then.34:                                       ; preds = %if.then.31
  br label %error

if.end.35:                                        ; preds = %if.then.31
  br label %if.end.37

if.else.36:                                       ; preds = %if.end.28
  %34 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %34, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.93, i32 0, i32 0))
  br label %error

if.end.37:                                        ; preds = %if.end.35
  %35 = load i64, i64* %proto_len, align 8
  %cmp38 = icmp ne i64 %35, 1
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.37
  %36 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %36, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.94, i32 0, i32 0))
  br label %error

if.end.40:                                        ; preds = %if.end.37
  %37 = load i8*, i8** @SIMPLE_TYPE_CHARS, align 8
  %38 = load i8*, i8** %proto_str, align 8
  %39 = load i8, i8* %38, align 1
  %conv = sext i8 %39 to i32
  %call41 = call i8* @strchr(i8* %37, i32 %conv) #7
  %tobool42 = icmp ne i8* %call41, null
  br i1 %tobool42, label %if.end.45, label %if.then.43

if.then.43:                                       ; preds = %if.end.40
  %40 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %41 = load i8*, i8** @SIMPLE_TYPE_CHARS, align 8
  %call44 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %40, i8* getelementptr inbounds ([103 x i8], [103 x i8]* @.str.95, i32 0, i32 0), i8* %41)
  br label %error

if.end.45:                                        ; preds = %if.end.40
  %42 = load i8*, i8** %proto_str, align 8
  %call46 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* %42)
  store %struct.fielddesc* %call46, %struct.fielddesc** %fmt, align 8
  %43 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %cmp47 = icmp eq %struct.fielddesc* %43, null
  br i1 %cmp47, label %if.then.49, label %if.end.51

if.then.49:                                       ; preds = %if.end.45
  %44 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %45 = load i8*, i8** %proto_str, align 8
  %call50 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %44, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.96, i32 0, i32 0), i8* %45)
  br label %error

if.end.51:                                        ; preds = %if.end.45
  %call52 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyCStgDict_Type, i32 0, i32 0, i32 0), %struct._object* null)
  %46 = bitcast %struct._object* %call52 to %struct.StgDictObject*
  store %struct.StgDictObject* %46, %struct.StgDictObject** %stgdict, align 8
  %47 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %tobool53 = icmp ne %struct.StgDictObject* %47, null
  br i1 %tobool53, label %if.end.55, label %if.then.54

if.then.54:                                       ; preds = %if.end.51
  br label %error

if.end.55:                                        ; preds = %if.end.51
  %48 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ffi_type_pointer = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %48, i32 0, i32 4
  %49 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %pffi_type = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %49, i32 0, i32 3
  %50 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type, align 8
  %51 = bitcast %struct._ffi_type* %ffi_type_pointer to i8*
  %52 = bitcast %struct._ffi_type* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %51, i8* %52, i64 24, i32 8, i1 false)
  %53 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %pffi_type56 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %53, i32 0, i32 3
  %54 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type56, align 8
  %alignment = getelementptr inbounds %struct._ffi_type, %struct._ffi_type* %54, i32 0, i32 1
  %55 = load i16, i16* %alignment, align 2
  %conv57 = zext i16 %55 to i64
  %56 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %align = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %56, i32 0, i32 2
  store i64 %conv57, i64* %align, align 8
  %57 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %57, i32 0, i32 3
  store i64 0, i64* %length, align 8
  %58 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %pffi_type58 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %58, i32 0, i32 3
  %59 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type58, align 8
  %size = getelementptr inbounds %struct._ffi_type, %struct._ffi_type* %59, i32 0, i32 0
  %60 = load i64, i64* %size, align 8
  %61 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %size59 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %61, i32 0, i32 1
  store i64 %60, i64* %size59, align 8
  %62 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %setfunc = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %62, i32 0, i32 1
  %63 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %64 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %setfunc60 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %64, i32 0, i32 6
  store %struct._object* (i8*, %struct._object*, i64)* %63, %struct._object* (i8*, %struct._object*, i64)** %setfunc60, align 8
  %65 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %getfunc = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %65, i32 0, i32 2
  %66 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc, align 8
  %67 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %getfunc61 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %67, i32 0, i32 7
  store %struct._object* (i8*, i64)* %66, %struct._object* (i8*, i64)** %getfunc61, align 8
  %68 = load i8*, i8** %proto_str, align 8
  %call62 = call i8* @_ctypes_alloc_format_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.97, i32 0, i32 0), i8* %68)
  %69 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %69, i32 0, i32 14
  store i8* %call62, i8** %format, align 8
  %70 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format63 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %70, i32 0, i32 14
  %71 = load i8*, i8** %format63, align 8
  %cmp64 = icmp eq i8* %71, null
  br i1 %cmp64, label %if.then.66, label %if.end.103

if.then.66:                                       ; preds = %if.end.55
  br label %do.body.67

do.body.67:                                       ; preds = %if.then.66
  %72 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %73 = bitcast %struct._typeobject* %72 to %struct._object*
  store %struct._object* %73, %struct._object** %_py_decref_tmp68, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0
  %75 = load i64, i64* %ob_refcnt69, align 8
  %dec70 = add i64 %75, -1
  store i64 %dec70, i64* %ob_refcnt69, align 8
  %cmp71 = icmp ne i64 %dec70, 0
  br i1 %cmp71, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.67
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.67
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp68, align 8
  call void %78(%struct._object* %79)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  br label %do.body.79

do.body.79:                                       ; preds = %do.end.78
  %80 = load %struct._object*, %struct._object** %proto, align 8
  store %struct._object* %80, %struct._object** %_py_decref_tmp80, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  %ob_refcnt81 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 0
  %82 = load i64, i64* %ob_refcnt81, align 8
  %dec82 = add i64 %82, -1
  store i64 %dec82, i64* %ob_refcnt81, align 8
  %cmp83 = icmp ne i64 %dec82, 0
  br i1 %cmp83, label %if.then.85, label %if.else.86

if.then.85:                                       ; preds = %do.body.79
  br label %if.end.89

if.else.86:                                       ; preds = %do.body.79
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  %ob_type87 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 1
  %84 = load %struct._typeobject*, %struct._typeobject** %ob_type87, align 8
  %tp_dealloc88 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %84, i32 0, i32 4
  %85 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc88, align 8
  %86 = load %struct._object*, %struct._object** %_py_decref_tmp80, align 8
  call void %85(%struct._object* %86)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.86, %if.then.85
  br label %do.end.90

do.end.90:                                        ; preds = %if.end.89
  br label %do.body.91

do.body.91:                                       ; preds = %do.end.90
  %87 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %88 = bitcast %struct.StgDictObject* %87 to %struct._object*
  store %struct._object* %88, %struct._object** %_py_decref_tmp92, align 8
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_refcnt93 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 0
  %90 = load i64, i64* %ob_refcnt93, align 8
  %dec94 = add i64 %90, -1
  store i64 %dec94, i64* %ob_refcnt93, align 8
  %cmp95 = icmp ne i64 %dec94, 0
  br i1 %cmp95, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %do.body.91
  br label %if.end.101

if.else.98:                                       ; preds = %do.body.91
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  %ob_type99 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 1
  %92 = load %struct._typeobject*, %struct._typeobject** %ob_type99, align 8
  %tp_dealloc100 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %92, i32 0, i32 4
  %93 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc100, align 8
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp92, align 8
  call void %93(%struct._object* %94)
  br label %if.end.101

if.end.101:                                       ; preds = %if.else.98, %if.then.97
  br label %do.end.102

do.end.102:                                       ; preds = %if.end.101
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.103:                                       ; preds = %if.end.55
  %95 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %paramfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %95, i32 0, i32 8
  store %struct.tagPyCArgObject* (%struct.tagCDataObject*)* @PyCSimpleType_paramfunc, %struct.tagPyCArgObject* (%struct.tagCDataObject*)** %paramfunc, align 8
  %96 = load %struct._object*, %struct._object** %proto, align 8
  %97 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto104 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %97, i32 0, i32 5
  store %struct._object* %96, %struct._object** %proto104, align 8
  %98 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %99 = bitcast %struct.StgDictObject* %98 to %struct._object*
  %100 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 31
  %101 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call105 = call i32 @PyDict_Update(%struct._object* %99, %struct._object* %101)
  %cmp106 = icmp eq i32 -1, %call105
  br i1 %cmp106, label %if.then.108, label %if.end.133

if.then.108:                                      ; preds = %if.end.103
  br label %do.body.109

do.body.109:                                      ; preds = %if.then.108
  %102 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %103 = bitcast %struct._typeobject* %102 to %struct._object*
  store %struct._object* %103, %struct._object** %_py_decref_tmp110, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  %ob_refcnt111 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0
  %105 = load i64, i64* %ob_refcnt111, align 8
  %dec112 = add i64 %105, -1
  store i64 %dec112, i64* %ob_refcnt111, align 8
  %cmp113 = icmp ne i64 %dec112, 0
  br i1 %cmp113, label %if.then.115, label %if.else.116

if.then.115:                                      ; preds = %do.body.109
  br label %if.end.119

if.else.116:                                      ; preds = %do.body.109
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  %ob_type117 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type117, align 8
  %tp_dealloc118 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc118, align 8
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  call void %108(%struct._object* %109)
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.116, %if.then.115
  br label %do.end.120

do.end.120:                                       ; preds = %if.end.119
  br label %do.body.121

do.body.121:                                      ; preds = %do.end.120
  %110 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %111 = bitcast %struct.StgDictObject* %110 to %struct._object*
  store %struct._object* %111, %struct._object** %_py_decref_tmp122, align 8
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8
  %ob_refcnt123 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 0
  %113 = load i64, i64* %ob_refcnt123, align 8
  %dec124 = add i64 %113, -1
  store i64 %dec124, i64* %ob_refcnt123, align 8
  %cmp125 = icmp ne i64 %dec124, 0
  br i1 %cmp125, label %if.then.127, label %if.else.128

if.then.127:                                      ; preds = %do.body.121
  br label %if.end.131

if.else.128:                                      ; preds = %do.body.121
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8
  %ob_type129 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 1
  %115 = load %struct._typeobject*, %struct._typeobject** %ob_type129, align 8
  %tp_dealloc130 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %115, i32 0, i32 4
  %116 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc130, align 8
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp122, align 8
  call void %116(%struct._object* %117)
  br label %if.end.131

if.end.131:                                       ; preds = %if.else.128, %if.then.127
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.133:                                       ; preds = %if.end.103
  br label %do.body.134

do.body.134:                                      ; preds = %if.end.133
  %118 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict136 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %118, i32 0, i32 31
  %119 = load %struct._object*, %struct._object** %tp_dict136, align 8
  store %struct._object* %119, %struct._object** %_py_decref_tmp135, align 8
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp135, align 8
  %ob_refcnt137 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 0
  %121 = load i64, i64* %ob_refcnt137, align 8
  %dec138 = add i64 %121, -1
  store i64 %dec138, i64* %ob_refcnt137, align 8
  %cmp139 = icmp ne i64 %dec138, 0
  br i1 %cmp139, label %if.then.141, label %if.else.142

if.then.141:                                      ; preds = %do.body.134
  br label %if.end.145

if.else.142:                                      ; preds = %do.body.134
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp135, align 8
  %ob_type143 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type143, align 8
  %tp_dealloc144 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 4
  %124 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc144, align 8
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp135, align 8
  call void %124(%struct._object* %125)
  br label %if.end.145

if.end.145:                                       ; preds = %if.else.142, %if.then.141
  br label %do.end.146

do.end.146:                                       ; preds = %if.end.145
  %126 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %127 = bitcast %struct.StgDictObject* %126 to %struct._object*
  %128 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict147 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %128, i32 0, i32 31
  store %struct._object* %127, %struct._object** %tp_dict147, align 8
  %129 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %129, i32 0, i32 30
  %130 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %cmp148 = icmp eq %struct._typeobject* %130, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*)
  br i1 %cmp148, label %if.then.150, label %if.end.198

if.then.150:                                      ; preds = %do.end.146
  %131 = load i8*, i8** %proto_str, align 8
  %132 = load i8, i8* %131, align 1
  %conv151 = sext i8 %132 to i32
  switch i32 %conv151, label %sw.default [
    i32 122, label %sw.bb
    i32 90, label %sw.bb.152
    i32 80, label %sw.bb.155
    i32 115, label %sw.bb.158
    i32 88, label %sw.bb.158
    i32 79, label %sw.bb.158
  ]

sw.bb:                                            ; preds = %if.then.150
  store %struct.PyMethodDef* @c_char_p_method, %struct.PyMethodDef** %ml, align 8
  %133 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %133, i32 0, i32 13
  %134 = load i32, i32* %flags, align 4
  %or = or i32 %134, 256
  store i32 %or, i32* %flags, align 4
  br label %sw.epilog

sw.bb.152:                                        ; preds = %if.then.150
  store %struct.PyMethodDef* @c_wchar_p_method, %struct.PyMethodDef** %ml, align 8
  %135 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %flags153 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %135, i32 0, i32 13
  %136 = load i32, i32* %flags153, align 4
  %or154 = or i32 %136, 256
  store i32 %or154, i32* %flags153, align 4
  br label %sw.epilog

sw.bb.155:                                        ; preds = %if.then.150
  store %struct.PyMethodDef* @c_void_p_method, %struct.PyMethodDef** %ml, align 8
  %137 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %flags156 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %137, i32 0, i32 13
  %138 = load i32, i32* %flags156, align 4
  %or157 = or i32 %138, 256
  store i32 %or157, i32* %flags156, align 4
  br label %sw.epilog

sw.bb.158:                                        ; preds = %if.then.150, %if.then.150, %if.then.150
  store %struct.PyMethodDef* null, %struct.PyMethodDef** %ml, align 8
  %139 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %flags159 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %139, i32 0, i32 13
  %140 = load i32, i32* %flags159, align 4
  %or160 = or i32 %140, 256
  store i32 %or160, i32* %flags159, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.150
  store %struct.PyMethodDef* null, %struct.PyMethodDef** %ml, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb.158, %sw.bb.155, %sw.bb.152, %sw.bb
  %141 = load %struct.PyMethodDef*, %struct.PyMethodDef** %ml, align 8
  %tobool161 = icmp ne %struct.PyMethodDef* %141, null
  br i1 %tobool161, label %if.then.162, label %if.end.197

if.then.162:                                      ; preds = %sw.epilog
  %142 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %143 = load %struct.PyMethodDef*, %struct.PyMethodDef** %ml, align 8
  %call163 = call %struct._object* @PyDescr_NewClassMethod(%struct._typeobject* %142, %struct.PyMethodDef* %143)
  store %struct._object* %call163, %struct._object** %meth, align 8
  %144 = load %struct._object*, %struct._object** %meth, align 8
  %tobool164 = icmp ne %struct._object* %144, null
  br i1 %tobool164, label %if.end.166, label %if.then.165

if.then.165:                                      ; preds = %if.then.162
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.166:                                       ; preds = %if.then.162
  %145 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict167 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %145, i32 0, i32 31
  %146 = load %struct._object*, %struct._object** %tp_dict167, align 8
  %147 = load %struct.PyMethodDef*, %struct.PyMethodDef** %ml, align 8
  %ml_name = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %147, i32 0, i32 0
  %148 = load i8*, i8** %ml_name, align 8
  %149 = load %struct._object*, %struct._object** %meth, align 8
  %call168 = call i32 @PyDict_SetItemString(%struct._object* %146, i8* %148, %struct._object* %149)
  store i32 %call168, i32* %x, align 4
  br label %do.body.169

do.body.169:                                      ; preds = %if.end.166
  %150 = load %struct._object*, %struct._object** %meth, align 8
  store %struct._object* %150, %struct._object** %_py_decref_tmp170, align 8
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  %ob_refcnt171 = getelementptr inbounds %struct._object, %struct._object* %151, i32 0, i32 0
  %152 = load i64, i64* %ob_refcnt171, align 8
  %dec172 = add i64 %152, -1
  store i64 %dec172, i64* %ob_refcnt171, align 8
  %cmp173 = icmp ne i64 %dec172, 0
  br i1 %cmp173, label %if.then.175, label %if.else.176

if.then.175:                                      ; preds = %do.body.169
  br label %if.end.179

if.else.176:                                      ; preds = %do.body.169
  %153 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  %ob_type177 = getelementptr inbounds %struct._object, %struct._object* %153, i32 0, i32 1
  %154 = load %struct._typeobject*, %struct._typeobject** %ob_type177, align 8
  %tp_dealloc178 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %154, i32 0, i32 4
  %155 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc178, align 8
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp170, align 8
  call void %155(%struct._object* %156)
  br label %if.end.179

if.end.179:                                       ; preds = %if.else.176, %if.then.175
  br label %do.end.180

do.end.180:                                       ; preds = %if.end.179
  %157 = load i32, i32* %x, align 4
  %cmp181 = icmp eq i32 %157, -1
  br i1 %cmp181, label %if.then.183, label %if.end.196

if.then.183:                                      ; preds = %do.end.180
  br label %do.body.184

do.body.184:                                      ; preds = %if.then.183
  %158 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %159 = bitcast %struct._typeobject* %158 to %struct._object*
  store %struct._object* %159, %struct._object** %_py_decref_tmp185, align 8
  %160 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8
  %ob_refcnt186 = getelementptr inbounds %struct._object, %struct._object* %160, i32 0, i32 0
  %161 = load i64, i64* %ob_refcnt186, align 8
  %dec187 = add i64 %161, -1
  store i64 %dec187, i64* %ob_refcnt186, align 8
  %cmp188 = icmp ne i64 %dec187, 0
  br i1 %cmp188, label %if.then.190, label %if.else.191

if.then.190:                                      ; preds = %do.body.184
  br label %if.end.194

if.else.191:                                      ; preds = %do.body.184
  %162 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8
  %ob_type192 = getelementptr inbounds %struct._object, %struct._object* %162, i32 0, i32 1
  %163 = load %struct._typeobject*, %struct._typeobject** %ob_type192, align 8
  %tp_dealloc193 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %163, i32 0, i32 4
  %164 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc193, align 8
  %165 = load %struct._object*, %struct._object** %_py_decref_tmp185, align 8
  call void %164(%struct._object* %165)
  br label %if.end.194

if.end.194:                                       ; preds = %if.else.191, %if.then.190
  br label %do.end.195

do.end.195:                                       ; preds = %if.end.194
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.196:                                       ; preds = %do.end.180
  br label %if.end.197

if.end.197:                                       ; preds = %if.end.196, %sw.epilog
  br label %if.end.198

if.end.198:                                       ; preds = %if.end.197, %do.end.146
  %166 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %cmp199 = icmp eq %struct._typeobject* %166, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCSimpleType_Type to %struct._typeobject*)
  br i1 %cmp199, label %land.lhs.true, label %if.end.258

land.lhs.true:                                    ; preds = %if.end.198
  %167 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %setfunc_swapped = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %167, i32 0, i32 4
  %168 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc_swapped, align 8
  %tobool201 = icmp ne %struct._object* (i8*, %struct._object*, i64)* %168, null
  br i1 %tobool201, label %land.lhs.true.202, label %if.end.258

land.lhs.true.202:                                ; preds = %land.lhs.true
  %169 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %getfunc_swapped = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %169, i32 0, i32 5
  %170 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc_swapped, align 8
  %tobool203 = icmp ne %struct._object* (i8*, i64)* %170, null
  br i1 %tobool203, label %if.then.204, label %if.end.258

if.then.204:                                      ; preds = %land.lhs.true.202
  %171 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %172 = load %struct._object*, %struct._object** %args.addr, align 8
  %173 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %174 = load %struct._object*, %struct._object** %proto, align 8
  %175 = load %struct.fielddesc*, %struct.fielddesc** %fmt, align 8
  %call205 = call %struct._object* @CreateSwappedType(%struct._typeobject* %171, %struct._object* %172, %struct._object* %173, %struct._object* %174, %struct.fielddesc* %175)
  store %struct._object* %call205, %struct._object** %swapped, align 8
  %176 = load %struct._object*, %struct._object** %swapped, align 8
  %cmp206 = icmp eq %struct._object* %176, null
  br i1 %cmp206, label %if.then.208, label %if.end.221

if.then.208:                                      ; preds = %if.then.204
  br label %do.body.209

do.body.209:                                      ; preds = %if.then.208
  %177 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %178 = bitcast %struct._typeobject* %177 to %struct._object*
  store %struct._object* %178, %struct._object** %_py_decref_tmp210, align 8
  %179 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  %ob_refcnt211 = getelementptr inbounds %struct._object, %struct._object* %179, i32 0, i32 0
  %180 = load i64, i64* %ob_refcnt211, align 8
  %dec212 = add i64 %180, -1
  store i64 %dec212, i64* %ob_refcnt211, align 8
  %cmp213 = icmp ne i64 %dec212, 0
  br i1 %cmp213, label %if.then.215, label %if.else.216

if.then.215:                                      ; preds = %do.body.209
  br label %if.end.219

if.else.216:                                      ; preds = %do.body.209
  %181 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  %ob_type217 = getelementptr inbounds %struct._object, %struct._object* %181, i32 0, i32 1
  %182 = load %struct._typeobject*, %struct._typeobject** %ob_type217, align 8
  %tp_dealloc218 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %182, i32 0, i32 4
  %183 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc218, align 8
  %184 = load %struct._object*, %struct._object** %_py_decref_tmp210, align 8
  call void %183(%struct._object* %184)
  br label %if.end.219

if.end.219:                                       ; preds = %if.else.216, %if.then.215
  br label %do.end.220

do.end.220:                                       ; preds = %if.end.219
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.221:                                       ; preds = %if.then.204
  %185 = load %struct._object*, %struct._object** %swapped, align 8
  %call222 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %185)
  store %struct.StgDictObject* %call222, %struct.StgDictObject** %sw_dict, align 8
  %186 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %187 = bitcast %struct._typeobject* %186 to %struct._object*
  %188 = load %struct._object*, %struct._object** %swapped, align 8
  %call223 = call i32 @PyObject_SetAttrString(%struct._object* %187, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98, i32 0, i32 0), %struct._object* %188)
  %189 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %190 = bitcast %struct._typeobject* %189 to %struct._object*
  %191 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %192 = bitcast %struct._typeobject* %191 to %struct._object*
  %call224 = call i32 @PyObject_SetAttrString(%struct._object* %190, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.99, i32 0, i32 0), %struct._object* %192)
  %193 = load %struct._object*, %struct._object** %swapped, align 8
  %194 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %195 = bitcast %struct._typeobject* %194 to %struct._object*
  %call225 = call i32 @PyObject_SetAttrString(%struct._object* %193, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.99, i32 0, i32 0), %struct._object* %195)
  %196 = load %struct._object*, %struct._object** %swapped, align 8
  %197 = load %struct._object*, %struct._object** %swapped, align 8
  %call226 = call i32 @PyObject_SetAttrString(%struct._object* %196, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98, i32 0, i32 0), %struct._object* %197)
  %198 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format227 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %198, i32 0, i32 14
  %199 = load i8*, i8** %format227, align 8
  %add.ptr = getelementptr i8, i8* %199, i64 1
  %call228 = call i8* @_ctypes_alloc_format_string(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.100, i32 0, i32 0), i8* %add.ptr)
  %200 = load %struct.StgDictObject*, %struct.StgDictObject** %sw_dict, align 8
  %format229 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %200, i32 0, i32 14
  store i8* %call228, i8** %format229, align 8
  br label %do.body.230

do.body.230:                                      ; preds = %if.end.221
  %201 = load %struct._object*, %struct._object** %swapped, align 8
  store %struct._object* %201, %struct._object** %_py_decref_tmp231, align 8
  %202 = load %struct._object*, %struct._object** %_py_decref_tmp231, align 8
  %ob_refcnt232 = getelementptr inbounds %struct._object, %struct._object* %202, i32 0, i32 0
  %203 = load i64, i64* %ob_refcnt232, align 8
  %dec233 = add i64 %203, -1
  store i64 %dec233, i64* %ob_refcnt232, align 8
  %cmp234 = icmp ne i64 %dec233, 0
  br i1 %cmp234, label %if.then.236, label %if.else.237

if.then.236:                                      ; preds = %do.body.230
  br label %if.end.240

if.else.237:                                      ; preds = %do.body.230
  %204 = load %struct._object*, %struct._object** %_py_decref_tmp231, align 8
  %ob_type238 = getelementptr inbounds %struct._object, %struct._object* %204, i32 0, i32 1
  %205 = load %struct._typeobject*, %struct._typeobject** %ob_type238, align 8
  %tp_dealloc239 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %205, i32 0, i32 4
  %206 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc239, align 8
  %207 = load %struct._object*, %struct._object** %_py_decref_tmp231, align 8
  call void %206(%struct._object* %207)
  br label %if.end.240

if.end.240:                                       ; preds = %if.else.237, %if.then.236
  br label %do.end.241

do.end.241:                                       ; preds = %if.end.240
  %call242 = call %struct._object* @PyErr_Occurred()
  %tobool243 = icmp ne %struct._object* %call242, null
  br i1 %tobool243, label %if.then.244, label %if.end.257

if.then.244:                                      ; preds = %do.end.241
  br label %do.body.245

do.body.245:                                      ; preds = %if.then.244
  %208 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %209 = bitcast %struct._typeobject* %208 to %struct._object*
  store %struct._object* %209, %struct._object** %_py_decref_tmp246, align 8
  %210 = load %struct._object*, %struct._object** %_py_decref_tmp246, align 8
  %ob_refcnt247 = getelementptr inbounds %struct._object, %struct._object* %210, i32 0, i32 0
  %211 = load i64, i64* %ob_refcnt247, align 8
  %dec248 = add i64 %211, -1
  store i64 %dec248, i64* %ob_refcnt247, align 8
  %cmp249 = icmp ne i64 %dec248, 0
  br i1 %cmp249, label %if.then.251, label %if.else.252

if.then.251:                                      ; preds = %do.body.245
  br label %if.end.255

if.else.252:                                      ; preds = %do.body.245
  %212 = load %struct._object*, %struct._object** %_py_decref_tmp246, align 8
  %ob_type253 = getelementptr inbounds %struct._object, %struct._object* %212, i32 0, i32 1
  %213 = load %struct._typeobject*, %struct._typeobject** %ob_type253, align 8
  %tp_dealloc254 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %213, i32 0, i32 4
  %214 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc254, align 8
  %215 = load %struct._object*, %struct._object** %_py_decref_tmp246, align 8
  call void %214(%struct._object* %215)
  br label %if.end.255

if.end.255:                                       ; preds = %if.else.252, %if.then.251
  br label %do.end.256

do.end.256:                                       ; preds = %if.end.255
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.257:                                       ; preds = %do.end.241
  br label %if.end.258

if.end.258:                                       ; preds = %if.end.257, %land.lhs.true.202, %land.lhs.true, %if.end.198
  %216 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %217 = bitcast %struct._typeobject* %216 to %struct._object*
  store %struct._object* %217, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.258, %do.end.256, %do.end.220, %do.end.195, %if.then.165, %do.end.132, %do.end.102, %do.end.27, %if.then
  %218 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %218
}

; Function Attrs: uwtable
define internal %struct._object* @PyCFuncPtrType_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %result = alloca %struct._typeobject*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp12 = alloca %struct._object*, align 8
  %_py_decref_tmp27 = alloca %struct._object*, align 8
  %_py_decref_tmp38 = alloca %struct._object*, align 8
  %_py_decref_tmp50 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyCStgDict_Type, i32 0, i32 0, i32 0), %struct._object* null)
  %0 = bitcast %struct._object* %call to %struct.StgDictObject*
  store %struct.StgDictObject* %0, %struct.StgDictObject** %stgdict, align 8
  %1 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %tobool = icmp ne %struct.StgDictObject* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %paramfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %2, i32 0, i32 8
  store %struct.tagPyCArgObject* (%struct.tagCDataObject*)* @PyCFuncPtrType_paramfunc, %struct.tagPyCArgObject* (%struct.tagCDataObject*)** %paramfunc, align 8
  %call1 = call i8* @_ctypes_alloc_format_string(i8* null, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.105, i32 0, i32 0))
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %3, i32 0, i32 14
  store i8* %call1, i8** %format, align 8
  %4 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %format2 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %4, i32 0, i32 14
  %5 = load i8*, i8** %format2, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %7 = bitcast %struct.StgDictObject* %6 to %struct._object*
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 13
  %15 = load i32, i32* %flags, align 4
  %or = or i32 %15, 256
  store i32 %or, i32* %flags, align 4
  %16 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 37), align 8
  %17 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %18 = load %struct._object*, %struct._object** %args.addr, align 8
  %19 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call8 = call %struct._object* %16(%struct._typeobject* %17, %struct._object* %18, %struct._object* %19)
  %20 = bitcast %struct._object* %call8 to %struct._typeobject*
  store %struct._typeobject* %20, %struct._typeobject** %result, align 8
  %21 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %cmp9 = icmp eq %struct._typeobject* %21, null
  br i1 %cmp9, label %if.then.10, label %if.end.22

if.then.10:                                       ; preds = %if.end.7
  br label %do.body.11

do.body.11:                                       ; preds = %if.then.10
  %22 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %23 = bitcast %struct.StgDictObject* %22 to %struct._object*
  store %struct._object* %23, %struct._object** %_py_decref_tmp12, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt13, align 8
  %dec14 = add i64 %25, -1
  store i64 %dec14, i64* %ob_refcnt13, align 8
  %cmp15 = icmp ne i64 %dec14, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body.11
  br label %if.end.20

if.else.17:                                       ; preds = %do.body.11
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc19, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp12, align 8
  call void %28(%struct._object* %29)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end.21

do.end.21:                                        ; preds = %if.end.20
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.22:                                        ; preds = %if.end.7
  %30 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %31 = bitcast %struct.StgDictObject* %30 to %struct._object*
  %32 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 31
  %33 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call23 = call i32 @PyDict_Update(%struct._object* %31, %struct._object* %33)
  %cmp24 = icmp eq i32 -1, %call23
  br i1 %cmp24, label %if.then.25, label %if.end.48

if.then.25:                                       ; preds = %if.end.22
  br label %do.body.26

do.body.26:                                       ; preds = %if.then.25
  %34 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %35 = bitcast %struct._typeobject* %34 to %struct._object*
  store %struct._object* %35, %struct._object** %_py_decref_tmp27, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt28, align 8
  %dec29 = add i64 %37, -1
  store i64 %dec29, i64* %ob_refcnt28, align 8
  %cmp30 = icmp ne i64 %dec29, 0
  br i1 %cmp30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %do.body.26
  br label %if.end.35

if.else.32:                                       ; preds = %do.body.26
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_dealloc34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc34, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  call void %40(%struct._object* %41)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %if.then.31
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  br label %do.body.37

do.body.37:                                       ; preds = %do.end.36
  %42 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %43 = bitcast %struct.StgDictObject* %42 to %struct._object*
  store %struct._object* %43, %struct._object** %_py_decref_tmp38, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  %ob_refcnt39 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt39, align 8
  %dec40 = add i64 %45, -1
  store i64 %dec40, i64* %ob_refcnt39, align 8
  %cmp41 = icmp ne i64 %dec40, 0
  br i1 %cmp41, label %if.then.42, label %if.else.43

if.then.42:                                       ; preds = %do.body.37
  br label %if.end.46

if.else.43:                                       ; preds = %do.body.37
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  %ob_type44 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type44, align 8
  %tp_dealloc45 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc45, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp38, align 8
  call void %48(%struct._object* %49)
  br label %if.end.46

if.end.46:                                        ; preds = %if.else.43, %if.then.42
  br label %do.end.47

do.end.47:                                        ; preds = %if.end.46
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.48:                                        ; preds = %if.end.22
  br label %do.body.49

do.body.49:                                       ; preds = %if.end.48
  %50 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 31
  %51 = load %struct._object*, %struct._object** %tp_dict51, align 8
  store %struct._object* %51, %struct._object** %_py_decref_tmp50, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt52, align 8
  %dec53 = add i64 %53, -1
  store i64 %dec53, i64* %ob_refcnt52, align 8
  %cmp54 = icmp ne i64 %dec53, 0
  br i1 %cmp54, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %do.body.49
  br label %if.end.59

if.else.56:                                       ; preds = %do.body.49
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp50, align 8
  call void %56(%struct._object* %57)
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  %58 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %59 = bitcast %struct.StgDictObject* %58 to %struct._object*
  %60 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 31
  store %struct._object* %59, %struct._object** %tp_dict61, align 8
  %61 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %call62 = call i32 @make_funcptrtype_dict(%struct.StgDictObject* %61)
  %cmp63 = icmp eq i32 -1, %call62
  br i1 %cmp63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %do.end.60
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %62 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %63 = bitcast %struct._typeobject* %62 to %struct._object*
  store %struct._object* %63, %struct._object** %_py_decref_tmp66, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %65, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %68(%struct._object* %69)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %do.end.60
  %70 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %71 = bitcast %struct._typeobject* %70 to %struct._object*
  store %struct._object* %71, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end.47, %do.end.21, %do.end, %if.then
  %72 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %72
}

; Function Attrs: uwtable
define internal void @PyCData_dealloc(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  %call = call i32 @PyCData_clear(%struct.tagCDataObject* %1)
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 38
  %4 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  %6 = bitcast %struct._object* %5 to i8*
  call void %4(i8* %6)
  ret void
}

; Function Attrs: uwtable
define internal i64 @PyCData_nohash(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %0, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.114, i32 0, i32 0))
  ret i64 -1
}

; Function Attrs: uwtable
define internal i32 @PyCData_traverse(%struct.tagCDataObject* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  %vret8 = alloca i32, align 4
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 7
  %1 = load %struct._object*, %struct._object** %b_objects, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  %2 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects1 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %3, i32 0, i32 7
  %4 = load %struct._object*, %struct._object** %b_objects1, align 8
  %5 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %2(%struct._object* %4, i8* %5)
  store i32 %call, i32* %vret, align 4
  %6 = load i32, i32* %vret, align 4
  %tobool2 = icmp ne i32 %6, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %7 = load i32, i32* %vret, align 4
  store i32 %7, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  br label %do.body.5

do.body.5:                                        ; preds = %do.end
  %8 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_base = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %8, i32 0, i32 3
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %b_base, align 8
  %10 = bitcast %struct.tagCDataObject* %9 to %struct._object*
  %tobool6 = icmp ne %struct._object* %10, null
  br i1 %tobool6, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %do.body.5
  %11 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_base9 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %12, i32 0, i32 3
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %b_base9, align 8
  %14 = bitcast %struct.tagCDataObject* %13 to %struct._object*
  %15 = load i8*, i8** %arg.addr, align 8
  %call10 = call i32 %11(%struct._object* %14, i8* %15)
  store i32 %call10, i32* %vret8, align 4
  %16 = load i32, i32* %vret8, align 4
  %tobool11 = icmp ne i32 %16, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.7
  %17 = load i32, i32* %vret8, align 4
  store i32 %17, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.7
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %do.body.5
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.15, %if.then.12, %if.then.3
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: uwtable
define internal i32 @PyCData_clear(%struct.tagCDataObject* %self) #0 {
entry:
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp13 = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 7
  %1 = load %struct._object*, %struct._object** %b_objects, align 8
  store %struct._object* %1, %struct._object** %_py_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects1 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %3, i32 0, i32 7
  store %struct._object* null, %struct._object** %b_objects1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_needsfree = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %11, i32 0, i32 2
  %12 = load i32, i32* %b_needsfree, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %do.end.6
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %13, i32 0, i32 1
  %14 = load i8*, i8** %b_ptr, align 8
  %15 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_value = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %15, i32 0, i32 8
  %16 = bitcast %union.value* %b_value to i8*
  %cmp7 = icmp ne i8* %14, %16
  br i1 %cmp7, label %if.then.8, label %if.end.10

if.then.8:                                        ; preds = %land.lhs.true
  %17 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr9 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %17, i32 0, i32 1
  %18 = load i8*, i8** %b_ptr9, align 8
  call void @PyMem_Free(i8* %18)
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.8, %land.lhs.true, %do.end.6
  %19 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr11 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %19, i32 0, i32 1
  store i8* null, i8** %b_ptr11, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.end.10
  %20 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_base = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %20, i32 0, i32 3
  %21 = load %struct.tagCDataObject*, %struct.tagCDataObject** %b_base, align 8
  %22 = bitcast %struct.tagCDataObject* %21 to %struct._object*
  store %struct._object* %22, %struct._object** %_py_tmp13, align 8
  %23 = load %struct._object*, %struct._object** %_py_tmp13, align 8
  %cmp14 = icmp ne %struct._object* %23, null
  br i1 %cmp14, label %if.then.15, label %if.end.28

if.then.15:                                       ; preds = %do.body.12
  %24 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_base16 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %24, i32 0, i32 3
  store %struct.tagCDataObject* null, %struct.tagCDataObject** %b_base16, align 8
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.15
  %25 = load %struct._object*, %struct._object** %_py_tmp13, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp18, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %27, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %30(%struct._object* %31)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %if.end.28

if.end.28:                                        ; preds = %do.end.27, %do.body.12
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  ret i32 0
}

; Function Attrs: uwtable
define %struct._object* @PyCData_FromBaseObj(%struct._object* %type, %struct._object* %base, i64 %index, i8* %adr) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %base.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %adr.addr = alloca i8*, align 8
  %cmem = alloca %struct.tagCDataObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %base, %struct._object** %base.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  store i8* %adr, i8** %adr.addr, align 8
  %0 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %0)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %1 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool = icmp ne %struct.StgDictObject* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %3, i32 0, i32 13
  %4 = load i32, i32* %flags, align 4
  %or = or i32 %4, 4096
  store i32 %or, i32* %flags, align 4
  %5 = load %struct._object*, %struct._object** %type.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct._typeobject*
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 36
  %7 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %8 = load %struct._object*, %struct._object** %type.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct._typeobject*
  %call1 = call %struct._object* %7(%struct._typeobject* %9, i64 0)
  %10 = bitcast %struct._object* %call1 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %10, %struct.tagCDataObject** %cmem, align 8
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %cmp = icmp eq %struct.tagCDataObject* %11, null
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %12 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %12, i32 0, i32 3
  %13 = load i64, i64* %length, align 8
  %14 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %14, i32 0, i32 5
  store i64 %13, i64* %b_length, align 8
  %15 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %15, i32 0, i32 1
  %16 = load i64, i64* %size, align 8
  %17 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %17, i32 0, i32 4
  store i64 %16, i64* %b_size, align 8
  %18 = load %struct._object*, %struct._object** %base.addr, align 8
  %tobool4 = icmp ne %struct._object* %18, null
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end.3
  %19 = load i8*, i8** %adr.addr, align 8
  %20 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %20, i32 0, i32 1
  store i8* %19, i8** %b_ptr, align 8
  %21 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_needsfree = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %21, i32 0, i32 2
  store i32 0, i32* %b_needsfree, align 4
  %22 = load %struct._object*, %struct._object** %base.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %23, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %24 = load %struct._object*, %struct._object** %base.addr, align 8
  %25 = bitcast %struct._object* %24 to %struct.tagCDataObject*
  %26 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_base = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %26, i32 0, i32 3
  store %struct.tagCDataObject* %25, %struct.tagCDataObject** %b_base, align 8
  %27 = load i64, i64* %index.addr, align 8
  %28 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_index = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %28, i32 0, i32 6
  store i64 %27, i64* %b_index, align 8
  br label %if.end.18

if.else:                                          ; preds = %if.end.3
  %29 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %30 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %call6 = call i32 @PyCData_MallocBuffer(%struct.tagCDataObject* %29, %struct.StgDictObject* %30)
  %cmp7 = icmp eq i32 -1, %call6
  br i1 %cmp7, label %if.then.8, label %if.end.14

if.then.8:                                        ; preds = %if.else
  br label %do.body

do.body:                                          ; preds = %if.then.8
  %31 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %32 = bitcast %struct.tagCDataObject* %31 to %struct._object*
  store %struct._object* %32, %struct._object** %_py_decref_tmp, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt9 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt9, align 8
  %dec = add i64 %34, -1
  store i64 %dec, i64* %ob_refcnt9, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %do.body
  br label %if.end.13

if.else.12:                                       ; preds = %do.body
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %37(%struct._object* %38)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else.12, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.13
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.14:                                        ; preds = %if.else
  %39 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_ptr15 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %39, i32 0, i32 1
  %40 = load i8*, i8** %b_ptr15, align 8
  %41 = load i8*, i8** %adr.addr, align 8
  %42 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size16 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %42, i32 0, i32 1
  %43 = load i64, i64* %size16, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %40, i8* %41, i64 %43, i32 1, i1 false)
  %44 = load i64, i64* %index.addr, align 8
  %45 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %b_index17 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %45, i32 0, i32 6
  store i64 %44, i64* %b_index17, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.14, %if.then.5
  %46 = load %struct.tagCDataObject*, %struct.tagCDataObject** %cmem, align 8
  %47 = bitcast %struct.tagCDataObject* %46 to %struct._object*
  store %struct._object* %47, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.18, %do.end, %if.then.2, %if.then
  %48 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %48
}

declare %struct.StgDictObject* @PyType_stgdict(%struct._object*) #1

declare void @PyErr_SetString(%struct._object*, i8*) #1

; Function Attrs: uwtable
define internal i32 @PyCData_MallocBuffer(%struct.tagCDataObject* %obj, %struct.StgDictObject* %dict) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct.tagCDataObject*, align 8
  %dict.addr = alloca %struct.StgDictObject*, align 8
  store %struct.tagCDataObject* %obj, %struct.tagCDataObject** %obj.addr, align 8
  store %struct.StgDictObject* %dict, %struct.StgDictObject** %dict.addr, align 8
  %0 = load %struct.StgDictObject*, %struct.StgDictObject** %dict.addr, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %0, i32 0, i32 1
  %1 = load i64, i64* %size, align 8
  %cmp = icmp ule i64 %1, 16
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_value = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %2, i32 0, i32 8
  %3 = bitcast %union.value* %b_value to i8*
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 1
  store i8* %3, i8** %b_ptr, align 8
  %5 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_needsfree = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %5, i32 0, i32 2
  store i32 1, i32* %b_needsfree, align 4
  br label %if.end.10

if.else:                                          ; preds = %entry
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %dict.addr, align 8
  %size1 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %6, i32 0, i32 1
  %7 = load i64, i64* %size1, align 8
  %call = call i8* @PyMem_Malloc(i64 %7)
  %8 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_ptr2 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %8, i32 0, i32 1
  store i8* %call, i8** %b_ptr2, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_ptr3 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 1
  %10 = load i8*, i8** %b_ptr3, align 8
  %cmp4 = icmp eq i8* %10, null
  br i1 %cmp4, label %if.then.5, label %if.end

if.then.5:                                        ; preds = %if.else
  %call6 = call %struct._object* @PyErr_NoMemory()
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.else
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_needsfree7 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %11, i32 0, i32 2
  store i32 1, i32* %b_needsfree7, align 4
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_ptr8 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %12, i32 0, i32 1
  %13 = load i8*, i8** %b_ptr8, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict.addr, align 8
  %size9 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 1
  %15 = load i64, i64* %size9, align 8
  call void @llvm.memset.p0i8.i64(i8* %13, i8 0, i64 %15, i32 1, i1 false)
  br label %if.end.10

if.end.10:                                        ; preds = %if.end, %if.then
  %16 = load %struct.StgDictObject*, %struct.StgDictObject** %dict.addr, align 8
  %size11 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %16, i32 0, i32 1
  %17 = load i64, i64* %size11, align 8
  %18 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %18, i32 0, i32 4
  store i64 %17, i64* %b_size, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.5
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: uwtable
define %struct._object* @PyCData_AtAddress(%struct._object* %type, i8* %buf) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %buf.addr = alloca i8*, align 8
  %pd = alloca %struct.tagCDataObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store i8* %buf, i8** %buf.addr, align 8
  %0 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %0)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %1 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool = icmp ne %struct.StgDictObject* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %3, i32 0, i32 13
  %4 = load i32, i32* %flags, align 4
  %or = or i32 %4, 4096
  store i32 %or, i32* %flags, align 4
  %5 = load %struct._object*, %struct._object** %type.addr, align 8
  %6 = bitcast %struct._object* %5 to %struct._typeobject*
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 36
  %7 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %8 = load %struct._object*, %struct._object** %type.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct._typeobject*
  %call1 = call %struct._object* %7(%struct._typeobject* %9, i64 0)
  %10 = bitcast %struct._object* %call1 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %10, %struct.tagCDataObject** %pd, align 8
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %pd, align 8
  %tobool2 = icmp ne %struct.tagCDataObject* %11, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %12 = load i8*, i8** %buf.addr, align 8
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %pd, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %13, i32 0, i32 1
  store i8* %12, i8** %b_ptr, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 3
  %15 = load i64, i64* %length, align 8
  %16 = load %struct.tagCDataObject*, %struct.tagCDataObject** %pd, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %16, i32 0, i32 5
  store i64 %15, i64* %b_length, align 8
  %17 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %17, i32 0, i32 1
  %18 = load i64, i64* %size, align 8
  %19 = load %struct.tagCDataObject*, %struct.tagCDataObject** %pd, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %19, i32 0, i32 4
  store i64 %18, i64* %b_size, align 8
  %20 = load %struct.tagCDataObject*, %struct.tagCDataObject** %pd, align 8
  %21 = bitcast %struct.tagCDataObject* %20 to %struct._object*
  store %struct._object* %21, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %22 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %22
}

; Function Attrs: uwtable
define i32 @_ctypes_simple_instance(%struct._object* %obj) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %type = alloca %struct._typeobject*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct._typeobject*
  store %struct._typeobject* %1, %struct._typeobject** %type, align 8
  %2 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %3 = bitcast %struct._typeobject* %2 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %4, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCSimpleType_Type to %struct._typeobject*)
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %6 = bitcast %struct._typeobject* %5 to %struct._object*
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCSimpleType_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %8 = load %struct._typeobject*, %struct._typeobject** %type, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 30
  %9 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %cmp2 = icmp ne %struct._typeobject* %9, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*)
  %conv = zext i1 %cmp2 to i32
  store i32 %conv, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval
  ret i32 %10
}

declare i32 @PyType_IsSubtype(%struct._typeobject*, %struct._typeobject*) #1

; Function Attrs: uwtable
define %struct._object* @PyCData_get(%struct._object* %type, %struct._object* (i8*, i64)* %getfunc, %struct._object* %src, i64 %index, i64 %size, i8* %adr) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %getfunc.addr = alloca %struct._object* (i8*, i64)*, align 8
  %src.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %adr.addr = alloca i8*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* (i8*, i64)* %getfunc, %struct._object* (i8*, i64)** %getfunc.addr, align 8
  store %struct._object* %src, %struct._object** %src.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %adr, i8** %adr.addr, align 8
  %0 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc.addr, align 8
  %tobool = icmp ne %struct._object* (i8*, i64)* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc.addr, align 8
  %2 = load i8*, i8** %adr.addr, align 8
  %3 = load i64, i64* %size.addr, align 8
  %call = call %struct._object* %1(i8* %2, i64 %3)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %type.addr, align 8
  %call1 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %4)
  store %struct.StgDictObject* %call1, %struct.StgDictObject** %dict, align 8
  %5 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool2 = icmp ne %struct.StgDictObject* %5, null
  br i1 %tobool2, label %land.lhs.true, label %if.end.11

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %getfunc3 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %6, i32 0, i32 7
  %7 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc3, align 8
  %tobool4 = icmp ne %struct._object* (i8*, i64)* %7, null
  br i1 %tobool4, label %land.lhs.true.5, label %if.end.11

land.lhs.true.5:                                  ; preds = %land.lhs.true
  %8 = load %struct._object*, %struct._object** %type.addr, align 8
  %call6 = call i32 @_ctypes_simple_instance(%struct._object* %8)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.11, label %if.then.8

if.then.8:                                        ; preds = %land.lhs.true.5
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %getfunc9 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 7
  %10 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc9, align 8
  %11 = load i8*, i8** %adr.addr, align 8
  %12 = load i64, i64* %size.addr, align 8
  %call10 = call %struct._object* %10(i8* %11, i64 %12)
  store %struct._object* %call10, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %land.lhs.true.5, %land.lhs.true, %if.end
  %13 = load %struct._object*, %struct._object** %type.addr, align 8
  %14 = load %struct._object*, %struct._object** %src.addr, align 8
  %15 = load i64, i64* %index.addr, align 8
  %16 = load i8*, i8** %adr.addr, align 8
  %call12 = call %struct._object* @PyCData_FromBaseObj(%struct._object* %13, %struct._object* %14, i64 %15, i8* %16)
  store %struct._object* %call12, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.8, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: uwtable
define i32 @PyCData_set(%struct._object* %dst, %struct._object* %type, %struct._object* (i8*, %struct._object*, i64)* %setfunc, %struct._object* %value, i64 %index, i64 %size, i8* %ptr) #0 {
entry:
  %retval = alloca i32, align 4
  %dst.addr = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %setfunc.addr = alloca %struct._object* (i8*, %struct._object*, i64)*, align 8
  %value.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %mem = alloca %struct.tagCDataObject*, align 8
  %result = alloca %struct._object*, align 8
  store %struct._object* %dst, %struct._object** %dst.addr, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* (i8*, %struct._object*, i64)* %setfunc, %struct._object* (i8*, %struct._object*, i64)** %setfunc.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct._object*, %struct._object** %dst.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %mem, align 8
  %2 = load %struct._object*, %struct._object** %dst.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %3, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*)
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct._object*, %struct._object** %dst.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %5, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %7 = load %struct.tagCDataObject*, %struct.tagCDataObject** %mem, align 8
  %8 = load %struct._object*, %struct._object** %type.addr, align 8
  %9 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc.addr, align 8
  %10 = load %struct._object*, %struct._object** %value.addr, align 8
  %11 = load i64, i64* %size.addr, align 8
  %12 = load i8*, i8** %ptr.addr, align 8
  %call2 = call %struct._object* @_PyCData_set(%struct.tagCDataObject* %7, %struct._object* %8, %struct._object* (i8*, %struct._object*, i64)* %9, %struct._object* %10, i64 %11, i8* %12)
  store %struct._object* %call2, %struct._object** %result, align 8
  %13 = load %struct._object*, %struct._object** %result, align 8
  %cmp3 = icmp eq %struct._object* %13, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %14 = load %struct.tagCDataObject*, %struct.tagCDataObject** %mem, align 8
  %15 = load i64, i64* %index.addr, align 8
  %16 = load %struct._object*, %struct._object** %result, align 8
  %call6 = call i32 @KeepRef(%struct.tagCDataObject* %14, i64 %15, %struct._object* %16)
  store i32 %call6, i32* %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %17 = load i32, i32* %retval
  ret i32 %17
}

; Function Attrs: uwtable
define internal %struct._object* @_PyCData_set(%struct.tagCDataObject* %dst, %struct._object* %type, %struct._object* (i8*, %struct._object*, i64)* %setfunc, %struct._object* %value, i64 %size, i8* %ptr) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %dst.addr = alloca %struct.tagCDataObject*, align 8
  %type.addr = alloca %struct._object*, align 8
  %setfunc.addr = alloca %struct._object* (i8*, %struct._object*, i64)*, align 8
  %value.addr = alloca %struct._object*, align 8
  %size.addr = alloca i64, align 8
  %ptr.addr = alloca i8*, align 8
  %src = alloca %struct.tagCDataObject*, align 8
  %err = alloca i32, align 4
  %dict = alloca %struct.StgDictObject*, align 8
  %ob = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %p1 = alloca %struct.StgDictObject*, align 8
  %p2 = alloca %struct.StgDictObject*, align 8
  %keep = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %dst, %struct.tagCDataObject** %dst.addr, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* (i8*, %struct._object*, i64)* %setfunc, %struct._object* (i8*, %struct._object*, i64)** %setfunc.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i64 %size, i64* %size.addr, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  %0 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc.addr, align 8
  %tobool = icmp ne %struct._object* (i8*, %struct._object*, i64)* %0, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc.addr, align 8
  %2 = load i8*, i8** %ptr.addr, align 8
  %3 = load %struct._object*, %struct._object** %value.addr, align 8
  %4 = load i64, i64* %size.addr, align 8
  %call = call %struct._object* %1(i8* %2, %struct._object* %3, i64 %4)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %6, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*)
  br i1 %cmp, label %if.end.40, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call2 = call i32 @PyType_IsSubtype(%struct._typeobject* %8, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*))
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.end.40, label %if.then.4

if.then.4:                                        ; preds = %lor.lhs.false
  %9 = load %struct._object*, %struct._object** %type.addr, align 8
  %call5 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %9)
  store %struct.StgDictObject* %call5, %struct.StgDictObject** %dict, align 8
  %10 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool6 = icmp ne %struct.StgDictObject* %10, null
  br i1 %tobool6, label %land.lhs.true, label %if.end.12

land.lhs.true:                                    ; preds = %if.then.4
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %setfunc7 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 6
  %12 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc7, align 8
  %tobool8 = icmp ne %struct._object* (i8*, %struct._object*, i64)* %12, null
  br i1 %tobool8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %land.lhs.true
  %13 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %setfunc10 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %13, i32 0, i32 6
  %14 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc10, align 8
  %15 = load i8*, i8** %ptr.addr, align 8
  %16 = load %struct._object*, %struct._object** %value.addr, align 8
  %17 = load i64, i64* %size.addr, align 8
  %call11 = call %struct._object* %14(i8* %15, %struct._object* %16, i64 %17)
  store %struct._object* %call11, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %land.lhs.true, %if.then.4
  %18 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19
  %20 = load i64, i64* %tp_flags, align 8
  %and = and i64 %20, 67108864
  %cmp14 = icmp ne i64 %and, 0
  br i1 %cmp14, label %if.then.15, label %if.else.25

if.then.15:                                       ; preds = %if.end.12
  %21 = load %struct._object*, %struct._object** %type.addr, align 8
  %22 = load %struct._object*, %struct._object** %value.addr, align 8
  %call16 = call %struct._object* @PyObject_CallObject(%struct._object* %21, %struct._object* %22)
  store %struct._object* %call16, %struct._object** %ob, align 8
  %23 = load %struct._object*, %struct._object** %ob, align 8
  %cmp17 = icmp eq %struct._object* %23, null
  br i1 %cmp17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.then.15
  %24 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %25 = load %struct._object*, %struct._object** %type.addr, align 8
  %26 = bitcast %struct._object* %25 to %struct._typeobject*
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 1
  %27 = load i8*, i8** %tp_name, align 8
  call void (%struct._object*, i8*, ...) @_ctypes_extend_error(%struct._object* %24, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.128, i32 0, i32 0), i8* %27)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.19:                                        ; preds = %if.then.15
  %28 = load %struct.tagCDataObject*, %struct.tagCDataObject** %dst.addr, align 8
  %29 = load %struct._object*, %struct._object** %type.addr, align 8
  %30 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc.addr, align 8
  %31 = load %struct._object*, %struct._object** %ob, align 8
  %32 = load i64, i64* %size.addr, align 8
  %33 = load i8*, i8** %ptr.addr, align 8
  %call20 = call %struct._object* @_PyCData_set(%struct.tagCDataObject* %28, %struct._object* %29, %struct._object* (i8*, %struct._object*, i64)* %30, %struct._object* %31, i64 %32, i8* %33)
  store %struct._object* %call20, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.19
  %34 = load %struct._object*, %struct._object** %ob, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %36, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp21 = icmp ne i64 %dec, 0
  br i1 %cmp21, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %do.body
  br label %if.end.24

if.else:                                          ; preds = %do.body
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %39(%struct._object* %40)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else, %if.then.22
  br label %do.end

do.end:                                           ; preds = %if.end.24
  %41 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %41, %struct._object** %retval
  br label %return

if.else.25:                                       ; preds = %if.end.12
  %42 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp26 = icmp eq %struct._object* %42, @_Py_NoneStruct
  br i1 %cmp26, label %land.lhs.true.27, label %if.else.35

land.lhs.true.27:                                 ; preds = %if.else.25
  %43 = load %struct._object*, %struct._object** %type.addr, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %cmp29 = icmp eq %struct._typeobject* %44, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*)
  br i1 %cmp29, label %if.then.34, label %lor.lhs.false.30

lor.lhs.false.30:                                 ; preds = %land.lhs.true.27
  %45 = load %struct._object*, %struct._object** %type.addr, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %call32 = call i32 @PyType_IsSubtype(%struct._typeobject* %46, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*))
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %lor.lhs.false.30, %land.lhs.true.27
  %47 = load i8*, i8** %ptr.addr, align 8
  %48 = bitcast i8* %47 to i8**
  store i8* null, i8** %48, align 8
  %49 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %49, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.else.35:                                       ; preds = %lor.lhs.false.30, %if.else.25
  %50 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %51 = load %struct._object*, %struct._object** %type.addr, align 8
  %52 = bitcast %struct._object* %51 to %struct._typeobject*
  %tp_name36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 1
  %53 = load i8*, i8** %tp_name36, align 8
  %54 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_name38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 1
  %56 = load i8*, i8** %tp_name38, align 8
  %call39 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %50, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.129, i32 0, i32 0), i8* %53, i8* %56)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %lor.lhs.false, %if.end
  %57 = load %struct._object*, %struct._object** %value.addr, align 8
  %58 = bitcast %struct._object* %57 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %58, %struct.tagCDataObject** %src, align 8
  %59 = load %struct._object*, %struct._object** %value.addr, align 8
  %60 = load %struct._object*, %struct._object** %type.addr, align 8
  %call41 = call i32 @PyObject_IsInstance(%struct._object* %59, %struct._object* %60)
  store i32 %call41, i32* %err, align 4
  %61 = load i32, i32* %err, align 4
  %cmp42 = icmp eq i32 %61, -1
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.40
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.44:                                        ; preds = %if.end.40
  %62 = load i32, i32* %err, align 4
  %tobool45 = icmp ne i32 %62, 0
  br i1 %tobool45, label %if.then.46, label %if.end.61

if.then.46:                                       ; preds = %if.end.44
  %63 = load i8*, i8** %ptr.addr, align 8
  %64 = load %struct.tagCDataObject*, %struct.tagCDataObject** %src, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %64, i32 0, i32 1
  %65 = load i8*, i8** %b_ptr, align 8
  %66 = load i64, i64* %size.addr, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %63, i8* %65, i64 %66, i32 1, i1 false)
  %67 = load %struct._object*, %struct._object** %type.addr, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 1
  %68 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %cmp48 = icmp eq %struct._typeobject* %68, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*)
  br i1 %cmp48, label %if.then.53, label %lor.lhs.false.49

lor.lhs.false.49:                                 ; preds = %if.then.46
  %69 = load %struct._object*, %struct._object** %type.addr, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %call51 = call i32 @PyType_IsSubtype(%struct._typeobject* %70, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*))
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.then.53, label %if.end.54

if.then.53:                                       ; preds = %lor.lhs.false.49, %if.then.46
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.53, %lor.lhs.false.49
  %71 = load %struct.tagCDataObject*, %struct.tagCDataObject** %src, align 8
  %call55 = call %struct._object* @GetKeepedObjects(%struct.tagCDataObject* %71)
  store %struct._object* %call55, %struct._object** %value.addr, align 8
  %72 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp56 = icmp eq %struct._object* %72, null
  br i1 %cmp56, label %if.then.57, label %if.end.58

if.then.57:                                       ; preds = %if.end.54
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.58:                                        ; preds = %if.end.54
  %73 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 0
  %74 = load i64, i64* %ob_refcnt59, align 8
  %inc60 = add i64 %74, 1
  store i64 %inc60, i64* %ob_refcnt59, align 8
  %75 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %75, %struct._object** %retval
  br label %return

if.end.61:                                        ; preds = %if.end.44
  %76 = load %struct._object*, %struct._object** %type.addr, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %cmp63 = icmp eq %struct._typeobject* %77, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*)
  br i1 %cmp63, label %land.lhs.true.68, label %lor.lhs.false.64

lor.lhs.false.64:                                 ; preds = %if.end.61
  %78 = load %struct._object*, %struct._object** %type.addr, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %call66 = call i32 @PyType_IsSubtype(%struct._typeobject* %79, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*))
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %land.lhs.true.68, label %if.end.92

land.lhs.true.68:                                 ; preds = %lor.lhs.false.64, %if.end.61
  %80 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type69 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type69, align 8
  %cmp70 = icmp eq %struct._typeobject* %81, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*)
  br i1 %cmp70, label %if.then.75, label %lor.lhs.false.71

lor.lhs.false.71:                                 ; preds = %land.lhs.true.68
  %82 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %call73 = call i32 @PyType_IsSubtype(%struct._typeobject* %83, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*))
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.then.75, label %if.end.92

if.then.75:                                       ; preds = %lor.lhs.false.71, %land.lhs.true.68
  %84 = load %struct._object*, %struct._object** %value.addr, align 8
  %call76 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %84)
  store %struct.StgDictObject* %call76, %struct.StgDictObject** %p1, align 8
  %85 = load %struct._object*, %struct._object** %type.addr, align 8
  %call77 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %85)
  store %struct.StgDictObject* %call77, %struct.StgDictObject** %p2, align 8
  %86 = load %struct.StgDictObject*, %struct.StgDictObject** %p1, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %86, i32 0, i32 5
  %87 = load %struct._object*, %struct._object** %proto, align 8
  %88 = load %struct.StgDictObject*, %struct.StgDictObject** %p2, align 8
  %proto78 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %88, i32 0, i32 5
  %89 = load %struct._object*, %struct._object** %proto78, align 8
  %cmp79 = icmp ne %struct._object* %87, %89
  br i1 %cmp79, label %if.then.80, label %if.end.85

if.then.80:                                       ; preds = %if.then.75
  %90 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %91 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type81 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 1
  %92 = load %struct._typeobject*, %struct._typeobject** %ob_type81, align 8
  %tp_name82 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %92, i32 0, i32 1
  %93 = load i8*, i8** %tp_name82, align 8
  %94 = load %struct._object*, %struct._object** %type.addr, align 8
  %95 = bitcast %struct._object* %94 to %struct._typeobject*
  %tp_name83 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 1
  %96 = load i8*, i8** %tp_name83, align 8
  %call84 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %90, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.130, i32 0, i32 0), i8* %93, i8* %96)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.85:                                        ; preds = %if.then.75
  %97 = load %struct.tagCDataObject*, %struct.tagCDataObject** %src, align 8
  %b_ptr86 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %97, i32 0, i32 1
  %98 = load i8*, i8** %b_ptr86, align 8
  %99 = load i8*, i8** %ptr.addr, align 8
  %100 = bitcast i8* %99 to i8**
  store i8* %98, i8** %100, align 8
  %101 = load %struct.tagCDataObject*, %struct.tagCDataObject** %src, align 8
  %call87 = call %struct._object* @GetKeepedObjects(%struct.tagCDataObject* %101)
  store %struct._object* %call87, %struct._object** %keep, align 8
  %102 = load %struct._object*, %struct._object** %keep, align 8
  %cmp88 = icmp eq %struct._object* %102, null
  br i1 %cmp88, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %if.end.85
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.90:                                        ; preds = %if.end.85
  %103 = load %struct._object*, %struct._object** %keep, align 8
  %104 = load %struct._object*, %struct._object** %value.addr, align 8
  %call91 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %103, %struct._object* %104)
  store %struct._object* %call91, %struct._object** %retval
  br label %return

if.end.92:                                        ; preds = %lor.lhs.false.71, %lor.lhs.false.64
  %105 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %106 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type93 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type93, align 8
  %tp_name94 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 1
  %108 = load i8*, i8** %tp_name94, align 8
  %109 = load %struct._object*, %struct._object** %type.addr, align 8
  %110 = bitcast %struct._object* %109 to %struct._typeobject*
  %tp_name95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %110, i32 0, i32 1
  %111 = load i8*, i8** %tp_name95, align 8
  %call96 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %105, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.130, i32 0, i32 0), i8* %108, i8* %111)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.92, %if.end.90, %if.then.89, %if.then.80, %if.end.58, %if.then.57, %if.then.43, %if.else.35, %if.then.34, %do.end, %if.then.18, %if.then.9, %if.then
  %112 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %112
}

; Function Attrs: uwtable
define internal i32 @KeepRef(%struct.tagCDataObject* %target, i64 %index, %struct._object* %keep) #0 {
entry:
  %retval = alloca i32, align 4
  %target.addr = alloca %struct.tagCDataObject*, align 8
  %index.addr = alloca i64, align 8
  %keep.addr = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %ob = alloca %struct.tagCDataObject*, align 8
  %key = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp7 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp28 = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  %_py_decref_tmp60 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %target, %struct.tagCDataObject** %target.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  store %struct._object* %keep, %struct._object** %keep.addr, align 8
  %0 = load %struct._object*, %struct._object** %keep.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  store %struct._object* @_Py_NoneStruct, %struct._object** %_py_decref_tmp, align 8
  %1 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 0
  %2 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %2, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp1 = icmp ne i64 %dec, 0
  br i1 %cmp1, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %do.body
  br label %if.end

if.else:                                          ; preds = %do.body
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 4
  %5 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %5(%struct._object* %6)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.2
  br label %do.end

do.end:                                           ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.3:                                         ; preds = %entry
  %7 = load %struct.tagCDataObject*, %struct.tagCDataObject** %target.addr, align 8
  %call = call %struct.tagCDataObject* @PyCData_GetContainer(%struct.tagCDataObject* %7)
  store %struct.tagCDataObject* %call, %struct.tagCDataObject** %ob, align 8
  %8 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %cmp4 = icmp eq %struct.tagCDataObject* %8, null
  br i1 %cmp4, label %if.then.5, label %if.end.17

if.then.5:                                        ; preds = %if.end.3
  br label %do.body.6

do.body.6:                                        ; preds = %if.then.5
  %9 = load %struct._object*, %struct._object** %keep.addr, align 8
  store %struct._object* %9, %struct._object** %_py_decref_tmp7, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp7, align 8
  %ob_refcnt8 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt8, align 8
  %dec9 = add i64 %11, -1
  store i64 %dec9, i64* %ob_refcnt8, align 8
  %cmp10 = icmp ne i64 %dec9, 0
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %do.body.6
  br label %if.end.15

if.else.12:                                       ; preds = %do.body.6
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp7, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %tp_dealloc14 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 4
  %14 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc14, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp7, align 8
  call void %14(%struct._object* %15)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else.12, %if.then.11
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %if.end.3
  %16 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %b_objects = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %16, i32 0, i32 7
  %17 = load %struct._object*, %struct._object** %b_objects, align 8
  %cmp18 = icmp eq %struct._object* %17, null
  br i1 %cmp18, label %if.then.22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.17
  %18 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %b_objects19 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %18, i32 0, i32 7
  %19 = load %struct._object*, %struct._object** %b_objects19, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %cmp21 = icmp eq %struct._typeobject* %20, @PyDict_Type
  br i1 %cmp21, label %if.end.41, label %if.then.22

if.then.22:                                       ; preds = %lor.lhs.false, %if.end.17
  br label %do.body.23

do.body.23:                                       ; preds = %if.then.22
  %21 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %b_objects24 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %21, i32 0, i32 7
  %22 = load %struct._object*, %struct._object** %b_objects24, align 8
  store %struct._object* %22, %struct._object** %_py_xdecref_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp25 = icmp ne %struct._object* %23, null
  br i1 %cmp25, label %if.then.26, label %if.end.38

if.then.26:                                       ; preds = %do.body.23
  br label %do.body.27

do.body.27:                                       ; preds = %if.then.26
  %24 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp28, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_refcnt29 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt29, align 8
  %dec30 = add i64 %26, -1
  store i64 %dec30, i64* %ob_refcnt29, align 8
  %cmp31 = icmp ne i64 %dec30, 0
  br i1 %cmp31, label %if.then.32, label %if.else.33

if.then.32:                                       ; preds = %do.body.27
  br label %if.end.36

if.else.33:                                       ; preds = %do.body.27
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  %ob_type34 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type34, align 8
  %tp_dealloc35 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc35, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp28, align 8
  call void %29(%struct._object* %30)
  br label %if.end.36

if.end.36:                                        ; preds = %if.else.33, %if.then.32
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %if.end.38

if.end.38:                                        ; preds = %do.end.37, %do.body.23
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  %31 = load %struct._object*, %struct._object** %keep.addr, align 8
  %32 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %b_objects40 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %32, i32 0, i32 7
  store %struct._object* %31, %struct._object** %b_objects40, align 8
  store i32 0, i32* %retval
  br label %return

if.end.41:                                        ; preds = %lor.lhs.false
  %33 = load %struct.tagCDataObject*, %struct.tagCDataObject** %target.addr, align 8
  %34 = load i64, i64* %index.addr, align 8
  %call42 = call %struct._object* @unique_key(%struct.tagCDataObject* %33, i64 %34)
  store %struct._object* %call42, %struct._object** %key, align 8
  %35 = load %struct._object*, %struct._object** %key, align 8
  %cmp43 = icmp eq %struct._object* %35, null
  br i1 %cmp43, label %if.then.44, label %if.end.56

if.then.44:                                       ; preds = %if.end.41
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %36 = load %struct._object*, %struct._object** %keep.addr, align 8
  store %struct._object* %36, %struct._object** %_py_decref_tmp46, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 0
  %38 = load i64, i64* %ob_refcnt47, align 8
  %dec48 = add i64 %38, -1
  store i64 %dec48, i64* %ob_refcnt47, align 8
  %cmp49 = icmp ne i64 %dec48, 0
  br i1 %cmp49, label %if.then.50, label %if.else.51

if.then.50:                                       ; preds = %do.body.45
  br label %if.end.54

if.else.51:                                       ; preds = %do.body.45
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %tp_dealloc53 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 4
  %41 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc53, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  call void %41(%struct._object* %42)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else.51, %if.then.50
  br label %do.end.55

do.end.55:                                        ; preds = %if.end.54
  store i32 -1, i32* %retval
  br label %return

if.end.56:                                        ; preds = %if.end.41
  %43 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %b_objects57 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %43, i32 0, i32 7
  %44 = load %struct._object*, %struct._object** %b_objects57, align 8
  %45 = load %struct._object*, %struct._object** %key, align 8
  %46 = load %struct._object*, %struct._object** %keep.addr, align 8
  %call58 = call i32 @PyDict_SetItem(%struct._object* %44, %struct._object* %45, %struct._object* %46)
  store i32 %call58, i32* %result, align 4
  br label %do.body.59

do.body.59:                                       ; preds = %if.end.56
  %47 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp60, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_refcnt61 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt61, align 8
  %dec62 = add i64 %49, -1
  store i64 %dec62, i64* %ob_refcnt61, align 8
  %cmp63 = icmp ne i64 %dec62, 0
  br i1 %cmp63, label %if.then.64, label %if.else.65

if.then.64:                                       ; preds = %do.body.59
  br label %if.end.68

if.else.65:                                       ; preds = %do.body.59
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  %ob_type66 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type66, align 8
  %tp_dealloc67 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc67, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp60, align 8
  call void %52(%struct._object* %53)
  br label %if.end.68

if.end.68:                                        ; preds = %if.else.65, %if.then.64
  br label %do.end.69

do.end.69:                                        ; preds = %if.end.68
  br label %do.body.70

do.body.70:                                       ; preds = %do.end.69
  %54 = load %struct._object*, %struct._object** %keep.addr, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp71, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt72, align 8
  %dec73 = add i64 %56, -1
  store i64 %dec73, i64* %ob_refcnt72, align 8
  %cmp74 = icmp ne i64 %dec73, 0
  br i1 %cmp74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.70
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.70
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  call void %59(%struct._object* %60)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  %61 = load i32, i32* %result, align 4
  store i32 %61, i32* %retval
  br label %return

return:                                           ; preds = %do.end.80, %do.end.55, %do.end.39, %do.end.16, %do.end
  %62 = load i32, i32* %retval
  ret i32 %62
}

; Function Attrs: uwtable
define internal void @PyCFuncPtr_dealloc(%struct.PyCFuncPtrObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %call = call i32 @PyCFuncPtr_clear(%struct.PyCFuncPtrObject* %0)
  %1 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %2 = bitcast %struct.PyCFuncPtrObject* %1 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 38
  %4 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %5 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %6 = bitcast %struct.PyCFuncPtrObject* %5 to %struct._object*
  %7 = bitcast %struct._object* %6 to i8*
  call void %4(i8* %7)
  ret void
}

; Function Attrs: uwtable
define internal %struct._object* @PyCFuncPtr_repr(%struct.PyCFuncPtrObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %1 = bitcast %struct.PyCFuncPtrObject* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 1
  %3 = load i8*, i8** %tp_name, align 8
  %4 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.134, i32 0, i32 0), i8* %3, %struct.PyCFuncPtrObject* %4)
  ret %struct._object* %call
}

; Function Attrs: uwtable
define internal %struct._object* @PyCFuncPtr_call(%struct.PyCFuncPtrObject* %self, %struct._object* %inargs, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %inargs.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %restype = alloca %struct._object*, align 8
  %converters = alloca %struct._object*, align 8
  %checker = alloca %struct._object*, align 8
  %argtypes = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %result = alloca %struct._object*, align 8
  %callargs = alloca %struct._object*, align 8
  %errcheck = alloca %struct._object*, align 8
  %pProc = alloca i8*, align 8
  %inoutmask = alloca i32, align 4
  %outmask = alloca i32, align 4
  %numretvals = alloca i32, align 4
  %required = alloca i32, align 4
  %actual = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp85 = alloca %struct._object*, align 8
  %_py_decref_tmp97 = alloca %struct._object*, align 8
  %_py_decref_tmp110 = alloca %struct._object*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  store %struct._object* %inargs, %struct._object** %inargs.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %1 = bitcast %struct.PyCFuncPtrObject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  store i8* null, i8** %pProc, align 8
  %2 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype1 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %2, i32 0, i32 13
  %3 = load %struct._object*, %struct._object** %restype1, align 8
  %tobool = icmp ne %struct._object* %3, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype2 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %4, i32 0, i32 13
  %5 = load %struct._object*, %struct._object** %restype2, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %restype3 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %6, i32 0, i32 11
  %7 = load %struct._object*, %struct._object** %restype3, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %5, %cond.true ], [ %7, %cond.false ]
  store %struct._object* %cond, %struct._object** %restype, align 8
  %8 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters4 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %8, i32 0, i32 11
  %9 = load %struct._object*, %struct._object** %converters4, align 8
  %tobool5 = icmp ne %struct._object* %9, null
  br i1 %tobool5, label %cond.true.6, label %cond.false.8

cond.true.6:                                      ; preds = %cond.end
  %10 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters7 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %10, i32 0, i32 11
  %11 = load %struct._object*, %struct._object** %converters7, align 8
  br label %cond.end.10

cond.false.8:                                     ; preds = %cond.end
  %12 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %converters9 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %12, i32 0, i32 10
  %13 = load %struct._object*, %struct._object** %converters9, align 8
  br label %cond.end.10

cond.end.10:                                      ; preds = %cond.false.8, %cond.true.6
  %cond11 = phi %struct._object* [ %11, %cond.true.6 ], [ %13, %cond.false.8 ]
  store %struct._object* %cond11, %struct._object** %converters, align 8
  %14 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker12 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %14, i32 0, i32 14
  %15 = load %struct._object*, %struct._object** %checker12, align 8
  %tobool13 = icmp ne %struct._object* %15, null
  br i1 %tobool13, label %cond.true.14, label %cond.false.16

cond.true.14:                                     ; preds = %cond.end.10
  %16 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker15 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %16, i32 0, i32 14
  %17 = load %struct._object*, %struct._object** %checker15, align 8
  br label %cond.end.18

cond.false.16:                                    ; preds = %cond.end.10
  %18 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %checker17 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %18, i32 0, i32 12
  %19 = load %struct._object*, %struct._object** %checker17, align 8
  br label %cond.end.18

cond.end.18:                                      ; preds = %cond.false.16, %cond.true.14
  %cond19 = phi %struct._object* [ %17, %cond.true.14 ], [ %19, %cond.false.16 ]
  store %struct._object* %cond19, %struct._object** %checker, align 8
  %20 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes20 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %20, i32 0, i32 12
  %21 = load %struct._object*, %struct._object** %argtypes20, align 8
  %tobool21 = icmp ne %struct._object* %21, null
  br i1 %tobool21, label %cond.true.22, label %cond.false.24

cond.true.22:                                     ; preds = %cond.end.18
  %22 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes23 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %22, i32 0, i32 12
  %23 = load %struct._object*, %struct._object** %argtypes23, align 8
  br label %cond.end.26

cond.false.24:                                    ; preds = %cond.end.18
  %24 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes25 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %24, i32 0, i32 9
  %25 = load %struct._object*, %struct._object** %argtypes25, align 8
  br label %cond.end.26

cond.end.26:                                      ; preds = %cond.false.24, %cond.true.22
  %cond27 = phi %struct._object* [ %23, %cond.true.22 ], [ %25, %cond.false.24 ]
  store %struct._object* %cond27, %struct._object** %argtypes, align 8
  %26 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck28 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %26, i32 0, i32 15
  %27 = load %struct._object*, %struct._object** %errcheck28, align 8
  store %struct._object* %27, %struct._object** %errcheck, align 8
  %28 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %28, i32 0, i32 1
  %29 = load i8*, i8** %b_ptr, align 8
  %30 = bitcast i8* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  store i8* %31, i8** %pProc, align 8
  %32 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %33 = load %struct._object*, %struct._object** %argtypes, align 8
  %34 = load %struct._object*, %struct._object** %inargs.addr, align 8
  %35 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call29 = call %struct._object* @_build_callargs(%struct.PyCFuncPtrObject* %32, %struct._object* %33, %struct._object* %34, %struct._object* %35, i32* %outmask, i32* %inoutmask, i32* %numretvals)
  store %struct._object* %call29, %struct._object** %callargs, align 8
  %36 = load %struct._object*, %struct._object** %callargs, align 8
  %cmp = icmp eq %struct._object* %36, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %cond.end.26
  %37 = load %struct._object*, %struct._object** %converters, align 8
  %tobool30 = icmp ne %struct._object* %37, null
  br i1 %tobool30, label %if.then.31, label %if.end.71

if.then.31:                                       ; preds = %if.end
  %38 = load %struct._object*, %struct._object** %converters, align 8
  %39 = bitcast %struct._object* %38 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %39, i32 0, i32 1
  %40 = load i64, i64* %ob_size, align 8
  %conv = trunc i64 %40 to i32
  store i32 %conv, i32* %required, align 4
  %41 = load %struct._object*, %struct._object** %callargs, align 8
  %42 = bitcast %struct._object* %41 to %struct.PyVarObject*
  %ob_size32 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %42, i32 0, i32 1
  %43 = load i64, i64* %ob_size32, align 8
  %conv33 = trunc i64 %43 to i32
  store i32 %conv33, i32* %actual, align 4
  %44 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %44, i32 0, i32 13
  %45 = load i32, i32* %flags, align 4
  %and = and i32 %45, 1
  %cmp34 = icmp eq i32 %and, 1
  br i1 %cmp34, label %if.then.36, label %if.else.49

if.then.36:                                       ; preds = %if.then.31
  %46 = load i32, i32* %required, align 4
  %47 = load i32, i32* %actual, align 4
  %cmp37 = icmp sgt i32 %46, %47
  br i1 %cmp37, label %if.then.39, label %if.end.48

if.then.39:                                       ; preds = %if.then.36
  br label %do.body

do.body:                                          ; preds = %if.then.39
  %48 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %50, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp40 = icmp ne i64 %dec, 0
  br i1 %cmp40, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %do.body
  br label %if.end.43

if.else:                                          ; preds = %do.body
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %53(%struct._object* %54)
  br label %if.end.43

if.end.43:                                        ; preds = %if.else, %if.then.42
  br label %do.end

do.end:                                           ; preds = %if.end.43
  %55 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %56 = load i32, i32* %required, align 4
  %57 = load i32, i32* %required, align 4
  %cmp44 = icmp eq i32 %57, 1
  %cond46 = select i1 %cmp44, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.137, i32 0, i32 0)
  %58 = load i32, i32* %actual, align 4
  %call47 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %55, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.135, i32 0, i32 0), i32 %56, i8* %cond46, i32 %58)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.48:                                        ; preds = %if.then.36
  br label %if.end.70

if.else.49:                                       ; preds = %if.then.31
  %59 = load i32, i32* %required, align 4
  %60 = load i32, i32* %actual, align 4
  %cmp50 = icmp ne i32 %59, %60
  br i1 %cmp50, label %if.then.52, label %if.end.69

if.then.52:                                       ; preds = %if.else.49
  br label %do.body.53

do.body.53:                                       ; preds = %if.then.52
  %61 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp54, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %63, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.53
  br label %if.end.63

if.else.60:                                       ; preds = %do.body.53
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc62 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc62, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %66(%struct._object* %67)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.64

do.end.64:                                        ; preds = %if.end.63
  %68 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %69 = load i32, i32* %required, align 4
  %70 = load i32, i32* %required, align 4
  %cmp65 = icmp eq i32 %70, 1
  %cond67 = select i1 %cmp65, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.137, i32 0, i32 0)
  %71 = load i32, i32* %actual, align 4
  %call68 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %68, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.138, i32 0, i32 0), i32 %69, i8* %cond67, i32 %71)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.69:                                        ; preds = %if.else.49
  br label %if.end.70

if.end.70:                                        ; preds = %if.end.69, %if.end.48
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end
  %72 = load i8*, i8** %pProc, align 8
  %73 = bitcast i8* %72 to i32 ()*
  %74 = load %struct._object*, %struct._object** %callargs, align 8
  %75 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %flags72 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %75, i32 0, i32 13
  %76 = load i32, i32* %flags72, align 4
  %77 = load %struct._object*, %struct._object** %converters, align 8
  %78 = load %struct._object*, %struct._object** %restype, align 8
  %79 = load %struct._object*, %struct._object** %checker, align 8
  %call73 = call %struct._object* @_ctypes_callproc(i32 ()* %73, %struct._object* %74, i32 %76, %struct._object* %77, %struct._object* %78, %struct._object* %79)
  store %struct._object* %call73, %struct._object** %result, align 8
  %80 = load %struct._object*, %struct._object** %result, align 8
  %cmp74 = icmp ne %struct._object* %80, null
  br i1 %cmp74, label %land.lhs.true, label %if.end.121

land.lhs.true:                                    ; preds = %if.end.71
  %81 = load %struct._object*, %struct._object** %errcheck, align 8
  %tobool76 = icmp ne %struct._object* %81, null
  br i1 %tobool76, label %if.then.77, label %if.end.121

if.then.77:                                       ; preds = %land.lhs.true
  %82 = load %struct._object*, %struct._object** %errcheck, align 8
  %83 = load %struct._object*, %struct._object** %result, align 8
  %84 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %85 = load %struct._object*, %struct._object** %callargs, align 8
  %call78 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %82, %struct._object* %83, %struct.PyCFuncPtrObject* %84, %struct._object* %85, i8* null)
  store %struct._object* %call78, %struct._object** %v, align 8
  %86 = load %struct._object*, %struct._object** %v, align 8
  %cmp79 = icmp eq %struct._object* %86, null
  br i1 %cmp79, label %if.then.83, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.77
  %87 = load %struct._object*, %struct._object** %v, align 8
  %88 = load %struct._object*, %struct._object** %callargs, align 8
  %cmp81 = icmp ne %struct._object* %87, %88
  br i1 %cmp81, label %if.then.83, label %if.end.108

if.then.83:                                       ; preds = %lor.lhs.false, %if.then.77
  br label %do.body.84

do.body.84:                                       ; preds = %if.then.83
  %89 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %89, %struct._object** %_py_decref_tmp85, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_refcnt86 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt86, align 8
  %dec87 = add i64 %91, -1
  store i64 %dec87, i64* %ob_refcnt86, align 8
  %cmp88 = icmp ne i64 %dec87, 0
  br i1 %cmp88, label %if.then.90, label %if.else.91

if.then.90:                                       ; preds = %do.body.84
  br label %if.end.94

if.else.91:                                       ; preds = %do.body.84
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_type92 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type92, align 8
  %tp_dealloc93 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc93, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  call void %94(%struct._object* %95)
  br label %if.end.94

if.end.94:                                        ; preds = %if.else.91, %if.then.90
  br label %do.end.95

do.end.95:                                        ; preds = %if.end.94
  br label %do.body.96

do.body.96:                                       ; preds = %do.end.95
  %96 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %96, %struct._object** %_py_decref_tmp97, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %97, i32 0, i32 0
  %98 = load i64, i64* %ob_refcnt98, align 8
  %dec99 = add i64 %98, -1
  store i64 %dec99, i64* %ob_refcnt98, align 8
  %cmp100 = icmp ne i64 %dec99, 0
  br i1 %cmp100, label %if.then.102, label %if.else.103

if.then.102:                                      ; preds = %do.body.96
  br label %if.end.106

if.else.103:                                      ; preds = %do.body.96
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  %ob_type104 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 1
  %100 = load %struct._typeobject*, %struct._typeobject** %ob_type104, align 8
  %tp_dealloc105 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %100, i32 0, i32 4
  %101 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc105, align 8
  %102 = load %struct._object*, %struct._object** %_py_decref_tmp97, align 8
  call void %101(%struct._object* %102)
  br label %if.end.106

if.end.106:                                       ; preds = %if.else.103, %if.then.102
  br label %do.end.107

do.end.107:                                       ; preds = %if.end.106
  %103 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %103, %struct._object** %retval
  br label %return

if.end.108:                                       ; preds = %lor.lhs.false
  br label %do.body.109

do.body.109:                                      ; preds = %if.end.108
  %104 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %104, %struct._object** %_py_decref_tmp110, align 8
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  %ob_refcnt111 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 0
  %106 = load i64, i64* %ob_refcnt111, align 8
  %dec112 = add i64 %106, -1
  store i64 %dec112, i64* %ob_refcnt111, align 8
  %cmp113 = icmp ne i64 %dec112, 0
  br i1 %cmp113, label %if.then.115, label %if.else.116

if.then.115:                                      ; preds = %do.body.109
  br label %if.end.119

if.else.116:                                      ; preds = %do.body.109
  %107 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  %ob_type117 = getelementptr inbounds %struct._object, %struct._object* %107, i32 0, i32 1
  %108 = load %struct._typeobject*, %struct._typeobject** %ob_type117, align 8
  %tp_dealloc118 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %108, i32 0, i32 4
  %109 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc118, align 8
  %110 = load %struct._object*, %struct._object** %_py_decref_tmp110, align 8
  call void %109(%struct._object* %110)
  br label %if.end.119

if.end.119:                                       ; preds = %if.else.116, %if.then.115
  br label %do.end.120

do.end.120:                                       ; preds = %if.end.119
  br label %if.end.121

if.end.121:                                       ; preds = %do.end.120, %land.lhs.true, %if.end.71
  %111 = load %struct._object*, %struct._object** %result, align 8
  %112 = load %struct._object*, %struct._object** %callargs, align 8
  %113 = load i32, i32* %outmask, align 4
  %114 = load i32, i32* %inoutmask, align 4
  %115 = load i32, i32* %numretvals, align 4
  %call122 = call %struct._object* @_build_result(%struct._object* %111, %struct._object* %112, i32 %113, i32 %114, i32 %115)
  store %struct._object* %call122, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.121, %do.end.107, %do.end.64, %do.end, %if.then
  %116 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %116
}

; Function Attrs: uwtable
define internal i32 @PyCFuncPtr_traverse(%struct.PyCFuncPtrObject* %self, i32 (%struct._object*, i8*)* %visit, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %visit.addr = alloca i32 (%struct._object*, i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %vret = alloca i32, align 4
  %vret8 = alloca i32, align 4
  %vret19 = alloca i32, align 4
  %vret30 = alloca i32, align 4
  %vret41 = alloca i32, align 4
  %vret52 = alloca i32, align 4
  %vret63 = alloca i32, align 4
  %vret74 = alloca i32, align 4
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  store i32 (%struct._object*, i8*)* %visit, i32 (%struct._object*, i8*)** %visit.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %callable = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %0, i32 0, i32 10
  %1 = load %struct._object*, %struct._object** %callable, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  %2 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %3 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %callable1 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %3, i32 0, i32 10
  %4 = load %struct._object*, %struct._object** %callable1, align 8
  %5 = load i8*, i8** %arg.addr, align 8
  %call = call i32 %2(%struct._object* %4, i8* %5)
  store i32 %call, i32* %vret, align 4
  %6 = load i32, i32* %vret, align 4
  %tobool2 = icmp ne i32 %6, 0
  br i1 %tobool2, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  %7 = load i32, i32* %vret, align 4
  store i32 %7, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.4
  br label %do.body.5

do.body.5:                                        ; preds = %do.end
  %8 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %8, i32 0, i32 13
  %9 = load %struct._object*, %struct._object** %restype, align 8
  %tobool6 = icmp ne %struct._object* %9, null
  br i1 %tobool6, label %if.then.7, label %if.end.14

if.then.7:                                        ; preds = %do.body.5
  %10 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %11 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype9 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %11, i32 0, i32 13
  %12 = load %struct._object*, %struct._object** %restype9, align 8
  %13 = load i8*, i8** %arg.addr, align 8
  %call10 = call i32 %10(%struct._object* %12, i8* %13)
  store i32 %call10, i32* %vret8, align 4
  %14 = load i32, i32* %vret8, align 4
  %tobool11 = icmp ne i32 %14, 0
  br i1 %tobool11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.then.7
  %15 = load i32, i32* %vret8, align 4
  store i32 %15, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.then.7
  br label %if.end.14

if.end.14:                                        ; preds = %if.end.13, %do.body.5
  br label %do.end.15

do.end.15:                                        ; preds = %if.end.14
  br label %do.body.16

do.body.16:                                       ; preds = %do.end.15
  %16 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %16, i32 0, i32 14
  %17 = load %struct._object*, %struct._object** %checker, align 8
  %tobool17 = icmp ne %struct._object* %17, null
  br i1 %tobool17, label %if.then.18, label %if.end.25

if.then.18:                                       ; preds = %do.body.16
  %18 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %19 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker20 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %19, i32 0, i32 14
  %20 = load %struct._object*, %struct._object** %checker20, align 8
  %21 = load i8*, i8** %arg.addr, align 8
  %call21 = call i32 %18(%struct._object* %20, i8* %21)
  store i32 %call21, i32* %vret19, align 4
  %22 = load i32, i32* %vret19, align 4
  %tobool22 = icmp ne i32 %22, 0
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.then.18
  %23 = load i32, i32* %vret19, align 4
  store i32 %23, i32* %retval
  br label %return

if.end.24:                                        ; preds = %if.then.18
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %do.body.16
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %do.body.27

do.body.27:                                       ; preds = %do.end.26
  %24 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %24, i32 0, i32 15
  %25 = load %struct._object*, %struct._object** %errcheck, align 8
  %tobool28 = icmp ne %struct._object* %25, null
  br i1 %tobool28, label %if.then.29, label %if.end.36

if.then.29:                                       ; preds = %do.body.27
  %26 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %27 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck31 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %27, i32 0, i32 15
  %28 = load %struct._object*, %struct._object** %errcheck31, align 8
  %29 = load i8*, i8** %arg.addr, align 8
  %call32 = call i32 %26(%struct._object* %28, i8* %29)
  store i32 %call32, i32* %vret30, align 4
  %30 = load i32, i32* %vret30, align 4
  %tobool33 = icmp ne i32 %30, 0
  br i1 %tobool33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.then.29
  %31 = load i32, i32* %vret30, align 4
  store i32 %31, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.then.29
  br label %if.end.36

if.end.36:                                        ; preds = %if.end.35, %do.body.27
  br label %do.end.37

do.end.37:                                        ; preds = %if.end.36
  br label %do.body.38

do.body.38:                                       ; preds = %do.end.37
  %32 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %32, i32 0, i32 12
  %33 = load %struct._object*, %struct._object** %argtypes, align 8
  %tobool39 = icmp ne %struct._object* %33, null
  br i1 %tobool39, label %if.then.40, label %if.end.47

if.then.40:                                       ; preds = %do.body.38
  %34 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %35 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes42 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %35, i32 0, i32 12
  %36 = load %struct._object*, %struct._object** %argtypes42, align 8
  %37 = load i8*, i8** %arg.addr, align 8
  %call43 = call i32 %34(%struct._object* %36, i8* %37)
  store i32 %call43, i32* %vret41, align 4
  %38 = load i32, i32* %vret41, align 4
  %tobool44 = icmp ne i32 %38, 0
  br i1 %tobool44, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %if.then.40
  %39 = load i32, i32* %vret41, align 4
  store i32 %39, i32* %retval
  br label %return

if.end.46:                                        ; preds = %if.then.40
  br label %if.end.47

if.end.47:                                        ; preds = %if.end.46, %do.body.38
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %do.body.49

do.body.49:                                       ; preds = %do.end.48
  %40 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %40, i32 0, i32 11
  %41 = load %struct._object*, %struct._object** %converters, align 8
  %tobool50 = icmp ne %struct._object* %41, null
  br i1 %tobool50, label %if.then.51, label %if.end.58

if.then.51:                                       ; preds = %do.body.49
  %42 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %43 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters53 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %43, i32 0, i32 11
  %44 = load %struct._object*, %struct._object** %converters53, align 8
  %45 = load i8*, i8** %arg.addr, align 8
  %call54 = call i32 %42(%struct._object* %44, i8* %45)
  store i32 %call54, i32* %vret52, align 4
  %46 = load i32, i32* %vret52, align 4
  %tobool55 = icmp ne i32 %46, 0
  br i1 %tobool55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.then.51
  %47 = load i32, i32* %vret52, align 4
  store i32 %47, i32* %retval
  br label %return

if.end.57:                                        ; preds = %if.then.51
  br label %if.end.58

if.end.58:                                        ; preds = %if.end.57, %do.body.49
  br label %do.end.59

do.end.59:                                        ; preds = %if.end.58
  br label %do.body.60

do.body.60:                                       ; preds = %do.end.59
  %48 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %paramflags = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %48, i32 0, i32 16
  %49 = load %struct._object*, %struct._object** %paramflags, align 8
  %tobool61 = icmp ne %struct._object* %49, null
  br i1 %tobool61, label %if.then.62, label %if.end.69

if.then.62:                                       ; preds = %do.body.60
  %50 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %51 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %paramflags64 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %51, i32 0, i32 16
  %52 = load %struct._object*, %struct._object** %paramflags64, align 8
  %53 = load i8*, i8** %arg.addr, align 8
  %call65 = call i32 %50(%struct._object* %52, i8* %53)
  store i32 %call65, i32* %vret63, align 4
  %54 = load i32, i32* %vret63, align 4
  %tobool66 = icmp ne i32 %54, 0
  br i1 %tobool66, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.then.62
  %55 = load i32, i32* %vret63, align 4
  store i32 %55, i32* %retval
  br label %return

if.end.68:                                        ; preds = %if.then.62
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %do.body.60
  br label %do.end.70

do.end.70:                                        ; preds = %if.end.69
  br label %do.body.71

do.body.71:                                       ; preds = %do.end.70
  %56 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %thunk = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %56, i32 0, i32 9
  %57 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %tobool72 = icmp ne %struct.CThunkObject* %57, null
  br i1 %tobool72, label %if.then.73, label %if.end.80

if.then.73:                                       ; preds = %do.body.71
  %58 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %59 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %thunk75 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %59, i32 0, i32 9
  %60 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk75, align 8
  %61 = bitcast %struct.CThunkObject* %60 to %struct._object*
  %62 = load i8*, i8** %arg.addr, align 8
  %call76 = call i32 %58(%struct._object* %61, i8* %62)
  store i32 %call76, i32* %vret74, align 4
  %63 = load i32, i32* %vret74, align 4
  %tobool77 = icmp ne i32 %63, 0
  br i1 %tobool77, label %if.then.78, label %if.end.79

if.then.78:                                       ; preds = %if.then.73
  %64 = load i32, i32* %vret74, align 4
  store i32 %64, i32* %retval
  br label %return

if.end.79:                                        ; preds = %if.then.73
  br label %if.end.80

if.end.80:                                        ; preds = %if.end.79, %do.body.71
  br label %do.end.81

do.end.81:                                        ; preds = %if.end.80
  %65 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %66 = bitcast %struct.PyCFuncPtrObject* %65 to %struct.tagCDataObject*
  %67 = load i32 (%struct._object*, i8*)*, i32 (%struct._object*, i8*)** %visit.addr, align 8
  %68 = load i8*, i8** %arg.addr, align 8
  %call82 = call i32 @PyCData_traverse(%struct.tagCDataObject* %66, i32 (%struct._object*, i8*)* %67, i8* %68)
  store i32 %call82, i32* %retval
  br label %return

return:                                           ; preds = %do.end.81, %if.then.78, %if.then.67, %if.then.56, %if.then.45, %if.then.34, %if.then.23, %if.then.12, %if.then.3
  %69 = load i32, i32* %retval
  ret i32 %69
}

; Function Attrs: uwtable
define internal i32 @PyCFuncPtr_clear(%struct.PyCFuncPtrObject* %self) #0 {
entry:
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp8 = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  %_py_tmp26 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  %_py_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp49 = alloca %struct._object*, align 8
  %_py_tmp62 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %_py_tmp80 = alloca %struct._object*, align 8
  %_py_decref_tmp85 = alloca %struct._object*, align 8
  %_py_tmp98 = alloca %struct._object*, align 8
  %_py_decref_tmp103 = alloca %struct._object*, align 8
  %_py_tmp116 = alloca %struct._object*, align 8
  %_py_decref_tmp121 = alloca %struct._object*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %callable = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %0, i32 0, i32 10
  %1 = load %struct._object*, %struct._object** %callable, align 8
  store %struct._object* %1, %struct._object** %_py_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end.5

if.then:                                          ; preds = %do.body
  %3 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %callable1 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %3, i32 0, i32 10
  store %struct._object* null, %struct._object** %callable1, align 8
  br label %do.body.2

do.body.2:                                        ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp3 = icmp ne i64 %dec, 0
  br i1 %cmp3, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %do.body.2
  br label %if.end

if.else:                                          ; preds = %do.body.2
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.4
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %do.body
  br label %do.end.6

do.end.6:                                         ; preds = %if.end.5
  br label %do.body.7

do.body.7:                                        ; preds = %do.end.6
  %11 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %11, i32 0, i32 13
  %12 = load %struct._object*, %struct._object** %restype, align 8
  store %struct._object* %12, %struct._object** %_py_tmp8, align 8
  %13 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  %cmp9 = icmp ne %struct._object* %13, null
  br i1 %cmp9, label %if.then.10, label %if.end.23

if.then.10:                                       ; preds = %do.body.7
  %14 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype11 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %14, i32 0, i32 13
  store %struct._object* null, %struct._object** %restype11, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.then.10
  %15 = load %struct._object*, %struct._object** %_py_tmp8, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp13, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  br label %if.end.23

if.end.23:                                        ; preds = %do.end.22, %do.body.7
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.body.25

do.body.25:                                       ; preds = %do.end.24
  %22 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %22, i32 0, i32 14
  %23 = load %struct._object*, %struct._object** %checker, align 8
  store %struct._object* %23, %struct._object** %_py_tmp26, align 8
  %24 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  %cmp27 = icmp ne %struct._object* %24, null
  br i1 %cmp27, label %if.then.28, label %if.end.41

if.then.28:                                       ; preds = %do.body.25
  %25 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker29 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %25, i32 0, i32 14
  store %struct._object* null, %struct._object** %checker29, align 8
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.28
  %26 = load %struct._object*, %struct._object** %_py_tmp26, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp31, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %28, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %31(%struct._object* %32)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %if.end.41

if.end.41:                                        ; preds = %do.end.40, %do.body.25
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  %33 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %33, i32 0, i32 15
  %34 = load %struct._object*, %struct._object** %errcheck, align 8
  store %struct._object* %34, %struct._object** %_py_tmp44, align 8
  %35 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  %cmp45 = icmp ne %struct._object* %35, null
  br i1 %cmp45, label %if.then.46, label %if.end.59

if.then.46:                                       ; preds = %do.body.43
  %36 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck47 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %36, i32 0, i32 15
  store %struct._object* null, %struct._object** %errcheck47, align 8
  br label %do.body.48

do.body.48:                                       ; preds = %if.then.46
  %37 = load %struct._object*, %struct._object** %_py_tmp44, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp49, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_refcnt50 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt50, align 8
  %dec51 = add i64 %39, -1
  store i64 %dec51, i64* %ob_refcnt50, align 8
  %cmp52 = icmp ne i64 %dec51, 0
  br i1 %cmp52, label %if.then.53, label %if.else.54

if.then.53:                                       ; preds = %do.body.48
  br label %if.end.57

if.else.54:                                       ; preds = %do.body.48
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %tp_dealloc56 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc56, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp49, align 8
  call void %42(%struct._object* %43)
  br label %if.end.57

if.end.57:                                        ; preds = %if.else.54, %if.then.53
  br label %do.end.58

do.end.58:                                        ; preds = %if.end.57
  br label %if.end.59

if.end.59:                                        ; preds = %do.end.58, %do.body.43
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  br label %do.body.61

do.body.61:                                       ; preds = %do.end.60
  %44 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %44, i32 0, i32 12
  %45 = load %struct._object*, %struct._object** %argtypes, align 8
  store %struct._object* %45, %struct._object** %_py_tmp62, align 8
  %46 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  %cmp63 = icmp ne %struct._object* %46, null
  br i1 %cmp63, label %if.then.64, label %if.end.77

if.then.64:                                       ; preds = %do.body.61
  %47 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes65 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %47, i32 0, i32 12
  store %struct._object* null, %struct._object** %argtypes65, align 8
  br label %do.body.66

do.body.66:                                       ; preds = %if.then.64
  %48 = load %struct._object*, %struct._object** %_py_tmp62, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp67, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %50, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.66
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.66
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %53(%struct._object* %54)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  br label %if.end.77

if.end.77:                                        ; preds = %do.end.76, %do.body.61
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  br label %do.body.79

do.body.79:                                       ; preds = %do.end.78
  %55 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %55, i32 0, i32 11
  %56 = load %struct._object*, %struct._object** %converters, align 8
  store %struct._object* %56, %struct._object** %_py_tmp80, align 8
  %57 = load %struct._object*, %struct._object** %_py_tmp80, align 8
  %cmp81 = icmp ne %struct._object* %57, null
  br i1 %cmp81, label %if.then.82, label %if.end.95

if.then.82:                                       ; preds = %do.body.79
  %58 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters83 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %58, i32 0, i32 11
  store %struct._object* null, %struct._object** %converters83, align 8
  br label %do.body.84

do.body.84:                                       ; preds = %if.then.82
  %59 = load %struct._object*, %struct._object** %_py_tmp80, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp85, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_refcnt86 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt86, align 8
  %dec87 = add i64 %61, -1
  store i64 %dec87, i64* %ob_refcnt86, align 8
  %cmp88 = icmp ne i64 %dec87, 0
  br i1 %cmp88, label %if.then.89, label %if.else.90

if.then.89:                                       ; preds = %do.body.84
  br label %if.end.93

if.else.90:                                       ; preds = %do.body.84
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  %ob_type91 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type91, align 8
  %tp_dealloc92 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc92, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp85, align 8
  call void %64(%struct._object* %65)
  br label %if.end.93

if.end.93:                                        ; preds = %if.else.90, %if.then.89
  br label %do.end.94

do.end.94:                                        ; preds = %if.end.93
  br label %if.end.95

if.end.95:                                        ; preds = %do.end.94, %do.body.79
  br label %do.end.96

do.end.96:                                        ; preds = %if.end.95
  br label %do.body.97

do.body.97:                                       ; preds = %do.end.96
  %66 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %paramflags = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %66, i32 0, i32 16
  %67 = load %struct._object*, %struct._object** %paramflags, align 8
  store %struct._object* %67, %struct._object** %_py_tmp98, align 8
  %68 = load %struct._object*, %struct._object** %_py_tmp98, align 8
  %cmp99 = icmp ne %struct._object* %68, null
  br i1 %cmp99, label %if.then.100, label %if.end.113

if.then.100:                                      ; preds = %do.body.97
  %69 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %paramflags101 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %69, i32 0, i32 16
  store %struct._object* null, %struct._object** %paramflags101, align 8
  br label %do.body.102

do.body.102:                                      ; preds = %if.then.100
  %70 = load %struct._object*, %struct._object** %_py_tmp98, align 8
  store %struct._object* %70, %struct._object** %_py_decref_tmp103, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  %ob_refcnt104 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0
  %72 = load i64, i64* %ob_refcnt104, align 8
  %dec105 = add i64 %72, -1
  store i64 %dec105, i64* %ob_refcnt104, align 8
  %cmp106 = icmp ne i64 %dec105, 0
  br i1 %cmp106, label %if.then.107, label %if.else.108

if.then.107:                                      ; preds = %do.body.102
  br label %if.end.111

if.else.108:                                      ; preds = %do.body.102
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  %ob_type109 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type109, align 8
  %tp_dealloc110 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 4
  %75 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc110, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp103, align 8
  call void %75(%struct._object* %76)
  br label %if.end.111

if.end.111:                                       ; preds = %if.else.108, %if.then.107
  br label %do.end.112

do.end.112:                                       ; preds = %if.end.111
  br label %if.end.113

if.end.113:                                       ; preds = %do.end.112, %do.body.97
  br label %do.end.114

do.end.114:                                       ; preds = %if.end.113
  br label %do.body.115

do.body.115:                                      ; preds = %do.end.114
  %77 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %thunk = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %77, i32 0, i32 9
  %78 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %79 = bitcast %struct.CThunkObject* %78 to %struct._object*
  store %struct._object* %79, %struct._object** %_py_tmp116, align 8
  %80 = load %struct._object*, %struct._object** %_py_tmp116, align 8
  %cmp117 = icmp ne %struct._object* %80, null
  br i1 %cmp117, label %if.then.118, label %if.end.131

if.then.118:                                      ; preds = %do.body.115
  %81 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %thunk119 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %81, i32 0, i32 9
  store %struct.CThunkObject* null, %struct.CThunkObject** %thunk119, align 8
  br label %do.body.120

do.body.120:                                      ; preds = %if.then.118
  %82 = load %struct._object*, %struct._object** %_py_tmp116, align 8
  store %struct._object* %82, %struct._object** %_py_decref_tmp121, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  %ob_refcnt122 = getelementptr inbounds %struct._object, %struct._object* %83, i32 0, i32 0
  %84 = load i64, i64* %ob_refcnt122, align 8
  %dec123 = add i64 %84, -1
  store i64 %dec123, i64* %ob_refcnt122, align 8
  %cmp124 = icmp ne i64 %dec123, 0
  br i1 %cmp124, label %if.then.125, label %if.else.126

if.then.125:                                      ; preds = %do.body.120
  br label %if.end.129

if.else.126:                                      ; preds = %do.body.120
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  %ob_type127 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 1
  %86 = load %struct._typeobject*, %struct._typeobject** %ob_type127, align 8
  %tp_dealloc128 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 4
  %87 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc128, align 8
  %88 = load %struct._object*, %struct._object** %_py_decref_tmp121, align 8
  call void %87(%struct._object* %88)
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.126, %if.then.125
  br label %do.end.130

do.end.130:                                       ; preds = %if.end.129
  br label %if.end.131

if.end.131:                                       ; preds = %do.end.130, %do.body.115
  br label %do.end.132

do.end.132:                                       ; preds = %if.end.131
  %89 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %90 = bitcast %struct.PyCFuncPtrObject* %89 to %struct.tagCDataObject*
  %call = call i32 @PyCData_clear(%struct.tagCDataObject* %90)
  ret i32 %call
}

; Function Attrs: uwtable
define internal %struct._object* @PyCFuncPtr_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %self = alloca %struct.PyCFuncPtrObject*, align 8
  %callable = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %thunk = alloca %struct.CThunkObject*, align 8
  %ob = alloca %struct.tagCDataObject*, align 8
  %ptr = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  %cmp = icmp eq i64 %2, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %4 = load %struct._object*, %struct._object** %args.addr, align 8
  %5 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* @GenericPyCData_new(%struct._typeobject* %3, %struct._object* %4, %struct._object* %5)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %args.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.PyVarObject*
  %ob_size1 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %7, i32 0, i32 1
  %8 = load i64, i64* %ob_size1, align 8
  %cmp2 = icmp sle i64 1, %8
  br i1 %cmp2, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %args.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %10, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %11 = load %struct._object*, %struct._object** %arrayidx, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 19
  %13 = load i64, i64* %tp_flags, align 8
  %and = and i64 %13, 67108864
  %cmp3 = icmp ne i64 %and, 0
  br i1 %cmp3, label %if.then.4, label %if.end.6

if.then.4:                                        ; preds = %land.lhs.true
  %14 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %15 = load %struct._object*, %struct._object** %args.addr, align 8
  %16 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call5 = call %struct._object* @PyCFuncPtr_FromDll(%struct._typeobject* %14, %struct._object* %15, %struct._object* %16)
  store %struct._object* %call5, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %land.lhs.true, %if.end
  %17 = load %struct._object*, %struct._object** %args.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.PyVarObject*
  %ob_size7 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %18, i32 0, i32 1
  %19 = load i64, i64* %ob_size7, align 8
  %cmp8 = icmp eq i64 1, %19
  br i1 %cmp8, label %land.lhs.true.9, label %if.end.29

land.lhs.true.9:                                  ; preds = %if.end.6
  %20 = load %struct._object*, %struct._object** %args.addr, align 8
  %21 = bitcast %struct._object* %20 to %struct.PyTupleObject*
  %ob_item10 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %21, i32 0, i32 1
  %arrayidx11 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item10, i32 0, i64 0
  %22 = load %struct._object*, %struct._object** %arrayidx11, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_flags13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 19
  %24 = load i64, i64* %tp_flags13, align 8
  %and14 = and i64 %24, 16777216
  %cmp15 = icmp ne i64 %and14, 0
  br i1 %cmp15, label %if.then.16, label %if.end.29

if.then.16:                                       ; preds = %land.lhs.true.9
  %25 = load %struct._object*, %struct._object** %args.addr, align 8
  %26 = bitcast %struct._object* %25 to %struct.PyTupleObject*
  %ob_item17 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %26, i32 0, i32 1
  %arrayidx18 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item17, i32 0, i64 0
  %27 = load %struct._object*, %struct._object** %arrayidx18, align 8
  %call19 = call i8* @PyLong_AsVoidPtr(%struct._object* %27)
  store i8* %call19, i8** %ptr, align 8
  %28 = load i8*, i8** %ptr, align 8
  %cmp20 = icmp eq i8* %28, null
  br i1 %cmp20, label %land.lhs.true.21, label %if.end.24

land.lhs.true.21:                                 ; preds = %if.then.16
  %call22 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call22, null
  br i1 %tobool, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %land.lhs.true.21
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %land.lhs.true.21, %if.then.16
  %29 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %30 = load %struct._object*, %struct._object** %args.addr, align 8
  %31 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call25 = call %struct._object* @GenericPyCData_new(%struct._typeobject* %29, %struct._object* %30, %struct._object* %31)
  %32 = bitcast %struct._object* %call25 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %32, %struct.tagCDataObject** %ob, align 8
  %33 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %cmp26 = icmp eq %struct.tagCDataObject* %33, null
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  %34 = load i8*, i8** %ptr, align 8
  %35 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %35, i32 0, i32 1
  %36 = load i8*, i8** %b_ptr, align 8
  %37 = bitcast i8* %36 to i8**
  store i8* %34, i8** %37, align 8
  %38 = load %struct.tagCDataObject*, %struct.tagCDataObject** %ob, align 8
  %39 = bitcast %struct.tagCDataObject* %38 to %struct._object*
  store %struct._object* %39, %struct._object** %retval
  br label %return

if.end.29:                                        ; preds = %land.lhs.true.9, %if.end.6
  %40 = load %struct._object*, %struct._object** %args.addr, align 8
  %call30 = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.153, i32 0, i32 0), %struct._object** %callable)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %if.end.29
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.33:                                        ; preds = %if.end.29
  %41 = load %struct._object*, %struct._object** %callable, align 8
  %call34 = call i32 @PyCallable_Check(%struct._object* %41)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.end.37, label %if.then.36

if.then.36:                                       ; preds = %if.end.33
  %42 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %42, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.154, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %if.end.33
  %43 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %44 = bitcast %struct._typeobject* %43 to %struct._object*
  %call38 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %44)
  store %struct.StgDictObject* %call38, %struct.StgDictObject** %dict, align 8
  %45 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool39 = icmp ne %struct.StgDictObject* %45, null
  br i1 %tobool39, label %lor.lhs.false, label %if.then.41

lor.lhs.false:                                    ; preds = %if.end.37
  %46 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %46, i32 0, i32 9
  %47 = load %struct._object*, %struct._object** %argtypes, align 8
  %tobool40 = icmp ne %struct._object* %47, null
  br i1 %tobool40, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %lor.lhs.false, %if.end.37
  %48 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %48, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.155, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.42:                                        ; preds = %lor.lhs.false
  %49 = load %struct._object*, %struct._object** %callable, align 8
  %50 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes43 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %50, i32 0, i32 9
  %51 = load %struct._object*, %struct._object** %argtypes43, align 8
  %52 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %restype = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %52, i32 0, i32 11
  %53 = load %struct._object*, %struct._object** %restype, align 8
  %54 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %54, i32 0, i32 13
  %55 = load i32, i32* %flags, align 4
  %call44 = call %struct.CThunkObject* @_ctypes_alloc_callback(%struct._object* %49, %struct._object* %51, %struct._object* %53, i32 %55)
  store %struct.CThunkObject* %call44, %struct.CThunkObject** %thunk, align 8
  %56 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %tobool45 = icmp ne %struct.CThunkObject* %56, null
  br i1 %tobool45, label %if.end.47, label %if.then.46

if.then.46:                                       ; preds = %if.end.42
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.47:                                        ; preds = %if.end.42
  %57 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %58 = load %struct._object*, %struct._object** %args.addr, align 8
  %59 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call48 = call %struct._object* @GenericPyCData_new(%struct._typeobject* %57, %struct._object* %58, %struct._object* %59)
  %60 = bitcast %struct._object* %call48 to %struct.PyCFuncPtrObject*
  store %struct.PyCFuncPtrObject* %60, %struct.PyCFuncPtrObject** %self, align 8
  %61 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %cmp49 = icmp eq %struct.PyCFuncPtrObject* %61, null
  br i1 %cmp49, label %if.then.50, label %if.end.55

if.then.50:                                       ; preds = %if.end.47
  br label %do.body

do.body:                                          ; preds = %if.then.50
  %62 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %63 = bitcast %struct.CThunkObject* %62 to %struct._object*
  store %struct._object* %63, %struct._object** %_py_decref_tmp, align 8
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %65, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp51 = icmp ne i64 %dec, 0
  br i1 %cmp51, label %if.then.52, label %if.else

if.then.52:                                       ; preds = %do.body
  br label %if.end.54

if.else:                                          ; preds = %do.body
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %66, i32 0, i32 1
  %67 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %67, i32 0, i32 4
  %68 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %68(%struct._object* %69)
  br label %if.end.54

if.end.54:                                        ; preds = %if.else, %if.then.52
  br label %do.end

do.end:                                           ; preds = %if.end.54
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.55:                                        ; preds = %if.end.47
  %70 = load %struct._object*, %struct._object** %callable, align 8
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt56, align 8
  %inc = add i64 %71, 1
  store i64 %inc, i64* %ob_refcnt56, align 8
  %72 = load %struct._object*, %struct._object** %callable, align 8
  %73 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %callable57 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %73, i32 0, i32 10
  store %struct._object* %72, %struct._object** %callable57, align 8
  %74 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %75 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %thunk58 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %75, i32 0, i32 9
  store %struct.CThunkObject* %74, %struct.CThunkObject** %thunk58, align 8
  %76 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %pcl_exec = getelementptr inbounds %struct.CThunkObject, %struct.CThunkObject* %76, i32 0, i32 2
  %77 = load i8*, i8** %pcl_exec, align 8
  %78 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %b_ptr59 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %78, i32 0, i32 1
  %79 = load i8*, i8** %b_ptr59, align 8
  %80 = bitcast i8* %79 to i8**
  store i8* %77, i8** %80, align 8
  %81 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %82 = bitcast %struct.CThunkObject* %81 to %struct._object*
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt60, align 8
  %inc61 = add i64 %83, 1
  store i64 %inc61, i64* %ob_refcnt60, align 8
  %84 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %85 = bitcast %struct.PyCFuncPtrObject* %84 to %struct.tagCDataObject*
  %86 = load %struct.CThunkObject*, %struct.CThunkObject** %thunk, align 8
  %87 = bitcast %struct.CThunkObject* %86 to %struct._object*
  %call62 = call i32 @KeepRef(%struct.tagCDataObject* %85, i64 0, %struct._object* %87)
  %cmp63 = icmp eq i32 -1, %call62
  br i1 %cmp63, label %if.then.64, label %if.end.76

if.then.64:                                       ; preds = %if.end.55
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %88 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %89 = bitcast %struct.PyCFuncPtrObject* %88 to %struct._object*
  store %struct._object* %89, %struct._object** %_py_decref_tmp66, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %91, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %94(%struct._object* %95)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.76:                                        ; preds = %if.end.55
  %96 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %97 = bitcast %struct.PyCFuncPtrObject* %96 to %struct._object*
  store %struct._object* %97, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.76, %do.end.75, %do.end, %if.then.46, %if.then.41, %if.then.36, %if.then.32, %if.end.28, %if.then.27, %if.then.23, %if.then.4, %if.then
  %98 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %98
}

; Function Attrs: uwtable
define internal i32 @Array_init(%struct.tagCDataObject* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %n = alloca i64, align 8
  %v = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 67108864
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.171, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %args.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1
  %6 = load i64, i64* %ob_size, align 8
  store i64 %6, i64* %n, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %7 = load i64, i64* %i, align 8
  %8 = load i64, i64* %n, align 8
  %cmp1 = icmp slt i64 %7, %8
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i64, i64* %i, align 8
  %10 = load %struct._object*, %struct._object** %args.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %11, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %9
  %12 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %12, %struct._object** %v, align 8
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %14 = bitcast %struct.tagCDataObject* %13 to %struct._object*
  %15 = load i64, i64* %i, align 8
  %16 = load %struct._object*, %struct._object** %v, align 8
  %call = call i32 @PySequence_SetItem(%struct._object* %14, i64 %15, %struct._object* %16)
  %cmp2 = icmp eq i32 -1, %call
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %for.body
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.4
  %17 = load i64, i64* %i, align 8
  %inc = add i64 %17, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.3, %if.then
  %18 = load i32, i32* %retval
  ret i32 %18
}

; Function Attrs: uwtable
define internal %struct._object* @GenericPyCData_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %obj = alloca %struct.tagCDataObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool = icmp ne %struct.StgDictObject* %2, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %4, i32 0, i32 13
  %5 = load i32, i32* %flags, align 4
  %or = or i32 %5, 4096
  store i32 %or, i32* %flags, align 4
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_alloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 36
  %7 = load %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, i64)** %tp_alloc, align 8
  %8 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %call1 = call %struct._object* %7(%struct._typeobject* %8, i64 0)
  %9 = bitcast %struct._object* %call1 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %9, %struct.tagCDataObject** %obj, align 8
  %10 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %tobool2 = icmp ne %struct.tagCDataObject* %10, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_base = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %11, i32 0, i32 3
  store %struct.tagCDataObject* null, %struct.tagCDataObject** %b_base, align 8
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_index = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %12, i32 0, i32 6
  store i64 0, i64* %b_index, align 8
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_objects = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %13, i32 0, i32 7
  store %struct._object* null, %struct._object** %b_objects, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 3
  %15 = load i64, i64* %length, align 8
  %16 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %16, i32 0, i32 5
  store i64 %15, i64* %b_length, align 8
  %17 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %18 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %call5 = call i32 @PyCData_MallocBuffer(%struct.tagCDataObject* %17, %struct.StgDictObject* %18)
  %cmp = icmp eq i32 -1, %call5
  br i1 %cmp, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %19 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %20 = bitcast %struct.tagCDataObject* %19 to %struct._object*
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %27 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %28 = bitcast %struct.tagCDataObject* %27 to %struct._object*
  store %struct._object* %28, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.10, %do.end, %if.then.3, %if.then
  %29 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %29
}

; Function Attrs: uwtable
define %struct._object* @PyCArrayType_from_ctype(%struct._object* %itemtype, i64 %length) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %itemtype.addr = alloca %struct._object*, align 8
  %length.addr = alloca i64, align 8
  %key = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %name = alloca [256 x i8], align 16
  %len = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp19 = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_decref_tmp51 = alloca %struct._object*, align 8
  %_py_decref_tmp66 = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  %_py_decref_tmp89 = alloca %struct._object*, align 8
  store %struct._object* %itemtype, %struct._object** %itemtype.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  %0 = load %struct._object*, %struct._object** @PyCArrayType_from_ctype.cache, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** @PyCArrayType_from_ctype.cache, align 8
  %1 = load %struct._object*, %struct._object** @PyCArrayType_from_ctype.cache, align 8
  %cmp1 = icmp eq %struct._object* %1, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %2 = load i64, i64* %length.addr, align 8
  %call4 = call %struct._object* @PyLong_FromSsize_t(i64 %2)
  store %struct._object* %call4, %struct._object** %len, align 8
  %3 = load %struct._object*, %struct._object** %len, align 8
  %cmp5 = icmp eq %struct._object* %3, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %4 = load %struct._object*, %struct._object** %itemtype.addr, align 8
  %5 = load %struct._object*, %struct._object** %len, align 8
  %call8 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 2, %struct._object* %4, %struct._object* %5)
  store %struct._object* %call8, %struct._object** %key, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.7
  %6 = load %struct._object*, %struct._object** %len, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.11
  %13 = load %struct._object*, %struct._object** %key, align 8
  %tobool = icmp ne %struct._object* %13, null
  br i1 %tobool, label %if.end.13, label %if.then.12

if.then.12:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %do.end
  %14 = load %struct._object*, %struct._object** @PyCArrayType_from_ctype.cache, align 8
  %15 = load %struct._object*, %struct._object** %key, align 8
  %call14 = call %struct._object* @PyDict_GetItemProxy(%struct._object* %14, %struct._object* %15)
  store %struct._object* %call14, %struct._object** %result, align 8
  %16 = load %struct._object*, %struct._object** %result, align 8
  %tobool15 = icmp ne %struct._object* %16, null
  br i1 %tobool15, label %if.then.16, label %if.end.29

if.then.16:                                       ; preds = %if.end.13
  %17 = load %struct._object*, %struct._object** %result, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt17, align 8
  %inc = add i64 %18, 1
  store i64 %inc, i64* %ob_refcnt17, align 8
  br label %do.body.18

do.body.18:                                       ; preds = %if.then.16
  %19 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp19, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt20, align 8
  %dec21 = add i64 %21, -1
  store i64 %dec21, i64* %ob_refcnt20, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body.18
  br label %if.end.27

if.else.24:                                       ; preds = %do.body.18
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc26 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc26, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  call void %24(%struct._object* %25)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  %26 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %26, %struct._object** %retval
  br label %return

if.end.29:                                        ; preds = %if.end.13
  %27 = load %struct._object*, %struct._object** %itemtype.addr, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 19
  %29 = load i64, i64* %tp_flags, align 8
  %and = and i64 %29, 2147483648
  %cmp31 = icmp ne i64 %and, 0
  br i1 %cmp31, label %if.end.44, label %if.then.32

if.then.32:                                       ; preds = %if.end.29
  %30 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %30, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i32 0, i32 0))
  br label %do.body.33

do.body.33:                                       ; preds = %if.then.32
  %31 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp34, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %33, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %36(%struct._object* %37)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.44:                                        ; preds = %if.end.29
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %38 = load %struct._object*, %struct._object** %itemtype.addr, align 8
  %39 = bitcast %struct._object* %38 to %struct._typeobject*
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 1
  %40 = load i8*, i8** %tp_name, align 8
  %41 = load i64, i64* %length.addr, align 8
  %call45 = call i32 (i8*, i8*, ...) @sprintf(i8* %arraydecay, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.21, i32 0, i32 0), i8* %40, i64 %41) #4
  %arraydecay46 = getelementptr inbounds [256 x i8], [256 x i8]* %name, i32 0, i32 0
  %42 = load i64, i64* %length.addr, align 8
  %43 = load %struct._object*, %struct._object** %itemtype.addr, align 8
  %call47 = call %struct._object* (%struct._object*, i8*, ...) @_PyObject_CallFunction_SizeT(%struct._object* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type, i32 0, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.22, i32 0, i32 0), i8* %arraydecay46, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.23, i32 0, i32 0), i64 %42, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), %struct._object* %43)
  store %struct._object* %call47, %struct._object** %result, align 8
  %44 = load %struct._object*, %struct._object** %result, align 8
  %cmp48 = icmp eq %struct._object* %44, null
  br i1 %cmp48, label %if.then.49, label %if.end.61

if.then.49:                                       ; preds = %if.end.44
  br label %do.body.50

do.body.50:                                       ; preds = %if.then.49
  %45 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %45, %struct._object** %_py_decref_tmp51, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 0
  %47 = load i64, i64* %ob_refcnt52, align 8
  %dec53 = add i64 %47, -1
  store i64 %dec53, i64* %ob_refcnt52, align 8
  %cmp54 = icmp ne i64 %dec53, 0
  br i1 %cmp54, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %do.body.50
  br label %if.end.59

if.else.56:                                       ; preds = %do.body.50
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 1
  %49 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %49, i32 0, i32 4
  %50 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  call void %50(%struct._object* %51)
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.61:                                        ; preds = %if.end.44
  %52 = load %struct._object*, %struct._object** @PyCArrayType_from_ctype.cache, align 8
  %53 = load %struct._object*, %struct._object** %key, align 8
  %54 = load %struct._object*, %struct._object** %result, align 8
  %call62 = call i32 @PyDict_SetItemProxy(%struct._object* %52, %struct._object* %53, %struct._object* %54)
  %cmp63 = icmp eq i32 -1, %call62
  br i1 %cmp63, label %if.then.64, label %if.end.87

if.then.64:                                       ; preds = %if.end.61
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %55 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %55, %struct._object** %_py_decref_tmp66, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %57, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.70, label %if.else.71

if.then.70:                                       ; preds = %do.body.65
  br label %if.end.74

if.else.71:                                       ; preds = %do.body.65
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  %ob_type72 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type72, align 8
  %tp_dealloc73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc73, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp66, align 8
  call void %60(%struct._object* %61)
  br label %if.end.74

if.end.74:                                        ; preds = %if.else.71, %if.then.70
  br label %do.end.75

do.end.75:                                        ; preds = %if.end.74
  br label %do.body.76

do.body.76:                                       ; preds = %do.end.75
  %62 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %62, %struct._object** %_py_decref_tmp77, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0
  %64 = load i64, i64* %ob_refcnt78, align 8
  %dec79 = add i64 %64, -1
  store i64 %dec79, i64* %ob_refcnt78, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.76
  br label %if.end.85

if.else.82:                                       ; preds = %do.body.76
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %67(%struct._object* %68)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.87:                                        ; preds = %if.end.61
  br label %do.body.88

do.body.88:                                       ; preds = %if.end.87
  %69 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %69, %struct._object** %_py_decref_tmp89, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_refcnt90 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt90, align 8
  %dec91 = add i64 %71, -1
  store i64 %dec91, i64* %ob_refcnt90, align 8
  %cmp92 = icmp ne i64 %dec91, 0
  br i1 %cmp92, label %if.then.93, label %if.else.94

if.then.93:                                       ; preds = %do.body.88
  br label %if.end.97

if.else.94:                                       ; preds = %do.body.88
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  %ob_type95 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type95, align 8
  %tp_dealloc96 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 4
  %74 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc96, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp89, align 8
  call void %74(%struct._object* %75)
  br label %if.end.97

if.end.97:                                        ; preds = %if.else.94, %if.then.93
  br label %do.end.98

do.end.98:                                        ; preds = %if.end.97
  %76 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %76, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.98, %do.end.86, %do.end.60, %do.end.43, %do.end.28, %if.then.12, %if.then.6, %if.then.2
  %77 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %77
}

declare %struct._object* @PyDict_New() #1

declare %struct._object* @PyLong_FromSsize_t(i64) #1

declare %struct._object* @PyTuple_Pack(i64, ...) #1

declare %struct._object* @_PyObject_CallFunction_SizeT(%struct._object*, i8*, ...) #1

; Function Attrs: uwtable
define internal i32 @Pointer_init(%struct.tagCDataObject* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %value, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.186, i32 0, i32 0), i64 0, i64 1, %struct._object** %value)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %value, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %3 = load %struct._object*, %struct._object** %value, align 8
  %call3 = call i32 @Pointer_set_contents(%struct.tagCDataObject* %2, %struct._object* %3, i8* null)
  store i32 %call3, i32* %retval
  br label %return

return:                                           ; preds = %if.end.2, %if.then.1, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: uwtable
define internal %struct._object* @Pointer_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool = icmp ne %struct.StgDictObject* %2, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %3, i32 0, i32 5
  %4 = load %struct._object*, %struct._object** %proto, align 8
  %tobool1 = icmp ne %struct._object* %4, null
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.187, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %7 = load %struct._object*, %struct._object** %args.addr, align 8
  %8 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call2 = call %struct._object* @GenericPyCData_new(%struct._typeobject* %6, %struct._object* %7, %struct._object* %8)
  store %struct._object* %call2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %9 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %9
}

; Function Attrs: uwtable
define %struct._object* @PyInit__ctypes() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %m = alloca %struct._object*, align 8
  call void @PyEval_InitThreads()
  %call = call %struct._object* @PyModule_Create2(%struct.PyModuleDef* @_ctypesmodule, i32 1013)
  store %struct._object* %call, %struct._object** %m, align 8
  %0 = load %struct._object*, %struct._object** %m, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %call1 = call %struct._object* @PyDict_New()
  store %struct._object* %call1, %struct._object** @_ctypes_ptrtype_cache, align 8
  %1 = load %struct._object*, %struct._object** @_ctypes_ptrtype_cache, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %2 = load %struct._object*, %struct._object** %m, align 8
  %3 = load %struct._object*, %struct._object** @_ctypes_ptrtype_cache, align 8
  %call4 = call i32 @PyModule_AddObject(%struct._object* %2, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.26, i32 0, i32 0), %struct._object* %3)
  %4 = load %struct._object*, %struct._object** %m, align 8
  %call5 = call %struct._object* @PyObject_GetAttrString(%struct._object* %4, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.27, i32 0, i32 0))
  store %struct._object* %call5, %struct._object** @_unpickle, align 8
  %5 = load %struct._object*, %struct._object** @_unpickle, align 8
  %cmp6 = icmp eq %struct._object* %5, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end.3
  %call9 = call i32 @PyType_Ready(%struct._typeobject* @PyCArg_Type)
  %cmp10 = icmp slt i32 %call9, 0
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.8
  %call13 = call i32 @PyType_Ready(%struct._typeobject* @PyCThunk_Type)
  %cmp14 = icmp slt i32 %call13, 0
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  store %struct._typeobject* @PyDict_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyCStgDict_Type, i32 0, i32 30), align 8
  %call17 = call i32 @PyType_Ready(%struct._typeobject* @PyCStgDict_Type)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.16
  store %struct._typeobject* @PyType_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCStructType_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call21 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCStructType_Type to %struct._typeobject*))
  %cmp22 = icmp slt i32 %call21, 0
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %if.end.20
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %if.end.20
  store %struct._typeobject* @PyType_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @UnionType_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call25 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @UnionType_Type to %struct._typeobject*))
  %cmp26 = icmp slt i32 %call25, 0
  br i1 %cmp26, label %if.then.27, label %if.end.28

if.then.27:                                       ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  store %struct._typeobject* @PyType_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call29 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*))
  %cmp30 = icmp slt i32 %call29, 0
  br i1 %cmp30, label %if.then.31, label %if.end.32

if.then.31:                                       ; preds = %if.end.28
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.32:                                        ; preds = %if.end.28
  store %struct._typeobject* @PyType_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call33 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type to %struct._typeobject*))
  %cmp34 = icmp slt i32 %call33, 0
  br i1 %cmp34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.end.32
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.end.32
  store %struct._typeobject* @PyType_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCSimpleType_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call37 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCSimpleType_Type to %struct._typeobject*))
  %cmp38 = icmp slt i32 %call37, 0
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.36
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %if.end.36
  store %struct._typeobject* @PyType_Type, %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtrType_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call41 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtrType_Type to %struct._typeobject*))
  %cmp42 = icmp slt i32 %call41, 0
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.end.40
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.44:                                        ; preds = %if.end.40
  %call45 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*))
  %cmp46 = icmp slt i32 %call45, 0
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.end.44
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.48:                                        ; preds = %if.end.44
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCStructType_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Struct_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 1), align 8
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Struct_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call49 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Struct_Type to %struct._typeobject*))
  %cmp50 = icmp slt i32 %call49, 0
  br i1 %cmp50, label %if.then.51, label %if.end.52

if.then.51:                                       ; preds = %if.end.48
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.52:                                        ; preds = %if.end.48
  %6 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Struct_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 0), align 8
  %inc = add i64 %6, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Struct_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 0), align 8
  %7 = load %struct._object*, %struct._object** %m, align 8
  %call53 = call i32 @PyModule_AddObject(%struct._object* %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.28, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Struct_Type to %struct._typeobject*), i32 0, i32 0, i32 0))
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @UnionType_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Union_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 1), align 8
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Union_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call54 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Union_Type to %struct._typeobject*))
  %cmp55 = icmp slt i32 %call54, 0
  br i1 %cmp55, label %if.then.56, label %if.end.57

if.then.56:                                       ; preds = %if.end.52
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.57:                                        ; preds = %if.end.52
  %8 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Union_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 0), align 8
  %inc58 = add i64 %8, 1
  store i64 %inc58, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Union_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 0), align 8
  %9 = load %struct._object*, %struct._object** %m, align 8
  %call59 = call i32 @PyModule_AddObject(%struct._object* %9, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.29, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Union_Type to %struct._typeobject*), i32 0, i32 0, i32 0))
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type, i32 0, i32 0, i32 0, i32 1), align 8
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call60 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*))
  %cmp61 = icmp slt i32 %call60, 0
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.end.57
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.63:                                        ; preds = %if.end.57
  %10 = load i64, i64* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc64 = add i64 %10, 1
  store i64 %inc64, i64* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %11 = load %struct._object*, %struct._object** %m, align 8
  %call65 = call i32 @PyModule_AddObject(%struct._object* %11, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), %struct._object* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type, i32 0, i32 0, i32 0))
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type, i32 0, i32 0, i32 0, i32 1), align 8
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call66 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*))
  %cmp67 = icmp slt i32 %call66, 0
  br i1 %cmp67, label %if.then.68, label %if.end.69

if.then.68:                                       ; preds = %if.end.63
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.69:                                        ; preds = %if.end.63
  %12 = load i64, i64* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc70 = add i64 %12, 1
  store i64 %inc70, i64* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %13 = load %struct._object*, %struct._object** %m, align 8
  %call71 = call i32 @PyModule_AddObject(%struct._object* %13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0), %struct._object* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type, i32 0, i32 0, i32 0))
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCSimpleType_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 1), align 8
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call72 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*))
  %cmp73 = icmp slt i32 %call72, 0
  br i1 %cmp73, label %if.then.74, label %if.end.75

if.then.74:                                       ; preds = %if.end.69
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.75:                                        ; preds = %if.end.69
  %14 = load i64, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 0), align 8
  %inc76 = add i64 %14, 1
  store i64 %inc76, i64* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*), i32 0, i32 0, i32 0, i32 0), align 8
  %15 = load %struct._object*, %struct._object** %m, align 8
  %call77 = call i32 @PyModule_AddObject(%struct._object* %15, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.32, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*), i32 0, i32 0, i32 0))
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtrType_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type, i32 0, i32 0, i32 0, i32 1), align 8
  store %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*), %struct._typeobject** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type to %struct._typeobject*), i32 0, i32 30), align 8
  %call78 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type to %struct._typeobject*))
  %cmp79 = icmp slt i32 %call78, 0
  br i1 %cmp79, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %if.end.75
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.81:                                        ; preds = %if.end.75
  %16 = load i64, i64* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %inc82 = add i64 %16, 1
  store i64 %inc82, i64* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type, i32 0, i32 0, i32 0, i32 0), align 8
  %17 = load %struct._object*, %struct._object** %m, align 8
  %call83 = call i32 @PyModule_AddObject(%struct._object* %17, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), %struct._object* getelementptr inbounds ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }, { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type, i32 0, i32 0, i32 0))
  %call84 = call i32 @PyType_Ready(%struct._typeobject* @PyCField_Type)
  %cmp85 = icmp slt i32 %call84, 0
  br i1 %cmp85, label %if.then.86, label %if.end.87

if.then.86:                                       ; preds = %if.end.81
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.87:                                        ; preds = %if.end.81
  store %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)* @PyType_GenericNew, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @DictRemover_Type to %struct._typeobject*), i32 0, i32 37), align 8
  %call88 = call i32 @PyType_Ready(%struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @DictRemover_Type to %struct._typeobject*))
  %cmp89 = icmp slt i32 %call88, 0
  br i1 %cmp89, label %if.then.90, label %if.end.91

if.then.90:                                       ; preds = %if.end.87
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.91:                                        ; preds = %if.end.87
  %18 = load %struct._object*, %struct._object** %m, align 8
  %call92 = call %struct._object* @PyLong_FromLong(i64 1)
  %call93 = call i32 @PyModule_AddObject(%struct._object* %18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.34, i32 0, i32 0), %struct._object* %call92)
  %19 = load %struct._object*, %struct._object** %m, align 8
  %call94 = call %struct._object* @PyLong_FromLong(i64 8)
  %call95 = call i32 @PyModule_AddObject(%struct._object* %19, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.35, i32 0, i32 0), %struct._object* %call94)
  %20 = load %struct._object*, %struct._object** %m, align 8
  %call96 = call %struct._object* @PyLong_FromLong(i64 16)
  %call97 = call i32 @PyModule_AddObject(%struct._object* %20, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.36, i32 0, i32 0), %struct._object* %call96)
  %21 = load %struct._object*, %struct._object** %m, align 8
  %call98 = call %struct._object* @PyLong_FromLong(i64 4)
  %call99 = call i32 @PyModule_AddObject(%struct._object* %21, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.37, i32 0, i32 0), %struct._object* %call98)
  %22 = load %struct._object*, %struct._object** %m, align 8
  %call100 = call i32 @PyModule_AddStringConstant(%struct._object* %22, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i32 0, i32 0))
  %23 = load %struct._object*, %struct._object** %m, align 8
  %call101 = call %struct._object* @PyLong_FromVoidPtr(i8* bitcast (i8* (i8*, i8*, i64)* @memmove to i8*))
  %call102 = call i32 @PyModule_AddObject(%struct._object* %23, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.40, i32 0, i32 0), %struct._object* %call101)
  %24 = load %struct._object*, %struct._object** %m, align 8
  %call103 = call %struct._object* @PyLong_FromVoidPtr(i8* bitcast (i8* (i8*, i32, i64)* @memset to i8*))
  %call104 = call i32 @PyModule_AddObject(%struct._object* %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.41, i32 0, i32 0), %struct._object* %call103)
  %25 = load %struct._object*, %struct._object** %m, align 8
  %call105 = call %struct._object* @PyLong_FromVoidPtr(i8* bitcast (%struct._object* (i8*, i32)* @string_at to i8*))
  %call106 = call i32 @PyModule_AddObject(%struct._object* %25, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.42, i32 0, i32 0), %struct._object* %call105)
  %26 = load %struct._object*, %struct._object** %m, align 8
  %call107 = call %struct._object* @PyLong_FromVoidPtr(i8* bitcast (%struct._object* (i8*, %struct._object*, %struct._object*)* @cast to i8*))
  %call108 = call i32 @PyModule_AddObject(%struct._object* %26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i32 0, i32 0), %struct._object* %call107)
  %27 = load %struct._object*, %struct._object** %m, align 8
  %call109 = call %struct._object* @PyLong_FromVoidPtr(i8* bitcast (%struct._object* (i32*, i32)* @wstring_at to i8*))
  %call110 = call i32 @PyModule_AddObject(%struct._object* %27, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.44, i32 0, i32 0), %struct._object* %call109)
  %28 = load %struct._object*, %struct._object** %m, align 8
  %call111 = call %struct._object* @PyLong_FromLong(i64 0)
  %call112 = call i32 @PyModule_AddObject(%struct._object* %28, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.45, i32 0, i32 0), %struct._object* %call111)
  %29 = load %struct._object*, %struct._object** %m, align 8
  %call113 = call %struct._object* @PyLong_FromLong(i64 256)
  %call114 = call i32 @PyModule_AddObject(%struct._object* %29, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.46, i32 0, i32 0), %struct._object* %call113)
  %call115 = call %struct._object* @PyErr_NewException(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.47, i32 0, i32 0), %struct._object* null, %struct._object* null)
  store %struct._object* %call115, %struct._object** @PyExc_ArgError, align 8
  %30 = load %struct._object*, %struct._object** @PyExc_ArgError, align 8
  %tobool116 = icmp ne %struct._object* %30, null
  br i1 %tobool116, label %if.then.117, label %if.end.120

if.then.117:                                      ; preds = %if.end.91
  %31 = load %struct._object*, %struct._object** @PyExc_ArgError, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %inc118 = add i64 %32, 1
  store i64 %inc118, i64* %ob_refcnt, align 8
  %33 = load %struct._object*, %struct._object** %m, align 8
  %34 = load %struct._object*, %struct._object** @PyExc_ArgError, align 8
  %call119 = call i32 @PyModule_AddObject(%struct._object* %33, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.48, i32 0, i32 0), %struct._object* %34)
  br label %if.end.120

if.end.120:                                       ; preds = %if.then.117, %if.end.91
  %35 = load %struct._object*, %struct._object** %m, align 8
  store %struct._object* %35, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.120, %if.then.90, %if.then.86, %if.then.80, %if.then.74, %if.then.68, %if.then.62, %if.then.56, %if.then.51, %if.then.47, %if.then.43, %if.then.39, %if.then.35, %if.then.31, %if.then.27, %if.then.23, %if.then.19, %if.then.15, %if.then.11, %if.then.7, %if.then.2, %if.then
  %36 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %36
}

declare void @PyEval_InitThreads() #1

declare %struct._object* @PyModule_Create2(%struct.PyModuleDef*, i32) #1

declare i32 @PyModule_AddObject(%struct._object*, i8*, %struct._object*) #1

declare %struct._object* @PyObject_GetAttrString(%struct._object*, i8*) #1

declare i32 @PyType_Ready(%struct._typeobject*) #1

declare %struct._object* @PyType_GenericNew(%struct._typeobject*, %struct._object*, %struct._object*) #1

declare %struct._object* @PyLong_FromLong(i64) #1

declare i32 @PyModule_AddStringConstant(%struct._object*, i8*, i8*) #1

declare %struct._object* @PyLong_FromVoidPtr(i8*) #1

; Function Attrs: nounwind
declare i8* @memmove(i8*, i8*, i64) #3

; Function Attrs: nounwind
declare i8* @memset(i8*, i32, i64) #3

; Function Attrs: uwtable
define internal %struct._object* @string_at(i8* %ptr, i32 %size) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %cmp = icmp eq i32 %0, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %ptr.addr, align 8
  %2 = load i8*, i8** %ptr.addr, align 8
  %call = call i64 @strlen(i8* %2) #7
  %call1 = call %struct._object* @PyBytes_FromStringAndSize(i8* %1, i64 %call)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i8*, i8** %ptr.addr, align 8
  %4 = load i32, i32* %size.addr, align 4
  %conv = sext i32 %4 to i64
  %call2 = call %struct._object* @PyBytes_FromStringAndSize(i8* %3, i64 %conv)
  store %struct._object* %call2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %5
}

; Function Attrs: uwtable
define internal %struct._object* @cast(i8* %ptr, %struct._object* %src, %struct._object* %ctype) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %ptr.addr = alloca i8*, align 8
  %src.addr = alloca %struct._object*, align 8
  %ctype.addr = alloca %struct._object*, align 8
  %result = alloca %struct.tagCDataObject*, align 8
  %obj = alloca %struct.tagCDataObject*, align 8
  %container = alloca %struct.tagCDataObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %index = alloca %struct._object*, align 8
  %rc = alloca i32, align 4
  %_py_decref_tmp48 = alloca %struct._object*, align 8
  %_py_decref_tmp64 = alloca %struct._object*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  store %struct._object* %src, %struct._object** %src.addr, align 8
  store %struct._object* %ctype, %struct._object** %ctype.addr, align 8
  %0 = load %struct._object*, %struct._object** %ctype.addr, align 8
  %call = call i32 @cast_check_pointertype(%struct._object* %0)
  %cmp = icmp eq i32 0, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %ctype.addr, align 8
  %call1 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %1, i8* null)
  %2 = bitcast %struct._object* %call1 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %2, %struct.tagCDataObject** %result, align 8
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %cmp2 = icmp eq %struct.tagCDataObject* %3, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %src.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp5 = icmp eq %struct._typeobject* %5, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*)
  br i1 %cmp5, label %if.then.8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.4
  %6 = load %struct._object*, %struct._object** %src.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %call7 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.then.8, label %if.end.62

if.then.8:                                        ; preds = %lor.lhs.false, %if.end.4
  %8 = load %struct._object*, %struct._object** %src.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %9, %struct.tagCDataObject** %obj, align 8
  %10 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %call9 = call %struct.tagCDataObject* @PyCData_GetContainer(%struct.tagCDataObject* %10)
  store %struct.tagCDataObject* %call9, %struct.tagCDataObject** %container, align 8
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %container, align 8
  %cmp10 = icmp eq %struct.tagCDataObject* %11, null
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.8
  br label %failed

if.end.12:                                        ; preds = %if.then.8
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_objects = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %12, i32 0, i32 7
  %13 = load %struct._object*, %struct._object** %b_objects, align 8
  %cmp13 = icmp eq %struct._object* %13, @_Py_NoneStruct
  br i1 %cmp13, label %if.then.14, label %if.end.25

if.then.14:                                       ; preds = %if.end.12
  br label %do.body

do.body:                                          ; preds = %if.then.14
  store %struct._object* @_Py_NoneStruct, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp15 = icmp ne i64 %dec, 0
  br i1 %cmp15, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %do.body
  br label %if.end.18

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.18

if.end.18:                                        ; preds = %if.else, %if.then.16
  br label %do.end

do.end:                                           ; preds = %if.end.18
  %call19 = call %struct._object* @PyDict_New()
  %20 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_objects20 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %20, i32 0, i32 7
  store %struct._object* %call19, %struct._object** %b_objects20, align 8
  %21 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_objects21 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %21, i32 0, i32 7
  %22 = load %struct._object*, %struct._object** %b_objects21, align 8
  %cmp22 = icmp eq %struct._object* %22, null
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %do.end
  br label %failed

if.end.24:                                        ; preds = %do.end
  br label %if.end.25

if.end.25:                                        ; preds = %if.end.24, %if.end.12
  br label %do.body.26

do.body.26:                                       ; preds = %if.end.25
  %23 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_objects27 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %23, i32 0, i32 7
  %24 = load %struct._object*, %struct._object** %b_objects27, align 8
  store %struct._object* %24, %struct._object** %_py_xincref_tmp, align 8
  %25 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp28 = icmp ne %struct._object* %25, null
  br i1 %cmp28, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %do.body.26
  %26 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt30, align 8
  %inc = add i64 %27, 1
  store i64 %inc, i64* %ob_refcnt30, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.29, %do.body.26
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  %28 = load %struct.tagCDataObject*, %struct.tagCDataObject** %obj, align 8
  %b_objects33 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %28, i32 0, i32 7
  %29 = load %struct._object*, %struct._object** %b_objects33, align 8
  %30 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %b_objects34 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %30, i32 0, i32 7
  store %struct._object* %29, %struct._object** %b_objects34, align 8
  %31 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %b_objects35 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %31, i32 0, i32 7
  %32 = load %struct._object*, %struct._object** %b_objects35, align 8
  %tobool36 = icmp ne %struct._object* %32, null
  br i1 %tobool36, label %land.lhs.true, label %if.end.61

land.lhs.true:                                    ; preds = %do.end.32
  %33 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %b_objects37 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %33, i32 0, i32 7
  %34 = load %struct._object*, %struct._object** %b_objects37, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %cmp39 = icmp eq %struct._typeobject* %35, @PyDict_Type
  br i1 %cmp39, label %if.then.40, label %if.end.61

if.then.40:                                       ; preds = %land.lhs.true
  %36 = load %struct._object*, %struct._object** %src.addr, align 8
  %37 = bitcast %struct._object* %36 to i8*
  %call41 = call %struct._object* @PyLong_FromVoidPtr(i8* %37)
  store %struct._object* %call41, %struct._object** %index, align 8
  %38 = load %struct._object*, %struct._object** %index, align 8
  %cmp42 = icmp eq %struct._object* %38, null
  br i1 %cmp42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.then.40
  br label %failed

if.end.44:                                        ; preds = %if.then.40
  %39 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %b_objects45 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %39, i32 0, i32 7
  %40 = load %struct._object*, %struct._object** %b_objects45, align 8
  %41 = load %struct._object*, %struct._object** %index, align 8
  %42 = load %struct._object*, %struct._object** %src.addr, align 8
  %call46 = call i32 @PyDict_SetItem(%struct._object* %40, %struct._object* %41, %struct._object* %42)
  store i32 %call46, i32* %rc, align 4
  br label %do.body.47

do.body.47:                                       ; preds = %if.end.44
  %43 = load %struct._object*, %struct._object** %index, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp48, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_refcnt49 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt49, align 8
  %dec50 = add i64 %45, -1
  store i64 %dec50, i64* %ob_refcnt49, align 8
  %cmp51 = icmp ne i64 %dec50, 0
  br i1 %cmp51, label %if.then.52, label %if.else.53

if.then.52:                                       ; preds = %do.body.47
  br label %if.end.56

if.else.53:                                       ; preds = %do.body.47
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  %ob_type54 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type54, align 8
  %tp_dealloc55 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc55, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp48, align 8
  call void %48(%struct._object* %49)
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.53, %if.then.52
  br label %do.end.57

do.end.57:                                        ; preds = %if.end.56
  %50 = load i32, i32* %rc, align 4
  %cmp58 = icmp eq i32 %50, -1
  br i1 %cmp58, label %if.then.59, label %if.end.60

if.then.59:                                       ; preds = %do.end.57
  br label %failed

if.end.60:                                        ; preds = %do.end.57
  br label %if.end.61

if.end.61:                                        ; preds = %if.end.60, %land.lhs.true, %do.end.32
  br label %if.end.62

if.end.62:                                        ; preds = %if.end.61, %lor.lhs.false
  %51 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %51, i32 0, i32 1
  %52 = load i8*, i8** %b_ptr, align 8
  %53 = bitcast i8** %ptr.addr to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %52, i8* %53, i64 8, i32 1, i1 false)
  %54 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %55 = bitcast %struct.tagCDataObject* %54 to %struct._object*
  store %struct._object* %55, %struct._object** %retval
  br label %return

failed:                                           ; preds = %if.then.59, %if.then.43, %if.then.23, %if.then.11
  br label %do.body.63

do.body.63:                                       ; preds = %failed
  %56 = load %struct.tagCDataObject*, %struct.tagCDataObject** %result, align 8
  %57 = bitcast %struct.tagCDataObject* %56 to %struct._object*
  store %struct._object* %57, %struct._object** %_py_decref_tmp64, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  %ob_refcnt65 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 0
  %59 = load i64, i64* %ob_refcnt65, align 8
  %dec66 = add i64 %59, -1
  store i64 %dec66, i64* %ob_refcnt65, align 8
  %cmp67 = icmp ne i64 %dec66, 0
  br i1 %cmp67, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %do.body.63
  br label %if.end.72

if.else.69:                                       ; preds = %do.body.63
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 1
  %61 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8
  %tp_dealloc71 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %61, i32 0, i32 4
  %62 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc71, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp64, align 8
  call void %62(%struct._object* %63)
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.68
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.73, %if.end.62, %if.then.3, %if.then
  %64 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %64
}

; Function Attrs: uwtable
define internal %struct._object* @wstring_at(i32* %ptr, i32 %size) #0 {
entry:
  %ptr.addr = alloca i32*, align 8
  %size.addr = alloca i32, align 4
  %ssize = alloca i64, align 8
  store i32* %ptr, i32** %ptr.addr, align 8
  store i32 %size, i32* %size.addr, align 4
  %0 = load i32, i32* %size.addr, align 4
  %conv = sext i32 %0 to i64
  store i64 %conv, i64* %ssize, align 8
  %1 = load i64, i64* %ssize, align 8
  %cmp = icmp eq i64 %1, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load i32*, i32** %ptr.addr, align 8
  %call = call i64 @wcslen(i32* %2) #7
  store i64 %call, i64* %ssize, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load i32*, i32** %ptr.addr, align 8
  %4 = load i64, i64* %ssize, align 8
  %call2 = call %struct._object* @PyUnicode_FromWideChar(i32* %3, i64 %4)
  ret %struct._object* %call2
}

declare %struct._object* @PyErr_NewException(i8*, %struct._object*, %struct._object*) #1

; Function Attrs: uwtable
define internal void @_DictRemover_dealloc(%struct._object* %myself) #0 {
entry:
  %myself.addr = alloca %struct._object*, align 8
  %self = alloca %struct.DictRemoverObject*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp7 = alloca %struct._object*, align 8
  %_py_decref_tmp11 = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.DictRemoverObject*
  store %struct.DictRemoverObject* %1, %struct.DictRemoverObject** %self, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %key = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %2, i32 0, i32 1
  %3 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %3, %struct._object** %_py_xdecref_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %4, null
  br i1 %cmp, label %if.then, label %if.end.4

if.then:                                          ; preds = %do.body
  br label %do.body.1

do.body.1:                                        ; preds = %if.then
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %do.body.1
  br label %if.end

if.else:                                          ; preds = %do.body.1
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.4

if.end.4:                                         ; preds = %do.end, %do.body
  br label %do.end.5

do.end.5:                                         ; preds = %if.end.4
  br label %do.body.6

do.body.6:                                        ; preds = %do.end.5
  %12 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %dict = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %12, i32 0, i32 2
  %13 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %13, %struct._object** %_py_xdecref_tmp7, align 8
  %14 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  %cmp8 = icmp ne %struct._object* %14, null
  br i1 %cmp8, label %if.then.9, label %if.end.21

if.then.9:                                        ; preds = %do.body.6
  br label %do.body.10

do.body.10:                                       ; preds = %if.then.9
  %15 = load %struct._object*, %struct._object** %_py_xdecref_tmp7, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp11, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt12, align 8
  %dec13 = add i64 %17, -1
  store i64 %dec13, i64* %ob_refcnt12, align 8
  %cmp14 = icmp ne i64 %dec13, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body.10
  br label %if.end.19

if.else.16:                                       ; preds = %do.body.10
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_dealloc18 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc18, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp11, align 8
  call void %20(%struct._object* %21)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %if.end.21

if.end.21:                                        ; preds = %do.end.20, %do.body.6
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  %22 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %23 = bitcast %struct.DictRemoverObject* %22 to %struct._object*
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_free = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 38
  %25 = load void (i8*)*, void (i8*)** %tp_free, align 8
  %26 = load %struct._object*, %struct._object** %myself.addr, align 8
  %27 = bitcast %struct._object* %26 to i8*
  call void %25(i8* %27)
  ret void
}

; Function Attrs: uwtable
define internal %struct._object* @_DictRemover_call(%struct._object* %myself, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %myself.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %self = alloca %struct.DictRemoverObject*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp16 = alloca %struct._object*, align 8
  %_py_decref_tmp22 = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.DictRemoverObject*
  store %struct.DictRemoverObject* %1, %struct.DictRemoverObject** %self, align 8
  %2 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %key = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %2, i32 0, i32 1
  %3 = load %struct._object*, %struct._object** %key, align 8
  %tobool = icmp ne %struct._object* %3, null
  br i1 %tobool, label %land.lhs.true, label %if.end.34

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %dict = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %dict, align 8
  %tobool1 = icmp ne %struct._object* %5, null
  br i1 %tobool1, label %if.then, label %if.end.34

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %dict2 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %6, i32 0, i32 2
  %7 = load %struct._object*, %struct._object** %dict2, align 8
  %8 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %key3 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %8, i32 0, i32 1
  %9 = load %struct._object*, %struct._object** %key3, align 8
  %call = call i32 @PyDict_DelItem(%struct._object* %7, %struct._object* %9)
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then
  call void @PyErr_WriteUnraisable(%struct._object* @_Py_NoneStruct)
  br label %if.end

if.end:                                           ; preds = %if.then.4, %if.then
  br label %do.body

do.body:                                          ; preds = %if.end
  %10 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %key5 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %10, i32 0, i32 1
  %11 = load %struct._object*, %struct._object** %key5, align 8
  store %struct._object* %11, %struct._object** %_py_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp6 = icmp ne %struct._object* %12, null
  br i1 %cmp6, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %do.body
  %13 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %key8 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %13, i32 0, i32 1
  store %struct._object* null, %struct._object** %key8, align 8
  br label %do.body.9

do.body.9:                                        ; preds = %if.then.7
  %14 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %16, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body.9
  br label %if.end.12

if.else:                                          ; preds = %do.body.9
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %19(%struct._object* %20)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %do.body
  br label %do.end.14

do.end.14:                                        ; preds = %if.end.13
  br label %do.body.15

do.body.15:                                       ; preds = %do.end.14
  %21 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %dict17 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %21, i32 0, i32 2
  %22 = load %struct._object*, %struct._object** %dict17, align 8
  store %struct._object* %22, %struct._object** %_py_tmp16, align 8
  %23 = load %struct._object*, %struct._object** %_py_tmp16, align 8
  %cmp18 = icmp ne %struct._object* %23, null
  br i1 %cmp18, label %if.then.19, label %if.end.32

if.then.19:                                       ; preds = %do.body.15
  %24 = load %struct.DictRemoverObject*, %struct.DictRemoverObject** %self, align 8
  %dict20 = getelementptr inbounds %struct.DictRemoverObject, %struct.DictRemoverObject* %24, i32 0, i32 2
  store %struct._object* null, %struct._object** %dict20, align 8
  br label %do.body.21

do.body.21:                                       ; preds = %if.then.19
  %25 = load %struct._object*, %struct._object** %_py_tmp16, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp22, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt23, align 8
  %dec24 = add i64 %27, -1
  store i64 %dec24, i64* %ob_refcnt23, align 8
  %cmp25 = icmp ne i64 %dec24, 0
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %do.body.21
  br label %if.end.30

if.else.27:                                       ; preds = %do.body.21
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  call void %30(%struct._object* %31)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %if.end.32

if.end.32:                                        ; preds = %do.end.31, %do.body.15
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %if.end.34

if.end.34:                                        ; preds = %do.end.33, %land.lhs.true, %entry
  %32 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %32, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  ret %struct._object* @_Py_NoneStruct
}

declare i32 @PyDict_DelItem(%struct._object*, %struct._object*) #1

declare void @PyErr_WriteUnraisable(%struct._object*) #1

; Function Attrs: uwtable
define internal %struct._object* @CDataType_repeat(%struct._object* %self, i64 %length) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %length.addr = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store i64 %length, i64* %length.addr, align 8
  %0 = load i64, i64* %length.addr, align 8
  %cmp = icmp slt i64 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %2 = load i64, i64* %length.addr, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %1, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.51, i32 0, i32 0), i64 %2)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load i64, i64* %length.addr, align 8
  %call1 = call %struct._object* @PyCArrayType_from_ctype(%struct._object* %3, i64 %4)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %5
}

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #1

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #2

declare i8* @PyUnicode_AsUTF8(%struct._object*) #1

declare i32 @PyCStructUnionType_update_stgdict(%struct._object*, %struct._object*, i32) #1

; Function Attrs: uwtable
define internal %struct._object* @CDataType_from_param(%struct._object* %type, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %as_parameter = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %p = alloca %struct.tagPyCArgObject*, align 8
  %ob = alloca %struct._object*, align 8
  %ob_name = alloca i8*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %1 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call i32 @PyObject_IsInstance(%struct._object* %0, %struct._object* %1)
  store i32 %call, i32* %res, align 4
  %2 = load i32, i32* %res, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %res, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp3 = icmp eq %struct._typeobject* %8, @PyCArg_Type
  br i1 %cmp3, label %if.then.4, label %if.end.23

if.then.4:                                        ; preds = %if.end.2
  %9 = load %struct._object*, %struct._object** %value.addr, align 8
  %10 = bitcast %struct._object* %9 to %struct.tagPyCArgObject*
  store %struct.tagPyCArgObject* %10, %struct.tagPyCArgObject** %p, align 8
  %11 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %p, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %11, i32 0, i32 4
  %12 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %12, %struct._object** %ob, align 8
  %13 = load %struct._object*, %struct._object** %type.addr, align 8
  %call5 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %13)
  store %struct.StgDictObject* %call5, %struct.StgDictObject** %dict, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool6 = icmp ne %struct.StgDictObject* %14, null
  br i1 %tobool6, label %land.lhs.true, label %if.end.18

land.lhs.true:                                    ; preds = %if.then.4
  %15 = load %struct._object*, %struct._object** %ob, align 8
  %tobool7 = icmp ne %struct._object* %15, null
  br i1 %tobool7, label %if.then.8, label %if.end.18

if.then.8:                                        ; preds = %land.lhs.true
  %16 = load %struct._object*, %struct._object** %ob, align 8
  %17 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %17, i32 0, i32 5
  %18 = load %struct._object*, %struct._object** %proto, align 8
  %call9 = call i32 @PyObject_IsInstance(%struct._object* %16, %struct._object* %18)
  store i32 %call9, i32* %res, align 4
  %19 = load i32, i32* %res, align 4
  %cmp10 = icmp eq i32 %19, -1
  br i1 %cmp10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.then.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.then.8
  %20 = load i32, i32* %res, align 4
  %tobool13 = icmp ne i32 %20, 0
  br i1 %tobool13, label %if.then.14, label %if.end.17

if.then.14:                                       ; preds = %if.end.12
  %21 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt15, align 8
  %inc16 = add i64 %22, 1
  store i64 %inc16, i64* %ob_refcnt15, align 8
  %23 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

if.end.17:                                        ; preds = %if.end.12
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %land.lhs.true, %if.then.4
  %24 = load %struct._object*, %struct._object** %ob, align 8
  %tobool19 = icmp ne %struct._object* %24, null
  br i1 %tobool19, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.18
  %25 = load %struct._object*, %struct._object** %ob, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 1
  %27 = load i8*, i8** %tp_name, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.18
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %27, %cond.true ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i32 0, i32 0), %cond.false ]
  store i8* %cond, i8** %ob_name, align 8
  %28 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %29 = load %struct._object*, %struct._object** %type.addr, align 8
  %30 = bitcast %struct._object* %29 to %struct._typeobject*
  %tp_name21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 1
  %31 = load i8*, i8** %tp_name21, align 8
  %32 = load i8*, i8** %ob_name, align 8
  %call22 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %28, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.59, i32 0, i32 0), i8* %31, i8* %32)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.23:                                        ; preds = %if.end.2
  %33 = load %struct._object*, %struct._object** %value.addr, align 8
  %call24 = call %struct._object* @PyObject_GetAttrString(%struct._object* %33, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i32 0, i32 0))
  store %struct._object* %call24, %struct._object** %as_parameter, align 8
  %34 = load %struct._object*, %struct._object** %as_parameter, align 8
  %tobool25 = icmp ne %struct._object* %34, null
  br i1 %tobool25, label %if.then.26, label %if.end.33

if.then.26:                                       ; preds = %if.end.23
  %35 = load %struct._object*, %struct._object** %type.addr, align 8
  %36 = load %struct._object*, %struct._object** %as_parameter, align 8
  %call27 = call %struct._object* @CDataType_from_param(%struct._object* %35, %struct._object* %36)
  store %struct._object* %call27, %struct._object** %value.addr, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.26
  %37 = load %struct._object*, %struct._object** %as_parameter, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt28, align 8
  %dec = add i64 %39, -1
  store i64 %dec, i64* %ob_refcnt28, align 8
  %cmp29 = icmp ne i64 %dec, 0
  br i1 %cmp29, label %if.then.30, label %if.else

if.then.30:                                       ; preds = %do.body
  br label %if.end.32

if.else:                                          ; preds = %do.body
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %42(%struct._object* %43)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else, %if.then.30
  br label %do.end

do.end:                                           ; preds = %if.end.32
  %44 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %44, %struct._object** %retval
  br label %return

if.end.33:                                        ; preds = %if.end.23
  %45 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %46 = load %struct._object*, %struct._object** %type.addr, align 8
  %47 = bitcast %struct._object* %46 to %struct._typeobject*
  %tp_name34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 1
  %48 = load i8*, i8** %tp_name34, align 8
  %49 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_name36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 1
  %51 = load i8*, i8** %tp_name36, align 8
  %call37 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %45, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.61, i32 0, i32 0), i8* %48, i8* %51)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.33, %do.end, %cond.end, %if.then.14, %if.then.11, %if.then.1, %if.then
  %52 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %52
}

; Function Attrs: uwtable
define internal %struct._object* @CDataType_from_address(%struct._object* %type, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %buf = alloca i8*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 16777216
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.62, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i8* @PyLong_AsVoidPtr(%struct._object* %4)
  store i8* %call, i8** %buf, align 8
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %type.addr, align 8
  %6 = load i8*, i8** %buf, align 8
  %call4 = call %struct._object* @PyCData_AtAddress(%struct._object* %5, i8* %6)
  store %struct._object* %call4, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: uwtable
define internal %struct._object* @CDataType_from_buffer(%struct._object* %type, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %buffer = alloca i8*, align 8
  %buffer_len = alloca i64, align 8
  %offset = alloca i64, align 8
  %obj = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i64 0, i64* %offset, align 8
  %0 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %0)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %call1 = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.63, i32 0, i32 0), %struct._object** %obj, i64* %offset)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj, align 8
  %call2 = call i32 @PyObject_AsWriteBuffer(%struct._object* %2, i8** %buffer, i64* %buffer_len)
  %cmp = icmp eq i32 -1, %call2
  br i1 %cmp, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load i64, i64* %offset, align 8
  %cmp5 = icmp slt i64 %3, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.64, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %5 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %5, i32 0, i32 1
  %6 = load i64, i64* %size, align 8
  %7 = load i64, i64* %buffer_len, align 8
  %8 = load i64, i64* %offset, align 8
  %sub = sub i64 %7, %8
  %cmp8 = icmp sgt i64 %6, %sub
  br i1 %cmp8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end.7
  %9 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %10 = load i64, i64* %buffer_len, align 8
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size10 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 1
  %12 = load i64, i64* %size10, align 8
  %13 = load i64, i64* %offset, align 8
  %add = add i64 %12, %13
  %call11 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %9, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.65, i32 0, i32 0), i64 %10, i64 %add)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.7
  %14 = load %struct._object*, %struct._object** %type.addr, align 8
  %15 = load i8*, i8** %buffer, align 8
  %16 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr i8, i8* %15, i64 %16
  %call13 = call %struct._object* @PyCData_AtAddress(%struct._object* %14, i8* %add.ptr)
  store %struct._object* %call13, %struct._object** %result, align 8
  %17 = load %struct._object*, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %17, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %18 = load %struct._object*, %struct._object** %obj, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %19, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %20 = load %struct._object*, %struct._object** %result, align 8
  %21 = bitcast %struct._object* %20 to %struct.tagCDataObject*
  %22 = load %struct._object*, %struct._object** %obj, align 8
  %call17 = call i32 @KeepRef(%struct.tagCDataObject* %21, i64 -1, %struct._object* %22)
  %cmp18 = icmp eq i32 -1, %call17
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.end.16
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.16
  %23 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.20, %if.then.19, %if.then.15, %if.then.9, %if.then.6, %if.then.3, %if.then
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

; Function Attrs: uwtable
define internal %struct._object* @CDataType_from_buffer_copy(%struct._object* %type, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %buffer = alloca i8*, align 8
  %buffer_len = alloca i64, align 8
  %offset = alloca i64, align 8
  %obj = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store i64 0, i64* %offset, align 8
  %0 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %0)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %call1 = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.63, i32 0, i32 0), %struct._object** %obj, i64* %offset)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj, align 8
  %call2 = call i32 @PyObject_AsReadBuffer(%struct._object* %2, i8** %buffer, i64* %buffer_len)
  %cmp = icmp eq i32 -1, %call2
  br i1 %cmp, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load i64, i64* %offset, align 8
  %cmp5 = icmp slt i64 %3, 0
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.4
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.64, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.4
  %5 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %5, i32 0, i32 1
  %6 = load i64, i64* %size, align 8
  %7 = load i64, i64* %buffer_len, align 8
  %8 = load i64, i64* %offset, align 8
  %sub = sub i64 %7, %8
  %cmp8 = icmp sgt i64 %6, %sub
  br i1 %cmp8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %if.end.7
  %9 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %10 = load i64, i64* %buffer_len, align 8
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size10 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 1
  %12 = load i64, i64* %size10, align 8
  %13 = load i64, i64* %offset, align 8
  %add = add i64 %12, %13
  %call11 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %9, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.65, i32 0, i32 0), i64 %10, i64 %add)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %if.end.7
  %14 = load %struct._object*, %struct._object** %type.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct._typeobject*
  %call13 = call %struct._object* @GenericPyCData_new(%struct._typeobject* %15, %struct._object* null, %struct._object* null)
  store %struct._object* %call13, %struct._object** %result, align 8
  %16 = load %struct._object*, %struct._object** %result, align 8
  %cmp14 = icmp eq %struct._object* %16, null
  br i1 %cmp14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.12
  %17 = load %struct._object*, %struct._object** %result, align 8
  %18 = bitcast %struct._object* %17 to %struct.tagCDataObject*
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %18, i32 0, i32 1
  %19 = load i8*, i8** %b_ptr, align 8
  %20 = load i8*, i8** %buffer, align 8
  %21 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr i8, i8* %20, i64 %21
  %22 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size17 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %22, i32 0, i32 1
  %23 = load i64, i64* %size17, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %add.ptr, i64 %23, i32 1, i1 false)
  %24 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %24, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.16, %if.then.15, %if.then.9, %if.then.6, %if.then.3, %if.then
  %25 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %25
}

; Function Attrs: uwtable
define internal %struct._object* @CDataType_in_dll(%struct._object* %type, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %dll = alloca %struct._object*, align 8
  %name = alloca i8*, align 8
  %obj = alloca %struct._object*, align 8
  %handle = alloca i8*, align 8
  %address = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp13 = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.66, i32 0, i32 0), %struct._object** %dll, i8** %name)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %dll, align 8
  %call1 = call %struct._object* @PyObject_GetAttrString(%struct._object* %1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i32 0, i32 0))
  store %struct._object* %call1, %struct._object** %obj, align 8
  %2 = load %struct._object*, %struct._object** %obj, align 8
  %tobool2 = icmp ne %struct._object* %2, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %obj, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19
  %5 = load i64, i64* %tp_flags, align 8
  %and = and i64 %5, 16777216
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end.10, label %if.then.5

if.then.5:                                        ; preds = %if.end.4
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.68, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %if.then.5
  %7 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %7, %struct._object** %_py_decref_tmp, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %9, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type8 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type8, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %11, i32 0, i32 4
  %12 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %12(%struct._object* %13)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %14 = load %struct._object*, %struct._object** %obj, align 8
  %call11 = call i8* @PyLong_AsVoidPtr(%struct._object* %14)
  store i8* %call11, i8** %handle, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %if.end.10
  %15 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp13, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt14, align 8
  %dec15 = add i64 %17, -1
  store i64 %dec15, i64* %ob_refcnt14, align 8
  %cmp16 = icmp ne i64 %dec15, 0
  br i1 %cmp16, label %if.then.17, label %if.else.18

if.then.17:                                       ; preds = %do.body.12
  br label %if.end.21

if.else.18:                                       ; preds = %do.body.12
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  %ob_type19 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type19, align 8
  %tp_dealloc20 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc20, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp13, align 8
  call void %20(%struct._object* %21)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else.18, %if.then.17
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  %call23 = call %struct._object* @PyErr_Occurred()
  %tobool24 = icmp ne %struct._object* %call23, null
  br i1 %tobool24, label %if.then.25, label %if.end.26

if.then.25:                                       ; preds = %do.end.22
  %22 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %22, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.69, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.26:                                        ; preds = %do.end.22
  %23 = load i8*, i8** %handle, align 8
  %24 = load i8*, i8** %name, align 8
  %call27 = call i8* @dlsym(i8* %23, i8* %24) #4
  store i8* %call27, i8** %address, align 8
  %25 = load i8*, i8** %address, align 8
  %tobool28 = icmp ne i8* %25, null
  br i1 %tobool28, label %if.end.31, label %if.then.29

if.then.29:                                       ; preds = %if.end.26
  %26 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call30 = call i8* @dlerror() #4
  call void @PyErr_SetString(%struct._object* %26, i8* %call30)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.31:                                        ; preds = %if.end.26
  %27 = load %struct._object*, %struct._object** %type.addr, align 8
  %28 = load i8*, i8** %address, align 8
  %call32 = call %struct._object* @PyCData_AtAddress(%struct._object* %27, i8* %28)
  store %struct._object* %call32, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.31, %if.then.29, %if.then.25, %do.end, %if.then.3, %if.then
  %29 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %29
}

declare i32 @PyObject_IsInstance(%struct._object*, %struct._object*) #1

declare i8* @PyLong_AsVoidPtr(%struct._object*) #1

declare %struct._object* @PyErr_Occurred() #1

declare i32 @_PyArg_ParseTuple_SizeT(%struct._object*, i8*, ...) #1

declare i32 @PyObject_AsWriteBuffer(%struct._object*, i8**, i64*) #1

declare i32 @PyObject_AsReadBuffer(%struct._object*, i8**, i64*) #1

; Function Attrs: nounwind
declare i8* @dlsym(i8*, i8*) #3

; Function Attrs: nounwind
declare i8* @dlerror() #3

; Function Attrs: uwtable
define internal %struct._object* @StructUnionType_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds, i32 %isStruct) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %isStruct.addr = alloca i32, align 4
  %result = alloca %struct._typeobject*, align 8
  %fields = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp16 = alloca %struct._object*, align 8
  %_py_decref_tmp27 = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  %basedict = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp78 = alloca %struct._object*, align 8
  %_py_decref_tmp95 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store i32 %isStruct, i32* %isStruct.addr, align 4
  %0 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 37), align 8
  %1 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %3 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* %0(%struct._typeobject* %1, %struct._object* %2, %struct._object* %3)
  %4 = bitcast %struct._object* %call to %struct._typeobject*
  store %struct._typeobject* %4, %struct._typeobject** %result, align 8
  %5 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tobool = icmp ne %struct._typeobject* %5, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 31
  %7 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call1 = call %struct._object* @PyDict_GetItemString(%struct._object* %7, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70, i32 0, i32 0))
  %tobool2 = icmp ne %struct._object* %call1, null
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  %8 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %9 = bitcast %struct._typeobject* %8 to %struct._object*
  store %struct._object* %9, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %call5 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyCStgDict_Type, i32 0, i32 0, i32 0), %struct._object* null)
  %10 = bitcast %struct._object* %call5 to %struct.StgDictObject*
  store %struct.StgDictObject* %10, %struct.StgDictObject** %dict, align 8
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool6 = icmp ne %struct.StgDictObject* %11, null
  br i1 %tobool6, label %if.end.10, label %if.then.7

if.then.7:                                        ; preds = %if.end.4
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %12 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %13 = bitcast %struct._typeobject* %12 to %struct._object*
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp = icmp ne i64 %dec, 0
  br i1 %cmp, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.end.4
  %20 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %21 = bitcast %struct.StgDictObject* %20 to %struct._object*
  %22 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict11 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 31
  %23 = load %struct._object*, %struct._object** %tp_dict11, align 8
  %call12 = call i32 @PyDict_Update(%struct._object* %21, %struct._object* %23)
  %cmp13 = icmp eq i32 -1, %call12
  br i1 %cmp13, label %if.then.14, label %if.end.37

if.then.14:                                       ; preds = %if.end.10
  br label %do.body.15

do.body.15:                                       ; preds = %if.then.14
  %24 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %25 = bitcast %struct._typeobject* %24 to %struct._object*
  store %struct._object* %25, %struct._object** %_py_decref_tmp16, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt17, align 8
  %dec18 = add i64 %27, -1
  store i64 %dec18, i64* %ob_refcnt17, align 8
  %cmp19 = icmp ne i64 %dec18, 0
  br i1 %cmp19, label %if.then.20, label %if.else.21

if.then.20:                                       ; preds = %do.body.15
  br label %if.end.24

if.else.21:                                       ; preds = %do.body.15
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_dealloc23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc23, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp16, align 8
  call void %30(%struct._object* %31)
  br label %if.end.24

if.end.24:                                        ; preds = %if.else.21, %if.then.20
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  br label %do.body.26

do.body.26:                                       ; preds = %do.end.25
  %32 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %33 = bitcast %struct.StgDictObject* %32 to %struct._object*
  store %struct._object* %33, %struct._object** %_py_decref_tmp27, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_refcnt28 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt28, align 8
  %dec29 = add i64 %35, -1
  store i64 %dec29, i64* %ob_refcnt28, align 8
  %cmp30 = icmp ne i64 %dec29, 0
  br i1 %cmp30, label %if.then.31, label %if.else.32

if.then.31:                                       ; preds = %do.body.26
  br label %if.end.35

if.else.32:                                       ; preds = %do.body.26
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %tp_dealloc34 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 4
  %38 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc34, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp27, align 8
  call void %38(%struct._object* %39)
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.32, %if.then.31
  br label %do.end.36

do.end.36:                                        ; preds = %if.end.35
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.37:                                        ; preds = %if.end.10
  br label %do.body.38

do.body.38:                                       ; preds = %if.end.37
  %40 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %40, i32 0, i32 31
  %41 = load %struct._object*, %struct._object** %tp_dict40, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp39, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt41, align 8
  %dec42 = add i64 %43, -1
  store i64 %dec42, i64* %ob_refcnt41, align 8
  %cmp43 = icmp ne i64 %dec42, 0
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %do.body.38
  br label %if.end.48

if.else.45:                                       ; preds = %do.body.38
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_dealloc47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc47, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %46(%struct._object* %47)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.44
  br label %do.end.49

do.end.49:                                        ; preds = %if.end.48
  %48 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %49 = bitcast %struct.StgDictObject* %48 to %struct._object*
  %50 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict50 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 31
  store %struct._object* %49, %struct._object** %tp_dict50, align 8
  %call51 = call i8* @_ctypes_alloc_format_string(i8* null, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.71, i32 0, i32 0))
  %51 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %format = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %51, i32 0, i32 14
  store i8* %call51, i8** %format, align 8
  %52 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %format52 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %52, i32 0, i32 14
  %53 = load i8*, i8** %format52, align 8
  %cmp53 = icmp eq i8* %53, null
  br i1 %cmp53, label %if.then.54, label %if.end.66

if.then.54:                                       ; preds = %do.end.49
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.54
  %54 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %55 = bitcast %struct._typeobject* %54 to %struct._object*
  store %struct._object* %55, %struct._object** %_py_decref_tmp56, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %57, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %60(%struct._object* %61)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.66:                                        ; preds = %do.end.49
  %62 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %paramfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %62, i32 0, i32 8
  store %struct.tagPyCArgObject* (%struct.tagCDataObject*)* @StructUnionType_paramfunc, %struct.tagPyCArgObject* (%struct.tagCDataObject*)** %paramfunc, align 8
  %63 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %64 = bitcast %struct.StgDictObject* %63 to %struct._object*
  %call67 = call %struct._object* @PyDict_GetItemString(%struct._object* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52, i32 0, i32 0))
  store %struct._object* %call67, %struct._object** %fields, align 8
  %65 = load %struct._object*, %struct._object** %fields, align 8
  %tobool68 = icmp ne %struct._object* %65, null
  br i1 %tobool68, label %if.end.90, label %if.then.69

if.then.69:                                       ; preds = %if.end.66
  %66 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 30
  %67 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %68 = bitcast %struct._typeobject* %67 to %struct._object*
  %call70 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %68)
  store %struct.StgDictObject* %call70, %struct.StgDictObject** %basedict, align 8
  %69 = load %struct.StgDictObject*, %struct.StgDictObject** %basedict, align 8
  %cmp71 = icmp eq %struct.StgDictObject* %69, null
  br i1 %cmp71, label %if.then.72, label %if.end.73

if.then.72:                                       ; preds = %if.then.69
  %70 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %71 = bitcast %struct._typeobject* %70 to %struct._object*
  store %struct._object* %71, %struct._object** %retval
  br label %return

if.end.73:                                        ; preds = %if.then.69
  %72 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %73 = load %struct.StgDictObject*, %struct.StgDictObject** %basedict, align 8
  %call74 = call i32 @PyCStgDict_clone(%struct.StgDictObject* %72, %struct.StgDictObject* %73)
  %cmp75 = icmp eq i32 -1, %call74
  br i1 %cmp75, label %if.then.76, label %if.end.88

if.then.76:                                       ; preds = %if.end.73
  br label %do.body.77

do.body.77:                                       ; preds = %if.then.76
  %74 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %75 = bitcast %struct._typeobject* %74 to %struct._object*
  store %struct._object* %75, %struct._object** %_py_decref_tmp78, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_refcnt79 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 0
  %77 = load i64, i64* %ob_refcnt79, align 8
  %dec80 = add i64 %77, -1
  store i64 %dec80, i64* %ob_refcnt79, align 8
  %cmp81 = icmp ne i64 %dec80, 0
  br i1 %cmp81, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %do.body.77
  br label %if.end.86

if.else.83:                                       ; preds = %do.body.77
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 1
  %79 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %79, i32 0, i32 4
  %80 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  call void %80(%struct._object* %81)
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.88:                                        ; preds = %if.end.73
  %82 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %82, i32 0, i32 13
  %83 = load i32, i32* %flags, align 4
  %and = and i32 %83, -4097
  store i32 %and, i32* %flags, align 4
  %84 = load %struct.StgDictObject*, %struct.StgDictObject** %basedict, align 8
  %flags89 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %84, i32 0, i32 13
  %85 = load i32, i32* %flags89, align 4
  %or = or i32 %85, 4096
  store i32 %or, i32* %flags89, align 4
  %86 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %87 = bitcast %struct._typeobject* %86 to %struct._object*
  store %struct._object* %87, %struct._object** %retval
  br label %return

if.end.90:                                        ; preds = %if.end.66
  %88 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %89 = bitcast %struct._typeobject* %88 to %struct._object*
  %90 = load %struct._object*, %struct._object** %fields, align 8
  %call91 = call i32 @PyObject_SetAttrString(%struct._object* %89, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52, i32 0, i32 0), %struct._object* %90)
  %cmp92 = icmp eq i32 -1, %call91
  br i1 %cmp92, label %if.then.93, label %if.end.105

if.then.93:                                       ; preds = %if.end.90
  br label %do.body.94

do.body.94:                                       ; preds = %if.then.93
  %91 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %92 = bitcast %struct._typeobject* %91 to %struct._object*
  store %struct._object* %92, %struct._object** %_py_decref_tmp95, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  %ob_refcnt96 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 0
  %94 = load i64, i64* %ob_refcnt96, align 8
  %dec97 = add i64 %94, -1
  store i64 %dec97, i64* %ob_refcnt96, align 8
  %cmp98 = icmp ne i64 %dec97, 0
  br i1 %cmp98, label %if.then.99, label %if.else.100

if.then.99:                                       ; preds = %do.body.94
  br label %if.end.103

if.else.100:                                      ; preds = %do.body.94
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  %ob_type101 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type101, align 8
  %tp_dealloc102 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 4
  %97 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc102, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp95, align 8
  call void %97(%struct._object* %98)
  br label %if.end.103

if.end.103:                                       ; preds = %if.else.100, %if.then.99
  br label %do.end.104

do.end.104:                                       ; preds = %if.end.103
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.105:                                       ; preds = %if.end.90
  %99 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %100 = bitcast %struct._typeobject* %99 to %struct._object*
  store %struct._object* %100, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.105, %do.end.104, %if.end.88, %do.end.87, %if.then.72, %do.end.65, %do.end.36, %do.end, %if.then.3, %if.then
  %101 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %101
}

declare %struct._object* @PyDict_GetItemString(%struct._object*, i8*) #1

declare i32 @PyDict_Update(%struct._object*, %struct._object*) #1

; Function Attrs: uwtable
define internal %struct.tagPyCArgObject* @StructUnionType_paramfunc(%struct.tagCDataObject* %self) #0 {
entry:
  %retval = alloca %struct.tagPyCArgObject*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %parg = alloca %struct.tagPyCArgObject*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %call = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call, %struct.tagPyCArgObject** %parg, align 8
  %0 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp = icmp eq %struct.tagPyCArgObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tagPyCArgObject* null, %struct.tagPyCArgObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %1, i32 0, i32 2
  store i8 86, i8* %tag, align 1
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %3 = bitcast %struct.tagCDataObject* %2 to %struct._object*
  %call1 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %3)
  store %struct.StgDictObject* %call1, %struct.StgDictObject** %stgdict, align 8
  %4 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ffi_type_pointer = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %4, i32 0, i32 4
  %5 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %5, i32 0, i32 1
  store %struct._ffi_type* %ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %6, i32 0, i32 1
  %7 = load i8*, i8** %b_ptr, align 8
  %8 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %8, i32 0, i32 3
  %p = bitcast %union.anon* %value to i8**
  store i8* %7, i8** %p, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 4
  %10 = load i64, i64* %b_size, align 8
  %11 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %size = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %11, i32 0, i32 5
  store i64 %10, i64* %size, align 8
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %13 = bitcast %struct.tagCDataObject* %12 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %14, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %15 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %16 = bitcast %struct.tagCDataObject* %15 to %struct._object*
  %17 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %17, i32 0, i32 4
  store %struct._object* %16, %struct._object** %obj, align 8
  %18 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  store %struct.tagPyCArgObject* %18, %struct.tagPyCArgObject** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %19 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %retval
  ret %struct.tagPyCArgObject* %19
}

declare i32 @PyCStgDict_clone(%struct.StgDictObject*, %struct.StgDictObject*) #1

declare i32 @PyObject_SetAttrString(%struct._object*, i8*, %struct._object*) #1

declare %struct.tagPyCArgObject* @PyCArgObject_new() #1

declare %struct.StgDictObject* @PyObject_stgdict(%struct._object*) #1

; Function Attrs: uwtable
define internal %struct._object* @PyCPointerType_from_param(%struct._object* %type, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %typedict = alloca %struct.StgDictObject*, align 8
  %v = alloca %struct.StgDictObject*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 0
  %2 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %3 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %4)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %typedict, align 8
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %typedict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %6, i32 0, i32 5
  %7 = load %struct._object*, %struct._object** %proto, align 8
  %call1 = call i32 @PyObject_IsInstance(%struct._object* %5, %struct._object* %7)
  switch i32 %call1, label %sw.default [
    i32 1, label %sw.bb
    i32 -1, label %sw.bb.5
  ]

sw.bb:                                            ; preds = %if.end
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt2 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt2, align 8
  %inc3 = add i64 %9, 1
  store i64 %inc3, i64* %ob_refcnt2, align 8
  %10 = load %struct._object*, %struct._object** %value.addr, align 8
  %call4 = call %struct._object* @_byref(%struct._object* %10)
  store %struct._object* %call4, %struct._object** %retval
  br label %return

sw.bb.5:                                          ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default
  %11 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp6 = icmp eq %struct._typeobject* %12, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*)
  br i1 %cmp6, label %if.then.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.epilog
  %13 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %call8 = call i32 @PyType_IsSubtype(%struct._typeobject* %14, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then.16, label %lor.lhs.false.9

lor.lhs.false.9:                                  ; preds = %lor.lhs.false
  %15 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %cmp11 = icmp eq %struct._typeobject* %16, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*)
  br i1 %cmp11, label %if.then.16, label %lor.lhs.false.12

lor.lhs.false.12:                                 ; preds = %lor.lhs.false.9
  %17 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %call14 = call i32 @PyType_IsSubtype(%struct._typeobject* %18, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*))
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then.16, label %if.end.26

if.then.16:                                       ; preds = %lor.lhs.false.12, %lor.lhs.false.9, %lor.lhs.false, %sw.epilog
  %19 = load %struct._object*, %struct._object** %value.addr, align 8
  %call17 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %19)
  store %struct.StgDictObject* %call17, %struct.StgDictObject** %v, align 8
  %20 = load %struct.StgDictObject*, %struct.StgDictObject** %v, align 8
  %proto18 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %20, i32 0, i32 5
  %21 = load %struct._object*, %struct._object** %proto18, align 8
  %22 = load %struct.StgDictObject*, %struct.StgDictObject** %typedict, align 8
  %proto19 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %22, i32 0, i32 5
  %23 = load %struct._object*, %struct._object** %proto19, align 8
  %call20 = call i32 @PyObject_IsSubclass(%struct._object* %21, %struct._object* %23)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %if.then.16
  %24 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt23, align 8
  %inc24 = add i64 %25, 1
  store i64 %inc24, i64* %ob_refcnt23, align 8
  %26 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %26, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.then.16
  br label %if.end.26

if.end.26:                                        ; preds = %if.end.25, %lor.lhs.false.12
  %27 = load %struct._object*, %struct._object** %type.addr, align 8
  %28 = load %struct._object*, %struct._object** %value.addr, align 8
  %call27 = call %struct._object* @CDataType_from_param(%struct._object* %27, %struct._object* %28)
  store %struct._object* %call27, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.26, %if.then.22, %sw.bb.5, %sw.bb, %if.then
  %29 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %29
}

; Function Attrs: uwtable
define internal %struct._object* @PyCPointerType_set_type(%struct._typeobject* %self, %struct._object* %type) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._typeobject*, align 8
  %type.addr = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._typeobject* %self, %struct._typeobject** %self.addr, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %self.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %3 = load %struct._object*, %struct._object** %type.addr, align 8
  %call1 = call i32 @PyCPointerType_SetProto(%struct.StgDictObject* %2, %struct._object* %3)
  %cmp = icmp eq i32 -1, %call1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %5 = bitcast %struct.StgDictObject* %4 to %struct._object*
  %6 = load %struct._object*, %struct._object** %type.addr, align 8
  %call2 = call i32 @PyDict_SetItemString(%struct._object* %5, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i32 0, i32 0), %struct._object* %6)
  %cmp3 = icmp eq i32 -1, %call2
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %7 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.5, %if.then.4, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: uwtable
define internal %struct._object* @_byref(%struct._object* %obj) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %parg = alloca %struct.tagPyCArgObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*)
  br i1 %cmp, label %if.end, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.73, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %entry
  %call2 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call2, %struct.tagPyCArgObject** %parg, align 8
  %5 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp3 = icmp eq %struct.tagPyCArgObject* %5, null
  br i1 %cmp3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.4
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type7 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type7, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end.8
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end
  %13 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %13, i32 0, i32 2
  store i8 80, i8* %tag, align 1
  %14 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %14, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %15 = load %struct._object*, %struct._object** %obj.addr, align 8
  %16 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj10 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %16, i32 0, i32 4
  store %struct._object* %15, %struct._object** %obj10, align 8
  %17 = load %struct._object*, %struct._object** %obj.addr, align 8
  %18 = bitcast %struct._object* %17 to %struct.tagCDataObject*
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %18, i32 0, i32 1
  %19 = load i8*, i8** %b_ptr, align 8
  %20 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %20, i32 0, i32 3
  %p = bitcast %union.anon* %value to i8**
  store i8* %19, i8** %p, align 8
  %21 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %22 = bitcast %struct.tagPyCArgObject* %21 to %struct._object*
  store %struct._object* %22, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.9, %do.end, %if.then
  %23 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %23
}

declare i32 @PyObject_IsSubclass(%struct._object*, %struct._object*) #1

; Function Attrs: uwtable
define internal i32 @PyCPointerType_SetProto(%struct.StgDictObject* %stgdict, %struct._object* %proto) #0 {
entry:
  %retval = alloca i32, align 4
  %stgdict.addr = alloca %struct.StgDictObject*, align 8
  %proto.addr = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.StgDictObject* %stgdict, %struct.StgDictObject** %stgdict.addr, align 8
  store %struct._object* %proto, %struct._object** %proto.addr, align 8
  %0 = load %struct._object*, %struct._object** %proto.addr, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %proto.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 19
  %3 = load i64, i64* %tp_flags, align 8
  %and = and i64 %3, 2147483648
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.74, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct._object*, %struct._object** %proto.addr, align 8
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %5)
  %tobool1 = icmp ne %struct.StgDictObject* %call, null
  br i1 %tobool1, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %6 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.75, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %proto.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.3
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %proto4 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 5
  %10 = load %struct._object*, %struct._object** %proto4, align 8
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp5 = icmp ne %struct._object* %11, null
  br i1 %cmp5, label %if.then.6, label %if.end.13

if.then.6:                                        ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.then.6
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt8 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt8, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt8, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body.7
  br label %if.end.12

if.else:                                          ; preds = %do.body.7
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.12
  br label %if.end.13

if.end.13:                                        ; preds = %do.end, %do.body
  br label %do.end.14

do.end.14:                                        ; preds = %if.end.13
  %19 = load %struct._object*, %struct._object** %proto.addr, align 8
  %20 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %proto15 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %20, i32 0, i32 5
  store %struct._object* %19, %struct._object** %proto15, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.14, %if.then.2, %if.then
  %21 = load i32, i32* %retval
  ret i32 %21
}

declare i32 @PyDict_SetItemString(%struct._object*, i8*, %struct._object*) #1

declare %struct._object* @PyTuple_GetItem(%struct._object*, i64) #1

declare %struct.fielddesc* @_ctypes_get_fielddesc(i8*) #1

; Function Attrs: uwtable
define internal %struct.tagPyCArgObject* @PyCPointerType_paramfunc(%struct.tagCDataObject* %self) #0 {
entry:
  %retval = alloca %struct.tagPyCArgObject*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %parg = alloca %struct.tagPyCArgObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %call = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call, %struct.tagPyCArgObject** %parg, align 8
  %0 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp = icmp eq %struct.tagPyCArgObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tagPyCArgObject* null, %struct.tagPyCArgObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %1, i32 0, i32 2
  store i8 80, i8* %tag, align 1
  %2 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %2, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %4 = bitcast %struct.tagCDataObject* %3 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %7 = bitcast %struct.tagCDataObject* %6 to %struct._object*
  %8 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %8, i32 0, i32 4
  store %struct._object* %7, %struct._object** %obj, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 1
  %10 = load i8*, i8** %b_ptr, align 8
  %11 = bitcast i8* %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %13, i32 0, i32 3
  %p = bitcast %union.anon* %value to i8**
  store i8* %12, i8** %p, align 8
  %14 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  store %struct.tagPyCArgObject* %14, %struct.tagPyCArgObject** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %retval
  ret %struct.tagPyCArgObject* %15
}

declare i64 @PyLong_AsLongAndOverflow(%struct._object*, i32*) #1

; Function Attrs: nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #4

; Function Attrs: uwtable
define internal %struct.tagPyCArgObject* @PyCArrayType_paramfunc(%struct.tagCDataObject* %self) #0 {
entry:
  %retval = alloca %struct.tagPyCArgObject*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %p = alloca %struct.tagPyCArgObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %call = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call, %struct.tagPyCArgObject** %p, align 8
  %0 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %p, align 8
  %cmp = icmp eq %struct.tagPyCArgObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tagPyCArgObject* null, %struct.tagPyCArgObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %p, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %1, i32 0, i32 2
  store i8 80, i8* %tag, align 1
  %2 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %p, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %2, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %3, i32 0, i32 1
  %4 = load i8*, i8** %b_ptr, align 8
  %5 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %p, align 8
  %value = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %5, i32 0, i32 3
  %p1 = bitcast %union.anon* %value to i8**
  store i8* %4, i8** %p1, align 8
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %7 = bitcast %struct.tagCDataObject* %6 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %8, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %10 = bitcast %struct.tagCDataObject* %9 to %struct._object*
  %11 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %p, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %11, i32 0, i32 4
  store %struct._object* %10, %struct._object** %obj, align 8
  %12 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %p, align 8
  store %struct.tagPyCArgObject* %12, %struct.tagPyCArgObject** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %retval
  ret %struct.tagPyCArgObject* %13
}

; Function Attrs: uwtable
define internal i32 @add_getset(%struct._typeobject* %type, %struct.PyGetSetDef* %gsp) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %gsp.addr = alloca %struct.PyGetSetDef*, align 8
  %dict = alloca %struct._object*, align 8
  %descr = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct.PyGetSetDef* %gsp, %struct.PyGetSetDef** %gsp.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 31
  %1 = load %struct._object*, %struct._object** %tp_dict, align 8
  store %struct._object* %1, %struct._object** %dict, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %name = getelementptr inbounds %struct.PyGetSetDef, %struct.PyGetSetDef* %2, i32 0, i32 0
  %3 = load i8*, i8** %name, align 8
  %cmp = icmp ne i8* %3, null
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %5 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %call = call %struct._object* @PyDescr_NewGetSet(%struct._typeobject* %4, %struct.PyGetSetDef* %5)
  store %struct._object* %call, %struct._object** %descr, align 8
  %6 = load %struct._object*, %struct._object** %descr, align 8
  %cmp1 = icmp eq %struct._object* %6, null
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %for.body
  %7 = load %struct._object*, %struct._object** %dict, align 8
  %8 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %name2 = getelementptr inbounds %struct.PyGetSetDef, %struct.PyGetSetDef* %8, i32 0, i32 0
  %9 = load i8*, i8** %name2, align 8
  %10 = load %struct._object*, %struct._object** %descr, align 8
  %call3 = call i32 @PyDict_SetItemString(%struct._object* %7, i8* %9, %struct._object* %10)
  %cmp4 = icmp slt i32 %call3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.end.6
  %11 = load %struct._object*, %struct._object** %descr, align 8
  store %struct._object* %11, %struct._object** %_py_decref_tmp, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %13, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %15, i32 0, i32 4
  %16 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %16(%struct._object* %17)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  br label %for.inc

for.inc:                                          ; preds = %do.end
  %18 = load %struct.PyGetSetDef*, %struct.PyGetSetDef** %gsp.addr, align 8
  %incdec.ptr = getelementptr %struct.PyGetSetDef, %struct.PyGetSetDef* %18, i32 1
  store %struct.PyGetSetDef* %incdec.ptr, %struct.PyGetSetDef** %gsp.addr, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.5, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

declare %struct._object* @PyDescr_NewGetSet(%struct._typeobject*, %struct.PyGetSetDef*) #1

; Function Attrs: uwtable
define internal %struct._object* @CharArray_get_raw(%struct.tagCDataObject* %self) #0 {
entry:
  %self.addr = alloca %struct.tagCDataObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 1
  %1 = load i8*, i8** %b_ptr, align 8
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %2, i32 0, i32 4
  %3 = load i64, i64* %b_size, align 8
  %call = call %struct._object* @PyBytes_FromStringAndSize(i8* %1, i64 %3)
  ret %struct._object* %call
}

; Function Attrs: uwtable
define internal i32 @CharArray_set_raw(%struct.tagCDataObject* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %ptr = alloca i8*, align 8
  %size = alloca i64, align 8
  %view = alloca %struct.bufferinfo, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @PyObject_GetBuffer(%struct._object* %0, %struct.bufferinfo* %view, i32 0)
  %cmp = icmp slt i32 %call, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 2
  %1 = load i64, i64* %len, align 8
  store i64 %1, i64* %size, align 8
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %view, i32 0, i32 0
  %2 = load i8*, i8** %buf, align 8
  store i8* %2, i8** %ptr, align 8
  %3 = load i64, i64* %size, align 8
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 4
  %5 = load i64, i64* %b_size, align 8
  %cmp1 = icmp sgt i64 %3, %5
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %6 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.87, i32 0, i32 0))
  br label %fail

if.end.3:                                         ; preds = %if.end
  %7 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %7, i32 0, i32 1
  %8 = load i8*, i8** %b_ptr, align 8
  %9 = load i8*, i8** %ptr, align 8
  %10 = load i64, i64* %size, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* %9, i64 %10, i32 1, i1 false)
  call void @PyBuffer_Release(%struct.bufferinfo* %view)
  store i32 0, i32* %retval
  br label %return

fail:                                             ; preds = %if.then.2
  call void @PyBuffer_Release(%struct.bufferinfo* %view)
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %fail, %if.end.3, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: uwtable
define internal %struct._object* @CharArray_get_value(%struct.tagCDataObject* %self) #0 {
entry:
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %i = alloca i32, align 4
  %ptr = alloca i8*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 1
  %1 = load i8*, i8** %b_ptr, align 8
  store i8* %1, i8** %ptr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %conv = sext i32 %2 to i64
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %3, i32 0, i32 4
  %4 = load i64, i64* %b_size, align 8
  %cmp = icmp slt i64 %conv, %4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %5 = load i8*, i8** %ptr, align 8
  %incdec.ptr = getelementptr i8, i8* %5, i32 1
  store i8* %incdec.ptr, i8** %ptr, align 8
  %6 = load i8, i8* %5, align 1
  %conv2 = sext i8 %6 to i32
  %cmp3 = icmp eq i32 %conv2, 0
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, i32* %i, align 4
  %inc = add i32 %7, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %8 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr5 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %8, i32 0, i32 1
  %9 = load i8*, i8** %b_ptr5, align 8
  %10 = load i32, i32* %i, align 4
  %conv6 = sext i32 %10 to i64
  %call = call %struct._object* @PyBytes_FromStringAndSize(i8* %9, i64 %conv6)
  ret %struct._object* %call
}

; Function Attrs: uwtable
define internal i32 @CharArray_set_value(%struct.tagCDataObject* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %ptr = alloca i8*, align 8
  %size = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp20 = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.88, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 134217728
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.else, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 1
  %8 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.89, i32 0, i32 0), i8* %8)
  store i32 -1, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.else
  %11 = load %struct._object*, %struct._object** %value.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1
  %13 = load i64, i64* %ob_size, align 8
  store i64 %13, i64* %size, align 8
  %14 = load i64, i64* %size, align 8
  %15 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %15, i32 0, i32 4
  %16 = load i64, i64* %b_size, align 8
  %cmp5 = icmp sgt i64 %14, %16
  br i1 %cmp5, label %if.then.6, label %if.end.13

if.then.6:                                        ; preds = %if.end.4
  %17 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.87, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %if.then.6
  %18 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %18, %struct._object** %_py_decref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt7 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt7, align 8
  %dec = add i64 %20, -1
  store i64 %dec, i64* %ob_refcnt7, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else.10

if.then.9:                                        ; preds = %do.body
  br label %if.end.12

if.else.10:                                       ; preds = %do.body
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 4
  %23 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %23(%struct._object* %24)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else.10, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.12
  store i32 -1, i32* %retval
  br label %return

if.end.13:                                        ; preds = %if.end.4
  %25 = load %struct._object*, %struct._object** %value.addr, align 8
  %26 = bitcast %struct._object* %25 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %26, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  store i8* %arraydecay, i8** %ptr, align 8
  %27 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %27, i32 0, i32 1
  %28 = load i8*, i8** %b_ptr, align 8
  %29 = load i8*, i8** %ptr, align 8
  %30 = load i64, i64* %size, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %28, i8* %29, i64 %30, i32 1, i1 false)
  %31 = load i64, i64* %size, align 8
  %32 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size14 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %32, i32 0, i32 4
  %33 = load i64, i64* %b_size14, align 8
  %cmp15 = icmp slt i64 %31, %33
  br i1 %cmp15, label %if.then.16, label %if.end.18

if.then.16:                                       ; preds = %if.end.13
  %34 = load i64, i64* %size, align 8
  %35 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr17 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %35, i32 0, i32 1
  %36 = load i8*, i8** %b_ptr17, align 8
  %arrayidx = getelementptr i8, i8* %36, i64 %34
  store i8 0, i8* %arrayidx, align 1
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.16, %if.end.13
  br label %do.body.19

do.body.19:                                       ; preds = %if.end.18
  %37 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp20, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt21, align 8
  %dec22 = add i64 %39, -1
  store i64 %dec22, i64* %ob_refcnt21, align 8
  %cmp23 = icmp ne i64 %dec22, 0
  br i1 %cmp23, label %if.then.24, label %if.else.25

if.then.24:                                       ; preds = %do.body.19
  br label %if.end.28

if.else.25:                                       ; preds = %do.body.19
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %tp_dealloc27 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc27, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp20, align 8
  call void %42(%struct._object* %43)
  br label %if.end.28

if.end.28:                                        ; preds = %if.else.25, %if.then.24
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.29, %do.end, %if.then.2, %if.then
  %44 = load i32, i32* %retval
  ret i32 %44
}

declare %struct._object* @PyBytes_FromStringAndSize(i8*, i64) #1

declare i32 @PyObject_GetBuffer(%struct._object*, %struct.bufferinfo*, i32) #1

declare void @PyBuffer_Release(%struct.bufferinfo*) #1

; Function Attrs: uwtable
define internal %struct._object* @WCharArray_get_value(%struct.tagCDataObject* %self) #0 {
entry:
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %i = alloca i32, align 4
  %ptr = alloca i32*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 1
  %1 = load i8*, i8** %b_ptr, align 8
  %2 = bitcast i8* %1 to i32*
  store i32* %2, i32** %ptr, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load i32, i32* %i, align 4
  %conv = zext i32 %3 to i64
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 4
  %5 = load i64, i64* %b_size, align 8
  %div = udiv i64 %5, 4
  %cmp = icmp ult i64 %conv, %div
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32*, i32** %ptr, align 8
  %incdec.ptr = getelementptr i32, i32* %6, i32 1
  store i32* %incdec.ptr, i32** %ptr, align 8
  %7 = load i32, i32* %6, align 4
  %cmp2 = icmp eq i32 %7, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4
  %inc = add i32 %8, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then, %for.cond
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr4 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 1
  %10 = load i8*, i8** %b_ptr4, align 8
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %i, align 4
  %conv5 = zext i32 %12 to i64
  %call = call %struct._object* @PyUnicode_FromWideChar(i32* %11, i64 %conv5)
  ret %struct._object* %call
}

; Function Attrs: uwtable
define internal i32 @WCharArray_set_value(%struct.tagCDataObject* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %result = alloca i64, align 8
  %wstr = alloca i32*, align 8
  %len = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i64 0, i64* %result, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.88, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.else, label %if.then.2

if.then.2:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type3 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type3, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %7, i32 0, i32 1
  %8 = load i8*, i8** %tp_name, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %5, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.90, i32 0, i32 0), i8* %8)
  store i32 -1, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %9 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.4

if.end.4:                                         ; preds = %if.else
  %11 = load %struct._object*, %struct._object** %value.addr, align 8
  %call5 = call i32* @PyUnicode_AsUnicodeAndSize(%struct._object* %11, i64* %len)
  store i32* %call5, i32** %wstr, align 8
  %12 = load i32*, i32** %wstr, align 8
  %cmp6 = icmp eq i32* %12, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end.4
  %13 = load i64, i64* %len, align 8
  %conv = trunc i64 %13 to i32
  %conv9 = zext i32 %conv to i64
  %14 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %14, i32 0, i32 4
  %15 = load i64, i64* %b_size, align 8
  %div = udiv i64 %15, 4
  %cmp10 = icmp ugt i64 %conv9, %div
  br i1 %cmp10, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.8
  %16 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %16, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.87, i32 0, i32 0))
  store i64 -1, i64* %result, align 8
  br label %done

if.end.13:                                        ; preds = %if.end.8
  %17 = load %struct._object*, %struct._object** %value.addr, align 8
  %18 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %18, i32 0, i32 1
  %19 = load i8*, i8** %b_ptr, align 8
  %20 = bitcast i8* %19 to i32*
  %21 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size14 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %21, i32 0, i32 4
  %22 = load i64, i64* %b_size14, align 8
  %div15 = udiv i64 %22, 4
  %call16 = call i64 @PyUnicode_AsWideChar(%struct._object* %17, i32* %20, i64 %div15)
  store i64 %call16, i64* %result, align 8
  %23 = load i64, i64* %result, align 8
  %cmp17 = icmp sge i64 %23, 0
  br i1 %cmp17, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %if.end.13
  %24 = load i64, i64* %result, align 8
  %25 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size19 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %25, i32 0, i32 4
  %26 = load i64, i64* %b_size19, align 8
  %div20 = udiv i64 %26, 4
  %cmp21 = icmp ult i64 %24, %div20
  br i1 %cmp21, label %if.then.23, label %if.end.25

if.then.23:                                       ; preds = %land.lhs.true
  %27 = load i64, i64* %result, align 8
  %28 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr24 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %28, i32 0, i32 1
  %29 = load i8*, i8** %b_ptr24, align 8
  %30 = bitcast i8* %29 to i32*
  %arrayidx = getelementptr i32, i32* %30, i64 %27
  store i32 0, i32* %arrayidx, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.23, %land.lhs.true, %if.end.13
  br label %done

done:                                             ; preds = %if.end.25, %if.then.12
  br label %do.body

do.body:                                          ; preds = %done
  %31 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt26, align 8
  %dec = add i64 %33, -1
  store i64 %dec, i64* %ob_refcnt26, align 8
  %cmp27 = icmp ne i64 %dec, 0
  br i1 %cmp27, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body
  br label %if.end.32

if.else.30:                                       ; preds = %do.body
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %36(%struct._object* %37)
  br label %if.end.32

if.end.32:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end

do.end:                                           ; preds = %if.end.32
  %38 = load i64, i64* %result, align 8
  %cmp33 = icmp sge i64 %38, 0
  %cond = select i1 %cmp33, i32 0, i32 -1
  store i32 %cond, i32* %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.7, %if.then.2, %if.then
  %39 = load i32, i32* %retval
  ret i32 %39
}

declare %struct._object* @PyUnicode_FromWideChar(i32*, i64) #1

declare i32* @PyUnicode_AsUnicodeAndSize(%struct._object*, i64*) #1

declare i64 @PyUnicode_AsWideChar(%struct._object*, i32*, i64) #1

; Function Attrs: uwtable
define internal %struct._object* @PyCSimpleType_from_param(%struct._object* %type, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %fmt = alloca i8*, align 8
  %parg = alloca %struct.tagPyCArgObject*, align 8
  %fd = alloca %struct.fielddesc*, align 8
  %as_parameter = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %atomic_val48 = alloca %struct._Py_atomic_address*, align 8
  %result50 = alloca i8*, align 8
  %volatile_data52 = alloca i8**, align 8
  %order55 = alloca i32, align 4
  %tmp62 = alloca i8*, align 8
  %atomic_val69 = alloca %struct._Py_atomic_address*, align 8
  %result71 = alloca i8*, align 8
  %volatile_data73 = alloca i8**, align 8
  %order76 = alloca i32, align 4
  %tmp83 = alloca i8*, align 8
  %_py_decref_tmp88 = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %1 = load %struct._object*, %struct._object** %type.addr, align 8
  %call = call i32 @PyObject_IsInstance(%struct._object* %0, %struct._object* %1)
  store i32 %call, i32* %res, align 4
  %2 = load i32, i32* %res, align 4
  %cmp = icmp eq i32 %2, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %res, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end.2:                                         ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %type.addr, align 8
  %call3 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %7)
  store %struct.StgDictObject* %call3, %struct.StgDictObject** %dict, align 8
  %8 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %8, i32 0, i32 5
  %9 = load %struct._object*, %struct._object** %proto, align 8
  %call4 = call i8* @PyUnicode_AsUTF8(%struct._object* %9)
  store i8* %call4, i8** %fmt, align 8
  %10 = load i8*, i8** %fmt, align 8
  %call5 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* %10)
  store %struct.fielddesc* %call5, %struct.fielddesc** %fd, align 8
  %call6 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call6, %struct.tagPyCArgObject** %parg, align 8
  %11 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp7 = icmp eq %struct.tagPyCArgObject* %11, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.9:                                         ; preds = %if.end.2
  %12 = load i8*, i8** %fmt, align 8
  %arrayidx = getelementptr i8, i8* %12, i64 0
  %13 = load i8, i8* %arrayidx, align 1
  %14 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %14, i32 0, i32 2
  store i8 %13, i8* %tag, align 1
  %15 = load %struct.fielddesc*, %struct.fielddesc** %fd, align 8
  %pffi_type = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %15, i32 0, i32 3
  %16 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type, align 8
  %17 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type10 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %17, i32 0, i32 1
  store %struct._ffi_type* %16, %struct._ffi_type** %pffi_type10, align 8
  %18 = load %struct.fielddesc*, %struct.fielddesc** %fd, align 8
  %setfunc = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %18, i32 0, i32 1
  %19 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %20 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value11 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %20, i32 0, i32 3
  %21 = bitcast %union.anon* %value11 to i8*
  %22 = load %struct._object*, %struct._object** %value.addr, align 8
  %call12 = call %struct._object* %19(i8* %21, %struct._object* %22, i64 0)
  %23 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %23, i32 0, i32 4
  store %struct._object* %call12, %struct._object** %obj, align 8
  %24 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj13 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %24, i32 0, i32 4
  %25 = load %struct._object*, %struct._object** %obj13, align 8
  %tobool14 = icmp ne %struct._object* %25, null
  br i1 %tobool14, label %if.then.15, label %if.end.16

if.then.15:                                       ; preds = %if.end.9
  %26 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %27 = bitcast %struct.tagPyCArgObject* %26 to %struct._object*
  store %struct._object* %27, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.9
  call void @PyErr_Clear()
  br label %do.body

do.body:                                          ; preds = %if.end.16
  %28 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %29 = bitcast %struct.tagPyCArgObject* %28 to %struct._object*
  store %struct._object* %29, %struct._object** %_py_decref_tmp, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt17 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt17, align 8
  %dec = add i64 %31, -1
  store i64 %dec, i64* %ob_refcnt17, align 8
  %cmp18 = icmp ne i64 %dec, 0
  br i1 %cmp18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %do.body
  br label %if.end.20

if.else:                                          ; preds = %do.body
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %34(%struct._object* %35)
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.19
  br label %do.end

do.end:                                           ; preds = %if.end.20
  %36 = load %struct._object*, %struct._object** %value.addr, align 8
  %call21 = call %struct._object* @PyObject_GetAttrString(%struct._object* %36, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i32 0, i32 0))
  store %struct._object* %call21, %struct._object** %as_parameter, align 8
  %37 = load %struct._object*, %struct._object** %as_parameter, align 8
  %tobool22 = icmp ne %struct._object* %37, null
  br i1 %tobool22, label %if.then.23, label %if.end.98

if.then.23:                                       ; preds = %do.end
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %38 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %38, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %39 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %40 = bitcast %struct._Py_atomic_address* %39 to i8*
  %41 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %40, i32 %41)
  %42 = load i32, i32* %order, align 4
  switch i32 %42, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.23, %if.then.23, %if.then.23
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.23
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %43 = load i8**, i8*** %volatile_data, align 8
  %44 = load volatile i8*, i8** %43, align 8
  store i8* %44, i8** %result, align 8
  %45 = load i32, i32* %order, align 4
  switch i32 %45, label %sw.default.25 [
    i32 1, label %sw.bb.24
    i32 3, label %sw.bb.24
    i32 4, label %sw.bb.24
  ]

sw.bb.24:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.26

sw.default.25:                                    ; preds = %sw.epilog
  br label %sw.epilog.26

sw.epilog.26:                                     ; preds = %sw.default.25, %sw.bb.24
  %46 = load i8*, i8** %result, align 8
  store i8* %46, i8** %tmp
  %47 = load i8*, i8** %tmp
  %48 = bitcast i8* %47 to %struct._ts*
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %48, i32 0, i32 4
  %49 = load i32, i32* %recursion_depth, align 4
  %inc27 = add i32 %49, 1
  store i32 %inc27, i32* %recursion_depth, align 4
  %50 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp28 = icmp sgt i32 %inc27, %50
  br i1 %cmp28, label %land.lhs.true, label %if.end.44

land.lhs.true:                                    ; preds = %sw.epilog.26
  %call29 = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.91, i32 0, i32 0))
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.31, label %if.end.44

if.then.31:                                       ; preds = %land.lhs.true
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.31
  %51 = load %struct._object*, %struct._object** %as_parameter, align 8
  store %struct._object* %51, %struct._object** %_py_decref_tmp34, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 0
  %53 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %53, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.32
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.32
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %55, i32 0, i32 4
  %56 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %56(%struct._object* %57)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.44:                                        ; preds = %land.lhs.true, %sw.epilog.26
  %58 = load %struct._object*, %struct._object** %type.addr, align 8
  %59 = load %struct._object*, %struct._object** %as_parameter, align 8
  %call45 = call %struct._object* @PyCSimpleType_from_param(%struct._object* %58, %struct._object* %59)
  store %struct._object* %call45, %struct._object** %value.addr, align 8
  br label %do.body.46

do.body.46:                                       ; preds = %if.end.44
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val48, align 8
  %60 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val48, align 8
  %_value53 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %60, i32 0, i32 0
  store i8** %_value53, i8*** %volatile_data52, align 8
  store i32 0, i32* %order55, align 4
  %61 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val48, align 8
  %62 = bitcast %struct._Py_atomic_address* %61 to i8*
  %63 = load i32, i32* %order55, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %62, i32 %63)
  %64 = load i32, i32* %order55, align 4
  switch i32 %64, label %sw.default.57 [
    i32 2, label %sw.bb.56
    i32 3, label %sw.bb.56
    i32 4, label %sw.bb.56
  ]

sw.bb.56:                                         ; preds = %do.body.46, %do.body.46, %do.body.46
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.58

sw.default.57:                                    ; preds = %do.body.46
  br label %sw.epilog.58

sw.epilog.58:                                     ; preds = %sw.default.57, %sw.bb.56
  %65 = load i8**, i8*** %volatile_data52, align 8
  %66 = load volatile i8*, i8** %65, align 8
  store i8* %66, i8** %result50, align 8
  %67 = load i32, i32* %order55, align 4
  switch i32 %67, label %sw.default.60 [
    i32 1, label %sw.bb.59
    i32 3, label %sw.bb.59
    i32 4, label %sw.bb.59
  ]

sw.bb.59:                                         ; preds = %sw.epilog.58, %sw.epilog.58, %sw.epilog.58
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.61

sw.default.60:                                    ; preds = %sw.epilog.58
  br label %sw.epilog.61

sw.epilog.61:                                     ; preds = %sw.default.60, %sw.bb.59
  %68 = load i8*, i8** %result50, align 8
  store i8* %68, i8** %tmp62
  %69 = load i8*, i8** %tmp62
  %70 = bitcast i8* %69 to %struct._ts*
  %recursion_depth63 = getelementptr inbounds %struct._ts, %struct._ts* %70, i32 0, i32 4
  %71 = load i32, i32* %recursion_depth63, align 4
  %dec64 = add i32 %71, -1
  store i32 %dec64, i32* %recursion_depth63, align 4
  %72 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp65 = icmp sgt i32 %72, 100
  br i1 %cmp65, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.epilog.61
  %73 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %sub = sub i32 %73, 50
  br label %cond.end

cond.false:                                       ; preds = %sw.epilog.61
  %74 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %shr = ashr i32 %74, 2
  %mul = mul i32 3, %shr
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %sub, %cond.true ], [ %mul, %cond.false ]
  %cmp66 = icmp slt i32 %dec64, %cond
  br i1 %cmp66, label %if.then.67, label %if.end.84

if.then.67:                                       ; preds = %cond.end
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val69, align 8
  %75 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val69, align 8
  %_value74 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %75, i32 0, i32 0
  store i8** %_value74, i8*** %volatile_data73, align 8
  store i32 0, i32* %order76, align 4
  %76 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val69, align 8
  %77 = bitcast %struct._Py_atomic_address* %76 to i8*
  %78 = load i32, i32* %order76, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %77, i32 %78)
  %79 = load i32, i32* %order76, align 4
  switch i32 %79, label %sw.default.78 [
    i32 2, label %sw.bb.77
    i32 3, label %sw.bb.77
    i32 4, label %sw.bb.77
  ]

sw.bb.77:                                         ; preds = %if.then.67, %if.then.67, %if.then.67
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.79

sw.default.78:                                    ; preds = %if.then.67
  br label %sw.epilog.79

sw.epilog.79:                                     ; preds = %sw.default.78, %sw.bb.77
  %80 = load i8**, i8*** %volatile_data73, align 8
  %81 = load volatile i8*, i8** %80, align 8
  store i8* %81, i8** %result71, align 8
  %82 = load i32, i32* %order76, align 4
  switch i32 %82, label %sw.default.81 [
    i32 1, label %sw.bb.80
    i32 3, label %sw.bb.80
    i32 4, label %sw.bb.80
  ]

sw.bb.80:                                         ; preds = %sw.epilog.79, %sw.epilog.79, %sw.epilog.79
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.82

sw.default.81:                                    ; preds = %sw.epilog.79
  br label %sw.epilog.82

sw.epilog.82:                                     ; preds = %sw.default.81, %sw.bb.80
  %83 = load i8*, i8** %result71, align 8
  store i8* %83, i8** %tmp83
  %84 = load i8*, i8** %tmp83
  %85 = bitcast i8* %84 to %struct._ts*
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %85, i32 0, i32 5
  store i8 0, i8* %overflowed, align 1
  br label %if.end.84

if.end.84:                                        ; preds = %sw.epilog.82, %cond.end
  br label %do.end.85

do.end.85:                                        ; preds = %if.end.84
  br label %do.body.86

do.body.86:                                       ; preds = %do.end.85
  %86 = load %struct._object*, %struct._object** %as_parameter, align 8
  store %struct._object* %86, %struct._object** %_py_decref_tmp88, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  %ob_refcnt89 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 0
  %88 = load i64, i64* %ob_refcnt89, align 8
  %dec90 = add i64 %88, -1
  store i64 %dec90, i64* %ob_refcnt89, align 8
  %cmp91 = icmp ne i64 %dec90, 0
  br i1 %cmp91, label %if.then.92, label %if.else.93

if.then.92:                                       ; preds = %do.body.86
  br label %if.end.96

if.else.93:                                       ; preds = %do.body.86
  %89 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  %ob_type94 = getelementptr inbounds %struct._object, %struct._object* %89, i32 0, i32 1
  %90 = load %struct._typeobject*, %struct._typeobject** %ob_type94, align 8
  %tp_dealloc95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %90, i32 0, i32 4
  %91 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc95, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp88, align 8
  call void %91(%struct._object* %92)
  br label %if.end.96

if.end.96:                                        ; preds = %if.else.93, %if.then.92
  br label %do.end.97

do.end.97:                                        ; preds = %if.end.96
  %93 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %93, %struct._object** %retval
  br label %return

if.end.98:                                        ; preds = %do.end
  %94 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %94, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.98, %do.end.97, %do.end.43, %if.then.15, %if.then.8, %if.then.1, %if.then
  %95 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %95
}

declare void @PyErr_Clear() #1

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_ANNOTATE_MEMORY_ORDER(i8* %address, i32 %order) #5 {
entry:
  %address.addr = alloca i8*, align 8
  %order.addr = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %order, i32* %order.addr, align 4
  %0 = load i8*, i8** %address.addr, align 8
  %1 = load i32, i32* %order.addr, align 4
  switch i32 %1, label %sw.epilog [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 0, label %sw.bb.1
    i32 1, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %order.addr, align 4
  switch i32 %2, label %sw.epilog.4 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
    i32 0, label %sw.bb.3
    i32 2, label %sw.bb.3
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.bb.3:                                          ; preds = %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.epilog, %sw.bb.3, %sw.bb.2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_thread_fence(i32 %order) #5 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #4, !srcloc !2
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_signal_fence(i32 %order) #5 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #4, !srcloc !3
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i32 @_Py_CheckRecursiveCall(i8*) #1

declare i8* @PyUnicode_AsUTF8AndSize(%struct._object*, i64*) #1

; Function Attrs: nounwind readonly
declare i8* @strchr(i8*, i32) #2

; Function Attrs: uwtable
define internal %struct.tagPyCArgObject* @PyCSimpleType_paramfunc(%struct.tagCDataObject* %self) #0 {
entry:
  %retval = alloca %struct.tagPyCArgObject*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %fmt = alloca i8*, align 8
  %parg = alloca %struct.tagPyCArgObject*, align 8
  %fd = alloca %struct.fielddesc*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %1 = bitcast %struct.tagCDataObject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %2, i32 0, i32 5
  %3 = load %struct._object*, %struct._object** %proto, align 8
  %call1 = call i8* @PyUnicode_AsUTF8(%struct._object* %3)
  store i8* %call1, i8** %fmt, align 8
  %4 = load i8*, i8** %fmt, align 8
  %call2 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* %4)
  store %struct.fielddesc* %call2, %struct.fielddesc** %fd, align 8
  %call3 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call3, %struct.tagPyCArgObject** %parg, align 8
  %5 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp = icmp eq %struct.tagPyCArgObject* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tagPyCArgObject* null, %struct.tagPyCArgObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load i8*, i8** %fmt, align 8
  %arrayidx = getelementptr i8, i8* %6, i64 0
  %7 = load i8, i8* %arrayidx, align 1
  %8 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %8, i32 0, i32 2
  store i8 %7, i8* %tag, align 1
  %9 = load %struct.fielddesc*, %struct.fielddesc** %fd, align 8
  %pffi_type = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %9, i32 0, i32 3
  %10 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type, align 8
  %11 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type4 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %11, i32 0, i32 1
  store %struct._ffi_type* %10, %struct._ffi_type** %pffi_type4, align 8
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %13 = bitcast %struct.tagCDataObject* %12 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %14, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %15 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %16 = bitcast %struct.tagCDataObject* %15 to %struct._object*
  %17 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %17, i32 0, i32 4
  store %struct._object* %16, %struct._object** %obj, align 8
  %18 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %18, i32 0, i32 3
  %19 = bitcast %union.anon* %value to i8*
  %20 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %20, i32 0, i32 1
  %21 = load i8*, i8** %b_ptr, align 8
  %22 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %22, i32 0, i32 4
  %23 = load i64, i64* %b_size, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %19, i8* %21, i64 %23, i32 1, i1 false)
  %24 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  store %struct.tagPyCArgObject* %24, %struct.tagPyCArgObject** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %25 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %retval
  ret %struct.tagPyCArgObject* %25
}

declare %struct._object* @PyDescr_NewClassMethod(%struct._typeobject*, %struct.PyMethodDef*) #1

; Function Attrs: uwtable
define internal %struct._object* @CreateSwappedType(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds, %struct._object* %proto, %struct.fielddesc* %fmt) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %proto.addr = alloca %struct._object*, align 8
  %fmt.addr = alloca %struct.fielddesc*, align 8
  %result = alloca %struct._typeobject*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %name = alloca %struct._object*, align 8
  %newname = alloca %struct._object*, align 8
  %swapped_args = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp40 = alloca %struct._object*, align 8
  %_py_decref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp65 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* %proto, %struct._object** %proto.addr, align 8
  store %struct.fielddesc* %fmt, %struct.fielddesc** %fmt.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %1, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  %2 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %2, %struct._object** %name, align 8
  %3 = load %struct._object*, %struct._object** %args.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  %call = call %struct._object* @PyTuple_New(i64 %5)
  store %struct._object* %call, %struct._object** %swapped_args, align 8
  %6 = load %struct._object*, %struct._object** %swapped_args, align 8
  %tobool = icmp ne %struct._object* %6, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct._object*, %struct._object** @CreateSwappedType.suffix, align 8
  %cmp = icmp eq %struct._object* %7, null
  br i1 %cmp, label %if.then.1, label %if.end.3

if.then.1:                                        ; preds = %if.end
  %call2 = call %struct._object* @PyUnicode_InternFromString(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.104, i32 0, i32 0))
  store %struct._object* %call2, %struct._object** @CreateSwappedType.suffix, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.1, %if.end
  %8 = load %struct._object*, %struct._object** %name, align 8
  %9 = load %struct._object*, %struct._object** @CreateSwappedType.suffix, align 8
  %call4 = call %struct._object* @PyUnicode_Concat(%struct._object* %8, %struct._object* %9)
  store %struct._object* %call4, %struct._object** %newname, align 8
  %10 = load %struct._object*, %struct._object** %newname, align 8
  %cmp5 = icmp eq %struct._object* %10, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %if.end.3
  %11 = load %struct._object*, %struct._object** %newname, align 8
  %12 = load %struct._object*, %struct._object** %swapped_args, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyTupleObject*
  %ob_item8 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %13, i32 0, i32 1
  %arrayidx9 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item8, i32 0, i64 0
  store %struct._object* %11, %struct._object** %arrayidx9, align 8
  store i64 1, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %14 = load i64, i64* %i, align 8
  %15 = load %struct._object*, %struct._object** %args.addr, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyVarObject*
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %16, i32 0, i32 1
  %17 = load i64, i64* %ob_size10, align 8
  %cmp11 = icmp slt i64 %14, %17
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i64, i64* %i, align 8
  %19 = load %struct._object*, %struct._object** %args.addr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyTupleObject*
  %ob_item12 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %20, i32 0, i32 1
  %arrayidx13 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item12, i32 0, i64 %18
  %21 = load %struct._object*, %struct._object** %arrayidx13, align 8
  store %struct._object* %21, %struct._object** %v, align 8
  %22 = load %struct._object*, %struct._object** %v, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %23, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %24 = load %struct._object*, %struct._object** %v, align 8
  %25 = load i64, i64* %i, align 8
  %26 = load %struct._object*, %struct._object** %swapped_args, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyTupleObject*
  %ob_item14 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %27, i32 0, i32 1
  %arrayidx15 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item14, i32 0, i64 %25
  store %struct._object* %24, %struct._object** %arrayidx15, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %28 = load i64, i64* %i, align 8
  %inc16 = add i64 %28, 1
  store i64 %inc16, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %29 = load %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)** getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyType_Type, i32 0, i32 37), align 8
  %30 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %31 = load %struct._object*, %struct._object** %swapped_args, align 8
  %32 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call17 = call %struct._object* %29(%struct._typeobject* %30, %struct._object* %31, %struct._object* %32)
  %33 = bitcast %struct._object* %call17 to %struct._typeobject*
  store %struct._typeobject* %33, %struct._typeobject** %result, align 8
  br label %do.body

do.body:                                          ; preds = %for.end
  %34 = load %struct._object*, %struct._object** %swapped_args, align 8
  store %struct._object* %34, %struct._object** %_py_decref_tmp, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 0
  %36 = load i64, i64* %ob_refcnt18, align 8
  %dec = add i64 %36, -1
  store i64 %dec, i64* %ob_refcnt18, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body
  br label %if.end.21

if.else:                                          ; preds = %do.body
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %38, i32 0, i32 4
  %39 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %39(%struct._object* %40)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.20
  br label %do.end

do.end:                                           ; preds = %if.end.21
  %41 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %cmp22 = icmp eq %struct._typeobject* %41, null
  br i1 %cmp22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %do.end
  %call25 = call %struct._object* @PyObject_CallObject(%struct._object* getelementptr inbounds (%struct._typeobject, %struct._typeobject* @PyCStgDict_Type, i32 0, i32 0, i32 0), %struct._object* null)
  %42 = bitcast %struct._object* %call25 to %struct.StgDictObject*
  store %struct.StgDictObject* %42, %struct.StgDictObject** %stgdict, align 8
  %43 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %tobool26 = icmp ne %struct.StgDictObject* %43, null
  br i1 %tobool26, label %if.end.28, label %if.then.27

if.then.27:                                       ; preds = %if.end.24
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.24
  %44 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %ffi_type_pointer = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %44, i32 0, i32 4
  %45 = load %struct.fielddesc*, %struct.fielddesc** %fmt.addr, align 8
  %pffi_type = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %45, i32 0, i32 3
  %46 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type, align 8
  %47 = bitcast %struct._ffi_type* %ffi_type_pointer to i8*
  %48 = bitcast %struct._ffi_type* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %47, i8* %48, i64 24, i32 8, i1 false)
  %49 = load %struct.fielddesc*, %struct.fielddesc** %fmt.addr, align 8
  %pffi_type29 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %49, i32 0, i32 3
  %50 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type29, align 8
  %alignment = getelementptr inbounds %struct._ffi_type, %struct._ffi_type* %50, i32 0, i32 1
  %51 = load i16, i16* %alignment, align 2
  %conv = zext i16 %51 to i64
  %52 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %align = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %52, i32 0, i32 2
  store i64 %conv, i64* %align, align 8
  %53 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %53, i32 0, i32 3
  store i64 0, i64* %length, align 8
  %54 = load %struct.fielddesc*, %struct.fielddesc** %fmt.addr, align 8
  %pffi_type30 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %54, i32 0, i32 3
  %55 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type30, align 8
  %size = getelementptr inbounds %struct._ffi_type, %struct._ffi_type* %55, i32 0, i32 0
  %56 = load i64, i64* %size, align 8
  %57 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %size31 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %57, i32 0, i32 1
  store i64 %56, i64* %size31, align 8
  %58 = load %struct.fielddesc*, %struct.fielddesc** %fmt.addr, align 8
  %setfunc_swapped = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %58, i32 0, i32 4
  %59 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc_swapped, align 8
  %60 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %setfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %60, i32 0, i32 6
  store %struct._object* (i8*, %struct._object*, i64)* %59, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %61 = load %struct.fielddesc*, %struct.fielddesc** %fmt.addr, align 8
  %getfunc_swapped = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %61, i32 0, i32 5
  %62 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc_swapped, align 8
  %63 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %63, i32 0, i32 7
  store %struct._object* (i8*, i64)* %62, %struct._object* (i8*, i64)** %getfunc, align 8
  %64 = load %struct._object*, %struct._object** %proto.addr, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt32, align 8
  %inc33 = add i64 %65, 1
  store i64 %inc33, i64* %ob_refcnt32, align 8
  %66 = load %struct._object*, %struct._object** %proto.addr, align 8
  %67 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto34 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %67, i32 0, i32 5
  store %struct._object* %66, %struct._object** %proto34, align 8
  %68 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %69 = bitcast %struct.StgDictObject* %68 to %struct._object*
  %70 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 31
  %71 = load %struct._object*, %struct._object** %tp_dict, align 8
  %call35 = call i32 @PyDict_Update(%struct._object* %69, %struct._object* %71)
  %cmp36 = icmp eq i32 -1, %call35
  br i1 %cmp36, label %if.then.38, label %if.end.63

if.then.38:                                       ; preds = %if.end.28
  br label %do.body.39

do.body.39:                                       ; preds = %if.then.38
  %72 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %73 = bitcast %struct._typeobject* %72 to %struct._object*
  store %struct._object* %73, %struct._object** %_py_decref_tmp40, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0
  %75 = load i64, i64* %ob_refcnt41, align 8
  %dec42 = add i64 %75, -1
  store i64 %dec42, i64* %ob_refcnt41, align 8
  %cmp43 = icmp ne i64 %dec42, 0
  br i1 %cmp43, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.39
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.39
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  call void %78(%struct._object* %79)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %80 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %81 = bitcast %struct.StgDictObject* %80 to %struct._object*
  store %struct._object* %81, %struct._object** %_py_decref_tmp52, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_refcnt53 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 0
  %83 = load i64, i64* %ob_refcnt53, align 8
  %dec54 = add i64 %83, -1
  store i64 %dec54, i64* %ob_refcnt53, align 8
  %cmp55 = icmp ne i64 %dec54, 0
  br i1 %cmp55, label %if.then.57, label %if.else.58

if.then.57:                                       ; preds = %do.body.51
  br label %if.end.61

if.else.58:                                       ; preds = %do.body.51
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  %ob_type59 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type59, align 8
  %tp_dealloc60 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 4
  %86 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc60, align 8
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp52, align 8
  call void %86(%struct._object* %87)
  br label %if.end.61

if.end.61:                                        ; preds = %if.else.58, %if.then.57
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.63:                                        ; preds = %if.end.28
  br label %do.body.64

do.body.64:                                       ; preds = %if.end.63
  %88 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 31
  %89 = load %struct._object*, %struct._object** %tp_dict66, align 8
  store %struct._object* %89, %struct._object** %_py_decref_tmp65, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  %ob_refcnt67 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt67, align 8
  %dec68 = add i64 %91, -1
  store i64 %dec68, i64* %ob_refcnt67, align 8
  %cmp69 = icmp ne i64 %dec68, 0
  br i1 %cmp69, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.64
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.64
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  call void %94(%struct._object* %95)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  %96 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %97 = bitcast %struct.StgDictObject* %96 to %struct._object*
  %98 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %tp_dict77 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %98, i32 0, i32 31
  store %struct._object* %97, %struct._object** %tp_dict77, align 8
  %99 = load %struct._typeobject*, %struct._typeobject** %result, align 8
  %100 = bitcast %struct._typeobject* %99 to %struct._object*
  store %struct._object* %100, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.76, %do.end.62, %if.then.27, %if.then.23, %if.then.6, %if.then
  %101 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %101
}

; Function Attrs: uwtable
define internal %struct._object* @c_char_p_from_param(%struct._object* %type, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %as_parameter = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %parg = alloca %struct.tagPyCArgObject*, align 8
  %fd = alloca %struct.fielddesc*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %dt = alloca %struct.StgDictObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %a = alloca %struct.tagPyCArgObject*, align 8
  %dict58 = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 134217728
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.then.2, label %if.end.17

if.then.2:                                        ; preds = %if.end
  %call = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i32 0, i32 0))
  store %struct.fielddesc* %call, %struct.fielddesc** %fd, align 8
  %call3 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call3, %struct.tagPyCArgObject** %parg, align 8
  %5 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp4 = icmp eq %struct.tagPyCArgObject* %5, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  %6 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %6, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %7 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %7, i32 0, i32 2
  store i8 122, i8* %tag, align 1
  %8 = load %struct.fielddesc*, %struct.fielddesc** %fd, align 8
  %setfunc = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %8, i32 0, i32 1
  %9 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %10 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value7 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %10, i32 0, i32 3
  %11 = bitcast %union.anon* %value7 to i8*
  %12 = load %struct._object*, %struct._object** %value.addr, align 8
  %call8 = call %struct._object* %9(i8* %11, %struct._object* %12, i64 0)
  %13 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %13, i32 0, i32 4
  store %struct._object* %call8, %struct._object** %obj, align 8
  %14 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj9 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %14, i32 0, i32 4
  %15 = load %struct._object*, %struct._object** %obj9, align 8
  %cmp10 = icmp eq %struct._object* %15, null
  br i1 %cmp10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.end.6
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %16 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %17 = bitcast %struct.tagPyCArgObject* %16 to %struct._object*
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %19, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.6
  %24 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %25 = bitcast %struct.tagPyCArgObject* %24 to %struct._object*
  store %struct._object* %25, %struct._object** %retval
  br label %return

if.end.17:                                        ; preds = %if.end
  %26 = load %struct._object*, %struct._object** %value.addr, align 8
  %27 = load %struct._object*, %struct._object** %type.addr, align 8
  %call18 = call i32 @PyObject_IsInstance(%struct._object* %26, %struct._object* %27)
  store i32 %call18, i32* %res, align 4
  %28 = load i32, i32* %res, align 4
  %cmp19 = icmp eq i32 %28, -1
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.17
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.21:                                        ; preds = %if.end.17
  %29 = load i32, i32* %res, align 4
  %tobool = icmp ne i32 %29, 0
  br i1 %tobool, label %if.then.22, label %if.end.25

if.then.22:                                       ; preds = %if.end.21
  %30 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt23, align 8
  %inc24 = add i64 %31, 1
  store i64 %inc24, i64* %ob_refcnt23, align 8
  %32 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %32, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  %33 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type26 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type26, align 8
  %cmp27 = icmp eq %struct._typeobject* %34, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*)
  br i1 %cmp27, label %if.then.38, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.25
  %35 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %call29 = call i32 @PyType_IsSubtype(%struct._typeobject* %36, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*))
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then.38, label %lor.lhs.false.31

lor.lhs.false.31:                                 ; preds = %lor.lhs.false
  %37 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %37, i32 0, i32 1
  %38 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %cmp33 = icmp eq %struct._typeobject* %38, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*)
  br i1 %cmp33, label %if.then.38, label %lor.lhs.false.34

lor.lhs.false.34:                                 ; preds = %lor.lhs.false.31
  %39 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 1
  %40 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %call36 = call i32 @PyType_IsSubtype(%struct._typeobject* %40, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*))
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then.38, label %if.end.54

if.then.38:                                       ; preds = %lor.lhs.false.34, %lor.lhs.false.31, %lor.lhs.false, %if.end.25
  %41 = load %struct._object*, %struct._object** %value.addr, align 8
  %call39 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %41)
  store %struct.StgDictObject* %call39, %struct.StgDictObject** %dt, align 8
  %42 = load %struct.StgDictObject*, %struct.StgDictObject** %dt, align 8
  %tobool40 = icmp ne %struct.StgDictObject* %42, null
  br i1 %tobool40, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.38
  %43 = load %struct.StgDictObject*, %struct.StgDictObject** %dt, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %43, i32 0, i32 5
  %44 = load %struct._object*, %struct._object** %proto, align 8
  %tobool41 = icmp ne %struct._object* %44, null
  br i1 %tobool41, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %45 = load %struct.StgDictObject*, %struct.StgDictObject** %dt, align 8
  %proto42 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %45, i32 0, i32 5
  %46 = load %struct._object*, %struct._object** %proto42, align 8
  %call43 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %46)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.38
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.StgDictObject* [ %call43, %cond.true ], [ null, %cond.false ]
  store %struct.StgDictObject* %cond, %struct.StgDictObject** %dict, align 8
  %47 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool44 = icmp ne %struct.StgDictObject* %47, null
  br i1 %tobool44, label %land.lhs.true.45, label %if.end.53

land.lhs.true.45:                                 ; preds = %cond.end
  %48 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %setfunc46 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %48, i32 0, i32 6
  %49 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc46, align 8
  %call47 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i32 0, i32 0))
  %setfunc48 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call47, i32 0, i32 1
  %50 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc48, align 8
  %cmp49 = icmp eq %struct._object* (i8*, %struct._object*, i64)* %49, %50
  br i1 %cmp49, label %if.then.50, label %if.end.53

if.then.50:                                       ; preds = %land.lhs.true.45
  %51 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt51, align 8
  %inc52 = add i64 %52, 1
  store i64 %inc52, i64* %ob_refcnt51, align 8
  %53 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %53, %struct._object** %retval
  br label %return

if.end.53:                                        ; preds = %land.lhs.true.45, %cond.end
  br label %if.end.54

if.end.54:                                        ; preds = %if.end.53, %lor.lhs.false.34
  %54 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type55 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type55, align 8
  %cmp56 = icmp eq %struct._typeobject* %55, @PyCArg_Type
  br i1 %cmp56, label %if.then.57, label %if.end.71

if.then.57:                                       ; preds = %if.end.54
  %56 = load %struct._object*, %struct._object** %value.addr, align 8
  %57 = bitcast %struct._object* %56 to %struct.tagPyCArgObject*
  store %struct.tagPyCArgObject* %57, %struct.tagPyCArgObject** %a, align 8
  %58 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %a, align 8
  %obj59 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %58, i32 0, i32 4
  %59 = load %struct._object*, %struct._object** %obj59, align 8
  %call60 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %59)
  store %struct.StgDictObject* %call60, %struct.StgDictObject** %dict58, align 8
  %60 = load %struct.StgDictObject*, %struct.StgDictObject** %dict58, align 8
  %tobool61 = icmp ne %struct.StgDictObject* %60, null
  br i1 %tobool61, label %land.lhs.true.62, label %if.end.70

land.lhs.true.62:                                 ; preds = %if.then.57
  %61 = load %struct.StgDictObject*, %struct.StgDictObject** %dict58, align 8
  %setfunc63 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %61, i32 0, i32 6
  %62 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc63, align 8
  %call64 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i32 0, i32 0))
  %setfunc65 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call64, i32 0, i32 1
  %63 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc65, align 8
  %cmp66 = icmp eq %struct._object* (i8*, %struct._object*, i64)* %62, %63
  br i1 %cmp66, label %if.then.67, label %if.end.70

if.then.67:                                       ; preds = %land.lhs.true.62
  %64 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 0
  %65 = load i64, i64* %ob_refcnt68, align 8
  %inc69 = add i64 %65, 1
  store i64 %inc69, i64* %ob_refcnt68, align 8
  %66 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %66, %struct._object** %retval
  br label %return

if.end.70:                                        ; preds = %land.lhs.true.62, %if.then.57
  br label %if.end.71

if.end.71:                                        ; preds = %if.end.70, %if.end.54
  %67 = load %struct._object*, %struct._object** %value.addr, align 8
  %call72 = call %struct._object* @PyObject_GetAttrString(%struct._object* %67, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i32 0, i32 0))
  store %struct._object* %call72, %struct._object** %as_parameter, align 8
  %68 = load %struct._object*, %struct._object** %as_parameter, align 8
  %tobool73 = icmp ne %struct._object* %68, null
  br i1 %tobool73, label %if.then.74, label %if.end.87

if.then.74:                                       ; preds = %if.end.71
  %69 = load %struct._object*, %struct._object** %type.addr, align 8
  %70 = load %struct._object*, %struct._object** %as_parameter, align 8
  %call75 = call %struct._object* @c_char_p_from_param(%struct._object* %69, %struct._object* %70)
  store %struct._object* %call75, %struct._object** %value.addr, align 8
  br label %do.body.76

do.body.76:                                       ; preds = %if.then.74
  %71 = load %struct._object*, %struct._object** %as_parameter, align 8
  store %struct._object* %71, %struct._object** %_py_decref_tmp77, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0
  %73 = load i64, i64* %ob_refcnt78, align 8
  %dec79 = add i64 %73, -1
  store i64 %dec79, i64* %ob_refcnt78, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.76
  br label %if.end.85

if.else.82:                                       ; preds = %do.body.76
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %76(%struct._object* %77)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  %78 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %78, %struct._object** %retval
  br label %return

if.end.87:                                        ; preds = %if.end.71
  %79 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %79, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.87, %do.end.86, %if.then.67, %if.then.50, %if.then.22, %if.then.20, %if.end.16, %do.end, %if.then.5, %if.then
  %80 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %80
}

; Function Attrs: uwtable
define internal %struct._object* @c_wchar_p_from_param(%struct._object* %type, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %as_parameter = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %parg = alloca %struct.tagPyCArgObject*, align 8
  %fd = alloca %struct.fielddesc*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %dt = alloca %struct.StgDictObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %a = alloca %struct.tagPyCArgObject*, align 8
  %dict63 = alloca %struct.StgDictObject*, align 8
  %_py_decref_tmp82 = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.then.6, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %5 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_flags3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 19
  %7 = load i64, i64* %tp_flags3, align 8
  %and4 = and i64 %7, 134217728
  %cmp5 = icmp ne i64 %and4, 0
  br i1 %cmp5, label %if.then.6, label %if.end.21

if.then.6:                                        ; preds = %lor.lhs.false, %if.end
  %call = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0))
  store %struct.fielddesc* %call, %struct.fielddesc** %fd, align 8
  %call7 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call7, %struct.tagPyCArgObject** %parg, align 8
  %8 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp8 = icmp eq %struct.tagPyCArgObject* %8, null
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.then.6
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %if.then.6
  %9 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %9, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %10 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %10, i32 0, i32 2
  store i8 90, i8* %tag, align 1
  %11 = load %struct.fielddesc*, %struct.fielddesc** %fd, align 8
  %setfunc = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %11, i32 0, i32 1
  %12 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %13 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value11 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %13, i32 0, i32 3
  %14 = bitcast %union.anon* %value11 to i8*
  %15 = load %struct._object*, %struct._object** %value.addr, align 8
  %call12 = call %struct._object* %12(i8* %14, %struct._object* %15, i64 0)
  %16 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %16, i32 0, i32 4
  store %struct._object* %call12, %struct._object** %obj, align 8
  %17 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj13 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %17, i32 0, i32 4
  %18 = load %struct._object*, %struct._object** %obj13, align 8
  %cmp14 = icmp eq %struct._object* %18, null
  br i1 %cmp14, label %if.then.15, label %if.end.20

if.then.15:                                       ; preds = %if.end.10
  br label %do.body

do.body:                                          ; preds = %if.then.15
  %19 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %20 = bitcast %struct.tagPyCArgObject* %19 to %struct._object*
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %do.body
  br label %if.end.19

if.else:                                          ; preds = %do.body
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.17
  br label %do.end

do.end:                                           ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.end.10
  %27 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %28 = bitcast %struct.tagPyCArgObject* %27 to %struct._object*
  store %struct._object* %28, %struct._object** %retval
  br label %return

if.end.21:                                        ; preds = %lor.lhs.false
  %29 = load %struct._object*, %struct._object** %value.addr, align 8
  %30 = load %struct._object*, %struct._object** %type.addr, align 8
  %call22 = call i32 @PyObject_IsInstance(%struct._object* %29, %struct._object* %30)
  store i32 %call22, i32* %res, align 4
  %31 = load i32, i32* %res, align 4
  %cmp23 = icmp eq i32 %31, -1
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.21
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  %32 = load i32, i32* %res, align 4
  %tobool = icmp ne i32 %32, 0
  br i1 %tobool, label %if.then.26, label %if.end.29

if.then.26:                                       ; preds = %if.end.25
  %33 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt27, align 8
  %inc28 = add i64 %34, 1
  store i64 %inc28, i64* %ob_refcnt27, align 8
  %35 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %35, %struct._object** %retval
  br label %return

if.end.29:                                        ; preds = %if.end.25
  %36 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %cmp31 = icmp eq %struct._typeobject* %37, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*)
  br i1 %cmp31, label %if.then.43, label %lor.lhs.false.32

lor.lhs.false.32:                                 ; preds = %if.end.29
  %38 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type33 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type33, align 8
  %call34 = call i32 @PyType_IsSubtype(%struct._typeobject* %39, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*))
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then.43, label %lor.lhs.false.36

lor.lhs.false.36:                                 ; preds = %lor.lhs.false.32
  %40 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %cmp38 = icmp eq %struct._typeobject* %41, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*)
  br i1 %cmp38, label %if.then.43, label %lor.lhs.false.39

lor.lhs.false.39:                                 ; preds = %lor.lhs.false.36
  %42 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %call41 = call i32 @PyType_IsSubtype(%struct._typeobject* %43, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*))
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.59

if.then.43:                                       ; preds = %lor.lhs.false.39, %lor.lhs.false.36, %lor.lhs.false.32, %if.end.29
  %44 = load %struct._object*, %struct._object** %value.addr, align 8
  %call44 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %44)
  store %struct.StgDictObject* %call44, %struct.StgDictObject** %dt, align 8
  %45 = load %struct.StgDictObject*, %struct.StgDictObject** %dt, align 8
  %tobool45 = icmp ne %struct.StgDictObject* %45, null
  br i1 %tobool45, label %land.lhs.true, label %cond.false

land.lhs.true:                                    ; preds = %if.then.43
  %46 = load %struct.StgDictObject*, %struct.StgDictObject** %dt, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %46, i32 0, i32 5
  %47 = load %struct._object*, %struct._object** %proto, align 8
  %tobool46 = icmp ne %struct._object* %47, null
  br i1 %tobool46, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true
  %48 = load %struct.StgDictObject*, %struct.StgDictObject** %dt, align 8
  %proto47 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %48, i32 0, i32 5
  %49 = load %struct._object*, %struct._object** %proto47, align 8
  %call48 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %49)
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true, %if.then.43
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.StgDictObject* [ %call48, %cond.true ], [ null, %cond.false ]
  store %struct.StgDictObject* %cond, %struct.StgDictObject** %dict, align 8
  %50 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool49 = icmp ne %struct.StgDictObject* %50, null
  br i1 %tobool49, label %land.lhs.true.50, label %if.end.58

land.lhs.true.50:                                 ; preds = %cond.end
  %51 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %setfunc51 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %51, i32 0, i32 6
  %52 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc51, align 8
  %call52 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  %setfunc53 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call52, i32 0, i32 1
  %53 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc53, align 8
  %cmp54 = icmp eq %struct._object* (i8*, %struct._object*, i64)* %52, %53
  br i1 %cmp54, label %if.then.55, label %if.end.58

if.then.55:                                       ; preds = %land.lhs.true.50
  %54 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt56 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 0
  %55 = load i64, i64* %ob_refcnt56, align 8
  %inc57 = add i64 %55, 1
  store i64 %inc57, i64* %ob_refcnt56, align 8
  %56 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %56, %struct._object** %retval
  br label %return

if.end.58:                                        ; preds = %land.lhs.true.50, %cond.end
  br label %if.end.59

if.end.59:                                        ; preds = %if.end.58, %lor.lhs.false.39
  %57 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8
  %cmp61 = icmp eq %struct._typeobject* %58, @PyCArg_Type
  br i1 %cmp61, label %if.then.62, label %if.end.76

if.then.62:                                       ; preds = %if.end.59
  %59 = load %struct._object*, %struct._object** %value.addr, align 8
  %60 = bitcast %struct._object* %59 to %struct.tagPyCArgObject*
  store %struct.tagPyCArgObject* %60, %struct.tagPyCArgObject** %a, align 8
  %61 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %a, align 8
  %obj64 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %61, i32 0, i32 4
  %62 = load %struct._object*, %struct._object** %obj64, align 8
  %call65 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %62)
  store %struct.StgDictObject* %call65, %struct.StgDictObject** %dict63, align 8
  %63 = load %struct.StgDictObject*, %struct.StgDictObject** %dict63, align 8
  %tobool66 = icmp ne %struct.StgDictObject* %63, null
  br i1 %tobool66, label %land.lhs.true.67, label %if.end.75

land.lhs.true.67:                                 ; preds = %if.then.62
  %64 = load %struct.StgDictObject*, %struct.StgDictObject** %dict63, align 8
  %setfunc68 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %64, i32 0, i32 6
  %65 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc68, align 8
  %call69 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  %setfunc70 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call69, i32 0, i32 1
  %66 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc70, align 8
  %cmp71 = icmp eq %struct._object* (i8*, %struct._object*, i64)* %65, %66
  br i1 %cmp71, label %if.then.72, label %if.end.75

if.then.72:                                       ; preds = %land.lhs.true.67
  %67 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt73 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt73, align 8
  %inc74 = add i64 %68, 1
  store i64 %inc74, i64* %ob_refcnt73, align 8
  %69 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %69, %struct._object** %retval
  br label %return

if.end.75:                                        ; preds = %land.lhs.true.67, %if.then.62
  br label %if.end.76

if.end.76:                                        ; preds = %if.end.75, %if.end.59
  %70 = load %struct._object*, %struct._object** %value.addr, align 8
  %call77 = call %struct._object* @PyObject_GetAttrString(%struct._object* %70, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i32 0, i32 0))
  store %struct._object* %call77, %struct._object** %as_parameter, align 8
  %71 = load %struct._object*, %struct._object** %as_parameter, align 8
  %tobool78 = icmp ne %struct._object* %71, null
  br i1 %tobool78, label %if.then.79, label %if.end.92

if.then.79:                                       ; preds = %if.end.76
  %72 = load %struct._object*, %struct._object** %type.addr, align 8
  %73 = load %struct._object*, %struct._object** %as_parameter, align 8
  %call80 = call %struct._object* @c_wchar_p_from_param(%struct._object* %72, %struct._object* %73)
  store %struct._object* %call80, %struct._object** %value.addr, align 8
  br label %do.body.81

do.body.81:                                       ; preds = %if.then.79
  %74 = load %struct._object*, %struct._object** %as_parameter, align 8
  store %struct._object* %74, %struct._object** %_py_decref_tmp82, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_refcnt83 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt83, align 8
  %dec84 = add i64 %76, -1
  store i64 %dec84, i64* %ob_refcnt83, align 8
  %cmp85 = icmp ne i64 %dec84, 0
  br i1 %cmp85, label %if.then.86, label %if.else.87

if.then.86:                                       ; preds = %do.body.81
  br label %if.end.90

if.else.87:                                       ; preds = %do.body.81
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8
  %tp_dealloc89 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 4
  %79 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc89, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp82, align 8
  call void %79(%struct._object* %80)
  br label %if.end.90

if.end.90:                                        ; preds = %if.else.87, %if.then.86
  br label %do.end.91

do.end.91:                                        ; preds = %if.end.90
  %81 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %81, %struct._object** %retval
  br label %return

if.end.92:                                        ; preds = %if.end.76
  %82 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %82, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.92, %do.end.91, %if.then.72, %if.then.55, %if.then.26, %if.then.24, %if.end.20, %do.end, %if.then.9, %if.then
  %83 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %83
}

; Function Attrs: uwtable
define internal %struct._object* @c_void_p_from_param(%struct._object* %type, %struct._object* %value) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %stgd = alloca %struct.StgDictObject*, align 8
  %as_parameter = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %parg = alloca %struct.tagPyCArgObject*, align 8
  %fd = alloca %struct.fielddesc*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %parg23 = alloca %struct.tagPyCArgObject*, align 8
  %fd24 = alloca %struct.fielddesc*, align 8
  %_py_decref_tmp40 = alloca %struct._object*, align 8
  %parg57 = alloca %struct.tagPyCArgObject*, align 8
  %fd58 = alloca %struct.fielddesc*, align 8
  %_py_decref_tmp74 = alloca %struct._object*, align 8
  %parg91 = alloca %struct.tagPyCArgObject*, align 8
  %fd92 = alloca %struct.fielddesc*, align 8
  %_py_decref_tmp108 = alloca %struct._object*, align 8
  %a = alloca %struct.tagPyCArgObject*, align 8
  %parg165 = alloca %struct.tagPyCArgObject*, align 8
  %func = alloca %struct.PyCFuncPtrObject*, align 8
  %parg197 = alloca %struct.tagPyCArgObject*, align 8
  %_py_decref_tmp220 = alloca %struct._object*, align 8
  store %struct._object* %type, %struct._object** %type.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, @_Py_NoneStruct
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 16777216
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %if.then.2, label %if.end.17

if.then.2:                                        ; preds = %if.end
  %call = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.76, i32 0, i32 0))
  store %struct.fielddesc* %call, %struct.fielddesc** %fd, align 8
  %call3 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call3, %struct.tagPyCArgObject** %parg, align 8
  %5 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp4 = icmp eq %struct.tagPyCArgObject* %5, null
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %if.then.2
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.then.2
  %6 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %6, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %7 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %7, i32 0, i32 2
  store i8 80, i8* %tag, align 1
  %8 = load %struct.fielddesc*, %struct.fielddesc** %fd, align 8
  %setfunc = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %8, i32 0, i32 1
  %9 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %10 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value7 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %10, i32 0, i32 3
  %11 = bitcast %union.anon* %value7 to i8*
  %12 = load %struct._object*, %struct._object** %value.addr, align 8
  %call8 = call %struct._object* %9(i8* %11, %struct._object* %12, i64 0)
  %13 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %13, i32 0, i32 4
  store %struct._object* %call8, %struct._object** %obj, align 8
  %14 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj9 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %14, i32 0, i32 4
  %15 = load %struct._object*, %struct._object** %obj9, align 8
  %cmp10 = icmp eq %struct._object* %15, null
  br i1 %cmp10, label %if.then.11, label %if.end.16

if.then.11:                                       ; preds = %if.end.6
  br label %do.body

do.body:                                          ; preds = %if.then.11
  %16 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %17 = bitcast %struct.tagPyCArgObject* %16 to %struct._object*
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %19, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.15

if.else:                                          ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type14 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type14, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.15

if.end.15:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.15
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.16:                                        ; preds = %if.end.6
  %24 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %25 = bitcast %struct.tagPyCArgObject* %24 to %struct._object*
  store %struct._object* %25, %struct._object** %retval
  br label %return

if.end.17:                                        ; preds = %if.end
  %26 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_flags19 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 19
  %28 = load i64, i64* %tp_flags19, align 8
  %and20 = and i64 %28, 134217728
  %cmp21 = icmp ne i64 %and20, 0
  br i1 %cmp21, label %if.then.22, label %if.end.51

if.then.22:                                       ; preds = %if.end.17
  %call25 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i32 0, i32 0))
  store %struct.fielddesc* %call25, %struct.fielddesc** %fd24, align 8
  %call26 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call26, %struct.tagPyCArgObject** %parg23, align 8
  %29 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %cmp27 = icmp eq %struct.tagPyCArgObject* %29, null
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %if.then.22
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.29:                                        ; preds = %if.then.22
  %30 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %pffi_type30 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %30, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type30, align 8
  %31 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %tag31 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %31, i32 0, i32 2
  store i8 122, i8* %tag31, align 1
  %32 = load %struct.fielddesc*, %struct.fielddesc** %fd24, align 8
  %setfunc32 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %32, i32 0, i32 1
  %33 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc32, align 8
  %34 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %value33 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %34, i32 0, i32 3
  %35 = bitcast %union.anon* %value33 to i8*
  %36 = load %struct._object*, %struct._object** %value.addr, align 8
  %call34 = call %struct._object* %33(i8* %35, %struct._object* %36, i64 0)
  %37 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %obj35 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %37, i32 0, i32 4
  store %struct._object* %call34, %struct._object** %obj35, align 8
  %38 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %obj36 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %38, i32 0, i32 4
  %39 = load %struct._object*, %struct._object** %obj36, align 8
  %cmp37 = icmp eq %struct._object* %39, null
  br i1 %cmp37, label %if.then.38, label %if.end.50

if.then.38:                                       ; preds = %if.end.29
  br label %do.body.39

do.body.39:                                       ; preds = %if.then.38
  %40 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %41 = bitcast %struct.tagPyCArgObject* %40 to %struct._object*
  store %struct._object* %41, %struct._object** %_py_decref_tmp40, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt41, align 8
  %dec42 = add i64 %43, -1
  store i64 %dec42, i64* %ob_refcnt41, align 8
  %cmp43 = icmp ne i64 %dec42, 0
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %do.body.39
  br label %if.end.48

if.else.45:                                       ; preds = %do.body.39
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_dealloc47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc47, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp40, align 8
  call void %46(%struct._object* %47)
  br label %if.end.48

if.end.48:                                        ; preds = %if.else.45, %if.then.44
  br label %do.end.49

do.end.49:                                        ; preds = %if.end.48
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.50:                                        ; preds = %if.end.29
  %48 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg23, align 8
  %49 = bitcast %struct.tagPyCArgObject* %48 to %struct._object*
  store %struct._object* %49, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %if.end.17
  %50 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type52 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type52, align 8
  %cmp53 = icmp eq %struct._typeobject* %51, @PyByteArray_Type
  br i1 %cmp53, label %if.then.56, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end.51
  %52 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type54 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type54, align 8
  %call55 = call i32 @PyType_IsSubtype(%struct._typeobject* %53, %struct._typeobject* @PyByteArray_Type)
  %tobool = icmp ne i32 %call55, 0
  br i1 %tobool, label %if.then.56, label %if.end.85

if.then.56:                                       ; preds = %lor.lhs.false, %if.end.51
  %call59 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.102, i32 0, i32 0))
  store %struct.fielddesc* %call59, %struct.fielddesc** %fd58, align 8
  %call60 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call60, %struct.tagPyCArgObject** %parg57, align 8
  %54 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %cmp61 = icmp eq %struct.tagPyCArgObject* %54, null
  br i1 %cmp61, label %if.then.62, label %if.end.63

if.then.62:                                       ; preds = %if.then.56
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.63:                                        ; preds = %if.then.56
  %55 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %pffi_type64 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %55, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type64, align 8
  %56 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %tag65 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %56, i32 0, i32 2
  store i8 122, i8* %tag65, align 1
  %57 = load %struct.fielddesc*, %struct.fielddesc** %fd58, align 8
  %setfunc66 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %57, i32 0, i32 1
  %58 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc66, align 8
  %59 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %value67 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %59, i32 0, i32 3
  %60 = bitcast %union.anon* %value67 to i8*
  %61 = load %struct._object*, %struct._object** %value.addr, align 8
  %call68 = call %struct._object* %58(i8* %60, %struct._object* %61, i64 0)
  %62 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %obj69 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %62, i32 0, i32 4
  store %struct._object* %call68, %struct._object** %obj69, align 8
  %63 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %obj70 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %63, i32 0, i32 4
  %64 = load %struct._object*, %struct._object** %obj70, align 8
  %cmp71 = icmp eq %struct._object* %64, null
  br i1 %cmp71, label %if.then.72, label %if.end.84

if.then.72:                                       ; preds = %if.end.63
  br label %do.body.73

do.body.73:                                       ; preds = %if.then.72
  %65 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %66 = bitcast %struct.tagPyCArgObject* %65 to %struct._object*
  store %struct._object* %66, %struct._object** %_py_decref_tmp74, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp74, align 8
  %ob_refcnt75 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt75, align 8
  %dec76 = add i64 %68, -1
  store i64 %dec76, i64* %ob_refcnt75, align 8
  %cmp77 = icmp ne i64 %dec76, 0
  br i1 %cmp77, label %if.then.78, label %if.else.79

if.then.78:                                       ; preds = %do.body.73
  br label %if.end.82

if.else.79:                                       ; preds = %do.body.73
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp74, align 8
  %ob_type80 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type80, align 8
  %tp_dealloc81 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc81, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp74, align 8
  call void %71(%struct._object* %72)
  br label %if.end.82

if.end.82:                                        ; preds = %if.else.79, %if.then.78
  br label %do.end.83

do.end.83:                                        ; preds = %if.end.82
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.84:                                        ; preds = %if.end.63
  %73 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg57, align 8
  %74 = bitcast %struct.tagPyCArgObject* %73 to %struct._object*
  store %struct._object* %74, %struct._object** %retval
  br label %return

if.end.85:                                        ; preds = %lor.lhs.false
  %75 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type86 = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 1
  %76 = load %struct._typeobject*, %struct._typeobject** %ob_type86, align 8
  %tp_flags87 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %76, i32 0, i32 19
  %77 = load i64, i64* %tp_flags87, align 8
  %and88 = and i64 %77, 268435456
  %cmp89 = icmp ne i64 %and88, 0
  br i1 %cmp89, label %if.then.90, label %if.end.119

if.then.90:                                       ; preds = %if.end.85
  %call93 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i32 0, i32 0))
  store %struct.fielddesc* %call93, %struct.fielddesc** %fd92, align 8
  %call94 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call94, %struct.tagPyCArgObject** %parg91, align 8
  %78 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %cmp95 = icmp eq %struct.tagPyCArgObject* %78, null
  br i1 %cmp95, label %if.then.96, label %if.end.97

if.then.96:                                       ; preds = %if.then.90
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.97:                                        ; preds = %if.then.90
  %79 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %pffi_type98 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %79, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type98, align 8
  %80 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %tag99 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %80, i32 0, i32 2
  store i8 90, i8* %tag99, align 1
  %81 = load %struct.fielddesc*, %struct.fielddesc** %fd92, align 8
  %setfunc100 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %81, i32 0, i32 1
  %82 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc100, align 8
  %83 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %value101 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %83, i32 0, i32 3
  %84 = bitcast %union.anon* %value101 to i8*
  %85 = load %struct._object*, %struct._object** %value.addr, align 8
  %call102 = call %struct._object* %82(i8* %84, %struct._object* %85, i64 0)
  %86 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %obj103 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %86, i32 0, i32 4
  store %struct._object* %call102, %struct._object** %obj103, align 8
  %87 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %obj104 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %87, i32 0, i32 4
  %88 = load %struct._object*, %struct._object** %obj104, align 8
  %cmp105 = icmp eq %struct._object* %88, null
  br i1 %cmp105, label %if.then.106, label %if.end.118

if.then.106:                                      ; preds = %if.end.97
  br label %do.body.107

do.body.107:                                      ; preds = %if.then.106
  %89 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %90 = bitcast %struct.tagPyCArgObject* %89 to %struct._object*
  store %struct._object* %90, %struct._object** %_py_decref_tmp108, align 8
  %91 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8
  %ob_refcnt109 = getelementptr inbounds %struct._object, %struct._object* %91, i32 0, i32 0
  %92 = load i64, i64* %ob_refcnt109, align 8
  %dec110 = add i64 %92, -1
  store i64 %dec110, i64* %ob_refcnt109, align 8
  %cmp111 = icmp ne i64 %dec110, 0
  br i1 %cmp111, label %if.then.112, label %if.else.113

if.then.112:                                      ; preds = %do.body.107
  br label %if.end.116

if.else.113:                                      ; preds = %do.body.107
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8
  %ob_type114 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 1
  %94 = load %struct._typeobject*, %struct._typeobject** %ob_type114, align 8
  %tp_dealloc115 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %94, i32 0, i32 4
  %95 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc115, align 8
  %96 = load %struct._object*, %struct._object** %_py_decref_tmp108, align 8
  call void %95(%struct._object* %96)
  br label %if.end.116

if.end.116:                                       ; preds = %if.else.113, %if.then.112
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.118:                                       ; preds = %if.end.97
  %97 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg91, align 8
  %98 = bitcast %struct.tagPyCArgObject* %97 to %struct._object*
  store %struct._object* %98, %struct._object** %retval
  br label %return

if.end.119:                                       ; preds = %if.end.85
  %99 = load %struct._object*, %struct._object** %value.addr, align 8
  %100 = load %struct._object*, %struct._object** %type.addr, align 8
  %call120 = call i32 @PyObject_IsInstance(%struct._object* %99, %struct._object* %100)
  store i32 %call120, i32* %res, align 4
  %101 = load i32, i32* %res, align 4
  %cmp121 = icmp eq i32 %101, -1
  br i1 %cmp121, label %if.then.122, label %if.end.123

if.then.122:                                      ; preds = %if.end.119
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.123:                                       ; preds = %if.end.119
  %102 = load i32, i32* %res, align 4
  %tobool124 = icmp ne i32 %102, 0
  br i1 %tobool124, label %if.then.125, label %if.end.128

if.then.125:                                      ; preds = %if.end.123
  %103 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt126 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 0
  %104 = load i64, i64* %ob_refcnt126, align 8
  %inc127 = add i64 %104, 1
  store i64 %inc127, i64* %ob_refcnt126, align 8
  %105 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %105, %struct._object** %retval
  br label %return

if.end.128:                                       ; preds = %if.end.123
  %106 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type129 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type129, align 8
  %cmp130 = icmp eq %struct._typeobject* %107, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*)
  br i1 %cmp130, label %if.then.142, label %lor.lhs.false.131

lor.lhs.false.131:                                ; preds = %if.end.128
  %108 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type132 = getelementptr inbounds %struct._object, %struct._object* %108, i32 0, i32 1
  %109 = load %struct._typeobject*, %struct._typeobject** %ob_type132, align 8
  %call133 = call i32 @PyType_IsSubtype(%struct._typeobject* %109, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArray_Type to %struct._typeobject*))
  %tobool134 = icmp ne i32 %call133, 0
  br i1 %tobool134, label %if.then.142, label %lor.lhs.false.135

lor.lhs.false.135:                                ; preds = %lor.lhs.false.131
  %110 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type136 = getelementptr inbounds %struct._object, %struct._object* %110, i32 0, i32 1
  %111 = load %struct._typeobject*, %struct._typeobject** %ob_type136, align 8
  %cmp137 = icmp eq %struct._typeobject* %111, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*)
  br i1 %cmp137, label %if.then.142, label %lor.lhs.false.138

lor.lhs.false.138:                                ; preds = %lor.lhs.false.135
  %112 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type139 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 1
  %113 = load %struct._typeobject*, %struct._typeobject** %ob_type139, align 8
  %call140 = call i32 @PyType_IsSubtype(%struct._typeobject* %113, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointer_Type to %struct._typeobject*))
  %tobool141 = icmp ne i32 %call140, 0
  br i1 %tobool141, label %if.then.142, label %if.end.145

if.then.142:                                      ; preds = %lor.lhs.false.138, %lor.lhs.false.135, %lor.lhs.false.131, %if.end.128
  %114 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt143 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 0
  %115 = load i64, i64* %ob_refcnt143, align 8
  %inc144 = add i64 %115, 1
  store i64 %inc144, i64* %ob_refcnt143, align 8
  %116 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %116, %struct._object** %retval
  br label %return

if.end.145:                                       ; preds = %lor.lhs.false.138
  %117 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type146 = getelementptr inbounds %struct._object, %struct._object* %117, i32 0, i32 1
  %118 = load %struct._typeobject*, %struct._typeobject** %ob_type146, align 8
  %cmp147 = icmp eq %struct._typeobject* %118, @PyCArg_Type
  br i1 %cmp147, label %if.then.148, label %if.end.156

if.then.148:                                      ; preds = %if.end.145
  %119 = load %struct._object*, %struct._object** %value.addr, align 8
  %120 = bitcast %struct._object* %119 to %struct.tagPyCArgObject*
  store %struct.tagPyCArgObject* %120, %struct.tagPyCArgObject** %a, align 8
  %121 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %a, align 8
  %tag149 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %121, i32 0, i32 2
  %122 = load i8, i8* %tag149, align 1
  %conv = sext i8 %122 to i32
  %cmp150 = icmp eq i32 %conv, 80
  br i1 %cmp150, label %if.then.152, label %if.end.155

if.then.152:                                      ; preds = %if.then.148
  %123 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt153 = getelementptr inbounds %struct._object, %struct._object* %123, i32 0, i32 0
  %124 = load i64, i64* %ob_refcnt153, align 8
  %inc154 = add i64 %124, 1
  store i64 %inc154, i64* %ob_refcnt153, align 8
  %125 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %125, %struct._object** %retval
  br label %return

if.end.155:                                       ; preds = %if.then.148
  br label %if.end.156

if.end.156:                                       ; preds = %if.end.155, %if.end.145
  %126 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type157 = getelementptr inbounds %struct._object, %struct._object* %126, i32 0, i32 1
  %127 = load %struct._typeobject*, %struct._typeobject** %ob_type157, align 8
  %cmp158 = icmp eq %struct._typeobject* %127, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type to %struct._typeobject*)
  br i1 %cmp158, label %if.then.164, label %lor.lhs.false.160

lor.lhs.false.160:                                ; preds = %if.end.156
  %128 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type161 = getelementptr inbounds %struct._object, %struct._object* %128, i32 0, i32 1
  %129 = load %struct._typeobject*, %struct._typeobject** %ob_type161, align 8
  %call162 = call i32 @PyType_IsSubtype(%struct._typeobject* %129, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtr_Type to %struct._typeobject*))
  %tobool163 = icmp ne i32 %call162, 0
  br i1 %tobool163, label %if.then.164, label %if.end.177

if.then.164:                                      ; preds = %lor.lhs.false.160, %if.end.156
  %130 = load %struct._object*, %struct._object** %value.addr, align 8
  %131 = bitcast %struct._object* %130 to %struct.PyCFuncPtrObject*
  store %struct.PyCFuncPtrObject* %131, %struct.PyCFuncPtrObject** %func, align 8
  %call166 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call166, %struct.tagPyCArgObject** %parg165, align 8
  %132 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg165, align 8
  %cmp167 = icmp eq %struct.tagPyCArgObject* %132, null
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %if.then.164
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.170:                                       ; preds = %if.then.164
  %133 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg165, align 8
  %pffi_type171 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %133, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type171, align 8
  %134 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg165, align 8
  %tag172 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %134, i32 0, i32 2
  store i8 80, i8* %tag172, align 1
  %135 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt173 = getelementptr inbounds %struct._object, %struct._object* %135, i32 0, i32 0
  %136 = load i64, i64* %ob_refcnt173, align 8
  %inc174 = add i64 %136, 1
  store i64 %inc174, i64* %ob_refcnt173, align 8
  %137 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %func, align 8
  %b_ptr = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %137, i32 0, i32 1
  %138 = load i8*, i8** %b_ptr, align 8
  %139 = bitcast i8* %138 to i8**
  %140 = load i8*, i8** %139, align 8
  %141 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg165, align 8
  %value175 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %141, i32 0, i32 3
  %p = bitcast %union.anon* %value175 to i8**
  store i8* %140, i8** %p, align 8
  %142 = load %struct._object*, %struct._object** %value.addr, align 8
  %143 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg165, align 8
  %obj176 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %143, i32 0, i32 4
  store %struct._object* %142, %struct._object** %obj176, align 8
  %144 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg165, align 8
  %145 = bitcast %struct.tagPyCArgObject* %144 to %struct._object*
  store %struct._object* %145, %struct._object** %retval
  br label %return

if.end.177:                                       ; preds = %lor.lhs.false.160
  %146 = load %struct._object*, %struct._object** %value.addr, align 8
  %call178 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %146)
  store %struct.StgDictObject* %call178, %struct.StgDictObject** %stgd, align 8
  %147 = load %struct.StgDictObject*, %struct.StgDictObject** %stgd, align 8
  %tobool179 = icmp ne %struct.StgDictObject* %147, null
  br i1 %tobool179, label %land.lhs.true, label %if.end.214

land.lhs.true:                                    ; preds = %if.end.177
  %148 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type180 = getelementptr inbounds %struct._object, %struct._object* %148, i32 0, i32 1
  %149 = load %struct._typeobject*, %struct._typeobject** %ob_type180, align 8
  %cmp181 = icmp eq %struct._typeobject* %149, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*)
  br i1 %cmp181, label %land.lhs.true.187, label %lor.lhs.false.183

lor.lhs.false.183:                                ; preds = %land.lhs.true
  %150 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type184 = getelementptr inbounds %struct._object, %struct._object* %150, i32 0, i32 1
  %151 = load %struct._typeobject*, %struct._typeobject** %ob_type184, align 8
  %call185 = call i32 @PyType_IsSubtype(%struct._typeobject* %151, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*))
  %tobool186 = icmp ne i32 %call185, 0
  br i1 %tobool186, label %land.lhs.true.187, label %if.end.214

land.lhs.true.187:                                ; preds = %lor.lhs.false.183, %land.lhs.true
  %152 = load %struct.StgDictObject*, %struct.StgDictObject** %stgd, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %152, i32 0, i32 5
  %153 = load %struct._object*, %struct._object** %proto, align 8
  %tobool188 = icmp ne %struct._object* %153, null
  br i1 %tobool188, label %land.lhs.true.189, label %if.end.214

land.lhs.true.189:                                ; preds = %land.lhs.true.187
  %154 = load %struct.StgDictObject*, %struct.StgDictObject** %stgd, align 8
  %proto190 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %154, i32 0, i32 5
  %155 = load %struct._object*, %struct._object** %proto190, align 8
  %ob_type191 = getelementptr inbounds %struct._object, %struct._object* %155, i32 0, i32 1
  %156 = load %struct._typeobject*, %struct._typeobject** %ob_type191, align 8
  %tp_flags192 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %156, i32 0, i32 19
  %157 = load i64, i64* %tp_flags192, align 8
  %and193 = and i64 %157, 268435456
  %cmp194 = icmp ne i64 %and193, 0
  br i1 %cmp194, label %if.then.196, label %if.end.214

if.then.196:                                      ; preds = %land.lhs.true.189
  %158 = load %struct.StgDictObject*, %struct.StgDictObject** %stgd, align 8
  %proto198 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %158, i32 0, i32 5
  %159 = load %struct._object*, %struct._object** %proto198, align 8
  %call199 = call i8* @PyUnicode_AsUTF8(%struct._object* %159)
  %arrayidx = getelementptr i8, i8* %call199, i64 0
  %160 = load i8, i8* %arrayidx, align 1
  %conv200 = sext i8 %160 to i32
  switch i32 %conv200, label %sw.epilog [
    i32 122, label %sw.bb
    i32 90, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.196, %if.then.196
  %call201 = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call201, %struct.tagPyCArgObject** %parg197, align 8
  %161 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg197, align 8
  %cmp202 = icmp eq %struct.tagPyCArgObject* %161, null
  br i1 %cmp202, label %if.then.204, label %if.end.205

if.then.204:                                      ; preds = %sw.bb
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.205:                                       ; preds = %sw.bb
  %162 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg197, align 8
  %pffi_type206 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %162, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type206, align 8
  %163 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg197, align 8
  %tag207 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %163, i32 0, i32 2
  store i8 90, i8* %tag207, align 1
  %164 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt208 = getelementptr inbounds %struct._object, %struct._object* %164, i32 0, i32 0
  %165 = load i64, i64* %ob_refcnt208, align 8
  %inc209 = add i64 %165, 1
  store i64 %inc209, i64* %ob_refcnt208, align 8
  %166 = load %struct._object*, %struct._object** %value.addr, align 8
  %167 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg197, align 8
  %obj210 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %167, i32 0, i32 4
  store %struct._object* %166, %struct._object** %obj210, align 8
  %168 = load %struct._object*, %struct._object** %value.addr, align 8
  %169 = bitcast %struct._object* %168 to %struct.tagCDataObject*
  %b_ptr211 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %169, i32 0, i32 1
  %170 = load i8*, i8** %b_ptr211, align 8
  %171 = bitcast i8* %170 to i8**
  %172 = load i8*, i8** %171, align 8
  %173 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg197, align 8
  %value212 = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %173, i32 0, i32 3
  %p213 = bitcast %union.anon* %value212 to i8**
  store i8* %172, i8** %p213, align 8
  %174 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg197, align 8
  %175 = bitcast %struct.tagPyCArgObject* %174 to %struct._object*
  store %struct._object* %175, %struct._object** %retval
  br label %return

sw.epilog:                                        ; preds = %if.then.196
  br label %if.end.214

if.end.214:                                       ; preds = %sw.epilog, %land.lhs.true.189, %land.lhs.true.187, %lor.lhs.false.183, %if.end.177
  %176 = load %struct._object*, %struct._object** %value.addr, align 8
  %call215 = call %struct._object* @PyObject_GetAttrString(%struct._object* %176, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.60, i32 0, i32 0))
  store %struct._object* %call215, %struct._object** %as_parameter, align 8
  %177 = load %struct._object*, %struct._object** %as_parameter, align 8
  %tobool216 = icmp ne %struct._object* %177, null
  br i1 %tobool216, label %if.then.217, label %if.end.231

if.then.217:                                      ; preds = %if.end.214
  %178 = load %struct._object*, %struct._object** %type.addr, align 8
  %179 = load %struct._object*, %struct._object** %as_parameter, align 8
  %call218 = call %struct._object* @c_void_p_from_param(%struct._object* %178, %struct._object* %179)
  store %struct._object* %call218, %struct._object** %value.addr, align 8
  br label %do.body.219

do.body.219:                                      ; preds = %if.then.217
  %180 = load %struct._object*, %struct._object** %as_parameter, align 8
  store %struct._object* %180, %struct._object** %_py_decref_tmp220, align 8
  %181 = load %struct._object*, %struct._object** %_py_decref_tmp220, align 8
  %ob_refcnt221 = getelementptr inbounds %struct._object, %struct._object* %181, i32 0, i32 0
  %182 = load i64, i64* %ob_refcnt221, align 8
  %dec222 = add i64 %182, -1
  store i64 %dec222, i64* %ob_refcnt221, align 8
  %cmp223 = icmp ne i64 %dec222, 0
  br i1 %cmp223, label %if.then.225, label %if.else.226

if.then.225:                                      ; preds = %do.body.219
  br label %if.end.229

if.else.226:                                      ; preds = %do.body.219
  %183 = load %struct._object*, %struct._object** %_py_decref_tmp220, align 8
  %ob_type227 = getelementptr inbounds %struct._object, %struct._object* %183, i32 0, i32 1
  %184 = load %struct._typeobject*, %struct._typeobject** %ob_type227, align 8
  %tp_dealloc228 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %184, i32 0, i32 4
  %185 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc228, align 8
  %186 = load %struct._object*, %struct._object** %_py_decref_tmp220, align 8
  call void %185(%struct._object* %186)
  br label %if.end.229

if.end.229:                                       ; preds = %if.else.226, %if.then.225
  br label %do.end.230

do.end.230:                                       ; preds = %if.end.229
  %187 = load %struct._object*, %struct._object** %value.addr, align 8
  store %struct._object* %187, %struct._object** %retval
  br label %return

if.end.231:                                       ; preds = %if.end.214
  %188 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %188, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.92, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.231, %do.end.230, %if.end.205, %if.then.204, %if.end.170, %if.then.169, %if.then.152, %if.then.142, %if.then.125, %if.then.122, %if.end.118, %do.end.117, %if.then.96, %if.end.84, %do.end.83, %if.then.62, %if.end.50, %do.end.49, %if.then.28, %if.end.16, %do.end, %if.then.5, %if.then
  %189 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %189
}

declare %struct._object* @PyTuple_New(i64) #1

declare %struct._object* @PyUnicode_InternFromString(i8*) #1

declare %struct._object* @PyUnicode_Concat(%struct._object*, %struct._object*) #1

; Function Attrs: uwtable
define internal %struct.tagPyCArgObject* @PyCFuncPtrType_paramfunc(%struct.tagCDataObject* %self) #0 {
entry:
  %retval = alloca %struct.tagPyCArgObject*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %parg = alloca %struct.tagPyCArgObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %call = call %struct.tagPyCArgObject* @PyCArgObject_new()
  store %struct.tagPyCArgObject* %call, %struct.tagPyCArgObject** %parg, align 8
  %0 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %cmp = icmp eq %struct.tagPyCArgObject* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct.tagPyCArgObject* null, %struct.tagPyCArgObject** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %tag = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %1, i32 0, i32 2
  store i8 80, i8* %tag, align 1
  %2 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %pffi_type = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %2, i32 0, i32 1
  store %struct._ffi_type* @ffi_type_pointer, %struct._ffi_type** %pffi_type, align 8
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %4 = bitcast %struct.tagCDataObject* %3 to %struct._object*
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 0
  %5 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %5, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %7 = bitcast %struct.tagCDataObject* %6 to %struct._object*
  %8 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %obj = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %8, i32 0, i32 4
  store %struct._object* %7, %struct._object** %obj, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 1
  %10 = load i8*, i8** %b_ptr, align 8
  %11 = bitcast i8* %10 to i8**
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  %value = getelementptr inbounds %struct.tagPyCArgObject, %struct.tagPyCArgObject* %13, i32 0, i32 3
  %p = bitcast %union.anon* %value to i8**
  store i8* %12, i8** %p, align 8
  %14 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %parg, align 8
  store %struct.tagPyCArgObject* %14, %struct.tagPyCArgObject** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct.tagPyCArgObject*, %struct.tagPyCArgObject** %retval
  ret %struct.tagPyCArgObject* %15
}

; Function Attrs: uwtable
define internal i32 @make_funcptrtype_dict(%struct.StgDictObject* %stgdict) #0 {
entry:
  %retval = alloca i32, align 4
  %stgdict.addr = alloca %struct.StgDictObject*, align 8
  %ob = alloca %struct._object*, align 8
  %converters = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.StgDictObject* %stgdict, %struct.StgDictObject** %stgdict.addr, align 8
  store %struct._object* null, %struct._object** %converters, align 8
  %call = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.76, i32 0, i32 0))
  %pffi_type = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call, i32 0, i32 3
  %0 = load %struct._ffi_type*, %struct._ffi_type** %pffi_type, align 8
  %alignment = getelementptr inbounds %struct._ffi_type, %struct._ffi_type* %0, i32 0, i32 1
  %1 = load i16, i16* %alignment, align 2
  %conv = zext i16 %1 to i64
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %align = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %2, i32 0, i32 2
  store i64 %conv, i64* %align, align 8
  %3 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %3, i32 0, i32 3
  store i64 1, i64* %length, align 8
  %4 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %4, i32 0, i32 1
  store i64 8, i64* %size, align 8
  %5 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %setfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %5, i32 0, i32 6
  store %struct._object* (i8*, %struct._object*, i64)* null, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %6 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %6, i32 0, i32 7
  store %struct._object* (i8*, i64)* null, %struct._object* (i8*, i64)** %getfunc, align 8
  %7 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %ffi_type_pointer = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %7, i32 0, i32 4
  %8 = bitcast %struct._ffi_type* %ffi_type_pointer to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %8, i8* bitcast (%struct._ffi_type* @ffi_type_pointer to i8*), i64 24, i32 8, i1 false)
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %10 = bitcast %struct.StgDictObject* %9 to %struct._object*
  %call1 = call %struct._object* @PyDict_GetItemString(%struct._object* %10, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.106, i32 0, i32 0))
  store %struct._object* %call1, %struct._object** %ob, align 8
  %11 = load %struct._object*, %struct._object** %ob, align 8
  %tobool = icmp ne %struct._object* %11, null
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %12 = load %struct._object*, %struct._object** %ob, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  %14 = load i64, i64* %tp_flags, align 8
  %and = and i64 %14, 16777216
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %15 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.107, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %16 = load %struct._object*, %struct._object** %ob, align 8
  %call3 = call i64 @PyLong_AsLong(%struct._object* %16)
  %or = or i64 %call3, 256
  %conv4 = trunc i64 %or to i32
  %17 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %17, i32 0, i32 13
  store i32 %conv4, i32* %flags, align 4
  %18 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %19 = bitcast %struct.StgDictObject* %18 to %struct._object*
  %call5 = call %struct._object* @PyDict_GetItemString(%struct._object* %19, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.108, i32 0, i32 0))
  store %struct._object* %call5, %struct._object** %ob, align 8
  %20 = load %struct._object*, %struct._object** %ob, align 8
  %tobool6 = icmp ne %struct._object* %20, null
  br i1 %tobool6, label %if.then.7, label %if.end.13

if.then.7:                                        ; preds = %if.end
  %21 = load %struct._object*, %struct._object** %ob, align 8
  %call8 = call %struct._object* @converters_from_argtypes(%struct._object* %21)
  store %struct._object* %call8, %struct._object** %converters, align 8
  %22 = load %struct._object*, %struct._object** %converters, align 8
  %tobool9 = icmp ne %struct._object* %22, null
  br i1 %tobool9, label %if.end.11, label %if.then.10

if.then.10:                                       ; preds = %if.then.7
  br label %error

if.end.11:                                        ; preds = %if.then.7
  %23 = load %struct._object*, %struct._object** %ob, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %24, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %25 = load %struct._object*, %struct._object** %ob, align 8
  %26 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %argtypes = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %26, i32 0, i32 9
  store %struct._object* %25, %struct._object** %argtypes, align 8
  %27 = load %struct._object*, %struct._object** %converters, align 8
  %28 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %converters12 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %28, i32 0, i32 10
  store %struct._object* %27, %struct._object** %converters12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.end.11, %if.end
  %29 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %30 = bitcast %struct.StgDictObject* %29 to %struct._object*
  %call14 = call %struct._object* @PyDict_GetItemString(%struct._object* %30, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.109, i32 0, i32 0))
  store %struct._object* %call14, %struct._object** %ob, align 8
  %31 = load %struct._object*, %struct._object** %ob, align 8
  %tobool15 = icmp ne %struct._object* %31, null
  br i1 %tobool15, label %if.then.16, label %if.end.34

if.then.16:                                       ; preds = %if.end.13
  %32 = load %struct._object*, %struct._object** %ob, align 8
  %cmp17 = icmp ne %struct._object* %32, @_Py_NoneStruct
  br i1 %cmp17, label %land.lhs.true, label %if.end.25

land.lhs.true:                                    ; preds = %if.then.16
  %33 = load %struct._object*, %struct._object** %ob, align 8
  %call19 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %33)
  %tobool20 = icmp ne %struct.StgDictObject* %call19, null
  br i1 %tobool20, label %if.end.25, label %land.lhs.true.21

land.lhs.true.21:                                 ; preds = %land.lhs.true
  %34 = load %struct._object*, %struct._object** %ob, align 8
  %call22 = call i32 @PyCallable_Check(%struct._object* %34)
  %tobool23 = icmp ne i32 %call22, 0
  br i1 %tobool23, label %if.end.25, label %if.then.24

if.then.24:                                       ; preds = %land.lhs.true.21
  %35 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %35, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.110, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %land.lhs.true.21, %land.lhs.true, %if.then.16
  %36 = load %struct._object*, %struct._object** %ob, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt26, align 8
  %inc27 = add i64 %37, 1
  store i64 %inc27, i64* %ob_refcnt26, align 8
  %38 = load %struct._object*, %struct._object** %ob, align 8
  %39 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %restype = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %39, i32 0, i32 11
  store %struct._object* %38, %struct._object** %restype, align 8
  %40 = load %struct._object*, %struct._object** %ob, align 8
  %call28 = call %struct._object* @PyObject_GetAttrString(%struct._object* %40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.111, i32 0, i32 0))
  %41 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %checker = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %41, i32 0, i32 12
  store %struct._object* %call28, %struct._object** %checker, align 8
  %42 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict.addr, align 8
  %checker29 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %42, i32 0, i32 12
  %43 = load %struct._object*, %struct._object** %checker29, align 8
  %cmp30 = icmp eq %struct._object* %43, null
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.end.25
  call void @PyErr_Clear()
  br label %if.end.33

if.end.33:                                        ; preds = %if.then.32, %if.end.25
  br label %if.end.34

if.end.34:                                        ; preds = %if.end.33, %if.end.13
  store i32 0, i32* %retval
  br label %return

error:                                            ; preds = %if.then.10
  br label %do.body

do.body:                                          ; preds = %error
  %44 = load %struct._object*, %struct._object** %converters, align 8
  store %struct._object* %44, %struct._object** %_py_xdecref_tmp, align 8
  %45 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp35 = icmp ne %struct._object* %45, null
  br i1 %cmp35, label %if.then.37, label %if.end.45

if.then.37:                                       ; preds = %do.body
  br label %do.body.38

do.body.38:                                       ; preds = %if.then.37
  %46 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt39 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt39, align 8
  %dec = add i64 %48, -1
  store i64 %dec, i64* %ob_refcnt39, align 8
  %cmp40 = icmp ne i64 %dec, 0
  br i1 %cmp40, label %if.then.42, label %if.else

if.then.42:                                       ; preds = %do.body.38
  br label %if.end.44

if.else:                                          ; preds = %do.body.38
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %51(%struct._object* %52)
  br label %if.end.44

if.end.44:                                        ; preds = %if.else, %if.then.42
  br label %do.end

do.end:                                           ; preds = %if.end.44
  br label %if.end.45

if.end.45:                                        ; preds = %do.end, %do.body
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.46, %if.end.34, %if.then.24, %if.then
  %53 = load i32, i32* %retval
  ret i32 %53
}

declare i64 @PyLong_AsLong(%struct._object*) #1

; Function Attrs: uwtable
define internal %struct._object* @converters_from_argtypes(%struct._object* %ob) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %ob.addr = alloca %struct._object*, align 8
  %converters = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %nArgs = alloca i64, align 8
  %tp = alloca %struct._object*, align 8
  %cnv = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  store %struct._object* %ob, %struct._object** %ob.addr, align 8
  %0 = load %struct._object*, %struct._object** %ob.addr, align 8
  %call = call %struct._object* @PySequence_Tuple(%struct._object* %0)
  store %struct._object* %call, %struct._object** %ob.addr, align 8
  %1 = load %struct._object*, %struct._object** %ob.addr, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.112, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %ob.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %4, i32 0, i32 1
  %5 = load i64, i64* %ob_size, align 8
  store i64 %5, i64* %nArgs, align 8
  %6 = load i64, i64* %nArgs, align 8
  %call1 = call %struct._object* @PyTuple_New(i64 %6)
  store %struct._object* %call1, %struct._object** %converters, align 8
  %7 = load %struct._object*, %struct._object** %converters, align 8
  %tobool2 = icmp ne %struct._object* %7, null
  br i1 %tobool2, label %if.end.4, label %if.then.3

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.4
  %8 = load i64, i64* %i, align 8
  %9 = load i64, i64* %nArgs, align 8
  %cmp = icmp slt i64 %8, %9
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %10 = load i64, i64* %i, align 8
  %11 = load %struct._object*, %struct._object** %ob.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %12, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %10
  %13 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %13, %struct._object** %tp, align 8
  %14 = load %struct._object*, %struct._object** %tp, align 8
  %call5 = call %struct._object* @PyObject_GetAttrString(%struct._object* %14, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.53, i32 0, i32 0))
  store %struct._object* %call5, %struct._object** %cnv, align 8
  %15 = load %struct._object*, %struct._object** %cnv, align 8
  %tobool6 = icmp ne %struct._object* %15, null
  br i1 %tobool6, label %if.end.8, label %if.then.7

if.then.7:                                        ; preds = %for.body
  br label %argtypes_error_1

if.end.8:                                         ; preds = %for.body
  %16 = load %struct._object*, %struct._object** %cnv, align 8
  %17 = load i64, i64* %i, align 8
  %18 = load %struct._object*, %struct._object** %converters, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyTupleObject*
  %ob_item9 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %19, i32 0, i32 1
  %arrayidx10 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item9, i32 0, i64 %17
  store %struct._object* %16, %struct._object** %arrayidx10, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.8
  %20 = load i64, i64* %i, align 8
  %inc = add i64 %20, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %do.body

do.body:                                          ; preds = %for.end
  %21 = load %struct._object*, %struct._object** %ob.addr, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %23, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp11 = icmp ne i64 %dec, 0
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %do.body
  br label %if.end.13

if.else:                                          ; preds = %do.body
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %26(%struct._object* %27)
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.12
  br label %do.end

do.end:                                           ; preds = %if.end.13
  %28 = load %struct._object*, %struct._object** %converters, align 8
  store %struct._object* %28, %struct._object** %retval
  br label %return

argtypes_error_1:                                 ; preds = %if.then.7
  br label %do.body.14

do.body.14:                                       ; preds = %argtypes_error_1
  %29 = load %struct._object*, %struct._object** %converters, align 8
  store %struct._object* %29, %struct._object** %_py_xdecref_tmp, align 8
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp15 = icmp ne %struct._object* %30, null
  br i1 %cmp15, label %if.then.16, label %if.end.28

if.then.16:                                       ; preds = %do.body.14
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.16
  %31 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %31, %struct._object** %_py_decref_tmp18, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 0
  %33 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %33, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 1
  %35 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %35, i32 0, i32 4
  %36 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %37 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %36(%struct._object* %37)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  br label %if.end.28

if.end.28:                                        ; preds = %do.end.27, %do.body.14
  br label %do.end.29

do.end.29:                                        ; preds = %if.end.28
  br label %do.body.30

do.body.30:                                       ; preds = %do.end.29
  %38 = load %struct._object*, %struct._object** %ob.addr, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp31, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %40, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %43(%struct._object* %44)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  %45 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %46 = load i64, i64* %i, align 8
  %add = add i64 %46, 1
  %call41 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %45, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.113, i32 0, i32 0), i64 %add)
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.40, %do.end, %if.then.3, %if.then
  %47 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %47
}

declare i32 @PyCallable_Check(%struct._object*) #1

declare %struct._object* @PySequence_Tuple(%struct._object*) #1

; Function Attrs: uwtable
define internal i32 @PyCData_NewGetBuffer(%struct._object* %myself, %struct.bufferinfo* %view, i32 %flags) #0 {
entry:
  %retval = alloca i32, align 4
  %myself.addr = alloca %struct._object*, align 8
  %view.addr = alloca %struct.bufferinfo*, align 8
  %flags.addr = alloca i32, align 4
  %self = alloca %struct.tagCDataObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %i = alloca i64, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store %struct.bufferinfo* %view, %struct.bufferinfo** %view.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %myself.addr, align 8
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %2)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %3 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %cmp = icmp eq %struct.bufferinfo* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 1
  %5 = load i8*, i8** %b_ptr, align 8
  %6 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %buf = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %6, i32 0, i32 0
  store i8* %5, i8** %buf, align 8
  %7 = load %struct._object*, %struct._object** %myself.addr, align 8
  %8 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %obj = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %8, i32 0, i32 1
  store %struct._object* %7, %struct._object** %obj, align 8
  %9 = load %struct._object*, %struct._object** %myself.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %10, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %11, i32 0, i32 4
  %12 = load i64, i64* %b_size, align 8
  %13 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %len = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %13, i32 0, i32 2
  store i64 %12, i64* %len, align 8
  %14 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %readonly = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %14, i32 0, i32 4
  store i32 0, i32* %readonly, align 4
  %15 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %format = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %15, i32 0, i32 14
  %16 = load i8*, i8** %format, align 8
  %tobool = icmp ne i8* %16, null
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %17 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %format1 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %17, i32 0, i32 14
  %18 = load i8*, i8** %format1, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %18, %cond.true ], [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.71, i32 0, i32 0), %cond.false ]
  %19 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %format2 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %19, i32 0, i32 6
  store i8* %cond, i8** %format2, align 8
  %20 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %ndim = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %20, i32 0, i32 15
  %21 = load i32, i32* %ndim, align 4
  %22 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %ndim3 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %22, i32 0, i32 5
  store i32 %21, i32* %ndim3, align 4
  %23 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %shape = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %23, i32 0, i32 16
  %24 = load i64*, i64** %shape, align 8
  %25 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %shape4 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %25, i32 0, i32 7
  store i64* %24, i64** %shape4, align 8
  %26 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_size5 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %26, i32 0, i32 4
  %27 = load i64, i64* %b_size5, align 8
  %28 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %itemsize = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %28, i32 0, i32 3
  store i64 %27, i64* %itemsize, align 8
  %29 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %itemsize6 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %29, i32 0, i32 3
  %30 = load i64, i64* %itemsize6, align 8
  %tobool7 = icmp ne i64 %30, 0
  br i1 %tobool7, label %if.then.8, label %if.end.15

if.then.8:                                        ; preds = %cond.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.8
  %31 = load i64, i64* %i, align 8
  %32 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %ndim9 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %32, i32 0, i32 5
  %33 = load i32, i32* %ndim9, align 4
  %conv = sext i32 %33 to i64
  %cmp10 = icmp slt i64 %31, %conv
  br i1 %cmp10, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %34 = load i64, i64* %i, align 8
  %35 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %shape12 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %35, i32 0, i32 16
  %36 = load i64*, i64** %shape12, align 8
  %arrayidx = getelementptr i64, i64* %36, i64 %34
  %37 = load i64, i64* %arrayidx, align 8
  %38 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %itemsize13 = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %38, i32 0, i32 3
  %39 = load i64, i64* %itemsize13, align 8
  %div = sdiv i64 %39, %37
  store i64 %div, i64* %itemsize13, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %40 = load i64, i64* %i, align 8
  %inc14 = add i64 %40, 1
  store i64 %inc14, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.15

if.end.15:                                        ; preds = %for.end, %cond.end
  %41 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %strides = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %41, i32 0, i32 8
  store i64* null, i64** %strides, align 8
  %42 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %suboffsets = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %42, i32 0, i32 9
  store i64* null, i64** %suboffsets, align 8
  %43 = load %struct.bufferinfo*, %struct.bufferinfo** %view.addr, align 8
  %internal = getelementptr inbounds %struct.bufferinfo, %struct.bufferinfo* %43, i32 0, i32 10
  store i8* null, i8** %internal, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.15, %if.then
  %44 = load i32, i32* %retval
  ret i32 %44
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyCData_from_outparam(%struct._object* %self, %struct._object* %args) #6 {
entry:
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %1, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %2 = load %struct._object*, %struct._object** %self.addr, align 8
  ret %struct._object* %2
}

; Function Attrs: uwtable
define internal %struct._object* @PyCData_reduce(%struct._object* %myself, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %myself.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %myself.addr, align 8
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %2)
  %flags = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %call, i32 0, i32 13
  %3 = load i32, i32* %flags, align 4
  %and = and i32 %3, 768
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.118, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct._object*, %struct._object** @_unpickle, align 8
  %6 = load %struct._object*, %struct._object** %myself.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %8 = load %struct._object*, %struct._object** %myself.addr, align 8
  %call1 = call %struct._object* @PyObject_GetAttrString(%struct._object* %8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.120, i32 0, i32 0))
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 1
  %10 = load i8*, i8** %b_ptr, align 8
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %11, i32 0, i32 4
  %12 = load i64, i64* %b_size, align 8
  %call2 = call %struct._object* @PyBytes_FromStringAndSize(i8* %10, i64 %12)
  %call3 = call %struct._object* (i8*, ...) @_Py_BuildValue_SizeT(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.119, i32 0, i32 0), %struct._object* %5, %struct._typeobject* %7, %struct._object* %call1, %struct._object* %call2)
  store %struct._object* %call3, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %13 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %13
}

; Function Attrs: uwtable
define internal %struct._object* @PyCData_setstate(%struct._object* %myself, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %myself.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %data = alloca i8*, align 8
  %len = alloca i64, align 8
  %res = alloca i32, align 4
  %dict = alloca %struct._object*, align 8
  %mydict = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %2, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.121, i32 0, i32 0), %struct._object** %dict, i8** %data, i64* %len)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i64, i64* %len, align 8
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 4
  %5 = load i64, i64* %b_size, align 8
  %cmp = icmp sgt i64 %3, %5
  br i1 %cmp, label %if.then.1, label %if.end.3

if.then.1:                                        ; preds = %if.end
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_size2 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %6, i32 0, i32 4
  %7 = load i64, i64* %b_size2, align 8
  store i64 %7, i64* %len, align 8
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.1, %if.end
  %8 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %8, i32 0, i32 1
  %9 = load i8*, i8** %b_ptr, align 8
  %10 = load i8*, i8** %data, align 8
  %11 = load i64, i64* %len, align 8
  call void @llvm.memmove.p0i8.p0i8.i64(i8* %9, i8* %10, i64 %11, i32 1, i1 false)
  %12 = load %struct._object*, %struct._object** %myself.addr, align 8
  %call4 = call %struct._object* @PyObject_GetAttrString(%struct._object* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.120, i32 0, i32 0))
  store %struct._object* %call4, %struct._object** %mydict, align 8
  %13 = load %struct._object*, %struct._object** %mydict, align 8
  %14 = load %struct._object*, %struct._object** %dict, align 8
  %call5 = call i32 @PyDict_Update(%struct._object* %13, %struct._object* %14)
  store i32 %call5, i32* %res, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.3
  %15 = load %struct._object*, %struct._object** %mydict, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp6 = icmp ne i64 %dec, 0
  br i1 %cmp6, label %if.then.7, label %if.else

if.then.7:                                        ; preds = %do.body
  br label %if.end.8

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end.8

if.end.8:                                         ; preds = %if.else, %if.then.7
  br label %do.end

do.end:                                           ; preds = %if.end.8
  %22 = load i32, i32* %res, align 4
  %cmp9 = icmp eq i32 %22, -1
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %do.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.11:                                        ; preds = %do.end
  %23 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %23, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.11, %if.then.10, %if.then
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

declare %struct._object* @_Py_BuildValue_SizeT(i8*, ...) #1

; Function Attrs: nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #4

declare void @_ctypes_extend_error(%struct._object*, i8*, ...) #1

; Function Attrs: uwtable
define internal %struct._object* @GetKeepedObjects(%struct.tagCDataObject* %target) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %target.addr = alloca %struct.tagCDataObject*, align 8
  %container = alloca %struct.tagCDataObject*, align 8
  store %struct.tagCDataObject* %target, %struct.tagCDataObject** %target.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %target.addr, align 8
  %call = call %struct.tagCDataObject* @PyCData_GetContainer(%struct.tagCDataObject* %0)
  store %struct.tagCDataObject* %call, %struct.tagCDataObject** %container, align 8
  %1 = load %struct.tagCDataObject*, %struct.tagCDataObject** %container, align 8
  %cmp = icmp eq %struct.tagCDataObject* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %container, align 8
  %b_objects = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %2, i32 0, i32 7
  %3 = load %struct._object*, %struct._object** %b_objects, align 8
  store %struct._object* %3, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %4
}

; Function Attrs: uwtable
define internal %struct.tagCDataObject* @PyCData_GetContainer(%struct.tagCDataObject* %self) #0 {
entry:
  %retval = alloca %struct.tagCDataObject*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_base = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 3
  %1 = load %struct.tagCDataObject*, %struct.tagCDataObject** %b_base, align 8
  %tobool = icmp ne %struct.tagCDataObject* %1, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_base1 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %2, i32 0, i32 3
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %b_base1, align 8
  store %struct.tagCDataObject* %3, %struct.tagCDataObject** %self.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 7
  %5 = load %struct._object*, %struct._object** %b_objects, align 8
  %cmp = icmp eq %struct._object* %5, null
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %while.end
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %6, i32 0, i32 5
  %7 = load i64, i64* %b_length, align 8
  %tobool2 = icmp ne i64 %7, 0
  br i1 %tobool2, label %if.then.3, label %if.else

if.then.3:                                        ; preds = %if.then
  %call = call %struct._object* @PyDict_New()
  %8 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects4 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %8, i32 0, i32 7
  store %struct._object* %call, %struct._object** %b_objects4, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects5 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 7
  %10 = load %struct._object*, %struct._object** %b_objects5, align 8
  %cmp6 = icmp eq %struct._object* %10, null
  br i1 %cmp6, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %if.then.3
  store %struct.tagCDataObject* null, %struct.tagCDataObject** %retval
  br label %return

if.end:                                           ; preds = %if.then.3
  br label %if.end.9

if.else:                                          ; preds = %if.then
  %11 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_objects8 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %12, i32 0, i32 7
  store %struct._object* @_Py_NoneStruct, %struct._object** %b_objects8, align 8
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.end
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %while.end
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  store %struct.tagCDataObject* %13, %struct.tagCDataObject** %retval
  br label %return

return:                                           ; preds = %if.end.10, %if.then.7
  %14 = load %struct.tagCDataObject*, %struct.tagCDataObject** %retval
  ret %struct.tagCDataObject* %14
}

; Function Attrs: uwtable
define internal %struct._object* @unique_key(%struct.tagCDataObject* %target, i64 %index) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %target.addr = alloca %struct.tagCDataObject*, align 8
  %index.addr = alloca i64, align 8
  %string = alloca [256 x i8], align 16
  %cp = alloca i8*, align 8
  %bytes_left = alloca i64, align 8
  store %struct.tagCDataObject* %target, %struct.tagCDataObject** %target.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %string, i32 0, i32 0
  store i8* %arraydecay, i8** %cp, align 8
  %0 = load i8*, i8** %cp, align 8
  %1 = load i64, i64* %index.addr, align 8
  %conv = trunc i64 %1 to i32
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.131, i32 0, i32 0), i32 %conv) #4
  %2 = load i8*, i8** %cp, align 8
  %idx.ext = sext i32 %call to i64
  %add.ptr = getelementptr i8, i8* %2, i64 %idx.ext
  store i8* %add.ptr, i8** %cp, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %3 = load %struct.tagCDataObject*, %struct.tagCDataObject** %target.addr, align 8
  %b_base = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %3, i32 0, i32 3
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %b_base, align 8
  %tobool = icmp ne %struct.tagCDataObject* %4, null
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8*, i8** %cp, align 8
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %string, i32 0, i32 0
  %sub.ptr.lhs.cast = ptrtoint i8* %5 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %arraydecay1 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %sub = sub i64 256, %sub.ptr.sub
  %sub2 = sub i64 %sub, 1
  store i64 %sub2, i64* %bytes_left, align 8
  %6 = load i64, i64* %bytes_left, align 8
  %cmp = icmp ult i64 %6, 16
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %7 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %7, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.132, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %while.body
  %8 = load i8*, i8** %cp, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %target.addr, align 8
  %b_index = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %9, i32 0, i32 6
  %10 = load i64, i64* %b_index, align 8
  %conv4 = trunc i64 %10 to i32
  %call5 = call i32 (i8*, i8*, ...) @sprintf(i8* %8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.133, i32 0, i32 0), i32 %conv4) #4
  %11 = load i8*, i8** %cp, align 8
  %idx.ext6 = sext i32 %call5 to i64
  %add.ptr7 = getelementptr i8, i8* %11, i64 %idx.ext6
  store i8* %add.ptr7, i8** %cp, align 8
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %target.addr, align 8
  %b_base8 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %12, i32 0, i32 3
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %b_base8, align 8
  store %struct.tagCDataObject* %13, %struct.tagCDataObject** %target.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay9 = getelementptr inbounds [256 x i8], [256 x i8]* %string, i32 0, i32 0
  %14 = load i8*, i8** %cp, align 8
  %arraydecay10 = getelementptr inbounds [256 x i8], [256 x i8]* %string, i32 0, i32 0
  %sub.ptr.lhs.cast11 = ptrtoint i8* %14 to i64
  %sub.ptr.rhs.cast12 = ptrtoint i8* %arraydecay10 to i64
  %sub.ptr.sub13 = sub i64 %sub.ptr.lhs.cast11, %sub.ptr.rhs.cast12
  %call14 = call %struct._object* @PyUnicode_FromStringAndSize(i8* %arraydecay9, i64 %sub.ptr.sub13)
  store %struct._object* %call14, %struct._object** %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

declare %struct._object* @PyUnicode_FromStringAndSize(i8*, i64) #1

declare %struct._object* @PyUnicode_FromFormat(i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @PyCFuncPtr_bool(%struct.PyCFuncPtrObject* %self) #6 {
entry:
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %0, i32 0, i32 1
  %1 = load i8*, i8** %b_ptr, align 8
  %2 = bitcast i8* %1 to i8**
  %3 = load i8*, i8** %2, align 8
  %cmp = icmp ne i8* %3, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: uwtable
define internal %struct._object* @_build_callargs(%struct.PyCFuncPtrObject* %self, %struct._object* %argtypes, %struct._object* %inargs, %struct._object* %kwds, i32* %poutmask, i32* %pinoutmask, i32* %pnumretvals) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %argtypes.addr = alloca %struct._object*, align 8
  %inargs.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %poutmask.addr = alloca i32*, align 8
  %pinoutmask.addr = alloca i32*, align 8
  %pnumretvals.addr = alloca i32*, align 8
  %paramflags = alloca %struct._object*, align 8
  %callargs = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %inargs_index = alloca i32, align 4
  %actual_args = alloca i64, align 8
  %item = alloca %struct._object*, align 8
  %ob = alloca %struct._object*, align 8
  %flag = alloca i32, align 4
  %name = alloca %struct._object*, align 8
  %defval = alloca %struct._object*, align 8
  %tsize = alloca i64, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  store %struct._object* %argtypes, %struct._object** %argtypes.addr, align 8
  store %struct._object* %inargs, %struct._object** %inargs.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store i32* %poutmask, i32** %poutmask.addr, align 8
  store i32* %pinoutmask, i32** %pinoutmask.addr, align 8
  store i32* %pnumretvals, i32** %pnumretvals.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %paramflags1 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %0, i32 0, i32 16
  %1 = load %struct._object*, %struct._object** %paramflags1, align 8
  store %struct._object* %1, %struct._object** %paramflags, align 8
  store i32 0, i32* %inargs_index, align 4
  %2 = load i32*, i32** %poutmask.addr, align 8
  store i32 0, i32* %2, align 4
  %3 = load i32*, i32** %pinoutmask.addr, align 8
  store i32 0, i32* %3, align 4
  %4 = load i32*, i32** %pnumretvals.addr, align 8
  store i32 0, i32* %4, align 4
  %5 = load %struct._object*, %struct._object** %argtypes.addr, align 8
  %cmp = icmp eq %struct._object* %5, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct._object*, %struct._object** %paramflags, align 8
  %cmp2 = icmp eq %struct._object* %6, null
  br i1 %cmp2, label %if.then, label %lor.lhs.false.3

lor.lhs.false.3:                                  ; preds = %lor.lhs.false
  %7 = load %struct._object*, %struct._object** %argtypes.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %8, i32 0, i32 1
  %9 = load i64, i64* %ob_size, align 8
  %cmp4 = icmp eq i64 %9, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false.3, %lor.lhs.false, %entry
  %10 = load %struct._object*, %struct._object** %inargs.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %12 = load %struct._object*, %struct._object** %inargs.addr, align 8
  store %struct._object* %12, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false.3
  %13 = load %struct._object*, %struct._object** %argtypes.addr, align 8
  %14 = bitcast %struct._object* %13 to %struct.PyVarObject*
  %ob_size5 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %14, i32 0, i32 1
  %15 = load i64, i64* %ob_size5, align 8
  store i64 %15, i64* %len, align 8
  %16 = load i64, i64* %len, align 8
  %call = call %struct._object* @PyTuple_New(i64 %16)
  store %struct._object* %call, %struct._object** %callargs, align 8
  %17 = load %struct._object*, %struct._object** %callargs, align 8
  %cmp6 = icmp eq %struct._object* %17, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.8
  %18 = load i64, i64* %i, align 8
  %19 = load i64, i64* %len, align 8
  %cmp9 = icmp slt i64 %18, %19
  br i1 %cmp9, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %20 = load i64, i64* %i, align 8
  %21 = load %struct._object*, %struct._object** %paramflags, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %22, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %20
  %23 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %23, %struct._object** %item, align 8
  store %struct._object* null, %struct._object** %name, align 8
  store %struct._object* null, %struct._object** %defval, align 8
  %24 = load %struct._object*, %struct._object** %item, align 8
  %25 = bitcast %struct._object* %24 to %struct.PyVarObject*
  %ob_size10 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %25, i32 0, i32 1
  %26 = load i64, i64* %ob_size10, align 8
  store i64 %26, i64* %tsize, align 8
  %27 = load %struct._object*, %struct._object** %item, align 8
  %28 = bitcast %struct._object* %27 to %struct.PyTupleObject*
  %ob_item11 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %28, i32 0, i32 1
  %arrayidx12 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item11, i32 0, i64 0
  %29 = load %struct._object*, %struct._object** %arrayidx12, align 8
  %call13 = call i64 @PyLong_AsLong(%struct._object* %29)
  %conv = trunc i64 %call13 to i32
  store i32 %conv, i32* %flag, align 4
  %30 = load i64, i64* %tsize, align 8
  %cmp14 = icmp sgt i64 %30, 1
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  %31 = load %struct._object*, %struct._object** %item, align 8
  %32 = bitcast %struct._object* %31 to %struct.PyTupleObject*
  %ob_item16 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %32, i32 0, i32 1
  %arrayidx17 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item16, i32 0, i64 1
  %33 = load %struct._object*, %struct._object** %arrayidx17, align 8
  br label %cond.end

cond.false:                                       ; preds = %for.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %33, %cond.true ], [ null, %cond.false ]
  store %struct._object* %cond, %struct._object** %name, align 8
  %34 = load i64, i64* %tsize, align 8
  %cmp18 = icmp sgt i64 %34, 2
  br i1 %cmp18, label %cond.true.20, label %cond.false.23

cond.true.20:                                     ; preds = %cond.end
  %35 = load %struct._object*, %struct._object** %item, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyTupleObject*
  %ob_item21 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %36, i32 0, i32 1
  %arrayidx22 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item21, i32 0, i64 2
  %37 = load %struct._object*, %struct._object** %arrayidx22, align 8
  br label %cond.end.24

cond.false.23:                                    ; preds = %cond.end
  br label %cond.end.24

cond.end.24:                                      ; preds = %cond.false.23, %cond.true.20
  %cond25 = phi %struct._object* [ %37, %cond.true.20 ], [ null, %cond.false.23 ]
  store %struct._object* %cond25, %struct._object** %defval, align 8
  %38 = load i32, i32* %flag, align 4
  %and = and i32 %38, 7
  switch i32 %and, label %sw.default [
    i32 5, label %sw.bb
    i32 3, label %sw.bb.39
    i32 0, label %sw.bb.41
    i32 1, label %sw.bb.41
    i32 2, label %sw.bb.49
  ]

sw.bb:                                            ; preds = %cond.end.24
  %39 = load %struct._object*, %struct._object** %defval, align 8
  %cmp26 = icmp eq %struct._object* %39, null
  br i1 %cmp26, label %if.then.28, label %if.else

if.then.28:                                       ; preds = %sw.bb
  %call29 = call %struct._object* @PyLong_FromLong(i64 0)
  store %struct._object* %call29, %struct._object** %defval, align 8
  %40 = load %struct._object*, %struct._object** %defval, align 8
  %cmp30 = icmp eq %struct._object* %40, null
  br i1 %cmp30, label %if.then.32, label %if.end.33

if.then.32:                                       ; preds = %if.then.28
  br label %error

if.end.33:                                        ; preds = %if.then.28
  br label %if.end.36

if.else:                                          ; preds = %sw.bb
  %41 = load %struct._object*, %struct._object** %defval, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt34, align 8
  %inc35 = add i64 %42, 1
  store i64 %inc35, i64* %ob_refcnt34, align 8
  br label %if.end.36

if.end.36:                                        ; preds = %if.else, %if.end.33
  %43 = load %struct._object*, %struct._object** %defval, align 8
  %44 = load i64, i64* %i, align 8
  %45 = load %struct._object*, %struct._object** %callargs, align 8
  %46 = bitcast %struct._object* %45 to %struct.PyTupleObject*
  %ob_item37 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %46, i32 0, i32 1
  %arrayidx38 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item37, i32 0, i64 %44
  store %struct._object* %43, %struct._object** %arrayidx38, align 8
  br label %sw.epilog

sw.bb.39:                                         ; preds = %cond.end.24
  %47 = load i64, i64* %i, align 8
  %sh_prom = trunc i64 %47 to i32
  %shl = shl i32 1, %sh_prom
  %48 = load i32*, i32** %pinoutmask.addr, align 8
  %49 = load i32, i32* %48, align 4
  %or = or i32 %49, %shl
  store i32 %or, i32* %48, align 4
  %50 = load i32*, i32** %pnumretvals.addr, align 8
  %51 = load i32, i32* %50, align 4
  %inc40 = add i32 %51, 1
  store i32 %inc40, i32* %50, align 4
  br label %sw.bb.41

sw.bb.41:                                         ; preds = %cond.end.24, %cond.end.24, %sw.bb.39
  %52 = load %struct._object*, %struct._object** %name, align 8
  %53 = load %struct._object*, %struct._object** %defval, align 8
  %54 = load %struct._object*, %struct._object** %inargs.addr, align 8
  %55 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call42 = call %struct._object* @_get_arg(i32* %inargs_index, %struct._object* %52, %struct._object* %53, %struct._object* %54, %struct._object* %55)
  store %struct._object* %call42, %struct._object** %ob, align 8
  %56 = load %struct._object*, %struct._object** %ob, align 8
  %cmp43 = icmp eq %struct._object* %56, null
  br i1 %cmp43, label %if.then.45, label %if.end.46

if.then.45:                                       ; preds = %sw.bb.41
  br label %error

if.end.46:                                        ; preds = %sw.bb.41
  %57 = load %struct._object*, %struct._object** %ob, align 8
  %58 = load i64, i64* %i, align 8
  %59 = load %struct._object*, %struct._object** %callargs, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyTupleObject*
  %ob_item47 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %60, i32 0, i32 1
  %arrayidx48 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item47, i32 0, i64 %58
  store %struct._object* %57, %struct._object** %arrayidx48, align 8
  br label %sw.epilog

sw.bb.49:                                         ; preds = %cond.end.24
  %61 = load %struct._object*, %struct._object** %defval, align 8
  %tobool = icmp ne %struct._object* %61, null
  br i1 %tobool, label %if.then.50, label %if.end.59

if.then.50:                                       ; preds = %sw.bb.49
  %62 = load %struct._object*, %struct._object** %defval, align 8
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt51, align 8
  %inc52 = add i64 %63, 1
  store i64 %inc52, i64* %ob_refcnt51, align 8
  %64 = load %struct._object*, %struct._object** %defval, align 8
  %65 = load i64, i64* %i, align 8
  %66 = load %struct._object*, %struct._object** %callargs, align 8
  %67 = bitcast %struct._object* %66 to %struct.PyTupleObject*
  %ob_item53 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %67, i32 0, i32 1
  %arrayidx54 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item53, i32 0, i64 %65
  store %struct._object* %64, %struct._object** %arrayidx54, align 8
  %68 = load i64, i64* %i, align 8
  %sh_prom55 = trunc i64 %68 to i32
  %shl56 = shl i32 1, %sh_prom55
  %69 = load i32*, i32** %poutmask.addr, align 8
  %70 = load i32, i32* %69, align 4
  %or57 = or i32 %70, %shl56
  store i32 %or57, i32* %69, align 4
  %71 = load i32*, i32** %pnumretvals.addr, align 8
  %72 = load i32, i32* %71, align 4
  %inc58 = add i32 %72, 1
  store i32 %inc58, i32* %71, align 4
  br label %sw.epilog

if.end.59:                                        ; preds = %sw.bb.49
  %73 = load i64, i64* %i, align 8
  %74 = load %struct._object*, %struct._object** %argtypes.addr, align 8
  %75 = bitcast %struct._object* %74 to %struct.PyTupleObject*
  %ob_item60 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %75, i32 0, i32 1
  %arrayidx61 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item60, i32 0, i64 %73
  %76 = load %struct._object*, %struct._object** %arrayidx61, align 8
  store %struct._object* %76, %struct._object** %ob, align 8
  %77 = load %struct._object*, %struct._object** %ob, align 8
  %call62 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %77)
  store %struct.StgDictObject* %call62, %struct.StgDictObject** %dict, align 8
  %78 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %cmp63 = icmp eq %struct.StgDictObject* %78, null
  br i1 %cmp63, label %if.then.65, label %if.end.67

if.then.65:                                       ; preds = %if.end.59
  %79 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %call66 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %79, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.139, i32 0, i32 0))
  br label %error

if.end.67:                                        ; preds = %if.end.59
  %80 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %80, i32 0, i32 5
  %81 = load %struct._object*, %struct._object** %proto, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 1
  %82 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %82, i32 0, i32 19
  %83 = load i64, i64* %tp_flags, align 8
  %and68 = and i64 %83, 268435456
  %cmp69 = icmp ne i64 %and68, 0
  br i1 %cmp69, label %if.then.71, label %if.end.73

if.then.71:                                       ; preds = %if.end.67
  %84 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %85 = load %struct._object*, %struct._object** %ob, align 8
  %86 = bitcast %struct._object* %85 to %struct._typeobject*
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %86, i32 0, i32 1
  %87 = load i8*, i8** %tp_name, align 8
  %call72 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %84, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.140, i32 0, i32 0), i8* %87)
  br label %error

if.end.73:                                        ; preds = %if.end.67
  %88 = load %struct._object*, %struct._object** %ob, align 8
  %ob_type74 = getelementptr inbounds %struct._object, %struct._object* %88, i32 0, i32 1
  %89 = load %struct._typeobject*, %struct._typeobject** %ob_type74, align 8
  %cmp75 = icmp eq %struct._typeobject* %89, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type to %struct._typeobject*)
  br i1 %cmp75, label %if.then.81, label %lor.lhs.false.77

lor.lhs.false.77:                                 ; preds = %if.end.73
  %90 = load %struct._object*, %struct._object** %ob, align 8
  %ob_type78 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 1
  %91 = load %struct._typeobject*, %struct._typeobject** %ob_type78, align 8
  %call79 = call i32 @PyType_IsSubtype(%struct._typeobject* %91, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type to %struct._typeobject*))
  %tobool80 = icmp ne i32 %call79, 0
  br i1 %tobool80, label %if.then.81, label %if.else.83

if.then.81:                                       ; preds = %lor.lhs.false.77, %if.end.73
  %92 = load %struct._object*, %struct._object** %ob, align 8
  %call82 = call %struct._object* @PyObject_CallObject(%struct._object* %92, %struct._object* null)
  store %struct._object* %call82, %struct._object** %ob, align 8
  br label %if.end.86

if.else.83:                                       ; preds = %lor.lhs.false.77
  %93 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto84 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %93, i32 0, i32 5
  %94 = load %struct._object*, %struct._object** %proto84, align 8
  %call85 = call %struct._object* @PyObject_CallObject(%struct._object* %94, %struct._object* null)
  store %struct._object* %call85, %struct._object** %ob, align 8
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.81
  %95 = load %struct._object*, %struct._object** %ob, align 8
  %cmp87 = icmp eq %struct._object* %95, null
  br i1 %cmp87, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %if.end.86
  br label %error

if.end.90:                                        ; preds = %if.end.86
  %96 = load %struct._object*, %struct._object** %ob, align 8
  %97 = load i64, i64* %i, align 8
  %98 = load %struct._object*, %struct._object** %callargs, align 8
  %99 = bitcast %struct._object* %98 to %struct.PyTupleObject*
  %ob_item91 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %99, i32 0, i32 1
  %arrayidx92 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item91, i32 0, i64 %97
  store %struct._object* %96, %struct._object** %arrayidx92, align 8
  %100 = load i64, i64* %i, align 8
  %sh_prom93 = trunc i64 %100 to i32
  %shl94 = shl i32 1, %sh_prom93
  %101 = load i32*, i32** %poutmask.addr, align 8
  %102 = load i32, i32* %101, align 4
  %or95 = or i32 %102, %shl94
  store i32 %or95, i32* %101, align 4
  %103 = load i32*, i32** %pnumretvals.addr, align 8
  %104 = load i32, i32* %103, align 4
  %inc96 = add i32 %104, 1
  store i32 %inc96, i32* %103, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end.24
  %105 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %106 = load i32, i32* %flag, align 4
  %call97 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %105, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.141, i32 0, i32 0), i32 %106)
  br label %error

sw.epilog:                                        ; preds = %if.end.90, %if.then.50, %if.end.46, %if.end.36
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %107 = load i64, i64* %i, align 8
  %inc98 = add i64 %107, 1
  store i64 %inc98, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %108 = load %struct._object*, %struct._object** %inargs.addr, align 8
  %109 = bitcast %struct._object* %108 to %struct.PyVarObject*
  %ob_size99 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %109, i32 0, i32 1
  %110 = load i64, i64* %ob_size99, align 8
  %111 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %tobool100 = icmp ne %struct._object* %111, null
  br i1 %tobool100, label %cond.true.101, label %cond.false.103

cond.true.101:                                    ; preds = %for.end
  %112 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call102 = call i64 @PyDict_Size(%struct._object* %112)
  br label %cond.end.104

cond.false.103:                                   ; preds = %for.end
  br label %cond.end.104

cond.end.104:                                     ; preds = %cond.false.103, %cond.true.101
  %cond105 = phi i64 [ %call102, %cond.true.101 ], [ 0, %cond.false.103 ]
  %add = add i64 %110, %cond105
  store i64 %add, i64* %actual_args, align 8
  %113 = load i64, i64* %actual_args, align 8
  %114 = load i32, i32* %inargs_index, align 4
  %conv106 = sext i32 %114 to i64
  %cmp107 = icmp ne i64 %113, %conv106
  br i1 %cmp107, label %if.then.109, label %if.end.111

if.then.109:                                      ; preds = %cond.end.104
  %115 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %116 = load i32, i32* %inargs_index, align 4
  %117 = load i64, i64* %actual_args, align 8
  %call110 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %115, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.142, i32 0, i32 0), i32 %116, i64 %117)
  br label %error

if.end.111:                                       ; preds = %cond.end.104
  %118 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %118, %struct._object** %retval
  br label %return

error:                                            ; preds = %if.then.109, %sw.default, %if.then.89, %if.then.71, %if.then.65, %if.then.45, %if.then.32
  br label %do.body

do.body:                                          ; preds = %error
  %119 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %119, %struct._object** %_py_decref_tmp, align 8
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt112 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 0
  %121 = load i64, i64* %ob_refcnt112, align 8
  %dec = add i64 %121, -1
  store i64 %dec, i64* %ob_refcnt112, align 8
  %cmp113 = icmp ne i64 %dec, 0
  br i1 %cmp113, label %if.then.115, label %if.else.116

if.then.115:                                      ; preds = %do.body
  br label %if.end.118

if.else.116:                                      ; preds = %do.body
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type117 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type117, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 4
  %124 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %124(%struct._object* %125)
  br label %if.end.118

if.end.118:                                       ; preds = %if.else.116, %if.then.115
  br label %do.end

do.end:                                           ; preds = %if.end.118
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.end.111, %if.then.7, %if.then
  %126 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %126
}

declare %struct._object* @_ctypes_callproc(i32 ()*, %struct._object*, i32, %struct._object*, %struct._object*, %struct._object*) #1

declare %struct._object* @PyObject_CallFunctionObjArgs(%struct._object*, ...) #1

; Function Attrs: uwtable
define internal %struct._object* @_build_result(%struct._object* %result, %struct._object* %callargs, i32 %outmask, i32 %inoutmask, i32 %numretvals) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %result.addr = alloca %struct._object*, align 8
  %callargs.addr = alloca %struct._object*, align 8
  %outmask.addr = alloca i32, align 4
  %inoutmask.addr = alloca i32, align 4
  %numretvals.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %index = alloca i32, align 4
  %bit = alloca i32, align 4
  %tup = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp9 = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp46 = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  %_py_decref_tmp101 = alloca %struct._object*, align 8
  store %struct._object* %result, %struct._object** %result.addr, align 8
  store %struct._object* %callargs, %struct._object** %callargs.addr, align 8
  store i32 %outmask, i32* %outmask.addr, align 4
  store i32 %inoutmask, i32* %inoutmask.addr, align 4
  store i32 %numretvals, i32* %numretvals.addr, align 4
  store %struct._object* null, %struct._object** %tup, align 8
  %0 = load %struct._object*, %struct._object** %callargs.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %result.addr, align 8
  store %struct._object* %1, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._object*, %struct._object** %result.addr, align 8
  %cmp1 = icmp eq %struct._object* %2, null
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %3 = load i32, i32* %numretvals.addr, align 4
  %cmp2 = icmp eq i32 %3, 0
  br i1 %cmp2, label %if.then.3, label %if.end.7

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.3
  %4 = load %struct._object*, %struct._object** %callargs.addr, align 8
  store %struct._object* %4, %struct._object** %_py_decref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 0
  %6 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body
  br label %if.end.6

if.else:                                          ; preds = %do.body
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 4
  %9 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %10 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %9(%struct._object* %10)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  %11 = load %struct._object*, %struct._object** %result.addr, align 8
  store %struct._object* %11, %struct._object** %retval
  br label %return

if.end.7:                                         ; preds = %lor.lhs.false
  br label %do.body.8

do.body.8:                                        ; preds = %if.end.7
  %12 = load %struct._object*, %struct._object** %result.addr, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp9, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_refcnt10 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt10, align 8
  %dec11 = add i64 %14, -1
  store i64 %dec11, i64* %ob_refcnt10, align 8
  %cmp12 = icmp ne i64 %dec11, 0
  br i1 %cmp12, label %if.then.13, label %if.else.14

if.then.13:                                       ; preds = %do.body.8
  br label %if.end.17

if.else.14:                                       ; preds = %do.body.8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %tp_dealloc16 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc16, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp9, align 8
  call void %17(%struct._object* %18)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.14, %if.then.13
  br label %do.end.18

do.end.18:                                        ; preds = %if.end.17
  %19 = load i32, i32* %numretvals.addr, align 4
  %cmp19 = icmp ugt i32 %19, 1
  br i1 %cmp19, label %if.then.20, label %if.end.37

if.then.20:                                       ; preds = %do.end.18
  %20 = load i32, i32* %numretvals.addr, align 4
  %conv = zext i32 %20 to i64
  %call = call %struct._object* @PyTuple_New(i64 %conv)
  store %struct._object* %call, %struct._object** %tup, align 8
  %21 = load %struct._object*, %struct._object** %tup, align 8
  %cmp21 = icmp eq %struct._object* %21, null
  br i1 %cmp21, label %if.then.23, label %if.end.36

if.then.23:                                       ; preds = %if.then.20
  br label %do.body.24

do.body.24:                                       ; preds = %if.then.23
  %22 = load %struct._object*, %struct._object** %callargs.addr, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp25, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %24, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.30, label %if.else.31

if.then.30:                                       ; preds = %do.body.24
  br label %if.end.34

if.else.31:                                       ; preds = %do.body.24
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type32 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type32, align 8
  %tp_dealloc33 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc33, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %27(%struct._object* %28)
  br label %if.end.34

if.end.34:                                        ; preds = %if.else.31, %if.then.30
  br label %do.end.35

do.end.35:                                        ; preds = %if.end.34
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.36:                                        ; preds = %if.then.20
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %do.end.18
  store i32 0, i32* %index, align 4
  store i32 1, i32* %bit, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.37
  %29 = load i32, i32* %i, align 4
  %cmp38 = icmp ult i32 %29, 32
  br i1 %cmp38, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %bit, align 4
  %31 = load i32, i32* %inoutmask.addr, align 4
  %and = and i32 %30, %31
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.40, label %if.else.62

if.then.40:                                       ; preds = %for.body
  %32 = load i32, i32* %i, align 4
  %idxprom = zext i32 %32 to i64
  %33 = load %struct._object*, %struct._object** %callargs.addr, align 8
  %34 = bitcast %struct._object* %33 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %34, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom
  %35 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %35, %struct._object** %v, align 8
  %36 = load %struct._object*, %struct._object** %v, align 8
  %ob_refcnt41 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt41, align 8
  %inc = add i64 %37, 1
  store i64 %inc, i64* %ob_refcnt41, align 8
  %38 = load i32, i32* %numretvals.addr, align 4
  %cmp42 = icmp eq i32 %38, 1
  br i1 %cmp42, label %if.then.44, label %if.end.57

if.then.44:                                       ; preds = %if.then.40
  br label %do.body.45

do.body.45:                                       ; preds = %if.then.44
  %39 = load %struct._object*, %struct._object** %callargs.addr, align 8
  store %struct._object* %39, %struct._object** %_py_decref_tmp46, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_refcnt47 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0
  %41 = load i64, i64* %ob_refcnt47, align 8
  %dec48 = add i64 %41, -1
  store i64 %dec48, i64* %ob_refcnt47, align 8
  %cmp49 = icmp ne i64 %dec48, 0
  br i1 %cmp49, label %if.then.51, label %if.else.52

if.then.51:                                       ; preds = %do.body.45
  br label %if.end.55

if.else.52:                                       ; preds = %do.body.45
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  %ob_type53 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type53, align 8
  %tp_dealloc54 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc54, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp46, align 8
  call void %44(%struct._object* %45)
  br label %if.end.55

if.end.55:                                        ; preds = %if.else.52, %if.then.51
  br label %do.end.56

do.end.56:                                        ; preds = %if.end.55
  %46 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %46, %struct._object** %retval
  br label %return

if.end.57:                                        ; preds = %if.then.40
  %47 = load %struct._object*, %struct._object** %v, align 8
  %48 = load i32, i32* %index, align 4
  %idxprom58 = zext i32 %48 to i64
  %49 = load %struct._object*, %struct._object** %tup, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyTupleObject*
  %ob_item59 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %50, i32 0, i32 1
  %arrayidx60 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item59, i32 0, i64 %idxprom58
  store %struct._object* %47, %struct._object** %arrayidx60, align 8
  %51 = load i32, i32* %index, align 4
  %inc61 = add i32 %51, 1
  store i32 %inc61, i32* %index, align 4
  br label %if.end.94

if.else.62:                                       ; preds = %for.body
  %52 = load i32, i32* %bit, align 4
  %53 = load i32, i32* %outmask.addr, align 4
  %and63 = and i32 %52, %53
  %tobool64 = icmp ne i32 %and63, 0
  br i1 %tobool64, label %if.then.65, label %if.end.93

if.then.65:                                       ; preds = %if.else.62
  %54 = load i32, i32* %i, align 4
  %idxprom66 = zext i32 %54 to i64
  %55 = load %struct._object*, %struct._object** %callargs.addr, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyTupleObject*
  %ob_item67 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %56, i32 0, i32 1
  %arrayidx68 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item67, i32 0, i64 %idxprom66
  %57 = load %struct._object*, %struct._object** %arrayidx68, align 8
  store %struct._object* %57, %struct._object** %v, align 8
  %58 = load %struct._object*, %struct._object** %v, align 8
  %call69 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId_SizeT(%struct._object* %58, %struct._Py_Identifier* @_build_result.PyId___ctypes_from_outparam__, i8* null)
  store %struct._object* %call69, %struct._object** %v, align 8
  %59 = load %struct._object*, %struct._object** %v, align 8
  %cmp70 = icmp eq %struct._object* %59, null
  br i1 %cmp70, label %if.then.75, label %lor.lhs.false.72

lor.lhs.false.72:                                 ; preds = %if.then.65
  %60 = load i32, i32* %numretvals.addr, align 4
  %cmp73 = icmp eq i32 %60, 1
  br i1 %cmp73, label %if.then.75, label %if.end.88

if.then.75:                                       ; preds = %lor.lhs.false.72, %if.then.65
  br label %do.body.76

do.body.76:                                       ; preds = %if.then.75
  %61 = load %struct._object*, %struct._object** %callargs.addr, align 8
  store %struct._object* %61, %struct._object** %_py_decref_tmp77, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 0
  %63 = load i64, i64* %ob_refcnt78, align 8
  %dec79 = add i64 %63, -1
  store i64 %dec79, i64* %ob_refcnt78, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %do.body.76
  br label %if.end.86

if.else.83:                                       ; preds = %do.body.76
  %64 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %64, i32 0, i32 1
  %65 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %65, i32 0, i32 4
  %66 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %66(%struct._object* %67)
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  %68 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %68, %struct._object** %retval
  br label %return

if.end.88:                                        ; preds = %lor.lhs.false.72
  %69 = load %struct._object*, %struct._object** %v, align 8
  %70 = load i32, i32* %index, align 4
  %idxprom89 = zext i32 %70 to i64
  %71 = load %struct._object*, %struct._object** %tup, align 8
  %72 = bitcast %struct._object* %71 to %struct.PyTupleObject*
  %ob_item90 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %72, i32 0, i32 1
  %arrayidx91 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item90, i32 0, i64 %idxprom89
  store %struct._object* %69, %struct._object** %arrayidx91, align 8
  %73 = load i32, i32* %index, align 4
  %inc92 = add i32 %73, 1
  store i32 %inc92, i32* %index, align 4
  br label %if.end.93

if.end.93:                                        ; preds = %if.end.88, %if.else.62
  br label %if.end.94

if.end.94:                                        ; preds = %if.end.93, %if.end.57
  %74 = load i32, i32* %index, align 4
  %75 = load i32, i32* %numretvals.addr, align 4
  %cmp95 = icmp eq i32 %74, %75
  br i1 %cmp95, label %if.then.97, label %if.end.98

if.then.97:                                       ; preds = %if.end.94
  br label %for.end

if.end.98:                                        ; preds = %if.end.94
  br label %for.inc

for.inc:                                          ; preds = %if.end.98
  %76 = load i32, i32* %i, align 4
  %inc99 = add i32 %76, 1
  store i32 %inc99, i32* %i, align 4
  %77 = load i32, i32* %bit, align 4
  %shl = shl i32 %77, 1
  store i32 %shl, i32* %bit, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.97, %for.cond
  br label %do.body.100

do.body.100:                                      ; preds = %for.end
  %78 = load %struct._object*, %struct._object** %callargs.addr, align 8
  store %struct._object* %78, %struct._object** %_py_decref_tmp101, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp101, align 8
  %ob_refcnt102 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 0
  %80 = load i64, i64* %ob_refcnt102, align 8
  %dec103 = add i64 %80, -1
  store i64 %dec103, i64* %ob_refcnt102, align 8
  %cmp104 = icmp ne i64 %dec103, 0
  br i1 %cmp104, label %if.then.106, label %if.else.107

if.then.106:                                      ; preds = %do.body.100
  br label %if.end.110

if.else.107:                                      ; preds = %do.body.100
  %81 = load %struct._object*, %struct._object** %_py_decref_tmp101, align 8
  %ob_type108 = getelementptr inbounds %struct._object, %struct._object* %81, i32 0, i32 1
  %82 = load %struct._typeobject*, %struct._typeobject** %ob_type108, align 8
  %tp_dealloc109 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %82, i32 0, i32 4
  %83 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc109, align 8
  %84 = load %struct._object*, %struct._object** %_py_decref_tmp101, align 8
  call void %83(%struct._object* %84)
  br label %if.end.110

if.end.110:                                       ; preds = %if.else.107, %if.then.106
  br label %do.end.111

do.end.111:                                       ; preds = %if.end.110
  %85 = load %struct._object*, %struct._object** %tup, align 8
  store %struct._object* %85, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.111, %do.end.87, %do.end.56, %do.end.35, %do.end, %if.then
  %86 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %86
}

; Function Attrs: uwtable
define internal %struct._object* @_get_arg(i32* %pindex, %struct._object* %name, %struct._object* %defval, %struct._object* %inargs, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %pindex.addr = alloca i32*, align 8
  %name.addr = alloca %struct._object*, align 8
  %defval.addr = alloca %struct._object*, align 8
  %inargs.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %v = alloca %struct._object*, align 8
  store i32* %pindex, i32** %pindex.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  store %struct._object* %defval, %struct._object** %defval.addr, align 8
  store %struct._object* %inargs, %struct._object** %inargs.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load i32*, i32** %pindex.addr, align 8
  %1 = load i32, i32* %0, align 4
  %conv = sext i32 %1 to i64
  %2 = load %struct._object*, %struct._object** %inargs.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %cmp = icmp slt i64 %conv, %4
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %5 = load i32*, i32** %pindex.addr, align 8
  %6 = load i32, i32* %5, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct._object*, %struct._object** %inargs.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %8, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom
  %9 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %9, %struct._object** %v, align 8
  %10 = load i32*, i32** %pindex.addr, align 8
  %11 = load i32, i32* %10, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %10, align 4
  %12 = load %struct._object*, %struct._object** %v, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt, align 8
  %inc2 = add i64 %13, 1
  store i64 %inc2, i64* %ob_refcnt, align 8
  %14 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %14, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %15 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %tobool = icmp ne %struct._object* %15, null
  br i1 %tobool, label %land.lhs.true, label %if.end.10

land.lhs.true:                                    ; preds = %if.end
  %16 = load %struct._object*, %struct._object** %name.addr, align 8
  %tobool3 = icmp ne %struct._object* %16, null
  br i1 %tobool3, label %land.lhs.true.4, label %if.end.10

land.lhs.true.4:                                  ; preds = %land.lhs.true
  %17 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %18 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call %struct._object* @PyDict_GetItem(%struct._object* %17, %struct._object* %18)
  store %struct._object* %call, %struct._object** %v, align 8
  %tobool5 = icmp ne %struct._object* %call, null
  br i1 %tobool5, label %if.then.6, label %if.end.10

if.then.6:                                        ; preds = %land.lhs.true.4
  %19 = load i32*, i32** %pindex.addr, align 8
  %20 = load i32, i32* %19, align 4
  %inc7 = add i32 %20, 1
  store i32 %inc7, i32* %19, align 4
  %21 = load %struct._object*, %struct._object** %v, align 8
  %ob_refcnt8 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt8, align 8
  %inc9 = add i64 %22, 1
  store i64 %inc9, i64* %ob_refcnt8, align 8
  %23 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

if.end.10:                                        ; preds = %land.lhs.true.4, %land.lhs.true, %if.end
  %24 = load %struct._object*, %struct._object** %defval.addr, align 8
  %tobool11 = icmp ne %struct._object* %24, null
  br i1 %tobool11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %if.end.10
  %25 = load %struct._object*, %struct._object** %defval.addr, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt13, align 8
  %inc14 = add i64 %26, 1
  store i64 %inc14, i64* %ob_refcnt13, align 8
  %27 = load %struct._object*, %struct._object** %defval.addr, align 8
  store %struct._object* %27, %struct._object** %retval
  br label %return

if.end.15:                                        ; preds = %if.end.10
  %28 = load %struct._object*, %struct._object** %name.addr, align 8
  %tobool16 = icmp ne %struct._object* %28, null
  br i1 %tobool16, label %if.then.17, label %if.else

if.then.17:                                       ; preds = %if.end.15
  %29 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %30 = load %struct._object*, %struct._object** %name.addr, align 8
  %call18 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %29, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.143, i32 0, i32 0), %struct._object* %30)
  br label %if.end.20

if.else:                                          ; preds = %if.end.15
  %31 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %call19 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %31, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.144, i32 0, i32 0))
  br label %if.end.20

if.end.20:                                        ; preds = %if.else, %if.then.17
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.20, %if.then.12, %if.then.6, %if.then
  %32 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %32
}

declare i64 @PyDict_Size(%struct._object*) #1

declare %struct._object* @_PyObject_CallMethodId_SizeT(%struct._object*, %struct._Py_Identifier*, i8*, ...) #1

; Function Attrs: nounwind uwtable
define internal %struct._object* @PyCFuncPtr_get_errcheck(%struct.PyCFuncPtrObject* %self) #6 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %0, i32 0, i32 15
  %1 = load %struct._object*, %struct._object** %errcheck, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck1 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %2, i32 0, i32 15
  %3 = load %struct._object*, %struct._object** %errcheck1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck2 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %5, i32 0, i32 15
  %6 = load %struct._object*, %struct._object** %errcheck2, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc3 = add i64 %7, 1
  store i64 %inc3, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: uwtable
define internal i32 @PyCFuncPtr_set_errcheck(%struct.PyCFuncPtrObject* %self, %struct._object* %ob) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %ob.addr = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  store %struct._object* %ob, %struct._object** %ob.addr, align 8
  %0 = load %struct._object*, %struct._object** %ob.addr, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %ob.addr, align 8
  %call = call i32 @PyCallable_Check(%struct._object* %1)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %2 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.151, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  br label %do.body

do.body:                                          ; preds = %if.end
  %3 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %3, i32 0, i32 15
  %4 = load %struct._object*, %struct._object** %errcheck, align 8
  store %struct._object* %4, %struct._object** %_py_xdecref_tmp, align 8
  %5 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %5, null
  br i1 %cmp, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %do.body
  br label %do.body.3

do.body.3:                                        ; preds = %if.then.2
  %6 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %do.body.3
  br label %if.end.6

if.else:                                          ; preds = %do.body.3
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end.6

if.end.6:                                         ; preds = %if.else, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end.6
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %do.body
  br label %do.end.8

do.end.8:                                         ; preds = %if.end.7
  br label %do.body.9

do.body.9:                                        ; preds = %do.end.8
  %13 = load %struct._object*, %struct._object** %ob.addr, align 8
  store %struct._object* %13, %struct._object** %_py_xincref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp10 = icmp ne %struct._object* %14, null
  br i1 %cmp10, label %if.then.11, label %if.end.13

if.then.11:                                       ; preds = %do.body.9
  %15 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt12 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt12, align 8
  %inc = add i64 %16, 1
  store i64 %inc, i64* %ob_refcnt12, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.11, %do.body.9
  br label %do.end.14

do.end.14:                                        ; preds = %if.end.13
  %17 = load %struct._object*, %struct._object** %ob.addr, align 8
  %18 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %errcheck15 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %18, i32 0, i32 15
  store %struct._object* %17, %struct._object** %errcheck15, align 8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.14, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

; Function Attrs: uwtable
define internal %struct._object* @PyCFuncPtr_get_restype(%struct.PyCFuncPtrObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %0, i32 0, i32 13
  %1 = load %struct._object*, %struct._object** %restype, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype1 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %2, i32 0, i32 13
  %3 = load %struct._object*, %struct._object** %restype1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype2 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %5, i32 0, i32 13
  %6 = load %struct._object*, %struct._object** %restype2, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %8 = bitcast %struct.PyCFuncPtrObject* %7 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %8)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %restype3 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 11
  %10 = load %struct._object*, %struct._object** %restype3, align 8
  %tobool4 = icmp ne %struct._object* %10, null
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %restype6 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 11
  %12 = load %struct._object*, %struct._object** %restype6, align 8
  %ob_refcnt7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt7, align 8
  %inc8 = add i64 %13, 1
  store i64 %inc8, i64* %ob_refcnt7, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %restype9 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 11
  %15 = load %struct._object*, %struct._object** %restype9, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %if.end
  %16 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc10 = add i64 %16, 1
  store i64 %inc10, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.5, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: uwtable
define internal i32 @PyCFuncPtr_set_restype(%struct.PyCFuncPtrObject* %self, %struct._object* %ob) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %ob.addr = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp15 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  %_py_xdecref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  store %struct._object* %ob, %struct._object** %ob.addr, align 8
  %0 = load %struct._object*, %struct._object** %ob.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end.27

if.then:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %1 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %1, i32 0, i32 13
  %2 = load %struct._object*, %struct._object** %restype, align 8
  store %struct._object* %2, %struct._object** %_py_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp1 = icmp ne %struct._object* %3, null
  br i1 %cmp1, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %do.body
  %4 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype3 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %4, i32 0, i32 13
  store %struct._object* null, %struct._object** %restype3, align 8
  br label %do.body.4

do.body.4:                                        ; preds = %if.then.2
  %5 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp5 = icmp ne i64 %dec, 0
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %do.body.4
  br label %if.end

if.else:                                          ; preds = %do.body.4
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.6
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %do.body
  br label %do.end.8

do.end.8:                                         ; preds = %if.end.7
  br label %do.body.9

do.body.9:                                        ; preds = %do.end.8
  %12 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %12, i32 0, i32 14
  %13 = load %struct._object*, %struct._object** %checker, align 8
  store %struct._object* %13, %struct._object** %_py_tmp10, align 8
  %14 = load %struct._object*, %struct._object** %_py_tmp10, align 8
  %cmp11 = icmp ne %struct._object* %14, null
  br i1 %cmp11, label %if.then.12, label %if.end.25

if.then.12:                                       ; preds = %do.body.9
  %15 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker13 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %15, i32 0, i32 14
  store %struct._object* null, %struct._object** %checker13, align 8
  br label %do.body.14

do.body.14:                                       ; preds = %if.then.12
  %16 = load %struct._object*, %struct._object** %_py_tmp10, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp15, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt16, align 8
  %dec17 = add i64 %18, -1
  store i64 %dec17, i64* %ob_refcnt16, align 8
  %cmp18 = icmp ne i64 %dec17, 0
  br i1 %cmp18, label %if.then.19, label %if.else.20

if.then.19:                                       ; preds = %do.body.14
  br label %if.end.23

if.else.20:                                       ; preds = %do.body.14
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  %ob_type21 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type21, align 8
  %tp_dealloc22 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc22, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp15, align 8
  call void %21(%struct._object* %22)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.20, %if.then.19
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %if.end.25

if.end.25:                                        ; preds = %do.end.24, %do.body.9
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  store i32 0, i32* %retval
  br label %return

if.end.27:                                        ; preds = %entry
  %23 = load %struct._object*, %struct._object** %ob.addr, align 8
  %cmp28 = icmp ne %struct._object* %23, @_Py_NoneStruct
  br i1 %cmp28, label %land.lhs.true, label %if.end.33

land.lhs.true:                                    ; preds = %if.end.27
  %24 = load %struct._object*, %struct._object** %ob.addr, align 8
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %24)
  %tobool = icmp ne %struct.StgDictObject* %call, null
  br i1 %tobool, label %if.end.33, label %land.lhs.true.29

land.lhs.true.29:                                 ; preds = %land.lhs.true
  %25 = load %struct._object*, %struct._object** %ob.addr, align 8
  %call30 = call i32 @PyCallable_Check(%struct._object* %25)
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.end.33, label %if.then.32

if.then.32:                                       ; preds = %land.lhs.true.29
  %26 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %26, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.152, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.33:                                        ; preds = %land.lhs.true.29, %land.lhs.true, %if.end.27
  br label %do.body.34

do.body.34:                                       ; preds = %if.end.33
  %27 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker35 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %27, i32 0, i32 14
  %28 = load %struct._object*, %struct._object** %checker35, align 8
  store %struct._object* %28, %struct._object** %_py_xdecref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp36 = icmp ne %struct._object* %29, null
  br i1 %cmp36, label %if.then.37, label %if.end.49

if.then.37:                                       ; preds = %do.body.34
  br label %do.body.38

do.body.38:                                       ; preds = %if.then.37
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp39, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %32, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %35(%struct._object* %36)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %do.body.34
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %37 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype53 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %37, i32 0, i32 13
  %38 = load %struct._object*, %struct._object** %restype53, align 8
  store %struct._object* %38, %struct._object** %_py_xdecref_tmp52, align 8
  %39 = load %struct._object*, %struct._object** %_py_xdecref_tmp52, align 8
  %cmp54 = icmp ne %struct._object* %39, null
  br i1 %cmp54, label %if.then.55, label %if.end.67

if.then.55:                                       ; preds = %do.body.51
  br label %do.body.56

do.body.56:                                       ; preds = %if.then.55
  %40 = load %struct._object*, %struct._object** %_py_xdecref_tmp52, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp57, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %42, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %45(%struct._object* %46)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %if.end.67

if.end.67:                                        ; preds = %do.end.66, %do.body.51
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  %47 = load %struct._object*, %struct._object** %ob.addr, align 8
  %ob_refcnt69 = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt69, align 8
  %inc = add i64 %48, 1
  store i64 %inc, i64* %ob_refcnt69, align 8
  %49 = load %struct._object*, %struct._object** %ob.addr, align 8
  %50 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %restype70 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %50, i32 0, i32 13
  store %struct._object* %49, %struct._object** %restype70, align 8
  %51 = load %struct._object*, %struct._object** %ob.addr, align 8
  %call71 = call %struct._object* @PyObject_GetAttrString(%struct._object* %51, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.111, i32 0, i32 0))
  %52 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker72 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %52, i32 0, i32 14
  store %struct._object* %call71, %struct._object** %checker72, align 8
  %53 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %checker73 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %53, i32 0, i32 14
  %54 = load %struct._object*, %struct._object** %checker73, align 8
  %cmp74 = icmp eq %struct._object* %54, null
  br i1 %cmp74, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %do.end.68
  call void @PyErr_Clear()
  br label %if.end.76

if.end.76:                                        ; preds = %if.then.75, %do.end.68
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.76, %if.then.32, %do.end.26
  %55 = load i32, i32* %retval
  ret i32 %55
}

; Function Attrs: uwtable
define internal %struct._object* @PyCFuncPtr_get_argtypes(%struct.PyCFuncPtrObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  %0 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %0, i32 0, i32 12
  %1 = load %struct._object*, %struct._object** %argtypes, align 8
  %tobool = icmp ne %struct._object* %1, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes1 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %2, i32 0, i32 12
  %3 = load %struct._object*, %struct._object** %argtypes1, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes2 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %5, i32 0, i32 12
  %6 = load %struct._object*, %struct._object** %argtypes2, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %8 = bitcast %struct.PyCFuncPtrObject* %7 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %8)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes3 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 9
  %10 = load %struct._object*, %struct._object** %argtypes3, align 8
  %tobool4 = icmp ne %struct._object* %10, null
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes6 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 9
  %12 = load %struct._object*, %struct._object** %argtypes6, align 8
  %ob_refcnt7 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 0
  %13 = load i64, i64* %ob_refcnt7, align 8
  %inc8 = add i64 %13, 1
  store i64 %inc8, i64* %ob_refcnt7, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes9 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 9
  %15 = load %struct._object*, %struct._object** %argtypes9, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %if.end
  %16 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc10 = add i64 %16, 1
  store i64 %inc10, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else, %if.then.5, %if.then
  %17 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %17
}

; Function Attrs: uwtable
define internal i32 @PyCFuncPtr_set_argtypes(%struct.PyCFuncPtrObject* %self, %struct._object* %ob) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.PyCFuncPtrObject*, align 8
  %ob.addr = alloca %struct._object*, align 8
  %converters = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_tmp12 = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp37 = alloca %struct._object*, align 8
  %_py_xdecref_tmp51 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  store %struct.PyCFuncPtrObject* %self, %struct.PyCFuncPtrObject** %self.addr, align 8
  store %struct._object* %ob, %struct._object** %ob.addr, align 8
  %0 = load %struct._object*, %struct._object** %ob.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct._object*, %struct._object** %ob.addr, align 8
  %cmp1 = icmp eq %struct._object* %1, @_Py_NoneStruct
  br i1 %cmp1, label %if.then, label %if.else.29

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %do.body

do.body:                                          ; preds = %if.then
  %2 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters2 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %2, i32 0, i32 11
  %3 = load %struct._object*, %struct._object** %converters2, align 8
  store %struct._object* %3, %struct._object** %_py_tmp, align 8
  %4 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp3 = icmp ne %struct._object* %4, null
  br i1 %cmp3, label %if.then.4, label %if.end.9

if.then.4:                                        ; preds = %do.body
  %5 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters5 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %5, i32 0, i32 11
  store %struct._object* null, %struct._object** %converters5, align 8
  br label %do.body.6

do.body.6:                                        ; preds = %if.then.4
  %6 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %6, %struct._object** %_py_decref_tmp, align 8
  %7 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 0
  %8 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body.6
  br label %if.end

if.else:                                          ; preds = %do.body.6
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 4
  %11 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %12 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %11(%struct._object* %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.9

if.end.9:                                         ; preds = %do.end, %do.body
  br label %do.end.10

do.end.10:                                        ; preds = %if.end.9
  br label %do.body.11

do.body.11:                                       ; preds = %do.end.10
  %13 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %13, i32 0, i32 12
  %14 = load %struct._object*, %struct._object** %argtypes, align 8
  store %struct._object* %14, %struct._object** %_py_tmp12, align 8
  %15 = load %struct._object*, %struct._object** %_py_tmp12, align 8
  %cmp13 = icmp ne %struct._object* %15, null
  br i1 %cmp13, label %if.then.14, label %if.end.27

if.then.14:                                       ; preds = %do.body.11
  %16 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes15 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %16, i32 0, i32 12
  store %struct._object* null, %struct._object** %argtypes15, align 8
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.14
  %17 = load %struct._object*, %struct._object** %_py_tmp12, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp17, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %19, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %22(%struct._object* %23)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %if.end.27

if.end.27:                                        ; preds = %do.end.26, %do.body.11
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  br label %if.end.70

if.else.29:                                       ; preds = %lor.lhs.false
  %24 = load %struct._object*, %struct._object** %ob.addr, align 8
  %call = call %struct._object* @converters_from_argtypes(%struct._object* %24)
  store %struct._object* %call, %struct._object** %converters, align 8
  %25 = load %struct._object*, %struct._object** %converters, align 8
  %tobool = icmp ne %struct._object* %25, null
  br i1 %tobool, label %if.end.31, label %if.then.30

if.then.30:                                       ; preds = %if.else.29
  store i32 -1, i32* %retval
  br label %return

if.end.31:                                        ; preds = %if.else.29
  br label %do.body.32

do.body.32:                                       ; preds = %if.end.31
  %26 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters33 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %26, i32 0, i32 11
  %27 = load %struct._object*, %struct._object** %converters33, align 8
  store %struct._object* %27, %struct._object** %_py_xdecref_tmp, align 8
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp34 = icmp ne %struct._object* %28, null
  br i1 %cmp34, label %if.then.35, label %if.end.47

if.then.35:                                       ; preds = %do.body.32
  br label %do.body.36

do.body.36:                                       ; preds = %if.then.35
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp37, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_refcnt38 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt38, align 8
  %dec39 = add i64 %31, -1
  store i64 %dec39, i64* %ob_refcnt38, align 8
  %cmp40 = icmp ne i64 %dec39, 0
  br i1 %cmp40, label %if.then.41, label %if.else.42

if.then.41:                                       ; preds = %do.body.36
  br label %if.end.45

if.else.42:                                       ; preds = %do.body.36
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %tp_dealloc44 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc44, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp37, align 8
  call void %34(%struct._object* %35)
  br label %if.end.45

if.end.45:                                        ; preds = %if.else.42, %if.then.41
  br label %do.end.46

do.end.46:                                        ; preds = %if.end.45
  br label %if.end.47

if.end.47:                                        ; preds = %do.end.46, %do.body.32
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  %36 = load %struct._object*, %struct._object** %converters, align 8
  %37 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %converters49 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %37, i32 0, i32 11
  store %struct._object* %36, %struct._object** %converters49, align 8
  br label %do.body.50

do.body.50:                                       ; preds = %do.end.48
  %38 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes52 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %38, i32 0, i32 12
  %39 = load %struct._object*, %struct._object** %argtypes52, align 8
  store %struct._object* %39, %struct._object** %_py_xdecref_tmp51, align 8
  %40 = load %struct._object*, %struct._object** %_py_xdecref_tmp51, align 8
  %cmp53 = icmp ne %struct._object* %40, null
  br i1 %cmp53, label %if.then.54, label %if.end.66

if.then.54:                                       ; preds = %do.body.50
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.54
  %41 = load %struct._object*, %struct._object** %_py_xdecref_tmp51, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp56, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %43, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %46(%struct._object* %47)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %if.end.66

if.end.66:                                        ; preds = %do.end.65, %do.body.50
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  %48 = load %struct._object*, %struct._object** %ob.addr, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt68, align 8
  %inc = add i64 %49, 1
  store i64 %inc, i64* %ob_refcnt68, align 8
  %50 = load %struct._object*, %struct._object** %ob.addr, align 8
  %51 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self.addr, align 8
  %argtypes69 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %51, i32 0, i32 12
  store %struct._object* %50, %struct._object** %argtypes69, align 8
  br label %if.end.70

if.end.70:                                        ; preds = %do.end.67, %do.end.28
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.70, %if.then.30
  %52 = load i32, i32* %retval
  ret i32 %52
}

; Function Attrs: uwtable
define internal %struct._object* @PyCFuncPtr_FromDll(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %name = alloca i8*, align 8
  %address = alloca i32 ()*, align 8
  %ftuple = alloca %struct._object*, align 8
  %dll = alloca %struct._object*, align 8
  %obj = alloca %struct._object*, align 8
  %self = alloca %struct.PyCFuncPtrObject*, align 8
  %handle = alloca i8*, align 8
  %paramflags = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp18 = alloca %struct._object*, align 8
  %_py_decref_tmp33 = alloca %struct._object*, align 8
  %_py_decref_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  %_py_decref_tmp87 = alloca %struct._object*, align 8
  %_py_decref_tmp100 = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp130 = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store %struct._object* null, %struct._object** %paramflags, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.156, i32 0, i32 0), %struct._object** %ftuple, %struct._object** %paramflags)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %paramflags, align 8
  %cmp = icmp eq %struct._object* %1, @_Py_NoneStruct
  br i1 %cmp, label %if.then.1, label %if.end.2

if.then.1:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %paramflags, align 8
  br label %if.end.2

if.end.2:                                         ; preds = %if.then.1, %if.end
  %2 = load %struct._object*, %struct._object** %ftuple, align 8
  %call3 = call %struct._object* @PySequence_Tuple(%struct._object* %2)
  store %struct._object* %call3, %struct._object** %ftuple, align 8
  %3 = load %struct._object*, %struct._object** %ftuple, align 8
  %tobool4 = icmp ne %struct._object* %3, null
  br i1 %tobool4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end.2
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.6:                                         ; preds = %if.end.2
  %4 = load %struct._object*, %struct._object** %ftuple, align 8
  %call7 = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.157, i32 0, i32 0), i32 (%struct._object*, i8**)* @_get_name, i8** %name, %struct._object** %dll)
  %tobool8 = icmp ne i32 %call7, 0
  br i1 %tobool8, label %if.end.13, label %if.then.9

if.then.9:                                        ; preds = %if.end.6
  br label %do.body

do.body:                                          ; preds = %if.then.9
  %5 = load %struct._object*, %struct._object** %ftuple, align 8
  store %struct._object* %5, %struct._object** %_py_decref_tmp, align 8
  %6 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp10 = icmp ne i64 %dec, 0
  br i1 %cmp10, label %if.then.11, label %if.else

if.then.11:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 4
  %10 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %10(%struct._object* %11)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.11
  br label %do.end

do.end:                                           ; preds = %if.end.12
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.end.6
  %12 = load %struct._object*, %struct._object** %dll, align 8
  %call14 = call %struct._object* @PyObject_GetAttrString(%struct._object* %12, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.67, i32 0, i32 0))
  store %struct._object* %call14, %struct._object** %obj, align 8
  %13 = load %struct._object*, %struct._object** %obj, align 8
  %tobool15 = icmp ne %struct._object* %13, null
  br i1 %tobool15, label %if.end.28, label %if.then.16

if.then.16:                                       ; preds = %if.end.13
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.16
  %14 = load %struct._object*, %struct._object** %ftuple, align 8
  store %struct._object* %14, %struct._object** %_py_decref_tmp18, align 8
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt19, align 8
  %dec20 = add i64 %16, -1
  store i64 %dec20, i64* %ob_refcnt19, align 8
  %cmp21 = icmp ne i64 %dec20, 0
  br i1 %cmp21, label %if.then.22, label %if.else.23

if.then.22:                                       ; preds = %do.body.17
  br label %if.end.26

if.else.23:                                       ; preds = %do.body.17
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  %ob_type24 = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 1
  %18 = load %struct._typeobject*, %struct._typeobject** %ob_type24, align 8
  %tp_dealloc25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %18, i32 0, i32 4
  %19 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc25, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp18, align 8
  call void %19(%struct._object* %20)
  br label %if.end.26

if.end.26:                                        ; preds = %if.else.23, %if.then.22
  br label %do.end.27

do.end.27:                                        ; preds = %if.end.26
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %if.end.13
  %21 = load %struct._object*, %struct._object** %obj, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 19
  %23 = load i64, i64* %tp_flags, align 8
  %and = and i64 %23, 16777216
  %cmp30 = icmp ne i64 %and, 0
  br i1 %cmp30, label %if.end.54, label %if.then.31

if.then.31:                                       ; preds = %if.end.28
  %24 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %24, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.68, i32 0, i32 0))
  br label %do.body.32

do.body.32:                                       ; preds = %if.then.31
  %25 = load %struct._object*, %struct._object** %ftuple, align 8
  store %struct._object* %25, %struct._object** %_py_decref_tmp33, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_refcnt34 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt34, align 8
  %dec35 = add i64 %27, -1
  store i64 %dec35, i64* %ob_refcnt34, align 8
  %cmp36 = icmp ne i64 %dec35, 0
  br i1 %cmp36, label %if.then.37, label %if.else.38

if.then.37:                                       ; preds = %do.body.32
  br label %if.end.41

if.else.38:                                       ; preds = %do.body.32
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  %ob_type39 = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 1
  %29 = load %struct._typeobject*, %struct._typeobject** %ob_type39, align 8
  %tp_dealloc40 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %29, i32 0, i32 4
  %30 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc40, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp33, align 8
  call void %30(%struct._object* %31)
  br label %if.end.41

if.end.41:                                        ; preds = %if.else.38, %if.then.37
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  br label %do.body.43

do.body.43:                                       ; preds = %do.end.42
  %32 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp44, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt45, align 8
  %dec46 = add i64 %34, -1
  store i64 %dec46, i64* %ob_refcnt45, align 8
  %cmp47 = icmp ne i64 %dec46, 0
  br i1 %cmp47, label %if.then.48, label %if.else.49

if.then.48:                                       ; preds = %do.body.43
  br label %if.end.52

if.else.49:                                       ; preds = %do.body.43
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_type50 = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type50, align 8
  %tp_dealloc51 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc51, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  call void %37(%struct._object* %38)
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.49, %if.then.48
  br label %do.end.53

do.end.53:                                        ; preds = %if.end.52
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.54:                                        ; preds = %if.end.28
  %39 = load %struct._object*, %struct._object** %obj, align 8
  %call55 = call i8* @PyLong_AsVoidPtr(%struct._object* %39)
  store i8* %call55, i8** %handle, align 8
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.54
  %40 = load %struct._object*, %struct._object** %obj, align 8
  store %struct._object* %40, %struct._object** %_py_decref_tmp57, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 0
  %42 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %42, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 1
  %44 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %44, i32 0, i32 4
  %45 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %45(%struct._object* %46)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  %call67 = call %struct._object* @PyErr_Occurred()
  %tobool68 = icmp ne %struct._object* %call67, null
  br i1 %tobool68, label %if.then.69, label %if.end.81

if.then.69:                                       ; preds = %do.end.66
  %47 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %47, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.69, i32 0, i32 0))
  br label %do.body.70

do.body.70:                                       ; preds = %if.then.69
  %48 = load %struct._object*, %struct._object** %ftuple, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp71, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt72, align 8
  %dec73 = add i64 %50, -1
  store i64 %dec73, i64* %ob_refcnt72, align 8
  %cmp74 = icmp ne i64 %dec73, 0
  br i1 %cmp74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.70
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.70
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  call void %53(%struct._object* %54)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.81:                                        ; preds = %do.end.66
  %55 = load i8*, i8** %handle, align 8
  %56 = load i8*, i8** %name, align 8
  %call82 = call i8* @dlsym(i8* %55, i8* %56) #4
  %57 = bitcast i8* %call82 to i32 ()*
  store i32 ()* %57, i32 ()** %address, align 8
  %58 = load i32 ()*, i32 ()** %address, align 8
  %tobool83 = icmp ne i32 ()* %58, null
  br i1 %tobool83, label %if.end.97, label %if.then.84

if.then.84:                                       ; preds = %if.end.81
  %59 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call85 = call i8* @dlerror() #4
  call void @PyErr_SetString(%struct._object* %59, i8* %call85)
  br label %do.body.86

do.body.86:                                       ; preds = %if.then.84
  %60 = load %struct._object*, %struct._object** %ftuple, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp87, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8
  %ob_refcnt88 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt88, align 8
  %dec89 = add i64 %62, -1
  store i64 %dec89, i64* %ob_refcnt88, align 8
  %cmp90 = icmp ne i64 %dec89, 0
  br i1 %cmp90, label %if.then.91, label %if.else.92

if.then.91:                                       ; preds = %do.body.86
  br label %if.end.95

if.else.92:                                       ; preds = %do.body.86
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8
  %ob_type93 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type93, align 8
  %tp_dealloc94 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc94, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp87, align 8
  call void %65(%struct._object* %66)
  br label %if.end.95

if.end.95:                                        ; preds = %if.else.92, %if.then.91
  br label %do.end.96

do.end.96:                                        ; preds = %if.end.95
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.97:                                        ; preds = %if.end.81
  %67 = load %struct._object*, %struct._object** %dll, align 8
  %ob_refcnt98 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt98, align 8
  %inc = add i64 %68, 1
  store i64 %inc, i64* %ob_refcnt98, align 8
  br label %do.body.99

do.body.99:                                       ; preds = %if.end.97
  %69 = load %struct._object*, %struct._object** %ftuple, align 8
  store %struct._object* %69, %struct._object** %_py_decref_tmp100, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  %ob_refcnt101 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt101, align 8
  %dec102 = add i64 %71, -1
  store i64 %dec102, i64* %ob_refcnt101, align 8
  %cmp103 = icmp ne i64 %dec102, 0
  br i1 %cmp103, label %if.then.104, label %if.else.105

if.then.104:                                      ; preds = %do.body.99
  br label %if.end.108

if.else.105:                                      ; preds = %do.body.99
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  %ob_type106 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type106, align 8
  %tp_dealloc107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 4
  %74 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc107, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  call void %74(%struct._object* %75)
  br label %if.end.108

if.end.108:                                       ; preds = %if.else.105, %if.then.104
  br label %do.end.109

do.end.109:                                       ; preds = %if.end.108
  %76 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %77 = load %struct._object*, %struct._object** %paramflags, align 8
  %call110 = call i32 @_validate_paramflags(%struct._typeobject* %76, %struct._object* %77)
  %tobool111 = icmp ne i32 %call110, 0
  br i1 %tobool111, label %if.end.113, label %if.then.112

if.then.112:                                      ; preds = %do.end.109
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.113:                                       ; preds = %do.end.109
  %78 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %79 = load %struct._object*, %struct._object** %args.addr, align 8
  %80 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call114 = call %struct._object* @GenericPyCData_new(%struct._typeobject* %78, %struct._object* %79, %struct._object* %80)
  %81 = bitcast %struct._object* %call114 to %struct.PyCFuncPtrObject*
  store %struct.PyCFuncPtrObject* %81, %struct.PyCFuncPtrObject** %self, align 8
  %82 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %tobool115 = icmp ne %struct.PyCFuncPtrObject* %82, null
  br i1 %tobool115, label %if.end.117, label %if.then.116

if.then.116:                                      ; preds = %if.end.113
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.117:                                       ; preds = %if.end.113
  br label %do.body.118

do.body.118:                                      ; preds = %if.end.117
  %83 = load %struct._object*, %struct._object** %paramflags, align 8
  store %struct._object* %83, %struct._object** %_py_xincref_tmp, align 8
  %84 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp119 = icmp ne %struct._object* %84, null
  br i1 %cmp119, label %if.then.120, label %if.end.123

if.then.120:                                      ; preds = %do.body.118
  %85 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt121 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 0
  %86 = load i64, i64* %ob_refcnt121, align 8
  %inc122 = add i64 %86, 1
  store i64 %inc122, i64* %ob_refcnt121, align 8
  br label %if.end.123

if.end.123:                                       ; preds = %if.then.120, %do.body.118
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  %87 = load %struct._object*, %struct._object** %paramflags, align 8
  %88 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %paramflags125 = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %88, i32 0, i32 16
  store %struct._object* %87, %struct._object** %paramflags125, align 8
  %89 = load i32 ()*, i32 ()** %address, align 8
  %90 = bitcast i32 ()* %89 to i8*
  %91 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %91, i32 0, i32 1
  %92 = load i8*, i8** %b_ptr, align 8
  %93 = bitcast i8* %92 to i8**
  store i8* %90, i8** %93, align 8
  %94 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %95 = bitcast %struct.PyCFuncPtrObject* %94 to %struct.tagCDataObject*
  %96 = load %struct._object*, %struct._object** %dll, align 8
  %call126 = call i32 @KeepRef(%struct.tagCDataObject* %95, i64 0, %struct._object* %96)
  %cmp127 = icmp eq i32 -1, %call126
  br i1 %cmp127, label %if.then.128, label %if.end.140

if.then.128:                                      ; preds = %do.end.124
  br label %do.body.129

do.body.129:                                      ; preds = %if.then.128
  %97 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %98 = bitcast %struct.PyCFuncPtrObject* %97 to %struct._object*
  store %struct._object* %98, %struct._object** %_py_decref_tmp130, align 8
  %99 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_refcnt131 = getelementptr inbounds %struct._object, %struct._object* %99, i32 0, i32 0
  %100 = load i64, i64* %ob_refcnt131, align 8
  %dec132 = add i64 %100, -1
  store i64 %dec132, i64* %ob_refcnt131, align 8
  %cmp133 = icmp ne i64 %dec132, 0
  br i1 %cmp133, label %if.then.134, label %if.else.135

if.then.134:                                      ; preds = %do.body.129
  br label %if.end.138

if.else.135:                                      ; preds = %do.body.129
  %101 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_type136 = getelementptr inbounds %struct._object, %struct._object* %101, i32 0, i32 1
  %102 = load %struct._typeobject*, %struct._typeobject** %ob_type136, align 8
  %tp_dealloc137 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %102, i32 0, i32 4
  %103 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc137, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  call void %103(%struct._object* %104)
  br label %if.end.138

if.end.138:                                       ; preds = %if.else.135, %if.then.134
  br label %do.end.139

do.end.139:                                       ; preds = %if.end.138
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.140:                                       ; preds = %do.end.124
  %105 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %106 = bitcast %struct.PyCFuncPtrObject* %105 to %struct._object*
  %ob_refcnt141 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 0
  %107 = load i64, i64* %ob_refcnt141, align 8
  %inc142 = add i64 %107, 1
  store i64 %inc142, i64* %ob_refcnt141, align 8
  %108 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %109 = bitcast %struct.PyCFuncPtrObject* %108 to %struct._object*
  %110 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %callable = getelementptr inbounds %struct.PyCFuncPtrObject, %struct.PyCFuncPtrObject* %110, i32 0, i32 10
  store %struct._object* %109, %struct._object** %callable, align 8
  %111 = load %struct.PyCFuncPtrObject*, %struct.PyCFuncPtrObject** %self, align 8
  %112 = bitcast %struct.PyCFuncPtrObject* %111 to %struct._object*
  store %struct._object* %112, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.140, %do.end.139, %if.then.116, %if.then.112, %do.end.96, %do.end.80, %do.end.53, %do.end.27, %do.end, %if.then.5, %if.then
  %113 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %113
}

declare %struct.CThunkObject* @_ctypes_alloc_callback(%struct._object*, %struct._object*, %struct._object*, i32) #1

; Function Attrs: uwtable
define internal i32 @_get_name(%struct._object* %obj, i8** %pname) #0 {
entry:
  %retval = alloca i32, align 4
  %obj.addr = alloca %struct._object*, align 8
  %pname.addr = alloca i8**, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store i8** %pname, i8*** %pname.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 134217728
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %obj.addr, align 8
  %4 = bitcast %struct._object* %3 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %4, i32 0, i32 2
  %arraydecay = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  %5 = load i8**, i8*** %pname.addr, align 8
  store i8* %arraydecay, i8** %5, align 8
  %6 = load i8**, i8*** %pname.addr, align 8
  %7 = load i8*, i8** %6, align 8
  %tobool = icmp ne i8* %7, null
  %cond = select i1 %tobool, i32 1, i32 0
  store i32 %cond, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %8 = load %struct._object*, %struct._object** %obj.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_flags2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %9, i32 0, i32 19
  %10 = load i64, i64* %tp_flags2, align 8
  %and3 = and i64 %10, 268435456
  %cmp4 = icmp ne i64 %and3, 0
  br i1 %cmp4, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i8* @PyUnicode_AsUTF8(%struct._object* %11)
  %12 = load i8**, i8*** %pname.addr, align 8
  store i8* %call, i8** %12, align 8
  %13 = load i8**, i8*** %pname.addr, align 8
  %14 = load i8*, i8** %13, align 8
  %tobool6 = icmp ne i8* %14, null
  %cond7 = select i1 %tobool6, i32 1, i32 0
  store i32 %cond7, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %15 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %15, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.158, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.8, %if.then.5, %if.then
  %16 = load i32, i32* %retval
  ret i32 %16
}

; Function Attrs: uwtable
define internal i32 @_validate_paramflags(%struct._typeobject* %type, %struct._object* %paramflags) #0 {
entry:
  %retval = alloca i32, align 4
  %type.addr = alloca %struct._typeobject*, align 8
  %paramflags.addr = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %len = alloca i64, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %argtypes = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %flag = alloca i32, align 4
  %name = alloca i8*, align 8
  %defval = alloca %struct._object*, align 8
  %typ = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %paramflags, %struct._object** %paramflags.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = bitcast %struct._typeobject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes1 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %2, i32 0, i32 9
  %3 = load %struct._object*, %struct._object** %argtypes1, align 8
  store %struct._object* %3, %struct._object** %argtypes, align 8
  %4 = load %struct._object*, %struct._object** %paramflags.addr, align 8
  %cmp = icmp eq %struct._object* %4, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes2 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %5, i32 0, i32 9
  %6 = load %struct._object*, %struct._object** %argtypes2, align 8
  %cmp3 = icmp eq %struct._object* %6, null
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct._object*, %struct._object** %paramflags.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 19
  %9 = load i64, i64* %tp_flags, align 8
  %and = and i64 %9, 67108864
  %cmp4 = icmp ne i64 %and, 0
  br i1 %cmp4, label %if.end.6, label %if.then.5

if.then.5:                                        ; preds = %if.end
  %10 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.159, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.6:                                         ; preds = %if.end
  %11 = load %struct._object*, %struct._object** %paramflags.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %12, i32 0, i32 1
  %13 = load i64, i64* %ob_size, align 8
  store i64 %13, i64* %len, align 8
  %14 = load i64, i64* %len, align 8
  %15 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %argtypes7 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %15, i32 0, i32 9
  %16 = load %struct._object*, %struct._object** %argtypes7, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyVarObject*
  %ob_size8 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %17, i32 0, i32 1
  %18 = load i64, i64* %ob_size8, align 8
  %cmp9 = icmp ne i64 %14, %18
  br i1 %cmp9, label %if.then.10, label %if.end.11

if.then.10:                                       ; preds = %if.end.6
  %19 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %19, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.160, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end.6
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.11
  %20 = load i64, i64* %i, align 8
  %21 = load i64, i64* %len, align 8
  %cmp12 = icmp slt i64 %20, %21
  br i1 %cmp12, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %22 = load i64, i64* %i, align 8
  %23 = load %struct._object*, %struct._object** %paramflags.addr, align 8
  %24 = bitcast %struct._object* %23 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %24, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %22
  %25 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %25, %struct._object** %item, align 8
  %26 = load %struct._object*, %struct._object** %item, align 8
  %call13 = call i32 (%struct._object*, i8*, ...) @_PyArg_ParseTuple_SizeT(%struct._object* %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.161, i32 0, i32 0), i32* %flag, i8** %name, %struct._object** %defval)
  %tobool = icmp ne i32 %call13, 0
  br i1 %tobool, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %for.body
  %27 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %27, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.162, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.15:                                        ; preds = %for.body
  %28 = load i64, i64* %i, align 8
  %29 = load %struct._object*, %struct._object** %argtypes, align 8
  %30 = bitcast %struct._object* %29 to %struct.PyTupleObject*
  %ob_item16 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %30, i32 0, i32 1
  %arrayidx17 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item16, i32 0, i64 %28
  %31 = load %struct._object*, %struct._object** %arrayidx17, align 8
  store %struct._object* %31, %struct._object** %typ, align 8
  %32 = load i32, i32* %flag, align 4
  %and18 = and i32 %32, 7
  switch i32 %and18, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 5, label %sw.bb
    i32 3, label %sw.bb
    i32 2, label %sw.bb.19
  ]

sw.bb:                                            ; preds = %if.end.15, %if.end.15, %if.end.15, %if.end.15
  br label %sw.epilog

sw.bb.19:                                         ; preds = %if.end.15
  %33 = load %struct._object*, %struct._object** %typ, align 8
  %34 = load i64, i64* %i, align 8
  %add = add i64 %34, 1
  %call20 = call i32 @_check_outarg_type(%struct._object* %33, i64 %add)
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end.23, label %if.then.22

if.then.22:                                       ; preds = %sw.bb.19
  store i32 0, i32* %retval
  br label %return

if.end.23:                                        ; preds = %sw.bb.19
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.15
  %35 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %36 = load i32, i32* %flag, align 4
  %call24 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %35, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.163, i32 0, i32 0), i32 %36)
  store i32 0, i32* %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.23, %sw.bb
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog
  %37 = load i64, i64* %i, align 8
  %inc = add i64 %37, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %sw.default, %if.then.22, %if.then.14, %if.then.10, %if.then.5, %if.then
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: uwtable
define internal i32 @_check_outarg_type(%struct._object* %arg, i64 %index) #0 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*)
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type to %struct._typeobject*)
  br i1 %cmp3, label %if.then.8, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCArrayType_Type to %struct._typeobject*))
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %lor.lhs.false.4, %if.end
  store i32 1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false.4
  %8 = load %struct._object*, %struct._object** %arg.addr, align 8
  %call10 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %8)
  store %struct.StgDictObject* %call10, %struct.StgDictObject** %dict, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool11 = icmp ne %struct.StgDictObject* %9, null
  br i1 %tobool11, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end.9
  %10 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %10, i32 0, i32 5
  %11 = load %struct._object*, %struct._object** %proto, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 19
  %13 = load i64, i64* %tp_flags, align 8
  %and = and i64 %13, 268435456
  %cmp13 = icmp ne i64 %and, 0
  br i1 %cmp13, label %land.lhs.true.14, label %if.end.20

land.lhs.true.14:                                 ; preds = %land.lhs.true
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto15 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 5
  %15 = load %struct._object*, %struct._object** %proto15, align 8
  %call16 = call i8* @PyUnicode_AsUTF8(%struct._object* %15)
  %arrayidx = getelementptr i8, i8* %call16, i64 0
  %16 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %16 to i32
  %call17 = call i8* @strchr(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.164, i32 0, i32 0), i32 %conv) #7
  %tobool18 = icmp ne i8* %call17, null
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %land.lhs.true.14
  store i32 1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %land.lhs.true.14, %land.lhs.true, %if.end.9
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %18 = load i64, i64* %index.addr, align 8
  %conv21 = trunc i64 %18 to i32
  %19 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_flags23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 19
  %21 = load i64, i64* %tp_flags23, align 8
  %and24 = and i64 %21, 2147483648
  %cmp25 = icmp ne i64 %and24, 0
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.20
  %22 = load %struct._object*, %struct._object** %arg.addr, align 8
  %23 = bitcast %struct._object* %22 to %struct._typeobject*
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 1
  %24 = load i8*, i8** %tp_name, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.20
  %25 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_name28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 1
  %27 = load i8*, i8** %tp_name28, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %24, %cond.true ], [ %27, %cond.false ]
  %call29 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %17, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.165, i32 0, i32 0), i32 %conv21, i8* %cond)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then.19, %if.then.8, %if.then
  %28 = load i32, i32* %retval
  ret i32 %28
}

; Function Attrs: nounwind uwtable
define internal i64 @Array_length(%struct._object* %myself) #6 {
entry:
  %myself.addr = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %2, i32 0, i32 5
  %3 = load i64, i64* %b_length, align 8
  ret i64 %3
}

; Function Attrs: uwtable
define internal %struct._object* @Array_item(%struct._object* %myself, i64 %index) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %myself.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %offset = alloca i64, align 8
  %size = alloca i64, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load i64, i64* %index.addr, align 8
  %cmp = icmp slt i64 %2, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %3 = load i64, i64* %index.addr, align 8
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 5
  %5 = load i64, i64* %b_length, align 8
  %cmp1 = icmp sge i64 %3, %5
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %6 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.166, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %8 = bitcast %struct.tagCDataObject* %7 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %8)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %stgdict, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %size2 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 1
  %10 = load i64, i64* %size2, align 8
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 3
  %12 = load i64, i64* %length, align 8
  %div = sdiv i64 %10, %12
  store i64 %div, i64* %size, align 8
  %13 = load i64, i64* %index.addr, align 8
  %14 = load i64, i64* %size, align 8
  %mul = mul i64 %13, %14
  store i64 %mul, i64* %offset, align 8
  %15 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %15, i32 0, i32 5
  %16 = load %struct._object*, %struct._object** %proto, align 8
  %17 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %17, i32 0, i32 7
  %18 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc, align 8
  %19 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %20 = bitcast %struct.tagCDataObject* %19 to %struct._object*
  %21 = load i64, i64* %index.addr, align 8
  %22 = load i64, i64* %size, align 8
  %23 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %23, i32 0, i32 1
  %24 = load i8*, i8** %b_ptr, align 8
  %25 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr i8, i8* %24, i64 %25
  %call3 = call %struct._object* @PyCData_get(%struct._object* %16, %struct._object* (i8*, i64)* %18, %struct._object* %20, i64 %21, i64 %22, i8* %add.ptr)
  store %struct._object* %call3, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %26 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %26
}

; Function Attrs: uwtable
define internal i32 @Array_ass_item(%struct._object* %myself, i64 %index, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %myself.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %value.addr = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %size = alloca i64, align 8
  %offset = alloca i64, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %ptr = alloca i8*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.167, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %5 = bitcast %struct.tagCDataObject* %4 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %5)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %stgdict, align 8
  %6 = load i64, i64* %index.addr, align 8
  %cmp1 = icmp slt i64 %6, 0
  br i1 %cmp1, label %if.then.3, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i64, i64* %index.addr, align 8
  %8 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %8, i32 0, i32 3
  %9 = load i64, i64* %length, align 8
  %cmp2 = icmp sge i64 %7, %9
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %lor.lhs.false, %if.end
  %10 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.166, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.4:                                         ; preds = %lor.lhs.false
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %size5 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 1
  %12 = load i64, i64* %size5, align 8
  %13 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %length6 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %13, i32 0, i32 3
  %14 = load i64, i64* %length6, align 8
  %div = sdiv i64 %12, %14
  store i64 %div, i64* %size, align 8
  %15 = load i64, i64* %index.addr, align 8
  %16 = load i64, i64* %size, align 8
  %mul = mul i64 %15, %16
  store i64 %mul, i64* %offset, align 8
  %17 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %17, i32 0, i32 1
  %18 = load i8*, i8** %b_ptr, align 8
  %19 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr i8, i8* %18, i64 %19
  store i8* %add.ptr, i8** %ptr, align 8
  %20 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %21 = bitcast %struct.tagCDataObject* %20 to %struct._object*
  %22 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %22, i32 0, i32 5
  %23 = load %struct._object*, %struct._object** %proto, align 8
  %24 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %setfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %24, i32 0, i32 6
  %25 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %26 = load %struct._object*, %struct._object** %value.addr, align 8
  %27 = load i64, i64* %index.addr, align 8
  %28 = load i64, i64* %size, align 8
  %29 = load i8*, i8** %ptr, align 8
  %call7 = call i32 @PyCData_set(%struct._object* %21, %struct._object* %23, %struct._object* (i8*, %struct._object*, i64)* %25, %struct._object* %26, i64 %27, i64 %28, i8* %29)
  store i32 %call7, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %30 = load i32, i32* %retval
  ret i32 %30
}

; Function Attrs: uwtable
define internal %struct._object* @Array_subscript(%struct._object* %myself, %struct._object* %item) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %myself.addr = alloca %struct._object*, align 8
  %item.addr = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %i = alloca i64, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %itemdict = alloca %struct.StgDictObject*, align 8
  %proto = alloca %struct._object*, align 8
  %np = alloca %struct._object*, align 8
  %start = alloca i64, align 8
  %stop = alloca i64, align 8
  %step = alloca i64, align 8
  %slicelen = alloca i64, align 8
  %cur = alloca i64, align 8
  %i15 = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %ptr51 = alloca i32*, align 8
  %dest53 = alloca i32*, align 8
  %v = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store %struct._object* %item, %struct._object** %item.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 10
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp = icmp ne %struct.PyNumberMethods* %4, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 10
  %7 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %7, i32 0, i32 33
  %8 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index, align 8
  %cmp3 = icmp ne %struct._object* (%struct._object*)* %8, null
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct._object*, %struct._object** %item.addr, align 8
  %10 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %9, %struct._object* %10)
  store i64 %call, i64* %i, align 8
  %11 = load i64, i64* %i, align 8
  %cmp4 = icmp eq i64 %11, -1
  br i1 %cmp4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %if.then
  %call6 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call6, null
  br i1 %tobool, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.5, %if.then
  %12 = load i64, i64* %i, align 8
  %cmp8 = icmp slt i64 %12, 0
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end
  %13 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %13, i32 0, i32 5
  %14 = load i64, i64* %b_length, align 8
  %15 = load i64, i64* %i, align 8
  %add = add i64 %15, %14
  store i64 %add, i64* %i, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %if.end
  %16 = load %struct._object*, %struct._object** %myself.addr, align 8
  %17 = load i64, i64* %i, align 8
  %call11 = call %struct._object* @Array_item(%struct._object* %16, i64 %17)
  store %struct._object* %call11, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %18 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %cmp13 = icmp eq %struct._typeobject* %19, @PySlice_Type
  br i1 %cmp13, label %if.then.14, label %if.else.96

if.then.14:                                       ; preds = %if.else
  %20 = load %struct._object*, %struct._object** %item.addr, align 8
  %21 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_length16 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %21, i32 0, i32 5
  %22 = load i64, i64* %b_length16, align 8
  %call17 = call i32 @PySlice_GetIndicesEx(%struct._object* %20, i64 %22, i64* %start, i64* %stop, i64* %step, i64* %slicelen)
  %cmp18 = icmp slt i32 %call17, 0
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.14
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %if.then.14
  %23 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %24 = bitcast %struct.tagCDataObject* %23 to %struct._object*
  %call21 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %24)
  store %struct.StgDictObject* %call21, %struct.StgDictObject** %stgdict, align 8
  %25 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto22 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %25, i32 0, i32 5
  %26 = load %struct._object*, %struct._object** %proto22, align 8
  store %struct._object* %26, %struct._object** %proto, align 8
  %27 = load %struct._object*, %struct._object** %proto, align 8
  %call23 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %27)
  store %struct.StgDictObject* %call23, %struct.StgDictObject** %itemdict, align 8
  %28 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %28, i32 0, i32 7
  %29 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc, align 8
  %call24 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i32 0, i32 0))
  %getfunc25 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call24, i32 0, i32 2
  %30 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc25, align 8
  %cmp26 = icmp eq %struct._object* (i8*, i64)* %29, %30
  br i1 %cmp26, label %if.then.27, label %if.end.45

if.then.27:                                       ; preds = %if.end.20
  %31 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %31, i32 0, i32 1
  %32 = load i8*, i8** %b_ptr, align 8
  store i8* %32, i8** %ptr, align 8
  %33 = load i64, i64* %slicelen, align 8
  %cmp28 = icmp sle i64 %33, 0
  br i1 %cmp28, label %if.then.29, label %if.end.31

if.then.29:                                       ; preds = %if.then.27
  %call30 = call %struct._object* @PyBytes_FromStringAndSize(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.136, i32 0, i32 0), i64 0)
  store %struct._object* %call30, %struct._object** %retval
  br label %return

if.end.31:                                        ; preds = %if.then.27
  %34 = load i64, i64* %step, align 8
  %cmp32 = icmp eq i64 %34, 1
  br i1 %cmp32, label %if.then.33, label %if.end.35

if.then.33:                                       ; preds = %if.end.31
  %35 = load i8*, i8** %ptr, align 8
  %36 = load i64, i64* %start, align 8
  %add.ptr = getelementptr i8, i8* %35, i64 %36
  %37 = load i64, i64* %slicelen, align 8
  %call34 = call %struct._object* @PyBytes_FromStringAndSize(i8* %add.ptr, i64 %37)
  store %struct._object* %call34, %struct._object** %retval
  br label %return

if.end.35:                                        ; preds = %if.end.31
  %38 = load i64, i64* %slicelen, align 8
  %call36 = call i8* @PyMem_Malloc(i64 %38)
  store i8* %call36, i8** %dest, align 8
  %39 = load i8*, i8** %dest, align 8
  %cmp37 = icmp eq i8* %39, null
  br i1 %cmp37, label %if.then.38, label %if.end.40

if.then.38:                                       ; preds = %if.end.35
  %call39 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call39, %struct._object** %retval
  br label %return

if.end.40:                                        ; preds = %if.end.35
  %40 = load i64, i64* %start, align 8
  store i64 %40, i64* %cur, align 8
  store i64 0, i64* %i15, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.40
  %41 = load i64, i64* %i15, align 8
  %42 = load i64, i64* %slicelen, align 8
  %cmp41 = icmp slt i64 %41, %42
  br i1 %cmp41, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %43 = load i64, i64* %cur, align 8
  %44 = load i8*, i8** %ptr, align 8
  %arrayidx = getelementptr i8, i8* %44, i64 %43
  %45 = load i8, i8* %arrayidx, align 1
  %46 = load i64, i64* %i15, align 8
  %47 = load i8*, i8** %dest, align 8
  %arrayidx42 = getelementptr i8, i8* %47, i64 %46
  store i8 %45, i8* %arrayidx42, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %48 = load i64, i64* %step, align 8
  %49 = load i64, i64* %cur, align 8
  %add43 = add i64 %49, %48
  store i64 %add43, i64* %cur, align 8
  %50 = load i64, i64* %i15, align 8
  %inc = add i64 %50, 1
  store i64 %inc, i64* %i15, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %51 = load i8*, i8** %dest, align 8
  %52 = load i64, i64* %slicelen, align 8
  %call44 = call %struct._object* @PyBytes_FromStringAndSize(i8* %51, i64 %52)
  store %struct._object* %call44, %struct._object** %np, align 8
  %53 = load i8*, i8** %dest, align 8
  call void @PyMem_Free(i8* %53)
  %54 = load %struct._object*, %struct._object** %np, align 8
  store %struct._object* %54, %struct._object** %retval
  br label %return

if.end.45:                                        ; preds = %if.end.20
  %55 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %getfunc46 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %55, i32 0, i32 7
  %56 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc46, align 8
  %call47 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  %getfunc48 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call47, i32 0, i32 2
  %57 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc48, align 8
  %cmp49 = icmp eq %struct._object* (i8*, i64)* %56, %57
  br i1 %cmp49, label %if.then.50, label %if.end.74

if.then.50:                                       ; preds = %if.end.45
  %58 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr52 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %58, i32 0, i32 1
  %59 = load i8*, i8** %b_ptr52, align 8
  %60 = bitcast i8* %59 to i32*
  store i32* %60, i32** %ptr51, align 8
  %61 = load i64, i64* %slicelen, align 8
  %cmp54 = icmp sle i64 %61, 0
  br i1 %cmp54, label %if.then.55, label %if.end.57

if.then.55:                                       ; preds = %if.then.50
  %call56 = call %struct._object* @PyUnicode_New(i64 0, i32 0)
  store %struct._object* %call56, %struct._object** %retval
  br label %return

if.end.57:                                        ; preds = %if.then.50
  %62 = load i64, i64* %step, align 8
  %cmp58 = icmp eq i64 %62, 1
  br i1 %cmp58, label %if.then.59, label %if.end.62

if.then.59:                                       ; preds = %if.end.57
  %63 = load i32*, i32** %ptr51, align 8
  %64 = load i64, i64* %start, align 8
  %add.ptr60 = getelementptr i32, i32* %63, i64 %64
  %65 = load i64, i64* %slicelen, align 8
  %call61 = call %struct._object* @PyUnicode_FromWideChar(i32* %add.ptr60, i64 %65)
  store %struct._object* %call61, %struct._object** %retval
  br label %return

if.end.62:                                        ; preds = %if.end.57
  %66 = load i64, i64* %slicelen, align 8
  %mul = mul i64 %66, 4
  %call63 = call i8* @PyMem_Malloc(i64 %mul)
  %67 = bitcast i8* %call63 to i32*
  store i32* %67, i32** %dest53, align 8
  %68 = load i64, i64* %start, align 8
  store i64 %68, i64* %cur, align 8
  store i64 0, i64* %i15, align 8
  br label %for.cond.64

for.cond.64:                                      ; preds = %for.inc.69, %if.end.62
  %69 = load i64, i64* %i15, align 8
  %70 = load i64, i64* %slicelen, align 8
  %cmp65 = icmp slt i64 %69, %70
  br i1 %cmp65, label %for.body.66, label %for.end.72

for.body.66:                                      ; preds = %for.cond.64
  %71 = load i64, i64* %cur, align 8
  %72 = load i32*, i32** %ptr51, align 8
  %arrayidx67 = getelementptr i32, i32* %72, i64 %71
  %73 = load i32, i32* %arrayidx67, align 4
  %74 = load i64, i64* %i15, align 8
  %75 = load i32*, i32** %dest53, align 8
  %arrayidx68 = getelementptr i32, i32* %75, i64 %74
  store i32 %73, i32* %arrayidx68, align 4
  br label %for.inc.69

for.inc.69:                                       ; preds = %for.body.66
  %76 = load i64, i64* %step, align 8
  %77 = load i64, i64* %cur, align 8
  %add70 = add i64 %77, %76
  store i64 %add70, i64* %cur, align 8
  %78 = load i64, i64* %i15, align 8
  %inc71 = add i64 %78, 1
  store i64 %inc71, i64* %i15, align 8
  br label %for.cond.64

for.end.72:                                       ; preds = %for.cond.64
  %79 = load i32*, i32** %dest53, align 8
  %80 = load i64, i64* %slicelen, align 8
  %call73 = call %struct._object* @PyUnicode_FromWideChar(i32* %79, i64 %80)
  store %struct._object* %call73, %struct._object** %np, align 8
  %81 = load i32*, i32** %dest53, align 8
  %82 = bitcast i32* %81 to i8*
  call void @PyMem_Free(i8* %82)
  %83 = load %struct._object*, %struct._object** %np, align 8
  store %struct._object* %83, %struct._object** %retval
  br label %return

if.end.74:                                        ; preds = %if.end.45
  %84 = load i64, i64* %slicelen, align 8
  %call75 = call %struct._object* @PyList_New(i64 %84)
  store %struct._object* %call75, %struct._object** %np, align 8
  %85 = load %struct._object*, %struct._object** %np, align 8
  %cmp76 = icmp eq %struct._object* %85, null
  br i1 %cmp76, label %if.then.77, label %if.end.78

if.then.77:                                       ; preds = %if.end.74
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.78:                                        ; preds = %if.end.74
  %86 = load i64, i64* %start, align 8
  store i64 %86, i64* %cur, align 8
  store i64 0, i64* %i15, align 8
  br label %for.cond.79

for.cond.79:                                      ; preds = %for.inc.92, %if.end.78
  %87 = load i64, i64* %i15, align 8
  %88 = load i64, i64* %slicelen, align 8
  %cmp80 = icmp slt i64 %87, %88
  br i1 %cmp80, label %for.body.81, label %for.end.95

for.body.81:                                      ; preds = %for.cond.79
  %89 = load %struct._object*, %struct._object** %myself.addr, align 8
  %90 = load i64, i64* %cur, align 8
  %call82 = call %struct._object* @Array_item(%struct._object* %89, i64 %90)
  store %struct._object* %call82, %struct._object** %v, align 8
  %91 = load %struct._object*, %struct._object** %v, align 8
  %cmp83 = icmp eq %struct._object* %91, null
  br i1 %cmp83, label %if.then.84, label %if.end.90

if.then.84:                                       ; preds = %for.body.81
  br label %do.body

do.body:                                          ; preds = %if.then.84
  %92 = load %struct._object*, %struct._object** %np, align 8
  store %struct._object* %92, %struct._object** %_py_decref_tmp, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 0
  %94 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %94, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp85 = icmp ne i64 %dec, 0
  br i1 %cmp85, label %if.then.86, label %if.else.87

if.then.86:                                       ; preds = %do.body
  br label %if.end.89

if.else.87:                                       ; preds = %do.body
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type88 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type88, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 4
  %97 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %97(%struct._object* %98)
  br label %if.end.89

if.end.89:                                        ; preds = %if.else.87, %if.then.86
  br label %do.end

do.end:                                           ; preds = %if.end.89
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.90:                                        ; preds = %for.body.81
  %99 = load %struct._object*, %struct._object** %v, align 8
  %100 = load i64, i64* %i15, align 8
  %101 = load %struct._object*, %struct._object** %np, align 8
  %102 = bitcast %struct._object* %101 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %102, i32 0, i32 1
  %103 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx91 = getelementptr %struct._object*, %struct._object** %103, i64 %100
  store %struct._object* %99, %struct._object** %arrayidx91, align 8
  br label %for.inc.92

for.inc.92:                                       ; preds = %if.end.90
  %104 = load i64, i64* %step, align 8
  %105 = load i64, i64* %cur, align 8
  %add93 = add i64 %105, %104
  store i64 %add93, i64* %cur, align 8
  %106 = load i64, i64* %i15, align 8
  %inc94 = add i64 %106, 1
  store i64 %inc94, i64* %i15, align 8
  br label %for.cond.79

for.end.95:                                       ; preds = %for.cond.79
  %107 = load %struct._object*, %struct._object** %np, align 8
  store %struct._object* %107, %struct._object** %retval
  br label %return

if.else.96:                                       ; preds = %if.else
  %108 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %108, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.168, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else.96, %for.end.95, %do.end, %if.then.77, %for.end.72, %if.then.59, %if.then.55, %for.end, %if.then.38, %if.then.33, %if.then.29, %if.then.19, %if.end.10, %if.then.7
  %109 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %109
}

; Function Attrs: uwtable
define internal i32 @Array_ass_subscript(%struct._object* %myself, %struct._object* %item, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %myself.addr = alloca %struct._object*, align 8
  %item.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %i = alloca i64, align 8
  %start = alloca i64, align 8
  %stop = alloca i64, align 8
  %step = alloca i64, align 8
  %slicelen = alloca i64, align 8
  %otherlen = alloca i64, align 8
  %i18 = alloca i64, align 8
  %cur = alloca i64, align 8
  %item37 = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store %struct._object* %item, %struct._object** %item.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.167, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp1 = icmp ne %struct.PyNumberMethods* %6, null
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %7, i32 0, i32 1
  %8 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %8, i32 0, i32 10
  %9 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number3, align 8
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %9, i32 0, i32 33
  %10 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index, align 8
  %cmp4 = icmp ne %struct._object* (%struct._object*)* %10, null
  br i1 %cmp4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %land.lhs.true
  %11 = load %struct._object*, %struct._object** %item.addr, align 8
  %12 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %11, %struct._object* %12)
  store i64 %call, i64* %i, align 8
  %13 = load i64, i64* %i, align 8
  %cmp6 = icmp eq i64 %13, -1
  br i1 %cmp6, label %land.lhs.true.7, label %if.end.10

land.lhs.true.7:                                  ; preds = %if.then.5
  %call8 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call8, null
  br i1 %tobool, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %land.lhs.true.7
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %land.lhs.true.7, %if.then.5
  %14 = load i64, i64* %i, align 8
  %cmp11 = icmp slt i64 %14, 0
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end.10
  %15 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_length = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %15, i32 0, i32 5
  %16 = load i64, i64* %b_length, align 8
  %17 = load i64, i64* %i, align 8
  %add = add i64 %17, %16
  store i64 %add, i64* %i, align 8
  br label %if.end.13

if.end.13:                                        ; preds = %if.then.12, %if.end.10
  %18 = load %struct._object*, %struct._object** %myself.addr, align 8
  %19 = load i64, i64* %i, align 8
  %20 = load %struct._object*, %struct._object** %value.addr, align 8
  %call14 = call i32 @Array_ass_item(%struct._object* %18, i64 %19, %struct._object* %20)
  store i32 %call14, i32* %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %if.end
  %21 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type15 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type15, align 8
  %cmp16 = icmp eq %struct._typeobject* %22, @PySlice_Type
  br i1 %cmp16, label %if.then.17, label %if.else.52

if.then.17:                                       ; preds = %if.else
  %23 = load %struct._object*, %struct._object** %item.addr, align 8
  %24 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_length19 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %24, i32 0, i32 5
  %25 = load i64, i64* %b_length19, align 8
  %call20 = call i32 @PySlice_GetIndicesEx(%struct._object* %23, i64 %25, i64* %start, i64* %stop, i64* %step, i64* %slicelen)
  %cmp21 = icmp slt i32 %call20, 0
  br i1 %cmp21, label %if.then.22, label %if.end.23

if.then.22:                                       ; preds = %if.then.17
  store i32 -1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.then.17
  %26 = load i64, i64* %step, align 8
  %cmp24 = icmp slt i64 %26, 0
  br i1 %cmp24, label %land.lhs.true.25, label %lor.lhs.false

land.lhs.true.25:                                 ; preds = %if.end.23
  %27 = load i64, i64* %start, align 8
  %28 = load i64, i64* %stop, align 8
  %cmp26 = icmp slt i64 %27, %28
  br i1 %cmp26, label %if.then.30, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.25, %if.end.23
  %29 = load i64, i64* %step, align 8
  %cmp27 = icmp sgt i64 %29, 0
  br i1 %cmp27, label %land.lhs.true.28, label %if.end.31

land.lhs.true.28:                                 ; preds = %lor.lhs.false
  %30 = load i64, i64* %start, align 8
  %31 = load i64, i64* %stop, align 8
  %cmp29 = icmp sgt i64 %30, %31
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %land.lhs.true.28, %land.lhs.true.25
  %32 = load i64, i64* %start, align 8
  store i64 %32, i64* %stop, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %land.lhs.true.28, %lor.lhs.false
  %33 = load %struct._object*, %struct._object** %value.addr, align 8
  %call32 = call i64 @PySequence_Size(%struct._object* %33)
  store i64 %call32, i64* %otherlen, align 8
  %34 = load i64, i64* %otherlen, align 8
  %35 = load i64, i64* %slicelen, align 8
  %cmp33 = icmp ne i64 %34, %35
  br i1 %cmp33, label %if.then.34, label %if.end.35

if.then.34:                                       ; preds = %if.end.31
  %36 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %36, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.169, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.35:                                        ; preds = %if.end.31
  %37 = load i64, i64* %start, align 8
  store i64 %37, i64* %cur, align 8
  store i64 0, i64* %i18, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.35
  %38 = load i64, i64* %i18, align 8
  %39 = load i64, i64* %otherlen, align 8
  %cmp36 = icmp slt i64 %38, %39
  br i1 %cmp36, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %40 = load %struct._object*, %struct._object** %value.addr, align 8
  %41 = load i64, i64* %i18, align 8
  %call38 = call %struct._object* @PySequence_GetItem(%struct._object* %40, i64 %41)
  store %struct._object* %call38, %struct._object** %item37, align 8
  %42 = load %struct._object*, %struct._object** %item37, align 8
  %cmp39 = icmp eq %struct._object* %42, null
  br i1 %cmp39, label %if.then.40, label %if.end.41

if.then.40:                                       ; preds = %for.body
  store i32 -1, i32* %retval
  br label %return

if.end.41:                                        ; preds = %for.body
  %43 = load %struct._object*, %struct._object** %myself.addr, align 8
  %44 = load i64, i64* %cur, align 8
  %45 = load %struct._object*, %struct._object** %item37, align 8
  %call42 = call i32 @Array_ass_item(%struct._object* %43, i64 %44, %struct._object* %45)
  store i32 %call42, i32* %result, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.41
  %46 = load %struct._object*, %struct._object** %item37, align 8
  store %struct._object* %46, %struct._object** %_py_decref_tmp, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 0
  %48 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %48, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp43 = icmp ne i64 %dec, 0
  br i1 %cmp43, label %if.then.44, label %if.else.45

if.then.44:                                       ; preds = %do.body
  br label %if.end.47

if.else.45:                                       ; preds = %do.body
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %50, i32 0, i32 4
  %51 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %51(%struct._object* %52)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.45, %if.then.44
  br label %do.end

do.end:                                           ; preds = %if.end.47
  %53 = load i32, i32* %result, align 4
  %cmp48 = icmp eq i32 %53, -1
  br i1 %cmp48, label %if.then.49, label %if.end.50

if.then.49:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.50:                                        ; preds = %do.end
  br label %for.inc

for.inc:                                          ; preds = %if.end.50
  %54 = load i64, i64* %step, align 8
  %55 = load i64, i64* %cur, align 8
  %add51 = add i64 %55, %54
  store i64 %add51, i64* %cur, align 8
  %56 = load i64, i64* %i18, align 8
  %inc = add i64 %56, 1
  store i64 %inc, i64* %i18, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval
  br label %return

if.else.52:                                       ; preds = %if.else
  %57 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %57, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.170, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %if.else.52, %for.end, %if.then.49, %if.then.40, %if.then.34, %if.then.22, %if.end.13, %if.then.9, %if.then
  %58 = load i32, i32* %retval
  ret i32 %58
}

declare i64 @PyNumber_AsSsize_t(%struct._object*, %struct._object*) #1

declare i32 @PySlice_GetIndicesEx(%struct._object*, i64, i64*, i64*, i64*, i64*) #1

declare %struct._object* @PyUnicode_New(i64, i32) #1

declare %struct._object* @PyList_New(i64) #1

declare i64 @PySequence_Size(%struct._object*) #1

declare %struct._object* @PySequence_GetItem(%struct._object*, i64) #1

declare i32 @PySequence_SetItem(%struct._object*, i64, %struct._object*) #1

; Function Attrs: uwtable
define internal %struct._object* @Simple_repr(%struct.tagCDataObject* %self) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %val = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %1 = bitcast %struct.tagCDataObject* %0 to %struct._object*
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 30
  %3 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %cmp = icmp ne %struct._typeobject* %3, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @Simple_Type to %struct._typeobject*)
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %5 = bitcast %struct.tagCDataObject* %4 to %struct._object*
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 1
  %7 = load i8*, i8** %tp_name, align 8
  %8 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.134, i32 0, i32 0), i8* %7, %struct.tagCDataObject* %8)
  store %struct._object* %call, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %call2 = call %struct._object* @Simple_get_value(%struct.tagCDataObject* %9)
  store %struct._object* %call2, %struct._object** %val, align 8
  %10 = load %struct._object*, %struct._object** %val, align 8
  %cmp3 = icmp eq %struct._object* %10, null
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.5:                                         ; preds = %if.end
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %12 = bitcast %struct.tagCDataObject* %11 to %struct._object*
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %tp_name7 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 1
  %14 = load i8*, i8** %tp_name7, align 8
  %15 = load %struct._object*, %struct._object** %val, align 8
  %call8 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.173, i32 0, i32 0), i8* %14, %struct._object* %15)
  store %struct._object* %call8, %struct._object** %result, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.5
  %16 = load %struct._object*, %struct._object** %val, align 8
  store %struct._object* %16, %struct._object** %_py_decref_tmp, align 8
  %17 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %17, i32 0, i32 0
  %18 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %18, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp9 = icmp ne i64 %dec, 0
  br i1 %cmp9, label %if.then.10, label %if.else

if.then.10:                                       ; preds = %do.body
  br label %if.end.12

if.else:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type11 = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 1
  %20 = load %struct._typeobject*, %struct._typeobject** %ob_type11, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %20, i32 0, i32 4
  %21 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %21(%struct._object* %22)
  br label %if.end.12

if.end.12:                                        ; preds = %if.else, %if.then.10
  br label %do.end

do.end:                                           ; preds = %if.end.12
  %23 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %23, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end, %if.then.4, %if.then
  %24 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %24
}

; Function Attrs: uwtable
define internal i32 @Simple_init(%struct.tagCDataObject* %self, %struct._object* %args, %struct._object* %kw) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  store %struct._object* null, %struct._object** %value, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call i32 (%struct._object*, i8*, i64, i64, ...) @PyArg_UnpackTuple(%struct._object* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.176, i32 0, i32 0), i64 0, i64 1, %struct._object** %value)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %value, align 8
  %tobool1 = icmp ne %struct._object* %1, null
  br i1 %tobool1, label %if.then.2, label %if.end.4

if.then.2:                                        ; preds = %if.end
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %3 = load %struct._object*, %struct._object** %value, align 8
  %call3 = call i32 @Simple_set_value(%struct.tagCDataObject* %2, %struct._object* %3)
  store i32 %call3, i32* %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.2, %if.then
  %4 = load i32, i32* %retval
  ret i32 %4
}

; Function Attrs: uwtable
define internal %struct._object* @Simple_get_value(%struct.tagCDataObject* %self) #0 {
entry:
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %1 = bitcast %struct.tagCDataObject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %2, i32 0, i32 7
  %3 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc, align 8
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 1
  %5 = load i8*, i8** %b_ptr, align 8
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %6, i32 0, i32 4
  %7 = load i64, i64* %b_size, align 8
  %call1 = call %struct._object* %3(i8* %5, i64 %7)
  ret %struct._object* %call1
}

; Function Attrs: nounwind uwtable
define internal i32 @Simple_bool(%struct.tagCDataObject* %self) #6 {
entry:
  %self.addr = alloca %struct.tagCDataObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 1
  %1 = load i8*, i8** %b_ptr, align 8
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_size = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %2, i32 0, i32 4
  %3 = load i64, i64* %b_size, align 8
  %call = call i32 @memcmp(i8* %1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.174, i32 0, i32 0), i64 %3) #7
  ret i32 %call
}

; Function Attrs: nounwind readonly
declare i32 @memcmp(i8*, i8*, i64) #2

; Function Attrs: uwtable
define internal %struct._object* @Simple_from_outparm(%struct._object* %self, %struct._object* %args) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %2 = bitcast %struct._typeobject* %1 to %struct._object*
  %call = call i32 @_ctypes_simple_instance(%struct._object* %2)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %5 = load %struct._object*, %struct._object** %self.addr, align 8
  store %struct._object* %5, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %6 = load %struct._object*, %struct._object** %self.addr, align 8
  %7 = bitcast %struct._object* %6 to %struct.tagCDataObject*
  %call1 = call %struct._object* @Simple_get_value(%struct.tagCDataObject* %7)
  store %struct._object* %call1, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %8 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %8
}

; Function Attrs: uwtable
define internal i32 @Simple_set_value(%struct.tagCDataObject* %self, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %1 = bitcast %struct.tagCDataObject* %0 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %1)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %dict, align 8
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.88, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %setfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %4, i32 0, i32 6
  %5 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %6 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %6, i32 0, i32 1
  %7 = load i8*, i8** %b_ptr, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %size = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 1
  %10 = load i64, i64* %size, align 8
  %call1 = call %struct._object* %5(i8* %7, %struct._object* %8, i64 %10)
  store %struct._object* %call1, %struct._object** %result, align 8
  %11 = load %struct._object*, %struct._object** %result, align 8
  %tobool = icmp ne %struct._object* %11, null
  br i1 %tobool, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  store i32 -1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %12 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %13 = load %struct._object*, %struct._object** %result, align 8
  %call4 = call i32 @KeepRef(%struct.tagCDataObject* %12, i64 0, %struct._object* %13)
  store i32 %call4, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %14 = load i32, i32* %retval
  ret i32 %14
}

declare i32 @PyArg_UnpackTuple(%struct._object*, i8*, i64, i64, ...) #1

; Function Attrs: nounwind uwtable
define internal i32 @Pointer_bool(%struct.tagCDataObject* %self) #6 {
entry:
  %self.addr = alloca %struct.tagCDataObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 1
  %1 = load i8*, i8** %b_ptr, align 8
  %2 = bitcast i8* %1 to i8**
  %3 = load i8*, i8** %2, align 8
  %cmp = icmp ne i8* %3, null
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: uwtable
define internal %struct._object* @Pointer_item(%struct._object* %myself, i64 %index) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %myself.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %size = alloca i64, align 8
  %offset = alloca i64, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %itemdict = alloca %struct.StgDictObject*, align 8
  %proto = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %2, i32 0, i32 1
  %3 = load i8*, i8** %b_ptr, align 8
  %4 = bitcast i8* %3 to i8**
  %5 = load i8*, i8** %4, align 8
  %cmp = icmp eq i8* %5, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %6 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.177, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %7 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %8 = bitcast %struct.tagCDataObject* %7 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %8)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %stgdict, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto1 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 5
  %10 = load %struct._object*, %struct._object** %proto1, align 8
  store %struct._object* %10, %struct._object** %proto, align 8
  %11 = load %struct._object*, %struct._object** %proto, align 8
  %call2 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %11)
  store %struct.StgDictObject* %call2, %struct.StgDictObject** %itemdict, align 8
  %12 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %size3 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %12, i32 0, i32 1
  %13 = load i64, i64* %size3, align 8
  store i64 %13, i64* %size, align 8
  %14 = load i64, i64* %index.addr, align 8
  %15 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %size4 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %15, i32 0, i32 1
  %16 = load i64, i64* %size4, align 8
  %mul = mul i64 %14, %16
  store i64 %mul, i64* %offset, align 8
  %17 = load %struct._object*, %struct._object** %proto, align 8
  %18 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %18, i32 0, i32 7
  %19 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc, align 8
  %20 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %21 = bitcast %struct.tagCDataObject* %20 to %struct._object*
  %22 = load i64, i64* %index.addr, align 8
  %23 = load i64, i64* %size, align 8
  %24 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr5 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %24, i32 0, i32 1
  %25 = load i8*, i8** %b_ptr5, align 8
  %26 = bitcast i8* %25 to i8**
  %27 = load i8*, i8** %26, align 8
  %28 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr i8, i8* %27, i64 %28
  %call6 = call %struct._object* @PyCData_get(%struct._object* %17, %struct._object* (i8*, i64)* %19, %struct._object* %21, i64 %22, i64 %23, i8* %add.ptr)
  store %struct._object* %call6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %29 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %29
}

; Function Attrs: uwtable
define internal i32 @Pointer_ass_item(%struct._object* %myself, i64 %index, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %myself.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %value.addr = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %size = alloca i64, align 8
  %offset = alloca i64, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %itemdict = alloca %struct.StgDictObject*, align 8
  %proto = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.178, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %4, i32 0, i32 1
  %5 = load i8*, i8** %b_ptr, align 8
  %6 = bitcast i8* %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %cmp1 = icmp eq i8* %7, null
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %8 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %8, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.177, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.3:                                         ; preds = %if.end
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %10 = bitcast %struct.tagCDataObject* %9 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %10)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %stgdict, align 8
  %11 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto4 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %11, i32 0, i32 5
  %12 = load %struct._object*, %struct._object** %proto4, align 8
  store %struct._object* %12, %struct._object** %proto, align 8
  %13 = load %struct._object*, %struct._object** %proto, align 8
  %call5 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %13)
  store %struct.StgDictObject* %call5, %struct.StgDictObject** %itemdict, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %size6 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 1
  %15 = load i64, i64* %size6, align 8
  store i64 %15, i64* %size, align 8
  %16 = load i64, i64* %index.addr, align 8
  %17 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %size7 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %17, i32 0, i32 1
  %18 = load i64, i64* %size7, align 8
  %mul = mul i64 %16, %18
  store i64 %mul, i64* %offset, align 8
  %19 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %20 = bitcast %struct.tagCDataObject* %19 to %struct._object*
  %21 = load %struct._object*, %struct._object** %proto, align 8
  %22 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %setfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %22, i32 0, i32 6
  %23 = load %struct._object* (i8*, %struct._object*, i64)*, %struct._object* (i8*, %struct._object*, i64)** %setfunc, align 8
  %24 = load %struct._object*, %struct._object** %value.addr, align 8
  %25 = load i64, i64* %index.addr, align 8
  %26 = load i64, i64* %size, align 8
  %27 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr8 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %27, i32 0, i32 1
  %28 = load i8*, i8** %b_ptr8, align 8
  %29 = bitcast i8* %28 to i8**
  %30 = load i8*, i8** %29, align 8
  %31 = load i64, i64* %offset, align 8
  %add.ptr = getelementptr i8, i8* %30, i64 %31
  %call9 = call i32 @PyCData_set(%struct._object* %20, %struct._object* %21, %struct._object* (i8*, %struct._object*, i64)* %23, %struct._object* %24, i64 %25, i64 %26, i8* %add.ptr)
  store i32 %call9, i32* %retval
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  %32 = load i32, i32* %retval
  ret i32 %32
}

; Function Attrs: uwtable
define internal %struct._object* @Pointer_subscript(%struct._object* %myself, %struct._object* %item) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %myself.addr = alloca %struct._object*, align 8
  %item.addr = alloca %struct._object*, align 8
  %self = alloca %struct.tagCDataObject*, align 8
  %i = alloca i64, align 8
  %slice = alloca %struct.PySliceObject*, align 8
  %start = alloca i64, align 8
  %stop = alloca i64, align 8
  %step = alloca i64, align 8
  %np = alloca %struct._object*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %itemdict = alloca %struct.StgDictObject*, align 8
  %proto = alloca %struct._object*, align 8
  %i12 = alloca i64, align 8
  %len = alloca i64, align 8
  %cur = alloca i64, align 8
  %ptr = alloca i8*, align 8
  %dest = alloca i8*, align 8
  %ptr105 = alloca i32*, align 8
  %dest107 = alloca i32*, align 8
  %v = alloca %struct._object*, align 8
  store %struct._object* %myself, %struct._object** %myself.addr, align 8
  store %struct._object* %item, %struct._object** %item.addr, align 8
  %0 = load %struct._object*, %struct._object** %myself.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %1, %struct.tagCDataObject** %self, align 8
  %2 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 10
  %4 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp = icmp ne %struct.PyNumberMethods* %4, null
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %tp_as_number2 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 10
  %7 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number2, align 8
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %7, i32 0, i32 33
  %8 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index, align 8
  %cmp3 = icmp ne %struct._object* (%struct._object*)* %8, null
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct._object*, %struct._object** %item.addr, align 8
  %10 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %9, %struct._object* %10)
  store i64 %call, i64* %i, align 8
  %11 = load i64, i64* %i, align 8
  %cmp4 = icmp eq i64 %11, -1
  br i1 %cmp4, label %land.lhs.true.5, label %if.end

land.lhs.true.5:                                  ; preds = %if.then
  %call6 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call6, null
  br i1 %tobool, label %if.then.7, label %if.end

if.then.7:                                        ; preds = %land.lhs.true.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.5, %if.then
  %12 = load %struct._object*, %struct._object** %myself.addr, align 8
  %13 = load i64, i64* %i, align 8
  %call8 = call %struct._object* @Pointer_item(%struct._object* %12, i64 %13)
  store %struct._object* %call8, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %land.lhs.true, %entry
  %14 = load %struct._object*, %struct._object** %item.addr, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 1
  %15 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %cmp10 = icmp eq %struct._typeobject* %15, @PySlice_Type
  br i1 %cmp10, label %if.then.11, label %if.else.146

if.then.11:                                       ; preds = %if.else
  %16 = load %struct._object*, %struct._object** %item.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PySliceObject*
  store %struct.PySliceObject* %17, %struct.PySliceObject** %slice, align 8
  %18 = load %struct.PySliceObject*, %struct.PySliceObject** %slice, align 8
  %step13 = getelementptr inbounds %struct.PySliceObject, %struct.PySliceObject* %18, i32 0, i32 3
  %19 = load %struct._object*, %struct._object** %step13, align 8
  %cmp14 = icmp eq %struct._object* %19, @_Py_NoneStruct
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %if.then.11
  store i64 1, i64* %step, align 8
  br label %if.end.28

if.else.16:                                       ; preds = %if.then.11
  %20 = load %struct.PySliceObject*, %struct.PySliceObject** %slice, align 8
  %step17 = getelementptr inbounds %struct.PySliceObject, %struct.PySliceObject* %20, i32 0, i32 3
  %21 = load %struct._object*, %struct._object** %step17, align 8
  %22 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call18 = call i64 @PyNumber_AsSsize_t(%struct._object* %21, %struct._object* %22)
  store i64 %call18, i64* %step, align 8
  %23 = load i64, i64* %step, align 8
  %cmp19 = icmp eq i64 %23, -1
  br i1 %cmp19, label %land.lhs.true.20, label %if.end.24

land.lhs.true.20:                                 ; preds = %if.else.16
  %call21 = call %struct._object* @PyErr_Occurred()
  %tobool22 = icmp ne %struct._object* %call21, null
  br i1 %tobool22, label %if.then.23, label %if.end.24

if.then.23:                                       ; preds = %land.lhs.true.20
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.24:                                        ; preds = %land.lhs.true.20, %if.else.16
  %24 = load i64, i64* %step, align 8
  %cmp25 = icmp eq i64 %24, 0
  br i1 %cmp25, label %if.then.26, label %if.end.27

if.then.26:                                       ; preds = %if.end.24
  %25 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %25, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.179, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.27:                                        ; preds = %if.end.24
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.27, %if.then.15
  %26 = load %struct.PySliceObject*, %struct.PySliceObject** %slice, align 8
  %start29 = getelementptr inbounds %struct.PySliceObject, %struct.PySliceObject* %26, i32 0, i32 1
  %27 = load %struct._object*, %struct._object** %start29, align 8
  %cmp30 = icmp eq %struct._object* %27, @_Py_NoneStruct
  br i1 %cmp30, label %if.then.31, label %if.else.35

if.then.31:                                       ; preds = %if.end.28
  %28 = load i64, i64* %step, align 8
  %cmp32 = icmp slt i64 %28, 0
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %if.then.31
  %29 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %29, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.180, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.34:                                        ; preds = %if.then.31
  store i64 0, i64* %start, align 8
  br label %if.end.44

if.else.35:                                       ; preds = %if.end.28
  %30 = load %struct.PySliceObject*, %struct.PySliceObject** %slice, align 8
  %start36 = getelementptr inbounds %struct.PySliceObject, %struct.PySliceObject* %30, i32 0, i32 1
  %31 = load %struct._object*, %struct._object** %start36, align 8
  %32 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call37 = call i64 @PyNumber_AsSsize_t(%struct._object* %31, %struct._object* %32)
  store i64 %call37, i64* %start, align 8
  %33 = load i64, i64* %start, align 8
  %cmp38 = icmp eq i64 %33, -1
  br i1 %cmp38, label %land.lhs.true.39, label %if.end.43

land.lhs.true.39:                                 ; preds = %if.else.35
  %call40 = call %struct._object* @PyErr_Occurred()
  %tobool41 = icmp ne %struct._object* %call40, null
  br i1 %tobool41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %land.lhs.true.39
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.43:                                        ; preds = %land.lhs.true.39, %if.else.35
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.end.34
  %34 = load %struct.PySliceObject*, %struct.PySliceObject** %slice, align 8
  %stop45 = getelementptr inbounds %struct.PySliceObject, %struct.PySliceObject* %34, i32 0, i32 2
  %35 = load %struct._object*, %struct._object** %stop45, align 8
  %cmp46 = icmp eq %struct._object* %35, @_Py_NoneStruct
  br i1 %cmp46, label %if.then.47, label %if.end.48

if.then.47:                                       ; preds = %if.end.44
  %36 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %36, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.181, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.48:                                        ; preds = %if.end.44
  %37 = load %struct.PySliceObject*, %struct.PySliceObject** %slice, align 8
  %stop49 = getelementptr inbounds %struct.PySliceObject, %struct.PySliceObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %stop49, align 8
  %39 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %call50 = call i64 @PyNumber_AsSsize_t(%struct._object* %38, %struct._object* %39)
  store i64 %call50, i64* %stop, align 8
  %40 = load i64, i64* %stop, align 8
  %cmp51 = icmp eq i64 %40, -1
  br i1 %cmp51, label %land.lhs.true.52, label %if.end.56

land.lhs.true.52:                                 ; preds = %if.end.48
  %call53 = call %struct._object* @PyErr_Occurred()
  %tobool54 = icmp ne %struct._object* %call53, null
  br i1 %tobool54, label %if.then.55, label %if.end.56

if.then.55:                                       ; preds = %land.lhs.true.52
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.56:                                        ; preds = %land.lhs.true.52, %if.end.48
  %41 = load i64, i64* %step, align 8
  %cmp57 = icmp sgt i64 %41, 0
  br i1 %cmp57, label %land.lhs.true.58, label %lor.lhs.false

land.lhs.true.58:                                 ; preds = %if.end.56
  %42 = load i64, i64* %start, align 8
  %43 = load i64, i64* %stop, align 8
  %cmp59 = icmp sgt i64 %42, %43
  br i1 %cmp59, label %if.then.63, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true.58, %if.end.56
  %44 = load i64, i64* %step, align 8
  %cmp60 = icmp slt i64 %44, 0
  br i1 %cmp60, label %land.lhs.true.61, label %if.else.64

land.lhs.true.61:                                 ; preds = %lor.lhs.false
  %45 = load i64, i64* %start, align 8
  %46 = load i64, i64* %stop, align 8
  %cmp62 = icmp slt i64 %45, %46
  br i1 %cmp62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %land.lhs.true.61, %land.lhs.true.58
  store i64 0, i64* %len, align 8
  br label %if.end.74

if.else.64:                                       ; preds = %land.lhs.true.61, %lor.lhs.false
  %47 = load i64, i64* %step, align 8
  %cmp65 = icmp sgt i64 %47, 0
  br i1 %cmp65, label %if.then.66, label %if.else.68

if.then.66:                                       ; preds = %if.else.64
  %48 = load i64, i64* %stop, align 8
  %49 = load i64, i64* %start, align 8
  %sub = sub i64 %48, %49
  %sub67 = sub i64 %sub, 1
  %50 = load i64, i64* %step, align 8
  %div = sdiv i64 %sub67, %50
  %add = add i64 %div, 1
  store i64 %add, i64* %len, align 8
  br label %if.end.73

if.else.68:                                       ; preds = %if.else.64
  %51 = load i64, i64* %stop, align 8
  %52 = load i64, i64* %start, align 8
  %sub69 = sub i64 %51, %52
  %add70 = add i64 %sub69, 1
  %53 = load i64, i64* %step, align 8
  %div71 = sdiv i64 %add70, %53
  %add72 = add i64 %div71, 1
  store i64 %add72, i64* %len, align 8
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.68, %if.then.66
  br label %if.end.74

if.end.74:                                        ; preds = %if.end.73, %if.then.63
  %54 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %55 = bitcast %struct.tagCDataObject* %54 to %struct._object*
  %call75 = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %55)
  store %struct.StgDictObject* %call75, %struct.StgDictObject** %stgdict, align 8
  %56 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto76 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %56, i32 0, i32 5
  %57 = load %struct._object*, %struct._object** %proto76, align 8
  store %struct._object* %57, %struct._object** %proto, align 8
  %58 = load %struct._object*, %struct._object** %proto, align 8
  %call77 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %58)
  store %struct.StgDictObject* %call77, %struct.StgDictObject** %itemdict, align 8
  %59 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %getfunc = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %59, i32 0, i32 7
  %60 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc, align 8
  %call78 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.82, i32 0, i32 0))
  %getfunc79 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call78, i32 0, i32 2
  %61 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc79, align 8
  %cmp80 = icmp eq %struct._object* (i8*, i64)* %60, %61
  br i1 %cmp80, label %if.then.81, label %if.end.99

if.then.81:                                       ; preds = %if.end.74
  %62 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %62, i32 0, i32 1
  %63 = load i8*, i8** %b_ptr, align 8
  %64 = bitcast i8* %63 to i8**
  %65 = load i8*, i8** %64, align 8
  store i8* %65, i8** %ptr, align 8
  %66 = load i64, i64* %len, align 8
  %cmp82 = icmp sle i64 %66, 0
  br i1 %cmp82, label %if.then.83, label %if.end.85

if.then.83:                                       ; preds = %if.then.81
  %call84 = call %struct._object* @PyBytes_FromStringAndSize(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.136, i32 0, i32 0), i64 0)
  store %struct._object* %call84, %struct._object** %retval
  br label %return

if.end.85:                                        ; preds = %if.then.81
  %67 = load i64, i64* %step, align 8
  %cmp86 = icmp eq i64 %67, 1
  br i1 %cmp86, label %if.then.87, label %if.end.89

if.then.87:                                       ; preds = %if.end.85
  %68 = load i8*, i8** %ptr, align 8
  %69 = load i64, i64* %start, align 8
  %add.ptr = getelementptr i8, i8* %68, i64 %69
  %70 = load i64, i64* %len, align 8
  %call88 = call %struct._object* @PyBytes_FromStringAndSize(i8* %add.ptr, i64 %70)
  store %struct._object* %call88, %struct._object** %retval
  br label %return

if.end.89:                                        ; preds = %if.end.85
  %71 = load i64, i64* %len, align 8
  %call90 = call i8* @PyMem_Malloc(i64 %71)
  store i8* %call90, i8** %dest, align 8
  %72 = load i8*, i8** %dest, align 8
  %cmp91 = icmp eq i8* %72, null
  br i1 %cmp91, label %if.then.92, label %if.end.94

if.then.92:                                       ; preds = %if.end.89
  %call93 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call93, %struct._object** %retval
  br label %return

if.end.94:                                        ; preds = %if.end.89
  %73 = load i64, i64* %start, align 8
  store i64 %73, i64* %cur, align 8
  store i64 0, i64* %i12, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.94
  %74 = load i64, i64* %i12, align 8
  %75 = load i64, i64* %len, align 8
  %cmp95 = icmp slt i64 %74, %75
  br i1 %cmp95, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %76 = load i64, i64* %cur, align 8
  %77 = load i8*, i8** %ptr, align 8
  %arrayidx = getelementptr i8, i8* %77, i64 %76
  %78 = load i8, i8* %arrayidx, align 1
  %79 = load i64, i64* %i12, align 8
  %80 = load i8*, i8** %dest, align 8
  %arrayidx96 = getelementptr i8, i8* %80, i64 %79
  store i8 %78, i8* %arrayidx96, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %81 = load i64, i64* %step, align 8
  %82 = load i64, i64* %cur, align 8
  %add97 = add i64 %82, %81
  store i64 %add97, i64* %cur, align 8
  %83 = load i64, i64* %i12, align 8
  %inc = add i64 %83, 1
  store i64 %inc, i64* %i12, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %84 = load i8*, i8** %dest, align 8
  %85 = load i64, i64* %len, align 8
  %call98 = call %struct._object* @PyBytes_FromStringAndSize(i8* %84, i64 %85)
  store %struct._object* %call98, %struct._object** %np, align 8
  %86 = load i8*, i8** %dest, align 8
  call void @PyMem_Free(i8* %86)
  %87 = load %struct._object*, %struct._object** %np, align 8
  store %struct._object* %87, %struct._object** %retval
  br label %return

if.end.99:                                        ; preds = %if.end.74
  %88 = load %struct.StgDictObject*, %struct.StgDictObject** %itemdict, align 8
  %getfunc100 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %88, i32 0, i32 7
  %89 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc100, align 8
  %call101 = call %struct.fielddesc* @_ctypes_get_fielddesc(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.83, i32 0, i32 0))
  %getfunc102 = getelementptr inbounds %struct.fielddesc, %struct.fielddesc* %call101, i32 0, i32 2
  %90 = load %struct._object* (i8*, i64)*, %struct._object* (i8*, i64)** %getfunc102, align 8
  %cmp103 = icmp eq %struct._object* (i8*, i64)* %89, %90
  br i1 %cmp103, label %if.then.104, label %if.end.132

if.then.104:                                      ; preds = %if.end.99
  %91 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self, align 8
  %b_ptr106 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %91, i32 0, i32 1
  %92 = load i8*, i8** %b_ptr106, align 8
  %93 = bitcast i8* %92 to i32**
  %94 = load i32*, i32** %93, align 8
  store i32* %94, i32** %ptr105, align 8
  %95 = load i64, i64* %len, align 8
  %cmp108 = icmp sle i64 %95, 0
  br i1 %cmp108, label %if.then.109, label %if.end.111

if.then.109:                                      ; preds = %if.then.104
  %call110 = call %struct._object* @PyUnicode_New(i64 0, i32 0)
  store %struct._object* %call110, %struct._object** %retval
  br label %return

if.end.111:                                       ; preds = %if.then.104
  %96 = load i64, i64* %step, align 8
  %cmp112 = icmp eq i64 %96, 1
  br i1 %cmp112, label %if.then.113, label %if.end.116

if.then.113:                                      ; preds = %if.end.111
  %97 = load i32*, i32** %ptr105, align 8
  %98 = load i64, i64* %start, align 8
  %add.ptr114 = getelementptr i32, i32* %97, i64 %98
  %99 = load i64, i64* %len, align 8
  %call115 = call %struct._object* @PyUnicode_FromWideChar(i32* %add.ptr114, i64 %99)
  store %struct._object* %call115, %struct._object** %retval
  br label %return

if.end.116:                                       ; preds = %if.end.111
  %100 = load i64, i64* %len, align 8
  %mul = mul i64 %100, 4
  %call117 = call i8* @PyMem_Malloc(i64 %mul)
  %101 = bitcast i8* %call117 to i32*
  store i32* %101, i32** %dest107, align 8
  %102 = load i32*, i32** %dest107, align 8
  %cmp118 = icmp eq i32* %102, null
  br i1 %cmp118, label %if.then.119, label %if.end.121

if.then.119:                                      ; preds = %if.end.116
  %call120 = call %struct._object* @PyErr_NoMemory()
  store %struct._object* %call120, %struct._object** %retval
  br label %return

if.end.121:                                       ; preds = %if.end.116
  %103 = load i64, i64* %start, align 8
  store i64 %103, i64* %cur, align 8
  store i64 0, i64* %i12, align 8
  br label %for.cond.122

for.cond.122:                                     ; preds = %for.inc.127, %if.end.121
  %104 = load i64, i64* %i12, align 8
  %105 = load i64, i64* %len, align 8
  %cmp123 = icmp slt i64 %104, %105
  br i1 %cmp123, label %for.body.124, label %for.end.130

for.body.124:                                     ; preds = %for.cond.122
  %106 = load i64, i64* %cur, align 8
  %107 = load i32*, i32** %ptr105, align 8
  %arrayidx125 = getelementptr i32, i32* %107, i64 %106
  %108 = load i32, i32* %arrayidx125, align 4
  %109 = load i64, i64* %i12, align 8
  %110 = load i32*, i32** %dest107, align 8
  %arrayidx126 = getelementptr i32, i32* %110, i64 %109
  store i32 %108, i32* %arrayidx126, align 4
  br label %for.inc.127

for.inc.127:                                      ; preds = %for.body.124
  %111 = load i64, i64* %step, align 8
  %112 = load i64, i64* %cur, align 8
  %add128 = add i64 %112, %111
  store i64 %add128, i64* %cur, align 8
  %113 = load i64, i64* %i12, align 8
  %inc129 = add i64 %113, 1
  store i64 %inc129, i64* %i12, align 8
  br label %for.cond.122

for.end.130:                                      ; preds = %for.cond.122
  %114 = load i32*, i32** %dest107, align 8
  %115 = load i64, i64* %len, align 8
  %call131 = call %struct._object* @PyUnicode_FromWideChar(i32* %114, i64 %115)
  store %struct._object* %call131, %struct._object** %np, align 8
  %116 = load i32*, i32** %dest107, align 8
  %117 = bitcast i32* %116 to i8*
  call void @PyMem_Free(i8* %117)
  %118 = load %struct._object*, %struct._object** %np, align 8
  store %struct._object* %118, %struct._object** %retval
  br label %return

if.end.132:                                       ; preds = %if.end.99
  %119 = load i64, i64* %len, align 8
  %call133 = call %struct._object* @PyList_New(i64 %119)
  store %struct._object* %call133, %struct._object** %np, align 8
  %120 = load %struct._object*, %struct._object** %np, align 8
  %cmp134 = icmp eq %struct._object* %120, null
  br i1 %cmp134, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %if.end.132
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.136:                                       ; preds = %if.end.132
  %121 = load i64, i64* %start, align 8
  store i64 %121, i64* %cur, align 8
  store i64 0, i64* %i12, align 8
  br label %for.cond.137

for.cond.137:                                     ; preds = %for.inc.142, %if.end.136
  %122 = load i64, i64* %i12, align 8
  %123 = load i64, i64* %len, align 8
  %cmp138 = icmp slt i64 %122, %123
  br i1 %cmp138, label %for.body.139, label %for.end.145

for.body.139:                                     ; preds = %for.cond.137
  %124 = load %struct._object*, %struct._object** %myself.addr, align 8
  %125 = load i64, i64* %cur, align 8
  %call140 = call %struct._object* @Pointer_item(%struct._object* %124, i64 %125)
  store %struct._object* %call140, %struct._object** %v, align 8
  %126 = load %struct._object*, %struct._object** %v, align 8
  %127 = load i64, i64* %i12, align 8
  %128 = load %struct._object*, %struct._object** %np, align 8
  %129 = bitcast %struct._object* %128 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %129, i32 0, i32 1
  %130 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx141 = getelementptr %struct._object*, %struct._object** %130, i64 %127
  store %struct._object* %126, %struct._object** %arrayidx141, align 8
  br label %for.inc.142

for.inc.142:                                      ; preds = %for.body.139
  %131 = load i64, i64* %step, align 8
  %132 = load i64, i64* %cur, align 8
  %add143 = add i64 %132, %131
  store i64 %add143, i64* %cur, align 8
  %133 = load i64, i64* %i12, align 8
  %inc144 = add i64 %133, 1
  store i64 %inc144, i64* %i12, align 8
  br label %for.cond.137

for.end.145:                                      ; preds = %for.cond.137
  %134 = load %struct._object*, %struct._object** %np, align 8
  store %struct._object* %134, %struct._object** %retval
  br label %return

if.else.146:                                      ; preds = %if.else
  %135 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %135, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.182, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else.146, %for.end.145, %if.then.135, %for.end.130, %if.then.119, %if.then.113, %if.then.109, %for.end, %if.then.92, %if.then.87, %if.then.83, %if.then.55, %if.then.47, %if.then.42, %if.then.33, %if.then.26, %if.then.23, %if.end, %if.then.7
  %136 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %136
}

; Function Attrs: uwtable
define internal %struct._object* @Pointer_get_contents(%struct.tagCDataObject* %self, i8* %closure) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %closure.addr = alloca i8*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %0, i32 0, i32 1
  %1 = load i8*, i8** %b_ptr, align 8
  %2 = bitcast i8* %1 to i8**
  %3 = load i8*, i8** %2, align 8
  %cmp = icmp eq i8* %3, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %4 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  call void @PyErr_SetString(%struct._object* %4, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.177, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %5 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %6 = bitcast %struct.tagCDataObject* %5 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %6)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %stgdict, align 8
  %7 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %7, i32 0, i32 5
  %8 = load %struct._object*, %struct._object** %proto, align 8
  %9 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %10 = bitcast %struct.tagCDataObject* %9 to %struct._object*
  %11 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr1 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %11, i32 0, i32 1
  %12 = load i8*, i8** %b_ptr1, align 8
  %13 = bitcast i8* %12 to i8**
  %14 = load i8*, i8** %13, align 8
  %call2 = call %struct._object* @PyCData_FromBaseObj(%struct._object* %8, %struct._object* %10, i64 0, i8* %14)
  store %struct._object* %call2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %15 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %15
}

; Function Attrs: uwtable
define internal i32 @Pointer_set_contents(%struct.tagCDataObject* %self, %struct._object* %value, i8* %closure) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct.tagCDataObject*, align 8
  %value.addr = alloca %struct._object*, align 8
  %closure.addr = alloca i8*, align 8
  %stgdict = alloca %struct.StgDictObject*, align 8
  %dst = alloca %struct.tagCDataObject*, align 8
  %keep = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  store %struct.tagCDataObject* %self, %struct.tagCDataObject** %self.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  store i8* %closure, i8** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %value.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.178, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %3 = bitcast %struct.tagCDataObject* %2 to %struct._object*
  %call = call %struct.StgDictObject* @PyObject_stgdict(%struct._object* %3)
  store %struct.StgDictObject* %call, %struct.StgDictObject** %stgdict, align 8
  %4 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp1 = icmp eq %struct._typeobject* %5, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*)
  br i1 %cmp1, label %if.end.16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %call3 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCData_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call3, 0
  br i1 %tobool, label %if.end.16, label %if.then.4

if.then.4:                                        ; preds = %lor.lhs.false
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %9, i32 0, i32 5
  %10 = load %struct._object*, %struct._object** %proto, align 8
  %call5 = call i32 @PyObject_IsInstance(%struct._object* %8, %struct._object* %10)
  store i32 %call5, i32* %res, align 4
  %11 = load i32, i32* %res, align 4
  %cmp6 = icmp eq i32 %11, -1
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.then.4
  store i32 -1, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.then.4
  %12 = load i32, i32* %res, align 4
  %tobool9 = icmp ne i32 %12, 0
  br i1 %tobool9, label %if.end.15, label %if.then.10

if.then.10:                                       ; preds = %if.end.8
  %13 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %stgdict, align 8
  %proto11 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 5
  %15 = load %struct._object*, %struct._object** %proto11, align 8
  %16 = bitcast %struct._object* %15 to %struct._typeobject*
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 1
  %17 = load i8*, i8** %tp_name, align 8
  %18 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_type12 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type12, align 8
  %tp_name13 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 1
  %20 = load i8*, i8** %tp_name13, align 8
  %call14 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %13, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.185, i32 0, i32 0), i8* %17, i8* %20)
  store i32 -1, i32* %retval
  br label %return

if.end.15:                                        ; preds = %if.end.8
  br label %if.end.16

if.end.16:                                        ; preds = %if.end.15, %lor.lhs.false, %if.end
  %21 = load %struct._object*, %struct._object** %value.addr, align 8
  %22 = bitcast %struct._object* %21 to %struct.tagCDataObject*
  store %struct.tagCDataObject* %22, %struct.tagCDataObject** %dst, align 8
  %23 = load %struct.tagCDataObject*, %struct.tagCDataObject** %dst, align 8
  %b_ptr = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %23, i32 0, i32 1
  %24 = load i8*, i8** %b_ptr, align 8
  %25 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %b_ptr17 = getelementptr inbounds %struct.tagCDataObject, %struct.tagCDataObject* %25, i32 0, i32 1
  %26 = load i8*, i8** %b_ptr17, align 8
  %27 = bitcast i8* %26 to i8**
  store i8* %24, i8** %27, align 8
  %28 = load %struct._object*, %struct._object** %value.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %28, i32 0, i32 0
  %29 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %29, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %30 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %31 = load %struct._object*, %struct._object** %value.addr, align 8
  %call18 = call i32 @KeepRef(%struct.tagCDataObject* %30, i64 1, %struct._object* %31)
  %cmp19 = icmp eq i32 -1, %call18
  br i1 %cmp19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.16
  store i32 -1, i32* %retval
  br label %return

if.end.21:                                        ; preds = %if.end.16
  %32 = load %struct.tagCDataObject*, %struct.tagCDataObject** %dst, align 8
  %call22 = call %struct._object* @GetKeepedObjects(%struct.tagCDataObject* %32)
  store %struct._object* %call22, %struct._object** %keep, align 8
  %33 = load %struct._object*, %struct._object** %keep, align 8
  %cmp23 = icmp eq %struct._object* %33, null
  br i1 %cmp23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.21
  store i32 -1, i32* %retval
  br label %return

if.end.25:                                        ; preds = %if.end.21
  %34 = load %struct._object*, %struct._object** %keep, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %34, i32 0, i32 0
  %35 = load i64, i64* %ob_refcnt26, align 8
  %inc27 = add i64 %35, 1
  store i64 %inc27, i64* %ob_refcnt26, align 8
  %36 = load %struct.tagCDataObject*, %struct.tagCDataObject** %self.addr, align 8
  %37 = load %struct._object*, %struct._object** %keep, align 8
  %call28 = call i32 @KeepRef(%struct.tagCDataObject* %36, i64 0, %struct._object* %37)
  store i32 %call28, i32* %retval
  br label %return

return:                                           ; preds = %if.end.25, %if.then.24, %if.then.20, %if.then.10, %if.then.7, %if.then
  %38 = load i32, i32* %retval
  ret i32 %38
}

; Function Attrs: uwtable
define internal i32 @UnionType_setattro(%struct._object* %self, %struct._object* %key, %struct._object* %value) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %key.addr = alloca %struct._object*, align 8
  %value.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %key, %struct._object** %key.addr, align 8
  store %struct._object* %value, %struct._object** %value.addr, align 8
  %0 = load %struct._object*, %struct._object** %self.addr, align 8
  %1 = load %struct._object*, %struct._object** %key.addr, align 8
  %2 = load %struct._object*, %struct._object** %value.addr, align 8
  %call = call i32 @PyObject_GenericSetAttr(%struct._object* %0, %struct._object* %1, %struct._object* %2)
  %cmp = icmp eq i32 -1, %call
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load %struct._object*, %struct._object** %key.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 1
  %4 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 19
  %5 = load i64, i64* %tp_flags, align 8
  %and = and i64 %5, 268435456
  %cmp1 = icmp ne i64 %and, 0
  br i1 %cmp1, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %key.addr, align 8
  %call2 = call i8* @PyUnicode_AsUTF8(%struct._object* %6)
  %call3 = call i32 @strcmp(i8* %call2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52, i32 0, i32 0)) #7
  %cmp4 = icmp eq i32 0, %call3
  br i1 %cmp4, label %if.then.5, label %if.end.7

if.then.5:                                        ; preds = %land.lhs.true
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %value.addr, align 8
  %call6 = call i32 @PyCStructUnionType_update_stgdict(%struct._object* %7, %struct._object* %8, i32 0)
  store i32 %call6, i32* %retval
  br label %return

if.end.7:                                         ; preds = %land.lhs.true, %if.end
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.7, %if.then.5, %if.then
  %9 = load i32, i32* %retval
  ret i32 %9
}

; Function Attrs: uwtable
define internal %struct._object* @UnionType_new(%struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %1 = load %struct._object*, %struct._object** %args.addr, align 8
  %2 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call %struct._object* @StructUnionType_new(%struct._typeobject* %0, %struct._object* %1, %struct._object* %2, i32 0)
  ret %struct._object* %call
}

declare i32 @PyObject_GenericSetAttr(%struct._object*, %struct._object*, %struct._object*) #1

; Function Attrs: uwtable
define internal i32 @Struct_init(%struct._object* %self, %struct._object* %args, %struct._object* %kwds) #0 {
entry:
  %retval = alloca i32, align 4
  %self.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %res = alloca i64, align 8
  %key = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %pos = alloca i64, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  %0 = load %struct._object*, %struct._object** %args.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1, i32 0, i32 19
  %2 = load i64, i64* %tp_flags, align 8
  %and = and i64 %2, 67108864
  %cmp = icmp ne i64 %and, 0
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %3, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.171, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %4 = load %struct._object*, %struct._object** %args.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %5, i32 0, i32 1
  %6 = load i64, i64* %ob_size, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %if.then.1, label %if.end.10

if.then.1:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %self.addr, align 8
  %8 = load %struct._object*, %struct._object** %self.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %10 = load %struct._object*, %struct._object** %args.addr, align 8
  %11 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call = call i64 @_init_pos_args(%struct._object* %7, %struct._typeobject* %9, %struct._object* %10, %struct._object* %11, i64 0)
  store i64 %call, i64* %res, align 8
  %12 = load i64, i64* %res, align 8
  %cmp3 = icmp eq i64 %12, -1
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %if.then.1
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %if.then.1
  %13 = load i64, i64* %res, align 8
  %14 = load %struct._object*, %struct._object** %args.addr, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1
  %16 = load i64, i64* %ob_size6, align 8
  %cmp7 = icmp slt i64 %13, %16
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.5
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %17, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.192, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.5
  br label %if.end.10

if.end.10:                                        ; preds = %if.end.9, %if.end
  %18 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %tobool11 = icmp ne %struct._object* %18, null
  br i1 %tobool11, label %if.then.12, label %if.end.19

if.then.12:                                       ; preds = %if.end.10
  store i64 0, i64* %pos, align 8
  br label %while.cond

while.cond:                                       ; preds = %if.end.18, %if.then.12
  %19 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %call13 = call i32 @PyDict_Next(%struct._object* %19, i64* %pos, %struct._object** %key, %struct._object** %value)
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %20 = load %struct._object*, %struct._object** %self.addr, align 8
  %21 = load %struct._object*, %struct._object** %key, align 8
  %22 = load %struct._object*, %struct._object** %value, align 8
  %call15 = call i32 @PyObject_SetAttr(%struct._object* %20, %struct._object* %21, %struct._object* %22)
  %cmp16 = icmp eq i32 -1, %call15
  br i1 %cmp16, label %if.then.17, label %if.end.18

if.then.17:                                       ; preds = %while.body
  store i32 -1, i32* %retval
  br label %return

if.end.18:                                        ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end.19

if.end.19:                                        ; preds = %while.end, %if.end.10
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.19, %if.then.17, %if.then.8, %if.then.4, %if.then
  %23 = load i32, i32* %retval
  ret i32 %23
}

; Function Attrs: uwtable
define internal i64 @_init_pos_args(%struct._object* %self, %struct._typeobject* %type, %struct._object* %args, %struct._object* %kwds, i64 %index) #0 {
entry:
  %retval = alloca i64, align 8
  %self.addr = alloca %struct._object*, align 8
  %type.addr = alloca %struct._typeobject*, align 8
  %args.addr = alloca %struct._object*, align 8
  %kwds.addr = alloca %struct._object*, align 8
  %index.addr = alloca i64, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  %fields = alloca %struct._object*, align 8
  %i = alloca i64, align 8
  %pair = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %val = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %field = alloca i8*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_decref_tmp45 = alloca %struct._object*, align 8
  %_py_decref_tmp58 = alloca %struct._object*, align 8
  %_py_decref_tmp69 = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._typeobject* %type, %struct._typeobject** %type.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._object* %kwds, %struct._object** %kwds.addr, align 8
  store i64 %index, i64* %index.addr, align 8
  %0 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base = getelementptr inbounds %struct._typeobject, %struct._typeobject* %0, i32 0, i32 30
  %1 = load %struct._typeobject*, %struct._typeobject** %tp_base, align 8
  %2 = bitcast %struct._typeobject* %1 to %struct._object*
  %call = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %2)
  %tobool = icmp ne %struct.StgDictObject* %call, null
  br i1 %tobool, label %if.then, label %if.end.4

if.then:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %self.addr, align 8
  %4 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %tp_base1 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4, i32 0, i32 30
  %5 = load %struct._typeobject*, %struct._typeobject** %tp_base1, align 8
  %6 = load %struct._object*, %struct._object** %args.addr, align 8
  %7 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %8 = load i64, i64* %index.addr, align 8
  %call2 = call i64 @_init_pos_args(%struct._object* %3, %struct._typeobject* %5, %struct._object* %6, %struct._object* %7, i64 %8)
  store i64 %call2, i64* %index.addr, align 8
  %9 = load i64, i64* %index.addr, align 8
  %cmp = icmp eq i64 %9, -1
  br i1 %cmp, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  store i64 -1, i64* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.4

if.end.4:                                         ; preds = %if.end, %entry
  %10 = load %struct._typeobject*, %struct._typeobject** %type.addr, align 8
  %11 = bitcast %struct._typeobject* %10 to %struct._object*
  %call5 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %11)
  store %struct.StgDictObject* %call5, %struct.StgDictObject** %dict, align 8
  %12 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %13 = bitcast %struct.StgDictObject* %12 to %struct._object*
  %call6 = call %struct._object* @PyDict_GetItemString(%struct._object* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52, i32 0, i32 0))
  store %struct._object* %call6, %struct._object** %fields, align 8
  %14 = load %struct._object*, %struct._object** %fields, align 8
  %cmp7 = icmp eq %struct._object* %14, null
  br i1 %cmp7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end.4
  %15 = load i64, i64* %index.addr, align 8
  store i64 %15, i64* %retval
  br label %return

if.end.9:                                         ; preds = %if.end.4
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.9
  %16 = load i64, i64* %i, align 8
  %17 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %length = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %17, i32 0, i32 3
  %18 = load i64, i64* %length, align 8
  %cmp10 = icmp slt i64 %16, %18
  br i1 %cmp10, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %19 = load i64, i64* %i, align 8
  %20 = load i64, i64* %index.addr, align 8
  %add = add i64 %19, %20
  %21 = load %struct._object*, %struct._object** %args.addr, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %22, i32 0, i32 1
  %23 = load i64, i64* %ob_size, align 8
  %cmp11 = icmp slt i64 %add, %23
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %24 = phi i1 [ false, %for.cond ], [ %cmp11, %land.rhs ]
  br i1 %24, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %25 = load %struct._object*, %struct._object** %fields, align 8
  %26 = load i64, i64* %i, align 8
  %call12 = call %struct._object* @PySequence_GetItem(%struct._object* %25, i64 %26)
  store %struct._object* %call12, %struct._object** %pair, align 8
  %27 = load %struct._object*, %struct._object** %pair, align 8
  %tobool13 = icmp ne %struct._object* %27, null
  br i1 %tobool13, label %if.end.15, label %if.then.14

if.then.14:                                       ; preds = %for.body
  store i64 -1, i64* %retval
  br label %return

if.end.15:                                        ; preds = %for.body
  %28 = load %struct._object*, %struct._object** %pair, align 8
  %call16 = call %struct._object* @PySequence_GetItem(%struct._object* %28, i64 0)
  store %struct._object* %call16, %struct._object** %name, align 8
  %29 = load %struct._object*, %struct._object** %name, align 8
  %tobool17 = icmp ne %struct._object* %29, null
  br i1 %tobool17, label %if.end.22, label %if.then.18

if.then.18:                                       ; preds = %if.end.15
  br label %do.body

do.body:                                          ; preds = %if.then.18
  %30 = load %struct._object*, %struct._object** %pair, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.20, label %if.else

if.then.20:                                       ; preds = %do.body
  br label %if.end.21

if.else:                                          ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.21

if.end.21:                                        ; preds = %if.else, %if.then.20
  br label %do.end

do.end:                                           ; preds = %if.end.21
  store i64 -1, i64* %retval
  br label %return

if.end.22:                                        ; preds = %if.end.15
  %37 = load i64, i64* %i, align 8
  %38 = load i64, i64* %index.addr, align 8
  %add23 = add i64 %37, %38
  %39 = load %struct._object*, %struct._object** %args.addr, align 8
  %40 = bitcast %struct._object* %39 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %40, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %add23
  %41 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %41, %struct._object** %val, align 8
  %42 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %tobool24 = icmp ne %struct._object* %42, null
  br i1 %tobool24, label %land.lhs.true, label %if.end.55

land.lhs.true:                                    ; preds = %if.end.22
  %43 = load %struct._object*, %struct._object** %kwds.addr, align 8
  %44 = load %struct._object*, %struct._object** %name, align 8
  %call25 = call %struct._object* @PyDict_GetItem(%struct._object* %43, %struct._object* %44)
  %tobool26 = icmp ne %struct._object* %call25, null
  br i1 %tobool26, label %if.then.27, label %if.end.55

if.then.27:                                       ; preds = %land.lhs.true
  %45 = load %struct._object*, %struct._object** %name, align 8
  %call28 = call i8* @PyBytes_AsString(%struct._object* %45)
  store i8* %call28, i8** %field, align 8
  %46 = load i8*, i8** %field, align 8
  %cmp29 = icmp eq i8* %46, null
  br i1 %cmp29, label %if.then.30, label %if.end.31

if.then.30:                                       ; preds = %if.then.27
  call void @PyErr_Clear()
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.58, i32 0, i32 0), i8** %field, align 8
  br label %if.end.31

if.end.31:                                        ; preds = %if.then.30, %if.then.27
  %47 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %48 = load i8*, i8** %field, align 8
  %call32 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %47, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.193, i32 0, i32 0), i8* %48)
  br label %do.body.33

do.body.33:                                       ; preds = %if.end.31
  %49 = load %struct._object*, %struct._object** %pair, align 8
  store %struct._object* %49, %struct._object** %_py_decref_tmp34, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 0
  %51 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %51, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %52 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %52, i32 0, i32 1
  %53 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %53, i32 0, i32 4
  %54 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %54(%struct._object* %55)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  br label %do.body.44

do.body.44:                                       ; preds = %do.end.43
  %56 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %56, %struct._object** %_py_decref_tmp45, align 8
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_refcnt46 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 0
  %58 = load i64, i64* %ob_refcnt46, align 8
  %dec47 = add i64 %58, -1
  store i64 %dec47, i64* %ob_refcnt46, align 8
  %cmp48 = icmp ne i64 %dec47, 0
  br i1 %cmp48, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.44
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.44
  %59 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %59, i32 0, i32 1
  %60 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %60, i32 0, i32 4
  %61 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp45, align 8
  call void %61(%struct._object* %62)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  store i64 -1, i64* %retval
  br label %return

if.end.55:                                        ; preds = %land.lhs.true, %if.end.22
  %63 = load %struct._object*, %struct._object** %self.addr, align 8
  %64 = load %struct._object*, %struct._object** %name, align 8
  %65 = load %struct._object*, %struct._object** %val, align 8
  %call56 = call i32 @PyObject_SetAttr(%struct._object* %63, %struct._object* %64, %struct._object* %65)
  store i32 %call56, i32* %res, align 4
  br label %do.body.57

do.body.57:                                       ; preds = %if.end.55
  %66 = load %struct._object*, %struct._object** %pair, align 8
  store %struct._object* %66, %struct._object** %_py_decref_tmp58, align 8
  %67 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_refcnt59 = getelementptr inbounds %struct._object, %struct._object* %67, i32 0, i32 0
  %68 = load i64, i64* %ob_refcnt59, align 8
  %dec60 = add i64 %68, -1
  store i64 %dec60, i64* %ob_refcnt59, align 8
  %cmp61 = icmp ne i64 %dec60, 0
  br i1 %cmp61, label %if.then.62, label %if.else.63

if.then.62:                                       ; preds = %do.body.57
  br label %if.end.66

if.else.63:                                       ; preds = %do.body.57
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  %ob_type64 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type64, align 8
  %tp_dealloc65 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 4
  %71 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc65, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp58, align 8
  call void %71(%struct._object* %72)
  br label %if.end.66

if.end.66:                                        ; preds = %if.else.63, %if.then.62
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  br label %do.body.68

do.body.68:                                       ; preds = %do.end.67
  %73 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %73, %struct._object** %_py_decref_tmp69, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_refcnt70 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 0
  %75 = load i64, i64* %ob_refcnt70, align 8
  %dec71 = add i64 %75, -1
  store i64 %dec71, i64* %ob_refcnt70, align 8
  %cmp72 = icmp ne i64 %dec71, 0
  br i1 %cmp72, label %if.then.73, label %if.else.74

if.then.73:                                       ; preds = %do.body.68
  br label %if.end.77

if.else.74:                                       ; preds = %do.body.68
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  %ob_type75 = getelementptr inbounds %struct._object, %struct._object* %76, i32 0, i32 1
  %77 = load %struct._typeobject*, %struct._typeobject** %ob_type75, align 8
  %tp_dealloc76 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %77, i32 0, i32 4
  %78 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc76, align 8
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp69, align 8
  call void %78(%struct._object* %79)
  br label %if.end.77

if.end.77:                                        ; preds = %if.else.74, %if.then.73
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  %80 = load i32, i32* %res, align 4
  %cmp79 = icmp eq i32 %80, -1
  br i1 %cmp79, label %if.then.80, label %if.end.81

if.then.80:                                       ; preds = %do.end.78
  store i64 -1, i64* %retval
  br label %return

if.end.81:                                        ; preds = %do.end.78
  br label %for.inc

for.inc:                                          ; preds = %if.end.81
  %81 = load i64, i64* %i, align 8
  %inc = add i64 %81, 1
  store i64 %inc, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %land.end
  %82 = load i64, i64* %index.addr, align 8
  %83 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %length82 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %83, i32 0, i32 3
  %84 = load i64, i64* %length82, align 8
  %add83 = add i64 %82, %84
  store i64 %add83, i64* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.80, %do.end.54, %do.end, %if.then.14, %if.then.8, %if.then.3
  %85 = load i64, i64* %retval
  ret i64 %85
}

declare i32 @PyDict_Next(%struct._object*, i64*, %struct._object**, %struct._object**) #1

declare i32 @PyObject_SetAttr(%struct._object*, %struct._object*, %struct._object*) #1

declare i8* @PyBytes_AsString(%struct._object*) #1

; Function Attrs: uwtable
define internal i32 @cast_check_pointertype(%struct._object* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca %struct._object*, align 8
  %dict = alloca %struct.StgDictObject*, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*)
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %call = call i32 @PyType_IsSubtype(%struct._typeobject* %3, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCPointerType_Type to %struct._typeobject*))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 1, i32* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %cmp3 = icmp eq %struct._typeobject* %5, bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtrType_Type to %struct._typeobject*)
  br i1 %cmp3, label %if.then.8, label %lor.lhs.false.4

lor.lhs.false.4:                                  ; preds = %if.end
  %6 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 1
  %7 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %call6 = call i32 @PyType_IsSubtype(%struct._typeobject* %7, %struct._typeobject* bitcast ({ %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, %struct._object* (%struct._object*)*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }* @PyCFuncPtrType_Type to %struct._typeobject*))
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %lor.lhs.false.4, %if.end
  store i32 1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %lor.lhs.false.4
  %8 = load %struct._object*, %struct._object** %arg.addr, align 8
  %call10 = call %struct.StgDictObject* @PyType_stgdict(%struct._object* %8)
  store %struct.StgDictObject* %call10, %struct.StgDictObject** %dict, align 8
  %9 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %tobool11 = icmp ne %struct.StgDictObject* %9, null
  br i1 %tobool11, label %if.then.12, label %if.end.21

if.then.12:                                       ; preds = %if.end.9
  %10 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %10, i32 0, i32 5
  %11 = load %struct._object*, %struct._object** %proto, align 8
  %ob_type13 = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type13, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 19
  %13 = load i64, i64* %tp_flags, align 8
  %and = and i64 %13, 268435456
  %cmp14 = icmp ne i64 %and, 0
  br i1 %cmp14, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.then.12
  %14 = load %struct.StgDictObject*, %struct.StgDictObject** %dict, align 8
  %proto15 = getelementptr inbounds %struct.StgDictObject, %struct.StgDictObject* %14, i32 0, i32 5
  %15 = load %struct._object*, %struct._object** %proto15, align 8
  %call16 = call i8* @PyUnicode_AsUTF8(%struct._object* %15)
  %arrayidx = getelementptr i8, i8* %call16, i64 0
  %16 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %16 to i32
  %call17 = call i8* @strchr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.196, i32 0, i32 0), i32 %conv) #7
  %tobool18 = icmp ne i8* %call17, null
  br i1 %tobool18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %land.lhs.true
  store i32 1, i32* %retval
  br label %return

if.end.20:                                        ; preds = %land.lhs.true, %if.then.12
  br label %if.end.21

if.end.21:                                        ; preds = %if.end.20, %if.end.9
  %17 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %18 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type22 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type22, align 8
  %tp_flags23 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 19
  %20 = load i64, i64* %tp_flags23, align 8
  %and24 = and i64 %20, 2147483648
  %cmp25 = icmp ne i64 %and24, 0
  br i1 %cmp25, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end.21
  %21 = load %struct._object*, %struct._object** %arg.addr, align 8
  %22 = bitcast %struct._object* %21 to %struct._typeobject*
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 1
  %23 = load i8*, i8** %tp_name, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end.21
  %24 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_name28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 1
  %26 = load i8*, i8** %tp_name28, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %23, %cond.true ], [ %26, %cond.false ]
  %call29 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %17, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.197, i32 0, i32 0), i8* %cond)
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then.19, %if.then.8, %if.then
  %27 = load i32, i32* %retval
  ret i32 %27
}

; Function Attrs: nounwind readonly
declare i64 @wcslen(i32*) #2

attributes #0 = { uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"PIC Level", i32 2}
!1 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!2 = !{i32 139928}
!3 = !{i32 139768}
