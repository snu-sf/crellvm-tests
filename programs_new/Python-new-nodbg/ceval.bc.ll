; ModuleID = './ceval.bc'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._object = type { i64, %struct._typeobject* }
%struct._typeobject = type { %struct.PyVarObject, i8*, i64, i64, void (%struct._object*)*, i32 (%struct._object*, %struct._IO_FILE*, i32)*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, i8*, %struct._object*)*, i8*, {}*, %struct.PyNumberMethods*, %struct.PySequenceMethods*, %struct.PyMappingMethods*, i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct.PyBufferProcs*, i64, i8*, i32 (%struct._object*, i32 (%struct._object*, i8*)*, i8*)*, i32 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*, i32)*, i64, {}*, {}*, %struct.PyMethodDef*, %struct.PyMemberDef*, %struct.PyGetSetDef*, %struct._typeobject*, %struct._object*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)*, i64, i32 (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._typeobject*, i64)*, %struct._object* (%struct._typeobject*, %struct._object*, %struct._object*)*, void (i8*)*, i32 (%struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, void (%struct._object*)*, i32, void (%struct._object*)* }
%struct.PyVarObject = type { %struct._object, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }
%struct.PyNumberMethods = type { %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, {}*, {}*, {}*, i32 (%struct._object*)*, {}*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}*, i8*, {}*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, {}* }
%struct.PySequenceMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)*, %struct._object* (%struct._object*, i64)*, i8*, i32 (%struct._object*, i64, %struct._object*)*, i8*, i32 (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, i64)* }
%struct.PyMappingMethods = type { i64 (%struct._object*)*, %struct._object* (%struct._object*, %struct._object*)*, i32 (%struct._object*, %struct._object*, %struct._object*)* }
%struct.PyBufferProcs = type { i32 (%struct._object*, %struct.bufferinfo*, i32)*, void (%struct._object*, %struct.bufferinfo*)* }
%struct.bufferinfo = type { i8*, %struct._object*, i64, i64, i32, i32, i8*, i64*, i64*, i64*, i8* }
%struct.PyMethodDef = type { i8*, %struct._object* (%struct._object*, %struct._object*)*, i32, i8* }
%struct.PyMemberDef = type { i8*, i32, i64, i32, i8* }
%struct.PyGetSetDef = type { i8*, %struct._object* (%struct._object*, i8*)*, i32 (%struct._object*, %struct._object*, i8*)*, i8*, i8* }
%struct._Py_atomic_address = type { i8* }
%struct._Py_Identifier = type { %struct._Py_Identifier*, i8*, %struct._object* }
%struct._Py_atomic_int = type { i32 }
%struct._ts = type { %struct._ts*, %struct._ts*, %struct._is*, %struct._frame*, i32, i8, i8, i32, i32, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, %struct._object*, i64, i32, %struct._object*, void (i8*)*, i8* }
%struct._is = type { %struct._is*, %struct._ts*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, %struct._object* }
%struct._frame = type { %struct.PyVarObject, %struct._frame*, %struct.PyCodeObject*, %struct._object*, %struct._object*, %struct._object*, %struct._object**, %struct._object**, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i32, i32, i32, i8, [20 x %struct.PyTryBlock], [1 x %struct._object*] }
%struct.PyCodeObject = type { %struct._object, i32, i32, i32, i32, i32, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, i8*, %struct._object*, %struct._object*, i32, %struct._object*, i8*, %struct._object* }
%struct.PyTryBlock = type { i32, i32, i32 }
%struct.anon = type { i32 (i8*)*, i8* }
%struct._longobject = type { %struct.PyVarObject, [1 x i32] }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i32, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%union.pthread_cond_t = type { %struct.anon.0 }
%struct.anon.0 = type { i32, i32, i64, i64, i64, i8*, i32, i32 }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_condattr_t = type { i32 }
%struct.PyTupleObject = type { %struct.PyVarObject, [1 x %struct._object*] }
%struct.PyBytesObject = type { %struct.PyVarObject, i64, [1 x i8] }
%struct.PyGenObject = type { %struct._object, %struct._frame*, i8, %struct._object*, %struct._object* }
%struct.PyListObject = type { %struct.PyVarObject, %struct._object**, i64 }
%struct.PyDictObject = type { %struct._object, i64, %struct._dictkeysobject*, %struct._object** }
%struct._dictkeysobject = type opaque
%struct.PyCellObject = type { %struct._object, %struct._object* }
%struct.PyMethodObject = type { %struct._object, %struct._object*, %struct._object*, %struct._object* }
%struct._addr_pair = type { i32, i32 }
%struct.PyASCIIObject = type { %struct._object, i64, i64, %struct.anon.1, i32* }
%struct.anon.1 = type { i32 }
%struct.PyCompactUnicodeObject = type { %struct.PyASCIIObject, i64, i8*, i64 }
%struct.PyUnicodeObject = type { %struct.PyCompactUnicodeObject, %union.anon }
%union.anon = type { i8* }
%struct.PyCFunctionObject = type { %struct._object, %struct.PyMethodDef*, %struct._object*, %struct._object* }
%struct.PyCompilerFlags = type { i32 }
%struct.PyFunctionObject = type { %struct._object, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object*, %struct._object* }
%struct.timespec = type { i64, i64 }
%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

@_Py_NoneStruct = external global %struct._object, align 8
@gil_interval = internal global i64 5000, align 8
@_PyThreadState_Current = external global %struct._Py_atomic_address, align 8
@main_thread = internal global i64 0, align 8
@pending_lock = internal global i8* null, align 8
@.str = private unnamed_addr constant [49 x i8] c"PyEval_AcquireLock: current thread state is NULL\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"PyEval_AcquireThread: NULL new thread state\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"PyEval_AcquireThread: non-NULL old thread state\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"PyEval_ReleaseThread: NULL thread state\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"PyEval_ReleaseThread: wrong thread state\00", align 1
@PyEval_ReInitThreads.PyId__after_fork = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0), %struct._object* null }, align 8
@.str.5 = private unnamed_addr constant [12 x i8] c"_after_fork\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"threading\00", align 1
@pending_async_exc = internal global i32 0, align 4
@eval_breaker = internal global %struct._Py_atomic_int zeroinitializer, align 4
@.str.7 = private unnamed_addr constant [31 x i8] c"PyEval_SaveThread: NULL tstate\00", align 1
@.str.8 = private unnamed_addr constant [34 x i8] c"PyEval_RestoreThread: NULL tstate\00", align 1
@_Py_Finalizing = external global %struct._ts*, align 8
@pendinglast = internal global i32 0, align 4
@pendingfirst = internal global i32 0, align 4
@pendingcalls = internal global [32 x %struct.anon] zeroinitializer, align 16
@pendingcalls_to_do = internal global %struct._Py_atomic_int zeroinitializer, align 4
@Py_MakePendingCalls.busy = internal global i32 0, align 4
@gil_drop_request = internal global %struct._Py_atomic_int zeroinitializer, align 4
@_Py_CheckRecursionLimit = global i32 1000, align 4
@recursion_limit = internal global i32 1000, align 4
@.str.9 = private unnamed_addr constant [36 x i8] c"Cannot recover from stack overflow.\00", align 1
@PyExc_RuntimeError = external global %struct._object*, align 8
@.str.10 = private unnamed_addr constant [35 x i8] c"maximum recursion depth exceeded%s\00", align 1
@PyEval_EvalFrameEx.opcode_targets = internal global [256 x i8*] [i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_POP_TOP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_ROT_TWO), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_ROT_THREE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DUP_TOP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DUP_TOP_TWO), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_NOP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_UNARY_POSITIVE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_UNARY_NEGATIVE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_UNARY_NOT), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_UNARY_INVERT), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_POWER), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_MULTIPLY), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_MODULO), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_ADD), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_SUBTRACT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_SUBSCR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_FLOOR_DIVIDE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_TRUE_DIVIDE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_FLOOR_DIVIDE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_TRUE_DIVIDE), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_STORE_MAP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_ADD), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_SUBTRACT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_MULTIPLY), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_MODULO), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_STORE_SUBSCR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DELETE_SUBSCR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_LSHIFT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_RSHIFT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_AND), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_XOR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BINARY_OR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_POWER), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_GET_ITER), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_PRINT_EXPR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_BUILD_CLASS), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_YIELD_FROM), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_LSHIFT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_RSHIFT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_AND), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_XOR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_INPLACE_OR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BREAK_LOOP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_WITH_CLEANUP), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_RETURN_VALUE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_IMPORT_STAR), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_YIELD_VALUE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_POP_BLOCK), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_END_FINALLY), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_POP_EXCEPT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_STORE_NAME), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DELETE_NAME), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_UNPACK_SEQUENCE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_FOR_ITER), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_UNPACK_EX), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_STORE_ATTR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DELETE_ATTR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_STORE_GLOBAL), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DELETE_GLOBAL), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_CONST), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_NAME), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BUILD_TUPLE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BUILD_LIST), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BUILD_SET), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BUILD_MAP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_ATTR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_COMPARE_OP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_IMPORT_NAME), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_IMPORT_FROM), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_JUMP_FORWARD), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_JUMP_IF_FALSE_OR_POP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_JUMP_IF_TRUE_OR_POP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_JUMP_ABSOLUTE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_POP_JUMP_IF_FALSE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_POP_JUMP_IF_TRUE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_GLOBAL), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_CONTINUE_LOOP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_SETUP_LOOP), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_SETUP_EXCEPT), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_SETUP_FINALLY), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_FAST), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_STORE_FAST), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DELETE_FAST), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_RAISE_VARARGS), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_CALL_FUNCTION), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_MAKE_FUNCTION), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_BUILD_SLICE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_MAKE_CLOSURE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_CLOSURE), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_DEREF), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_STORE_DEREF), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_DELETE_DEREF), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_CALL_FUNCTION_VAR), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_CALL_FUNCTION_KW), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_CALL_FUNCTION_VAR_KW), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_SETUP_WITH), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_EXTENDED_ARG), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LIST_APPEND), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_SET_ADD), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_MAP_ADD), i8* blockaddress(@PyEval_EvalFrameEx, %TARGET_LOAD_CLASSDEREF), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode), i8* blockaddress(@PyEval_EvalFrameEx, %_unknown_opcode)], align 16
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"ceval: tstate mix-up\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"ceval: orphan tstate\00", align 1
@_Py_TracingPossible = internal global i32 0, align 4
@PyExc_UnboundLocalError = external global %struct._object*, align 8
@.str.14 = private unnamed_addr constant [53 x i8] c"local variable '%.200s' referenced before assignment\00", align 1
@_Py_TrueStruct = external global %struct._longobject, align 8
@_Py_FalseStruct = external global %struct._longobject, align 8
@PyUnicode_Type = external global %struct._typeobject, align 8
@PyEval_EvalFrameEx.PyId_displayhook = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.15, i32 0, i32 0), %struct._object* null }, align 8
@.str.15 = private unnamed_addr constant [12 x i8] c"displayhook\00", align 1
@.str.16 = private unnamed_addr constant [21 x i8] c"lost sys.displayhook\00", align 1
@PyExc_SystemError = external global %struct._object*, align 8
@.str.17 = private unnamed_addr constant [24 x i8] c"bad RAISE_VARARGS oparg\00", align 1
@PyGen_Type = external global %struct._typeobject, align 8
@PyEval_EvalFrameEx.PyId_send = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18, i32 0, i32 0), %struct._object* null }, align 8
@.str.18 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@PyExc_StopIteration = external global %struct._object*, align 8
@.str.19 = private unnamed_addr constant [38 x i8] c"popped block is not an except handler\00", align 1
@.str.20 = private unnamed_addr constant [29 x i8] c"'finally' pops bad exception\00", align 1
@PyEval_EvalFrameEx.PyId___build_class__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.21, i32 0, i32 0), %struct._object* null }, align 8
@.str.21 = private unnamed_addr constant [16 x i8] c"__build_class__\00", align 1
@PyDict_Type = external global %struct._typeobject, align 8
@PyExc_NameError = external global %struct._object*, align 8
@.str.22 = private unnamed_addr constant [26 x i8] c"__build_class__ not found\00", align 1
@PyExc_KeyError = external global %struct._object*, align 8
@.str.23 = private unnamed_addr constant [32 x i8] c"no locals found when storing %R\00", align 1
@.str.24 = private unnamed_addr constant [27 x i8] c"no locals when deleting %R\00", align 1
@.str.25 = private unnamed_addr constant [29 x i8] c"name '%.200s' is not defined\00", align 1
@PyTuple_Type = external global %struct._typeobject, align 8
@PyList_Type = external global %struct._typeobject, align 8
@.str.26 = private unnamed_addr constant [26 x i8] c"no locals when loading %R\00", align 1
@PyEval_EvalFrameEx.PyId___import__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i32 0, i32 0), %struct._object* null }, align 8
@.str.27 = private unnamed_addr constant [11 x i8] c"__import__\00", align 1
@PyExc_ImportError = external global %struct._object*, align 8
@.str.28 = private unnamed_addr constant [21 x i8] c"__import__ not found\00", align 1
@.str.29 = private unnamed_addr constant [34 x i8] c"no locals found during 'import *'\00", align 1
@PyEval_EvalFrameEx.PyId___exit__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), %struct._object* null }, align 8
@.str.30 = private unnamed_addr constant [9 x i8] c"__exit__\00", align 1
@PyEval_EvalFrameEx.PyId___enter__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i32 0, i32 0), %struct._object* null }, align 8
@.str.31 = private unnamed_addr constant [10 x i8] c"__enter__\00", align 1
@PyMethod_Type = external global %struct._typeobject, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.32 = private unnamed_addr constant [28 x i8] c"XXX lineno: %d, opcode: %d\0A\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"unknown opcode\00", align 1
@.str.34 = private unnamed_addr constant [35 x i8] c"error return without exception set\00", align 1
@.str.35 = private unnamed_addr constant [32 x i8] c"PyEval_EvalCodeEx: NULL globals\00", align 1
@PyExc_TypeError = external global %struct._object*, align 8
@.str.36 = private unnamed_addr constant [30 x i8] c"%U() keywords must be strings\00", align 1
@.str.37 = private unnamed_addr constant [45 x i8] c"%U() got an unexpected keyword argument '%S'\00", align 1
@.str.38 = private unnamed_addr constant [43 x i8] c"%U() got multiple values for argument '%S'\00", align 1
@.str.39 = private unnamed_addr constant [21 x i8] c"frame does not exist\00", align 1
@_PyThreadState_GetFrame = external global %struct._frame* (%struct._ts*)*, align 8
@.str.40 = private unnamed_addr constant [30 x i8] c"argument list must be a tuple\00", align 1
@.str.41 = private unnamed_addr constant [34 x i8] c"keyword list must be a dictionary\00", align 1
@PyFunction_Type = external global %struct._typeobject, align 8
@PyCFunction_Type = external global %struct._typeobject, align 8
@.str.42 = private unnamed_addr constant [3 x i8] c"()\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c" object\00", align 1
@.str.44 = private unnamed_addr constant [67 x i8] c"slice indices must be integers or None or have an __index__ method\00", align 1
@gil_locked = internal global %struct._Py_atomic_int { i32 -1 }, align 4
@gil_mutex = internal global %union.pthread_mutex_t zeroinitializer, align 8
@.str.45 = private unnamed_addr constant [31 x i8] c"PyMUTEX_INIT(gil_mutex) failed\00", align 1
@switch_mutex = internal global %union.pthread_mutex_t zeroinitializer, align 8
@.str.46 = private unnamed_addr constant [34 x i8] c"PyMUTEX_INIT(switch_mutex) failed\00", align 1
@gil_cond = internal global %union.pthread_cond_t zeroinitializer, align 8
@.str.47 = private unnamed_addr constant [29 x i8] c"PyCOND_INIT(gil_cond) failed\00", align 1
@switch_cond = internal global %union.pthread_cond_t zeroinitializer, align 8
@.str.48 = private unnamed_addr constant [32 x i8] c"PyCOND_INIT(switch_cond) failed\00", align 1
@gil_last_holder = internal global %struct._Py_atomic_address zeroinitializer, align 8
@.str.49 = private unnamed_addr constant [22 x i8] c"take_gil: NULL tstate\00", align 1
@.str.50 = private unnamed_addr constant [31 x i8] c"PyMUTEX_LOCK(gil_mutex) failed\00", align 1
@gil_switch_number = internal global i64 0, align 8
@.str.51 = private unnamed_addr constant [29 x i8] c"PyCOND_WAIT(gil_cond) failed\00", align 1
@.str.52 = private unnamed_addr constant [34 x i8] c"PyMUTEX_LOCK(switch_mutex) failed\00", align 1
@.str.53 = private unnamed_addr constant [34 x i8] c"PyCOND_SIGNAL(switch_cond) failed\00", align 1
@.str.54 = private unnamed_addr constant [36 x i8] c"PyMUTEX_UNLOCK(switch_mutex) failed\00", align 1
@.str.55 = private unnamed_addr constant [33 x i8] c"PyMUTEX_UNLOCK(gil_mutex) failed\00", align 1
@.str.56 = private unnamed_addr constant [29 x i8] c"PyCOND_FINI(gil_cond) failed\00", align 1
@.str.57 = private unnamed_addr constant [31 x i8] c"PyMUTEX_FINI(gil_mutex) failed\00", align 1
@.str.58 = private unnamed_addr constant [32 x i8] c"PyCOND_FINI(switch_cond) failed\00", align 1
@.str.59 = private unnamed_addr constant [34 x i8] c"PyMUTEX_FINI(switch_mutex) failed\00", align 1
@.str.60 = private unnamed_addr constant [28 x i8] c"drop_gil: GIL is not locked\00", align 1
@.str.61 = private unnamed_addr constant [31 x i8] c"PyCOND_SIGNAL(gil_cond) failed\00", align 1
@.str.62 = private unnamed_addr constant [32 x i8] c"PyCOND_WAIT(switch_cond) failed\00", align 1
@.str.63 = private unnamed_addr constant [14 x i8] c"from %d to %d\00", align 1
@.str.64 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.65 = private unnamed_addr constant [56 x i8] c" positional argument%s (and %d keyword-only argument%s)\00", align 1
@.str.66 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.67 = private unnamed_addr constant [54 x i8] c"%U() takes %U positional argument%s but %d%U %s given\00", align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"was\00", align 1
@.str.69 = private unnamed_addr constant [5 x i8] c"were\00", align 1
@.str.70 = private unnamed_addr constant [11 x i8] c"positional\00", align 1
@.str.71 = private unnamed_addr constant [13 x i8] c"keyword-only\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"%U and %U\00", align 1
@.str.73 = private unnamed_addr constant [13 x i8] c", %U, and %U\00", align 1
@.str.74 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.75 = private unnamed_addr constant [43 x i8] c"%U() missing %i required %s argument%s: %U\00", align 1
@PyExc_AttributeError = external global %struct._object*, align 8
@.str.76 = private unnamed_addr constant [31 x i8] c"No active exception to reraise\00", align 1
@.str.77 = private unnamed_addr constant [69 x i8] c"calling %R should have returned an instance of BaseException, not %R\00", align 1
@.str.78 = private unnamed_addr constant [42 x i8] c"exceptions must derive from BaseException\00", align 1
@.str.79 = private unnamed_addr constant [48 x i8] c"exception causes must derive from BaseException\00", align 1
@PyExc_ValueError = external global %struct._object*, align 8
@.str.80 = private unnamed_addr constant [36 x i8] c"need more than %d value%s to unpack\00", align 1
@.str.81 = private unnamed_addr constant [40 x i8] c"too many values to unpack (expected %d)\00", align 1
@.str.82 = private unnamed_addr constant [36 x i8] c"need more than %zd values to unpack\00", align 1
@.str.83 = private unnamed_addr constant [39 x i8] c"%.200s() takes no arguments (%d given)\00", align 1
@.str.84 = private unnamed_addr constant [47 x i8] c"%.200s() takes exactly one argument (%d given)\00", align 1
@.str.85 = private unnamed_addr constant [55 x i8] c"%.200s%s got multiple values for keyword argument '%U'\00", align 1
@.str.86 = private unnamed_addr constant [61 x i8] c"%.200s%.200s argument after ** must be a mapping, not %.200s\00", align 1
@.str.87 = private unnamed_addr constant [61 x i8] c"%.200s%.200s argument after * must be a sequence, not %.200s\00", align 1
@.str.88 = private unnamed_addr constant [71 x i8] c"catching classes that do not inherit from BaseException is not allowed\00", align 1
@.str.89 = private unnamed_addr constant [22 x i8] c"cannot import name %R\00", align 1
@import_all_from.PyId___all__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), %struct._object* null }, align 8
@.str.90 = private unnamed_addr constant [8 x i8] c"__all__\00", align 1
@import_all_from.PyId___dict__ = internal global %struct._Py_Identifier { %struct._Py_Identifier* null, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.91, i32 0, i32 0), %struct._object* null }, align 8
@.str.91 = private unnamed_addr constant [9 x i8] c"__dict__\00", align 1
@.str.92 = private unnamed_addr constant [52 x i8] c"from-import-* object has no __dict__ and no __all__\00", align 1
@PyExc_IndexError = external global %struct._object*, align 8
@.str.93 = private unnamed_addr constant [71 x i8] c"free variable '%.200s' referenced before assignment in enclosing scope\00", align 1

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_GetCallStats(%struct._object* %self) #0 {
entry:
  %self.addr = alloca %struct._object*, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  %0 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc = add i64 %0, 1
  store i64 %inc, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  ret %struct._object* @_Py_NoneStruct
}

; Function Attrs: nounwind uwtable
define void @_PyEval_SetSwitchInterval(i64 %microseconds) #0 {
entry:
  %microseconds.addr = alloca i64, align 8
  store i64 %microseconds, i64* %microseconds.addr, align 8
  %0 = load i64, i64* %microseconds.addr, align 8
  store i64 %0, i64* @gil_interval, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define i64 @_PyEval_GetSwitchInterval() #0 {
entry:
  %0 = load i64, i64* @gil_interval, align 8
  ret i64 %0
}

; Function Attrs: nounwind uwtable
define i32 @PyEval_ThreadsInitialized() #0 {
entry:
  %call = call i32 @gil_created()
  ret i32 %call
}

; Function Attrs: nounwind uwtable
define internal i32 @gil_created() #0 {
entry:
  %atomic_val = alloca %struct._Py_atomic_int*, align 8
  %result = alloca i32, align 4
  %volatile_data = alloca i32*, align 8
  %order = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val, align 8
  %0 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %0, i32 0, i32 0
  store i32* %_value, i32** %volatile_data, align 8
  store i32 1, i32* %order, align 4
  %1 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_int* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i32*, i32** %volatile_data, align 8
  %6 = load volatile i32, i32* %5, align 4
  store i32 %6, i32* %result, align 4
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i32, i32* %result, align 4
  store i32 %8, i32* %tmp
  %9 = load i32, i32* %tmp
  %cmp = icmp sge i32 %9, 0
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind uwtable
define void @PyEval_InitThreads() #0 {
entry:
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %call = call i32 @gil_created()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.8

if.end:                                           ; preds = %entry
  call void @create_gil()
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  call void @take_gil(%struct._ts* %10)
  %call4 = call i64 @PyThread_get_thread_ident()
  store i64 %call4, i64* @main_thread, align 8
  %11 = load i8*, i8** @pending_lock, align 8
  %tobool5 = icmp ne i8* %11, null
  br i1 %tobool5, label %if.end.8, label %if.then.6

if.then.6:                                        ; preds = %sw.epilog.3
  %call7 = call i8* @PyThread_allocate_lock()
  store i8* %call7, i8** @pending_lock, align 8
  br label %if.end.8

if.end.8:                                         ; preds = %if.then, %if.then.6, %sw.epilog.3
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @create_gil() #0 {
entry:
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %new_val = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %atomic_val16 = alloca %struct._Py_atomic_int*, align 8
  %new_val17 = alloca i32, align 4
  %volatile_data18 = alloca i32*, align 8
  %order20 = alloca i32, align 4
  %call = call i32 @pthread_mutex_init(%union.pthread_mutex_t* @gil_mutex, %union.pthread_mutexattr_t* null) #6
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.45, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call1 = call i32 @pthread_mutex_init(%union.pthread_mutex_t* @switch_mutex, %union.pthread_mutexattr_t* null) #6
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  call void @Py_FatalError(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.46, i32 0, i32 0)) #7
  unreachable

if.end.4:                                         ; preds = %if.end
  %call5 = call i32 @pthread_cond_init(%union.pthread_cond_t* @gil_cond, %union.pthread_condattr_t* null) #6
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  call void @Py_FatalError(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.47, i32 0, i32 0)) #7
  unreachable

if.end.8:                                         ; preds = %if.end.4
  %call9 = call i32 @pthread_cond_init(%union.pthread_cond_t* @switch_cond, %union.pthread_condattr_t* null) #6
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  call void @Py_FatalError(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.48, i32 0, i32 0)) #7
  unreachable

if.end.12:                                        ; preds = %if.end.8
  store %struct._Py_atomic_address* @gil_last_holder, %struct._Py_atomic_address** %atomic_val, align 8
  store i8* null, i8** %new_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.epilog [
    i32 2, label %sw.bb
    i32 0, label %sw.bb.13
    i32 1, label %sw.bb.14
    i32 3, label %sw.bb.14
    i32 4, label %sw.bb.14
  ]

sw.bb:                                            ; preds = %if.end.12
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.13

sw.bb.13:                                         ; preds = %if.end.12, %sw.bb
  %5 = load i8*, i8** %new_val, align 8
  %6 = load i8**, i8*** %volatile_data, align 8
  store volatile i8* %5, i8** %6, align 8
  br label %sw.epilog

sw.bb.14:                                         ; preds = %if.end.12, %if.end.12, %if.end.12
  %7 = load i8*, i8** %new_val, align 8
  %8 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value15 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %8, i32 0, i32 0
  %9 = call i8* asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i8** %_value15, i8* %7) #6, !srcloc !1
  store i8* %9, i8** %new_val, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.12, %sw.bb.14, %sw.bb.13
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val16, align 8
  store i32 0, i32* %new_val17, align 4
  %10 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val16, align 8
  %_value19 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %10, i32 0, i32 0
  store i32* %_value19, i32** %volatile_data18, align 8
  store i32 2, i32* %order20, align 4
  %11 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val16, align 8
  %12 = bitcast %struct._Py_atomic_int* %11 to i8*
  %13 = load i32, i32* %order20, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %12, i32 %13)
  %14 = load i32, i32* %order20, align 4
  switch i32 %14, label %sw.epilog.25 [
    i32 2, label %sw.bb.21
    i32 0, label %sw.bb.22
    i32 1, label %sw.bb.23
    i32 3, label %sw.bb.23
    i32 4, label %sw.bb.23
  ]

sw.bb.21:                                         ; preds = %sw.epilog
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %sw.epilog, %sw.bb.21
  %15 = load i32, i32* %new_val17, align 4
  %16 = load i32*, i32** %volatile_data18, align 8
  store volatile i32 %15, i32* %16, align 4
  br label %sw.epilog.25

sw.bb.23:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  %17 = load i32, i32* %new_val17, align 4
  %18 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val16, align 8
  %_value24 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %18, i32 0, i32 0
  %19 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value24, i32 %17) #6, !srcloc !2
  store i32 %19, i32* %new_val17, align 4
  br label %sw.epilog.25

sw.epilog.25:                                     ; preds = %sw.epilog, %sw.bb.23, %sw.bb.22
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @take_gil(%struct._ts* %tstate) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  %err = alloca i32, align 4
  %atomic_val = alloca %struct._Py_atomic_int*, align 8
  %result = alloca i32, align 4
  %volatile_data = alloca i32*, align 8
  %order = alloca i32, align 4
  %tmp = alloca i32, align 4
  %atomic_val11 = alloca %struct._Py_atomic_int*, align 8
  %result13 = alloca i32, align 4
  %volatile_data15 = alloca i32*, align 8
  %order18 = alloca i32, align 4
  %tmp25 = alloca i32, align 4
  %timed_out = alloca i32, align 4
  %saved_switchnum = alloca i64, align 8
  %r = alloca i32, align 4
  %atomic_val40 = alloca %struct._Py_atomic_int*, align 8
  %result42 = alloca i32, align 4
  %volatile_data44 = alloca i32*, align 8
  %order47 = alloca i32, align 4
  %tmp54 = alloca i32, align 4
  %atomic_val60 = alloca %struct._Py_atomic_int*, align 8
  %new_val = alloca i32, align 4
  %volatile_data63 = alloca i32*, align 8
  %order66 = alloca i32, align 4
  %atomic_val73 = alloca %struct._Py_atomic_int*, align 8
  %new_val75 = alloca i32, align 4
  %volatile_data77 = alloca i32*, align 8
  %order80 = alloca i32, align 4
  %atomic_val92 = alloca %struct._Py_atomic_int*, align 8
  %new_val94 = alloca i32, align 4
  %volatile_data96 = alloca i32*, align 8
  %order99 = alloca i32, align 4
  %atomic_val106 = alloca %struct._Py_atomic_address*, align 8
  %result108 = alloca i8*, align 8
  %volatile_data110 = alloca i8**, align 8
  %order113 = alloca i32, align 4
  %tmp120 = alloca i8*, align 8
  %atomic_val124 = alloca %struct._Py_atomic_address*, align 8
  %new_val126 = alloca i8*, align 8
  %volatile_data128 = alloca i8**, align 8
  %order131 = alloca i32, align 4
  %atomic_val147 = alloca %struct._Py_atomic_int*, align 8
  %result149 = alloca i32, align 4
  %volatile_data151 = alloca i32*, align 8
  %order154 = alloca i32, align 4
  %tmp161 = alloca i32, align 4
  %atomic_val166 = alloca %struct._Py_atomic_int*, align 8
  %new_val168 = alloca i32, align 4
  %volatile_data170 = alloca i32*, align 8
  %order173 = alloca i32, align 4
  %atomic_val180 = alloca %struct._Py_atomic_int*, align 8
  %new_val182 = alloca i32, align 4
  %atomic_val184 = alloca %struct._Py_atomic_int*, align 8
  %result186 = alloca i32, align 4
  %volatile_data188 = alloca i32*, align 8
  %order191 = alloca i32, align 4
  %tmp198 = alloca i32, align 4
  %atomic_val200 = alloca %struct._Py_atomic_int*, align 8
  %result202 = alloca i32, align 4
  %volatile_data204 = alloca i32*, align 8
  %order207 = alloca i32, align 4
  %tmp214 = alloca i32, align 4
  %volatile_data217 = alloca i32*, align 8
  %order220 = alloca i32, align 4
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %cmp = icmp eq %struct._ts* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.49, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call = call i32* @__errno_location() #8
  %1 = load i32, i32* %call, align 4
  store i32 %1, i32* %err, align 4
  %call1 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @gil_mutex) #6
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  call void @Py_FatalError(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.50, i32 0, i32 0)) #7
  unreachable

if.end.3:                                         ; preds = %if.end
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val, align 8
  %2 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2, i32 0, i32 0
  store i32* %_value, i32** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %3 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %4 = bitcast %struct._Py_atomic_int* %3 to i8*
  %5 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %4, i32 %5)
  %6 = load i32, i32* %order, align 4
  switch i32 %6, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.end.3, %if.end.3, %if.end.3
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.end.3
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %7 = load i32*, i32** %volatile_data, align 8
  %8 = load volatile i32, i32* %7, align 4
  store i32 %8, i32* %result, align 4
  %9 = load i32, i32* %order, align 4
  switch i32 %9, label %sw.default.5 [
    i32 1, label %sw.bb.4
    i32 3, label %sw.bb.4
    i32 4, label %sw.bb.4
  ]

sw.bb.4:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6

sw.default.5:                                     ; preds = %sw.epilog
  br label %sw.epilog.6

sw.epilog.6:                                      ; preds = %sw.default.5, %sw.bb.4
  %10 = load i32, i32* %result, align 4
  store i32 %10, i32* %tmp
  %11 = load i32, i32* %tmp
  %tobool7 = icmp ne i32 %11, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %sw.epilog.6
  br label %_ready

if.end.9:                                         ; preds = %sw.epilog.6
  br label %while.cond

while.cond:                                       ; preds = %if.end.86, %if.end.9
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val11, align 8
  %12 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val11, align 8
  %_value16 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %12, i32 0, i32 0
  store i32* %_value16, i32** %volatile_data15, align 8
  store i32 0, i32* %order18, align 4
  %13 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val11, align 8
  %14 = bitcast %struct._Py_atomic_int* %13 to i8*
  %15 = load i32, i32* %order18, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %14, i32 %15)
  %16 = load i32, i32* %order18, align 4
  switch i32 %16, label %sw.default.20 [
    i32 2, label %sw.bb.19
    i32 3, label %sw.bb.19
    i32 4, label %sw.bb.19
  ]

sw.bb.19:                                         ; preds = %while.cond, %while.cond, %while.cond
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.21

sw.default.20:                                    ; preds = %while.cond
  br label %sw.epilog.21

sw.epilog.21:                                     ; preds = %sw.default.20, %sw.bb.19
  %17 = load i32*, i32** %volatile_data15, align 8
  %18 = load volatile i32, i32* %17, align 4
  store i32 %18, i32* %result13, align 4
  %19 = load i32, i32* %order18, align 4
  switch i32 %19, label %sw.default.23 [
    i32 1, label %sw.bb.22
    i32 3, label %sw.bb.22
    i32 4, label %sw.bb.22
  ]

sw.bb.22:                                         ; preds = %sw.epilog.21, %sw.epilog.21, %sw.epilog.21
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.24

sw.default.23:                                    ; preds = %sw.epilog.21
  br label %sw.epilog.24

sw.epilog.24:                                     ; preds = %sw.default.23, %sw.bb.22
  %20 = load i32, i32* %result13, align 4
  store i32 %20, i32* %tmp25
  %21 = load i32, i32* %tmp25
  %tobool26 = icmp ne i32 %21, 0
  br i1 %tobool26, label %while.body, label %while.end

while.body:                                       ; preds = %sw.epilog.24
  store i32 0, i32* %timed_out, align 4
  %22 = load i64, i64* @gil_switch_number, align 8
  store i64 %22, i64* %saved_switchnum, align 8
  %23 = load i64, i64* @gil_interval, align 8
  %cmp30 = icmp uge i64 %23, 1
  br i1 %cmp30, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.body
  %24 = load i64, i64* @gil_interval, align 8
  br label %cond.end

cond.false:                                       ; preds = %while.body
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ %24, %cond.true ], [ 1, %cond.false ]
  %call31 = call i32 @PyCOND_TIMEDWAIT(%union.pthread_cond_t* @gil_cond, %union.pthread_mutex_t* @gil_mutex, i64 %cond)
  store i32 %call31, i32* %r, align 4
  %25 = load i32, i32* %r, align 4
  %cmp32 = icmp slt i32 %25, 0
  br i1 %cmp32, label %if.then.33, label %if.end.34

if.then.33:                                       ; preds = %cond.end
  call void @Py_FatalError(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.51, i32 0, i32 0)) #7
  unreachable

if.end.34:                                        ; preds = %cond.end
  %26 = load i32, i32* %r, align 4
  %tobool35 = icmp ne i32 %26, 0
  br i1 %tobool35, label %if.then.36, label %if.else

if.then.36:                                       ; preds = %if.end.34
  store i32 1, i32* %timed_out, align 4
  br label %if.end.37

if.else:                                          ; preds = %if.end.34
  store i32 0, i32* %timed_out, align 4
  br label %if.end.37

if.end.37:                                        ; preds = %if.else, %if.then.36
  %27 = load i32, i32* %timed_out, align 4
  %tobool38 = icmp ne i32 %27, 0
  br i1 %tobool38, label %land.lhs.true, label %if.end.86

land.lhs.true:                                    ; preds = %if.end.37
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val40, align 8
  %28 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val40, align 8
  %_value45 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %28, i32 0, i32 0
  store i32* %_value45, i32** %volatile_data44, align 8
  store i32 0, i32* %order47, align 4
  %29 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val40, align 8
  %30 = bitcast %struct._Py_atomic_int* %29 to i8*
  %31 = load i32, i32* %order47, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %30, i32 %31)
  %32 = load i32, i32* %order47, align 4
  switch i32 %32, label %sw.default.49 [
    i32 2, label %sw.bb.48
    i32 3, label %sw.bb.48
    i32 4, label %sw.bb.48
  ]

sw.bb.48:                                         ; preds = %land.lhs.true, %land.lhs.true, %land.lhs.true
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.50

sw.default.49:                                    ; preds = %land.lhs.true
  br label %sw.epilog.50

sw.epilog.50:                                     ; preds = %sw.default.49, %sw.bb.48
  %33 = load i32*, i32** %volatile_data44, align 8
  %34 = load volatile i32, i32* %33, align 4
  store i32 %34, i32* %result42, align 4
  %35 = load i32, i32* %order47, align 4
  switch i32 %35, label %sw.default.52 [
    i32 1, label %sw.bb.51
    i32 3, label %sw.bb.51
    i32 4, label %sw.bb.51
  ]

sw.bb.51:                                         ; preds = %sw.epilog.50, %sw.epilog.50, %sw.epilog.50
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.53

sw.default.52:                                    ; preds = %sw.epilog.50
  br label %sw.epilog.53

sw.epilog.53:                                     ; preds = %sw.default.52, %sw.bb.51
  %36 = load i32, i32* %result42, align 4
  store i32 %36, i32* %tmp54
  %37 = load i32, i32* %tmp54
  %tobool55 = icmp ne i32 %37, 0
  br i1 %tobool55, label %land.lhs.true.56, label %if.end.86

land.lhs.true.56:                                 ; preds = %sw.epilog.53
  %38 = load i64, i64* @gil_switch_number, align 8
  %39 = load i64, i64* %saved_switchnum, align 8
  %cmp57 = icmp eq i64 %38, %39
  br i1 %cmp57, label %if.then.58, label %if.end.86

if.then.58:                                       ; preds = %land.lhs.true.56
  br label %do.body

do.body:                                          ; preds = %if.then.58
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val60, align 8
  store i32 1, i32* %new_val, align 4
  %40 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val60, align 8
  %_value64 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %40, i32 0, i32 0
  store i32* %_value64, i32** %volatile_data63, align 8
  store i32 0, i32* %order66, align 4
  %41 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val60, align 8
  %42 = bitcast %struct._Py_atomic_int* %41 to i8*
  %43 = load i32, i32* %order66, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %42, i32 %43)
  %44 = load i32, i32* %order66, align 4
  switch i32 %44, label %sw.epilog.71 [
    i32 2, label %sw.bb.67
    i32 0, label %sw.bb.68
    i32 1, label %sw.bb.69
    i32 3, label %sw.bb.69
    i32 4, label %sw.bb.69
  ]

sw.bb.67:                                         ; preds = %do.body
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.68

sw.bb.68:                                         ; preds = %do.body, %sw.bb.67
  %45 = load i32, i32* %new_val, align 4
  %46 = load i32*, i32** %volatile_data63, align 8
  store volatile i32 %45, i32* %46, align 4
  br label %sw.epilog.71

sw.bb.69:                                         ; preds = %do.body, %do.body, %do.body
  %47 = load i32, i32* %new_val, align 4
  %48 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val60, align 8
  %_value70 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %48, i32 0, i32 0
  %49 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value70, i32 %47) #6, !srcloc !3
  store i32 %49, i32* %new_val, align 4
  br label %sw.epilog.71

sw.epilog.71:                                     ; preds = %do.body, %sw.bb.69, %sw.bb.68
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val73, align 8
  store i32 1, i32* %new_val75, align 4
  %50 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val73, align 8
  %_value78 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %50, i32 0, i32 0
  store i32* %_value78, i32** %volatile_data77, align 8
  store i32 0, i32* %order80, align 4
  %51 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val73, align 8
  %52 = bitcast %struct._Py_atomic_int* %51 to i8*
  %53 = load i32, i32* %order80, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %52, i32 %53)
  %54 = load i32, i32* %order80, align 4
  switch i32 %54, label %sw.epilog.85 [
    i32 2, label %sw.bb.81
    i32 0, label %sw.bb.82
    i32 1, label %sw.bb.83
    i32 3, label %sw.bb.83
    i32 4, label %sw.bb.83
  ]

sw.bb.81:                                         ; preds = %sw.epilog.71
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.82

sw.bb.82:                                         ; preds = %sw.epilog.71, %sw.bb.81
  %55 = load i32, i32* %new_val75, align 4
  %56 = load i32*, i32** %volatile_data77, align 8
  store volatile i32 %55, i32* %56, align 4
  br label %sw.epilog.85

sw.bb.83:                                         ; preds = %sw.epilog.71, %sw.epilog.71, %sw.epilog.71
  %57 = load i32, i32* %new_val75, align 4
  %58 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val73, align 8
  %_value84 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %58, i32 0, i32 0
  %59 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value84, i32 %57) #6, !srcloc !4
  store i32 %59, i32* %new_val75, align 4
  br label %sw.epilog.85

sw.epilog.85:                                     ; preds = %sw.epilog.71, %sw.bb.83, %sw.bb.82
  br label %do.end

do.end:                                           ; preds = %sw.epilog.85
  br label %if.end.86

if.end.86:                                        ; preds = %do.end, %land.lhs.true.56, %sw.epilog.53, %if.end.37
  br label %while.cond

while.end:                                        ; preds = %sw.epilog.24
  br label %_ready

_ready:                                           ; preds = %while.end, %if.then.8
  %call87 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @switch_mutex) #6
  %tobool88 = icmp ne i32 %call87, 0
  br i1 %tobool88, label %if.then.89, label %if.end.90

if.then.89:                                       ; preds = %_ready
  call void @Py_FatalError(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.52, i32 0, i32 0)) #7
  unreachable

if.end.90:                                        ; preds = %_ready
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val92, align 8
  store i32 1, i32* %new_val94, align 4
  %60 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val92, align 8
  %_value97 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %60, i32 0, i32 0
  store i32* %_value97, i32** %volatile_data96, align 8
  store i32 0, i32* %order99, align 4
  %61 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val92, align 8
  %62 = bitcast %struct._Py_atomic_int* %61 to i8*
  %63 = load i32, i32* %order99, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %62, i32 %63)
  %64 = load i32, i32* %order99, align 4
  switch i32 %64, label %sw.epilog.104 [
    i32 2, label %sw.bb.100
    i32 0, label %sw.bb.101
    i32 1, label %sw.bb.102
    i32 3, label %sw.bb.102
    i32 4, label %sw.bb.102
  ]

sw.bb.100:                                        ; preds = %if.end.90
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.101

sw.bb.101:                                        ; preds = %if.end.90, %sw.bb.100
  %65 = load i32, i32* %new_val94, align 4
  %66 = load i32*, i32** %volatile_data96, align 8
  store volatile i32 %65, i32* %66, align 4
  br label %sw.epilog.104

sw.bb.102:                                        ; preds = %if.end.90, %if.end.90, %if.end.90
  %67 = load i32, i32* %new_val94, align 4
  %68 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val92, align 8
  %_value103 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %68, i32 0, i32 0
  %69 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value103, i32 %67) #6, !srcloc !5
  store i32 %69, i32* %new_val94, align 4
  br label %sw.epilog.104

sw.epilog.104:                                    ; preds = %if.end.90, %sw.bb.102, %sw.bb.101
  %70 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  store %struct._Py_atomic_address* @gil_last_holder, %struct._Py_atomic_address** %atomic_val106, align 8
  %71 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val106, align 8
  %_value111 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %71, i32 0, i32 0
  store i8** %_value111, i8*** %volatile_data110, align 8
  store i32 0, i32* %order113, align 4
  %72 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val106, align 8
  %73 = bitcast %struct._Py_atomic_address* %72 to i8*
  %74 = load i32, i32* %order113, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %73, i32 %74)
  %75 = load i32, i32* %order113, align 4
  switch i32 %75, label %sw.default.115 [
    i32 2, label %sw.bb.114
    i32 3, label %sw.bb.114
    i32 4, label %sw.bb.114
  ]

sw.bb.114:                                        ; preds = %sw.epilog.104, %sw.epilog.104, %sw.epilog.104
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.116

sw.default.115:                                   ; preds = %sw.epilog.104
  br label %sw.epilog.116

sw.epilog.116:                                    ; preds = %sw.default.115, %sw.bb.114
  %76 = load i8**, i8*** %volatile_data110, align 8
  %77 = load volatile i8*, i8** %76, align 8
  store i8* %77, i8** %result108, align 8
  %78 = load i32, i32* %order113, align 4
  switch i32 %78, label %sw.default.118 [
    i32 1, label %sw.bb.117
    i32 3, label %sw.bb.117
    i32 4, label %sw.bb.117
  ]

sw.bb.117:                                        ; preds = %sw.epilog.116, %sw.epilog.116, %sw.epilog.116
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.119

sw.default.118:                                   ; preds = %sw.epilog.116
  br label %sw.epilog.119

sw.epilog.119:                                    ; preds = %sw.default.118, %sw.bb.117
  %79 = load i8*, i8** %result108, align 8
  store i8* %79, i8** %tmp120
  %80 = load i8*, i8** %tmp120
  %81 = bitcast i8* %80 to %struct._ts*
  %cmp121 = icmp ne %struct._ts* %70, %81
  br i1 %cmp121, label %if.then.122, label %if.end.137

if.then.122:                                      ; preds = %sw.epilog.119
  store %struct._Py_atomic_address* @gil_last_holder, %struct._Py_atomic_address** %atomic_val124, align 8
  %82 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %83 = bitcast %struct._ts* %82 to i8*
  store i8* %83, i8** %new_val126, align 8
  %84 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val124, align 8
  %_value129 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %84, i32 0, i32 0
  store i8** %_value129, i8*** %volatile_data128, align 8
  store i32 0, i32* %order131, align 4
  %85 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val124, align 8
  %86 = bitcast %struct._Py_atomic_address* %85 to i8*
  %87 = load i32, i32* %order131, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %86, i32 %87)
  %88 = load i32, i32* %order131, align 4
  switch i32 %88, label %sw.epilog.136 [
    i32 2, label %sw.bb.132
    i32 0, label %sw.bb.133
    i32 1, label %sw.bb.134
    i32 3, label %sw.bb.134
    i32 4, label %sw.bb.134
  ]

sw.bb.132:                                        ; preds = %if.then.122
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.133

sw.bb.133:                                        ; preds = %if.then.122, %sw.bb.132
  %89 = load i8*, i8** %new_val126, align 8
  %90 = load i8**, i8*** %volatile_data128, align 8
  store volatile i8* %89, i8** %90, align 8
  br label %sw.epilog.136

sw.bb.134:                                        ; preds = %if.then.122, %if.then.122, %if.then.122
  %91 = load i8*, i8** %new_val126, align 8
  %92 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val124, align 8
  %_value135 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %92, i32 0, i32 0
  %93 = call i8* asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i8** %_value135, i8* %91) #6, !srcloc !6
  store i8* %93, i8** %new_val126, align 8
  br label %sw.epilog.136

sw.epilog.136:                                    ; preds = %if.then.122, %sw.bb.134, %sw.bb.133
  %94 = load i64, i64* @gil_switch_number, align 8
  %inc = add i64 %94, 1
  store i64 %inc, i64* @gil_switch_number, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %sw.epilog.136, %sw.epilog.119
  %call138 = call i32 @pthread_cond_signal(%union.pthread_cond_t* @switch_cond) #6
  %tobool139 = icmp ne i32 %call138, 0
  br i1 %tobool139, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %if.end.137
  call void @Py_FatalError(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.53, i32 0, i32 0)) #7
  unreachable

if.end.141:                                       ; preds = %if.end.137
  %call142 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @switch_mutex) #6
  %tobool143 = icmp ne i32 %call142, 0
  br i1 %tobool143, label %if.then.144, label %if.end.145

if.then.144:                                      ; preds = %if.end.141
  call void @Py_FatalError(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #7
  unreachable

if.end.145:                                       ; preds = %if.end.141
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val147, align 8
  %95 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val147, align 8
  %_value152 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %95, i32 0, i32 0
  store i32* %_value152, i32** %volatile_data151, align 8
  store i32 0, i32* %order154, align 4
  %96 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val147, align 8
  %97 = bitcast %struct._Py_atomic_int* %96 to i8*
  %98 = load i32, i32* %order154, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %97, i32 %98)
  %99 = load i32, i32* %order154, align 4
  switch i32 %99, label %sw.default.156 [
    i32 2, label %sw.bb.155
    i32 3, label %sw.bb.155
    i32 4, label %sw.bb.155
  ]

sw.bb.155:                                        ; preds = %if.end.145, %if.end.145, %if.end.145
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.157

sw.default.156:                                   ; preds = %if.end.145
  br label %sw.epilog.157

sw.epilog.157:                                    ; preds = %sw.default.156, %sw.bb.155
  %100 = load i32*, i32** %volatile_data151, align 8
  %101 = load volatile i32, i32* %100, align 4
  store i32 %101, i32* %result149, align 4
  %102 = load i32, i32* %order154, align 4
  switch i32 %102, label %sw.default.159 [
    i32 1, label %sw.bb.158
    i32 3, label %sw.bb.158
    i32 4, label %sw.bb.158
  ]

sw.bb.158:                                        ; preds = %sw.epilog.157, %sw.epilog.157, %sw.epilog.157
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.160

sw.default.159:                                   ; preds = %sw.epilog.157
  br label %sw.epilog.160

sw.epilog.160:                                    ; preds = %sw.default.159, %sw.bb.158
  %103 = load i32, i32* %result149, align 4
  store i32 %103, i32* %tmp161
  %104 = load i32, i32* %tmp161
  %tobool162 = icmp ne i32 %104, 0
  br i1 %tobool162, label %if.then.163, label %if.end.227

if.then.163:                                      ; preds = %sw.epilog.160
  br label %do.body.164

do.body.164:                                      ; preds = %if.then.163
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val166, align 8
  store i32 0, i32* %new_val168, align 4
  %105 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val166, align 8
  %_value171 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %105, i32 0, i32 0
  store i32* %_value171, i32** %volatile_data170, align 8
  store i32 0, i32* %order173, align 4
  %106 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val166, align 8
  %107 = bitcast %struct._Py_atomic_int* %106 to i8*
  %108 = load i32, i32* %order173, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %107, i32 %108)
  %109 = load i32, i32* %order173, align 4
  switch i32 %109, label %sw.epilog.178 [
    i32 2, label %sw.bb.174
    i32 0, label %sw.bb.175
    i32 1, label %sw.bb.176
    i32 3, label %sw.bb.176
    i32 4, label %sw.bb.176
  ]

sw.bb.174:                                        ; preds = %do.body.164
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.175

sw.bb.175:                                        ; preds = %do.body.164, %sw.bb.174
  %110 = load i32, i32* %new_val168, align 4
  %111 = load i32*, i32** %volatile_data170, align 8
  store volatile i32 %110, i32* %111, align 4
  br label %sw.epilog.178

sw.bb.176:                                        ; preds = %do.body.164, %do.body.164, %do.body.164
  %112 = load i32, i32* %new_val168, align 4
  %113 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val166, align 8
  %_value177 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %113, i32 0, i32 0
  %114 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value177, i32 %112) #6, !srcloc !7
  store i32 %114, i32* %new_val168, align 4
  br label %sw.epilog.178

sw.epilog.178:                                    ; preds = %do.body.164, %sw.bb.176, %sw.bb.175
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val180, align 8
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val184, align 8
  %115 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val184, align 8
  %_value189 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %115, i32 0, i32 0
  store i32* %_value189, i32** %volatile_data188, align 8
  store i32 0, i32* %order191, align 4
  %116 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val184, align 8
  %117 = bitcast %struct._Py_atomic_int* %116 to i8*
  %118 = load i32, i32* %order191, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %117, i32 %118)
  %119 = load i32, i32* %order191, align 4
  switch i32 %119, label %sw.default.193 [
    i32 2, label %sw.bb.192
    i32 3, label %sw.bb.192
    i32 4, label %sw.bb.192
  ]

sw.bb.192:                                        ; preds = %sw.epilog.178, %sw.epilog.178, %sw.epilog.178
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.194

sw.default.193:                                   ; preds = %sw.epilog.178
  br label %sw.epilog.194

sw.epilog.194:                                    ; preds = %sw.default.193, %sw.bb.192
  %120 = load i32*, i32** %volatile_data188, align 8
  %121 = load volatile i32, i32* %120, align 4
  store i32 %121, i32* %result186, align 4
  %122 = load i32, i32* %order191, align 4
  switch i32 %122, label %sw.default.196 [
    i32 1, label %sw.bb.195
    i32 3, label %sw.bb.195
    i32 4, label %sw.bb.195
  ]

sw.bb.195:                                        ; preds = %sw.epilog.194, %sw.epilog.194, %sw.epilog.194
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.197

sw.default.196:                                   ; preds = %sw.epilog.194
  br label %sw.epilog.197

sw.epilog.197:                                    ; preds = %sw.default.196, %sw.bb.195
  %123 = load i32, i32* %result186, align 4
  store i32 %123, i32* %tmp198
  %124 = load i32, i32* %tmp198
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val200, align 8
  %125 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val200, align 8
  %_value205 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %125, i32 0, i32 0
  store i32* %_value205, i32** %volatile_data204, align 8
  store i32 0, i32* %order207, align 4
  %126 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val200, align 8
  %127 = bitcast %struct._Py_atomic_int* %126 to i8*
  %128 = load i32, i32* %order207, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %127, i32 %128)
  %129 = load i32, i32* %order207, align 4
  switch i32 %129, label %sw.default.209 [
    i32 2, label %sw.bb.208
    i32 3, label %sw.bb.208
    i32 4, label %sw.bb.208
  ]

sw.bb.208:                                        ; preds = %sw.epilog.197, %sw.epilog.197, %sw.epilog.197
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.210

sw.default.209:                                   ; preds = %sw.epilog.197
  br label %sw.epilog.210

sw.epilog.210:                                    ; preds = %sw.default.209, %sw.bb.208
  %130 = load i32*, i32** %volatile_data204, align 8
  %131 = load volatile i32, i32* %130, align 4
  store i32 %131, i32* %result202, align 4
  %132 = load i32, i32* %order207, align 4
  switch i32 %132, label %sw.default.212 [
    i32 1, label %sw.bb.211
    i32 3, label %sw.bb.211
    i32 4, label %sw.bb.211
  ]

sw.bb.211:                                        ; preds = %sw.epilog.210, %sw.epilog.210, %sw.epilog.210
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.213

sw.default.212:                                   ; preds = %sw.epilog.210
  br label %sw.epilog.213

sw.epilog.213:                                    ; preds = %sw.default.212, %sw.bb.211
  %133 = load i32, i32* %result202, align 4
  store i32 %133, i32* %tmp214
  %134 = load i32, i32* %tmp214
  %or = or i32 %124, %134
  %135 = load i32, i32* @pending_async_exc, align 4
  %or215 = or i32 %or, %135
  store i32 %or215, i32* %new_val182, align 4
  %136 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val180, align 8
  %_value218 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %136, i32 0, i32 0
  store i32* %_value218, i32** %volatile_data217, align 8
  store i32 0, i32* %order220, align 4
  %137 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val180, align 8
  %138 = bitcast %struct._Py_atomic_int* %137 to i8*
  %139 = load i32, i32* %order220, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %138, i32 %139)
  %140 = load i32, i32* %order220, align 4
  switch i32 %140, label %sw.epilog.225 [
    i32 2, label %sw.bb.221
    i32 0, label %sw.bb.222
    i32 1, label %sw.bb.223
    i32 3, label %sw.bb.223
    i32 4, label %sw.bb.223
  ]

sw.bb.221:                                        ; preds = %sw.epilog.213
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.222

sw.bb.222:                                        ; preds = %sw.epilog.213, %sw.bb.221
  %141 = load i32, i32* %new_val182, align 4
  %142 = load i32*, i32** %volatile_data217, align 8
  store volatile i32 %141, i32* %142, align 4
  br label %sw.epilog.225

sw.bb.223:                                        ; preds = %sw.epilog.213, %sw.epilog.213, %sw.epilog.213
  %143 = load i32, i32* %new_val182, align 4
  %144 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val180, align 8
  %_value224 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %144, i32 0, i32 0
  %145 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value224, i32 %143) #6, !srcloc !8
  store i32 %145, i32* %new_val182, align 4
  br label %sw.epilog.225

sw.epilog.225:                                    ; preds = %sw.epilog.213, %sw.bb.223, %sw.bb.222
  br label %do.end.226

do.end.226:                                       ; preds = %sw.epilog.225
  br label %if.end.227

if.end.227:                                       ; preds = %do.end.226, %sw.epilog.160
  %146 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %async_exc = getelementptr inbounds %struct._ts, %struct._ts* %146, i32 0, i32 21
  %147 = load %struct._object*, %struct._object** %async_exc, align 8
  %cmp228 = icmp ne %struct._object* %147, null
  br i1 %cmp228, label %if.then.229, label %if.end.230

if.then.229:                                      ; preds = %if.end.227
  call void @_PyEval_SignalAsyncExc()
  br label %if.end.230

if.end.230:                                       ; preds = %if.then.229, %if.end.227
  %call231 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @gil_mutex) #6
  %tobool232 = icmp ne i32 %call231, 0
  br i1 %tobool232, label %if.then.233, label %if.end.234

if.then.233:                                      ; preds = %if.end.230
  call void @Py_FatalError(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.55, i32 0, i32 0)) #7
  unreachable

if.end.234:                                       ; preds = %if.end.230
  %148 = load i32, i32* %err, align 4
  %call235 = call i32* @__errno_location() #8
  store i32 %148, i32* %call235, align 4
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_ANNOTATE_MEMORY_ORDER(i8* %address, i32 %order) #1 {
entry:
  %address.addr = alloca i8*, align 8
  %order.addr = alloca i32, align 4
  store i8* %address, i8** %address.addr, align 8
  store i32 %order, i32* %order.addr, align 4
  %0 = load i8*, i8** %address.addr, align 8
  %1 = load i32, i32* %order.addr, align 4
  switch i32 %1, label %sw.epilog [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
    i32 0, label %sw.bb.1
    i32 1, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry, %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %entry, %sw.bb.1, %sw.bb
  %2 = load i32, i32* %order.addr, align 4
  switch i32 %2, label %sw.epilog.4 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
    i32 0, label %sw.bb.3
    i32 2, label %sw.bb.3
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.bb.3:                                          ; preds = %sw.epilog, %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.epilog, %sw.bb.3, %sw.bb.2
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_thread_fence(i32 %order) #1 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "mfence", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !9
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable
define internal void @_Py_atomic_signal_fence(i32 %order) #1 {
entry:
  %order.addr = alloca i32, align 4
  store i32 %order, i32* %order.addr, align 4
  %0 = load i32, i32* %order.addr, align 4
  %cmp = icmp ne i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #6, !srcloc !10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

declare i64 @PyThread_get_thread_ident() #2

declare i8* @PyThread_allocate_lock() #2

; Function Attrs: nounwind uwtable
define void @_PyEval_FiniThreads() #0 {
entry:
  %call = call i32 @gil_created()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  call void @destroy_gil()
  br label %return

return:                                           ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @destroy_gil() #0 {
entry:
  %atomic_val = alloca %struct._Py_atomic_int*, align 8
  %new_val = alloca i32, align 4
  %volatile_data = alloca i32*, align 8
  %order = alloca i32, align 4
  %call = call i32 @pthread_cond_destroy(%union.pthread_cond_t* @gil_cond) #6
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.56, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call1 = call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* @gil_mutex) #6
  %tobool2 = icmp ne i32 %call1, 0
  br i1 %tobool2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  call void @Py_FatalError(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.57, i32 0, i32 0)) #7
  unreachable

if.end.4:                                         ; preds = %if.end
  %call5 = call i32 @pthread_cond_destroy(%union.pthread_cond_t* @switch_cond) #6
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.4
  call void @Py_FatalError(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.58, i32 0, i32 0)) #7
  unreachable

if.end.8:                                         ; preds = %if.end.4
  %call9 = call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* @switch_mutex) #6
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %if.end.8
  call void @Py_FatalError(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.59, i32 0, i32 0)) #7
  unreachable

if.end.12:                                        ; preds = %if.end.8
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val, align 8
  store i32 -1, i32* %new_val, align 4
  %0 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %0, i32 0, i32 0
  store i32* %_value, i32** %volatile_data, align 8
  store i32 2, i32* %order, align 4
  %1 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_int* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.epilog [
    i32 2, label %sw.bb
    i32 0, label %sw.bb.13
    i32 1, label %sw.bb.14
    i32 3, label %sw.bb.14
    i32 4, label %sw.bb.14
  ]

sw.bb:                                            ; preds = %if.end.12
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.13

sw.bb.13:                                         ; preds = %if.end.12, %sw.bb
  %5 = load i32, i32* %new_val, align 4
  %6 = load i32*, i32** %volatile_data, align 8
  store volatile i32 %5, i32* %6, align 4
  br label %sw.epilog

sw.bb.14:                                         ; preds = %if.end.12, %if.end.12, %if.end.12
  %7 = load i32, i32* %new_val, align 4
  %8 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value15 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %8, i32 0, i32 0
  %9 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value15, i32 %7) #6, !srcloc !11
  store i32 %9, i32* %new_val, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end.12, %sw.bb.14, %sw.bb.13
  ret void
}

; Function Attrs: nounwind uwtable
define void @PyEval_AcquireLock() #0 {
entry:
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load %struct._ts*, %struct._ts** %tstate, align 8
  %cmp = icmp eq %struct._ts* %11, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog.3
  call void @Py_FatalError(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %sw.epilog.3
  %12 = load %struct._ts*, %struct._ts** %tstate, align 8
  call void @take_gil(%struct._ts* %12)
  ret void
}

; Function Attrs: noreturn
declare void @Py_FatalError(i8*) #3

; Function Attrs: nounwind uwtable
define void @PyEval_ReleaseLock() #0 {
entry:
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  call void @drop_gil(%struct._ts* %10)
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @drop_gil(%struct._ts* %tstate) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_int*, align 8
  %result = alloca i32, align 4
  %volatile_data = alloca i32*, align 8
  %order = alloca i32, align 4
  %tmp = alloca i32, align 4
  %atomic_val6 = alloca %struct._Py_atomic_address*, align 8
  %new_val = alloca i8*, align 8
  %volatile_data9 = alloca i8**, align 8
  %order12 = alloca i32, align 4
  %atomic_val23 = alloca %struct._Py_atomic_int*, align 8
  %new_val25 = alloca i32, align 4
  %volatile_data27 = alloca i32*, align 8
  %order30 = alloca i32, align 4
  %atomic_val45 = alloca %struct._Py_atomic_int*, align 8
  %result47 = alloca i32, align 4
  %volatile_data49 = alloca i32*, align 8
  %order52 = alloca i32, align 4
  %tmp59 = alloca i32, align 4
  %atomic_val68 = alloca %struct._Py_atomic_address*, align 8
  %result70 = alloca i8*, align 8
  %volatile_data72 = alloca i8**, align 8
  %order75 = alloca i32, align 4
  %tmp82 = alloca i8*, align 8
  %atomic_val86 = alloca %struct._Py_atomic_int*, align 8
  %new_val88 = alloca i32, align 4
  %volatile_data90 = alloca i32*, align 8
  %order93 = alloca i32, align 4
  %atomic_val100 = alloca %struct._Py_atomic_int*, align 8
  %new_val102 = alloca i32, align 4
  %atomic_val104 = alloca %struct._Py_atomic_int*, align 8
  %result106 = alloca i32, align 4
  %volatile_data108 = alloca i32*, align 8
  %order111 = alloca i32, align 4
  %tmp118 = alloca i32, align 4
  %atomic_val120 = alloca %struct._Py_atomic_int*, align 8
  %result122 = alloca i32, align 4
  %volatile_data124 = alloca i32*, align 8
  %order127 = alloca i32, align 4
  %tmp134 = alloca i32, align 4
  %volatile_data137 = alloca i32*, align 8
  %order140 = alloca i32, align 4
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val, align 8
  %0 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %0, i32 0, i32 0
  store i32* %_value, i32** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_int* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i32*, i32** %volatile_data, align 8
  %6 = load volatile i32, i32* %5, align 4
  store i32 %6, i32* %result, align 4
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i32, i32* %result, align 4
  store i32 %8, i32* %tmp
  %9 = load i32, i32* %tmp
  %tobool = icmp ne i32 %9, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog.3
  call void @Py_FatalError(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.60, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %sw.epilog.3
  %10 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %cmp = icmp ne %struct._ts* %10, null
  br i1 %cmp, label %if.then.4, label %if.end.18

if.then.4:                                        ; preds = %if.end
  store %struct._Py_atomic_address* @gil_last_holder, %struct._Py_atomic_address** %atomic_val6, align 8
  %11 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %12 = bitcast %struct._ts* %11 to i8*
  store i8* %12, i8** %new_val, align 8
  %13 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val6, align 8
  %_value10 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %13, i32 0, i32 0
  store i8** %_value10, i8*** %volatile_data9, align 8
  store i32 0, i32* %order12, align 4
  %14 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val6, align 8
  %15 = bitcast %struct._Py_atomic_address* %14 to i8*
  %16 = load i32, i32* %order12, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %15, i32 %16)
  %17 = load i32, i32* %order12, align 4
  switch i32 %17, label %sw.epilog.17 [
    i32 2, label %sw.bb.13
    i32 0, label %sw.bb.14
    i32 1, label %sw.bb.15
    i32 3, label %sw.bb.15
    i32 4, label %sw.bb.15
  ]

sw.bb.13:                                         ; preds = %if.then.4
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.14

sw.bb.14:                                         ; preds = %if.then.4, %sw.bb.13
  %18 = load i8*, i8** %new_val, align 8
  %19 = load i8**, i8*** %volatile_data9, align 8
  store volatile i8* %18, i8** %19, align 8
  br label %sw.epilog.17

sw.bb.15:                                         ; preds = %if.then.4, %if.then.4, %if.then.4
  %20 = load i8*, i8** %new_val, align 8
  %21 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val6, align 8
  %_value16 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %21, i32 0, i32 0
  %22 = call i8* asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i8** %_value16, i8* %20) #6, !srcloc !12
  store i8* %22, i8** %new_val, align 8
  br label %sw.epilog.17

sw.epilog.17:                                     ; preds = %if.then.4, %sw.bb.15, %sw.bb.14
  br label %if.end.18

if.end.18:                                        ; preds = %sw.epilog.17, %if.end
  %call = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @gil_mutex) #6
  %tobool19 = icmp ne i32 %call, 0
  br i1 %tobool19, label %if.then.20, label %if.end.21

if.then.20:                                       ; preds = %if.end.18
  call void @Py_FatalError(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.50, i32 0, i32 0)) #7
  unreachable

if.end.21:                                        ; preds = %if.end.18
  store %struct._Py_atomic_int* @gil_locked, %struct._Py_atomic_int** %atomic_val23, align 8
  store i32 0, i32* %new_val25, align 4
  %23 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val23, align 8
  %_value28 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %23, i32 0, i32 0
  store i32* %_value28, i32** %volatile_data27, align 8
  store i32 0, i32* %order30, align 4
  %24 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val23, align 8
  %25 = bitcast %struct._Py_atomic_int* %24 to i8*
  %26 = load i32, i32* %order30, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %25, i32 %26)
  %27 = load i32, i32* %order30, align 4
  switch i32 %27, label %sw.epilog.35 [
    i32 2, label %sw.bb.31
    i32 0, label %sw.bb.32
    i32 1, label %sw.bb.33
    i32 3, label %sw.bb.33
    i32 4, label %sw.bb.33
  ]

sw.bb.31:                                         ; preds = %if.end.21
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.32

sw.bb.32:                                         ; preds = %if.end.21, %sw.bb.31
  %28 = load i32, i32* %new_val25, align 4
  %29 = load i32*, i32** %volatile_data27, align 8
  store volatile i32 %28, i32* %29, align 4
  br label %sw.epilog.35

sw.bb.33:                                         ; preds = %if.end.21, %if.end.21, %if.end.21
  %30 = load i32, i32* %new_val25, align 4
  %31 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val23, align 8
  %_value34 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %31, i32 0, i32 0
  %32 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value34, i32 %30) #6, !srcloc !13
  store i32 %32, i32* %new_val25, align 4
  br label %sw.epilog.35

sw.epilog.35:                                     ; preds = %if.end.21, %sw.bb.33, %sw.bb.32
  %call36 = call i32 @pthread_cond_signal(%union.pthread_cond_t* @gil_cond) #6
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.then.38, label %if.end.39

if.then.38:                                       ; preds = %sw.epilog.35
  call void @Py_FatalError(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.61, i32 0, i32 0)) #7
  unreachable

if.end.39:                                        ; preds = %sw.epilog.35
  %call40 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @gil_mutex) #6
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %if.end.39
  call void @Py_FatalError(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.55, i32 0, i32 0)) #7
  unreachable

if.end.43:                                        ; preds = %if.end.39
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val45, align 8
  %33 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val45, align 8
  %_value50 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %33, i32 0, i32 0
  store i32* %_value50, i32** %volatile_data49, align 8
  store i32 0, i32* %order52, align 4
  %34 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val45, align 8
  %35 = bitcast %struct._Py_atomic_int* %34 to i8*
  %36 = load i32, i32* %order52, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %35, i32 %36)
  %37 = load i32, i32* %order52, align 4
  switch i32 %37, label %sw.default.54 [
    i32 2, label %sw.bb.53
    i32 3, label %sw.bb.53
    i32 4, label %sw.bb.53
  ]

sw.bb.53:                                         ; preds = %if.end.43, %if.end.43, %if.end.43
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.55

sw.default.54:                                    ; preds = %if.end.43
  br label %sw.epilog.55

sw.epilog.55:                                     ; preds = %sw.default.54, %sw.bb.53
  %38 = load i32*, i32** %volatile_data49, align 8
  %39 = load volatile i32, i32* %38, align 4
  store i32 %39, i32* %result47, align 4
  %40 = load i32, i32* %order52, align 4
  switch i32 %40, label %sw.default.57 [
    i32 1, label %sw.bb.56
    i32 3, label %sw.bb.56
    i32 4, label %sw.bb.56
  ]

sw.bb.56:                                         ; preds = %sw.epilog.55, %sw.epilog.55, %sw.epilog.55
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.58

sw.default.57:                                    ; preds = %sw.epilog.55
  br label %sw.epilog.58

sw.epilog.58:                                     ; preds = %sw.default.57, %sw.bb.56
  %41 = load i32, i32* %result47, align 4
  store i32 %41, i32* %tmp59
  %42 = load i32, i32* %tmp59
  %tobool60 = icmp ne i32 %42, 0
  br i1 %tobool60, label %land.lhs.true, label %if.end.155

land.lhs.true:                                    ; preds = %sw.epilog.58
  %43 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %cmp61 = icmp ne %struct._ts* %43, null
  br i1 %cmp61, label %if.then.62, label %if.end.155

if.then.62:                                       ; preds = %land.lhs.true
  %call63 = call i32 @pthread_mutex_lock(%union.pthread_mutex_t* @switch_mutex) #6
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.then.65, label %if.end.66

if.then.65:                                       ; preds = %if.then.62
  call void @Py_FatalError(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.52, i32 0, i32 0)) #7
  unreachable

if.end.66:                                        ; preds = %if.then.62
  store %struct._Py_atomic_address* @gil_last_holder, %struct._Py_atomic_address** %atomic_val68, align 8
  %44 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val68, align 8
  %_value73 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %44, i32 0, i32 0
  store i8** %_value73, i8*** %volatile_data72, align 8
  store i32 0, i32* %order75, align 4
  %45 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val68, align 8
  %46 = bitcast %struct._Py_atomic_address* %45 to i8*
  %47 = load i32, i32* %order75, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %46, i32 %47)
  %48 = load i32, i32* %order75, align 4
  switch i32 %48, label %sw.default.77 [
    i32 2, label %sw.bb.76
    i32 3, label %sw.bb.76
    i32 4, label %sw.bb.76
  ]

sw.bb.76:                                         ; preds = %if.end.66, %if.end.66, %if.end.66
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.78

sw.default.77:                                    ; preds = %if.end.66
  br label %sw.epilog.78

sw.epilog.78:                                     ; preds = %sw.default.77, %sw.bb.76
  %49 = load i8**, i8*** %volatile_data72, align 8
  %50 = load volatile i8*, i8** %49, align 8
  store i8* %50, i8** %result70, align 8
  %51 = load i32, i32* %order75, align 4
  switch i32 %51, label %sw.default.80 [
    i32 1, label %sw.bb.79
    i32 3, label %sw.bb.79
    i32 4, label %sw.bb.79
  ]

sw.bb.79:                                         ; preds = %sw.epilog.78, %sw.epilog.78, %sw.epilog.78
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.81

sw.default.80:                                    ; preds = %sw.epilog.78
  br label %sw.epilog.81

sw.epilog.81:                                     ; preds = %sw.default.80, %sw.bb.79
  %52 = load i8*, i8** %result70, align 8
  store i8* %52, i8** %tmp82
  %53 = load i8*, i8** %tmp82
  %54 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %55 = bitcast %struct._ts* %54 to i8*
  %cmp83 = icmp eq i8* %53, %55
  br i1 %cmp83, label %if.then.84, label %if.end.150

if.then.84:                                       ; preds = %sw.epilog.81
  br label %do.body

do.body:                                          ; preds = %if.then.84
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val86, align 8
  store i32 0, i32* %new_val88, align 4
  %56 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val86, align 8
  %_value91 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %56, i32 0, i32 0
  store i32* %_value91, i32** %volatile_data90, align 8
  store i32 0, i32* %order93, align 4
  %57 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val86, align 8
  %58 = bitcast %struct._Py_atomic_int* %57 to i8*
  %59 = load i32, i32* %order93, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %58, i32 %59)
  %60 = load i32, i32* %order93, align 4
  switch i32 %60, label %sw.epilog.98 [
    i32 2, label %sw.bb.94
    i32 0, label %sw.bb.95
    i32 1, label %sw.bb.96
    i32 3, label %sw.bb.96
    i32 4, label %sw.bb.96
  ]

sw.bb.94:                                         ; preds = %do.body
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.95

sw.bb.95:                                         ; preds = %do.body, %sw.bb.94
  %61 = load i32, i32* %new_val88, align 4
  %62 = load i32*, i32** %volatile_data90, align 8
  store volatile i32 %61, i32* %62, align 4
  br label %sw.epilog.98

sw.bb.96:                                         ; preds = %do.body, %do.body, %do.body
  %63 = load i32, i32* %new_val88, align 4
  %64 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val86, align 8
  %_value97 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %64, i32 0, i32 0
  %65 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value97, i32 %63) #6, !srcloc !14
  store i32 %65, i32* %new_val88, align 4
  br label %sw.epilog.98

sw.epilog.98:                                     ; preds = %do.body, %sw.bb.96, %sw.bb.95
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val100, align 8
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val104, align 8
  %66 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val104, align 8
  %_value109 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %66, i32 0, i32 0
  store i32* %_value109, i32** %volatile_data108, align 8
  store i32 0, i32* %order111, align 4
  %67 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val104, align 8
  %68 = bitcast %struct._Py_atomic_int* %67 to i8*
  %69 = load i32, i32* %order111, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %68, i32 %69)
  %70 = load i32, i32* %order111, align 4
  switch i32 %70, label %sw.default.113 [
    i32 2, label %sw.bb.112
    i32 3, label %sw.bb.112
    i32 4, label %sw.bb.112
  ]

sw.bb.112:                                        ; preds = %sw.epilog.98, %sw.epilog.98, %sw.epilog.98
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.114

sw.default.113:                                   ; preds = %sw.epilog.98
  br label %sw.epilog.114

sw.epilog.114:                                    ; preds = %sw.default.113, %sw.bb.112
  %71 = load i32*, i32** %volatile_data108, align 8
  %72 = load volatile i32, i32* %71, align 4
  store i32 %72, i32* %result106, align 4
  %73 = load i32, i32* %order111, align 4
  switch i32 %73, label %sw.default.116 [
    i32 1, label %sw.bb.115
    i32 3, label %sw.bb.115
    i32 4, label %sw.bb.115
  ]

sw.bb.115:                                        ; preds = %sw.epilog.114, %sw.epilog.114, %sw.epilog.114
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.117

sw.default.116:                                   ; preds = %sw.epilog.114
  br label %sw.epilog.117

sw.epilog.117:                                    ; preds = %sw.default.116, %sw.bb.115
  %74 = load i32, i32* %result106, align 4
  store i32 %74, i32* %tmp118
  %75 = load i32, i32* %tmp118
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val120, align 8
  %76 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val120, align 8
  %_value125 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %76, i32 0, i32 0
  store i32* %_value125, i32** %volatile_data124, align 8
  store i32 0, i32* %order127, align 4
  %77 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val120, align 8
  %78 = bitcast %struct._Py_atomic_int* %77 to i8*
  %79 = load i32, i32* %order127, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %78, i32 %79)
  %80 = load i32, i32* %order127, align 4
  switch i32 %80, label %sw.default.129 [
    i32 2, label %sw.bb.128
    i32 3, label %sw.bb.128
    i32 4, label %sw.bb.128
  ]

sw.bb.128:                                        ; preds = %sw.epilog.117, %sw.epilog.117, %sw.epilog.117
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.130

sw.default.129:                                   ; preds = %sw.epilog.117
  br label %sw.epilog.130

sw.epilog.130:                                    ; preds = %sw.default.129, %sw.bb.128
  %81 = load i32*, i32** %volatile_data124, align 8
  %82 = load volatile i32, i32* %81, align 4
  store i32 %82, i32* %result122, align 4
  %83 = load i32, i32* %order127, align 4
  switch i32 %83, label %sw.default.132 [
    i32 1, label %sw.bb.131
    i32 3, label %sw.bb.131
    i32 4, label %sw.bb.131
  ]

sw.bb.131:                                        ; preds = %sw.epilog.130, %sw.epilog.130, %sw.epilog.130
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.133

sw.default.132:                                   ; preds = %sw.epilog.130
  br label %sw.epilog.133

sw.epilog.133:                                    ; preds = %sw.default.132, %sw.bb.131
  %84 = load i32, i32* %result122, align 4
  store i32 %84, i32* %tmp134
  %85 = load i32, i32* %tmp134
  %or = or i32 %75, %85
  %86 = load i32, i32* @pending_async_exc, align 4
  %or135 = or i32 %or, %86
  store i32 %or135, i32* %new_val102, align 4
  %87 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val100, align 8
  %_value138 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %87, i32 0, i32 0
  store i32* %_value138, i32** %volatile_data137, align 8
  store i32 0, i32* %order140, align 4
  %88 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val100, align 8
  %89 = bitcast %struct._Py_atomic_int* %88 to i8*
  %90 = load i32, i32* %order140, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %89, i32 %90)
  %91 = load i32, i32* %order140, align 4
  switch i32 %91, label %sw.epilog.145 [
    i32 2, label %sw.bb.141
    i32 0, label %sw.bb.142
    i32 1, label %sw.bb.143
    i32 3, label %sw.bb.143
    i32 4, label %sw.bb.143
  ]

sw.bb.141:                                        ; preds = %sw.epilog.133
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.142

sw.bb.142:                                        ; preds = %sw.epilog.133, %sw.bb.141
  %92 = load i32, i32* %new_val102, align 4
  %93 = load i32*, i32** %volatile_data137, align 8
  store volatile i32 %92, i32* %93, align 4
  br label %sw.epilog.145

sw.bb.143:                                        ; preds = %sw.epilog.133, %sw.epilog.133, %sw.epilog.133
  %94 = load i32, i32* %new_val102, align 4
  %95 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val100, align 8
  %_value144 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %95, i32 0, i32 0
  %96 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value144, i32 %94) #6, !srcloc !15
  store i32 %96, i32* %new_val102, align 4
  br label %sw.epilog.145

sw.epilog.145:                                    ; preds = %sw.epilog.133, %sw.bb.143, %sw.bb.142
  br label %do.end

do.end:                                           ; preds = %sw.epilog.145
  %call146 = call i32 @pthread_cond_wait(%union.pthread_cond_t* @switch_cond, %union.pthread_mutex_t* @switch_mutex)
  %tobool147 = icmp ne i32 %call146, 0
  br i1 %tobool147, label %if.then.148, label %if.end.149

if.then.148:                                      ; preds = %do.end
  call void @Py_FatalError(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.62, i32 0, i32 0)) #7
  unreachable

if.end.149:                                       ; preds = %do.end
  br label %if.end.150

if.end.150:                                       ; preds = %if.end.149, %sw.epilog.81
  %call151 = call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* @switch_mutex) #6
  %tobool152 = icmp ne i32 %call151, 0
  br i1 %tobool152, label %if.then.153, label %if.end.154

if.then.153:                                      ; preds = %if.end.150
  call void @Py_FatalError(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.54, i32 0, i32 0)) #7
  unreachable

if.end.154:                                       ; preds = %if.end.150
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %land.lhs.true, %sw.epilog.58
  ret void
}

; Function Attrs: nounwind uwtable
define void @PyEval_AcquireThread(%struct._ts* %tstate) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %cmp = icmp eq %struct._ts* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %1 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  call void @take_gil(%struct._ts* %1)
  %2 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %call = call %struct._ts* @PyThreadState_Swap(%struct._ts* %2)
  %cmp1 = icmp ne %struct._ts* %call, null
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  call void @Py_FatalError(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i32 0, i32 0)) #7
  unreachable

if.end.3:                                         ; preds = %if.end
  ret void
}

declare %struct._ts* @PyThreadState_Swap(%struct._ts*) #2

; Function Attrs: nounwind uwtable
define void @PyEval_ReleaseThread(%struct._ts* %tstate) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %cmp = icmp eq %struct._ts* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call = call %struct._ts* @PyThreadState_Swap(%struct._ts* null)
  %1 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %cmp1 = icmp ne %struct._ts* %call, %1
  br i1 %cmp1, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  call void @Py_FatalError(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i32 0, i32 0)) #7
  unreachable

if.end.3:                                         ; preds = %if.end
  %2 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  call void @drop_gil(%struct._ts* %2)
  ret void
}

; Function Attrs: nounwind uwtable
define void @PyEval_ReInitThreads() #0 {
entry:
  %threading = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %current_tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result1 = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp21 = alloca %struct._object*, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result1, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.3 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4

sw.default.3:                                     ; preds = %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.default.3, %sw.bb.2
  %8 = load i8*, i8** %result1, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %current_tstate, align 8
  %call = call i32 @gil_created()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %sw.epilog.4
  br label %return

if.end:                                           ; preds = %sw.epilog.4
  call void @recreate_gil()
  %call5 = call i8* @PyThread_allocate_lock()
  store i8* %call5, i8** @pending_lock, align 8
  %11 = load %struct._ts*, %struct._ts** %current_tstate, align 8
  call void @take_gil(%struct._ts* %11)
  %call6 = call i64 @PyThread_get_thread_ident()
  store i64 %call6, i64* @main_thread, align 8
  %12 = load %struct._ts*, %struct._ts** %current_tstate, align 8
  %interp = getelementptr inbounds %struct._ts, %struct._ts* %12, i32 0, i32 2
  %13 = load %struct._is*, %struct._is** %interp, align 8
  %modules = getelementptr inbounds %struct._is, %struct._is* %13, i32 0, i32 2
  %14 = load %struct._object*, %struct._object** %modules, align 8
  %call7 = call %struct._object* @PyMapping_GetItemString(%struct._object* %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i32 0, i32 0))
  store %struct._object* %call7, %struct._object** %threading, align 8
  %15 = load %struct._object*, %struct._object** %threading, align 8
  %cmp = icmp eq %struct._object* %15, null
  br i1 %cmp, label %if.then.8, label %if.end.9

if.then.8:                                        ; preds = %if.end
  call void @PyErr_Clear()
  br label %return

if.end.9:                                         ; preds = %if.end
  %16 = load %struct._object*, %struct._object** %threading, align 8
  %call10 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, i8*, ...) @_PyObject_CallMethodId(%struct._object* %16, %struct._Py_Identifier* @PyEval_ReInitThreads.PyId__after_fork, i8* null)
  store %struct._object* %call10, %struct._object** %result, align 8
  %17 = load %struct._object*, %struct._object** %result, align 8
  %cmp11 = icmp eq %struct._object* %17, null
  br i1 %cmp11, label %if.then.12, label %if.else

if.then.12:                                       ; preds = %if.end.9
  %18 = load %struct._object*, %struct._object** %threading, align 8
  call void @PyErr_WriteUnraisable(%struct._object* %18)
  br label %if.end.18

if.else:                                          ; preds = %if.end.9
  br label %do.body

do.body:                                          ; preds = %if.else
  %19 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %19, %struct._object** %_py_decref_tmp, align 8
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 0
  %21 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %21, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp14 = icmp ne i64 %dec, 0
  br i1 %cmp14, label %if.then.15, label %if.else.16

if.then.15:                                       ; preds = %do.body
  br label %if.end.17

if.else.16:                                       ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 4
  %24 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %24(%struct._object* %25)
  br label %if.end.17

if.end.17:                                        ; preds = %if.else.16, %if.then.15
  br label %do.end

do.end:                                           ; preds = %if.end.17
  br label %if.end.18

if.end.18:                                        ; preds = %do.end, %if.then.12
  br label %do.body.19

do.body.19:                                       ; preds = %if.end.18
  %26 = load %struct._object*, %struct._object** %threading, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp21, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt22, align 8
  %dec23 = add i64 %28, -1
  store i64 %dec23, i64* %ob_refcnt22, align 8
  %cmp24 = icmp ne i64 %dec23, 0
  br i1 %cmp24, label %if.then.25, label %if.else.26

if.then.25:                                       ; preds = %do.body.19
  br label %if.end.29

if.else.26:                                       ; preds = %do.body.19
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  %ob_type27 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type27, align 8
  %tp_dealloc28 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc28, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp21, align 8
  call void %31(%struct._object* %32)
  br label %if.end.29

if.end.29:                                        ; preds = %if.else.26, %if.then.25
  br label %do.end.30

do.end.30:                                        ; preds = %if.end.29
  %33 = load %struct._ts*, %struct._ts** %current_tstate, align 8
  call void @_PyThreadState_DeleteExcept(%struct._ts* %33)
  br label %return

return:                                           ; preds = %do.end.30, %if.then.8, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @recreate_gil() #0 {
entry:
  call void @create_gil()
  ret void
}

declare %struct._object* @PyMapping_GetItemString(%struct._object*, i8*) #2

declare void @PyErr_Clear() #2

declare %struct._object* @_PyObject_CallMethodId(%struct._object*, %struct._Py_Identifier*, i8*, ...) #2

declare void @PyErr_WriteUnraisable(%struct._object*) #2

declare void @_PyThreadState_DeleteExcept(%struct._ts*) #2

; Function Attrs: nounwind uwtable
define void @_PyEval_SignalAsyncExc() #0 {
entry:
  %atomic_val = alloca %struct._Py_atomic_int*, align 8
  %new_val = alloca i32, align 4
  %volatile_data = alloca i32*, align 8
  %order = alloca i32, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  store i32 1, i32* @pending_async_exc, align 4
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val, align 8
  store i32 1, i32* %new_val, align 4
  %0 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %0, i32 0, i32 0
  store i32* %_value, i32** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_int* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.epilog [
    i32 2, label %sw.bb
    i32 0, label %sw.bb.1
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
  ]

sw.bb:                                            ; preds = %do.body
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.1

sw.bb.1:                                          ; preds = %do.body, %sw.bb
  %5 = load i32, i32* %new_val, align 4
  %6 = load i32*, i32** %volatile_data, align 8
  store volatile i32 %5, i32* %6, align 4
  br label %sw.epilog

sw.bb.2:                                          ; preds = %do.body, %do.body, %do.body
  %7 = load i32, i32* %new_val, align 4
  %8 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value3 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %8, i32 0, i32 0
  %9 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value3, i32 %7) #6, !srcloc !16
  store i32 %9, i32* %new_val, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.body, %sw.bb.2, %sw.bb.1
  br label %do.end

do.end:                                           ; preds = %sw.epilog
  ret void
}

; Function Attrs: nounwind uwtable
define %struct._ts* @PyEval_SaveThread() #0 {
entry:
  %tstate = alloca %struct._ts*, align 8
  %call = call %struct._ts* @PyThreadState_Swap(%struct._ts* null)
  store %struct._ts* %call, %struct._ts** %tstate, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate, align 8
  %cmp = icmp eq %struct._ts* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call1 = call i32 @gil_created()
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then.2, label %if.end.3

if.then.2:                                        ; preds = %if.end
  %1 = load %struct._ts*, %struct._ts** %tstate, align 8
  call void @drop_gil(%struct._ts* %1)
  br label %if.end.3

if.end.3:                                         ; preds = %if.then.2, %if.end
  %2 = load %struct._ts*, %struct._ts** %tstate, align 8
  ret %struct._ts* %2
}

; Function Attrs: nounwind uwtable
define void @PyEval_RestoreThread(%struct._ts* %tstate) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  %err = alloca i32, align 4
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %cmp = icmp eq %struct._ts* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @Py_FatalError(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i32 0, i32 0)) #7
  unreachable

if.end:                                           ; preds = %entry
  %call = call i32 @gil_created()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.1, label %if.end.8

if.then.1:                                        ; preds = %if.end
  %call2 = call i32* @__errno_location() #8
  %1 = load i32, i32* %call2, align 4
  store i32 %1, i32* %err, align 4
  %2 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  call void @take_gil(%struct._ts* %2)
  %3 = load %struct._ts*, %struct._ts** @_Py_Finalizing, align 8
  %tobool3 = icmp ne %struct._ts* %3, null
  br i1 %tobool3, label %land.lhs.true, label %if.end.6

land.lhs.true:                                    ; preds = %if.then.1
  %4 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %5 = load %struct._ts*, %struct._ts** @_Py_Finalizing, align 8
  %cmp4 = icmp ne %struct._ts* %4, %5
  br i1 %cmp4, label %if.then.5, label %if.end.6

if.then.5:                                        ; preds = %land.lhs.true
  %6 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  call void @drop_gil(%struct._ts* %6)
  call void @PyThread_exit_thread()
  br label %if.end.6

if.end.6:                                         ; preds = %if.then.5, %land.lhs.true, %if.then.1
  %7 = load i32, i32* %err, align 4
  %call7 = call i32* @__errno_location() #8
  store i32 %7, i32* %call7, align 4
  br label %if.end.8

if.end.8:                                         ; preds = %if.end.6, %if.end
  %8 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %call9 = call %struct._ts* @PyThreadState_Swap(%struct._ts* %8)
  ret void
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #4

declare void @PyThread_exit_thread() #2

; Function Attrs: nounwind uwtable
define i32 @Py_AddPendingCall(i32 (i8*)* %func, i8* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %func.addr = alloca i32 (i8*)*, align 8
  %arg.addr = alloca i8*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %result = alloca i32, align 4
  %lock = alloca i8*, align 8
  %atomic_val = alloca %struct._Py_atomic_int*, align 8
  %new_val = alloca i32, align 4
  %volatile_data = alloca i32*, align 8
  %order = alloca i32, align 4
  %atomic_val17 = alloca %struct._Py_atomic_int*, align 8
  %new_val18 = alloca i32, align 4
  %volatile_data19 = alloca i32*, align 8
  %order21 = alloca i32, align 4
  store i32 (i8*)* %func, i32 (i8*)** %func.addr, align 8
  store i8* %arg, i8** %arg.addr, align 8
  store i32 0, i32* %result, align 4
  %0 = load i8*, i8** @pending_lock, align 8
  store i8* %0, i8** %lock, align 8
  %1 = load i8*, i8** %lock, align 8
  %cmp = icmp ne i8* %1, null
  br i1 %cmp, label %if.then, label %if.end.6

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4
  %cmp1 = icmp slt i32 %2, 100
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %3 = load i8*, i8** %lock, align 8
  %call = call i32 @PyThread_acquire_lock(i8* %3, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %for.body
  br label %for.end

if.end:                                           ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %4 = load i32, i32* %i, align 4
  %inc = add i32 %4, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.2, %for.cond
  %5 = load i32, i32* %i, align 4
  %cmp3 = icmp eq i32 %5, 100
  br i1 %cmp3, label %if.then.4, label %if.end.5

if.then.4:                                        ; preds = %for.end
  store i32 -1, i32* %retval
  br label %return

if.end.5:                                         ; preds = %for.end
  br label %if.end.6

if.end.6:                                         ; preds = %if.end.5, %entry
  %6 = load i32, i32* @pendinglast, align 4
  store i32 %6, i32* %i, align 4
  %7 = load i32, i32* %i, align 4
  %add = add i32 %7, 1
  %rem = srem i32 %add, 32
  store i32 %rem, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* @pendingfirst, align 4
  %cmp7 = icmp eq i32 %8, %9
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %if.end.6
  store i32 -1, i32* %result, align 4
  br label %if.end.13

if.else:                                          ; preds = %if.end.6
  %10 = load i32 (i8*)*, i32 (i8*)** %func.addr, align 8
  %11 = load i32, i32* %i, align 4
  %idxprom = sext i32 %11 to i64
  %arrayidx = getelementptr [32 x %struct.anon], [32 x %struct.anon]* @pendingcalls, i32 0, i64 %idxprom
  %func9 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0
  store i32 (i8*)* %10, i32 (i8*)** %func9, align 8
  %12 = load i8*, i8** %arg.addr, align 8
  %13 = load i32, i32* %i, align 4
  %idxprom10 = sext i32 %13 to i64
  %arrayidx11 = getelementptr [32 x %struct.anon], [32 x %struct.anon]* @pendingcalls, i32 0, i64 %idxprom10
  %arg12 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx11, i32 0, i32 1
  store i8* %12, i8** %arg12, align 8
  %14 = load i32, i32* %j, align 4
  store i32 %14, i32* @pendinglast, align 4
  br label %if.end.13

if.end.13:                                        ; preds = %if.else, %if.then.8
  br label %do.body

do.body:                                          ; preds = %if.end.13
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val, align 8
  store i32 1, i32* %new_val, align 4
  %15 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %15, i32 0, i32 0
  store i32* %_value, i32** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %16 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %17 = bitcast %struct._Py_atomic_int* %16 to i8*
  %18 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %17, i32 %18)
  %19 = load i32, i32* %order, align 4
  switch i32 %19, label %sw.epilog [
    i32 2, label %sw.bb
    i32 0, label %sw.bb.14
    i32 1, label %sw.bb.15
    i32 3, label %sw.bb.15
    i32 4, label %sw.bb.15
  ]

sw.bb:                                            ; preds = %do.body
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.14

sw.bb.14:                                         ; preds = %do.body, %sw.bb
  %20 = load i32, i32* %new_val, align 4
  %21 = load i32*, i32** %volatile_data, align 8
  store volatile i32 %20, i32* %21, align 4
  br label %sw.epilog

sw.bb.15:                                         ; preds = %do.body, %do.body, %do.body
  %22 = load i32, i32* %new_val, align 4
  %23 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value16 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %23, i32 0, i32 0
  %24 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value16, i32 %22) #6, !srcloc !17
  store i32 %24, i32* %new_val, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.body, %sw.bb.15, %sw.bb.14
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val17, align 8
  store i32 1, i32* %new_val18, align 4
  %25 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val17, align 8
  %_value20 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %25, i32 0, i32 0
  store i32* %_value20, i32** %volatile_data19, align 8
  store i32 0, i32* %order21, align 4
  %26 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val17, align 8
  %27 = bitcast %struct._Py_atomic_int* %26 to i8*
  %28 = load i32, i32* %order21, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %27, i32 %28)
  %29 = load i32, i32* %order21, align 4
  switch i32 %29, label %sw.epilog.26 [
    i32 2, label %sw.bb.22
    i32 0, label %sw.bb.23
    i32 1, label %sw.bb.24
    i32 3, label %sw.bb.24
    i32 4, label %sw.bb.24
  ]

sw.bb.22:                                         ; preds = %sw.epilog
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.23

sw.bb.23:                                         ; preds = %sw.epilog, %sw.bb.22
  %30 = load i32, i32* %new_val18, align 4
  %31 = load i32*, i32** %volatile_data19, align 8
  store volatile i32 %30, i32* %31, align 4
  br label %sw.epilog.26

sw.bb.24:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  %32 = load i32, i32* %new_val18, align 4
  %33 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val17, align 8
  %_value25 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %33, i32 0, i32 0
  %34 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value25, i32 %32) #6, !srcloc !18
  store i32 %34, i32* %new_val18, align 4
  br label %sw.epilog.26

sw.epilog.26:                                     ; preds = %sw.epilog, %sw.bb.24, %sw.bb.23
  br label %do.end

do.end:                                           ; preds = %sw.epilog.26
  %35 = load i8*, i8** %lock, align 8
  %cmp27 = icmp ne i8* %35, null
  br i1 %cmp27, label %if.then.28, label %if.end.29

if.then.28:                                       ; preds = %do.end
  %36 = load i8*, i8** %lock, align 8
  call void @PyThread_release_lock(i8* %36)
  br label %if.end.29

if.end.29:                                        ; preds = %if.then.28, %do.end
  %37 = load i32, i32* %result, align 4
  store i32 %37, i32* %retval
  br label %return

return:                                           ; preds = %if.end.29, %if.then.4
  %38 = load i32, i32* %retval
  ret i32 %38
}

declare i32 @PyThread_acquire_lock(i8*, i32) #2

declare void @PyThread_release_lock(i8*) #2

; Function Attrs: nounwind uwtable
define i32 @Py_MakePendingCalls() #0 {
entry:
  %retval = alloca i32, align 4
  %i = alloca i32, align 4
  %r = alloca i32, align 4
  %j = alloca i32, align 4
  %func = alloca i32 (i8*)*, align 8
  %arg = alloca i8*, align 8
  %atomic_val = alloca %struct._Py_atomic_int*, align 8
  %new_val = alloca i32, align 4
  %volatile_data = alloca i32*, align 8
  %order = alloca i32, align 4
  %atomic_val25 = alloca %struct._Py_atomic_int*, align 8
  %new_val26 = alloca i32, align 4
  %volatile_data27 = alloca i32*, align 8
  %order29 = alloca i32, align 4
  %atomic_val37 = alloca %struct._Py_atomic_int*, align 8
  %new_val38 = alloca i32, align 4
  %volatile_data39 = alloca i32*, align 8
  %order41 = alloca i32, align 4
  %atomic_val47 = alloca %struct._Py_atomic_int*, align 8
  %new_val48 = alloca i32, align 4
  %atomic_val49 = alloca %struct._Py_atomic_int*, align 8
  %result = alloca i32, align 4
  %volatile_data50 = alloca i32*, align 8
  %order52 = alloca i32, align 4
  %tmp = alloca i32, align 4
  %atomic_val59 = alloca %struct._Py_atomic_int*, align 8
  %result61 = alloca i32, align 4
  %volatile_data63 = alloca i32*, align 8
  %order66 = alloca i32, align 4
  %tmp73 = alloca i32, align 4
  %volatile_data76 = alloca i32*, align 8
  %order79 = alloca i32, align 4
  store i32 0, i32* %r, align 4
  %0 = load i8*, i8** @pending_lock, align 8
  %tobool = icmp ne i8* %0, null
  br i1 %tobool, label %if.end.2, label %if.then

if.then:                                          ; preds = %entry
  %call = call i8* @PyThread_allocate_lock()
  store i8* %call, i8** @pending_lock, align 8
  %1 = load i8*, i8** @pending_lock, align 8
  %cmp = icmp eq i8* %1, null
  br i1 %cmp, label %if.then.1, label %if.end

if.then.1:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.2

if.end.2:                                         ; preds = %if.end, %entry
  %2 = load i64, i64* @main_thread, align 8
  %tobool3 = icmp ne i64 %2, 0
  br i1 %tobool3, label %land.lhs.true, label %if.end.7

land.lhs.true:                                    ; preds = %if.end.2
  %call4 = call i64 @PyThread_get_thread_ident()
  %3 = load i64, i64* @main_thread, align 8
  %cmp5 = icmp ne i64 %call4, %3
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %land.lhs.true
  store i32 0, i32* %retval
  br label %return

if.end.7:                                         ; preds = %land.lhs.true, %if.end.2
  %4 = load i32, i32* @Py_MakePendingCalls.busy, align 4
  %tobool8 = icmp ne i32 %4, 0
  br i1 %tobool8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %if.end.7
  store i32 0, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end.7
  store i32 1, i32* @Py_MakePendingCalls.busy, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.10
  %5 = load i32, i32* %i, align 4
  %cmp11 = icmp slt i32 %5, 32
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  store i8* null, i8** %arg, align 8
  %6 = load i8*, i8** @pending_lock, align 8
  %call12 = call i32 @PyThread_acquire_lock(i8* %6, i32 1)
  %7 = load i32, i32* @pendingfirst, align 4
  store i32 %7, i32* %j, align 4
  %8 = load i32, i32* %j, align 4
  %9 = load i32, i32* @pendinglast, align 4
  %cmp13 = icmp eq i32 %8, %9
  br i1 %cmp13, label %if.then.14, label %if.else

if.then.14:                                       ; preds = %for.body
  store i32 (i8*)* null, i32 (i8*)** %func, align 8
  br label %if.end.19

if.else:                                          ; preds = %for.body
  %10 = load i32, i32* %j, align 4
  %idxprom = sext i32 %10 to i64
  %arrayidx = getelementptr [32 x %struct.anon], [32 x %struct.anon]* @pendingcalls, i32 0, i64 %idxprom
  %func15 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx, i32 0, i32 0
  %11 = load i32 (i8*)*, i32 (i8*)** %func15, align 8
  store i32 (i8*)* %11, i32 (i8*)** %func, align 8
  %12 = load i32, i32* %j, align 4
  %idxprom16 = sext i32 %12 to i64
  %arrayidx17 = getelementptr [32 x %struct.anon], [32 x %struct.anon]* @pendingcalls, i32 0, i64 %idxprom16
  %arg18 = getelementptr inbounds %struct.anon, %struct.anon* %arrayidx17, i32 0, i32 1
  %13 = load i8*, i8** %arg18, align 8
  store i8* %13, i8** %arg, align 8
  %14 = load i32, i32* %j, align 4
  %add = add i32 %14, 1
  %rem = srem i32 %add, 32
  store i32 %rem, i32* @pendingfirst, align 4
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.14
  %15 = load i32, i32* @pendingfirst, align 4
  %16 = load i32, i32* @pendinglast, align 4
  %cmp20 = icmp ne i32 %15, %16
  br i1 %cmp20, label %if.then.21, label %if.else.35

if.then.21:                                       ; preds = %if.end.19
  br label %do.body

do.body:                                          ; preds = %if.then.21
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val, align 8
  store i32 1, i32* %new_val, align 4
  %17 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %17, i32 0, i32 0
  store i32* %_value, i32** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %18 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %19 = bitcast %struct._Py_atomic_int* %18 to i8*
  %20 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %19, i32 %20)
  %21 = load i32, i32* %order, align 4
  switch i32 %21, label %sw.epilog [
    i32 2, label %sw.bb
    i32 0, label %sw.bb.22
    i32 1, label %sw.bb.23
    i32 3, label %sw.bb.23
    i32 4, label %sw.bb.23
  ]

sw.bb:                                            ; preds = %do.body
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.22

sw.bb.22:                                         ; preds = %do.body, %sw.bb
  %22 = load i32, i32* %new_val, align 4
  %23 = load i32*, i32** %volatile_data, align 8
  store volatile i32 %22, i32* %23, align 4
  br label %sw.epilog

sw.bb.23:                                         ; preds = %do.body, %do.body, %do.body
  %24 = load i32, i32* %new_val, align 4
  %25 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val, align 8
  %_value24 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %25, i32 0, i32 0
  %26 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value24, i32 %24) #6, !srcloc !19
  store i32 %26, i32* %new_val, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.body, %sw.bb.23, %sw.bb.22
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val25, align 8
  store i32 1, i32* %new_val26, align 4
  %27 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val25, align 8
  %_value28 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %27, i32 0, i32 0
  store i32* %_value28, i32** %volatile_data27, align 8
  store i32 0, i32* %order29, align 4
  %28 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val25, align 8
  %29 = bitcast %struct._Py_atomic_int* %28 to i8*
  %30 = load i32, i32* %order29, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %29, i32 %30)
  %31 = load i32, i32* %order29, align 4
  switch i32 %31, label %sw.epilog.34 [
    i32 2, label %sw.bb.30
    i32 0, label %sw.bb.31
    i32 1, label %sw.bb.32
    i32 3, label %sw.bb.32
    i32 4, label %sw.bb.32
  ]

sw.bb.30:                                         ; preds = %sw.epilog
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.31

sw.bb.31:                                         ; preds = %sw.epilog, %sw.bb.30
  %32 = load i32, i32* %new_val26, align 4
  %33 = load i32*, i32** %volatile_data27, align 8
  store volatile i32 %32, i32* %33, align 4
  br label %sw.epilog.34

sw.bb.32:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  %34 = load i32, i32* %new_val26, align 4
  %35 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val25, align 8
  %_value33 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %35, i32 0, i32 0
  %36 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value33, i32 %34) #6, !srcloc !20
  store i32 %36, i32* %new_val26, align 4
  br label %sw.epilog.34

sw.epilog.34:                                     ; preds = %sw.epilog, %sw.bb.32, %sw.bb.31
  br label %do.end

do.end:                                           ; preds = %sw.epilog.34
  br label %if.end.86

if.else.35:                                       ; preds = %if.end.19
  br label %do.body.36

do.body.36:                                       ; preds = %if.else.35
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val37, align 8
  store i32 0, i32* %new_val38, align 4
  %37 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val37, align 8
  %_value40 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %37, i32 0, i32 0
  store i32* %_value40, i32** %volatile_data39, align 8
  store i32 0, i32* %order41, align 4
  %38 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val37, align 8
  %39 = bitcast %struct._Py_atomic_int* %38 to i8*
  %40 = load i32, i32* %order41, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %39, i32 %40)
  %41 = load i32, i32* %order41, align 4
  switch i32 %41, label %sw.epilog.46 [
    i32 2, label %sw.bb.42
    i32 0, label %sw.bb.43
    i32 1, label %sw.bb.44
    i32 3, label %sw.bb.44
    i32 4, label %sw.bb.44
  ]

sw.bb.42:                                         ; preds = %do.body.36
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.43

sw.bb.43:                                         ; preds = %do.body.36, %sw.bb.42
  %42 = load i32, i32* %new_val38, align 4
  %43 = load i32*, i32** %volatile_data39, align 8
  store volatile i32 %42, i32* %43, align 4
  br label %sw.epilog.46

sw.bb.44:                                         ; preds = %do.body.36, %do.body.36, %do.body.36
  %44 = load i32, i32* %new_val38, align 4
  %45 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val37, align 8
  %_value45 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %45, i32 0, i32 0
  %46 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value45, i32 %44) #6, !srcloc !21
  store i32 %46, i32* %new_val38, align 4
  br label %sw.epilog.46

sw.epilog.46:                                     ; preds = %do.body.36, %sw.bb.44, %sw.bb.43
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val47, align 8
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val49, align 8
  %47 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val49, align 8
  %_value51 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %47, i32 0, i32 0
  store i32* %_value51, i32** %volatile_data50, align 8
  store i32 0, i32* %order52, align 4
  %48 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val49, align 8
  %49 = bitcast %struct._Py_atomic_int* %48 to i8*
  %50 = load i32, i32* %order52, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %49, i32 %50)
  %51 = load i32, i32* %order52, align 4
  switch i32 %51, label %sw.default [
    i32 2, label %sw.bb.53
    i32 3, label %sw.bb.53
    i32 4, label %sw.bb.53
  ]

sw.bb.53:                                         ; preds = %sw.epilog.46, %sw.epilog.46, %sw.epilog.46
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.54

sw.default:                                       ; preds = %sw.epilog.46
  br label %sw.epilog.54

sw.epilog.54:                                     ; preds = %sw.default, %sw.bb.53
  %52 = load i32*, i32** %volatile_data50, align 8
  %53 = load volatile i32, i32* %52, align 4
  store i32 %53, i32* %result, align 4
  %54 = load i32, i32* %order52, align 4
  switch i32 %54, label %sw.default.56 [
    i32 1, label %sw.bb.55
    i32 3, label %sw.bb.55
    i32 4, label %sw.bb.55
  ]

sw.bb.55:                                         ; preds = %sw.epilog.54, %sw.epilog.54, %sw.epilog.54
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.57

sw.default.56:                                    ; preds = %sw.epilog.54
  br label %sw.epilog.57

sw.epilog.57:                                     ; preds = %sw.default.56, %sw.bb.55
  %55 = load i32, i32* %result, align 4
  store i32 %55, i32* %tmp
  %56 = load i32, i32* %tmp
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val59, align 8
  %57 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val59, align 8
  %_value64 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %57, i32 0, i32 0
  store i32* %_value64, i32** %volatile_data63, align 8
  store i32 0, i32* %order66, align 4
  %58 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val59, align 8
  %59 = bitcast %struct._Py_atomic_int* %58 to i8*
  %60 = load i32, i32* %order66, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %59, i32 %60)
  %61 = load i32, i32* %order66, align 4
  switch i32 %61, label %sw.default.68 [
    i32 2, label %sw.bb.67
    i32 3, label %sw.bb.67
    i32 4, label %sw.bb.67
  ]

sw.bb.67:                                         ; preds = %sw.epilog.57, %sw.epilog.57, %sw.epilog.57
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.69

sw.default.68:                                    ; preds = %sw.epilog.57
  br label %sw.epilog.69

sw.epilog.69:                                     ; preds = %sw.default.68, %sw.bb.67
  %62 = load i32*, i32** %volatile_data63, align 8
  %63 = load volatile i32, i32* %62, align 4
  store i32 %63, i32* %result61, align 4
  %64 = load i32, i32* %order66, align 4
  switch i32 %64, label %sw.default.71 [
    i32 1, label %sw.bb.70
    i32 3, label %sw.bb.70
    i32 4, label %sw.bb.70
  ]

sw.bb.70:                                         ; preds = %sw.epilog.69, %sw.epilog.69, %sw.epilog.69
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.72

sw.default.71:                                    ; preds = %sw.epilog.69
  br label %sw.epilog.72

sw.epilog.72:                                     ; preds = %sw.default.71, %sw.bb.70
  %65 = load i32, i32* %result61, align 4
  store i32 %65, i32* %tmp73
  %66 = load i32, i32* %tmp73
  %or = or i32 %56, %66
  %67 = load i32, i32* @pending_async_exc, align 4
  %or74 = or i32 %or, %67
  store i32 %or74, i32* %new_val48, align 4
  %68 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val47, align 8
  %_value77 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %68, i32 0, i32 0
  store i32* %_value77, i32** %volatile_data76, align 8
  store i32 0, i32* %order79, align 4
  %69 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val47, align 8
  %70 = bitcast %struct._Py_atomic_int* %69 to i8*
  %71 = load i32, i32* %order79, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %70, i32 %71)
  %72 = load i32, i32* %order79, align 4
  switch i32 %72, label %sw.epilog.84 [
    i32 2, label %sw.bb.80
    i32 0, label %sw.bb.81
    i32 1, label %sw.bb.82
    i32 3, label %sw.bb.82
    i32 4, label %sw.bb.82
  ]

sw.bb.80:                                         ; preds = %sw.epilog.72
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.81

sw.bb.81:                                         ; preds = %sw.epilog.72, %sw.bb.80
  %73 = load i32, i32* %new_val48, align 4
  %74 = load i32*, i32** %volatile_data76, align 8
  store volatile i32 %73, i32* %74, align 4
  br label %sw.epilog.84

sw.bb.82:                                         ; preds = %sw.epilog.72, %sw.epilog.72, %sw.epilog.72
  %75 = load i32, i32* %new_val48, align 4
  %76 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val47, align 8
  %_value83 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %76, i32 0, i32 0
  %77 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value83, i32 %75) #6, !srcloc !22
  store i32 %77, i32* %new_val48, align 4
  br label %sw.epilog.84

sw.epilog.84:                                     ; preds = %sw.epilog.72, %sw.bb.82, %sw.bb.81
  br label %do.end.85

do.end.85:                                        ; preds = %sw.epilog.84
  br label %if.end.86

if.end.86:                                        ; preds = %do.end.85, %do.end
  %78 = load i8*, i8** @pending_lock, align 8
  call void @PyThread_release_lock(i8* %78)
  %79 = load i32 (i8*)*, i32 (i8*)** %func, align 8
  %cmp87 = icmp eq i32 (i8*)* %79, null
  br i1 %cmp87, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.end.86
  br label %for.end

if.end.89:                                        ; preds = %if.end.86
  %80 = load i32 (i8*)*, i32 (i8*)** %func, align 8
  %81 = load i8*, i8** %arg, align 8
  %call90 = call i32 %80(i8* %81)
  store i32 %call90, i32* %r, align 4
  %82 = load i32, i32* %r, align 4
  %tobool91 = icmp ne i32 %82, 0
  br i1 %tobool91, label %if.then.92, label %if.end.93

if.then.92:                                       ; preds = %if.end.89
  br label %for.end

if.end.93:                                        ; preds = %if.end.89
  br label %for.inc

for.inc:                                          ; preds = %if.end.93
  %83 = load i32, i32* %i, align 4
  %inc = add i32 %83, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.92, %if.then.88, %for.cond
  store i32 0, i32* @Py_MakePendingCalls.busy, align 4
  %84 = load i32, i32* %r, align 4
  store i32 %84, i32* %retval
  br label %return

return:                                           ; preds = %for.end, %if.then.9, %if.then.6, %if.then.1
  %85 = load i32, i32* %retval
  ret i32 %85
}

; Function Attrs: nounwind uwtable
define i32 @Py_GetRecursionLimit() #0 {
entry:
  %0 = load i32, i32* @recursion_limit, align 4
  ret i32 %0
}

; Function Attrs: nounwind uwtable
define void @Py_SetRecursionLimit(i32 %new_limit) #0 {
entry:
  %new_limit.addr = alloca i32, align 4
  store i32 %new_limit, i32* %new_limit.addr, align 4
  %0 = load i32, i32* %new_limit.addr, align 4
  store i32 %0, i32* @recursion_limit, align 4
  %1 = load i32, i32* @recursion_limit, align 4
  store i32 %1, i32* @_Py_CheckRecursionLimit, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @_Py_CheckRecursiveCall(i8* %where) #0 {
entry:
  %retval = alloca i32, align 4
  %where.addr = alloca i8*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store i8* %where, i8** %where.addr, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load i32, i32* @recursion_limit, align 4
  store i32 %11, i32* @_Py_CheckRecursionLimit, align 4
  %12 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_critical = getelementptr inbounds %struct._ts, %struct._ts* %12, i32 0, i32 6
  %13 = load i8, i8* %recursion_critical, align 1
  %tobool = icmp ne i8 %13, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog.3
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.epilog.3
  %14 = load %struct._ts*, %struct._ts** %tstate, align 8
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %14, i32 0, i32 5
  %15 = load i8, i8* %overflowed, align 1
  %tobool4 = icmp ne i8 %15, 0
  br i1 %tobool4, label %if.then.5, label %if.end.8

if.then.5:                                        ; preds = %if.end
  %16 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %16, i32 0, i32 4
  %17 = load i32, i32* %recursion_depth, align 4
  %18 = load i32, i32* @recursion_limit, align 4
  %add = add i32 %18, 50
  %cmp = icmp sgt i32 %17, %add
  br i1 %cmp, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.then.5
  call void @Py_FatalError(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i32 0, i32 0)) #7
  unreachable

if.end.7:                                         ; preds = %if.then.5
  store i32 0, i32* %retval
  br label %return

if.end.8:                                         ; preds = %if.end
  %19 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_depth9 = getelementptr inbounds %struct._ts, %struct._ts* %19, i32 0, i32 4
  %20 = load i32, i32* %recursion_depth9, align 4
  %21 = load i32, i32* @recursion_limit, align 4
  %cmp10 = icmp sgt i32 %20, %21
  br i1 %cmp10, label %if.then.11, label %if.end.14

if.then.11:                                       ; preds = %if.end.8
  %22 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_depth12 = getelementptr inbounds %struct._ts, %struct._ts* %22, i32 0, i32 4
  %23 = load i32, i32* %recursion_depth12, align 4
  %dec = add i32 %23, -1
  store i32 %dec, i32* %recursion_depth12, align 4
  %24 = load %struct._ts*, %struct._ts** %tstate, align 8
  %overflowed13 = getelementptr inbounds %struct._ts, %struct._ts* %24, i32 0, i32 5
  store i8 1, i8* %overflowed13, align 1
  %25 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  %26 = load i8*, i8** %where.addr, align 8
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %25, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i32 0, i32 0), i8* %26)
  store i32 -1, i32* %retval
  br label %return

if.end.14:                                        ; preds = %if.end.8
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.end.14, %if.then.11, %if.end.7, %if.then
  %27 = load i32, i32* %retval
  ret i32 %27
}

declare %struct._object* @PyErr_Format(%struct._object*, i8*, ...) #2

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_EvalCode(%struct._object* %co, %struct._object* %globals, %struct._object* %locals) #0 {
entry:
  %co.addr = alloca %struct._object*, align 8
  %globals.addr = alloca %struct._object*, align 8
  %locals.addr = alloca %struct._object*, align 8
  store %struct._object* %co, %struct._object** %co.addr, align 8
  store %struct._object* %globals, %struct._object** %globals.addr, align 8
  store %struct._object* %locals, %struct._object** %locals.addr, align 8
  %0 = load %struct._object*, %struct._object** %co.addr, align 8
  %1 = load %struct._object*, %struct._object** %globals.addr, align 8
  %2 = load %struct._object*, %struct._object** %locals.addr, align 8
  %call = call %struct._object* @PyEval_EvalCodeEx(%struct._object* %0, %struct._object* %1, %struct._object* %2, %struct._object** null, i32 0, %struct._object** null, i32 0, %struct._object** null, i32 0, %struct._object* null, %struct._object* null)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_EvalCodeEx(%struct._object* %_co, %struct._object* %globals, %struct._object* %locals, %struct._object** %args, i32 %argcount, %struct._object** %kws, i32 %kwcount, %struct._object** %defs, i32 %defcount, %struct._object* %kwdefs, %struct._object* %closure) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %_co.addr = alloca %struct._object*, align 8
  %globals.addr = alloca %struct._object*, align 8
  %locals.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object**, align 8
  %argcount.addr = alloca i32, align 4
  %kws.addr = alloca %struct._object**, align 8
  %kwcount.addr = alloca i32, align 4
  %defs.addr = alloca %struct._object**, align 8
  %defcount.addr = alloca i32, align 4
  %kwdefs.addr = alloca %struct._object*, align 8
  %closure.addr = alloca %struct._object*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %f = alloca %struct._frame*, align 8
  %retval1 = alloca %struct._object*, align 8
  %fastlocals = alloca %struct._object**, align 8
  %freevars = alloca %struct._object**, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %x = alloca %struct._object*, align 8
  %u = alloca %struct._object*, align 8
  %total_args = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %kwdict = alloca %struct._object*, align 8
  %tmp27 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %tmp55 = alloca %struct._object*, align 8
  %_py_xdecref_tmp62 = alloca %struct._object*, align 8
  %_py_decref_tmp67 = alloca %struct._object*, align 8
  %tmp92 = alloca %struct._object*, align 8
  %_py_xdecref_tmp99 = alloca %struct._object*, align 8
  %_py_decref_tmp105 = alloca %struct._object*, align 8
  %co_varnames = alloca %struct._object**, align 8
  %keyword = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %j = alloca i32, align 4
  %nm = alloca %struct._object*, align 8
  %nm179 = alloca %struct._object*, align 8
  %cmp183 = alloca i32, align 4
  %tmp222 = alloca %struct._object*, align 8
  %_py_xdecref_tmp229 = alloca %struct._object*, align 8
  %_py_decref_tmp235 = alloca %struct._object*, align 8
  %m = alloca i32, align 4
  %missing = alloca i32, align 4
  %def = alloca %struct._object*, align 8
  %tmp309 = alloca %struct._object*, align 8
  %_py_xdecref_tmp318 = alloca %struct._object*, align 8
  %_py_decref_tmp324 = alloca %struct._object*, align 8
  %missing348 = alloca i32, align 4
  %name = alloca %struct._object*, align 8
  %def369 = alloca %struct._object*, align 8
  %tmp377 = alloca %struct._object*, align 8
  %_py_xdecref_tmp384 = alloca %struct._object*, align 8
  %_py_decref_tmp390 = alloca %struct._object*, align 8
  %c = alloca %struct._object*, align 8
  %arg = alloca i32, align 4
  %tmp436 = alloca %struct._object*, align 8
  %_py_xdecref_tmp443 = alloca %struct._object*, align 8
  %_py_decref_tmp449 = alloca %struct._object*, align 8
  %tmp472 = alloca %struct._object*, align 8
  %_py_xdecref_tmp483 = alloca %struct._object*, align 8
  %_py_decref_tmp489 = alloca %struct._object*, align 8
  %o = alloca %struct._object*, align 8
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp538 = alloca %struct._object*, align 8
  %_py_decref_tmp557 = alloca %struct._object*, align 8
  store %struct._object* %_co, %struct._object** %_co.addr, align 8
  store %struct._object* %globals, %struct._object** %globals.addr, align 8
  store %struct._object* %locals, %struct._object** %locals.addr, align 8
  store %struct._object** %args, %struct._object*** %args.addr, align 8
  store i32 %argcount, i32* %argcount.addr, align 4
  store %struct._object** %kws, %struct._object*** %kws.addr, align 8
  store i32 %kwcount, i32* %kwcount.addr, align 4
  store %struct._object** %defs, %struct._object*** %defs.addr, align 8
  store i32 %defcount, i32* %defcount.addr, align 4
  store %struct._object* %kwdefs, %struct._object** %kwdefs.addr, align 8
  store %struct._object* %closure, %struct._object** %closure.addr, align 8
  %0 = load %struct._object*, %struct._object** %_co.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyCodeObject*
  store %struct.PyCodeObject* %1, %struct.PyCodeObject** %co, align 8
  store %struct._object* null, %struct._object** %retval1, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %2, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %3 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %4 = bitcast %struct._Py_atomic_address* %3 to i8*
  %5 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %4, i32 %5)
  %6 = load i32, i32* %order, align 4
  switch i32 %6, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %7 = load i8**, i8*** %volatile_data, align 8
  %8 = load volatile i8*, i8** %7, align 8
  store i8* %8, i8** %result, align 8
  %9 = load i32, i32* %order, align 4
  switch i32 %9, label %sw.default.3 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4

sw.default.3:                                     ; preds = %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.default.3, %sw.bb.2
  %10 = load i8*, i8** %result, align 8
  store i8* %10, i8** %tmp
  %11 = load i8*, i8** %tmp
  %12 = bitcast i8* %11 to %struct._ts*
  store %struct._ts* %12, %struct._ts** %tstate, align 8
  %13 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %13, i32 0, i32 1
  %14 = load i32, i32* %co_argcount, align 4
  %15 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_kwonlyargcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %15, i32 0, i32 2
  %16 = load i32, i32* %co_kwonlyargcount, align 4
  %add = add i32 %14, %16
  store i32 %add, i32* %total_args, align 4
  %17 = load i32, i32* %argcount.addr, align 4
  store i32 %17, i32* %n, align 4
  store %struct._object* null, %struct._object** %kwdict, align 8
  %18 = load %struct._object*, %struct._object** %globals.addr, align 8
  %cmp = icmp eq %struct._object* %18, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.epilog.4
  %19 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %19, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.35, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %sw.epilog.4
  %20 = load %struct._ts*, %struct._ts** %tstate, align 8
  %21 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %22 = load %struct._object*, %struct._object** %globals.addr, align 8
  %23 = load %struct._object*, %struct._object** %locals.addr, align 8
  %call = call %struct._frame* @PyFrame_New(%struct._ts* %20, %struct.PyCodeObject* %21, %struct._object* %22, %struct._object* %23)
  store %struct._frame* %call, %struct._frame** %f, align 8
  %24 = load %struct._frame*, %struct._frame** %f, align 8
  %cmp11 = icmp eq %struct._frame* %24, null
  br i1 %cmp11, label %if.then.12, label %if.end.13

if.then.12:                                       ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.13:                                        ; preds = %if.end
  %25 = load %struct._frame*, %struct._frame** %f, align 8
  %f_localsplus = getelementptr inbounds %struct._frame, %struct._frame* %25, i32 0, i32 18
  %arraydecay = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus, i32 0, i32 0
  store %struct._object** %arraydecay, %struct._object*** %fastlocals, align 8
  %26 = load %struct._frame*, %struct._frame** %f, align 8
  %f_localsplus14 = getelementptr inbounds %struct._frame, %struct._frame* %26, i32 0, i32 18
  %arraydecay15 = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus14, i32 0, i32 0
  %27 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_nlocals = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %27, i32 0, i32 3
  %28 = load i32, i32* %co_nlocals, align 4
  %idx.ext = sext i32 %28 to i64
  %add.ptr = getelementptr %struct._object*, %struct._object** %arraydecay15, i64 %idx.ext
  store %struct._object** %add.ptr, %struct._object*** %freevars, align 8
  %29 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %29, i32 0, i32 5
  %30 = load i32, i32* %co_flags, align 4
  %and = and i32 %30, 8
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then.16, label %if.end.42

if.then.16:                                       ; preds = %if.end.13
  %call17 = call %struct._object* @PyDict_New()
  store %struct._object* %call17, %struct._object** %kwdict, align 8
  %31 = load %struct._object*, %struct._object** %kwdict, align 8
  %cmp18 = icmp eq %struct._object* %31, null
  br i1 %cmp18, label %if.then.19, label %if.end.20

if.then.19:                                       ; preds = %if.then.16
  br label %fail

if.end.20:                                        ; preds = %if.then.16
  %32 = load i32, i32* %total_args, align 4
  store i32 %32, i32* %i, align 4
  %33 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags21 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %33, i32 0, i32 5
  %34 = load i32, i32* %co_flags21, align 4
  %and22 = and i32 %34, 4
  %tobool23 = icmp ne i32 %and22, 0
  br i1 %tobool23, label %if.then.24, label %if.end.25

if.then.24:                                       ; preds = %if.end.20
  %35 = load i32, i32* %i, align 4
  %inc = add i32 %35, 1
  store i32 %inc, i32* %i, align 4
  br label %if.end.25

if.end.25:                                        ; preds = %if.then.24, %if.end.20
  br label %do.body

do.body:                                          ; preds = %if.end.25
  %36 = load i32, i32* %i, align 4
  %idxprom = sext i32 %36 to i64
  %37 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %37, i64 %idxprom
  %38 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %38, %struct._object** %tmp27, align 8
  %39 = load %struct._object*, %struct._object** %kwdict, align 8
  %40 = load i32, i32* %i, align 4
  %idxprom28 = sext i32 %40 to i64
  %41 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx29 = getelementptr %struct._object*, %struct._object** %41, i64 %idxprom28
  store %struct._object* %39, %struct._object** %arrayidx29, align 8
  br label %do.body.30

do.body.30:                                       ; preds = %do.body
  %42 = load %struct._object*, %struct._object** %tmp27, align 8
  store %struct._object* %42, %struct._object** %_py_xdecref_tmp, align 8
  %43 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp32 = icmp ne %struct._object* %43, null
  br i1 %cmp32, label %if.then.33, label %if.end.39

if.then.33:                                       ; preds = %do.body.30
  br label %do.body.34

do.body.34:                                       ; preds = %if.then.33
  %44 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %44, %struct._object** %_py_decref_tmp, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 0
  %46 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %46, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp36 = icmp ne i64 %dec, 0
  br i1 %cmp36, label %if.then.37, label %if.else

if.then.37:                                       ; preds = %do.body.34
  br label %if.end.38

if.else:                                          ; preds = %do.body.34
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %47, i32 0, i32 1
  %48 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %48, i32 0, i32 4
  %49 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %49(%struct._object* %50)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else, %if.then.37
  br label %do.end

do.end:                                           ; preds = %if.end.38
  br label %if.end.39

if.end.39:                                        ; preds = %do.end, %do.body.30
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %do.end.41

do.end.41:                                        ; preds = %do.end.40
  br label %if.end.42

if.end.42:                                        ; preds = %do.end.41, %if.end.13
  %51 = load i32, i32* %argcount.addr, align 4
  %52 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount43 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %52, i32 0, i32 1
  %53 = load i32, i32* %co_argcount43, align 4
  %cmp44 = icmp sgt i32 %51, %53
  br i1 %cmp44, label %if.then.45, label %if.end.47

if.then.45:                                       ; preds = %if.end.42
  %54 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount46 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %54, i32 0, i32 1
  %55 = load i32, i32* %co_argcount46, align 4
  store i32 %55, i32* %n, align 4
  br label %if.end.47

if.end.47:                                        ; preds = %if.then.45, %if.end.42
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.47
  %56 = load i32, i32* %i, align 4
  %57 = load i32, i32* %n, align 4
  %cmp48 = icmp slt i32 %56, %57
  br i1 %cmp48, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %58 = load i32, i32* %i, align 4
  %idxprom49 = sext i32 %58 to i64
  %59 = load %struct._object**, %struct._object*** %args.addr, align 8
  %arrayidx50 = getelementptr %struct._object*, %struct._object** %59, i64 %idxprom49
  %60 = load %struct._object*, %struct._object** %arrayidx50, align 8
  store %struct._object* %60, %struct._object** %x, align 8
  %61 = load %struct._object*, %struct._object** %x, align 8
  %ob_refcnt51 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt51, align 8
  %inc52 = add i64 %62, 1
  store i64 %inc52, i64* %ob_refcnt51, align 8
  br label %do.body.53

do.body.53:                                       ; preds = %for.body
  %63 = load i32, i32* %i, align 4
  %idxprom56 = sext i32 %63 to i64
  %64 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx57 = getelementptr %struct._object*, %struct._object** %64, i64 %idxprom56
  %65 = load %struct._object*, %struct._object** %arrayidx57, align 8
  store %struct._object* %65, %struct._object** %tmp55, align 8
  %66 = load %struct._object*, %struct._object** %x, align 8
  %67 = load i32, i32* %i, align 4
  %idxprom58 = sext i32 %67 to i64
  %68 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx59 = getelementptr %struct._object*, %struct._object** %68, i64 %idxprom58
  store %struct._object* %66, %struct._object** %arrayidx59, align 8
  br label %do.body.60

do.body.60:                                       ; preds = %do.body.53
  %69 = load %struct._object*, %struct._object** %tmp55, align 8
  store %struct._object* %69, %struct._object** %_py_xdecref_tmp62, align 8
  %70 = load %struct._object*, %struct._object** %_py_xdecref_tmp62, align 8
  %cmp63 = icmp ne %struct._object* %70, null
  br i1 %cmp63, label %if.then.64, label %if.end.77

if.then.64:                                       ; preds = %do.body.60
  br label %do.body.65

do.body.65:                                       ; preds = %if.then.64
  %71 = load %struct._object*, %struct._object** %_py_xdecref_tmp62, align 8
  store %struct._object* %71, %struct._object** %_py_decref_tmp67, align 8
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_refcnt68 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 0
  %73 = load i64, i64* %ob_refcnt68, align 8
  %dec69 = add i64 %73, -1
  store i64 %dec69, i64* %ob_refcnt68, align 8
  %cmp70 = icmp ne i64 %dec69, 0
  br i1 %cmp70, label %if.then.71, label %if.else.72

if.then.71:                                       ; preds = %do.body.65
  br label %if.end.75

if.else.72:                                       ; preds = %do.body.65
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  %ob_type73 = getelementptr inbounds %struct._object, %struct._object* %74, i32 0, i32 1
  %75 = load %struct._typeobject*, %struct._typeobject** %ob_type73, align 8
  %tp_dealloc74 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %75, i32 0, i32 4
  %76 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc74, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp67, align 8
  call void %76(%struct._object* %77)
  br label %if.end.75

if.end.75:                                        ; preds = %if.else.72, %if.then.71
  br label %do.end.76

do.end.76:                                        ; preds = %if.end.75
  br label %if.end.77

if.end.77:                                        ; preds = %do.end.76, %do.body.60
  br label %do.end.78

do.end.78:                                        ; preds = %if.end.77
  br label %do.end.79

do.end.79:                                        ; preds = %do.end.78
  br label %for.inc

for.inc:                                          ; preds = %do.end.79
  %78 = load i32, i32* %i, align 4
  %inc80 = add i32 %78, 1
  store i32 %inc80, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %79 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags81 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %79, i32 0, i32 5
  %80 = load i32, i32* %co_flags81, align 4
  %and82 = and i32 %80, 4
  %tobool83 = icmp ne i32 %and82, 0
  br i1 %tobool83, label %if.then.84, label %if.end.133

if.then.84:                                       ; preds = %for.end
  %81 = load i32, i32* %argcount.addr, align 4
  %82 = load i32, i32* %n, align 4
  %sub = sub i32 %81, %82
  %conv = sext i32 %sub to i64
  %call85 = call %struct._object* @PyTuple_New(i64 %conv)
  store %struct._object* %call85, %struct._object** %u, align 8
  %83 = load %struct._object*, %struct._object** %u, align 8
  %cmp86 = icmp eq %struct._object* %83, null
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.then.84
  br label %fail

if.end.89:                                        ; preds = %if.then.84
  br label %do.body.90

do.body.90:                                       ; preds = %if.end.89
  %84 = load i32, i32* %total_args, align 4
  %idxprom93 = sext i32 %84 to i64
  %85 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx94 = getelementptr %struct._object*, %struct._object** %85, i64 %idxprom93
  %86 = load %struct._object*, %struct._object** %arrayidx94, align 8
  store %struct._object* %86, %struct._object** %tmp92, align 8
  %87 = load %struct._object*, %struct._object** %u, align 8
  %88 = load i32, i32* %total_args, align 4
  %idxprom95 = sext i32 %88 to i64
  %89 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx96 = getelementptr %struct._object*, %struct._object** %89, i64 %idxprom95
  store %struct._object* %87, %struct._object** %arrayidx96, align 8
  br label %do.body.97

do.body.97:                                       ; preds = %do.body.90
  %90 = load %struct._object*, %struct._object** %tmp92, align 8
  store %struct._object* %90, %struct._object** %_py_xdecref_tmp99, align 8
  %91 = load %struct._object*, %struct._object** %_py_xdecref_tmp99, align 8
  %cmp100 = icmp ne %struct._object* %91, null
  br i1 %cmp100, label %if.then.102, label %if.end.116

if.then.102:                                      ; preds = %do.body.97
  br label %do.body.103

do.body.103:                                      ; preds = %if.then.102
  %92 = load %struct._object*, %struct._object** %_py_xdecref_tmp99, align 8
  store %struct._object* %92, %struct._object** %_py_decref_tmp105, align 8
  %93 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_refcnt106 = getelementptr inbounds %struct._object, %struct._object* %93, i32 0, i32 0
  %94 = load i64, i64* %ob_refcnt106, align 8
  %dec107 = add i64 %94, -1
  store i64 %dec107, i64* %ob_refcnt106, align 8
  %cmp108 = icmp ne i64 %dec107, 0
  br i1 %cmp108, label %if.then.110, label %if.else.111

if.then.110:                                      ; preds = %do.body.103
  br label %if.end.114

if.else.111:                                      ; preds = %do.body.103
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  %ob_type112 = getelementptr inbounds %struct._object, %struct._object* %95, i32 0, i32 1
  %96 = load %struct._typeobject*, %struct._typeobject** %ob_type112, align 8
  %tp_dealloc113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %96, i32 0, i32 4
  %97 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc113, align 8
  %98 = load %struct._object*, %struct._object** %_py_decref_tmp105, align 8
  call void %97(%struct._object* %98)
  br label %if.end.114

if.end.114:                                       ; preds = %if.else.111, %if.then.110
  br label %do.end.115

do.end.115:                                       ; preds = %if.end.114
  br label %if.end.116

if.end.116:                                       ; preds = %do.end.115, %do.body.97
  br label %do.end.117

do.end.117:                                       ; preds = %if.end.116
  br label %do.end.118

do.end.118:                                       ; preds = %do.end.117
  %99 = load i32, i32* %n, align 4
  store i32 %99, i32* %i, align 4
  br label %for.cond.119

for.cond.119:                                     ; preds = %for.inc.130, %do.end.118
  %100 = load i32, i32* %i, align 4
  %101 = load i32, i32* %argcount.addr, align 4
  %cmp120 = icmp slt i32 %100, %101
  br i1 %cmp120, label %for.body.122, label %for.end.132

for.body.122:                                     ; preds = %for.cond.119
  %102 = load i32, i32* %i, align 4
  %idxprom123 = sext i32 %102 to i64
  %103 = load %struct._object**, %struct._object*** %args.addr, align 8
  %arrayidx124 = getelementptr %struct._object*, %struct._object** %103, i64 %idxprom123
  %104 = load %struct._object*, %struct._object** %arrayidx124, align 8
  store %struct._object* %104, %struct._object** %x, align 8
  %105 = load %struct._object*, %struct._object** %x, align 8
  %ob_refcnt125 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 0
  %106 = load i64, i64* %ob_refcnt125, align 8
  %inc126 = add i64 %106, 1
  store i64 %inc126, i64* %ob_refcnt125, align 8
  %107 = load %struct._object*, %struct._object** %x, align 8
  %108 = load i32, i32* %i, align 4
  %109 = load i32, i32* %n, align 4
  %sub127 = sub i32 %108, %109
  %idxprom128 = sext i32 %sub127 to i64
  %110 = load %struct._object*, %struct._object** %u, align 8
  %111 = bitcast %struct._object* %110 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %111, i32 0, i32 1
  %arrayidx129 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom128
  store %struct._object* %107, %struct._object** %arrayidx129, align 8
  br label %for.inc.130

for.inc.130:                                      ; preds = %for.body.122
  %112 = load i32, i32* %i, align 4
  %inc131 = add i32 %112, 1
  store i32 %inc131, i32* %i, align 4
  br label %for.cond.119

for.end.132:                                      ; preds = %for.cond.119
  br label %if.end.133

if.end.133:                                       ; preds = %for.end.132, %for.end
  store i32 0, i32* %i, align 4
  br label %for.cond.134

for.cond.134:                                     ; preds = %for.inc.249, %if.end.133
  %113 = load i32, i32* %i, align 4
  %114 = load i32, i32* %kwcount.addr, align 4
  %cmp135 = icmp slt i32 %113, %114
  br i1 %cmp135, label %for.body.137, label %for.end.251

for.body.137:                                     ; preds = %for.cond.134
  %115 = load i32, i32* %i, align 4
  %mul = mul i32 2, %115
  %idxprom140 = sext i32 %mul to i64
  %116 = load %struct._object**, %struct._object*** %kws.addr, align 8
  %arrayidx141 = getelementptr %struct._object*, %struct._object** %116, i64 %idxprom140
  %117 = load %struct._object*, %struct._object** %arrayidx141, align 8
  store %struct._object* %117, %struct._object** %keyword, align 8
  %118 = load i32, i32* %i, align 4
  %mul143 = mul i32 2, %118
  %add144 = add i32 %mul143, 1
  %idxprom145 = sext i32 %add144 to i64
  %119 = load %struct._object**, %struct._object*** %kws.addr, align 8
  %arrayidx146 = getelementptr %struct._object*, %struct._object** %119, i64 %idxprom145
  %120 = load %struct._object*, %struct._object** %arrayidx146, align 8
  store %struct._object* %120, %struct._object** %value, align 8
  %121 = load %struct._object*, %struct._object** %keyword, align 8
  %cmp148 = icmp eq %struct._object* %121, null
  br i1 %cmp148, label %if.then.154, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body.137
  %122 = load %struct._object*, %struct._object** %keyword, align 8
  %ob_type150 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 1
  %123 = load %struct._typeobject*, %struct._typeobject** %ob_type150, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %123, i32 0, i32 19
  %124 = load i64, i64* %tp_flags, align 8
  %and151 = and i64 %124, 268435456
  %cmp152 = icmp ne i64 %and151, 0
  br i1 %cmp152, label %if.end.156, label %if.then.154

if.then.154:                                      ; preds = %lor.lhs.false, %for.body.137
  %125 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %126 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_name = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %126, i32 0, i32 14
  %127 = load %struct._object*, %struct._object** %co_name, align 8
  %call155 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %125, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.36, i32 0, i32 0), %struct._object* %127)
  br label %fail

if.end.156:                                       ; preds = %lor.lhs.false
  %128 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_varnames157 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %128, i32 0, i32 9
  %129 = load %struct._object*, %struct._object** %co_varnames157, align 8
  %130 = bitcast %struct._object* %129 to %struct.PyTupleObject*
  %ob_item158 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %130, i32 0, i32 1
  %arraydecay159 = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %ob_item158, i32 0, i32 0
  store %struct._object** %arraydecay159, %struct._object*** %co_varnames, align 8
  store i32 0, i32* %j, align 4
  br label %for.cond.160

for.cond.160:                                     ; preds = %for.inc.171, %if.end.156
  %131 = load i32, i32* %j, align 4
  %132 = load i32, i32* %total_args, align 4
  %cmp161 = icmp slt i32 %131, %132
  br i1 %cmp161, label %for.body.163, label %for.end.173

for.body.163:                                     ; preds = %for.cond.160
  %133 = load i32, i32* %j, align 4
  %idxprom165 = sext i32 %133 to i64
  %134 = load %struct._object**, %struct._object*** %co_varnames, align 8
  %arrayidx166 = getelementptr %struct._object*, %struct._object** %134, i64 %idxprom165
  %135 = load %struct._object*, %struct._object** %arrayidx166, align 8
  store %struct._object* %135, %struct._object** %nm, align 8
  %136 = load %struct._object*, %struct._object** %nm, align 8
  %137 = load %struct._object*, %struct._object** %keyword, align 8
  %cmp167 = icmp eq %struct._object* %136, %137
  br i1 %cmp167, label %if.then.169, label %if.end.170

if.then.169:                                      ; preds = %for.body.163
  br label %kw_found

if.end.170:                                       ; preds = %for.body.163
  br label %for.inc.171

for.inc.171:                                      ; preds = %if.end.170
  %138 = load i32, i32* %j, align 4
  %inc172 = add i32 %138, 1
  store i32 %inc172, i32* %j, align 4
  br label %for.cond.160

for.end.173:                                      ; preds = %for.cond.160
  store i32 0, i32* %j, align 4
  br label %for.cond.174

for.cond.174:                                     ; preds = %for.inc.194, %for.end.173
  %139 = load i32, i32* %j, align 4
  %140 = load i32, i32* %total_args, align 4
  %cmp175 = icmp slt i32 %139, %140
  br i1 %cmp175, label %for.body.177, label %for.end.196

for.body.177:                                     ; preds = %for.cond.174
  %141 = load i32, i32* %j, align 4
  %idxprom180 = sext i32 %141 to i64
  %142 = load %struct._object**, %struct._object*** %co_varnames, align 8
  %arrayidx181 = getelementptr %struct._object*, %struct._object** %142, i64 %idxprom180
  %143 = load %struct._object*, %struct._object** %arrayidx181, align 8
  store %struct._object* %143, %struct._object** %nm179, align 8
  %144 = load %struct._object*, %struct._object** %keyword, align 8
  %145 = load %struct._object*, %struct._object** %nm179, align 8
  %call184 = call i32 @PyObject_RichCompareBool(%struct._object* %144, %struct._object* %145, i32 2)
  store i32 %call184, i32* %cmp183, align 4
  %146 = load i32, i32* %cmp183, align 4
  %cmp185 = icmp sgt i32 %146, 0
  br i1 %cmp185, label %if.then.187, label %if.else.188

if.then.187:                                      ; preds = %for.body.177
  br label %kw_found

if.else.188:                                      ; preds = %for.body.177
  %147 = load i32, i32* %cmp183, align 4
  %cmp189 = icmp slt i32 %147, 0
  br i1 %cmp189, label %if.then.191, label %if.end.192

if.then.191:                                      ; preds = %if.else.188
  br label %fail

if.end.192:                                       ; preds = %if.else.188
  br label %if.end.193

if.end.193:                                       ; preds = %if.end.192
  br label %for.inc.194

for.inc.194:                                      ; preds = %if.end.193
  %148 = load i32, i32* %j, align 4
  %inc195 = add i32 %148, 1
  store i32 %inc195, i32* %j, align 4
  br label %for.cond.174

for.end.196:                                      ; preds = %for.cond.174
  %149 = load i32, i32* %j, align 4
  %150 = load i32, i32* %total_args, align 4
  %cmp197 = icmp sge i32 %149, %150
  br i1 %cmp197, label %land.lhs.true, label %if.end.204

land.lhs.true:                                    ; preds = %for.end.196
  %151 = load %struct._object*, %struct._object** %kwdict, align 8
  %cmp199 = icmp eq %struct._object* %151, null
  br i1 %cmp199, label %if.then.201, label %if.end.204

if.then.201:                                      ; preds = %land.lhs.true
  %152 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %153 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_name202 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %153, i32 0, i32 14
  %154 = load %struct._object*, %struct._object** %co_name202, align 8
  %155 = load %struct._object*, %struct._object** %keyword, align 8
  %call203 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %152, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.37, i32 0, i32 0), %struct._object* %154, %struct._object* %155)
  br label %fail

if.end.204:                                       ; preds = %land.lhs.true, %for.end.196
  %156 = load %struct._object*, %struct._object** %kwdict, align 8
  %157 = load %struct._object*, %struct._object** %keyword, align 8
  %158 = load %struct._object*, %struct._object** %value, align 8
  %call205 = call i32 @PyDict_SetItem(%struct._object* %156, %struct._object* %157, %struct._object* %158)
  %cmp206 = icmp eq i32 %call205, -1
  br i1 %cmp206, label %if.then.208, label %if.end.209

if.then.208:                                      ; preds = %if.end.204
  br label %fail

if.end.209:                                       ; preds = %if.end.204
  br label %for.inc.249

kw_found:                                         ; preds = %if.then.187, %if.then.169
  %159 = load i32, i32* %j, align 4
  %idxprom210 = sext i32 %159 to i64
  %160 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx211 = getelementptr %struct._object*, %struct._object** %160, i64 %idxprom210
  %161 = load %struct._object*, %struct._object** %arrayidx211, align 8
  %cmp212 = icmp ne %struct._object* %161, null
  br i1 %cmp212, label %if.then.214, label %if.end.217

if.then.214:                                      ; preds = %kw_found
  %162 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %163 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_name215 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %163, i32 0, i32 14
  %164 = load %struct._object*, %struct._object** %co_name215, align 8
  %165 = load %struct._object*, %struct._object** %keyword, align 8
  %call216 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %162, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.38, i32 0, i32 0), %struct._object* %164, %struct._object* %165)
  br label %fail

if.end.217:                                       ; preds = %kw_found
  %166 = load %struct._object*, %struct._object** %value, align 8
  %ob_refcnt218 = getelementptr inbounds %struct._object, %struct._object* %166, i32 0, i32 0
  %167 = load i64, i64* %ob_refcnt218, align 8
  %inc219 = add i64 %167, 1
  store i64 %inc219, i64* %ob_refcnt218, align 8
  br label %do.body.220

do.body.220:                                      ; preds = %if.end.217
  %168 = load i32, i32* %j, align 4
  %idxprom223 = sext i32 %168 to i64
  %169 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx224 = getelementptr %struct._object*, %struct._object** %169, i64 %idxprom223
  %170 = load %struct._object*, %struct._object** %arrayidx224, align 8
  store %struct._object* %170, %struct._object** %tmp222, align 8
  %171 = load %struct._object*, %struct._object** %value, align 8
  %172 = load i32, i32* %j, align 4
  %idxprom225 = sext i32 %172 to i64
  %173 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx226 = getelementptr %struct._object*, %struct._object** %173, i64 %idxprom225
  store %struct._object* %171, %struct._object** %arrayidx226, align 8
  br label %do.body.227

do.body.227:                                      ; preds = %do.body.220
  %174 = load %struct._object*, %struct._object** %tmp222, align 8
  store %struct._object* %174, %struct._object** %_py_xdecref_tmp229, align 8
  %175 = load %struct._object*, %struct._object** %_py_xdecref_tmp229, align 8
  %cmp230 = icmp ne %struct._object* %175, null
  br i1 %cmp230, label %if.then.232, label %if.end.246

if.then.232:                                      ; preds = %do.body.227
  br label %do.body.233

do.body.233:                                      ; preds = %if.then.232
  %176 = load %struct._object*, %struct._object** %_py_xdecref_tmp229, align 8
  store %struct._object* %176, %struct._object** %_py_decref_tmp235, align 8
  %177 = load %struct._object*, %struct._object** %_py_decref_tmp235, align 8
  %ob_refcnt236 = getelementptr inbounds %struct._object, %struct._object* %177, i32 0, i32 0
  %178 = load i64, i64* %ob_refcnt236, align 8
  %dec237 = add i64 %178, -1
  store i64 %dec237, i64* %ob_refcnt236, align 8
  %cmp238 = icmp ne i64 %dec237, 0
  br i1 %cmp238, label %if.then.240, label %if.else.241

if.then.240:                                      ; preds = %do.body.233
  br label %if.end.244

if.else.241:                                      ; preds = %do.body.233
  %179 = load %struct._object*, %struct._object** %_py_decref_tmp235, align 8
  %ob_type242 = getelementptr inbounds %struct._object, %struct._object* %179, i32 0, i32 1
  %180 = load %struct._typeobject*, %struct._typeobject** %ob_type242, align 8
  %tp_dealloc243 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %180, i32 0, i32 4
  %181 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc243, align 8
  %182 = load %struct._object*, %struct._object** %_py_decref_tmp235, align 8
  call void %181(%struct._object* %182)
  br label %if.end.244

if.end.244:                                       ; preds = %if.else.241, %if.then.240
  br label %do.end.245

do.end.245:                                       ; preds = %if.end.244
  br label %if.end.246

if.end.246:                                       ; preds = %do.end.245, %do.body.227
  br label %do.end.247

do.end.247:                                       ; preds = %if.end.246
  br label %do.end.248

do.end.248:                                       ; preds = %do.end.247
  br label %for.inc.249

for.inc.249:                                      ; preds = %do.end.248, %if.end.209
  %183 = load i32, i32* %i, align 4
  %inc250 = add i32 %183, 1
  store i32 %inc250, i32* %i, align 4
  br label %for.cond.134

for.end.251:                                      ; preds = %for.cond.134
  %184 = load i32, i32* %argcount.addr, align 4
  %185 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount252 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %185, i32 0, i32 1
  %186 = load i32, i32* %co_argcount252, align 4
  %cmp253 = icmp sgt i32 %184, %186
  br i1 %cmp253, label %land.lhs.true.255, label %if.end.260

land.lhs.true.255:                                ; preds = %for.end.251
  %187 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags256 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %187, i32 0, i32 5
  %188 = load i32, i32* %co_flags256, align 4
  %and257 = and i32 %188, 4
  %tobool258 = icmp ne i32 %and257, 0
  br i1 %tobool258, label %if.end.260, label %if.then.259

if.then.259:                                      ; preds = %land.lhs.true.255
  %189 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %190 = load i32, i32* %argcount.addr, align 4
  %191 = load i32, i32* %defcount.addr, align 4
  %192 = load %struct._object**, %struct._object*** %fastlocals, align 8
  call void @too_many_positional(%struct.PyCodeObject* %189, i32 %190, i32 %191, %struct._object** %192)
  br label %fail

if.end.260:                                       ; preds = %land.lhs.true.255, %for.end.251
  %193 = load i32, i32* %argcount.addr, align 4
  %194 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount261 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %194, i32 0, i32 1
  %195 = load i32, i32* %co_argcount261, align 4
  %cmp262 = icmp slt i32 %193, %195
  br i1 %cmp262, label %if.then.264, label %if.end.342

if.then.264:                                      ; preds = %if.end.260
  %196 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount266 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %196, i32 0, i32 1
  %197 = load i32, i32* %co_argcount266, align 4
  %198 = load i32, i32* %defcount.addr, align 4
  %sub267 = sub i32 %197, %198
  store i32 %sub267, i32* %m, align 4
  store i32 0, i32* %missing, align 4
  %199 = load i32, i32* %argcount.addr, align 4
  store i32 %199, i32* %i, align 4
  br label %for.cond.269

for.cond.269:                                     ; preds = %for.inc.280, %if.then.264
  %200 = load i32, i32* %i, align 4
  %201 = load i32, i32* %m, align 4
  %cmp270 = icmp slt i32 %200, %201
  br i1 %cmp270, label %for.body.272, label %for.end.282

for.body.272:                                     ; preds = %for.cond.269
  %202 = load i32, i32* %i, align 4
  %idxprom273 = sext i32 %202 to i64
  %203 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx274 = getelementptr %struct._object*, %struct._object** %203, i64 %idxprom273
  %204 = load %struct._object*, %struct._object** %arrayidx274, align 8
  %cmp275 = icmp eq %struct._object* %204, null
  br i1 %cmp275, label %if.then.277, label %if.end.279

if.then.277:                                      ; preds = %for.body.272
  %205 = load i32, i32* %missing, align 4
  %inc278 = add i32 %205, 1
  store i32 %inc278, i32* %missing, align 4
  br label %if.end.279

if.end.279:                                       ; preds = %if.then.277, %for.body.272
  br label %for.inc.280

for.inc.280:                                      ; preds = %if.end.279
  %206 = load i32, i32* %i, align 4
  %inc281 = add i32 %206, 1
  store i32 %inc281, i32* %i, align 4
  br label %for.cond.269

for.end.282:                                      ; preds = %for.cond.269
  %207 = load i32, i32* %missing, align 4
  %tobool283 = icmp ne i32 %207, 0
  br i1 %tobool283, label %if.then.284, label %if.end.285

if.then.284:                                      ; preds = %for.end.282
  %208 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %209 = load i32, i32* %missing, align 4
  %210 = load i32, i32* %defcount.addr, align 4
  %211 = load %struct._object**, %struct._object*** %fastlocals, align 8
  call void @missing_arguments(%struct.PyCodeObject* %208, i32 %209, i32 %210, %struct._object** %211)
  br label %fail

if.end.285:                                       ; preds = %for.end.282
  %212 = load i32, i32* %n, align 4
  %213 = load i32, i32* %m, align 4
  %cmp286 = icmp sgt i32 %212, %213
  br i1 %cmp286, label %if.then.288, label %if.else.290

if.then.288:                                      ; preds = %if.end.285
  %214 = load i32, i32* %n, align 4
  %215 = load i32, i32* %m, align 4
  %sub289 = sub i32 %214, %215
  store i32 %sub289, i32* %i, align 4
  br label %if.end.291

if.else.290:                                      ; preds = %if.end.285
  store i32 0, i32* %i, align 4
  br label %if.end.291

if.end.291:                                       ; preds = %if.else.290, %if.then.288
  br label %for.cond.292

for.cond.292:                                     ; preds = %for.inc.339, %if.end.291
  %216 = load i32, i32* %i, align 4
  %217 = load i32, i32* %defcount.addr, align 4
  %cmp293 = icmp slt i32 %216, %217
  br i1 %cmp293, label %for.body.295, label %for.end.341

for.body.295:                                     ; preds = %for.cond.292
  %218 = load i32, i32* %m, align 4
  %219 = load i32, i32* %i, align 4
  %add296 = add i32 %218, %219
  %idxprom297 = sext i32 %add296 to i64
  %220 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx298 = getelementptr %struct._object*, %struct._object** %220, i64 %idxprom297
  %221 = load %struct._object*, %struct._object** %arrayidx298, align 8
  %cmp299 = icmp eq %struct._object* %221, null
  br i1 %cmp299, label %if.then.301, label %if.end.338

if.then.301:                                      ; preds = %for.body.295
  %222 = load i32, i32* %i, align 4
  %idxprom303 = sext i32 %222 to i64
  %223 = load %struct._object**, %struct._object*** %defs.addr, align 8
  %arrayidx304 = getelementptr %struct._object*, %struct._object** %223, i64 %idxprom303
  %224 = load %struct._object*, %struct._object** %arrayidx304, align 8
  store %struct._object* %224, %struct._object** %def, align 8
  %225 = load %struct._object*, %struct._object** %def, align 8
  %ob_refcnt305 = getelementptr inbounds %struct._object, %struct._object* %225, i32 0, i32 0
  %226 = load i64, i64* %ob_refcnt305, align 8
  %inc306 = add i64 %226, 1
  store i64 %inc306, i64* %ob_refcnt305, align 8
  br label %do.body.307

do.body.307:                                      ; preds = %if.then.301
  %227 = load i32, i32* %m, align 4
  %228 = load i32, i32* %i, align 4
  %add310 = add i32 %227, %228
  %idxprom311 = sext i32 %add310 to i64
  %229 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx312 = getelementptr %struct._object*, %struct._object** %229, i64 %idxprom311
  %230 = load %struct._object*, %struct._object** %arrayidx312, align 8
  store %struct._object* %230, %struct._object** %tmp309, align 8
  %231 = load %struct._object*, %struct._object** %def, align 8
  %232 = load i32, i32* %m, align 4
  %233 = load i32, i32* %i, align 4
  %add313 = add i32 %232, %233
  %idxprom314 = sext i32 %add313 to i64
  %234 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx315 = getelementptr %struct._object*, %struct._object** %234, i64 %idxprom314
  store %struct._object* %231, %struct._object** %arrayidx315, align 8
  br label %do.body.316

do.body.316:                                      ; preds = %do.body.307
  %235 = load %struct._object*, %struct._object** %tmp309, align 8
  store %struct._object* %235, %struct._object** %_py_xdecref_tmp318, align 8
  %236 = load %struct._object*, %struct._object** %_py_xdecref_tmp318, align 8
  %cmp319 = icmp ne %struct._object* %236, null
  br i1 %cmp319, label %if.then.321, label %if.end.335

if.then.321:                                      ; preds = %do.body.316
  br label %do.body.322

do.body.322:                                      ; preds = %if.then.321
  %237 = load %struct._object*, %struct._object** %_py_xdecref_tmp318, align 8
  store %struct._object* %237, %struct._object** %_py_decref_tmp324, align 8
  %238 = load %struct._object*, %struct._object** %_py_decref_tmp324, align 8
  %ob_refcnt325 = getelementptr inbounds %struct._object, %struct._object* %238, i32 0, i32 0
  %239 = load i64, i64* %ob_refcnt325, align 8
  %dec326 = add i64 %239, -1
  store i64 %dec326, i64* %ob_refcnt325, align 8
  %cmp327 = icmp ne i64 %dec326, 0
  br i1 %cmp327, label %if.then.329, label %if.else.330

if.then.329:                                      ; preds = %do.body.322
  br label %if.end.333

if.else.330:                                      ; preds = %do.body.322
  %240 = load %struct._object*, %struct._object** %_py_decref_tmp324, align 8
  %ob_type331 = getelementptr inbounds %struct._object, %struct._object* %240, i32 0, i32 1
  %241 = load %struct._typeobject*, %struct._typeobject** %ob_type331, align 8
  %tp_dealloc332 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %241, i32 0, i32 4
  %242 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc332, align 8
  %243 = load %struct._object*, %struct._object** %_py_decref_tmp324, align 8
  call void %242(%struct._object* %243)
  br label %if.end.333

if.end.333:                                       ; preds = %if.else.330, %if.then.329
  br label %do.end.334

do.end.334:                                       ; preds = %if.end.333
  br label %if.end.335

if.end.335:                                       ; preds = %do.end.334, %do.body.316
  br label %do.end.336

do.end.336:                                       ; preds = %if.end.335
  br label %do.end.337

do.end.337:                                       ; preds = %do.end.336
  br label %if.end.338

if.end.338:                                       ; preds = %do.end.337, %for.body.295
  br label %for.inc.339

for.inc.339:                                      ; preds = %if.end.338
  %244 = load i32, i32* %i, align 4
  %inc340 = add i32 %244, 1
  store i32 %inc340, i32* %i, align 4
  br label %for.cond.292

for.end.341:                                      ; preds = %for.cond.292
  br label %if.end.342

if.end.342:                                       ; preds = %for.end.341, %if.end.260
  %245 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_kwonlyargcount343 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %245, i32 0, i32 2
  %246 = load i32, i32* %co_kwonlyargcount343, align 4
  %cmp344 = icmp sgt i32 %246, 0
  br i1 %cmp344, label %if.then.346, label %if.end.413

if.then.346:                                      ; preds = %if.end.342
  store i32 0, i32* %missing348, align 4
  %247 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount349 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %247, i32 0, i32 1
  %248 = load i32, i32* %co_argcount349, align 4
  store i32 %248, i32* %i, align 4
  br label %for.cond.350

for.cond.350:                                     ; preds = %for.inc.407, %if.then.346
  %249 = load i32, i32* %i, align 4
  %250 = load i32, i32* %total_args, align 4
  %cmp351 = icmp slt i32 %249, %250
  br i1 %cmp351, label %for.body.353, label %for.end.409

for.body.353:                                     ; preds = %for.cond.350
  %251 = load i32, i32* %i, align 4
  %idxprom355 = sext i32 %251 to i64
  %252 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx356 = getelementptr %struct._object*, %struct._object** %252, i64 %idxprom355
  %253 = load %struct._object*, %struct._object** %arrayidx356, align 8
  %cmp357 = icmp ne %struct._object* %253, null
  br i1 %cmp357, label %if.then.359, label %if.end.360

if.then.359:                                      ; preds = %for.body.353
  br label %for.inc.407

if.end.360:                                       ; preds = %for.body.353
  %254 = load i32, i32* %i, align 4
  %idxprom361 = sext i32 %254 to i64
  %255 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_varnames362 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %255, i32 0, i32 9
  %256 = load %struct._object*, %struct._object** %co_varnames362, align 8
  %257 = bitcast %struct._object* %256 to %struct.PyTupleObject*
  %ob_item363 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %257, i32 0, i32 1
  %arrayidx364 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item363, i32 0, i64 %idxprom361
  %258 = load %struct._object*, %struct._object** %arrayidx364, align 8
  store %struct._object* %258, %struct._object** %name, align 8
  %259 = load %struct._object*, %struct._object** %kwdefs.addr, align 8
  %cmp365 = icmp ne %struct._object* %259, null
  br i1 %cmp365, label %if.then.367, label %if.end.405

if.then.367:                                      ; preds = %if.end.360
  %260 = load %struct._object*, %struct._object** %kwdefs.addr, align 8
  %261 = load %struct._object*, %struct._object** %name, align 8
  %call370 = call %struct._object* @PyDict_GetItem(%struct._object* %260, %struct._object* %261)
  store %struct._object* %call370, %struct._object** %def369, align 8
  %262 = load %struct._object*, %struct._object** %def369, align 8
  %tobool371 = icmp ne %struct._object* %262, null
  br i1 %tobool371, label %if.then.372, label %if.end.404

if.then.372:                                      ; preds = %if.then.367
  %263 = load %struct._object*, %struct._object** %def369, align 8
  %ob_refcnt373 = getelementptr inbounds %struct._object, %struct._object* %263, i32 0, i32 0
  %264 = load i64, i64* %ob_refcnt373, align 8
  %inc374 = add i64 %264, 1
  store i64 %inc374, i64* %ob_refcnt373, align 8
  br label %do.body.375

do.body.375:                                      ; preds = %if.then.372
  %265 = load i32, i32* %i, align 4
  %idxprom378 = sext i32 %265 to i64
  %266 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx379 = getelementptr %struct._object*, %struct._object** %266, i64 %idxprom378
  %267 = load %struct._object*, %struct._object** %arrayidx379, align 8
  store %struct._object* %267, %struct._object** %tmp377, align 8
  %268 = load %struct._object*, %struct._object** %def369, align 8
  %269 = load i32, i32* %i, align 4
  %idxprom380 = sext i32 %269 to i64
  %270 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx381 = getelementptr %struct._object*, %struct._object** %270, i64 %idxprom380
  store %struct._object* %268, %struct._object** %arrayidx381, align 8
  br label %do.body.382

do.body.382:                                      ; preds = %do.body.375
  %271 = load %struct._object*, %struct._object** %tmp377, align 8
  store %struct._object* %271, %struct._object** %_py_xdecref_tmp384, align 8
  %272 = load %struct._object*, %struct._object** %_py_xdecref_tmp384, align 8
  %cmp385 = icmp ne %struct._object* %272, null
  br i1 %cmp385, label %if.then.387, label %if.end.401

if.then.387:                                      ; preds = %do.body.382
  br label %do.body.388

do.body.388:                                      ; preds = %if.then.387
  %273 = load %struct._object*, %struct._object** %_py_xdecref_tmp384, align 8
  store %struct._object* %273, %struct._object** %_py_decref_tmp390, align 8
  %274 = load %struct._object*, %struct._object** %_py_decref_tmp390, align 8
  %ob_refcnt391 = getelementptr inbounds %struct._object, %struct._object* %274, i32 0, i32 0
  %275 = load i64, i64* %ob_refcnt391, align 8
  %dec392 = add i64 %275, -1
  store i64 %dec392, i64* %ob_refcnt391, align 8
  %cmp393 = icmp ne i64 %dec392, 0
  br i1 %cmp393, label %if.then.395, label %if.else.396

if.then.395:                                      ; preds = %do.body.388
  br label %if.end.399

if.else.396:                                      ; preds = %do.body.388
  %276 = load %struct._object*, %struct._object** %_py_decref_tmp390, align 8
  %ob_type397 = getelementptr inbounds %struct._object, %struct._object* %276, i32 0, i32 1
  %277 = load %struct._typeobject*, %struct._typeobject** %ob_type397, align 8
  %tp_dealloc398 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %277, i32 0, i32 4
  %278 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc398, align 8
  %279 = load %struct._object*, %struct._object** %_py_decref_tmp390, align 8
  call void %278(%struct._object* %279)
  br label %if.end.399

if.end.399:                                       ; preds = %if.else.396, %if.then.395
  br label %do.end.400

do.end.400:                                       ; preds = %if.end.399
  br label %if.end.401

if.end.401:                                       ; preds = %do.end.400, %do.body.382
  br label %do.end.402

do.end.402:                                       ; preds = %if.end.401
  br label %do.end.403

do.end.403:                                       ; preds = %do.end.402
  br label %for.inc.407

if.end.404:                                       ; preds = %if.then.367
  br label %if.end.405

if.end.405:                                       ; preds = %if.end.404, %if.end.360
  %280 = load i32, i32* %missing348, align 4
  %inc406 = add i32 %280, 1
  store i32 %inc406, i32* %missing348, align 4
  br label %for.inc.407

for.inc.407:                                      ; preds = %if.end.405, %do.end.403, %if.then.359
  %281 = load i32, i32* %i, align 4
  %inc408 = add i32 %281, 1
  store i32 %inc408, i32* %i, align 4
  br label %for.cond.350

for.end.409:                                      ; preds = %for.cond.350
  %282 = load i32, i32* %missing348, align 4
  %tobool410 = icmp ne i32 %282, 0
  br i1 %tobool410, label %if.then.411, label %if.end.412

if.then.411:                                      ; preds = %for.end.409
  %283 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %284 = load i32, i32* %missing348, align 4
  %285 = load %struct._object**, %struct._object*** %fastlocals, align 8
  call void @missing_arguments(%struct.PyCodeObject* %283, i32 %284, i32 -1, %struct._object** %285)
  br label %fail

if.end.412:                                       ; preds = %for.end.409
  br label %if.end.413

if.end.413:                                       ; preds = %if.end.412, %if.end.342
  store i32 0, i32* %i, align 4
  br label %for.cond.414

for.cond.414:                                     ; preds = %for.inc.503, %if.end.413
  %286 = load i32, i32* %i, align 4
  %conv415 = sext i32 %286 to i64
  %287 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cellvars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %287, i32 0, i32 11
  %288 = load %struct._object*, %struct._object** %co_cellvars, align 8
  %289 = bitcast %struct._object* %288 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %289, i32 0, i32 1
  %290 = load i64, i64* %ob_size, align 8
  %cmp416 = icmp slt i64 %conv415, %290
  br i1 %cmp416, label %for.body.418, label %for.end.505

for.body.418:                                     ; preds = %for.cond.414
  %291 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cell2arg = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %291, i32 0, i32 12
  %292 = load i8*, i8** %co_cell2arg, align 8
  %cmp421 = icmp ne i8* %292, null
  br i1 %cmp421, label %land.lhs.true.423, label %if.else.463

land.lhs.true.423:                                ; preds = %for.body.418
  %293 = load i32, i32* %i, align 4
  %idxprom424 = sext i32 %293 to i64
  %294 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cell2arg425 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %294, i32 0, i32 12
  %295 = load i8*, i8** %co_cell2arg425, align 8
  %arrayidx426 = getelementptr i8, i8* %295, i64 %idxprom424
  %296 = load i8, i8* %arrayidx426, align 1
  %conv427 = zext i8 %296 to i32
  store i32 %conv427, i32* %arg, align 4
  %cmp428 = icmp ne i32 %conv427, 255
  br i1 %cmp428, label %if.then.430, label %if.else.463

if.then.430:                                      ; preds = %land.lhs.true.423
  %297 = load i32, i32* %arg, align 4
  %idxprom431 = sext i32 %297 to i64
  %298 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx432 = getelementptr %struct._object*, %struct._object** %298, i64 %idxprom431
  %299 = load %struct._object*, %struct._object** %arrayidx432, align 8
  %call433 = call %struct._object* @PyCell_New(%struct._object* %299)
  store %struct._object* %call433, %struct._object** %c, align 8
  br label %do.body.434

do.body.434:                                      ; preds = %if.then.430
  %300 = load i32, i32* %arg, align 4
  %idxprom437 = sext i32 %300 to i64
  %301 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx438 = getelementptr %struct._object*, %struct._object** %301, i64 %idxprom437
  %302 = load %struct._object*, %struct._object** %arrayidx438, align 8
  store %struct._object* %302, %struct._object** %tmp436, align 8
  %303 = load i32, i32* %arg, align 4
  %idxprom439 = sext i32 %303 to i64
  %304 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx440 = getelementptr %struct._object*, %struct._object** %304, i64 %idxprom439
  store %struct._object* null, %struct._object** %arrayidx440, align 8
  br label %do.body.441

do.body.441:                                      ; preds = %do.body.434
  %305 = load %struct._object*, %struct._object** %tmp436, align 8
  store %struct._object* %305, %struct._object** %_py_xdecref_tmp443, align 8
  %306 = load %struct._object*, %struct._object** %_py_xdecref_tmp443, align 8
  %cmp444 = icmp ne %struct._object* %306, null
  br i1 %cmp444, label %if.then.446, label %if.end.460

if.then.446:                                      ; preds = %do.body.441
  br label %do.body.447

do.body.447:                                      ; preds = %if.then.446
  %307 = load %struct._object*, %struct._object** %_py_xdecref_tmp443, align 8
  store %struct._object* %307, %struct._object** %_py_decref_tmp449, align 8
  %308 = load %struct._object*, %struct._object** %_py_decref_tmp449, align 8
  %ob_refcnt450 = getelementptr inbounds %struct._object, %struct._object* %308, i32 0, i32 0
  %309 = load i64, i64* %ob_refcnt450, align 8
  %dec451 = add i64 %309, -1
  store i64 %dec451, i64* %ob_refcnt450, align 8
  %cmp452 = icmp ne i64 %dec451, 0
  br i1 %cmp452, label %if.then.454, label %if.else.455

if.then.454:                                      ; preds = %do.body.447
  br label %if.end.458

if.else.455:                                      ; preds = %do.body.447
  %310 = load %struct._object*, %struct._object** %_py_decref_tmp449, align 8
  %ob_type456 = getelementptr inbounds %struct._object, %struct._object* %310, i32 0, i32 1
  %311 = load %struct._typeobject*, %struct._typeobject** %ob_type456, align 8
  %tp_dealloc457 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %311, i32 0, i32 4
  %312 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc457, align 8
  %313 = load %struct._object*, %struct._object** %_py_decref_tmp449, align 8
  call void %312(%struct._object* %313)
  br label %if.end.458

if.end.458:                                       ; preds = %if.else.455, %if.then.454
  br label %do.end.459

do.end.459:                                       ; preds = %if.end.458
  br label %if.end.460

if.end.460:                                       ; preds = %do.end.459, %do.body.441
  br label %do.end.461

do.end.461:                                       ; preds = %if.end.460
  br label %do.end.462

do.end.462:                                       ; preds = %do.end.461
  br label %if.end.465

if.else.463:                                      ; preds = %land.lhs.true.423, %for.body.418
  %call464 = call %struct._object* @PyCell_New(%struct._object* null)
  store %struct._object* %call464, %struct._object** %c, align 8
  br label %if.end.465

if.end.465:                                       ; preds = %if.else.463, %do.end.462
  %314 = load %struct._object*, %struct._object** %c, align 8
  %cmp466 = icmp eq %struct._object* %314, null
  br i1 %cmp466, label %if.then.468, label %if.end.469

if.then.468:                                      ; preds = %if.end.465
  br label %fail

if.end.469:                                       ; preds = %if.end.465
  br label %do.body.470

do.body.470:                                      ; preds = %if.end.469
  %315 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_nlocals473 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %315, i32 0, i32 3
  %316 = load i32, i32* %co_nlocals473, align 4
  %317 = load i32, i32* %i, align 4
  %add474 = add i32 %316, %317
  %idxprom475 = sext i32 %add474 to i64
  %318 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx476 = getelementptr %struct._object*, %struct._object** %318, i64 %idxprom475
  %319 = load %struct._object*, %struct._object** %arrayidx476, align 8
  store %struct._object* %319, %struct._object** %tmp472, align 8
  %320 = load %struct._object*, %struct._object** %c, align 8
  %321 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_nlocals477 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %321, i32 0, i32 3
  %322 = load i32, i32* %co_nlocals477, align 4
  %323 = load i32, i32* %i, align 4
  %add478 = add i32 %322, %323
  %idxprom479 = sext i32 %add478 to i64
  %324 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx480 = getelementptr %struct._object*, %struct._object** %324, i64 %idxprom479
  store %struct._object* %320, %struct._object** %arrayidx480, align 8
  br label %do.body.481

do.body.481:                                      ; preds = %do.body.470
  %325 = load %struct._object*, %struct._object** %tmp472, align 8
  store %struct._object* %325, %struct._object** %_py_xdecref_tmp483, align 8
  %326 = load %struct._object*, %struct._object** %_py_xdecref_tmp483, align 8
  %cmp484 = icmp ne %struct._object* %326, null
  br i1 %cmp484, label %if.then.486, label %if.end.500

if.then.486:                                      ; preds = %do.body.481
  br label %do.body.487

do.body.487:                                      ; preds = %if.then.486
  %327 = load %struct._object*, %struct._object** %_py_xdecref_tmp483, align 8
  store %struct._object* %327, %struct._object** %_py_decref_tmp489, align 8
  %328 = load %struct._object*, %struct._object** %_py_decref_tmp489, align 8
  %ob_refcnt490 = getelementptr inbounds %struct._object, %struct._object* %328, i32 0, i32 0
  %329 = load i64, i64* %ob_refcnt490, align 8
  %dec491 = add i64 %329, -1
  store i64 %dec491, i64* %ob_refcnt490, align 8
  %cmp492 = icmp ne i64 %dec491, 0
  br i1 %cmp492, label %if.then.494, label %if.else.495

if.then.494:                                      ; preds = %do.body.487
  br label %if.end.498

if.else.495:                                      ; preds = %do.body.487
  %330 = load %struct._object*, %struct._object** %_py_decref_tmp489, align 8
  %ob_type496 = getelementptr inbounds %struct._object, %struct._object* %330, i32 0, i32 1
  %331 = load %struct._typeobject*, %struct._typeobject** %ob_type496, align 8
  %tp_dealloc497 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %331, i32 0, i32 4
  %332 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc497, align 8
  %333 = load %struct._object*, %struct._object** %_py_decref_tmp489, align 8
  call void %332(%struct._object* %333)
  br label %if.end.498

if.end.498:                                       ; preds = %if.else.495, %if.then.494
  br label %do.end.499

do.end.499:                                       ; preds = %if.end.498
  br label %if.end.500

if.end.500:                                       ; preds = %do.end.499, %do.body.481
  br label %do.end.501

do.end.501:                                       ; preds = %if.end.500
  br label %do.end.502

do.end.502:                                       ; preds = %do.end.501
  br label %for.inc.503

for.inc.503:                                      ; preds = %do.end.502
  %334 = load i32, i32* %i, align 4
  %inc504 = add i32 %334, 1
  store i32 %inc504, i32* %i, align 4
  br label %for.cond.414

for.end.505:                                      ; preds = %for.cond.414
  store i32 0, i32* %i, align 4
  br label %for.cond.506

for.cond.506:                                     ; preds = %for.inc.523, %for.end.505
  %335 = load i32, i32* %i, align 4
  %conv507 = sext i32 %335 to i64
  %336 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_freevars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %336, i32 0, i32 10
  %337 = load %struct._object*, %struct._object** %co_freevars, align 8
  %338 = bitcast %struct._object* %337 to %struct.PyVarObject*
  %ob_size508 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %338, i32 0, i32 1
  %339 = load i64, i64* %ob_size508, align 8
  %cmp509 = icmp slt i64 %conv507, %339
  br i1 %cmp509, label %for.body.511, label %for.end.525

for.body.511:                                     ; preds = %for.cond.506
  %340 = load i32, i32* %i, align 4
  %idxprom513 = sext i32 %340 to i64
  %341 = load %struct._object*, %struct._object** %closure.addr, align 8
  %342 = bitcast %struct._object* %341 to %struct.PyTupleObject*
  %ob_item514 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %342, i32 0, i32 1
  %arrayidx515 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item514, i32 0, i64 %idxprom513
  %343 = load %struct._object*, %struct._object** %arrayidx515, align 8
  store %struct._object* %343, %struct._object** %o, align 8
  %344 = load %struct._object*, %struct._object** %o, align 8
  %ob_refcnt516 = getelementptr inbounds %struct._object, %struct._object* %344, i32 0, i32 0
  %345 = load i64, i64* %ob_refcnt516, align 8
  %inc517 = add i64 %345, 1
  store i64 %inc517, i64* %ob_refcnt516, align 8
  %346 = load %struct._object*, %struct._object** %o, align 8
  %347 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cellvars518 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %347, i32 0, i32 11
  %348 = load %struct._object*, %struct._object** %co_cellvars518, align 8
  %349 = bitcast %struct._object* %348 to %struct.PyVarObject*
  %ob_size519 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %349, i32 0, i32 1
  %350 = load i64, i64* %ob_size519, align 8
  %351 = load i32, i32* %i, align 4
  %conv520 = sext i32 %351 to i64
  %add521 = add i64 %350, %conv520
  %352 = load %struct._object**, %struct._object*** %freevars, align 8
  %arrayidx522 = getelementptr %struct._object*, %struct._object** %352, i64 %add521
  store %struct._object* %346, %struct._object** %arrayidx522, align 8
  br label %for.inc.523

for.inc.523:                                      ; preds = %for.body.511
  %353 = load i32, i32* %i, align 4
  %inc524 = add i32 %353, 1
  store i32 %inc524, i32* %i, align 4
  br label %for.cond.506

for.end.525:                                      ; preds = %for.cond.506
  %354 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags526 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %354, i32 0, i32 5
  %355 = load i32, i32* %co_flags526, align 4
  %and527 = and i32 %355, 32
  %tobool528 = icmp ne i32 %and527, 0
  br i1 %tobool528, label %if.then.529, label %if.end.552

if.then.529:                                      ; preds = %for.end.525
  br label %do.body.530

do.body.530:                                      ; preds = %if.then.529
  %356 = load %struct._frame*, %struct._frame** %f, align 8
  %f_back = getelementptr inbounds %struct._frame, %struct._frame* %356, i32 0, i32 1
  %357 = load %struct._frame*, %struct._frame** %f_back, align 8
  %358 = bitcast %struct._frame* %357 to %struct._object*
  store %struct._object* %358, %struct._object** %_py_tmp, align 8
  %359 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp532 = icmp ne %struct._object* %359, null
  br i1 %cmp532, label %if.then.534, label %if.end.549

if.then.534:                                      ; preds = %do.body.530
  %360 = load %struct._frame*, %struct._frame** %f, align 8
  %f_back535 = getelementptr inbounds %struct._frame, %struct._frame* %360, i32 0, i32 1
  store %struct._frame* null, %struct._frame** %f_back535, align 8
  br label %do.body.536

do.body.536:                                      ; preds = %if.then.534
  %361 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %361, %struct._object** %_py_decref_tmp538, align 8
  %362 = load %struct._object*, %struct._object** %_py_decref_tmp538, align 8
  %ob_refcnt539 = getelementptr inbounds %struct._object, %struct._object* %362, i32 0, i32 0
  %363 = load i64, i64* %ob_refcnt539, align 8
  %dec540 = add i64 %363, -1
  store i64 %dec540, i64* %ob_refcnt539, align 8
  %cmp541 = icmp ne i64 %dec540, 0
  br i1 %cmp541, label %if.then.543, label %if.else.544

if.then.543:                                      ; preds = %do.body.536
  br label %if.end.547

if.else.544:                                      ; preds = %do.body.536
  %364 = load %struct._object*, %struct._object** %_py_decref_tmp538, align 8
  %ob_type545 = getelementptr inbounds %struct._object, %struct._object* %364, i32 0, i32 1
  %365 = load %struct._typeobject*, %struct._typeobject** %ob_type545, align 8
  %tp_dealloc546 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %365, i32 0, i32 4
  %366 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc546, align 8
  %367 = load %struct._object*, %struct._object** %_py_decref_tmp538, align 8
  call void %366(%struct._object* %367)
  br label %if.end.547

if.end.547:                                       ; preds = %if.else.544, %if.then.543
  br label %do.end.548

do.end.548:                                       ; preds = %if.end.547
  br label %if.end.549

if.end.549:                                       ; preds = %do.end.548, %do.body.530
  br label %do.end.550

do.end.550:                                       ; preds = %if.end.549
  %368 = load %struct._frame*, %struct._frame** %f, align 8
  %call551 = call %struct._object* @PyGen_New(%struct._frame* %368)
  store %struct._object* %call551, %struct._object** %retval
  br label %return

if.end.552:                                       ; preds = %for.end.525
  %369 = load %struct._frame*, %struct._frame** %f, align 8
  %call553 = call %struct._object* @PyEval_EvalFrameEx(%struct._frame* %369, i32 0)
  store %struct._object* %call553, %struct._object** %retval1, align 8
  br label %fail

fail:                                             ; preds = %if.end.552, %if.then.468, %if.then.411, %if.then.284, %if.then.259, %if.then.214, %if.then.208, %if.then.201, %if.then.191, %if.then.154, %if.then.88, %if.then.19
  %370 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %370, i32 0, i32 4
  %371 = load i32, i32* %recursion_depth, align 4
  %inc554 = add i32 %371, 1
  store i32 %inc554, i32* %recursion_depth, align 4
  br label %do.body.555

do.body.555:                                      ; preds = %fail
  %372 = load %struct._frame*, %struct._frame** %f, align 8
  %373 = bitcast %struct._frame* %372 to %struct._object*
  store %struct._object* %373, %struct._object** %_py_decref_tmp557, align 8
  %374 = load %struct._object*, %struct._object** %_py_decref_tmp557, align 8
  %ob_refcnt558 = getelementptr inbounds %struct._object, %struct._object* %374, i32 0, i32 0
  %375 = load i64, i64* %ob_refcnt558, align 8
  %dec559 = add i64 %375, -1
  store i64 %dec559, i64* %ob_refcnt558, align 8
  %cmp560 = icmp ne i64 %dec559, 0
  br i1 %cmp560, label %if.then.562, label %if.else.563

if.then.562:                                      ; preds = %do.body.555
  br label %if.end.566

if.else.563:                                      ; preds = %do.body.555
  %376 = load %struct._object*, %struct._object** %_py_decref_tmp557, align 8
  %ob_type564 = getelementptr inbounds %struct._object, %struct._object* %376, i32 0, i32 1
  %377 = load %struct._typeobject*, %struct._typeobject** %ob_type564, align 8
  %tp_dealloc565 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %377, i32 0, i32 4
  %378 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc565, align 8
  %379 = load %struct._object*, %struct._object** %_py_decref_tmp557, align 8
  call void %378(%struct._object* %379)
  br label %if.end.566

if.end.566:                                       ; preds = %if.else.563, %if.then.562
  br label %do.end.567

do.end.567:                                       ; preds = %if.end.566
  %380 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_depth568 = getelementptr inbounds %struct._ts, %struct._ts* %380, i32 0, i32 4
  %381 = load i32, i32* %recursion_depth568, align 4
  %dec569 = add i32 %381, -1
  store i32 %dec569, i32* %recursion_depth568, align 4
  %382 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %382, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.567, %do.end.550, %if.then.12, %if.then
  %383 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %383
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_EvalFrame(%struct._frame* %f) #0 {
entry:
  %f.addr = alloca %struct._frame*, align 8
  store %struct._frame* %f, %struct._frame** %f.addr, align 8
  %0 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call = call %struct._object* @PyEval_EvalFrameEx(%struct._frame* %0, i32 0)
  ret %struct._object* %call
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_EvalFrameEx(%struct._frame* %f, i32 %throwflag) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %f.addr = alloca %struct._frame*, align 8
  %throwflag.addr = alloca i32, align 4
  %stack_pointer = alloca %struct._object**, align 8
  %next_instr = alloca i8*, align 8
  %opcode = alloca i32, align 4
  %oparg = alloca i32, align 4
  %why = alloca i32, align 4
  %fastlocals = alloca %struct._object**, align 8
  %freevars = alloca %struct._object**, align 8
  %retval1 = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %co = alloca %struct.PyCodeObject*, align 8
  %instr_ub = alloca i32, align 4
  %instr_lb = alloca i32, align 4
  %instr_prev = alloca i32, align 4
  %first_instr = alloca i8*, align 8
  %names = alloca %struct._object*, align 8
  %consts = alloca %struct._object*, align 8
  %atomic_val13 = alloca %struct._Py_atomic_address*, align 8
  %result15 = alloca i8*, align 8
  %volatile_data17 = alloca i8**, align 8
  %order20 = alloca i32, align 4
  %tmp27 = alloca i8*, align 8
  %atomic_val69 = alloca %struct._Py_atomic_int*, align 8
  %result71 = alloca i32, align 4
  %volatile_data73 = alloca i32*, align 8
  %order76 = alloca i32, align 4
  %tmp83 = alloca i32, align 4
  %atomic_val91 = alloca %struct._Py_atomic_int*, align 8
  %result93 = alloca i32, align 4
  %volatile_data95 = alloca i32*, align 8
  %order98 = alloca i32, align 4
  %tmp105 = alloca i32, align 4
  %atomic_val115 = alloca %struct._Py_atomic_int*, align 8
  %result117 = alloca i32, align 4
  %volatile_data119 = alloca i32*, align 8
  %order122 = alloca i32, align 4
  %tmp129 = alloca i32, align 4
  %exc = alloca %struct._object*, align 8
  %atomic_val150 = alloca %struct._Py_atomic_int*, align 8
  %new_val = alloca i32, align 4
  %atomic_val153 = alloca %struct._Py_atomic_int*, align 8
  %result155 = alloca i32, align 4
  %volatile_data157 = alloca i32*, align 8
  %order160 = alloca i32, align 4
  %tmp167 = alloca i32, align 4
  %atomic_val169 = alloca %struct._Py_atomic_int*, align 8
  %result171 = alloca i32, align 4
  %volatile_data173 = alloca i32*, align 8
  %order176 = alloca i32, align 4
  %tmp183 = alloca i32, align 4
  %volatile_data186 = alloca i32*, align 8
  %order189 = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %value = alloca %struct._object*, align 8
  %value294 = alloca %struct._object*, align 8
  %value320 = alloca %struct._object*, align 8
  %tmp324 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp336 = alloca %struct._object*, align 8
  %value363 = alloca %struct._object*, align 8
  %_py_decref_tmp367 = alloca %struct._object*, align 8
  %top = alloca %struct._object*, align 8
  %second = alloca %struct._object*, align 8
  %top409 = alloca %struct._object*, align 8
  %second412 = alloca %struct._object*, align 8
  %third = alloca %struct._object*, align 8
  %top432 = alloca %struct._object*, align 8
  %top450 = alloca %struct._object*, align 8
  %second453 = alloca %struct._object*, align 8
  %value475 = alloca %struct._object*, align 8
  %res = alloca %struct._object*, align 8
  %_py_decref_tmp481 = alloca %struct._object*, align 8
  %atomic_val498 = alloca %struct._Py_atomic_int*, align 8
  %result500 = alloca i32, align 4
  %volatile_data502 = alloca i32*, align 8
  %order505 = alloca i32, align 4
  %tmp512 = alloca i32, align 4
  %value529 = alloca %struct._object*, align 8
  %res532 = alloca %struct._object*, align 8
  %_py_decref_tmp536 = alloca %struct._object*, align 8
  %atomic_val553 = alloca %struct._Py_atomic_int*, align 8
  %result555 = alloca i32, align 4
  %volatile_data557 = alloca i32*, align 8
  %order560 = alloca i32, align 4
  %tmp567 = alloca i32, align 4
  %value584 = alloca %struct._object*, align 8
  %err587 = alloca i32, align 4
  %_py_decref_tmp591 = alloca %struct._object*, align 8
  %atomic_val608 = alloca %struct._Py_atomic_int*, align 8
  %result610 = alloca i32, align 4
  %volatile_data612 = alloca i32*, align 8
  %order615 = alloca i32, align 4
  %tmp622 = alloca i32, align 4
  %atomic_val644 = alloca %struct._Py_atomic_int*, align 8
  %result646 = alloca i32, align 4
  %volatile_data648 = alloca i32*, align 8
  %order651 = alloca i32, align 4
  %tmp658 = alloca i32, align 4
  %value678 = alloca %struct._object*, align 8
  %res681 = alloca %struct._object*, align 8
  %_py_decref_tmp685 = alloca %struct._object*, align 8
  %atomic_val702 = alloca %struct._Py_atomic_int*, align 8
  %result704 = alloca i32, align 4
  %volatile_data706 = alloca i32*, align 8
  %order709 = alloca i32, align 4
  %tmp716 = alloca i32, align 4
  %exp = alloca %struct._object*, align 8
  %base = alloca %struct._object*, align 8
  %res737 = alloca %struct._object*, align 8
  %_py_decref_tmp741 = alloca %struct._object*, align 8
  %_py_decref_tmp754 = alloca %struct._object*, align 8
  %atomic_val771 = alloca %struct._Py_atomic_int*, align 8
  %result773 = alloca i32, align 4
  %volatile_data775 = alloca i32*, align 8
  %order778 = alloca i32, align 4
  %tmp785 = alloca i32, align 4
  %right = alloca %struct._object*, align 8
  %left = alloca %struct._object*, align 8
  %res806 = alloca %struct._object*, align 8
  %_py_decref_tmp810 = alloca %struct._object*, align 8
  %_py_decref_tmp823 = alloca %struct._object*, align 8
  %atomic_val840 = alloca %struct._Py_atomic_int*, align 8
  %result842 = alloca i32, align 4
  %volatile_data844 = alloca i32*, align 8
  %order847 = alloca i32, align 4
  %tmp854 = alloca i32, align 4
  %divisor = alloca %struct._object*, align 8
  %dividend = alloca %struct._object*, align 8
  %quotient = alloca %struct._object*, align 8
  %_py_decref_tmp878 = alloca %struct._object*, align 8
  %_py_decref_tmp891 = alloca %struct._object*, align 8
  %atomic_val908 = alloca %struct._Py_atomic_int*, align 8
  %result910 = alloca i32, align 4
  %volatile_data912 = alloca i32*, align 8
  %order915 = alloca i32, align 4
  %tmp922 = alloca i32, align 4
  %divisor939 = alloca %struct._object*, align 8
  %dividend942 = alloca %struct._object*, align 8
  %quotient945 = alloca %struct._object*, align 8
  %_py_decref_tmp949 = alloca %struct._object*, align 8
  %_py_decref_tmp962 = alloca %struct._object*, align 8
  %atomic_val979 = alloca %struct._Py_atomic_int*, align 8
  %result981 = alloca i32, align 4
  %volatile_data983 = alloca i32*, align 8
  %order986 = alloca i32, align 4
  %tmp993 = alloca i32, align 4
  %divisor1010 = alloca %struct._object*, align 8
  %dividend1013 = alloca %struct._object*, align 8
  %res1016 = alloca %struct._object*, align 8
  %_py_decref_tmp1024 = alloca %struct._object*, align 8
  %_py_decref_tmp1037 = alloca %struct._object*, align 8
  %atomic_val1054 = alloca %struct._Py_atomic_int*, align 8
  %result1056 = alloca i32, align 4
  %volatile_data1058 = alloca i32*, align 8
  %order1061 = alloca i32, align 4
  %tmp1068 = alloca i32, align 4
  %right1085 = alloca %struct._object*, align 8
  %left1088 = alloca %struct._object*, align 8
  %sum = alloca %struct._object*, align 8
  %_py_decref_tmp1104 = alloca %struct._object*, align 8
  %_py_decref_tmp1118 = alloca %struct._object*, align 8
  %atomic_val1135 = alloca %struct._Py_atomic_int*, align 8
  %result1137 = alloca i32, align 4
  %volatile_data1139 = alloca i32*, align 8
  %order1142 = alloca i32, align 4
  %tmp1149 = alloca i32, align 4
  %right1166 = alloca %struct._object*, align 8
  %left1169 = alloca %struct._object*, align 8
  %diff = alloca %struct._object*, align 8
  %_py_decref_tmp1175 = alloca %struct._object*, align 8
  %_py_decref_tmp1188 = alloca %struct._object*, align 8
  %atomic_val1205 = alloca %struct._Py_atomic_int*, align 8
  %result1207 = alloca i32, align 4
  %volatile_data1209 = alloca i32*, align 8
  %order1212 = alloca i32, align 4
  %tmp1219 = alloca i32, align 4
  %sub = alloca %struct._object*, align 8
  %container = alloca %struct._object*, align 8
  %res1240 = alloca %struct._object*, align 8
  %_py_decref_tmp1244 = alloca %struct._object*, align 8
  %_py_decref_tmp1257 = alloca %struct._object*, align 8
  %atomic_val1274 = alloca %struct._Py_atomic_int*, align 8
  %result1276 = alloca i32, align 4
  %volatile_data1278 = alloca i32*, align 8
  %order1281 = alloca i32, align 4
  %tmp1288 = alloca i32, align 4
  %right1305 = alloca %struct._object*, align 8
  %left1308 = alloca %struct._object*, align 8
  %res1311 = alloca %struct._object*, align 8
  %_py_decref_tmp1315 = alloca %struct._object*, align 8
  %_py_decref_tmp1328 = alloca %struct._object*, align 8
  %atomic_val1345 = alloca %struct._Py_atomic_int*, align 8
  %result1347 = alloca i32, align 4
  %volatile_data1349 = alloca i32*, align 8
  %order1352 = alloca i32, align 4
  %tmp1359 = alloca i32, align 4
  %right1376 = alloca %struct._object*, align 8
  %left1379 = alloca %struct._object*, align 8
  %res1382 = alloca %struct._object*, align 8
  %_py_decref_tmp1386 = alloca %struct._object*, align 8
  %_py_decref_tmp1399 = alloca %struct._object*, align 8
  %atomic_val1416 = alloca %struct._Py_atomic_int*, align 8
  %result1418 = alloca i32, align 4
  %volatile_data1420 = alloca i32*, align 8
  %order1423 = alloca i32, align 4
  %tmp1430 = alloca i32, align 4
  %right1447 = alloca %struct._object*, align 8
  %left1450 = alloca %struct._object*, align 8
  %res1453 = alloca %struct._object*, align 8
  %_py_decref_tmp1457 = alloca %struct._object*, align 8
  %_py_decref_tmp1470 = alloca %struct._object*, align 8
  %atomic_val1487 = alloca %struct._Py_atomic_int*, align 8
  %result1489 = alloca i32, align 4
  %volatile_data1491 = alloca i32*, align 8
  %order1494 = alloca i32, align 4
  %tmp1501 = alloca i32, align 4
  %right1518 = alloca %struct._object*, align 8
  %left1521 = alloca %struct._object*, align 8
  %res1524 = alloca %struct._object*, align 8
  %_py_decref_tmp1528 = alloca %struct._object*, align 8
  %_py_decref_tmp1541 = alloca %struct._object*, align 8
  %atomic_val1558 = alloca %struct._Py_atomic_int*, align 8
  %result1560 = alloca i32, align 4
  %volatile_data1562 = alloca i32*, align 8
  %order1565 = alloca i32, align 4
  %tmp1572 = alloca i32, align 4
  %right1589 = alloca %struct._object*, align 8
  %left1592 = alloca %struct._object*, align 8
  %res1595 = alloca %struct._object*, align 8
  %_py_decref_tmp1599 = alloca %struct._object*, align 8
  %_py_decref_tmp1612 = alloca %struct._object*, align 8
  %atomic_val1629 = alloca %struct._Py_atomic_int*, align 8
  %result1631 = alloca i32, align 4
  %volatile_data1633 = alloca i32*, align 8
  %order1636 = alloca i32, align 4
  %tmp1643 = alloca i32, align 4
  %v = alloca %struct._object*, align 8
  %list = alloca %struct._object*, align 8
  %err1673 = alloca i32, align 4
  %_py_decref_tmp1677 = alloca %struct._object*, align 8
  %atomic_val1693 = alloca %struct._Py_atomic_int*, align 8
  %result1695 = alloca i32, align 4
  %volatile_data1697 = alloca i32*, align 8
  %order1700 = alloca i32, align 4
  %tmp1707 = alloca i32, align 4
  %v1731 = alloca %struct._object*, align 8
  %set = alloca %struct._object*, align 8
  %err1738 = alloca i32, align 4
  %_py_decref_tmp1742 = alloca %struct._object*, align 8
  %atomic_val1758 = alloca %struct._Py_atomic_int*, align 8
  %result1760 = alloca i32, align 4
  %volatile_data1762 = alloca i32*, align 8
  %order1765 = alloca i32, align 4
  %tmp1772 = alloca i32, align 4
  %exp1789 = alloca %struct._object*, align 8
  %base1792 = alloca %struct._object*, align 8
  %res1795 = alloca %struct._object*, align 8
  %_py_decref_tmp1799 = alloca %struct._object*, align 8
  %_py_decref_tmp1812 = alloca %struct._object*, align 8
  %atomic_val1829 = alloca %struct._Py_atomic_int*, align 8
  %result1831 = alloca i32, align 4
  %volatile_data1833 = alloca i32*, align 8
  %order1836 = alloca i32, align 4
  %tmp1843 = alloca i32, align 4
  %right1860 = alloca %struct._object*, align 8
  %left1863 = alloca %struct._object*, align 8
  %res1866 = alloca %struct._object*, align 8
  %_py_decref_tmp1870 = alloca %struct._object*, align 8
  %_py_decref_tmp1883 = alloca %struct._object*, align 8
  %atomic_val1900 = alloca %struct._Py_atomic_int*, align 8
  %result1902 = alloca i32, align 4
  %volatile_data1904 = alloca i32*, align 8
  %order1907 = alloca i32, align 4
  %tmp1914 = alloca i32, align 4
  %divisor1931 = alloca %struct._object*, align 8
  %dividend1934 = alloca %struct._object*, align 8
  %quotient1937 = alloca %struct._object*, align 8
  %_py_decref_tmp1941 = alloca %struct._object*, align 8
  %_py_decref_tmp1954 = alloca %struct._object*, align 8
  %atomic_val1971 = alloca %struct._Py_atomic_int*, align 8
  %result1973 = alloca i32, align 4
  %volatile_data1975 = alloca i32*, align 8
  %order1978 = alloca i32, align 4
  %tmp1985 = alloca i32, align 4
  %divisor2002 = alloca %struct._object*, align 8
  %dividend2005 = alloca %struct._object*, align 8
  %quotient2008 = alloca %struct._object*, align 8
  %_py_decref_tmp2012 = alloca %struct._object*, align 8
  %_py_decref_tmp2025 = alloca %struct._object*, align 8
  %atomic_val2042 = alloca %struct._Py_atomic_int*, align 8
  %result2044 = alloca i32, align 4
  %volatile_data2046 = alloca i32*, align 8
  %order2049 = alloca i32, align 4
  %tmp2056 = alloca i32, align 4
  %right2073 = alloca %struct._object*, align 8
  %left2076 = alloca %struct._object*, align 8
  %mod = alloca %struct._object*, align 8
  %_py_decref_tmp2082 = alloca %struct._object*, align 8
  %_py_decref_tmp2095 = alloca %struct._object*, align 8
  %atomic_val2112 = alloca %struct._Py_atomic_int*, align 8
  %result2114 = alloca i32, align 4
  %volatile_data2116 = alloca i32*, align 8
  %order2119 = alloca i32, align 4
  %tmp2126 = alloca i32, align 4
  %right2143 = alloca %struct._object*, align 8
  %left2146 = alloca %struct._object*, align 8
  %sum2149 = alloca %struct._object*, align 8
  %_py_decref_tmp2163 = alloca %struct._object*, align 8
  %_py_decref_tmp2177 = alloca %struct._object*, align 8
  %atomic_val2194 = alloca %struct._Py_atomic_int*, align 8
  %result2196 = alloca i32, align 4
  %volatile_data2198 = alloca i32*, align 8
  %order2201 = alloca i32, align 4
  %tmp2208 = alloca i32, align 4
  %right2225 = alloca %struct._object*, align 8
  %left2228 = alloca %struct._object*, align 8
  %diff2231 = alloca %struct._object*, align 8
  %_py_decref_tmp2235 = alloca %struct._object*, align 8
  %_py_decref_tmp2248 = alloca %struct._object*, align 8
  %atomic_val2265 = alloca %struct._Py_atomic_int*, align 8
  %result2267 = alloca i32, align 4
  %volatile_data2269 = alloca i32*, align 8
  %order2272 = alloca i32, align 4
  %tmp2279 = alloca i32, align 4
  %right2296 = alloca %struct._object*, align 8
  %left2299 = alloca %struct._object*, align 8
  %res2302 = alloca %struct._object*, align 8
  %_py_decref_tmp2306 = alloca %struct._object*, align 8
  %_py_decref_tmp2319 = alloca %struct._object*, align 8
  %atomic_val2336 = alloca %struct._Py_atomic_int*, align 8
  %result2338 = alloca i32, align 4
  %volatile_data2340 = alloca i32*, align 8
  %order2343 = alloca i32, align 4
  %tmp2350 = alloca i32, align 4
  %right2367 = alloca %struct._object*, align 8
  %left2370 = alloca %struct._object*, align 8
  %res2373 = alloca %struct._object*, align 8
  %_py_decref_tmp2377 = alloca %struct._object*, align 8
  %_py_decref_tmp2390 = alloca %struct._object*, align 8
  %atomic_val2407 = alloca %struct._Py_atomic_int*, align 8
  %result2409 = alloca i32, align 4
  %volatile_data2411 = alloca i32*, align 8
  %order2414 = alloca i32, align 4
  %tmp2421 = alloca i32, align 4
  %right2438 = alloca %struct._object*, align 8
  %left2441 = alloca %struct._object*, align 8
  %res2444 = alloca %struct._object*, align 8
  %_py_decref_tmp2448 = alloca %struct._object*, align 8
  %_py_decref_tmp2461 = alloca %struct._object*, align 8
  %atomic_val2478 = alloca %struct._Py_atomic_int*, align 8
  %result2480 = alloca i32, align 4
  %volatile_data2482 = alloca i32*, align 8
  %order2485 = alloca i32, align 4
  %tmp2492 = alloca i32, align 4
  %right2509 = alloca %struct._object*, align 8
  %left2512 = alloca %struct._object*, align 8
  %res2515 = alloca %struct._object*, align 8
  %_py_decref_tmp2519 = alloca %struct._object*, align 8
  %_py_decref_tmp2532 = alloca %struct._object*, align 8
  %atomic_val2549 = alloca %struct._Py_atomic_int*, align 8
  %result2551 = alloca i32, align 4
  %volatile_data2553 = alloca i32*, align 8
  %order2556 = alloca i32, align 4
  %tmp2563 = alloca i32, align 4
  %right2580 = alloca %struct._object*, align 8
  %left2583 = alloca %struct._object*, align 8
  %res2586 = alloca %struct._object*, align 8
  %_py_decref_tmp2590 = alloca %struct._object*, align 8
  %_py_decref_tmp2603 = alloca %struct._object*, align 8
  %atomic_val2620 = alloca %struct._Py_atomic_int*, align 8
  %result2622 = alloca i32, align 4
  %volatile_data2624 = alloca i32*, align 8
  %order2627 = alloca i32, align 4
  %tmp2634 = alloca i32, align 4
  %sub2651 = alloca %struct._object*, align 8
  %container2654 = alloca %struct._object*, align 8
  %v2657 = alloca %struct._object*, align 8
  %err2660 = alloca i32, align 4
  %_py_decref_tmp2665 = alloca %struct._object*, align 8
  %_py_decref_tmp2678 = alloca %struct._object*, align 8
  %_py_decref_tmp2691 = alloca %struct._object*, align 8
  %atomic_val2707 = alloca %struct._Py_atomic_int*, align 8
  %result2709 = alloca i32, align 4
  %volatile_data2711 = alloca i32*, align 8
  %order2714 = alloca i32, align 4
  %tmp2721 = alloca i32, align 4
  %sub2738 = alloca %struct._object*, align 8
  %container2741 = alloca %struct._object*, align 8
  %err2744 = alloca i32, align 4
  %_py_decref_tmp2749 = alloca %struct._object*, align 8
  %_py_decref_tmp2762 = alloca %struct._object*, align 8
  %atomic_val2778 = alloca %struct._Py_atomic_int*, align 8
  %result2780 = alloca i32, align 4
  %volatile_data2782 = alloca i32*, align 8
  %order2785 = alloca i32, align 4
  %tmp2792 = alloca i32, align 4
  %value2809 = alloca %struct._object*, align 8
  %hook = alloca %struct._object*, align 8
  %res2814 = alloca %struct._object*, align 8
  %_py_decref_tmp2820 = alloca %struct._object*, align 8
  %_py_decref_tmp2835 = alloca %struct._object*, align 8
  %_py_decref_tmp2852 = alloca %struct._object*, align 8
  %atomic_val2864 = alloca %struct._Py_atomic_int*, align 8
  %result2866 = alloca i32, align 4
  %volatile_data2868 = alloca i32*, align 8
  %order2871 = alloca i32, align 4
  %tmp2878 = alloca i32, align 4
  %cause = alloca %struct._object*, align 8
  %exc2903 = alloca %struct._object*, align 8
  %v2919 = alloca %struct._object*, align 8
  %reciever = alloca %struct._object*, align 8
  %err2924 = alloca i32, align 4
  %_py_decref_tmp2943 = alloca %struct._object*, align 8
  %val = alloca %struct._object*, align 8
  %_py_decref_tmp2975 = alloca %struct._object*, align 8
  %atomic_val2988 = alloca %struct._Py_atomic_int*, align 8
  %result2990 = alloca i32, align 4
  %volatile_data2992 = alloca i32*, align 8
  %order2995 = alloca i32, align 4
  %tmp3002 = alloca i32, align 4
  %b = alloca %struct.PyTryBlock*, align 8
  %type = alloca %struct._object*, align 8
  %value3033 = alloca %struct._object*, align 8
  %traceback = alloca %struct._object*, align 8
  %_py_xdecref_tmp3045 = alloca %struct._object*, align 8
  %_py_decref_tmp3051 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3072 = alloca %struct._object*, align 8
  %_py_decref_tmp3078 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3093 = alloca %struct._object*, align 8
  %_py_decref_tmp3099 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3114 = alloca %struct._object*, align 8
  %_py_decref_tmp3120 = alloca %struct._object*, align 8
  %atomic_val3134 = alloca %struct._Py_atomic_int*, align 8
  %result3136 = alloca i32, align 4
  %volatile_data3138 = alloca i32*, align 8
  %order3141 = alloca i32, align 4
  %tmp3148 = alloca i32, align 4
  %b3165 = alloca %struct.PyTryBlock*, align 8
  %v3179 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3183 = alloca %struct._object*, align 8
  %_py_decref_tmp3189 = alloca %struct._object*, align 8
  %atomic_val3204 = alloca %struct._Py_atomic_int*, align 8
  %result3206 = alloca i32, align 4
  %volatile_data3208 = alloca i32*, align 8
  %order3211 = alloca i32, align 4
  %tmp3218 = alloca i32, align 4
  %status = alloca %struct._object*, align 8
  %b3254 = alloca %struct.PyTryBlock*, align 8
  %type3257 = alloca %struct._object*, align 8
  %value3259 = alloca %struct._object*, align 8
  %traceback3261 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3277 = alloca %struct._object*, align 8
  %_py_decref_tmp3283 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3308 = alloca %struct._object*, align 8
  %_py_decref_tmp3314 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3329 = alloca %struct._object*, align 8
  %_py_decref_tmp3335 = alloca %struct._object*, align 8
  %_py_xdecref_tmp3350 = alloca %struct._object*, align 8
  %_py_decref_tmp3356 = alloca %struct._object*, align 8
  %_py_decref_tmp3371 = alloca %struct._object*, align 8
  %atomic_val3383 = alloca %struct._Py_atomic_int*, align 8
  %result3385 = alloca i32, align 4
  %volatile_data3387 = alloca i32*, align 8
  %order3390 = alloca i32, align 4
  %tmp3397 = alloca i32, align 4
  %_py_decref_tmp3415 = alloca %struct._object*, align 8
  %exc3439 = alloca %struct._object*, align 8
  %tb = alloca %struct._object*, align 8
  %_py_decref_tmp3449 = alloca %struct._object*, align 8
  %_py_decref_tmp3465 = alloca %struct._object*, align 8
  %atomic_val3477 = alloca %struct._Py_atomic_int*, align 8
  %result3479 = alloca i32, align 4
  %volatile_data3481 = alloca i32*, align 8
  %order3484 = alloca i32, align 4
  %tmp3491 = alloca i32, align 4
  %bc = alloca %struct._object*, align 8
  %build_class_str = alloca %struct._object*, align 8
  %atomic_val3540 = alloca %struct._Py_atomic_int*, align 8
  %result3542 = alloca i32, align 4
  %volatile_data3544 = alloca i32*, align 8
  %order3547 = alloca i32, align 4
  %tmp3554 = alloca i32, align 4
  %name = alloca %struct._object*, align 8
  %v3582 = alloca %struct._object*, align 8
  %ns = alloca %struct._object*, align 8
  %err3586 = alloca i32, align 4
  %_py_decref_tmp3593 = alloca %struct._object*, align 8
  %_py_decref_tmp3615 = alloca %struct._object*, align 8
  %atomic_val3631 = alloca %struct._Py_atomic_int*, align 8
  %result3633 = alloca i32, align 4
  %volatile_data3635 = alloca i32*, align 8
  %order3638 = alloca i32, align 4
  %tmp3645 = alloca i32, align 4
  %name3669 = alloca %struct._object*, align 8
  %ns3674 = alloca %struct._object*, align 8
  %err3677 = alloca i32, align 4
  %atomic_val3689 = alloca %struct._Py_atomic_int*, align 8
  %result3691 = alloca i32, align 4
  %volatile_data3693 = alloca i32*, align 8
  %order3696 = alloca i32, align 4
  %tmp3703 = alloca i32, align 4
  %seq = alloca %struct._object*, align 8
  %item = alloca %struct._object*, align 8
  %items = alloca %struct._object**, align 8
  %_py_decref_tmp3782 = alloca %struct._object*, align 8
  %_py_decref_tmp3798 = alloca %struct._object*, align 8
  %atomic_val3810 = alloca %struct._Py_atomic_int*, align 8
  %result3812 = alloca i32, align 4
  %volatile_data3814 = alloca i32*, align 8
  %order3817 = alloca i32, align 4
  %tmp3824 = alloca i32, align 4
  %totalargs = alloca i32, align 4
  %seq3852 = alloca %struct._object*, align 8
  %_py_decref_tmp3866 = alloca %struct._object*, align 8
  %_py_decref_tmp3880 = alloca %struct._object*, align 8
  %atomic_val3892 = alloca %struct._Py_atomic_int*, align 8
  %result3894 = alloca i32, align 4
  %volatile_data3896 = alloca i32*, align 8
  %order3899 = alloca i32, align 4
  %tmp3906 = alloca i32, align 4
  %name3930 = alloca %struct._object*, align 8
  %owner = alloca %struct._object*, align 8
  %v3937 = alloca %struct._object*, align 8
  %err3940 = alloca i32, align 4
  %_py_decref_tmp3945 = alloca %struct._object*, align 8
  %_py_decref_tmp3958 = alloca %struct._object*, align 8
  %atomic_val3974 = alloca %struct._Py_atomic_int*, align 8
  %result3976 = alloca i32, align 4
  %volatile_data3978 = alloca i32*, align 8
  %order3981 = alloca i32, align 4
  %tmp3988 = alloca i32, align 4
  %name4012 = alloca %struct._object*, align 8
  %owner4017 = alloca %struct._object*, align 8
  %err4020 = alloca i32, align 4
  %_py_decref_tmp4024 = alloca %struct._object*, align 8
  %atomic_val4040 = alloca %struct._Py_atomic_int*, align 8
  %result4042 = alloca i32, align 4
  %volatile_data4044 = alloca i32*, align 8
  %order4047 = alloca i32, align 4
  %tmp4054 = alloca i32, align 4
  %name4078 = alloca %struct._object*, align 8
  %v4083 = alloca %struct._object*, align 8
  %err4086 = alloca i32, align 4
  %_py_decref_tmp4090 = alloca %struct._object*, align 8
  %atomic_val4106 = alloca %struct._Py_atomic_int*, align 8
  %result4108 = alloca i32, align 4
  %volatile_data4110 = alloca i32*, align 8
  %order4113 = alloca i32, align 4
  %tmp4120 = alloca i32, align 4
  %name4144 = alloca %struct._object*, align 8
  %err4149 = alloca i32, align 4
  %atomic_val4157 = alloca %struct._Py_atomic_int*, align 8
  %result4159 = alloca i32, align 4
  %volatile_data4161 = alloca i32*, align 8
  %order4164 = alloca i32, align 4
  %tmp4171 = alloca i32, align 4
  %name4195 = alloca %struct._object*, align 8
  %locals = alloca %struct._object*, align 8
  %v4202 = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %atomic_val4228 = alloca %struct._Py_atomic_address*, align 8
  %result4230 = alloca i8*, align 8
  %volatile_data4232 = alloca i8**, align 8
  %order4235 = alloca i32, align 4
  %tmp4242 = alloca i8*, align 8
  %_py_xincref_tmp4258 = alloca %struct._object*, align 8
  %atomic_val4298 = alloca %struct._Py_atomic_int*, align 8
  %result4300 = alloca i32, align 4
  %volatile_data4302 = alloca i32*, align 8
  %order4305 = alloca i32, align 4
  %tmp4312 = alloca i32, align 4
  %name4336 = alloca %struct._object*, align 8
  %v4341 = alloca %struct._object*, align 8
  %atomic_val4359 = alloca %struct._Py_atomic_address*, align 8
  %result4361 = alloca i8*, align 8
  %volatile_data4363 = alloca i8**, align 8
  %order4366 = alloca i32, align 4
  %tmp4373 = alloca i8*, align 8
  %atomic_val4401 = alloca %struct._Py_atomic_int*, align 8
  %result4403 = alloca i32, align 4
  %volatile_data4405 = alloca i32*, align 8
  %order4408 = alloca i32, align 4
  %tmp4415 = alloca i32, align 4
  %v4439 = alloca %struct._object*, align 8
  %tmp4447 = alloca %struct._object*, align 8
  %_py_xdecref_tmp4454 = alloca %struct._object*, align 8
  %_py_decref_tmp4460 = alloca %struct._object*, align 8
  %atomic_val4475 = alloca %struct._Py_atomic_int*, align 8
  %result4477 = alloca i32, align 4
  %volatile_data4479 = alloca i32*, align 8
  %order4482 = alloca i32, align 4
  %tmp4489 = alloca i32, align 4
  %cell = alloca %struct._object*, align 8
  %atomic_val4524 = alloca %struct._Py_atomic_int*, align 8
  %result4526 = alloca i32, align 4
  %volatile_data4528 = alloca i32*, align 8
  %order4531 = alloca i32, align 4
  %tmp4538 = alloca i32, align 4
  %cell4563 = alloca %struct._object*, align 8
  %atomic_val4570 = alloca %struct._Py_atomic_int*, align 8
  %result4572 = alloca i32, align 4
  %volatile_data4574 = alloca i32*, align 8
  %order4577 = alloca i32, align 4
  %tmp4584 = alloca i32, align 4
  %name4608 = alloca %struct._object*, align 8
  %value4610 = alloca %struct._object*, align 8
  %locals4612 = alloca %struct._object*, align 8
  %idx = alloca i64, align 8
  %_py_xincref_tmp4627 = alloca %struct._object*, align 8
  %cell4652 = alloca %struct._object*, align 8
  %atomic_val4665 = alloca %struct._Py_atomic_int*, align 8
  %result4667 = alloca i32, align 4
  %volatile_data4669 = alloca i32*, align 8
  %order4672 = alloca i32, align 4
  %tmp4679 = alloca i32, align 4
  %cell4703 = alloca %struct._object*, align 8
  %value4707 = alloca %struct._object*, align 8
  %atomic_val4717 = alloca %struct._Py_atomic_int*, align 8
  %result4719 = alloca i32, align 4
  %volatile_data4721 = alloca i32*, align 8
  %order4724 = alloca i32, align 4
  %tmp4731 = alloca i32, align 4
  %v4755 = alloca %struct._object*, align 8
  %cell4758 = alloca %struct._object*, align 8
  %_py_decref_tmp4764 = alloca %struct._object*, align 8
  %atomic_val4776 = alloca %struct._Py_atomic_int*, align 8
  %result4778 = alloca i32, align 4
  %volatile_data4780 = alloca i32*, align 8
  %order4783 = alloca i32, align 4
  %tmp4790 = alloca i32, align 4
  %tup = alloca %struct._object*, align 8
  %item4826 = alloca %struct._object*, align 8
  %atomic_val4834 = alloca %struct._Py_atomic_int*, align 8
  %result4836 = alloca i32, align 4
  %volatile_data4838 = alloca i32*, align 8
  %order4841 = alloca i32, align 4
  %tmp4848 = alloca i32, align 4
  %list4872 = alloca %struct._object*, align 8
  %item4885 = alloca %struct._object*, align 8
  %atomic_val4893 = alloca %struct._Py_atomic_int*, align 8
  %result4895 = alloca i32, align 4
  %volatile_data4897 = alloca i32*, align 8
  %order4900 = alloca i32, align 4
  %tmp4907 = alloca i32, align 4
  %set4931 = alloca %struct._object*, align 8
  %err4934 = alloca i32, align 4
  %item4945 = alloca %struct._object*, align 8
  %_py_decref_tmp4954 = alloca %struct._object*, align 8
  %_py_decref_tmp4971 = alloca %struct._object*, align 8
  %atomic_val4985 = alloca %struct._Py_atomic_int*, align 8
  %result4987 = alloca i32, align 4
  %volatile_data4989 = alloca i32*, align 8
  %order4992 = alloca i32, align 4
  %tmp4999 = alloca i32, align 4
  %map = alloca %struct._object*, align 8
  %atomic_val5031 = alloca %struct._Py_atomic_int*, align 8
  %result5033 = alloca i32, align 4
  %volatile_data5035 = alloca i32*, align 8
  %order5038 = alloca i32, align 4
  %tmp5045 = alloca i32, align 4
  %key = alloca %struct._object*, align 8
  %value5064 = alloca %struct._object*, align 8
  %map5067 = alloca %struct._object*, align 8
  %err5070 = alloca i32, align 4
  %_py_decref_tmp5075 = alloca %struct._object*, align 8
  %_py_decref_tmp5088 = alloca %struct._object*, align 8
  %atomic_val5104 = alloca %struct._Py_atomic_int*, align 8
  %result5106 = alloca i32, align 4
  %volatile_data5108 = alloca i32*, align 8
  %order5111 = alloca i32, align 4
  %tmp5118 = alloca i32, align 4
  %key5142 = alloca %struct._object*, align 8
  %value5145 = alloca %struct._object*, align 8
  %map5148 = alloca %struct._object*, align 8
  %err5150 = alloca i32, align 4
  %_py_decref_tmp5158 = alloca %struct._object*, align 8
  %_py_decref_tmp5171 = alloca %struct._object*, align 8
  %atomic_val5187 = alloca %struct._Py_atomic_int*, align 8
  %result5189 = alloca i32, align 4
  %volatile_data5191 = alloca i32*, align 8
  %order5194 = alloca i32, align 4
  %tmp5201 = alloca i32, align 4
  %name5225 = alloca %struct._object*, align 8
  %owner5230 = alloca %struct._object*, align 8
  %res5233 = alloca %struct._object*, align 8
  %_py_decref_tmp5237 = alloca %struct._object*, align 8
  %atomic_val5254 = alloca %struct._Py_atomic_int*, align 8
  %result5256 = alloca i32, align 4
  %volatile_data5258 = alloca i32*, align 8
  %order5261 = alloca i32, align 4
  %tmp5268 = alloca i32, align 4
  %right5292 = alloca %struct._object*, align 8
  %left5295 = alloca %struct._object*, align 8
  %res5298 = alloca %struct._object*, align 8
  %_py_decref_tmp5302 = alloca %struct._object*, align 8
  %_py_decref_tmp5315 = alloca %struct._object*, align 8
  %atomic_val5332 = alloca %struct._Py_atomic_int*, align 8
  %result5334 = alloca i32, align 4
  %volatile_data5336 = alloca i32*, align 8
  %order5339 = alloca i32, align 4
  %tmp5346 = alloca i32, align 4
  %name5370 = alloca %struct._object*, align 8
  %func = alloca %struct._object*, align 8
  %from = alloca %struct._object*, align 8
  %level = alloca %struct._object*, align 8
  %args = alloca %struct._object*, align 8
  %res5381 = alloca %struct._object*, align 8
  %_py_decref_tmp5421 = alloca %struct._object*, align 8
  %_py_decref_tmp5434 = alloca %struct._object*, align 8
  %_py_decref_tmp5450 = alloca %struct._object*, align 8
  %_py_decref_tmp5466 = alloca %struct._object*, align 8
  %_py_decref_tmp5479 = alloca %struct._object*, align 8
  %atomic_val5496 = alloca %struct._Py_atomic_int*, align 8
  %result5498 = alloca i32, align 4
  %volatile_data5500 = alloca i32*, align 8
  %order5503 = alloca i32, align 4
  %tmp5510 = alloca i32, align 4
  %from5527 = alloca %struct._object*, align 8
  %locals5530 = alloca %struct._object*, align 8
  %err5532 = alloca i32, align 4
  %_py_decref_tmp5546 = alloca %struct._object*, align 8
  %atomic_val5562 = alloca %struct._Py_atomic_int*, align 8
  %result5564 = alloca i32, align 4
  %volatile_data5566 = alloca i32*, align 8
  %order5569 = alloca i32, align 4
  %tmp5576 = alloca i32, align 4
  %name5600 = alloca %struct._object*, align 8
  %from5605 = alloca %struct._object*, align 8
  %res5608 = alloca %struct._object*, align 8
  %atomic_val5616 = alloca %struct._Py_atomic_int*, align 8
  %result5618 = alloca i32, align 4
  %volatile_data5620 = alloca i32*, align 8
  %order5623 = alloca i32, align 4
  %tmp5630 = alloca i32, align 4
  %cond5675 = alloca %struct._object*, align 8
  %err5678 = alloca i32, align 4
  %_py_decref_tmp5684 = alloca %struct._object*, align 8
  %_py_decref_tmp5712 = alloca %struct._object*, align 8
  %_py_decref_tmp5740 = alloca %struct._object*, align 8
  %atomic_val5764 = alloca %struct._Py_atomic_int*, align 8
  %result5766 = alloca i32, align 4
  %volatile_data5768 = alloca i32*, align 8
  %order5771 = alloca i32, align 4
  %tmp5778 = alloca i32, align 4
  %cond5802 = alloca %struct._object*, align 8
  %err5805 = alloca i32, align 4
  %_py_decref_tmp5811 = alloca %struct._object*, align 8
  %_py_decref_tmp5839 = alloca %struct._object*, align 8
  %_py_decref_tmp5867 = alloca %struct._object*, align 8
  %atomic_val5891 = alloca %struct._Py_atomic_int*, align 8
  %result5893 = alloca i32, align 4
  %volatile_data5895 = alloca i32*, align 8
  %order5898 = alloca i32, align 4
  %tmp5905 = alloca i32, align 4
  %cond5929 = alloca %struct._object*, align 8
  %err5932 = alloca i32, align 4
  %_py_decref_tmp5939 = alloca %struct._object*, align 8
  %_py_decref_tmp5986 = alloca %struct._object*, align 8
  %atomic_val6007 = alloca %struct._Py_atomic_int*, align 8
  %result6009 = alloca i32, align 4
  %volatile_data6011 = alloca i32*, align 8
  %order6014 = alloca i32, align 4
  %tmp6021 = alloca i32, align 4
  %cond6045 = alloca %struct._object*, align 8
  %err6048 = alloca i32, align 4
  %_py_decref_tmp6055 = alloca %struct._object*, align 8
  %_py_decref_tmp6108 = alloca %struct._object*, align 8
  %atomic_val6123 = alloca %struct._Py_atomic_int*, align 8
  %result6125 = alloca i32, align 4
  %volatile_data6127 = alloca i32*, align 8
  %order6130 = alloca i32, align 4
  %tmp6137 = alloca i32, align 4
  %atomic_val6163 = alloca %struct._Py_atomic_int*, align 8
  %result6165 = alloca i32, align 4
  %volatile_data6167 = alloca i32*, align 8
  %order6170 = alloca i32, align 4
  %tmp6177 = alloca i32, align 4
  %iterable = alloca %struct._object*, align 8
  %iter = alloca %struct._object*, align 8
  %_py_decref_tmp6199 = alloca %struct._object*, align 8
  %atomic_val6216 = alloca %struct._Py_atomic_int*, align 8
  %result6218 = alloca i32, align 4
  %volatile_data6220 = alloca i32*, align 8
  %order6223 = alloca i32, align 4
  %tmp6230 = alloca i32, align 4
  %iter6254 = alloca %struct._object*, align 8
  %next = alloca %struct._object*, align 8
  %atomic_val6266 = alloca %struct._Py_atomic_int*, align 8
  %result6268 = alloca i32, align 4
  %volatile_data6270 = alloca i32*, align 8
  %order6273 = alloca i32, align 4
  %tmp6280 = alloca i32, align 4
  %_py_decref_tmp6315 = alloca %struct._object*, align 8
  %atomic_val6329 = alloca %struct._Py_atomic_int*, align 8
  %result6331 = alloca i32, align 4
  %volatile_data6333 = alloca i32*, align 8
  %order6336 = alloca i32, align 4
  %tmp6343 = alloca i32, align 4
  %atomic_val6409 = alloca %struct._Py_atomic_int*, align 8
  %result6411 = alloca i32, align 4
  %volatile_data6413 = alloca i32*, align 8
  %order6416 = alloca i32, align 4
  %tmp6423 = alloca i32, align 4
  %mgr = alloca %struct._object*, align 8
  %exit = alloca %struct._object*, align 8
  %enter = alloca %struct._object*, align 8
  %res6452 = alloca %struct._object*, align 8
  %_py_decref_tmp6461 = alloca %struct._object*, align 8
  %_py_decref_tmp6479 = alloca %struct._object*, align 8
  %atomic_val6507 = alloca %struct._Py_atomic_int*, align 8
  %result6509 = alloca i32, align 4
  %volatile_data6511 = alloca i32*, align 8
  %order6514 = alloca i32, align 4
  %tmp6521 = alloca i32, align 4
  %exit_func = alloca %struct._object*, align 8
  %exc6539 = alloca %struct._object*, align 8
  %val6542 = alloca %struct._object*, align 8
  %tb6544 = alloca %struct._object*, align 8
  %res6546 = alloca %struct._object*, align 8
  %err6548 = alloca i32, align 4
  %tp2 = alloca %struct._object*, align 8
  %exc2 = alloca %struct._object*, align 8
  %tb2 = alloca %struct._object*, align 8
  %block = alloca %struct.PyTryBlock*, align 8
  %_py_decref_tmp6598 = alloca %struct._object*, align 8
  %_py_decref_tmp6621 = alloca %struct._object*, align 8
  %atomic_val6644 = alloca %struct._Py_atomic_int*, align 8
  %result6646 = alloca i32, align 4
  %volatile_data6648 = alloca i32*, align 8
  %order6651 = alloca i32, align 4
  %tmp6658 = alloca i32, align 4
  %sp = alloca %struct._object**, align 8
  %res6683 = alloca %struct._object*, align 8
  %atomic_val6691 = alloca %struct._Py_atomic_int*, align 8
  %result6693 = alloca i32, align 4
  %volatile_data6695 = alloca i32*, align 8
  %order6698 = alloca i32, align 4
  %tmp6705 = alloca i32, align 4
  %na = alloca i32, align 4
  %nk = alloca i32, align 4
  %flags = alloca i32, align 4
  %n = alloca i32, align 4
  %pfunc = alloca %struct._object**, align 8
  %func6756 = alloca %struct._object*, align 8
  %sp6758 = alloca %struct._object**, align 8
  %res6760 = alloca %struct._object*, align 8
  %self = alloca %struct._object*, align 8
  %_py_decref_tmp6789 = alloca %struct._object*, align 8
  %_py_decref_tmp6808 = alloca %struct._object*, align 8
  %o = alloca %struct._object*, align 8
  %_py_decref_tmp6827 = alloca %struct._object*, align 8
  %atomic_val6845 = alloca %struct._Py_atomic_int*, align 8
  %result6847 = alloca i32, align 4
  %volatile_data6849 = alloca i32*, align 8
  %order6852 = alloca i32, align 4
  %tmp6859 = alloca i32, align 4
  %posdefaults = alloca i32, align 4
  %kwdefaults = alloca i32, align 4
  %num_annotations = alloca i32, align 4
  %qualname = alloca %struct._object*, align 8
  %code = alloca %struct._object*, align 8
  %func6903 = alloca %struct._object*, align 8
  %_py_decref_tmp6908 = alloca %struct._object*, align 8
  %_py_decref_tmp6921 = alloca %struct._object*, align 8
  %closure = alloca %struct._object*, align 8
  %_py_decref_tmp6947 = alloca %struct._object*, align 8
  %_py_decref_tmp6960 = alloca %struct._object*, align 8
  %_py_decref_tmp6974 = alloca %struct._object*, align 8
  %name_ix = alloca i64, align 8
  %names6991 = alloca %struct._object*, align 8
  %anns = alloca %struct._object*, align 8
  %_py_decref_tmp7000 = alloca %struct._object*, align 8
  %name7018 = alloca %struct._object*, align 8
  %value7020 = alloca %struct._object*, align 8
  %err7022 = alloca i32, align 4
  %_py_decref_tmp7030 = alloca %struct._object*, align 8
  %_py_decref_tmp7046 = alloca %struct._object*, align 8
  %_py_decref_tmp7059 = alloca %struct._object*, align 8
  %_py_decref_tmp7078 = alloca %struct._object*, align 8
  %_py_decref_tmp7091 = alloca %struct._object*, align 8
  %_py_decref_tmp7105 = alloca %struct._object*, align 8
  %_py_decref_tmp7118 = alloca %struct._object*, align 8
  %defs = alloca %struct._object*, align 8
  %_py_decref_tmp7140 = alloca %struct._object*, align 8
  %v7158 = alloca %struct._object*, align 8
  %key7161 = alloca %struct._object*, align 8
  %err7164 = alloca i32, align 4
  %_py_decref_tmp7168 = alloca %struct._object*, align 8
  %_py_decref_tmp7181 = alloca %struct._object*, align 8
  %_py_decref_tmp7197 = alloca %struct._object*, align 8
  %_py_decref_tmp7210 = alloca %struct._object*, align 8
  %_py_decref_tmp7229 = alloca %struct._object*, align 8
  %_py_decref_tmp7242 = alloca %struct._object*, align 8
  %_py_decref_tmp7256 = alloca %struct._object*, align 8
  %defs7272 = alloca %struct._object*, align 8
  %_py_decref_tmp7280 = alloca %struct._object*, align 8
  %_py_decref_tmp7308 = alloca %struct._object*, align 8
  %_py_decref_tmp7321 = alloca %struct._object*, align 8
  %_py_decref_tmp7335 = alloca %struct._object*, align 8
  %atomic_val7349 = alloca %struct._Py_atomic_int*, align 8
  %result7351 = alloca i32, align 4
  %volatile_data7353 = alloca i32*, align 8
  %order7356 = alloca i32, align 4
  %tmp7363 = alloca i32, align 4
  %start = alloca %struct._object*, align 8
  %stop = alloca %struct._object*, align 8
  %step = alloca %struct._object*, align 8
  %slice = alloca %struct._object*, align 8
  %_py_decref_tmp7401 = alloca %struct._object*, align 8
  %_py_decref_tmp7414 = alloca %struct._object*, align 8
  %_py_xdecref_tmp7427 = alloca %struct._object*, align 8
  %_py_decref_tmp7433 = alloca %struct._object*, align 8
  %atomic_val7452 = alloca %struct._Py_atomic_int*, align 8
  %result7454 = alloca i32, align 4
  %volatile_data7456 = alloca i32*, align 8
  %order7459 = alloca i32, align 4
  %tmp7466 = alloca i32, align 4
  %b7524 = alloca %struct.PyTryBlock*, align 8
  %_py_decref_tmp7541 = alloca %struct._object*, align 8
  %type7560 = alloca %struct._object*, align 8
  %value7562 = alloca %struct._object*, align 8
  %traceback7564 = alloca %struct._object*, align 8
  %_py_xdecref_tmp7580 = alloca %struct._object*, align 8
  %_py_decref_tmp7586 = alloca %struct._object*, align 8
  %_py_xdecref_tmp7611 = alloca %struct._object*, align 8
  %_py_decref_tmp7617 = alloca %struct._object*, align 8
  %_py_xdecref_tmp7632 = alloca %struct._object*, align 8
  %_py_decref_tmp7638 = alloca %struct._object*, align 8
  %_py_xdecref_tmp7653 = alloca %struct._object*, align 8
  %_py_decref_tmp7659 = alloca %struct._object*, align 8
  %v7685 = alloca %struct._object*, align 8
  %_py_xdecref_tmp7689 = alloca %struct._object*, align 8
  %_py_decref_tmp7695 = alloca %struct._object*, align 8
  %exc7731 = alloca %struct._object*, align 8
  %val7733 = alloca %struct._object*, align 8
  %tb7735 = alloca %struct._object*, align 8
  %handler = alloca i32, align 4
  %o7816 = alloca %struct._object*, align 8
  %_py_xdecref_tmp7820 = alloca %struct._object*, align 8
  %_py_decref_tmp7826 = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %_py_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp7900 = alloca %struct._object*, align 8
  %_py_tmp7941 = alloca %struct._object*, align 8
  %_py_decref_tmp7947 = alloca %struct._object*, align 8
  %atomic_val7966 = alloca %struct._Py_atomic_address*, align 8
  %result7968 = alloca i8*, align 8
  %volatile_data7970 = alloca i8**, align 8
  %order7973 = alloca i32, align 4
  %tmp7980 = alloca i8*, align 8
  %atomic_val7996 = alloca %struct._Py_atomic_address*, align 8
  %result7998 = alloca i8*, align 8
  %volatile_data8000 = alloca i8**, align 8
  %order8003 = alloca i32, align 4
  %tmp8010 = alloca i8*, align 8
  store %struct._frame* %f, %struct._frame** %f.addr, align 8
  store i32 %throwflag, i32* %throwflag.addr, align 4
  store %struct._object* null, %struct._object** %retval1, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.3 [
    i32 1, label %sw.bb.2
    i32 3, label %sw.bb.2
    i32 4, label %sw.bb.2
  ]

sw.bb.2:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4

sw.default.3:                                     ; preds = %sw.epilog
  br label %sw.epilog.4

sw.epilog.4:                                      ; preds = %sw.default.3, %sw.bb.2
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  store i32 -1, i32* %instr_ub, align 4
  store i32 0, i32* %instr_lb, align 4
  store i32 -1, i32* %instr_prev, align 4
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val13, align 8
  %11 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val13, align 8
  %_value18 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %11, i32 0, i32 0
  store i8** %_value18, i8*** %volatile_data17, align 8
  store i32 0, i32* %order20, align 4
  %12 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val13, align 8
  %13 = bitcast %struct._Py_atomic_address* %12 to i8*
  %14 = load i32, i32* %order20, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %13, i32 %14)
  %15 = load i32, i32* %order20, align 4
  switch i32 %15, label %sw.default.22 [
    i32 2, label %sw.bb.21
    i32 3, label %sw.bb.21
    i32 4, label %sw.bb.21
  ]

sw.bb.21:                                         ; preds = %sw.epilog.4, %sw.epilog.4, %sw.epilog.4
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.23

sw.default.22:                                    ; preds = %sw.epilog.4
  br label %sw.epilog.23

sw.epilog.23:                                     ; preds = %sw.default.22, %sw.bb.21
  %16 = load i8**, i8*** %volatile_data17, align 8
  %17 = load volatile i8*, i8** %16, align 8
  store i8* %17, i8** %result15, align 8
  %18 = load i32, i32* %order20, align 4
  switch i32 %18, label %sw.default.25 [
    i32 1, label %sw.bb.24
    i32 3, label %sw.bb.24
    i32 4, label %sw.bb.24
  ]

sw.bb.24:                                         ; preds = %sw.epilog.23, %sw.epilog.23, %sw.epilog.23
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.26

sw.default.25:                                    ; preds = %sw.epilog.23
  br label %sw.epilog.26

sw.epilog.26:                                     ; preds = %sw.default.25, %sw.bb.24
  %19 = load i8*, i8** %result15, align 8
  store i8* %19, i8** %tmp27
  %20 = load i8*, i8** %tmp27
  %21 = bitcast i8* %20 to %struct._ts*
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %21, i32 0, i32 4
  %22 = load i32, i32* %recursion_depth, align 4
  %inc = add i32 %22, 1
  store i32 %inc, i32* %recursion_depth, align 4
  %23 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp = icmp sgt i32 %inc, %23
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %sw.epilog.26
  %call = call i32 @_Py_CheckRecursiveCall(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %sw.epilog.26
  %24 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %25 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame = getelementptr inbounds %struct._ts, %struct._ts* %25, i32 0, i32 3
  store %struct._frame* %24, %struct._frame** %frame, align 8
  %26 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %26, i32 0, i32 8
  %27 = load i32, i32* %use_tracing, align 4
  %tobool28 = icmp ne i32 %27, 0
  br i1 %tobool28, label %if.then.29, label %if.end.46

if.then.29:                                       ; preds = %if.end
  %28 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc = getelementptr inbounds %struct._ts, %struct._ts* %28, i32 0, i32 10
  %29 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc, align 8
  %cmp30 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %29, null
  br i1 %cmp30, label %if.then.31, label %if.end.37

if.then.31:                                       ; preds = %if.then.29
  %30 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc32 = getelementptr inbounds %struct._ts, %struct._ts* %30, i32 0, i32 10
  %31 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc32, align 8
  %32 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj = getelementptr inbounds %struct._ts, %struct._ts* %32, i32 0, i32 12
  %33 = load %struct._object*, %struct._object** %c_traceobj, align 8
  %34 = load %struct._ts*, %struct._ts** %tstate, align 8
  %35 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call33 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %31, %struct._object* %33, %struct._ts* %34, %struct._frame* %35, i32 0, %struct._object* @_Py_NoneStruct)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.then.35, label %if.end.36

if.then.35:                                       ; preds = %if.then.31
  br label %exit_eval_frame

if.end.36:                                        ; preds = %if.then.31
  br label %if.end.37

if.end.37:                                        ; preds = %if.end.36, %if.then.29
  %36 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %36, i32 0, i32 9
  %37 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %cmp38 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %37, null
  br i1 %cmp38, label %if.then.39, label %if.end.45

if.then.39:                                       ; preds = %if.end.37
  %38 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc40 = getelementptr inbounds %struct._ts, %struct._ts* %38, i32 0, i32 9
  %39 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc40, align 8
  %40 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj = getelementptr inbounds %struct._ts, %struct._ts* %40, i32 0, i32 11
  %41 = load %struct._object*, %struct._object** %c_profileobj, align 8
  %42 = load %struct._ts*, %struct._ts** %tstate, align 8
  %43 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call41 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %39, %struct._object* %41, %struct._ts* %42, %struct._frame* %43, i32 0, %struct._object* @_Py_NoneStruct)
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then.43, label %if.end.44

if.then.43:                                       ; preds = %if.then.39
  br label %exit_eval_frame

if.end.44:                                        ; preds = %if.then.39
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.end.37
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.end
  %44 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_code = getelementptr inbounds %struct._frame, %struct._frame* %44, i32 0, i32 2
  %45 = load %struct.PyCodeObject*, %struct.PyCodeObject** %f_code, align 8
  store %struct.PyCodeObject* %45, %struct.PyCodeObject** %co, align 8
  %46 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_names = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %46, i32 0, i32 8
  %47 = load %struct._object*, %struct._object** %co_names, align 8
  store %struct._object* %47, %struct._object** %names, align 8
  %48 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_consts = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %48, i32 0, i32 7
  %49 = load %struct._object*, %struct._object** %co_consts, align 8
  store %struct._object* %49, %struct._object** %consts, align 8
  %50 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_localsplus = getelementptr inbounds %struct._frame, %struct._frame* %50, i32 0, i32 18
  %arraydecay = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus, i32 0, i32 0
  store %struct._object** %arraydecay, %struct._object*** %fastlocals, align 8
  %51 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_localsplus47 = getelementptr inbounds %struct._frame, %struct._frame* %51, i32 0, i32 18
  %arraydecay48 = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus47, i32 0, i32 0
  %52 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_nlocals = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %52, i32 0, i32 3
  %53 = load i32, i32* %co_nlocals, align 4
  %idx.ext = sext i32 %53 to i64
  %add.ptr = getelementptr %struct._object*, %struct._object** %arraydecay48, i64 %idx.ext
  store %struct._object** %add.ptr, %struct._object*** %freevars, align 8
  %54 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_code = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %54, i32 0, i32 6
  %55 = load %struct._object*, %struct._object** %co_code, align 8
  %56 = bitcast %struct._object* %55 to %struct.PyBytesObject*
  %ob_sval = getelementptr inbounds %struct.PyBytesObject, %struct.PyBytesObject* %56, i32 0, i32 2
  %arraydecay49 = getelementptr inbounds [1 x i8], [1 x i8]* %ob_sval, i32 0, i32 0
  store i8* %arraydecay49, i8** %first_instr, align 8
  %57 = load i8*, i8** %first_instr, align 8
  %58 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti = getelementptr inbounds %struct._frame, %struct._frame* %58, i32 0, i32 13
  %59 = load i32, i32* %f_lasti, align 4
  %idx.ext50 = sext i32 %59 to i64
  %add.ptr51 = getelementptr i8, i8* %57, i64 %idx.ext50
  %add.ptr52 = getelementptr i8, i8* %add.ptr51, i64 1
  store i8* %add.ptr52, i8** %next_instr, align 8
  %60 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop = getelementptr inbounds %struct._frame, %struct._frame* %60, i32 0, i32 7
  %61 = load %struct._object**, %struct._object*** %f_stacktop, align 8
  store %struct._object** %61, %struct._object*** %stack_pointer, align 8
  %62 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop53 = getelementptr inbounds %struct._frame, %struct._frame* %62, i32 0, i32 7
  store %struct._object** null, %struct._object*** %f_stacktop53, align 8
  %63 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_executing = getelementptr inbounds %struct._frame, %struct._frame* %63, i32 0, i32 16
  store i8 1, i8* %f_executing, align 1
  %64 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %64, i32 0, i32 5
  %65 = load i32, i32* %co_flags, align 4
  %and = and i32 %65, 32
  %tobool54 = icmp ne i32 %and, 0
  br i1 %tobool54, label %land.lhs.true.55, label %if.end.64

land.lhs.true.55:                                 ; preds = %if.end.46
  %66 = load i32, i32* %throwflag.addr, align 4
  %tobool56 = icmp ne i32 %66, 0
  br i1 %tobool56, label %if.end.64, label %if.then.57

if.then.57:                                       ; preds = %land.lhs.true.55
  %67 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type = getelementptr inbounds %struct._frame, %struct._frame* %67, i32 0, i32 9
  %68 = load %struct._object*, %struct._object** %f_exc_type, align 8
  %cmp58 = icmp ne %struct._object* %68, null
  br i1 %cmp58, label %land.lhs.true.59, label %if.else

land.lhs.true.59:                                 ; preds = %if.then.57
  %69 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type60 = getelementptr inbounds %struct._frame, %struct._frame* %69, i32 0, i32 9
  %70 = load %struct._object*, %struct._object** %f_exc_type60, align 8
  %cmp61 = icmp ne %struct._object* %70, @_Py_NoneStruct
  br i1 %cmp61, label %if.then.62, label %if.else

if.then.62:                                       ; preds = %land.lhs.true.59
  %71 = load %struct._ts*, %struct._ts** %tstate, align 8
  %72 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @swap_exc_state(%struct._ts* %71, %struct._frame* %72)
  br label %if.end.63

if.else:                                          ; preds = %land.lhs.true.59, %if.then.57
  %73 = load %struct._ts*, %struct._ts** %tstate, align 8
  %74 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @save_exc_state(%struct._ts* %73, %struct._frame* %74)
  br label %if.end.63

if.end.63:                                        ; preds = %if.else, %if.then.62
  br label %if.end.64

if.end.64:                                        ; preds = %if.end.63, %land.lhs.true.55, %if.end.46
  store i32 1, i32* %why, align 4
  %75 = load i32, i32* %throwflag.addr, align 4
  %tobool65 = icmp ne i32 %75, 0
  br i1 %tobool65, label %if.then.66, label %if.end.67

if.then.66:                                       ; preds = %if.end.64
  br label %error

if.end.67:                                        ; preds = %if.end.64
  br label %for.cond

for.cond:                                         ; preds = %if.end.7804, %if.end.7480, %if.end.7377, %if.end.6873, %if.end.6719, %if.end.6672, %if.end.6535, %if.end.6437, %if.end.6357, %if.end.6294, %if.end.6244, %if.end.6191, %if.end.6151, %if.end.6035, %if.end.5919, %if.end.5792, %if.end.5644, %if.end.5590, %if.end.5524, %if.end.5360, %if.end.5282, %if.end.5215, %if.end.5132, %if.end.5059, %if.end.5013, %if.end.4921, %if.end.4862, %if.end.4804, %if.end.4745, %if.end.4693, %if.end.4598, %if.end.4552, %if.end.4503, %if.end.4429, %if.end.4326, %if.end.4185, %if.end.4134, %if.end.4068, %if.end.4002, %if.end.3920, %if.end.3838, %if.end.3717, %if.end.3659, %if.end.3568, %if.end.3505, %if.end.3411, %if.end.3232, %if.end.3162, %if.end.3016, %if.end.2892, %if.end.2806, %if.end.2735, %if.end.2648, %if.end.2577, %if.end.2506, %if.end.2435, %if.end.2364, %if.end.2293, %if.end.2222, %if.end.2140, %if.end.2070, %if.end.1999, %if.end.1928, %if.end.1857, %if.end.1786, %if.end.1721, %if.end.1657, %if.end.1586, %if.end.1515, %if.end.1444, %if.end.1373, %if.end.1302, %if.end.1233, %if.end.1163, %if.end.1082, %if.end.1007, %if.end.936, %if.end.868, %if.end.799, %if.end.730, %if.end.672, %if.end.636, %if.end.581, %if.end.526, %if.end.67
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val69, align 8
  %76 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val69, align 8
  %_value74 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %76, i32 0, i32 0
  store i32* %_value74, i32** %volatile_data73, align 8
  store i32 0, i32* %order76, align 4
  %77 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val69, align 8
  %78 = bitcast %struct._Py_atomic_int* %77 to i8*
  %79 = load i32, i32* %order76, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %78, i32 %79)
  %80 = load i32, i32* %order76, align 4
  switch i32 %80, label %sw.default.78 [
    i32 2, label %sw.bb.77
    i32 3, label %sw.bb.77
    i32 4, label %sw.bb.77
  ]

sw.bb.77:                                         ; preds = %for.cond, %for.cond, %for.cond
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.79

sw.default.78:                                    ; preds = %for.cond
  br label %sw.epilog.79

sw.epilog.79:                                     ; preds = %sw.default.78, %sw.bb.77
  %81 = load i32*, i32** %volatile_data73, align 8
  %82 = load volatile i32, i32* %81, align 4
  store i32 %82, i32* %result71, align 4
  %83 = load i32, i32* %order76, align 4
  switch i32 %83, label %sw.default.81 [
    i32 1, label %sw.bb.80
    i32 3, label %sw.bb.80
    i32 4, label %sw.bb.80
  ]

sw.bb.80:                                         ; preds = %sw.epilog.79, %sw.epilog.79, %sw.epilog.79
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.82

sw.default.81:                                    ; preds = %sw.epilog.79
  br label %sw.epilog.82

sw.epilog.82:                                     ; preds = %sw.default.81, %sw.bb.80
  %84 = load i32, i32* %result71, align 4
  store i32 %84, i32* %tmp83
  %85 = load i32, i32* %tmp83
  %tobool84 = icmp ne i32 %85, 0
  br i1 %tobool84, label %if.then.85, label %if.end.204

if.then.85:                                       ; preds = %sw.epilog.82
  %86 = load i8*, i8** %next_instr, align 8
  %87 = load i8, i8* %86, align 1
  %conv = zext i8 %87 to i32
  %cmp86 = icmp eq i32 %conv, 122
  br i1 %cmp86, label %if.then.88, label %if.end.89

if.then.88:                                       ; preds = %if.then.85
  br label %fast_next_opcode

if.end.89:                                        ; preds = %if.then.85
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val91, align 8
  %88 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val91, align 8
  %_value96 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %88, i32 0, i32 0
  store i32* %_value96, i32** %volatile_data95, align 8
  store i32 0, i32* %order98, align 4
  %89 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val91, align 8
  %90 = bitcast %struct._Py_atomic_int* %89 to i8*
  %91 = load i32, i32* %order98, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %90, i32 %91)
  %92 = load i32, i32* %order98, align 4
  switch i32 %92, label %sw.default.100 [
    i32 2, label %sw.bb.99
    i32 3, label %sw.bb.99
    i32 4, label %sw.bb.99
  ]

sw.bb.99:                                         ; preds = %if.end.89, %if.end.89, %if.end.89
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.101

sw.default.100:                                   ; preds = %if.end.89
  br label %sw.epilog.101

sw.epilog.101:                                    ; preds = %sw.default.100, %sw.bb.99
  %93 = load i32*, i32** %volatile_data95, align 8
  %94 = load volatile i32, i32* %93, align 4
  store i32 %94, i32* %result93, align 4
  %95 = load i32, i32* %order98, align 4
  switch i32 %95, label %sw.default.103 [
    i32 1, label %sw.bb.102
    i32 3, label %sw.bb.102
    i32 4, label %sw.bb.102
  ]

sw.bb.102:                                        ; preds = %sw.epilog.101, %sw.epilog.101, %sw.epilog.101
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.104

sw.default.103:                                   ; preds = %sw.epilog.101
  br label %sw.epilog.104

sw.epilog.104:                                    ; preds = %sw.default.103, %sw.bb.102
  %96 = load i32, i32* %result93, align 4
  store i32 %96, i32* %tmp105
  %97 = load i32, i32* %tmp105
  %tobool106 = icmp ne i32 %97, 0
  br i1 %tobool106, label %if.then.107, label %if.end.113

if.then.107:                                      ; preds = %sw.epilog.104
  %call108 = call i32 @Py_MakePendingCalls()
  %cmp109 = icmp slt i32 %call108, 0
  br i1 %cmp109, label %if.then.111, label %if.end.112

if.then.111:                                      ; preds = %if.then.107
  br label %error

if.end.112:                                       ; preds = %if.then.107
  br label %if.end.113

if.end.113:                                       ; preds = %if.end.112, %sw.epilog.104
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val115, align 8
  %98 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val115, align 8
  %_value120 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %98, i32 0, i32 0
  store i32* %_value120, i32** %volatile_data119, align 8
  store i32 0, i32* %order122, align 4
  %99 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val115, align 8
  %100 = bitcast %struct._Py_atomic_int* %99 to i8*
  %101 = load i32, i32* %order122, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %100, i32 %101)
  %102 = load i32, i32* %order122, align 4
  switch i32 %102, label %sw.default.124 [
    i32 2, label %sw.bb.123
    i32 3, label %sw.bb.123
    i32 4, label %sw.bb.123
  ]

sw.bb.123:                                        ; preds = %if.end.113, %if.end.113, %if.end.113
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.125

sw.default.124:                                   ; preds = %if.end.113
  br label %sw.epilog.125

sw.epilog.125:                                    ; preds = %sw.default.124, %sw.bb.123
  %103 = load i32*, i32** %volatile_data119, align 8
  %104 = load volatile i32, i32* %103, align 4
  store i32 %104, i32* %result117, align 4
  %105 = load i32, i32* %order122, align 4
  switch i32 %105, label %sw.default.127 [
    i32 1, label %sw.bb.126
    i32 3, label %sw.bb.126
    i32 4, label %sw.bb.126
  ]

sw.bb.126:                                        ; preds = %sw.epilog.125, %sw.epilog.125, %sw.epilog.125
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.128

sw.default.127:                                   ; preds = %sw.epilog.125
  br label %sw.epilog.128

sw.epilog.128:                                    ; preds = %sw.default.127, %sw.bb.126
  %106 = load i32, i32* %result117, align 4
  store i32 %106, i32* %tmp129
  %107 = load i32, i32* %tmp129
  %tobool130 = icmp ne i32 %107, 0
  br i1 %tobool130, label %if.then.131, label %if.end.142

if.then.131:                                      ; preds = %sw.epilog.128
  %call132 = call %struct._ts* @PyThreadState_Swap(%struct._ts* null)
  %108 = load %struct._ts*, %struct._ts** %tstate, align 8
  %cmp133 = icmp ne %struct._ts* %call132, %108
  br i1 %cmp133, label %if.then.135, label %if.end.136

if.then.135:                                      ; preds = %if.then.131
  call void @Py_FatalError(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i32 0, i32 0)) #7
  unreachable

if.end.136:                                       ; preds = %if.then.131
  %109 = load %struct._ts*, %struct._ts** %tstate, align 8
  call void @drop_gil(%struct._ts* %109)
  %110 = load %struct._ts*, %struct._ts** %tstate, align 8
  call void @take_gil(%struct._ts* %110)
  %111 = load %struct._ts*, %struct._ts** %tstate, align 8
  %call137 = call %struct._ts* @PyThreadState_Swap(%struct._ts* %111)
  %cmp138 = icmp ne %struct._ts* %call137, null
  br i1 %cmp138, label %if.then.140, label %if.end.141

if.then.140:                                      ; preds = %if.end.136
  call void @Py_FatalError(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i32 0, i32 0)) #7
  unreachable

if.end.141:                                       ; preds = %if.end.136
  br label %if.end.142

if.end.142:                                       ; preds = %if.end.141, %sw.epilog.128
  %112 = load %struct._ts*, %struct._ts** %tstate, align 8
  %async_exc = getelementptr inbounds %struct._ts, %struct._ts* %112, i32 0, i32 21
  %113 = load %struct._object*, %struct._object** %async_exc, align 8
  %cmp143 = icmp ne %struct._object* %113, null
  br i1 %cmp143, label %if.then.145, label %if.end.203

if.then.145:                                      ; preds = %if.end.142
  %114 = load %struct._ts*, %struct._ts** %tstate, align 8
  %async_exc147 = getelementptr inbounds %struct._ts, %struct._ts* %114, i32 0, i32 21
  %115 = load %struct._object*, %struct._object** %async_exc147, align 8
  store %struct._object* %115, %struct._object** %exc, align 8
  %116 = load %struct._ts*, %struct._ts** %tstate, align 8
  %async_exc148 = getelementptr inbounds %struct._ts, %struct._ts* %116, i32 0, i32 21
  store %struct._object* null, %struct._object** %async_exc148, align 8
  br label %do.body

do.body:                                          ; preds = %if.then.145
  store i32 0, i32* @pending_async_exc, align 4
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val150, align 8
  store %struct._Py_atomic_int* @gil_drop_request, %struct._Py_atomic_int** %atomic_val153, align 8
  %117 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val153, align 8
  %_value158 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %117, i32 0, i32 0
  store i32* %_value158, i32** %volatile_data157, align 8
  store i32 0, i32* %order160, align 4
  %118 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val153, align 8
  %119 = bitcast %struct._Py_atomic_int* %118 to i8*
  %120 = load i32, i32* %order160, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %119, i32 %120)
  %121 = load i32, i32* %order160, align 4
  switch i32 %121, label %sw.default.162 [
    i32 2, label %sw.bb.161
    i32 3, label %sw.bb.161
    i32 4, label %sw.bb.161
  ]

sw.bb.161:                                        ; preds = %do.body, %do.body, %do.body
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.163

sw.default.162:                                   ; preds = %do.body
  br label %sw.epilog.163

sw.epilog.163:                                    ; preds = %sw.default.162, %sw.bb.161
  %122 = load i32*, i32** %volatile_data157, align 8
  %123 = load volatile i32, i32* %122, align 4
  store i32 %123, i32* %result155, align 4
  %124 = load i32, i32* %order160, align 4
  switch i32 %124, label %sw.default.165 [
    i32 1, label %sw.bb.164
    i32 3, label %sw.bb.164
    i32 4, label %sw.bb.164
  ]

sw.bb.164:                                        ; preds = %sw.epilog.163, %sw.epilog.163, %sw.epilog.163
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.166

sw.default.165:                                   ; preds = %sw.epilog.163
  br label %sw.epilog.166

sw.epilog.166:                                    ; preds = %sw.default.165, %sw.bb.164
  %125 = load i32, i32* %result155, align 4
  store i32 %125, i32* %tmp167
  %126 = load i32, i32* %tmp167
  store %struct._Py_atomic_int* @pendingcalls_to_do, %struct._Py_atomic_int** %atomic_val169, align 8
  %127 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val169, align 8
  %_value174 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %127, i32 0, i32 0
  store i32* %_value174, i32** %volatile_data173, align 8
  store i32 0, i32* %order176, align 4
  %128 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val169, align 8
  %129 = bitcast %struct._Py_atomic_int* %128 to i8*
  %130 = load i32, i32* %order176, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %129, i32 %130)
  %131 = load i32, i32* %order176, align 4
  switch i32 %131, label %sw.default.178 [
    i32 2, label %sw.bb.177
    i32 3, label %sw.bb.177
    i32 4, label %sw.bb.177
  ]

sw.bb.177:                                        ; preds = %sw.epilog.166, %sw.epilog.166, %sw.epilog.166
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.179

sw.default.178:                                   ; preds = %sw.epilog.166
  br label %sw.epilog.179

sw.epilog.179:                                    ; preds = %sw.default.178, %sw.bb.177
  %132 = load i32*, i32** %volatile_data173, align 8
  %133 = load volatile i32, i32* %132, align 4
  store i32 %133, i32* %result171, align 4
  %134 = load i32, i32* %order176, align 4
  switch i32 %134, label %sw.default.181 [
    i32 1, label %sw.bb.180
    i32 3, label %sw.bb.180
    i32 4, label %sw.bb.180
  ]

sw.bb.180:                                        ; preds = %sw.epilog.179, %sw.epilog.179, %sw.epilog.179
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.182

sw.default.181:                                   ; preds = %sw.epilog.179
  br label %sw.epilog.182

sw.epilog.182:                                    ; preds = %sw.default.181, %sw.bb.180
  %135 = load i32, i32* %result171, align 4
  store i32 %135, i32* %tmp183
  %136 = load i32, i32* %tmp183
  %or = or i32 %126, %136
  %137 = load i32, i32* @pending_async_exc, align 4
  %or184 = or i32 %or, %137
  store i32 %or184, i32* %new_val, align 4
  %138 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val150, align 8
  %_value187 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %138, i32 0, i32 0
  store i32* %_value187, i32** %volatile_data186, align 8
  store i32 0, i32* %order189, align 4
  %139 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val150, align 8
  %140 = bitcast %struct._Py_atomic_int* %139 to i8*
  %141 = load i32, i32* %order189, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %140, i32 %141)
  %142 = load i32, i32* %order189, align 4
  switch i32 %142, label %sw.epilog.194 [
    i32 2, label %sw.bb.190
    i32 0, label %sw.bb.191
    i32 1, label %sw.bb.192
    i32 3, label %sw.bb.192
    i32 4, label %sw.bb.192
  ]

sw.bb.190:                                        ; preds = %sw.epilog.182
  call void @_Py_atomic_signal_fence(i32 2)
  br label %sw.bb.191

sw.bb.191:                                        ; preds = %sw.epilog.182, %sw.bb.190
  %143 = load i32, i32* %new_val, align 4
  %144 = load i32*, i32** %volatile_data186, align 8
  store volatile i32 %143, i32* %144, align 4
  br label %sw.epilog.194

sw.bb.192:                                        ; preds = %sw.epilog.182, %sw.epilog.182, %sw.epilog.182
  %145 = load i32, i32* %new_val, align 4
  %146 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val150, align 8
  %_value193 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %146, i32 0, i32 0
  %147 = call i32 asm sideeffect "xchg $0, $1", "=r,*m,0,~{memory},~{dirflag},~{fpsr},~{flags}"(i32* %_value193, i32 %145) #6, !srcloc !23
  store i32 %147, i32* %new_val, align 4
  br label %sw.epilog.194

sw.epilog.194:                                    ; preds = %sw.epilog.182, %sw.bb.192, %sw.bb.191
  br label %do.end

do.end:                                           ; preds = %sw.epilog.194
  %148 = load %struct._object*, %struct._object** %exc, align 8
  call void @PyErr_SetNone(%struct._object* %148)
  br label %do.body.195

do.body.195:                                      ; preds = %do.end
  %149 = load %struct._object*, %struct._object** %exc, align 8
  store %struct._object* %149, %struct._object** %_py_decref_tmp, align 8
  %150 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %150, i32 0, i32 0
  %151 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %151, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp197 = icmp ne i64 %dec, 0
  br i1 %cmp197, label %if.then.199, label %if.else.200

if.then.199:                                      ; preds = %do.body.195
  br label %if.end.201

if.else.200:                                      ; preds = %do.body.195
  %152 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %152, i32 0, i32 1
  %153 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %153, i32 0, i32 4
  %154 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %155 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %154(%struct._object* %155)
  br label %if.end.201

if.end.201:                                       ; preds = %if.else.200, %if.then.199
  br label %do.end.202

do.end.202:                                       ; preds = %if.end.201
  br label %error

if.end.203:                                       ; preds = %if.end.142
  br label %if.end.204

if.end.204:                                       ; preds = %if.end.203, %sw.epilog.82
  br label %fast_next_opcode

fast_next_opcode:                                 ; preds = %if.end.7479, %if.end.7376, %if.end.6872, %if.end.6718, %if.end.6671, %if.end.6534, %if.end.6436, %if.end.6356, %if.end.6293, %if.end.6243, %if.end.6190, %if.end.6150, %if.end.6093, %if.end.6076, %if.end.6034, %if.end.5977, %if.end.5960, %if.end.5918, %if.end.5862, %if.end.5832, %if.end.5791, %if.end.5735, %if.end.5705, %if.end.5665, %if.end.5643, %if.end.5589, %if.end.5523, %if.end.5359, %if.end.5281, %if.end.5214, %if.end.5131, %if.end.5058, %if.end.5012, %if.end.4920, %if.end.4861, %if.end.4803, %if.end.4744, %if.end.4692, %if.end.4597, %if.end.4551, %if.end.4502, %if.end.4428, %if.end.4325, %if.end.4184, %if.end.4133, %if.end.4067, %if.end.4001, %if.end.3919, %if.end.3837, %if.end.3716, %if.end.3658, %if.end.3567, %if.end.3504, %if.end.3410, %if.end.3231, %if.end.3161, %if.end.3015, %if.end.2891, %if.end.2805, %if.end.2734, %if.end.2647, %if.end.2576, %if.end.2505, %if.end.2434, %if.end.2363, %if.end.2292, %if.end.2221, %if.end.2139, %if.end.2069, %if.end.1998, %if.end.1927, %if.end.1856, %if.end.1785, %if.end.1720, %if.end.1656, %if.end.1585, %if.end.1514, %if.end.1443, %if.end.1372, %if.end.1301, %if.end.1232, %if.end.1162, %if.end.1081, %if.end.1006, %if.end.935, %if.end.867, %if.end.798, %if.end.729, %if.end.671, %if.end.635, %if.end.580, %if.end.525, %if.end.472, %if.end.447, %if.end.429, %if.end.406, %if.end.388, %if.end.360, %if.end.310, %if.end.284, %if.end.253, %if.end.204, %if.then.88
  %156 = load i8*, i8** %next_instr, align 8
  %157 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast = ptrtoint i8* %156 to i64
  %sub.ptr.rhs.cast = ptrtoint i8* %157 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast
  %conv205 = trunc i64 %sub.ptr.sub to i32
  %158 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti206 = getelementptr inbounds %struct._frame, %struct._frame* %158, i32 0, i32 13
  store i32 %conv205, i32* %f_lasti206, align 4
  %159 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool207 = icmp ne i32 %159, 0
  br i1 %tobool207, label %land.lhs.true.208, label %if.end.233

land.lhs.true.208:                                ; preds = %fast_next_opcode
  %160 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc209 = getelementptr inbounds %struct._ts, %struct._ts* %160, i32 0, i32 10
  %161 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc209, align 8
  %cmp210 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %161, null
  br i1 %cmp210, label %land.lhs.true.212, label %if.end.233

land.lhs.true.212:                                ; preds = %land.lhs.true.208
  %162 = load %struct._ts*, %struct._ts** %tstate, align 8
  %tracing = getelementptr inbounds %struct._ts, %struct._ts* %162, i32 0, i32 7
  %163 = load i32, i32* %tracing, align 4
  %tobool213 = icmp ne i32 %163, 0
  br i1 %tobool213, label %if.end.233, label %if.then.214

if.then.214:                                      ; preds = %land.lhs.true.212
  %164 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %165 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop216 = getelementptr inbounds %struct._frame, %struct._frame* %165, i32 0, i32 7
  store %struct._object** %164, %struct._object*** %f_stacktop216, align 8
  %166 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc217 = getelementptr inbounds %struct._ts, %struct._ts* %166, i32 0, i32 10
  %167 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc217, align 8
  %168 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj218 = getelementptr inbounds %struct._ts, %struct._ts* %168, i32 0, i32 12
  %169 = load %struct._object*, %struct._object** %c_traceobj218, align 8
  %170 = load %struct._ts*, %struct._ts** %tstate, align 8
  %171 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call219 = call i32 @maybe_call_line_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %167, %struct._object* %169, %struct._ts* %170, %struct._frame* %171, i32* %instr_lb, i32* %instr_ub, i32* %instr_prev)
  store i32 %call219, i32* %err, align 4
  %172 = load i8*, i8** %first_instr, align 8
  %173 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti220 = getelementptr inbounds %struct._frame, %struct._frame* %173, i32 0, i32 13
  %174 = load i32, i32* %f_lasti220, align 4
  %idx.ext221 = sext i32 %174 to i64
  %add.ptr222 = getelementptr i8, i8* %172, i64 %idx.ext221
  store i8* %add.ptr222, i8** %next_instr, align 8
  %175 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop223 = getelementptr inbounds %struct._frame, %struct._frame* %175, i32 0, i32 7
  %176 = load %struct._object**, %struct._object*** %f_stacktop223, align 8
  %cmp224 = icmp ne %struct._object** %176, null
  br i1 %cmp224, label %if.then.226, label %if.end.229

if.then.226:                                      ; preds = %if.then.214
  %177 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop227 = getelementptr inbounds %struct._frame, %struct._frame* %177, i32 0, i32 7
  %178 = load %struct._object**, %struct._object*** %f_stacktop227, align 8
  store %struct._object** %178, %struct._object*** %stack_pointer, align 8
  %179 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop228 = getelementptr inbounds %struct._frame, %struct._frame* %179, i32 0, i32 7
  store %struct._object** null, %struct._object*** %f_stacktop228, align 8
  br label %if.end.229

if.end.229:                                       ; preds = %if.then.226, %if.then.214
  %180 = load i32, i32* %err, align 4
  %tobool230 = icmp ne i32 %180, 0
  br i1 %tobool230, label %if.then.231, label %if.end.232

if.then.231:                                      ; preds = %if.end.229
  br label %error

if.end.232:                                       ; preds = %if.end.229
  br label %if.end.233

if.end.233:                                       ; preds = %if.end.232, %land.lhs.true.212, %land.lhs.true.208, %fast_next_opcode
  %181 = load i8*, i8** %next_instr, align 8
  %incdec.ptr = getelementptr i8, i8* %181, i32 1
  store i8* %incdec.ptr, i8** %next_instr, align 8
  %182 = load i8, i8* %181, align 1
  %conv234 = zext i8 %182 to i32
  store i32 %conv234, i32* %opcode, align 4
  store i32 0, i32* %oparg, align 4
  %183 = load i32, i32* %opcode, align 4
  %cmp235 = icmp sge i32 %183, 90
  br i1 %cmp235, label %if.then.237, label %if.end.242

if.then.237:                                      ; preds = %if.end.233
  %184 = load i8*, i8** %next_instr, align 8
  %add.ptr238 = getelementptr i8, i8* %184, i64 2
  store i8* %add.ptr238, i8** %next_instr, align 8
  %185 = load i8*, i8** %next_instr, align 8
  %arrayidx = getelementptr i8, i8* %185, i64 -1
  %186 = load i8, i8* %arrayidx, align 1
  %conv239 = zext i8 %186 to i32
  %shl = shl i32 %conv239, 8
  %187 = load i8*, i8** %next_instr, align 8
  %arrayidx240 = getelementptr i8, i8* %187, i64 -2
  %188 = load i8, i8* %arrayidx240, align 1
  %conv241 = zext i8 %188 to i32
  %add = add i32 %shl, %conv241
  store i32 %add, i32* %oparg, align 4
  br label %if.end.242

if.end.242:                                       ; preds = %if.then.237, %if.end.233
  br label %dispatch_opcode

dispatch_opcode:                                  ; preds = %sw.bb.7488, %if.end.242
  %189 = load i32, i32* %opcode, align 4
  switch i32 %189, label %sw.default.7500 [
    i32 9, label %sw.bb.243
    i32 124, label %sw.bb.261
    i32 100, label %sw.bb.292
    i32 125, label %sw.bb.318
    i32 1, label %sw.bb.361
    i32 2, label %sw.bb.389
    i32 3, label %sw.bb.407
    i32 4, label %sw.bb.430
    i32 5, label %sw.bb.448
    i32 10, label %sw.bb.473
    i32 11, label %sw.bb.527
    i32 12, label %sw.bb.582
    i32 15, label %sw.bb.676
    i32 19, label %sw.bb.731
    i32 20, label %sw.bb.800
    i32 27, label %sw.bb.869
    i32 26, label %sw.bb.937
    i32 22, label %sw.bb.1008
    i32 23, label %sw.bb.1083
    i32 24, label %sw.bb.1164
    i32 25, label %sw.bb.1234
    i32 62, label %sw.bb.1303
    i32 63, label %sw.bb.1374
    i32 64, label %sw.bb.1445
    i32 65, label %sw.bb.1516
    i32 66, label %sw.bb.1587
    i32 145, label %sw.bb.1665
    i32 146, label %sw.bb.1729
    i32 67, label %sw.bb.1787
    i32 57, label %sw.bb.1858
    i32 29, label %sw.bb.1929
    i32 28, label %sw.bb.2000
    i32 59, label %sw.bb.2071
    i32 55, label %sw.bb.2141
    i32 56, label %sw.bb.2223
    i32 75, label %sw.bb.2294
    i32 76, label %sw.bb.2365
    i32 77, label %sw.bb.2436
    i32 78, label %sw.bb.2507
    i32 79, label %sw.bb.2578
    i32 60, label %sw.bb.2649
    i32 61, label %sw.bb.2736
    i32 70, label %sw.bb.2807
    i32 130, label %sw.bb.2900
    i32 83, label %sw.bb.2915
    i32 72, label %sw.bb.2917
    i32 86, label %sw.bb.3021
    i32 89, label %sw.bb.3024
    i32 87, label %sw.bb.3163
    i32 88, label %sw.bb.3233
    i32 71, label %sw.bb.3506
    i32 90, label %sw.bb.3576
    i32 91, label %sw.bb.3667
    i32 92, label %sw.bb.3725
    i32 94, label %sw.bb.3846
    i32 95, label %sw.bb.3928
    i32 96, label %sw.bb.4010
    i32 97, label %sw.bb.4076
    i32 98, label %sw.bb.4142
    i32 101, label %sw.bb.4193
    i32 116, label %sw.bb.4334
    i32 126, label %sw.bb.4437
    i32 138, label %sw.bb.4515
    i32 135, label %sw.bb.4561
    i32 148, label %sw.bb.4606
    i32 136, label %sw.bb.4701
    i32 137, label %sw.bb.4753
    i32 102, label %sw.bb.4812
    i32 103, label %sw.bb.4870
    i32 104, label %sw.bb.4929
    i32 105, label %sw.bb.5021
    i32 54, label %sw.bb.5060
    i32 147, label %sw.bb.5140
    i32 106, label %sw.bb.5223
    i32 107, label %sw.bb.5290
    i32 108, label %sw.bb.5368
    i32 84, label %sw.bb.5525
    i32 109, label %sw.bb.5598
    i32 110, label %sw.bb.5652
    i32 114, label %sw.bb.5673
    i32 115, label %sw.bb.5800
    i32 111, label %sw.bb.5927
    i32 112, label %sw.bb.6043
    i32 113, label %sw.bb.6159
    i32 68, label %sw.bb.6192
    i32 93, label %sw.bb.6252
    i32 80, label %sw.bb.6358
    i32 119, label %sw.bb.6366
    i32 120, label %sw.bb.6380
    i32 121, label %sw.bb.6388
    i32 122, label %sw.bb.6396
    i32 143, label %sw.bb.6445
    i32 81, label %sw.bb.6536
    i32 131, label %sw.bb.6680
    i32 140, label %sw.bb.6727
    i32 141, label %sw.bb.6735
    i32 142, label %sw.bb.6743
    i32 134, label %sw.bb.6881
    i32 132, label %sw.bb.6889
    i32 133, label %sw.bb.7385
    i32 144, label %sw.bb.7488
  ]

TARGET_NOP:                                       ; preds = %indirectgoto
  store i32 9, i32* %opcode, align 4
  br label %sw.bb.243

sw.bb.243:                                        ; preds = %dispatch_opcode, %TARGET_NOP
  %190 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool244 = icmp ne i32 %190, 0
  br i1 %tobool244, label %if.end.253, label %if.then.245

if.then.245:                                      ; preds = %sw.bb.243
  %191 = load i8*, i8** %next_instr, align 8
  %192 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast246 = ptrtoint i8* %191 to i64
  %sub.ptr.rhs.cast247 = ptrtoint i8* %192 to i64
  %sub.ptr.sub248 = sub i64 %sub.ptr.lhs.cast246, %sub.ptr.rhs.cast247
  %conv249 = trunc i64 %sub.ptr.sub248 to i32
  %193 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti250 = getelementptr inbounds %struct._frame, %struct._frame* %193, i32 0, i32 13
  store i32 %conv249, i32* %f_lasti250, align 4
  %194 = load i8*, i8** %next_instr, align 8
  %incdec.ptr251 = getelementptr i8, i8* %194, i32 1
  store i8* %incdec.ptr251, i8** %next_instr, align 8
  %195 = load i8, i8* %194, align 1
  %idxprom = zext i8 %195 to i64
  %arrayidx252 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom
  %196 = load i8*, i8** %arrayidx252, align 8
  br label %indirectgoto

if.end.253:                                       ; preds = %sw.bb.243
  br label %fast_next_opcode

TARGET_LOAD_FAST:                                 ; preds = %indirectgoto
  store i32 124, i32* %opcode, align 4
  %197 = load i8*, i8** %next_instr, align 8
  %add.ptr254 = getelementptr i8, i8* %197, i64 2
  store i8* %add.ptr254, i8** %next_instr, align 8
  %198 = load i8*, i8** %next_instr, align 8
  %arrayidx255 = getelementptr i8, i8* %198, i64 -1
  %199 = load i8, i8* %arrayidx255, align 1
  %conv256 = zext i8 %199 to i32
  %shl257 = shl i32 %conv256, 8
  %200 = load i8*, i8** %next_instr, align 8
  %arrayidx258 = getelementptr i8, i8* %200, i64 -2
  %201 = load i8, i8* %arrayidx258, align 1
  %conv259 = zext i8 %201 to i32
  %add260 = add i32 %shl257, %conv259
  store i32 %add260, i32* %oparg, align 4
  br label %sw.bb.261

sw.bb.261:                                        ; preds = %dispatch_opcode, %TARGET_LOAD_FAST
  %202 = load i32, i32* %oparg, align 4
  %idxprom263 = sext i32 %202 to i64
  %203 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx264 = getelementptr %struct._object*, %struct._object** %203, i64 %idxprom263
  %204 = load %struct._object*, %struct._object** %arrayidx264, align 8
  store %struct._object* %204, %struct._object** %value, align 8
  %205 = load %struct._object*, %struct._object** %value, align 8
  %cmp265 = icmp eq %struct._object* %205, null
  br i1 %cmp265, label %if.then.267, label %if.end.270

if.then.267:                                      ; preds = %sw.bb.261
  %206 = load %struct._object*, %struct._object** @PyExc_UnboundLocalError, align 8
  %207 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_varnames = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %207, i32 0, i32 9
  %208 = load %struct._object*, %struct._object** %co_varnames, align 8
  %209 = load i32, i32* %oparg, align 4
  %conv268 = sext i32 %209 to i64
  %call269 = call %struct._object* @PyTuple_GetItem(%struct._object* %208, i64 %conv268)
  call void @format_exc_check_arg(%struct._object* %206, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.14, i32 0, i32 0), %struct._object* %call269)
  br label %error

if.end.270:                                       ; preds = %sw.bb.261
  %210 = load %struct._object*, %struct._object** %value, align 8
  %ob_refcnt271 = getelementptr inbounds %struct._object, %struct._object* %210, i32 0, i32 0
  %211 = load i64, i64* %ob_refcnt271, align 8
  %inc272 = add i64 %211, 1
  store i64 %inc272, i64* %ob_refcnt271, align 8
  %212 = load %struct._object*, %struct._object** %value, align 8
  %213 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr273 = getelementptr %struct._object*, %struct._object** %213, i32 1
  store %struct._object** %incdec.ptr273, %struct._object*** %stack_pointer, align 8
  store %struct._object* %212, %struct._object** %213, align 8
  %214 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool274 = icmp ne i32 %214, 0
  br i1 %tobool274, label %if.end.284, label %if.then.275

if.then.275:                                      ; preds = %if.end.270
  %215 = load i8*, i8** %next_instr, align 8
  %216 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast276 = ptrtoint i8* %215 to i64
  %sub.ptr.rhs.cast277 = ptrtoint i8* %216 to i64
  %sub.ptr.sub278 = sub i64 %sub.ptr.lhs.cast276, %sub.ptr.rhs.cast277
  %conv279 = trunc i64 %sub.ptr.sub278 to i32
  %217 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti280 = getelementptr inbounds %struct._frame, %struct._frame* %217, i32 0, i32 13
  store i32 %conv279, i32* %f_lasti280, align 4
  %218 = load i8*, i8** %next_instr, align 8
  %incdec.ptr281 = getelementptr i8, i8* %218, i32 1
  store i8* %incdec.ptr281, i8** %next_instr, align 8
  %219 = load i8, i8* %218, align 1
  %idxprom282 = zext i8 %219 to i64
  %arrayidx283 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom282
  %220 = load i8*, i8** %arrayidx283, align 8
  br label %indirectgoto

if.end.284:                                       ; preds = %if.end.270
  br label %fast_next_opcode

TARGET_LOAD_CONST:                                ; preds = %indirectgoto
  store i32 100, i32* %opcode, align 4
  %221 = load i8*, i8** %next_instr, align 8
  %add.ptr285 = getelementptr i8, i8* %221, i64 2
  store i8* %add.ptr285, i8** %next_instr, align 8
  %222 = load i8*, i8** %next_instr, align 8
  %arrayidx286 = getelementptr i8, i8* %222, i64 -1
  %223 = load i8, i8* %arrayidx286, align 1
  %conv287 = zext i8 %223 to i32
  %shl288 = shl i32 %conv287, 8
  %224 = load i8*, i8** %next_instr, align 8
  %arrayidx289 = getelementptr i8, i8* %224, i64 -2
  %225 = load i8, i8* %arrayidx289, align 1
  %conv290 = zext i8 %225 to i32
  %add291 = add i32 %shl288, %conv290
  store i32 %add291, i32* %oparg, align 4
  br label %sw.bb.292

sw.bb.292:                                        ; preds = %dispatch_opcode, %TARGET_LOAD_CONST
  %226 = load i32, i32* %oparg, align 4
  %idxprom295 = sext i32 %226 to i64
  %227 = load %struct._object*, %struct._object** %consts, align 8
  %228 = bitcast %struct._object* %227 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %228, i32 0, i32 1
  %arrayidx296 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom295
  %229 = load %struct._object*, %struct._object** %arrayidx296, align 8
  store %struct._object* %229, %struct._object** %value294, align 8
  %230 = load %struct._object*, %struct._object** %value294, align 8
  %ob_refcnt297 = getelementptr inbounds %struct._object, %struct._object* %230, i32 0, i32 0
  %231 = load i64, i64* %ob_refcnt297, align 8
  %inc298 = add i64 %231, 1
  store i64 %inc298, i64* %ob_refcnt297, align 8
  %232 = load %struct._object*, %struct._object** %value294, align 8
  %233 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr299 = getelementptr %struct._object*, %struct._object** %233, i32 1
  store %struct._object** %incdec.ptr299, %struct._object*** %stack_pointer, align 8
  store %struct._object* %232, %struct._object** %233, align 8
  %234 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool300 = icmp ne i32 %234, 0
  br i1 %tobool300, label %if.end.310, label %if.then.301

if.then.301:                                      ; preds = %sw.bb.292
  %235 = load i8*, i8** %next_instr, align 8
  %236 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast302 = ptrtoint i8* %235 to i64
  %sub.ptr.rhs.cast303 = ptrtoint i8* %236 to i64
  %sub.ptr.sub304 = sub i64 %sub.ptr.lhs.cast302, %sub.ptr.rhs.cast303
  %conv305 = trunc i64 %sub.ptr.sub304 to i32
  %237 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti306 = getelementptr inbounds %struct._frame, %struct._frame* %237, i32 0, i32 13
  store i32 %conv305, i32* %f_lasti306, align 4
  %238 = load i8*, i8** %next_instr, align 8
  %incdec.ptr307 = getelementptr i8, i8* %238, i32 1
  store i8* %incdec.ptr307, i8** %next_instr, align 8
  %239 = load i8, i8* %238, align 1
  %idxprom308 = zext i8 %239 to i64
  %arrayidx309 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom308
  %240 = load i8*, i8** %arrayidx309, align 8
  br label %indirectgoto

if.end.310:                                       ; preds = %sw.bb.292
  br label %fast_next_opcode

PRED_STORE_FAST:                                  ; No predecessors!
  br label %TARGET_STORE_FAST

TARGET_STORE_FAST:                                ; preds = %PRED_STORE_FAST, %indirectgoto
  store i32 125, i32* %opcode, align 4
  %241 = load i8*, i8** %next_instr, align 8
  %add.ptr311 = getelementptr i8, i8* %241, i64 2
  store i8* %add.ptr311, i8** %next_instr, align 8
  %242 = load i8*, i8** %next_instr, align 8
  %arrayidx312 = getelementptr i8, i8* %242, i64 -1
  %243 = load i8, i8* %arrayidx312, align 1
  %conv313 = zext i8 %243 to i32
  %shl314 = shl i32 %conv313, 8
  %244 = load i8*, i8** %next_instr, align 8
  %arrayidx315 = getelementptr i8, i8* %244, i64 -2
  %245 = load i8, i8* %arrayidx315, align 1
  %conv316 = zext i8 %245 to i32
  %add317 = add i32 %shl314, %conv316
  store i32 %add317, i32* %oparg, align 4
  br label %sw.bb.318

sw.bb.318:                                        ; preds = %dispatch_opcode, %TARGET_STORE_FAST
  %246 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr321 = getelementptr %struct._object*, %struct._object** %246, i32 -1
  store %struct._object** %incdec.ptr321, %struct._object*** %stack_pointer, align 8
  %247 = load %struct._object*, %struct._object** %incdec.ptr321, align 8
  store %struct._object* %247, %struct._object** %value320, align 8
  br label %do.body.322

do.body.322:                                      ; preds = %sw.bb.318
  %248 = load i32, i32* %oparg, align 4
  %idxprom325 = sext i32 %248 to i64
  %249 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx326 = getelementptr %struct._object*, %struct._object** %249, i64 %idxprom325
  %250 = load %struct._object*, %struct._object** %arrayidx326, align 8
  store %struct._object* %250, %struct._object** %tmp324, align 8
  %251 = load %struct._object*, %struct._object** %value320, align 8
  %252 = load i32, i32* %oparg, align 4
  %idxprom327 = sext i32 %252 to i64
  %253 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx328 = getelementptr %struct._object*, %struct._object** %253, i64 %idxprom327
  store %struct._object* %251, %struct._object** %arrayidx328, align 8
  br label %do.body.329

do.body.329:                                      ; preds = %do.body.322
  %254 = load %struct._object*, %struct._object** %tmp324, align 8
  store %struct._object* %254, %struct._object** %_py_xdecref_tmp, align 8
  %255 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp331 = icmp ne %struct._object* %255, null
  br i1 %cmp331, label %if.then.333, label %if.end.347

if.then.333:                                      ; preds = %do.body.329
  br label %do.body.334

do.body.334:                                      ; preds = %if.then.333
  %256 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %256, %struct._object** %_py_decref_tmp336, align 8
  %257 = load %struct._object*, %struct._object** %_py_decref_tmp336, align 8
  %ob_refcnt337 = getelementptr inbounds %struct._object, %struct._object* %257, i32 0, i32 0
  %258 = load i64, i64* %ob_refcnt337, align 8
  %dec338 = add i64 %258, -1
  store i64 %dec338, i64* %ob_refcnt337, align 8
  %cmp339 = icmp ne i64 %dec338, 0
  br i1 %cmp339, label %if.then.341, label %if.else.342

if.then.341:                                      ; preds = %do.body.334
  br label %if.end.345

if.else.342:                                      ; preds = %do.body.334
  %259 = load %struct._object*, %struct._object** %_py_decref_tmp336, align 8
  %ob_type343 = getelementptr inbounds %struct._object, %struct._object* %259, i32 0, i32 1
  %260 = load %struct._typeobject*, %struct._typeobject** %ob_type343, align 8
  %tp_dealloc344 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %260, i32 0, i32 4
  %261 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc344, align 8
  %262 = load %struct._object*, %struct._object** %_py_decref_tmp336, align 8
  call void %261(%struct._object* %262)
  br label %if.end.345

if.end.345:                                       ; preds = %if.else.342, %if.then.341
  br label %do.end.346

do.end.346:                                       ; preds = %if.end.345
  br label %if.end.347

if.end.347:                                       ; preds = %do.end.346, %do.body.329
  br label %do.end.348

do.end.348:                                       ; preds = %if.end.347
  br label %do.end.349

do.end.349:                                       ; preds = %do.end.348
  %263 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool350 = icmp ne i32 %263, 0
  br i1 %tobool350, label %if.end.360, label %if.then.351

if.then.351:                                      ; preds = %do.end.349
  %264 = load i8*, i8** %next_instr, align 8
  %265 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast352 = ptrtoint i8* %264 to i64
  %sub.ptr.rhs.cast353 = ptrtoint i8* %265 to i64
  %sub.ptr.sub354 = sub i64 %sub.ptr.lhs.cast352, %sub.ptr.rhs.cast353
  %conv355 = trunc i64 %sub.ptr.sub354 to i32
  %266 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti356 = getelementptr inbounds %struct._frame, %struct._frame* %266, i32 0, i32 13
  store i32 %conv355, i32* %f_lasti356, align 4
  %267 = load i8*, i8** %next_instr, align 8
  %incdec.ptr357 = getelementptr i8, i8* %267, i32 1
  store i8* %incdec.ptr357, i8** %next_instr, align 8
  %268 = load i8, i8* %267, align 1
  %idxprom358 = zext i8 %268 to i64
  %arrayidx359 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom358
  %269 = load i8*, i8** %arrayidx359, align 8
  br label %indirectgoto

if.end.360:                                       ; preds = %do.end.349
  br label %fast_next_opcode

TARGET_POP_TOP:                                   ; preds = %indirectgoto
  store i32 1, i32* %opcode, align 4
  br label %sw.bb.361

sw.bb.361:                                        ; preds = %dispatch_opcode, %TARGET_POP_TOP
  %270 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr364 = getelementptr %struct._object*, %struct._object** %270, i32 -1
  store %struct._object** %incdec.ptr364, %struct._object*** %stack_pointer, align 8
  %271 = load %struct._object*, %struct._object** %incdec.ptr364, align 8
  store %struct._object* %271, %struct._object** %value363, align 8
  br label %do.body.365

do.body.365:                                      ; preds = %sw.bb.361
  %272 = load %struct._object*, %struct._object** %value363, align 8
  store %struct._object* %272, %struct._object** %_py_decref_tmp367, align 8
  %273 = load %struct._object*, %struct._object** %_py_decref_tmp367, align 8
  %ob_refcnt368 = getelementptr inbounds %struct._object, %struct._object* %273, i32 0, i32 0
  %274 = load i64, i64* %ob_refcnt368, align 8
  %dec369 = add i64 %274, -1
  store i64 %dec369, i64* %ob_refcnt368, align 8
  %cmp370 = icmp ne i64 %dec369, 0
  br i1 %cmp370, label %if.then.372, label %if.else.373

if.then.372:                                      ; preds = %do.body.365
  br label %if.end.376

if.else.373:                                      ; preds = %do.body.365
  %275 = load %struct._object*, %struct._object** %_py_decref_tmp367, align 8
  %ob_type374 = getelementptr inbounds %struct._object, %struct._object* %275, i32 0, i32 1
  %276 = load %struct._typeobject*, %struct._typeobject** %ob_type374, align 8
  %tp_dealloc375 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %276, i32 0, i32 4
  %277 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc375, align 8
  %278 = load %struct._object*, %struct._object** %_py_decref_tmp367, align 8
  call void %277(%struct._object* %278)
  br label %if.end.376

if.end.376:                                       ; preds = %if.else.373, %if.then.372
  br label %do.end.377

do.end.377:                                       ; preds = %if.end.376
  %279 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool378 = icmp ne i32 %279, 0
  br i1 %tobool378, label %if.end.388, label %if.then.379

if.then.379:                                      ; preds = %do.end.377
  %280 = load i8*, i8** %next_instr, align 8
  %281 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast380 = ptrtoint i8* %280 to i64
  %sub.ptr.rhs.cast381 = ptrtoint i8* %281 to i64
  %sub.ptr.sub382 = sub i64 %sub.ptr.lhs.cast380, %sub.ptr.rhs.cast381
  %conv383 = trunc i64 %sub.ptr.sub382 to i32
  %282 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti384 = getelementptr inbounds %struct._frame, %struct._frame* %282, i32 0, i32 13
  store i32 %conv383, i32* %f_lasti384, align 4
  %283 = load i8*, i8** %next_instr, align 8
  %incdec.ptr385 = getelementptr i8, i8* %283, i32 1
  store i8* %incdec.ptr385, i8** %next_instr, align 8
  %284 = load i8, i8* %283, align 1
  %idxprom386 = zext i8 %284 to i64
  %arrayidx387 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom386
  %285 = load i8*, i8** %arrayidx387, align 8
  br label %indirectgoto

if.end.388:                                       ; preds = %do.end.377
  br label %fast_next_opcode

TARGET_ROT_TWO:                                   ; preds = %indirectgoto
  store i32 2, i32* %opcode, align 4
  br label %sw.bb.389

sw.bb.389:                                        ; preds = %dispatch_opcode, %TARGET_ROT_TWO
  %286 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx391 = getelementptr %struct._object*, %struct._object** %286, i64 -1
  %287 = load %struct._object*, %struct._object** %arrayidx391, align 8
  store %struct._object* %287, %struct._object** %top, align 8
  %288 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx393 = getelementptr %struct._object*, %struct._object** %288, i64 -2
  %289 = load %struct._object*, %struct._object** %arrayidx393, align 8
  store %struct._object* %289, %struct._object** %second, align 8
  %290 = load %struct._object*, %struct._object** %second, align 8
  %291 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx394 = getelementptr %struct._object*, %struct._object** %291, i64 -1
  store %struct._object* %290, %struct._object** %arrayidx394, align 8
  %292 = load %struct._object*, %struct._object** %top, align 8
  %293 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx395 = getelementptr %struct._object*, %struct._object** %293, i64 -2
  store %struct._object* %292, %struct._object** %arrayidx395, align 8
  %294 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool396 = icmp ne i32 %294, 0
  br i1 %tobool396, label %if.end.406, label %if.then.397

if.then.397:                                      ; preds = %sw.bb.389
  %295 = load i8*, i8** %next_instr, align 8
  %296 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast398 = ptrtoint i8* %295 to i64
  %sub.ptr.rhs.cast399 = ptrtoint i8* %296 to i64
  %sub.ptr.sub400 = sub i64 %sub.ptr.lhs.cast398, %sub.ptr.rhs.cast399
  %conv401 = trunc i64 %sub.ptr.sub400 to i32
  %297 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti402 = getelementptr inbounds %struct._frame, %struct._frame* %297, i32 0, i32 13
  store i32 %conv401, i32* %f_lasti402, align 4
  %298 = load i8*, i8** %next_instr, align 8
  %incdec.ptr403 = getelementptr i8, i8* %298, i32 1
  store i8* %incdec.ptr403, i8** %next_instr, align 8
  %299 = load i8, i8* %298, align 1
  %idxprom404 = zext i8 %299 to i64
  %arrayidx405 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom404
  %300 = load i8*, i8** %arrayidx405, align 8
  br label %indirectgoto

if.end.406:                                       ; preds = %sw.bb.389
  br label %fast_next_opcode

TARGET_ROT_THREE:                                 ; preds = %indirectgoto
  store i32 3, i32* %opcode, align 4
  br label %sw.bb.407

sw.bb.407:                                        ; preds = %dispatch_opcode, %TARGET_ROT_THREE
  %301 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx410 = getelementptr %struct._object*, %struct._object** %301, i64 -1
  %302 = load %struct._object*, %struct._object** %arrayidx410, align 8
  store %struct._object* %302, %struct._object** %top409, align 8
  %303 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx413 = getelementptr %struct._object*, %struct._object** %303, i64 -2
  %304 = load %struct._object*, %struct._object** %arrayidx413, align 8
  store %struct._object* %304, %struct._object** %second412, align 8
  %305 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx415 = getelementptr %struct._object*, %struct._object** %305, i64 -3
  %306 = load %struct._object*, %struct._object** %arrayidx415, align 8
  store %struct._object* %306, %struct._object** %third, align 8
  %307 = load %struct._object*, %struct._object** %second412, align 8
  %308 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx416 = getelementptr %struct._object*, %struct._object** %308, i64 -1
  store %struct._object* %307, %struct._object** %arrayidx416, align 8
  %309 = load %struct._object*, %struct._object** %third, align 8
  %310 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx417 = getelementptr %struct._object*, %struct._object** %310, i64 -2
  store %struct._object* %309, %struct._object** %arrayidx417, align 8
  %311 = load %struct._object*, %struct._object** %top409, align 8
  %312 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx418 = getelementptr %struct._object*, %struct._object** %312, i64 -3
  store %struct._object* %311, %struct._object** %arrayidx418, align 8
  %313 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool419 = icmp ne i32 %313, 0
  br i1 %tobool419, label %if.end.429, label %if.then.420

if.then.420:                                      ; preds = %sw.bb.407
  %314 = load i8*, i8** %next_instr, align 8
  %315 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast421 = ptrtoint i8* %314 to i64
  %sub.ptr.rhs.cast422 = ptrtoint i8* %315 to i64
  %sub.ptr.sub423 = sub i64 %sub.ptr.lhs.cast421, %sub.ptr.rhs.cast422
  %conv424 = trunc i64 %sub.ptr.sub423 to i32
  %316 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti425 = getelementptr inbounds %struct._frame, %struct._frame* %316, i32 0, i32 13
  store i32 %conv424, i32* %f_lasti425, align 4
  %317 = load i8*, i8** %next_instr, align 8
  %incdec.ptr426 = getelementptr i8, i8* %317, i32 1
  store i8* %incdec.ptr426, i8** %next_instr, align 8
  %318 = load i8, i8* %317, align 1
  %idxprom427 = zext i8 %318 to i64
  %arrayidx428 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom427
  %319 = load i8*, i8** %arrayidx428, align 8
  br label %indirectgoto

if.end.429:                                       ; preds = %sw.bb.407
  br label %fast_next_opcode

TARGET_DUP_TOP:                                   ; preds = %indirectgoto
  store i32 4, i32* %opcode, align 4
  br label %sw.bb.430

sw.bb.430:                                        ; preds = %dispatch_opcode, %TARGET_DUP_TOP
  %320 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx433 = getelementptr %struct._object*, %struct._object** %320, i64 -1
  %321 = load %struct._object*, %struct._object** %arrayidx433, align 8
  store %struct._object* %321, %struct._object** %top432, align 8
  %322 = load %struct._object*, %struct._object** %top432, align 8
  %ob_refcnt434 = getelementptr inbounds %struct._object, %struct._object* %322, i32 0, i32 0
  %323 = load i64, i64* %ob_refcnt434, align 8
  %inc435 = add i64 %323, 1
  store i64 %inc435, i64* %ob_refcnt434, align 8
  %324 = load %struct._object*, %struct._object** %top432, align 8
  %325 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr436 = getelementptr %struct._object*, %struct._object** %325, i32 1
  store %struct._object** %incdec.ptr436, %struct._object*** %stack_pointer, align 8
  store %struct._object* %324, %struct._object** %325, align 8
  %326 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool437 = icmp ne i32 %326, 0
  br i1 %tobool437, label %if.end.447, label %if.then.438

if.then.438:                                      ; preds = %sw.bb.430
  %327 = load i8*, i8** %next_instr, align 8
  %328 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast439 = ptrtoint i8* %327 to i64
  %sub.ptr.rhs.cast440 = ptrtoint i8* %328 to i64
  %sub.ptr.sub441 = sub i64 %sub.ptr.lhs.cast439, %sub.ptr.rhs.cast440
  %conv442 = trunc i64 %sub.ptr.sub441 to i32
  %329 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti443 = getelementptr inbounds %struct._frame, %struct._frame* %329, i32 0, i32 13
  store i32 %conv442, i32* %f_lasti443, align 4
  %330 = load i8*, i8** %next_instr, align 8
  %incdec.ptr444 = getelementptr i8, i8* %330, i32 1
  store i8* %incdec.ptr444, i8** %next_instr, align 8
  %331 = load i8, i8* %330, align 1
  %idxprom445 = zext i8 %331 to i64
  %arrayidx446 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom445
  %332 = load i8*, i8** %arrayidx446, align 8
  br label %indirectgoto

if.end.447:                                       ; preds = %sw.bb.430
  br label %fast_next_opcode

TARGET_DUP_TOP_TWO:                               ; preds = %indirectgoto
  store i32 5, i32* %opcode, align 4
  br label %sw.bb.448

sw.bb.448:                                        ; preds = %dispatch_opcode, %TARGET_DUP_TOP_TWO
  %333 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx451 = getelementptr %struct._object*, %struct._object** %333, i64 -1
  %334 = load %struct._object*, %struct._object** %arrayidx451, align 8
  store %struct._object* %334, %struct._object** %top450, align 8
  %335 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx454 = getelementptr %struct._object*, %struct._object** %335, i64 -2
  %336 = load %struct._object*, %struct._object** %arrayidx454, align 8
  store %struct._object* %336, %struct._object** %second453, align 8
  %337 = load %struct._object*, %struct._object** %top450, align 8
  %ob_refcnt455 = getelementptr inbounds %struct._object, %struct._object* %337, i32 0, i32 0
  %338 = load i64, i64* %ob_refcnt455, align 8
  %inc456 = add i64 %338, 1
  store i64 %inc456, i64* %ob_refcnt455, align 8
  %339 = load %struct._object*, %struct._object** %second453, align 8
  %ob_refcnt457 = getelementptr inbounds %struct._object, %struct._object* %339, i32 0, i32 0
  %340 = load i64, i64* %ob_refcnt457, align 8
  %inc458 = add i64 %340, 1
  store i64 %inc458, i64* %ob_refcnt457, align 8
  %341 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr459 = getelementptr %struct._object*, %struct._object** %341, i64 2
  store %struct._object** %add.ptr459, %struct._object*** %stack_pointer, align 8
  %342 = load %struct._object*, %struct._object** %top450, align 8
  %343 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx460 = getelementptr %struct._object*, %struct._object** %343, i64 -1
  store %struct._object* %342, %struct._object** %arrayidx460, align 8
  %344 = load %struct._object*, %struct._object** %second453, align 8
  %345 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx461 = getelementptr %struct._object*, %struct._object** %345, i64 -2
  store %struct._object* %344, %struct._object** %arrayidx461, align 8
  %346 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool462 = icmp ne i32 %346, 0
  br i1 %tobool462, label %if.end.472, label %if.then.463

if.then.463:                                      ; preds = %sw.bb.448
  %347 = load i8*, i8** %next_instr, align 8
  %348 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast464 = ptrtoint i8* %347 to i64
  %sub.ptr.rhs.cast465 = ptrtoint i8* %348 to i64
  %sub.ptr.sub466 = sub i64 %sub.ptr.lhs.cast464, %sub.ptr.rhs.cast465
  %conv467 = trunc i64 %sub.ptr.sub466 to i32
  %349 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti468 = getelementptr inbounds %struct._frame, %struct._frame* %349, i32 0, i32 13
  store i32 %conv467, i32* %f_lasti468, align 4
  %350 = load i8*, i8** %next_instr, align 8
  %incdec.ptr469 = getelementptr i8, i8* %350, i32 1
  store i8* %incdec.ptr469, i8** %next_instr, align 8
  %351 = load i8, i8* %350, align 1
  %idxprom470 = zext i8 %351 to i64
  %arrayidx471 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom470
  %352 = load i8*, i8** %arrayidx471, align 8
  br label %indirectgoto

if.end.472:                                       ; preds = %sw.bb.448
  br label %fast_next_opcode

TARGET_UNARY_POSITIVE:                            ; preds = %indirectgoto
  store i32 10, i32* %opcode, align 4
  br label %sw.bb.473

sw.bb.473:                                        ; preds = %dispatch_opcode, %TARGET_UNARY_POSITIVE
  %353 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx476 = getelementptr %struct._object*, %struct._object** %353, i64 -1
  %354 = load %struct._object*, %struct._object** %arrayidx476, align 8
  store %struct._object* %354, %struct._object** %value475, align 8
  %355 = load %struct._object*, %struct._object** %value475, align 8
  %call478 = call %struct._object* @PyNumber_Positive(%struct._object* %355)
  store %struct._object* %call478, %struct._object** %res, align 8
  br label %do.body.479

do.body.479:                                      ; preds = %sw.bb.473
  %356 = load %struct._object*, %struct._object** %value475, align 8
  store %struct._object* %356, %struct._object** %_py_decref_tmp481, align 8
  %357 = load %struct._object*, %struct._object** %_py_decref_tmp481, align 8
  %ob_refcnt482 = getelementptr inbounds %struct._object, %struct._object* %357, i32 0, i32 0
  %358 = load i64, i64* %ob_refcnt482, align 8
  %dec483 = add i64 %358, -1
  store i64 %dec483, i64* %ob_refcnt482, align 8
  %cmp484 = icmp ne i64 %dec483, 0
  br i1 %cmp484, label %if.then.486, label %if.else.487

if.then.486:                                      ; preds = %do.body.479
  br label %if.end.490

if.else.487:                                      ; preds = %do.body.479
  %359 = load %struct._object*, %struct._object** %_py_decref_tmp481, align 8
  %ob_type488 = getelementptr inbounds %struct._object, %struct._object* %359, i32 0, i32 1
  %360 = load %struct._typeobject*, %struct._typeobject** %ob_type488, align 8
  %tp_dealloc489 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %360, i32 0, i32 4
  %361 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc489, align 8
  %362 = load %struct._object*, %struct._object** %_py_decref_tmp481, align 8
  call void %361(%struct._object* %362)
  br label %if.end.490

if.end.490:                                       ; preds = %if.else.487, %if.then.486
  br label %do.end.491

do.end.491:                                       ; preds = %if.end.490
  %363 = load %struct._object*, %struct._object** %res, align 8
  %364 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx492 = getelementptr %struct._object*, %struct._object** %364, i64 -1
  store %struct._object* %363, %struct._object** %arrayidx492, align 8
  %365 = load %struct._object*, %struct._object** %res, align 8
  %cmp493 = icmp eq %struct._object* %365, null
  br i1 %cmp493, label %if.then.495, label %if.end.496

if.then.495:                                      ; preds = %do.end.491
  br label %error

if.end.496:                                       ; preds = %do.end.491
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val498, align 8
  %366 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val498, align 8
  %_value503 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %366, i32 0, i32 0
  store i32* %_value503, i32** %volatile_data502, align 8
  store i32 0, i32* %order505, align 4
  %367 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val498, align 8
  %368 = bitcast %struct._Py_atomic_int* %367 to i8*
  %369 = load i32, i32* %order505, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %368, i32 %369)
  %370 = load i32, i32* %order505, align 4
  switch i32 %370, label %sw.default.507 [
    i32 2, label %sw.bb.506
    i32 3, label %sw.bb.506
    i32 4, label %sw.bb.506
  ]

sw.bb.506:                                        ; preds = %if.end.496, %if.end.496, %if.end.496
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.508

sw.default.507:                                   ; preds = %if.end.496
  br label %sw.epilog.508

sw.epilog.508:                                    ; preds = %sw.default.507, %sw.bb.506
  %371 = load i32*, i32** %volatile_data502, align 8
  %372 = load volatile i32, i32* %371, align 4
  store i32 %372, i32* %result500, align 4
  %373 = load i32, i32* %order505, align 4
  switch i32 %373, label %sw.default.510 [
    i32 1, label %sw.bb.509
    i32 3, label %sw.bb.509
    i32 4, label %sw.bb.509
  ]

sw.bb.509:                                        ; preds = %sw.epilog.508, %sw.epilog.508, %sw.epilog.508
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.511

sw.default.510:                                   ; preds = %sw.epilog.508
  br label %sw.epilog.511

sw.epilog.511:                                    ; preds = %sw.default.510, %sw.bb.509
  %374 = load i32, i32* %result500, align 4
  store i32 %374, i32* %tmp512
  %375 = load i32, i32* %tmp512
  %tobool513 = icmp ne i32 %375, 0
  br i1 %tobool513, label %if.end.526, label %if.then.514

if.then.514:                                      ; preds = %sw.epilog.511
  %376 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool515 = icmp ne i32 %376, 0
  br i1 %tobool515, label %if.end.525, label %if.then.516

if.then.516:                                      ; preds = %if.then.514
  %377 = load i8*, i8** %next_instr, align 8
  %378 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast517 = ptrtoint i8* %377 to i64
  %sub.ptr.rhs.cast518 = ptrtoint i8* %378 to i64
  %sub.ptr.sub519 = sub i64 %sub.ptr.lhs.cast517, %sub.ptr.rhs.cast518
  %conv520 = trunc i64 %sub.ptr.sub519 to i32
  %379 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti521 = getelementptr inbounds %struct._frame, %struct._frame* %379, i32 0, i32 13
  store i32 %conv520, i32* %f_lasti521, align 4
  %380 = load i8*, i8** %next_instr, align 8
  %incdec.ptr522 = getelementptr i8, i8* %380, i32 1
  store i8* %incdec.ptr522, i8** %next_instr, align 8
  %381 = load i8, i8* %380, align 1
  %idxprom523 = zext i8 %381 to i64
  %arrayidx524 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom523
  %382 = load i8*, i8** %arrayidx524, align 8
  br label %indirectgoto

if.end.525:                                       ; preds = %if.then.514
  br label %fast_next_opcode

if.end.526:                                       ; preds = %sw.epilog.511
  br label %for.cond

TARGET_UNARY_NEGATIVE:                            ; preds = %indirectgoto
  store i32 11, i32* %opcode, align 4
  br label %sw.bb.527

sw.bb.527:                                        ; preds = %dispatch_opcode, %TARGET_UNARY_NEGATIVE
  %383 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx530 = getelementptr %struct._object*, %struct._object** %383, i64 -1
  %384 = load %struct._object*, %struct._object** %arrayidx530, align 8
  store %struct._object* %384, %struct._object** %value529, align 8
  %385 = load %struct._object*, %struct._object** %value529, align 8
  %call533 = call %struct._object* @PyNumber_Negative(%struct._object* %385)
  store %struct._object* %call533, %struct._object** %res532, align 8
  br label %do.body.534

do.body.534:                                      ; preds = %sw.bb.527
  %386 = load %struct._object*, %struct._object** %value529, align 8
  store %struct._object* %386, %struct._object** %_py_decref_tmp536, align 8
  %387 = load %struct._object*, %struct._object** %_py_decref_tmp536, align 8
  %ob_refcnt537 = getelementptr inbounds %struct._object, %struct._object* %387, i32 0, i32 0
  %388 = load i64, i64* %ob_refcnt537, align 8
  %dec538 = add i64 %388, -1
  store i64 %dec538, i64* %ob_refcnt537, align 8
  %cmp539 = icmp ne i64 %dec538, 0
  br i1 %cmp539, label %if.then.541, label %if.else.542

if.then.541:                                      ; preds = %do.body.534
  br label %if.end.545

if.else.542:                                      ; preds = %do.body.534
  %389 = load %struct._object*, %struct._object** %_py_decref_tmp536, align 8
  %ob_type543 = getelementptr inbounds %struct._object, %struct._object* %389, i32 0, i32 1
  %390 = load %struct._typeobject*, %struct._typeobject** %ob_type543, align 8
  %tp_dealloc544 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %390, i32 0, i32 4
  %391 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc544, align 8
  %392 = load %struct._object*, %struct._object** %_py_decref_tmp536, align 8
  call void %391(%struct._object* %392)
  br label %if.end.545

if.end.545:                                       ; preds = %if.else.542, %if.then.541
  br label %do.end.546

do.end.546:                                       ; preds = %if.end.545
  %393 = load %struct._object*, %struct._object** %res532, align 8
  %394 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx547 = getelementptr %struct._object*, %struct._object** %394, i64 -1
  store %struct._object* %393, %struct._object** %arrayidx547, align 8
  %395 = load %struct._object*, %struct._object** %res532, align 8
  %cmp548 = icmp eq %struct._object* %395, null
  br i1 %cmp548, label %if.then.550, label %if.end.551

if.then.550:                                      ; preds = %do.end.546
  br label %error

if.end.551:                                       ; preds = %do.end.546
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val553, align 8
  %396 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val553, align 8
  %_value558 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %396, i32 0, i32 0
  store i32* %_value558, i32** %volatile_data557, align 8
  store i32 0, i32* %order560, align 4
  %397 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val553, align 8
  %398 = bitcast %struct._Py_atomic_int* %397 to i8*
  %399 = load i32, i32* %order560, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %398, i32 %399)
  %400 = load i32, i32* %order560, align 4
  switch i32 %400, label %sw.default.562 [
    i32 2, label %sw.bb.561
    i32 3, label %sw.bb.561
    i32 4, label %sw.bb.561
  ]

sw.bb.561:                                        ; preds = %if.end.551, %if.end.551, %if.end.551
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.563

sw.default.562:                                   ; preds = %if.end.551
  br label %sw.epilog.563

sw.epilog.563:                                    ; preds = %sw.default.562, %sw.bb.561
  %401 = load i32*, i32** %volatile_data557, align 8
  %402 = load volatile i32, i32* %401, align 4
  store i32 %402, i32* %result555, align 4
  %403 = load i32, i32* %order560, align 4
  switch i32 %403, label %sw.default.565 [
    i32 1, label %sw.bb.564
    i32 3, label %sw.bb.564
    i32 4, label %sw.bb.564
  ]

sw.bb.564:                                        ; preds = %sw.epilog.563, %sw.epilog.563, %sw.epilog.563
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.566

sw.default.565:                                   ; preds = %sw.epilog.563
  br label %sw.epilog.566

sw.epilog.566:                                    ; preds = %sw.default.565, %sw.bb.564
  %404 = load i32, i32* %result555, align 4
  store i32 %404, i32* %tmp567
  %405 = load i32, i32* %tmp567
  %tobool568 = icmp ne i32 %405, 0
  br i1 %tobool568, label %if.end.581, label %if.then.569

if.then.569:                                      ; preds = %sw.epilog.566
  %406 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool570 = icmp ne i32 %406, 0
  br i1 %tobool570, label %if.end.580, label %if.then.571

if.then.571:                                      ; preds = %if.then.569
  %407 = load i8*, i8** %next_instr, align 8
  %408 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast572 = ptrtoint i8* %407 to i64
  %sub.ptr.rhs.cast573 = ptrtoint i8* %408 to i64
  %sub.ptr.sub574 = sub i64 %sub.ptr.lhs.cast572, %sub.ptr.rhs.cast573
  %conv575 = trunc i64 %sub.ptr.sub574 to i32
  %409 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti576 = getelementptr inbounds %struct._frame, %struct._frame* %409, i32 0, i32 13
  store i32 %conv575, i32* %f_lasti576, align 4
  %410 = load i8*, i8** %next_instr, align 8
  %incdec.ptr577 = getelementptr i8, i8* %410, i32 1
  store i8* %incdec.ptr577, i8** %next_instr, align 8
  %411 = load i8, i8* %410, align 1
  %idxprom578 = zext i8 %411 to i64
  %arrayidx579 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom578
  %412 = load i8*, i8** %arrayidx579, align 8
  br label %indirectgoto

if.end.580:                                       ; preds = %if.then.569
  br label %fast_next_opcode

if.end.581:                                       ; preds = %sw.epilog.566
  br label %for.cond

TARGET_UNARY_NOT:                                 ; preds = %indirectgoto
  store i32 12, i32* %opcode, align 4
  br label %sw.bb.582

sw.bb.582:                                        ; preds = %dispatch_opcode, %TARGET_UNARY_NOT
  %413 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx585 = getelementptr %struct._object*, %struct._object** %413, i64 -1
  %414 = load %struct._object*, %struct._object** %arrayidx585, align 8
  store %struct._object* %414, %struct._object** %value584, align 8
  %415 = load %struct._object*, %struct._object** %value584, align 8
  %call588 = call i32 @PyObject_IsTrue(%struct._object* %415)
  store i32 %call588, i32* %err587, align 4
  br label %do.body.589

do.body.589:                                      ; preds = %sw.bb.582
  %416 = load %struct._object*, %struct._object** %value584, align 8
  store %struct._object* %416, %struct._object** %_py_decref_tmp591, align 8
  %417 = load %struct._object*, %struct._object** %_py_decref_tmp591, align 8
  %ob_refcnt592 = getelementptr inbounds %struct._object, %struct._object* %417, i32 0, i32 0
  %418 = load i64, i64* %ob_refcnt592, align 8
  %dec593 = add i64 %418, -1
  store i64 %dec593, i64* %ob_refcnt592, align 8
  %cmp594 = icmp ne i64 %dec593, 0
  br i1 %cmp594, label %if.then.596, label %if.else.597

if.then.596:                                      ; preds = %do.body.589
  br label %if.end.600

if.else.597:                                      ; preds = %do.body.589
  %419 = load %struct._object*, %struct._object** %_py_decref_tmp591, align 8
  %ob_type598 = getelementptr inbounds %struct._object, %struct._object* %419, i32 0, i32 1
  %420 = load %struct._typeobject*, %struct._typeobject** %ob_type598, align 8
  %tp_dealloc599 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %420, i32 0, i32 4
  %421 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc599, align 8
  %422 = load %struct._object*, %struct._object** %_py_decref_tmp591, align 8
  call void %421(%struct._object* %422)
  br label %if.end.600

if.end.600:                                       ; preds = %if.else.597, %if.then.596
  br label %do.end.601

do.end.601:                                       ; preds = %if.end.600
  %423 = load i32, i32* %err587, align 4
  %cmp602 = icmp eq i32 %423, 0
  br i1 %cmp602, label %if.then.604, label %if.else.637

if.then.604:                                      ; preds = %do.end.601
  %424 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc605 = add i64 %424, 1
  store i64 %inc605, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %425 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx606 = getelementptr %struct._object*, %struct._object** %425, i64 -1
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object** %arrayidx606, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val608, align 8
  %426 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val608, align 8
  %_value613 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %426, i32 0, i32 0
  store i32* %_value613, i32** %volatile_data612, align 8
  store i32 0, i32* %order615, align 4
  %427 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val608, align 8
  %428 = bitcast %struct._Py_atomic_int* %427 to i8*
  %429 = load i32, i32* %order615, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %428, i32 %429)
  %430 = load i32, i32* %order615, align 4
  switch i32 %430, label %sw.default.617 [
    i32 2, label %sw.bb.616
    i32 3, label %sw.bb.616
    i32 4, label %sw.bb.616
  ]

sw.bb.616:                                        ; preds = %if.then.604, %if.then.604, %if.then.604
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.618

sw.default.617:                                   ; preds = %if.then.604
  br label %sw.epilog.618

sw.epilog.618:                                    ; preds = %sw.default.617, %sw.bb.616
  %431 = load i32*, i32** %volatile_data612, align 8
  %432 = load volatile i32, i32* %431, align 4
  store i32 %432, i32* %result610, align 4
  %433 = load i32, i32* %order615, align 4
  switch i32 %433, label %sw.default.620 [
    i32 1, label %sw.bb.619
    i32 3, label %sw.bb.619
    i32 4, label %sw.bb.619
  ]

sw.bb.619:                                        ; preds = %sw.epilog.618, %sw.epilog.618, %sw.epilog.618
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.621

sw.default.620:                                   ; preds = %sw.epilog.618
  br label %sw.epilog.621

sw.epilog.621:                                    ; preds = %sw.default.620, %sw.bb.619
  %434 = load i32, i32* %result610, align 4
  store i32 %434, i32* %tmp622
  %435 = load i32, i32* %tmp622
  %tobool623 = icmp ne i32 %435, 0
  br i1 %tobool623, label %if.end.636, label %if.then.624

if.then.624:                                      ; preds = %sw.epilog.621
  %436 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool625 = icmp ne i32 %436, 0
  br i1 %tobool625, label %if.end.635, label %if.then.626

if.then.626:                                      ; preds = %if.then.624
  %437 = load i8*, i8** %next_instr, align 8
  %438 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast627 = ptrtoint i8* %437 to i64
  %sub.ptr.rhs.cast628 = ptrtoint i8* %438 to i64
  %sub.ptr.sub629 = sub i64 %sub.ptr.lhs.cast627, %sub.ptr.rhs.cast628
  %conv630 = trunc i64 %sub.ptr.sub629 to i32
  %439 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti631 = getelementptr inbounds %struct._frame, %struct._frame* %439, i32 0, i32 13
  store i32 %conv630, i32* %f_lasti631, align 4
  %440 = load i8*, i8** %next_instr, align 8
  %incdec.ptr632 = getelementptr i8, i8* %440, i32 1
  store i8* %incdec.ptr632, i8** %next_instr, align 8
  %441 = load i8, i8* %440, align 1
  %idxprom633 = zext i8 %441 to i64
  %arrayidx634 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom633
  %442 = load i8*, i8** %arrayidx634, align 8
  br label %indirectgoto

if.end.635:                                       ; preds = %if.then.624
  br label %fast_next_opcode

if.end.636:                                       ; preds = %sw.epilog.621
  br label %for.cond

if.else.637:                                      ; preds = %do.end.601
  %443 = load i32, i32* %err587, align 4
  %cmp638 = icmp sgt i32 %443, 0
  br i1 %cmp638, label %if.then.640, label %if.end.673

if.then.640:                                      ; preds = %if.else.637
  %444 = load i64, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %inc641 = add i64 %444, 1
  store i64 %inc641, i64* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0, i32 0), align 8
  %445 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx642 = getelementptr %struct._object*, %struct._object** %445, i64 -1
  store %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0), %struct._object** %arrayidx642, align 8
  store i32 0, i32* %err587, align 4
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val644, align 8
  %446 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val644, align 8
  %_value649 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %446, i32 0, i32 0
  store i32* %_value649, i32** %volatile_data648, align 8
  store i32 0, i32* %order651, align 4
  %447 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val644, align 8
  %448 = bitcast %struct._Py_atomic_int* %447 to i8*
  %449 = load i32, i32* %order651, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %448, i32 %449)
  %450 = load i32, i32* %order651, align 4
  switch i32 %450, label %sw.default.653 [
    i32 2, label %sw.bb.652
    i32 3, label %sw.bb.652
    i32 4, label %sw.bb.652
  ]

sw.bb.652:                                        ; preds = %if.then.640, %if.then.640, %if.then.640
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.654

sw.default.653:                                   ; preds = %if.then.640
  br label %sw.epilog.654

sw.epilog.654:                                    ; preds = %sw.default.653, %sw.bb.652
  %451 = load i32*, i32** %volatile_data648, align 8
  %452 = load volatile i32, i32* %451, align 4
  store i32 %452, i32* %result646, align 4
  %453 = load i32, i32* %order651, align 4
  switch i32 %453, label %sw.default.656 [
    i32 1, label %sw.bb.655
    i32 3, label %sw.bb.655
    i32 4, label %sw.bb.655
  ]

sw.bb.655:                                        ; preds = %sw.epilog.654, %sw.epilog.654, %sw.epilog.654
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.657

sw.default.656:                                   ; preds = %sw.epilog.654
  br label %sw.epilog.657

sw.epilog.657:                                    ; preds = %sw.default.656, %sw.bb.655
  %454 = load i32, i32* %result646, align 4
  store i32 %454, i32* %tmp658
  %455 = load i32, i32* %tmp658
  %tobool659 = icmp ne i32 %455, 0
  br i1 %tobool659, label %if.end.672, label %if.then.660

if.then.660:                                      ; preds = %sw.epilog.657
  %456 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool661 = icmp ne i32 %456, 0
  br i1 %tobool661, label %if.end.671, label %if.then.662

if.then.662:                                      ; preds = %if.then.660
  %457 = load i8*, i8** %next_instr, align 8
  %458 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast663 = ptrtoint i8* %457 to i64
  %sub.ptr.rhs.cast664 = ptrtoint i8* %458 to i64
  %sub.ptr.sub665 = sub i64 %sub.ptr.lhs.cast663, %sub.ptr.rhs.cast664
  %conv666 = trunc i64 %sub.ptr.sub665 to i32
  %459 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti667 = getelementptr inbounds %struct._frame, %struct._frame* %459, i32 0, i32 13
  store i32 %conv666, i32* %f_lasti667, align 4
  %460 = load i8*, i8** %next_instr, align 8
  %incdec.ptr668 = getelementptr i8, i8* %460, i32 1
  store i8* %incdec.ptr668, i8** %next_instr, align 8
  %461 = load i8, i8* %460, align 1
  %idxprom669 = zext i8 %461 to i64
  %arrayidx670 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom669
  %462 = load i8*, i8** %arrayidx670, align 8
  br label %indirectgoto

if.end.671:                                       ; preds = %if.then.660
  br label %fast_next_opcode

if.end.672:                                       ; preds = %sw.epilog.657
  br label %for.cond

if.end.673:                                       ; preds = %if.else.637
  br label %if.end.674

if.end.674:                                       ; preds = %if.end.673
  %463 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr675 = getelementptr %struct._object*, %struct._object** %463, i64 -1
  store %struct._object** %add.ptr675, %struct._object*** %stack_pointer, align 8
  br label %error

TARGET_UNARY_INVERT:                              ; preds = %indirectgoto
  store i32 15, i32* %opcode, align 4
  br label %sw.bb.676

sw.bb.676:                                        ; preds = %dispatch_opcode, %TARGET_UNARY_INVERT
  %464 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx679 = getelementptr %struct._object*, %struct._object** %464, i64 -1
  %465 = load %struct._object*, %struct._object** %arrayidx679, align 8
  store %struct._object* %465, %struct._object** %value678, align 8
  %466 = load %struct._object*, %struct._object** %value678, align 8
  %call682 = call %struct._object* @PyNumber_Invert(%struct._object* %466)
  store %struct._object* %call682, %struct._object** %res681, align 8
  br label %do.body.683

do.body.683:                                      ; preds = %sw.bb.676
  %467 = load %struct._object*, %struct._object** %value678, align 8
  store %struct._object* %467, %struct._object** %_py_decref_tmp685, align 8
  %468 = load %struct._object*, %struct._object** %_py_decref_tmp685, align 8
  %ob_refcnt686 = getelementptr inbounds %struct._object, %struct._object* %468, i32 0, i32 0
  %469 = load i64, i64* %ob_refcnt686, align 8
  %dec687 = add i64 %469, -1
  store i64 %dec687, i64* %ob_refcnt686, align 8
  %cmp688 = icmp ne i64 %dec687, 0
  br i1 %cmp688, label %if.then.690, label %if.else.691

if.then.690:                                      ; preds = %do.body.683
  br label %if.end.694

if.else.691:                                      ; preds = %do.body.683
  %470 = load %struct._object*, %struct._object** %_py_decref_tmp685, align 8
  %ob_type692 = getelementptr inbounds %struct._object, %struct._object* %470, i32 0, i32 1
  %471 = load %struct._typeobject*, %struct._typeobject** %ob_type692, align 8
  %tp_dealloc693 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %471, i32 0, i32 4
  %472 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc693, align 8
  %473 = load %struct._object*, %struct._object** %_py_decref_tmp685, align 8
  call void %472(%struct._object* %473)
  br label %if.end.694

if.end.694:                                       ; preds = %if.else.691, %if.then.690
  br label %do.end.695

do.end.695:                                       ; preds = %if.end.694
  %474 = load %struct._object*, %struct._object** %res681, align 8
  %475 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx696 = getelementptr %struct._object*, %struct._object** %475, i64 -1
  store %struct._object* %474, %struct._object** %arrayidx696, align 8
  %476 = load %struct._object*, %struct._object** %res681, align 8
  %cmp697 = icmp eq %struct._object* %476, null
  br i1 %cmp697, label %if.then.699, label %if.end.700

if.then.699:                                      ; preds = %do.end.695
  br label %error

if.end.700:                                       ; preds = %do.end.695
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val702, align 8
  %477 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val702, align 8
  %_value707 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %477, i32 0, i32 0
  store i32* %_value707, i32** %volatile_data706, align 8
  store i32 0, i32* %order709, align 4
  %478 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val702, align 8
  %479 = bitcast %struct._Py_atomic_int* %478 to i8*
  %480 = load i32, i32* %order709, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %479, i32 %480)
  %481 = load i32, i32* %order709, align 4
  switch i32 %481, label %sw.default.711 [
    i32 2, label %sw.bb.710
    i32 3, label %sw.bb.710
    i32 4, label %sw.bb.710
  ]

sw.bb.710:                                        ; preds = %if.end.700, %if.end.700, %if.end.700
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.712

sw.default.711:                                   ; preds = %if.end.700
  br label %sw.epilog.712

sw.epilog.712:                                    ; preds = %sw.default.711, %sw.bb.710
  %482 = load i32*, i32** %volatile_data706, align 8
  %483 = load volatile i32, i32* %482, align 4
  store i32 %483, i32* %result704, align 4
  %484 = load i32, i32* %order709, align 4
  switch i32 %484, label %sw.default.714 [
    i32 1, label %sw.bb.713
    i32 3, label %sw.bb.713
    i32 4, label %sw.bb.713
  ]

sw.bb.713:                                        ; preds = %sw.epilog.712, %sw.epilog.712, %sw.epilog.712
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.715

sw.default.714:                                   ; preds = %sw.epilog.712
  br label %sw.epilog.715

sw.epilog.715:                                    ; preds = %sw.default.714, %sw.bb.713
  %485 = load i32, i32* %result704, align 4
  store i32 %485, i32* %tmp716
  %486 = load i32, i32* %tmp716
  %tobool717 = icmp ne i32 %486, 0
  br i1 %tobool717, label %if.end.730, label %if.then.718

if.then.718:                                      ; preds = %sw.epilog.715
  %487 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool719 = icmp ne i32 %487, 0
  br i1 %tobool719, label %if.end.729, label %if.then.720

if.then.720:                                      ; preds = %if.then.718
  %488 = load i8*, i8** %next_instr, align 8
  %489 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast721 = ptrtoint i8* %488 to i64
  %sub.ptr.rhs.cast722 = ptrtoint i8* %489 to i64
  %sub.ptr.sub723 = sub i64 %sub.ptr.lhs.cast721, %sub.ptr.rhs.cast722
  %conv724 = trunc i64 %sub.ptr.sub723 to i32
  %490 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti725 = getelementptr inbounds %struct._frame, %struct._frame* %490, i32 0, i32 13
  store i32 %conv724, i32* %f_lasti725, align 4
  %491 = load i8*, i8** %next_instr, align 8
  %incdec.ptr726 = getelementptr i8, i8* %491, i32 1
  store i8* %incdec.ptr726, i8** %next_instr, align 8
  %492 = load i8, i8* %491, align 1
  %idxprom727 = zext i8 %492 to i64
  %arrayidx728 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom727
  %493 = load i8*, i8** %arrayidx728, align 8
  br label %indirectgoto

if.end.729:                                       ; preds = %if.then.718
  br label %fast_next_opcode

if.end.730:                                       ; preds = %sw.epilog.715
  br label %for.cond

TARGET_BINARY_POWER:                              ; preds = %indirectgoto
  store i32 19, i32* %opcode, align 4
  br label %sw.bb.731

sw.bb.731:                                        ; preds = %dispatch_opcode, %TARGET_BINARY_POWER
  %494 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr733 = getelementptr %struct._object*, %struct._object** %494, i32 -1
  store %struct._object** %incdec.ptr733, %struct._object*** %stack_pointer, align 8
  %495 = load %struct._object*, %struct._object** %incdec.ptr733, align 8
  store %struct._object* %495, %struct._object** %exp, align 8
  %496 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx735 = getelementptr %struct._object*, %struct._object** %496, i64 -1
  %497 = load %struct._object*, %struct._object** %arrayidx735, align 8
  store %struct._object* %497, %struct._object** %base, align 8
  %498 = load %struct._object*, %struct._object** %base, align 8
  %499 = load %struct._object*, %struct._object** %exp, align 8
  %call738 = call %struct._object* @PyNumber_Power(%struct._object* %498, %struct._object* %499, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call738, %struct._object** %res737, align 8
  br label %do.body.739

do.body.739:                                      ; preds = %sw.bb.731
  %500 = load %struct._object*, %struct._object** %base, align 8
  store %struct._object* %500, %struct._object** %_py_decref_tmp741, align 8
  %501 = load %struct._object*, %struct._object** %_py_decref_tmp741, align 8
  %ob_refcnt742 = getelementptr inbounds %struct._object, %struct._object* %501, i32 0, i32 0
  %502 = load i64, i64* %ob_refcnt742, align 8
  %dec743 = add i64 %502, -1
  store i64 %dec743, i64* %ob_refcnt742, align 8
  %cmp744 = icmp ne i64 %dec743, 0
  br i1 %cmp744, label %if.then.746, label %if.else.747

if.then.746:                                      ; preds = %do.body.739
  br label %if.end.750

if.else.747:                                      ; preds = %do.body.739
  %503 = load %struct._object*, %struct._object** %_py_decref_tmp741, align 8
  %ob_type748 = getelementptr inbounds %struct._object, %struct._object* %503, i32 0, i32 1
  %504 = load %struct._typeobject*, %struct._typeobject** %ob_type748, align 8
  %tp_dealloc749 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %504, i32 0, i32 4
  %505 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc749, align 8
  %506 = load %struct._object*, %struct._object** %_py_decref_tmp741, align 8
  call void %505(%struct._object* %506)
  br label %if.end.750

if.end.750:                                       ; preds = %if.else.747, %if.then.746
  br label %do.end.751

do.end.751:                                       ; preds = %if.end.750
  br label %do.body.752

do.body.752:                                      ; preds = %do.end.751
  %507 = load %struct._object*, %struct._object** %exp, align 8
  store %struct._object* %507, %struct._object** %_py_decref_tmp754, align 8
  %508 = load %struct._object*, %struct._object** %_py_decref_tmp754, align 8
  %ob_refcnt755 = getelementptr inbounds %struct._object, %struct._object* %508, i32 0, i32 0
  %509 = load i64, i64* %ob_refcnt755, align 8
  %dec756 = add i64 %509, -1
  store i64 %dec756, i64* %ob_refcnt755, align 8
  %cmp757 = icmp ne i64 %dec756, 0
  br i1 %cmp757, label %if.then.759, label %if.else.760

if.then.759:                                      ; preds = %do.body.752
  br label %if.end.763

if.else.760:                                      ; preds = %do.body.752
  %510 = load %struct._object*, %struct._object** %_py_decref_tmp754, align 8
  %ob_type761 = getelementptr inbounds %struct._object, %struct._object* %510, i32 0, i32 1
  %511 = load %struct._typeobject*, %struct._typeobject** %ob_type761, align 8
  %tp_dealloc762 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %511, i32 0, i32 4
  %512 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc762, align 8
  %513 = load %struct._object*, %struct._object** %_py_decref_tmp754, align 8
  call void %512(%struct._object* %513)
  br label %if.end.763

if.end.763:                                       ; preds = %if.else.760, %if.then.759
  br label %do.end.764

do.end.764:                                       ; preds = %if.end.763
  %514 = load %struct._object*, %struct._object** %res737, align 8
  %515 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx765 = getelementptr %struct._object*, %struct._object** %515, i64 -1
  store %struct._object* %514, %struct._object** %arrayidx765, align 8
  %516 = load %struct._object*, %struct._object** %res737, align 8
  %cmp766 = icmp eq %struct._object* %516, null
  br i1 %cmp766, label %if.then.768, label %if.end.769

if.then.768:                                      ; preds = %do.end.764
  br label %error

if.end.769:                                       ; preds = %do.end.764
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val771, align 8
  %517 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val771, align 8
  %_value776 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %517, i32 0, i32 0
  store i32* %_value776, i32** %volatile_data775, align 8
  store i32 0, i32* %order778, align 4
  %518 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val771, align 8
  %519 = bitcast %struct._Py_atomic_int* %518 to i8*
  %520 = load i32, i32* %order778, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %519, i32 %520)
  %521 = load i32, i32* %order778, align 4
  switch i32 %521, label %sw.default.780 [
    i32 2, label %sw.bb.779
    i32 3, label %sw.bb.779
    i32 4, label %sw.bb.779
  ]

sw.bb.779:                                        ; preds = %if.end.769, %if.end.769, %if.end.769
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.781

sw.default.780:                                   ; preds = %if.end.769
  br label %sw.epilog.781

sw.epilog.781:                                    ; preds = %sw.default.780, %sw.bb.779
  %522 = load i32*, i32** %volatile_data775, align 8
  %523 = load volatile i32, i32* %522, align 4
  store i32 %523, i32* %result773, align 4
  %524 = load i32, i32* %order778, align 4
  switch i32 %524, label %sw.default.783 [
    i32 1, label %sw.bb.782
    i32 3, label %sw.bb.782
    i32 4, label %sw.bb.782
  ]

sw.bb.782:                                        ; preds = %sw.epilog.781, %sw.epilog.781, %sw.epilog.781
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.784

sw.default.783:                                   ; preds = %sw.epilog.781
  br label %sw.epilog.784

sw.epilog.784:                                    ; preds = %sw.default.783, %sw.bb.782
  %525 = load i32, i32* %result773, align 4
  store i32 %525, i32* %tmp785
  %526 = load i32, i32* %tmp785
  %tobool786 = icmp ne i32 %526, 0
  br i1 %tobool786, label %if.end.799, label %if.then.787

if.then.787:                                      ; preds = %sw.epilog.784
  %527 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool788 = icmp ne i32 %527, 0
  br i1 %tobool788, label %if.end.798, label %if.then.789

if.then.789:                                      ; preds = %if.then.787
  %528 = load i8*, i8** %next_instr, align 8
  %529 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast790 = ptrtoint i8* %528 to i64
  %sub.ptr.rhs.cast791 = ptrtoint i8* %529 to i64
  %sub.ptr.sub792 = sub i64 %sub.ptr.lhs.cast790, %sub.ptr.rhs.cast791
  %conv793 = trunc i64 %sub.ptr.sub792 to i32
  %530 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti794 = getelementptr inbounds %struct._frame, %struct._frame* %530, i32 0, i32 13
  store i32 %conv793, i32* %f_lasti794, align 4
  %531 = load i8*, i8** %next_instr, align 8
  %incdec.ptr795 = getelementptr i8, i8* %531, i32 1
  store i8* %incdec.ptr795, i8** %next_instr, align 8
  %532 = load i8, i8* %531, align 1
  %idxprom796 = zext i8 %532 to i64
  %arrayidx797 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom796
  %533 = load i8*, i8** %arrayidx797, align 8
  br label %indirectgoto

if.end.798:                                       ; preds = %if.then.787
  br label %fast_next_opcode

if.end.799:                                       ; preds = %sw.epilog.784
  br label %for.cond

TARGET_BINARY_MULTIPLY:                           ; preds = %indirectgoto
  store i32 20, i32* %opcode, align 4
  br label %sw.bb.800

sw.bb.800:                                        ; preds = %dispatch_opcode, %TARGET_BINARY_MULTIPLY
  %534 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr802 = getelementptr %struct._object*, %struct._object** %534, i32 -1
  store %struct._object** %incdec.ptr802, %struct._object*** %stack_pointer, align 8
  %535 = load %struct._object*, %struct._object** %incdec.ptr802, align 8
  store %struct._object* %535, %struct._object** %right, align 8
  %536 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx804 = getelementptr %struct._object*, %struct._object** %536, i64 -1
  %537 = load %struct._object*, %struct._object** %arrayidx804, align 8
  store %struct._object* %537, %struct._object** %left, align 8
  %538 = load %struct._object*, %struct._object** %left, align 8
  %539 = load %struct._object*, %struct._object** %right, align 8
  %call807 = call %struct._object* @PyNumber_Multiply(%struct._object* %538, %struct._object* %539)
  store %struct._object* %call807, %struct._object** %res806, align 8
  br label %do.body.808

do.body.808:                                      ; preds = %sw.bb.800
  %540 = load %struct._object*, %struct._object** %left, align 8
  store %struct._object* %540, %struct._object** %_py_decref_tmp810, align 8
  %541 = load %struct._object*, %struct._object** %_py_decref_tmp810, align 8
  %ob_refcnt811 = getelementptr inbounds %struct._object, %struct._object* %541, i32 0, i32 0
  %542 = load i64, i64* %ob_refcnt811, align 8
  %dec812 = add i64 %542, -1
  store i64 %dec812, i64* %ob_refcnt811, align 8
  %cmp813 = icmp ne i64 %dec812, 0
  br i1 %cmp813, label %if.then.815, label %if.else.816

if.then.815:                                      ; preds = %do.body.808
  br label %if.end.819

if.else.816:                                      ; preds = %do.body.808
  %543 = load %struct._object*, %struct._object** %_py_decref_tmp810, align 8
  %ob_type817 = getelementptr inbounds %struct._object, %struct._object* %543, i32 0, i32 1
  %544 = load %struct._typeobject*, %struct._typeobject** %ob_type817, align 8
  %tp_dealloc818 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %544, i32 0, i32 4
  %545 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc818, align 8
  %546 = load %struct._object*, %struct._object** %_py_decref_tmp810, align 8
  call void %545(%struct._object* %546)
  br label %if.end.819

if.end.819:                                       ; preds = %if.else.816, %if.then.815
  br label %do.end.820

do.end.820:                                       ; preds = %if.end.819
  br label %do.body.821

do.body.821:                                      ; preds = %do.end.820
  %547 = load %struct._object*, %struct._object** %right, align 8
  store %struct._object* %547, %struct._object** %_py_decref_tmp823, align 8
  %548 = load %struct._object*, %struct._object** %_py_decref_tmp823, align 8
  %ob_refcnt824 = getelementptr inbounds %struct._object, %struct._object* %548, i32 0, i32 0
  %549 = load i64, i64* %ob_refcnt824, align 8
  %dec825 = add i64 %549, -1
  store i64 %dec825, i64* %ob_refcnt824, align 8
  %cmp826 = icmp ne i64 %dec825, 0
  br i1 %cmp826, label %if.then.828, label %if.else.829

if.then.828:                                      ; preds = %do.body.821
  br label %if.end.832

if.else.829:                                      ; preds = %do.body.821
  %550 = load %struct._object*, %struct._object** %_py_decref_tmp823, align 8
  %ob_type830 = getelementptr inbounds %struct._object, %struct._object* %550, i32 0, i32 1
  %551 = load %struct._typeobject*, %struct._typeobject** %ob_type830, align 8
  %tp_dealloc831 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %551, i32 0, i32 4
  %552 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc831, align 8
  %553 = load %struct._object*, %struct._object** %_py_decref_tmp823, align 8
  call void %552(%struct._object* %553)
  br label %if.end.832

if.end.832:                                       ; preds = %if.else.829, %if.then.828
  br label %do.end.833

do.end.833:                                       ; preds = %if.end.832
  %554 = load %struct._object*, %struct._object** %res806, align 8
  %555 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx834 = getelementptr %struct._object*, %struct._object** %555, i64 -1
  store %struct._object* %554, %struct._object** %arrayidx834, align 8
  %556 = load %struct._object*, %struct._object** %res806, align 8
  %cmp835 = icmp eq %struct._object* %556, null
  br i1 %cmp835, label %if.then.837, label %if.end.838

if.then.837:                                      ; preds = %do.end.833
  br label %error

if.end.838:                                       ; preds = %do.end.833
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val840, align 8
  %557 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val840, align 8
  %_value845 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %557, i32 0, i32 0
  store i32* %_value845, i32** %volatile_data844, align 8
  store i32 0, i32* %order847, align 4
  %558 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val840, align 8
  %559 = bitcast %struct._Py_atomic_int* %558 to i8*
  %560 = load i32, i32* %order847, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %559, i32 %560)
  %561 = load i32, i32* %order847, align 4
  switch i32 %561, label %sw.default.849 [
    i32 2, label %sw.bb.848
    i32 3, label %sw.bb.848
    i32 4, label %sw.bb.848
  ]

sw.bb.848:                                        ; preds = %if.end.838, %if.end.838, %if.end.838
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.850

sw.default.849:                                   ; preds = %if.end.838
  br label %sw.epilog.850

sw.epilog.850:                                    ; preds = %sw.default.849, %sw.bb.848
  %562 = load i32*, i32** %volatile_data844, align 8
  %563 = load volatile i32, i32* %562, align 4
  store i32 %563, i32* %result842, align 4
  %564 = load i32, i32* %order847, align 4
  switch i32 %564, label %sw.default.852 [
    i32 1, label %sw.bb.851
    i32 3, label %sw.bb.851
    i32 4, label %sw.bb.851
  ]

sw.bb.851:                                        ; preds = %sw.epilog.850, %sw.epilog.850, %sw.epilog.850
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.853

sw.default.852:                                   ; preds = %sw.epilog.850
  br label %sw.epilog.853

sw.epilog.853:                                    ; preds = %sw.default.852, %sw.bb.851
  %565 = load i32, i32* %result842, align 4
  store i32 %565, i32* %tmp854
  %566 = load i32, i32* %tmp854
  %tobool855 = icmp ne i32 %566, 0
  br i1 %tobool855, label %if.end.868, label %if.then.856

if.then.856:                                      ; preds = %sw.epilog.853
  %567 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool857 = icmp ne i32 %567, 0
  br i1 %tobool857, label %if.end.867, label %if.then.858

if.then.858:                                      ; preds = %if.then.856
  %568 = load i8*, i8** %next_instr, align 8
  %569 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast859 = ptrtoint i8* %568 to i64
  %sub.ptr.rhs.cast860 = ptrtoint i8* %569 to i64
  %sub.ptr.sub861 = sub i64 %sub.ptr.lhs.cast859, %sub.ptr.rhs.cast860
  %conv862 = trunc i64 %sub.ptr.sub861 to i32
  %570 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti863 = getelementptr inbounds %struct._frame, %struct._frame* %570, i32 0, i32 13
  store i32 %conv862, i32* %f_lasti863, align 4
  %571 = load i8*, i8** %next_instr, align 8
  %incdec.ptr864 = getelementptr i8, i8* %571, i32 1
  store i8* %incdec.ptr864, i8** %next_instr, align 8
  %572 = load i8, i8* %571, align 1
  %idxprom865 = zext i8 %572 to i64
  %arrayidx866 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom865
  %573 = load i8*, i8** %arrayidx866, align 8
  br label %indirectgoto

if.end.867:                                       ; preds = %if.then.856
  br label %fast_next_opcode

if.end.868:                                       ; preds = %sw.epilog.853
  br label %for.cond

TARGET_BINARY_TRUE_DIVIDE:                        ; preds = %indirectgoto
  store i32 27, i32* %opcode, align 4
  br label %sw.bb.869

sw.bb.869:                                        ; preds = %dispatch_opcode, %TARGET_BINARY_TRUE_DIVIDE
  %574 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr871 = getelementptr %struct._object*, %struct._object** %574, i32 -1
  store %struct._object** %incdec.ptr871, %struct._object*** %stack_pointer, align 8
  %575 = load %struct._object*, %struct._object** %incdec.ptr871, align 8
  store %struct._object* %575, %struct._object** %divisor, align 8
  %576 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx873 = getelementptr %struct._object*, %struct._object** %576, i64 -1
  %577 = load %struct._object*, %struct._object** %arrayidx873, align 8
  store %struct._object* %577, %struct._object** %dividend, align 8
  %578 = load %struct._object*, %struct._object** %dividend, align 8
  %579 = load %struct._object*, %struct._object** %divisor, align 8
  %call875 = call %struct._object* @PyNumber_TrueDivide(%struct._object* %578, %struct._object* %579)
  store %struct._object* %call875, %struct._object** %quotient, align 8
  br label %do.body.876

do.body.876:                                      ; preds = %sw.bb.869
  %580 = load %struct._object*, %struct._object** %dividend, align 8
  store %struct._object* %580, %struct._object** %_py_decref_tmp878, align 8
  %581 = load %struct._object*, %struct._object** %_py_decref_tmp878, align 8
  %ob_refcnt879 = getelementptr inbounds %struct._object, %struct._object* %581, i32 0, i32 0
  %582 = load i64, i64* %ob_refcnt879, align 8
  %dec880 = add i64 %582, -1
  store i64 %dec880, i64* %ob_refcnt879, align 8
  %cmp881 = icmp ne i64 %dec880, 0
  br i1 %cmp881, label %if.then.883, label %if.else.884

if.then.883:                                      ; preds = %do.body.876
  br label %if.end.887

if.else.884:                                      ; preds = %do.body.876
  %583 = load %struct._object*, %struct._object** %_py_decref_tmp878, align 8
  %ob_type885 = getelementptr inbounds %struct._object, %struct._object* %583, i32 0, i32 1
  %584 = load %struct._typeobject*, %struct._typeobject** %ob_type885, align 8
  %tp_dealloc886 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %584, i32 0, i32 4
  %585 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc886, align 8
  %586 = load %struct._object*, %struct._object** %_py_decref_tmp878, align 8
  call void %585(%struct._object* %586)
  br label %if.end.887

if.end.887:                                       ; preds = %if.else.884, %if.then.883
  br label %do.end.888

do.end.888:                                       ; preds = %if.end.887
  br label %do.body.889

do.body.889:                                      ; preds = %do.end.888
  %587 = load %struct._object*, %struct._object** %divisor, align 8
  store %struct._object* %587, %struct._object** %_py_decref_tmp891, align 8
  %588 = load %struct._object*, %struct._object** %_py_decref_tmp891, align 8
  %ob_refcnt892 = getelementptr inbounds %struct._object, %struct._object* %588, i32 0, i32 0
  %589 = load i64, i64* %ob_refcnt892, align 8
  %dec893 = add i64 %589, -1
  store i64 %dec893, i64* %ob_refcnt892, align 8
  %cmp894 = icmp ne i64 %dec893, 0
  br i1 %cmp894, label %if.then.896, label %if.else.897

if.then.896:                                      ; preds = %do.body.889
  br label %if.end.900

if.else.897:                                      ; preds = %do.body.889
  %590 = load %struct._object*, %struct._object** %_py_decref_tmp891, align 8
  %ob_type898 = getelementptr inbounds %struct._object, %struct._object* %590, i32 0, i32 1
  %591 = load %struct._typeobject*, %struct._typeobject** %ob_type898, align 8
  %tp_dealloc899 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %591, i32 0, i32 4
  %592 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc899, align 8
  %593 = load %struct._object*, %struct._object** %_py_decref_tmp891, align 8
  call void %592(%struct._object* %593)
  br label %if.end.900

if.end.900:                                       ; preds = %if.else.897, %if.then.896
  br label %do.end.901

do.end.901:                                       ; preds = %if.end.900
  %594 = load %struct._object*, %struct._object** %quotient, align 8
  %595 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx902 = getelementptr %struct._object*, %struct._object** %595, i64 -1
  store %struct._object* %594, %struct._object** %arrayidx902, align 8
  %596 = load %struct._object*, %struct._object** %quotient, align 8
  %cmp903 = icmp eq %struct._object* %596, null
  br i1 %cmp903, label %if.then.905, label %if.end.906

if.then.905:                                      ; preds = %do.end.901
  br label %error

if.end.906:                                       ; preds = %do.end.901
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val908, align 8
  %597 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val908, align 8
  %_value913 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %597, i32 0, i32 0
  store i32* %_value913, i32** %volatile_data912, align 8
  store i32 0, i32* %order915, align 4
  %598 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val908, align 8
  %599 = bitcast %struct._Py_atomic_int* %598 to i8*
  %600 = load i32, i32* %order915, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %599, i32 %600)
  %601 = load i32, i32* %order915, align 4
  switch i32 %601, label %sw.default.917 [
    i32 2, label %sw.bb.916
    i32 3, label %sw.bb.916
    i32 4, label %sw.bb.916
  ]

sw.bb.916:                                        ; preds = %if.end.906, %if.end.906, %if.end.906
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.918

sw.default.917:                                   ; preds = %if.end.906
  br label %sw.epilog.918

sw.epilog.918:                                    ; preds = %sw.default.917, %sw.bb.916
  %602 = load i32*, i32** %volatile_data912, align 8
  %603 = load volatile i32, i32* %602, align 4
  store i32 %603, i32* %result910, align 4
  %604 = load i32, i32* %order915, align 4
  switch i32 %604, label %sw.default.920 [
    i32 1, label %sw.bb.919
    i32 3, label %sw.bb.919
    i32 4, label %sw.bb.919
  ]

sw.bb.919:                                        ; preds = %sw.epilog.918, %sw.epilog.918, %sw.epilog.918
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.921

sw.default.920:                                   ; preds = %sw.epilog.918
  br label %sw.epilog.921

sw.epilog.921:                                    ; preds = %sw.default.920, %sw.bb.919
  %605 = load i32, i32* %result910, align 4
  store i32 %605, i32* %tmp922
  %606 = load i32, i32* %tmp922
  %tobool923 = icmp ne i32 %606, 0
  br i1 %tobool923, label %if.end.936, label %if.then.924

if.then.924:                                      ; preds = %sw.epilog.921
  %607 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool925 = icmp ne i32 %607, 0
  br i1 %tobool925, label %if.end.935, label %if.then.926

if.then.926:                                      ; preds = %if.then.924
  %608 = load i8*, i8** %next_instr, align 8
  %609 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast927 = ptrtoint i8* %608 to i64
  %sub.ptr.rhs.cast928 = ptrtoint i8* %609 to i64
  %sub.ptr.sub929 = sub i64 %sub.ptr.lhs.cast927, %sub.ptr.rhs.cast928
  %conv930 = trunc i64 %sub.ptr.sub929 to i32
  %610 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti931 = getelementptr inbounds %struct._frame, %struct._frame* %610, i32 0, i32 13
  store i32 %conv930, i32* %f_lasti931, align 4
  %611 = load i8*, i8** %next_instr, align 8
  %incdec.ptr932 = getelementptr i8, i8* %611, i32 1
  store i8* %incdec.ptr932, i8** %next_instr, align 8
  %612 = load i8, i8* %611, align 1
  %idxprom933 = zext i8 %612 to i64
  %arrayidx934 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom933
  %613 = load i8*, i8** %arrayidx934, align 8
  br label %indirectgoto

if.end.935:                                       ; preds = %if.then.924
  br label %fast_next_opcode

if.end.936:                                       ; preds = %sw.epilog.921
  br label %for.cond

TARGET_BINARY_FLOOR_DIVIDE:                       ; preds = %indirectgoto
  store i32 26, i32* %opcode, align 4
  br label %sw.bb.937

sw.bb.937:                                        ; preds = %dispatch_opcode, %TARGET_BINARY_FLOOR_DIVIDE
  %614 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr940 = getelementptr %struct._object*, %struct._object** %614, i32 -1
  store %struct._object** %incdec.ptr940, %struct._object*** %stack_pointer, align 8
  %615 = load %struct._object*, %struct._object** %incdec.ptr940, align 8
  store %struct._object* %615, %struct._object** %divisor939, align 8
  %616 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx943 = getelementptr %struct._object*, %struct._object** %616, i64 -1
  %617 = load %struct._object*, %struct._object** %arrayidx943, align 8
  store %struct._object* %617, %struct._object** %dividend942, align 8
  %618 = load %struct._object*, %struct._object** %dividend942, align 8
  %619 = load %struct._object*, %struct._object** %divisor939, align 8
  %call946 = call %struct._object* @PyNumber_FloorDivide(%struct._object* %618, %struct._object* %619)
  store %struct._object* %call946, %struct._object** %quotient945, align 8
  br label %do.body.947

do.body.947:                                      ; preds = %sw.bb.937
  %620 = load %struct._object*, %struct._object** %dividend942, align 8
  store %struct._object* %620, %struct._object** %_py_decref_tmp949, align 8
  %621 = load %struct._object*, %struct._object** %_py_decref_tmp949, align 8
  %ob_refcnt950 = getelementptr inbounds %struct._object, %struct._object* %621, i32 0, i32 0
  %622 = load i64, i64* %ob_refcnt950, align 8
  %dec951 = add i64 %622, -1
  store i64 %dec951, i64* %ob_refcnt950, align 8
  %cmp952 = icmp ne i64 %dec951, 0
  br i1 %cmp952, label %if.then.954, label %if.else.955

if.then.954:                                      ; preds = %do.body.947
  br label %if.end.958

if.else.955:                                      ; preds = %do.body.947
  %623 = load %struct._object*, %struct._object** %_py_decref_tmp949, align 8
  %ob_type956 = getelementptr inbounds %struct._object, %struct._object* %623, i32 0, i32 1
  %624 = load %struct._typeobject*, %struct._typeobject** %ob_type956, align 8
  %tp_dealloc957 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %624, i32 0, i32 4
  %625 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc957, align 8
  %626 = load %struct._object*, %struct._object** %_py_decref_tmp949, align 8
  call void %625(%struct._object* %626)
  br label %if.end.958

if.end.958:                                       ; preds = %if.else.955, %if.then.954
  br label %do.end.959

do.end.959:                                       ; preds = %if.end.958
  br label %do.body.960

do.body.960:                                      ; preds = %do.end.959
  %627 = load %struct._object*, %struct._object** %divisor939, align 8
  store %struct._object* %627, %struct._object** %_py_decref_tmp962, align 8
  %628 = load %struct._object*, %struct._object** %_py_decref_tmp962, align 8
  %ob_refcnt963 = getelementptr inbounds %struct._object, %struct._object* %628, i32 0, i32 0
  %629 = load i64, i64* %ob_refcnt963, align 8
  %dec964 = add i64 %629, -1
  store i64 %dec964, i64* %ob_refcnt963, align 8
  %cmp965 = icmp ne i64 %dec964, 0
  br i1 %cmp965, label %if.then.967, label %if.else.968

if.then.967:                                      ; preds = %do.body.960
  br label %if.end.971

if.else.968:                                      ; preds = %do.body.960
  %630 = load %struct._object*, %struct._object** %_py_decref_tmp962, align 8
  %ob_type969 = getelementptr inbounds %struct._object, %struct._object* %630, i32 0, i32 1
  %631 = load %struct._typeobject*, %struct._typeobject** %ob_type969, align 8
  %tp_dealloc970 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %631, i32 0, i32 4
  %632 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc970, align 8
  %633 = load %struct._object*, %struct._object** %_py_decref_tmp962, align 8
  call void %632(%struct._object* %633)
  br label %if.end.971

if.end.971:                                       ; preds = %if.else.968, %if.then.967
  br label %do.end.972

do.end.972:                                       ; preds = %if.end.971
  %634 = load %struct._object*, %struct._object** %quotient945, align 8
  %635 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx973 = getelementptr %struct._object*, %struct._object** %635, i64 -1
  store %struct._object* %634, %struct._object** %arrayidx973, align 8
  %636 = load %struct._object*, %struct._object** %quotient945, align 8
  %cmp974 = icmp eq %struct._object* %636, null
  br i1 %cmp974, label %if.then.976, label %if.end.977

if.then.976:                                      ; preds = %do.end.972
  br label %error

if.end.977:                                       ; preds = %do.end.972
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val979, align 8
  %637 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val979, align 8
  %_value984 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %637, i32 0, i32 0
  store i32* %_value984, i32** %volatile_data983, align 8
  store i32 0, i32* %order986, align 4
  %638 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val979, align 8
  %639 = bitcast %struct._Py_atomic_int* %638 to i8*
  %640 = load i32, i32* %order986, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %639, i32 %640)
  %641 = load i32, i32* %order986, align 4
  switch i32 %641, label %sw.default.988 [
    i32 2, label %sw.bb.987
    i32 3, label %sw.bb.987
    i32 4, label %sw.bb.987
  ]

sw.bb.987:                                        ; preds = %if.end.977, %if.end.977, %if.end.977
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.989

sw.default.988:                                   ; preds = %if.end.977
  br label %sw.epilog.989

sw.epilog.989:                                    ; preds = %sw.default.988, %sw.bb.987
  %642 = load i32*, i32** %volatile_data983, align 8
  %643 = load volatile i32, i32* %642, align 4
  store i32 %643, i32* %result981, align 4
  %644 = load i32, i32* %order986, align 4
  switch i32 %644, label %sw.default.991 [
    i32 1, label %sw.bb.990
    i32 3, label %sw.bb.990
    i32 4, label %sw.bb.990
  ]

sw.bb.990:                                        ; preds = %sw.epilog.989, %sw.epilog.989, %sw.epilog.989
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.992

sw.default.991:                                   ; preds = %sw.epilog.989
  br label %sw.epilog.992

sw.epilog.992:                                    ; preds = %sw.default.991, %sw.bb.990
  %645 = load i32, i32* %result981, align 4
  store i32 %645, i32* %tmp993
  %646 = load i32, i32* %tmp993
  %tobool994 = icmp ne i32 %646, 0
  br i1 %tobool994, label %if.end.1007, label %if.then.995

if.then.995:                                      ; preds = %sw.epilog.992
  %647 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool996 = icmp ne i32 %647, 0
  br i1 %tobool996, label %if.end.1006, label %if.then.997

if.then.997:                                      ; preds = %if.then.995
  %648 = load i8*, i8** %next_instr, align 8
  %649 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast998 = ptrtoint i8* %648 to i64
  %sub.ptr.rhs.cast999 = ptrtoint i8* %649 to i64
  %sub.ptr.sub1000 = sub i64 %sub.ptr.lhs.cast998, %sub.ptr.rhs.cast999
  %conv1001 = trunc i64 %sub.ptr.sub1000 to i32
  %650 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1002 = getelementptr inbounds %struct._frame, %struct._frame* %650, i32 0, i32 13
  store i32 %conv1001, i32* %f_lasti1002, align 4
  %651 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1003 = getelementptr i8, i8* %651, i32 1
  store i8* %incdec.ptr1003, i8** %next_instr, align 8
  %652 = load i8, i8* %651, align 1
  %idxprom1004 = zext i8 %652 to i64
  %arrayidx1005 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1004
  %653 = load i8*, i8** %arrayidx1005, align 8
  br label %indirectgoto

if.end.1006:                                      ; preds = %if.then.995
  br label %fast_next_opcode

if.end.1007:                                      ; preds = %sw.epilog.992
  br label %for.cond

TARGET_BINARY_MODULO:                             ; preds = %indirectgoto
  store i32 22, i32* %opcode, align 4
  br label %sw.bb.1008

sw.bb.1008:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_MODULO
  %654 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1011 = getelementptr %struct._object*, %struct._object** %654, i32 -1
  store %struct._object** %incdec.ptr1011, %struct._object*** %stack_pointer, align 8
  %655 = load %struct._object*, %struct._object** %incdec.ptr1011, align 8
  store %struct._object* %655, %struct._object** %divisor1010, align 8
  %656 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1014 = getelementptr %struct._object*, %struct._object** %656, i64 -1
  %657 = load %struct._object*, %struct._object** %arrayidx1014, align 8
  store %struct._object* %657, %struct._object** %dividend1013, align 8
  %658 = load %struct._object*, %struct._object** %dividend1013, align 8
  %ob_type1017 = getelementptr inbounds %struct._object, %struct._object* %658, i32 0, i32 1
  %659 = load %struct._typeobject*, %struct._typeobject** %ob_type1017, align 8
  %cmp1018 = icmp eq %struct._typeobject* %659, @PyUnicode_Type
  br i1 %cmp1018, label %cond.true, label %cond.false

cond.true:                                        ; preds = %sw.bb.1008
  %660 = load %struct._object*, %struct._object** %dividend1013, align 8
  %661 = load %struct._object*, %struct._object** %divisor1010, align 8
  %call1020 = call %struct._object* @PyUnicode_Format(%struct._object* %660, %struct._object* %661)
  br label %cond.end

cond.false:                                       ; preds = %sw.bb.1008
  %662 = load %struct._object*, %struct._object** %dividend1013, align 8
  %663 = load %struct._object*, %struct._object** %divisor1010, align 8
  %call1021 = call %struct._object* @PyNumber_Remainder(%struct._object* %662, %struct._object* %663)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %call1020, %cond.true ], [ %call1021, %cond.false ]
  store %struct._object* %cond, %struct._object** %res1016, align 8
  br label %do.body.1022

do.body.1022:                                     ; preds = %cond.end
  %664 = load %struct._object*, %struct._object** %divisor1010, align 8
  store %struct._object* %664, %struct._object** %_py_decref_tmp1024, align 8
  %665 = load %struct._object*, %struct._object** %_py_decref_tmp1024, align 8
  %ob_refcnt1025 = getelementptr inbounds %struct._object, %struct._object* %665, i32 0, i32 0
  %666 = load i64, i64* %ob_refcnt1025, align 8
  %dec1026 = add i64 %666, -1
  store i64 %dec1026, i64* %ob_refcnt1025, align 8
  %cmp1027 = icmp ne i64 %dec1026, 0
  br i1 %cmp1027, label %if.then.1029, label %if.else.1030

if.then.1029:                                     ; preds = %do.body.1022
  br label %if.end.1033

if.else.1030:                                     ; preds = %do.body.1022
  %667 = load %struct._object*, %struct._object** %_py_decref_tmp1024, align 8
  %ob_type1031 = getelementptr inbounds %struct._object, %struct._object* %667, i32 0, i32 1
  %668 = load %struct._typeobject*, %struct._typeobject** %ob_type1031, align 8
  %tp_dealloc1032 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %668, i32 0, i32 4
  %669 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1032, align 8
  %670 = load %struct._object*, %struct._object** %_py_decref_tmp1024, align 8
  call void %669(%struct._object* %670)
  br label %if.end.1033

if.end.1033:                                      ; preds = %if.else.1030, %if.then.1029
  br label %do.end.1034

do.end.1034:                                      ; preds = %if.end.1033
  br label %do.body.1035

do.body.1035:                                     ; preds = %do.end.1034
  %671 = load %struct._object*, %struct._object** %dividend1013, align 8
  store %struct._object* %671, %struct._object** %_py_decref_tmp1037, align 8
  %672 = load %struct._object*, %struct._object** %_py_decref_tmp1037, align 8
  %ob_refcnt1038 = getelementptr inbounds %struct._object, %struct._object* %672, i32 0, i32 0
  %673 = load i64, i64* %ob_refcnt1038, align 8
  %dec1039 = add i64 %673, -1
  store i64 %dec1039, i64* %ob_refcnt1038, align 8
  %cmp1040 = icmp ne i64 %dec1039, 0
  br i1 %cmp1040, label %if.then.1042, label %if.else.1043

if.then.1042:                                     ; preds = %do.body.1035
  br label %if.end.1046

if.else.1043:                                     ; preds = %do.body.1035
  %674 = load %struct._object*, %struct._object** %_py_decref_tmp1037, align 8
  %ob_type1044 = getelementptr inbounds %struct._object, %struct._object* %674, i32 0, i32 1
  %675 = load %struct._typeobject*, %struct._typeobject** %ob_type1044, align 8
  %tp_dealloc1045 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %675, i32 0, i32 4
  %676 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1045, align 8
  %677 = load %struct._object*, %struct._object** %_py_decref_tmp1037, align 8
  call void %676(%struct._object* %677)
  br label %if.end.1046

if.end.1046:                                      ; preds = %if.else.1043, %if.then.1042
  br label %do.end.1047

do.end.1047:                                      ; preds = %if.end.1046
  %678 = load %struct._object*, %struct._object** %res1016, align 8
  %679 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1048 = getelementptr %struct._object*, %struct._object** %679, i64 -1
  store %struct._object* %678, %struct._object** %arrayidx1048, align 8
  %680 = load %struct._object*, %struct._object** %res1016, align 8
  %cmp1049 = icmp eq %struct._object* %680, null
  br i1 %cmp1049, label %if.then.1051, label %if.end.1052

if.then.1051:                                     ; preds = %do.end.1047
  br label %error

if.end.1052:                                      ; preds = %do.end.1047
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1054, align 8
  %681 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1054, align 8
  %_value1059 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %681, i32 0, i32 0
  store i32* %_value1059, i32** %volatile_data1058, align 8
  store i32 0, i32* %order1061, align 4
  %682 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1054, align 8
  %683 = bitcast %struct._Py_atomic_int* %682 to i8*
  %684 = load i32, i32* %order1061, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %683, i32 %684)
  %685 = load i32, i32* %order1061, align 4
  switch i32 %685, label %sw.default.1063 [
    i32 2, label %sw.bb.1062
    i32 3, label %sw.bb.1062
    i32 4, label %sw.bb.1062
  ]

sw.bb.1062:                                       ; preds = %if.end.1052, %if.end.1052, %if.end.1052
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1064

sw.default.1063:                                  ; preds = %if.end.1052
  br label %sw.epilog.1064

sw.epilog.1064:                                   ; preds = %sw.default.1063, %sw.bb.1062
  %686 = load i32*, i32** %volatile_data1058, align 8
  %687 = load volatile i32, i32* %686, align 4
  store i32 %687, i32* %result1056, align 4
  %688 = load i32, i32* %order1061, align 4
  switch i32 %688, label %sw.default.1066 [
    i32 1, label %sw.bb.1065
    i32 3, label %sw.bb.1065
    i32 4, label %sw.bb.1065
  ]

sw.bb.1065:                                       ; preds = %sw.epilog.1064, %sw.epilog.1064, %sw.epilog.1064
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1067

sw.default.1066:                                  ; preds = %sw.epilog.1064
  br label %sw.epilog.1067

sw.epilog.1067:                                   ; preds = %sw.default.1066, %sw.bb.1065
  %689 = load i32, i32* %result1056, align 4
  store i32 %689, i32* %tmp1068
  %690 = load i32, i32* %tmp1068
  %tobool1069 = icmp ne i32 %690, 0
  br i1 %tobool1069, label %if.end.1082, label %if.then.1070

if.then.1070:                                     ; preds = %sw.epilog.1067
  %691 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1071 = icmp ne i32 %691, 0
  br i1 %tobool1071, label %if.end.1081, label %if.then.1072

if.then.1072:                                     ; preds = %if.then.1070
  %692 = load i8*, i8** %next_instr, align 8
  %693 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1073 = ptrtoint i8* %692 to i64
  %sub.ptr.rhs.cast1074 = ptrtoint i8* %693 to i64
  %sub.ptr.sub1075 = sub i64 %sub.ptr.lhs.cast1073, %sub.ptr.rhs.cast1074
  %conv1076 = trunc i64 %sub.ptr.sub1075 to i32
  %694 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1077 = getelementptr inbounds %struct._frame, %struct._frame* %694, i32 0, i32 13
  store i32 %conv1076, i32* %f_lasti1077, align 4
  %695 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1078 = getelementptr i8, i8* %695, i32 1
  store i8* %incdec.ptr1078, i8** %next_instr, align 8
  %696 = load i8, i8* %695, align 1
  %idxprom1079 = zext i8 %696 to i64
  %arrayidx1080 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1079
  %697 = load i8*, i8** %arrayidx1080, align 8
  br label %indirectgoto

if.end.1081:                                      ; preds = %if.then.1070
  br label %fast_next_opcode

if.end.1082:                                      ; preds = %sw.epilog.1067
  br label %for.cond

TARGET_BINARY_ADD:                                ; preds = %indirectgoto
  store i32 23, i32* %opcode, align 4
  br label %sw.bb.1083

sw.bb.1083:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_ADD
  %698 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1086 = getelementptr %struct._object*, %struct._object** %698, i32 -1
  store %struct._object** %incdec.ptr1086, %struct._object*** %stack_pointer, align 8
  %699 = load %struct._object*, %struct._object** %incdec.ptr1086, align 8
  store %struct._object* %699, %struct._object** %right1085, align 8
  %700 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1089 = getelementptr %struct._object*, %struct._object** %700, i64 -1
  %701 = load %struct._object*, %struct._object** %arrayidx1089, align 8
  store %struct._object* %701, %struct._object** %left1088, align 8
  %702 = load %struct._object*, %struct._object** %left1088, align 8
  %ob_type1091 = getelementptr inbounds %struct._object, %struct._object* %702, i32 0, i32 1
  %703 = load %struct._typeobject*, %struct._typeobject** %ob_type1091, align 8
  %cmp1092 = icmp eq %struct._typeobject* %703, @PyUnicode_Type
  br i1 %cmp1092, label %land.lhs.true.1094, label %if.else.1100

land.lhs.true.1094:                               ; preds = %sw.bb.1083
  %704 = load %struct._object*, %struct._object** %right1085, align 8
  %ob_type1095 = getelementptr inbounds %struct._object, %struct._object* %704, i32 0, i32 1
  %705 = load %struct._typeobject*, %struct._typeobject** %ob_type1095, align 8
  %cmp1096 = icmp eq %struct._typeobject* %705, @PyUnicode_Type
  br i1 %cmp1096, label %if.then.1098, label %if.else.1100

if.then.1098:                                     ; preds = %land.lhs.true.1094
  %706 = load %struct._object*, %struct._object** %left1088, align 8
  %707 = load %struct._object*, %struct._object** %right1085, align 8
  %708 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %709 = load i8*, i8** %next_instr, align 8
  %call1099 = call %struct._object* @unicode_concatenate(%struct._object* %706, %struct._object* %707, %struct._frame* %708, i8* %709)
  store %struct._object* %call1099, %struct._object** %sum, align 8
  br label %if.end.1115

if.else.1100:                                     ; preds = %land.lhs.true.1094, %sw.bb.1083
  %710 = load %struct._object*, %struct._object** %left1088, align 8
  %711 = load %struct._object*, %struct._object** %right1085, align 8
  %call1101 = call %struct._object* @PyNumber_Add(%struct._object* %710, %struct._object* %711)
  store %struct._object* %call1101, %struct._object** %sum, align 8
  br label %do.body.1102

do.body.1102:                                     ; preds = %if.else.1100
  %712 = load %struct._object*, %struct._object** %left1088, align 8
  store %struct._object* %712, %struct._object** %_py_decref_tmp1104, align 8
  %713 = load %struct._object*, %struct._object** %_py_decref_tmp1104, align 8
  %ob_refcnt1105 = getelementptr inbounds %struct._object, %struct._object* %713, i32 0, i32 0
  %714 = load i64, i64* %ob_refcnt1105, align 8
  %dec1106 = add i64 %714, -1
  store i64 %dec1106, i64* %ob_refcnt1105, align 8
  %cmp1107 = icmp ne i64 %dec1106, 0
  br i1 %cmp1107, label %if.then.1109, label %if.else.1110

if.then.1109:                                     ; preds = %do.body.1102
  br label %if.end.1113

if.else.1110:                                     ; preds = %do.body.1102
  %715 = load %struct._object*, %struct._object** %_py_decref_tmp1104, align 8
  %ob_type1111 = getelementptr inbounds %struct._object, %struct._object* %715, i32 0, i32 1
  %716 = load %struct._typeobject*, %struct._typeobject** %ob_type1111, align 8
  %tp_dealloc1112 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %716, i32 0, i32 4
  %717 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1112, align 8
  %718 = load %struct._object*, %struct._object** %_py_decref_tmp1104, align 8
  call void %717(%struct._object* %718)
  br label %if.end.1113

if.end.1113:                                      ; preds = %if.else.1110, %if.then.1109
  br label %do.end.1114

do.end.1114:                                      ; preds = %if.end.1113
  br label %if.end.1115

if.end.1115:                                      ; preds = %do.end.1114, %if.then.1098
  br label %do.body.1116

do.body.1116:                                     ; preds = %if.end.1115
  %719 = load %struct._object*, %struct._object** %right1085, align 8
  store %struct._object* %719, %struct._object** %_py_decref_tmp1118, align 8
  %720 = load %struct._object*, %struct._object** %_py_decref_tmp1118, align 8
  %ob_refcnt1119 = getelementptr inbounds %struct._object, %struct._object* %720, i32 0, i32 0
  %721 = load i64, i64* %ob_refcnt1119, align 8
  %dec1120 = add i64 %721, -1
  store i64 %dec1120, i64* %ob_refcnt1119, align 8
  %cmp1121 = icmp ne i64 %dec1120, 0
  br i1 %cmp1121, label %if.then.1123, label %if.else.1124

if.then.1123:                                     ; preds = %do.body.1116
  br label %if.end.1127

if.else.1124:                                     ; preds = %do.body.1116
  %722 = load %struct._object*, %struct._object** %_py_decref_tmp1118, align 8
  %ob_type1125 = getelementptr inbounds %struct._object, %struct._object* %722, i32 0, i32 1
  %723 = load %struct._typeobject*, %struct._typeobject** %ob_type1125, align 8
  %tp_dealloc1126 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %723, i32 0, i32 4
  %724 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1126, align 8
  %725 = load %struct._object*, %struct._object** %_py_decref_tmp1118, align 8
  call void %724(%struct._object* %725)
  br label %if.end.1127

if.end.1127:                                      ; preds = %if.else.1124, %if.then.1123
  br label %do.end.1128

do.end.1128:                                      ; preds = %if.end.1127
  %726 = load %struct._object*, %struct._object** %sum, align 8
  %727 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1129 = getelementptr %struct._object*, %struct._object** %727, i64 -1
  store %struct._object* %726, %struct._object** %arrayidx1129, align 8
  %728 = load %struct._object*, %struct._object** %sum, align 8
  %cmp1130 = icmp eq %struct._object* %728, null
  br i1 %cmp1130, label %if.then.1132, label %if.end.1133

if.then.1132:                                     ; preds = %do.end.1128
  br label %error

if.end.1133:                                      ; preds = %do.end.1128
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1135, align 8
  %729 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1135, align 8
  %_value1140 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %729, i32 0, i32 0
  store i32* %_value1140, i32** %volatile_data1139, align 8
  store i32 0, i32* %order1142, align 4
  %730 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1135, align 8
  %731 = bitcast %struct._Py_atomic_int* %730 to i8*
  %732 = load i32, i32* %order1142, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %731, i32 %732)
  %733 = load i32, i32* %order1142, align 4
  switch i32 %733, label %sw.default.1144 [
    i32 2, label %sw.bb.1143
    i32 3, label %sw.bb.1143
    i32 4, label %sw.bb.1143
  ]

sw.bb.1143:                                       ; preds = %if.end.1133, %if.end.1133, %if.end.1133
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1145

sw.default.1144:                                  ; preds = %if.end.1133
  br label %sw.epilog.1145

sw.epilog.1145:                                   ; preds = %sw.default.1144, %sw.bb.1143
  %734 = load i32*, i32** %volatile_data1139, align 8
  %735 = load volatile i32, i32* %734, align 4
  store i32 %735, i32* %result1137, align 4
  %736 = load i32, i32* %order1142, align 4
  switch i32 %736, label %sw.default.1147 [
    i32 1, label %sw.bb.1146
    i32 3, label %sw.bb.1146
    i32 4, label %sw.bb.1146
  ]

sw.bb.1146:                                       ; preds = %sw.epilog.1145, %sw.epilog.1145, %sw.epilog.1145
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1148

sw.default.1147:                                  ; preds = %sw.epilog.1145
  br label %sw.epilog.1148

sw.epilog.1148:                                   ; preds = %sw.default.1147, %sw.bb.1146
  %737 = load i32, i32* %result1137, align 4
  store i32 %737, i32* %tmp1149
  %738 = load i32, i32* %tmp1149
  %tobool1150 = icmp ne i32 %738, 0
  br i1 %tobool1150, label %if.end.1163, label %if.then.1151

if.then.1151:                                     ; preds = %sw.epilog.1148
  %739 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1152 = icmp ne i32 %739, 0
  br i1 %tobool1152, label %if.end.1162, label %if.then.1153

if.then.1153:                                     ; preds = %if.then.1151
  %740 = load i8*, i8** %next_instr, align 8
  %741 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1154 = ptrtoint i8* %740 to i64
  %sub.ptr.rhs.cast1155 = ptrtoint i8* %741 to i64
  %sub.ptr.sub1156 = sub i64 %sub.ptr.lhs.cast1154, %sub.ptr.rhs.cast1155
  %conv1157 = trunc i64 %sub.ptr.sub1156 to i32
  %742 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1158 = getelementptr inbounds %struct._frame, %struct._frame* %742, i32 0, i32 13
  store i32 %conv1157, i32* %f_lasti1158, align 4
  %743 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1159 = getelementptr i8, i8* %743, i32 1
  store i8* %incdec.ptr1159, i8** %next_instr, align 8
  %744 = load i8, i8* %743, align 1
  %idxprom1160 = zext i8 %744 to i64
  %arrayidx1161 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1160
  %745 = load i8*, i8** %arrayidx1161, align 8
  br label %indirectgoto

if.end.1162:                                      ; preds = %if.then.1151
  br label %fast_next_opcode

if.end.1163:                                      ; preds = %sw.epilog.1148
  br label %for.cond

TARGET_BINARY_SUBTRACT:                           ; preds = %indirectgoto
  store i32 24, i32* %opcode, align 4
  br label %sw.bb.1164

sw.bb.1164:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_SUBTRACT
  %746 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1167 = getelementptr %struct._object*, %struct._object** %746, i32 -1
  store %struct._object** %incdec.ptr1167, %struct._object*** %stack_pointer, align 8
  %747 = load %struct._object*, %struct._object** %incdec.ptr1167, align 8
  store %struct._object* %747, %struct._object** %right1166, align 8
  %748 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1170 = getelementptr %struct._object*, %struct._object** %748, i64 -1
  %749 = load %struct._object*, %struct._object** %arrayidx1170, align 8
  store %struct._object* %749, %struct._object** %left1169, align 8
  %750 = load %struct._object*, %struct._object** %left1169, align 8
  %751 = load %struct._object*, %struct._object** %right1166, align 8
  %call1172 = call %struct._object* @PyNumber_Subtract(%struct._object* %750, %struct._object* %751)
  store %struct._object* %call1172, %struct._object** %diff, align 8
  br label %do.body.1173

do.body.1173:                                     ; preds = %sw.bb.1164
  %752 = load %struct._object*, %struct._object** %right1166, align 8
  store %struct._object* %752, %struct._object** %_py_decref_tmp1175, align 8
  %753 = load %struct._object*, %struct._object** %_py_decref_tmp1175, align 8
  %ob_refcnt1176 = getelementptr inbounds %struct._object, %struct._object* %753, i32 0, i32 0
  %754 = load i64, i64* %ob_refcnt1176, align 8
  %dec1177 = add i64 %754, -1
  store i64 %dec1177, i64* %ob_refcnt1176, align 8
  %cmp1178 = icmp ne i64 %dec1177, 0
  br i1 %cmp1178, label %if.then.1180, label %if.else.1181

if.then.1180:                                     ; preds = %do.body.1173
  br label %if.end.1184

if.else.1181:                                     ; preds = %do.body.1173
  %755 = load %struct._object*, %struct._object** %_py_decref_tmp1175, align 8
  %ob_type1182 = getelementptr inbounds %struct._object, %struct._object* %755, i32 0, i32 1
  %756 = load %struct._typeobject*, %struct._typeobject** %ob_type1182, align 8
  %tp_dealloc1183 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %756, i32 0, i32 4
  %757 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1183, align 8
  %758 = load %struct._object*, %struct._object** %_py_decref_tmp1175, align 8
  call void %757(%struct._object* %758)
  br label %if.end.1184

if.end.1184:                                      ; preds = %if.else.1181, %if.then.1180
  br label %do.end.1185

do.end.1185:                                      ; preds = %if.end.1184
  br label %do.body.1186

do.body.1186:                                     ; preds = %do.end.1185
  %759 = load %struct._object*, %struct._object** %left1169, align 8
  store %struct._object* %759, %struct._object** %_py_decref_tmp1188, align 8
  %760 = load %struct._object*, %struct._object** %_py_decref_tmp1188, align 8
  %ob_refcnt1189 = getelementptr inbounds %struct._object, %struct._object* %760, i32 0, i32 0
  %761 = load i64, i64* %ob_refcnt1189, align 8
  %dec1190 = add i64 %761, -1
  store i64 %dec1190, i64* %ob_refcnt1189, align 8
  %cmp1191 = icmp ne i64 %dec1190, 0
  br i1 %cmp1191, label %if.then.1193, label %if.else.1194

if.then.1193:                                     ; preds = %do.body.1186
  br label %if.end.1197

if.else.1194:                                     ; preds = %do.body.1186
  %762 = load %struct._object*, %struct._object** %_py_decref_tmp1188, align 8
  %ob_type1195 = getelementptr inbounds %struct._object, %struct._object* %762, i32 0, i32 1
  %763 = load %struct._typeobject*, %struct._typeobject** %ob_type1195, align 8
  %tp_dealloc1196 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %763, i32 0, i32 4
  %764 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1196, align 8
  %765 = load %struct._object*, %struct._object** %_py_decref_tmp1188, align 8
  call void %764(%struct._object* %765)
  br label %if.end.1197

if.end.1197:                                      ; preds = %if.else.1194, %if.then.1193
  br label %do.end.1198

do.end.1198:                                      ; preds = %if.end.1197
  %766 = load %struct._object*, %struct._object** %diff, align 8
  %767 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1199 = getelementptr %struct._object*, %struct._object** %767, i64 -1
  store %struct._object* %766, %struct._object** %arrayidx1199, align 8
  %768 = load %struct._object*, %struct._object** %diff, align 8
  %cmp1200 = icmp eq %struct._object* %768, null
  br i1 %cmp1200, label %if.then.1202, label %if.end.1203

if.then.1202:                                     ; preds = %do.end.1198
  br label %error

if.end.1203:                                      ; preds = %do.end.1198
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1205, align 8
  %769 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1205, align 8
  %_value1210 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %769, i32 0, i32 0
  store i32* %_value1210, i32** %volatile_data1209, align 8
  store i32 0, i32* %order1212, align 4
  %770 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1205, align 8
  %771 = bitcast %struct._Py_atomic_int* %770 to i8*
  %772 = load i32, i32* %order1212, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %771, i32 %772)
  %773 = load i32, i32* %order1212, align 4
  switch i32 %773, label %sw.default.1214 [
    i32 2, label %sw.bb.1213
    i32 3, label %sw.bb.1213
    i32 4, label %sw.bb.1213
  ]

sw.bb.1213:                                       ; preds = %if.end.1203, %if.end.1203, %if.end.1203
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1215

sw.default.1214:                                  ; preds = %if.end.1203
  br label %sw.epilog.1215

sw.epilog.1215:                                   ; preds = %sw.default.1214, %sw.bb.1213
  %774 = load i32*, i32** %volatile_data1209, align 8
  %775 = load volatile i32, i32* %774, align 4
  store i32 %775, i32* %result1207, align 4
  %776 = load i32, i32* %order1212, align 4
  switch i32 %776, label %sw.default.1217 [
    i32 1, label %sw.bb.1216
    i32 3, label %sw.bb.1216
    i32 4, label %sw.bb.1216
  ]

sw.bb.1216:                                       ; preds = %sw.epilog.1215, %sw.epilog.1215, %sw.epilog.1215
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1218

sw.default.1217:                                  ; preds = %sw.epilog.1215
  br label %sw.epilog.1218

sw.epilog.1218:                                   ; preds = %sw.default.1217, %sw.bb.1216
  %777 = load i32, i32* %result1207, align 4
  store i32 %777, i32* %tmp1219
  %778 = load i32, i32* %tmp1219
  %tobool1220 = icmp ne i32 %778, 0
  br i1 %tobool1220, label %if.end.1233, label %if.then.1221

if.then.1221:                                     ; preds = %sw.epilog.1218
  %779 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1222 = icmp ne i32 %779, 0
  br i1 %tobool1222, label %if.end.1232, label %if.then.1223

if.then.1223:                                     ; preds = %if.then.1221
  %780 = load i8*, i8** %next_instr, align 8
  %781 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1224 = ptrtoint i8* %780 to i64
  %sub.ptr.rhs.cast1225 = ptrtoint i8* %781 to i64
  %sub.ptr.sub1226 = sub i64 %sub.ptr.lhs.cast1224, %sub.ptr.rhs.cast1225
  %conv1227 = trunc i64 %sub.ptr.sub1226 to i32
  %782 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1228 = getelementptr inbounds %struct._frame, %struct._frame* %782, i32 0, i32 13
  store i32 %conv1227, i32* %f_lasti1228, align 4
  %783 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1229 = getelementptr i8, i8* %783, i32 1
  store i8* %incdec.ptr1229, i8** %next_instr, align 8
  %784 = load i8, i8* %783, align 1
  %idxprom1230 = zext i8 %784 to i64
  %arrayidx1231 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1230
  %785 = load i8*, i8** %arrayidx1231, align 8
  br label %indirectgoto

if.end.1232:                                      ; preds = %if.then.1221
  br label %fast_next_opcode

if.end.1233:                                      ; preds = %sw.epilog.1218
  br label %for.cond

TARGET_BINARY_SUBSCR:                             ; preds = %indirectgoto
  store i32 25, i32* %opcode, align 4
  br label %sw.bb.1234

sw.bb.1234:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_SUBSCR
  %786 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1236 = getelementptr %struct._object*, %struct._object** %786, i32 -1
  store %struct._object** %incdec.ptr1236, %struct._object*** %stack_pointer, align 8
  %787 = load %struct._object*, %struct._object** %incdec.ptr1236, align 8
  store %struct._object* %787, %struct._object** %sub, align 8
  %788 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1238 = getelementptr %struct._object*, %struct._object** %788, i64 -1
  %789 = load %struct._object*, %struct._object** %arrayidx1238, align 8
  store %struct._object* %789, %struct._object** %container, align 8
  %790 = load %struct._object*, %struct._object** %container, align 8
  %791 = load %struct._object*, %struct._object** %sub, align 8
  %call1241 = call %struct._object* @PyObject_GetItem(%struct._object* %790, %struct._object* %791)
  store %struct._object* %call1241, %struct._object** %res1240, align 8
  br label %do.body.1242

do.body.1242:                                     ; preds = %sw.bb.1234
  %792 = load %struct._object*, %struct._object** %container, align 8
  store %struct._object* %792, %struct._object** %_py_decref_tmp1244, align 8
  %793 = load %struct._object*, %struct._object** %_py_decref_tmp1244, align 8
  %ob_refcnt1245 = getelementptr inbounds %struct._object, %struct._object* %793, i32 0, i32 0
  %794 = load i64, i64* %ob_refcnt1245, align 8
  %dec1246 = add i64 %794, -1
  store i64 %dec1246, i64* %ob_refcnt1245, align 8
  %cmp1247 = icmp ne i64 %dec1246, 0
  br i1 %cmp1247, label %if.then.1249, label %if.else.1250

if.then.1249:                                     ; preds = %do.body.1242
  br label %if.end.1253

if.else.1250:                                     ; preds = %do.body.1242
  %795 = load %struct._object*, %struct._object** %_py_decref_tmp1244, align 8
  %ob_type1251 = getelementptr inbounds %struct._object, %struct._object* %795, i32 0, i32 1
  %796 = load %struct._typeobject*, %struct._typeobject** %ob_type1251, align 8
  %tp_dealloc1252 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %796, i32 0, i32 4
  %797 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1252, align 8
  %798 = load %struct._object*, %struct._object** %_py_decref_tmp1244, align 8
  call void %797(%struct._object* %798)
  br label %if.end.1253

if.end.1253:                                      ; preds = %if.else.1250, %if.then.1249
  br label %do.end.1254

do.end.1254:                                      ; preds = %if.end.1253
  br label %do.body.1255

do.body.1255:                                     ; preds = %do.end.1254
  %799 = load %struct._object*, %struct._object** %sub, align 8
  store %struct._object* %799, %struct._object** %_py_decref_tmp1257, align 8
  %800 = load %struct._object*, %struct._object** %_py_decref_tmp1257, align 8
  %ob_refcnt1258 = getelementptr inbounds %struct._object, %struct._object* %800, i32 0, i32 0
  %801 = load i64, i64* %ob_refcnt1258, align 8
  %dec1259 = add i64 %801, -1
  store i64 %dec1259, i64* %ob_refcnt1258, align 8
  %cmp1260 = icmp ne i64 %dec1259, 0
  br i1 %cmp1260, label %if.then.1262, label %if.else.1263

if.then.1262:                                     ; preds = %do.body.1255
  br label %if.end.1266

if.else.1263:                                     ; preds = %do.body.1255
  %802 = load %struct._object*, %struct._object** %_py_decref_tmp1257, align 8
  %ob_type1264 = getelementptr inbounds %struct._object, %struct._object* %802, i32 0, i32 1
  %803 = load %struct._typeobject*, %struct._typeobject** %ob_type1264, align 8
  %tp_dealloc1265 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %803, i32 0, i32 4
  %804 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1265, align 8
  %805 = load %struct._object*, %struct._object** %_py_decref_tmp1257, align 8
  call void %804(%struct._object* %805)
  br label %if.end.1266

if.end.1266:                                      ; preds = %if.else.1263, %if.then.1262
  br label %do.end.1267

do.end.1267:                                      ; preds = %if.end.1266
  %806 = load %struct._object*, %struct._object** %res1240, align 8
  %807 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1268 = getelementptr %struct._object*, %struct._object** %807, i64 -1
  store %struct._object* %806, %struct._object** %arrayidx1268, align 8
  %808 = load %struct._object*, %struct._object** %res1240, align 8
  %cmp1269 = icmp eq %struct._object* %808, null
  br i1 %cmp1269, label %if.then.1271, label %if.end.1272

if.then.1271:                                     ; preds = %do.end.1267
  br label %error

if.end.1272:                                      ; preds = %do.end.1267
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1274, align 8
  %809 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1274, align 8
  %_value1279 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %809, i32 0, i32 0
  store i32* %_value1279, i32** %volatile_data1278, align 8
  store i32 0, i32* %order1281, align 4
  %810 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1274, align 8
  %811 = bitcast %struct._Py_atomic_int* %810 to i8*
  %812 = load i32, i32* %order1281, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %811, i32 %812)
  %813 = load i32, i32* %order1281, align 4
  switch i32 %813, label %sw.default.1283 [
    i32 2, label %sw.bb.1282
    i32 3, label %sw.bb.1282
    i32 4, label %sw.bb.1282
  ]

sw.bb.1282:                                       ; preds = %if.end.1272, %if.end.1272, %if.end.1272
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1284

sw.default.1283:                                  ; preds = %if.end.1272
  br label %sw.epilog.1284

sw.epilog.1284:                                   ; preds = %sw.default.1283, %sw.bb.1282
  %814 = load i32*, i32** %volatile_data1278, align 8
  %815 = load volatile i32, i32* %814, align 4
  store i32 %815, i32* %result1276, align 4
  %816 = load i32, i32* %order1281, align 4
  switch i32 %816, label %sw.default.1286 [
    i32 1, label %sw.bb.1285
    i32 3, label %sw.bb.1285
    i32 4, label %sw.bb.1285
  ]

sw.bb.1285:                                       ; preds = %sw.epilog.1284, %sw.epilog.1284, %sw.epilog.1284
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1287

sw.default.1286:                                  ; preds = %sw.epilog.1284
  br label %sw.epilog.1287

sw.epilog.1287:                                   ; preds = %sw.default.1286, %sw.bb.1285
  %817 = load i32, i32* %result1276, align 4
  store i32 %817, i32* %tmp1288
  %818 = load i32, i32* %tmp1288
  %tobool1289 = icmp ne i32 %818, 0
  br i1 %tobool1289, label %if.end.1302, label %if.then.1290

if.then.1290:                                     ; preds = %sw.epilog.1287
  %819 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1291 = icmp ne i32 %819, 0
  br i1 %tobool1291, label %if.end.1301, label %if.then.1292

if.then.1292:                                     ; preds = %if.then.1290
  %820 = load i8*, i8** %next_instr, align 8
  %821 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1293 = ptrtoint i8* %820 to i64
  %sub.ptr.rhs.cast1294 = ptrtoint i8* %821 to i64
  %sub.ptr.sub1295 = sub i64 %sub.ptr.lhs.cast1293, %sub.ptr.rhs.cast1294
  %conv1296 = trunc i64 %sub.ptr.sub1295 to i32
  %822 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1297 = getelementptr inbounds %struct._frame, %struct._frame* %822, i32 0, i32 13
  store i32 %conv1296, i32* %f_lasti1297, align 4
  %823 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1298 = getelementptr i8, i8* %823, i32 1
  store i8* %incdec.ptr1298, i8** %next_instr, align 8
  %824 = load i8, i8* %823, align 1
  %idxprom1299 = zext i8 %824 to i64
  %arrayidx1300 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1299
  %825 = load i8*, i8** %arrayidx1300, align 8
  br label %indirectgoto

if.end.1301:                                      ; preds = %if.then.1290
  br label %fast_next_opcode

if.end.1302:                                      ; preds = %sw.epilog.1287
  br label %for.cond

TARGET_BINARY_LSHIFT:                             ; preds = %indirectgoto
  store i32 62, i32* %opcode, align 4
  br label %sw.bb.1303

sw.bb.1303:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_LSHIFT
  %826 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1306 = getelementptr %struct._object*, %struct._object** %826, i32 -1
  store %struct._object** %incdec.ptr1306, %struct._object*** %stack_pointer, align 8
  %827 = load %struct._object*, %struct._object** %incdec.ptr1306, align 8
  store %struct._object* %827, %struct._object** %right1305, align 8
  %828 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1309 = getelementptr %struct._object*, %struct._object** %828, i64 -1
  %829 = load %struct._object*, %struct._object** %arrayidx1309, align 8
  store %struct._object* %829, %struct._object** %left1308, align 8
  %830 = load %struct._object*, %struct._object** %left1308, align 8
  %831 = load %struct._object*, %struct._object** %right1305, align 8
  %call1312 = call %struct._object* @PyNumber_Lshift(%struct._object* %830, %struct._object* %831)
  store %struct._object* %call1312, %struct._object** %res1311, align 8
  br label %do.body.1313

do.body.1313:                                     ; preds = %sw.bb.1303
  %832 = load %struct._object*, %struct._object** %left1308, align 8
  store %struct._object* %832, %struct._object** %_py_decref_tmp1315, align 8
  %833 = load %struct._object*, %struct._object** %_py_decref_tmp1315, align 8
  %ob_refcnt1316 = getelementptr inbounds %struct._object, %struct._object* %833, i32 0, i32 0
  %834 = load i64, i64* %ob_refcnt1316, align 8
  %dec1317 = add i64 %834, -1
  store i64 %dec1317, i64* %ob_refcnt1316, align 8
  %cmp1318 = icmp ne i64 %dec1317, 0
  br i1 %cmp1318, label %if.then.1320, label %if.else.1321

if.then.1320:                                     ; preds = %do.body.1313
  br label %if.end.1324

if.else.1321:                                     ; preds = %do.body.1313
  %835 = load %struct._object*, %struct._object** %_py_decref_tmp1315, align 8
  %ob_type1322 = getelementptr inbounds %struct._object, %struct._object* %835, i32 0, i32 1
  %836 = load %struct._typeobject*, %struct._typeobject** %ob_type1322, align 8
  %tp_dealloc1323 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %836, i32 0, i32 4
  %837 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1323, align 8
  %838 = load %struct._object*, %struct._object** %_py_decref_tmp1315, align 8
  call void %837(%struct._object* %838)
  br label %if.end.1324

if.end.1324:                                      ; preds = %if.else.1321, %if.then.1320
  br label %do.end.1325

do.end.1325:                                      ; preds = %if.end.1324
  br label %do.body.1326

do.body.1326:                                     ; preds = %do.end.1325
  %839 = load %struct._object*, %struct._object** %right1305, align 8
  store %struct._object* %839, %struct._object** %_py_decref_tmp1328, align 8
  %840 = load %struct._object*, %struct._object** %_py_decref_tmp1328, align 8
  %ob_refcnt1329 = getelementptr inbounds %struct._object, %struct._object* %840, i32 0, i32 0
  %841 = load i64, i64* %ob_refcnt1329, align 8
  %dec1330 = add i64 %841, -1
  store i64 %dec1330, i64* %ob_refcnt1329, align 8
  %cmp1331 = icmp ne i64 %dec1330, 0
  br i1 %cmp1331, label %if.then.1333, label %if.else.1334

if.then.1333:                                     ; preds = %do.body.1326
  br label %if.end.1337

if.else.1334:                                     ; preds = %do.body.1326
  %842 = load %struct._object*, %struct._object** %_py_decref_tmp1328, align 8
  %ob_type1335 = getelementptr inbounds %struct._object, %struct._object* %842, i32 0, i32 1
  %843 = load %struct._typeobject*, %struct._typeobject** %ob_type1335, align 8
  %tp_dealloc1336 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %843, i32 0, i32 4
  %844 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1336, align 8
  %845 = load %struct._object*, %struct._object** %_py_decref_tmp1328, align 8
  call void %844(%struct._object* %845)
  br label %if.end.1337

if.end.1337:                                      ; preds = %if.else.1334, %if.then.1333
  br label %do.end.1338

do.end.1338:                                      ; preds = %if.end.1337
  %846 = load %struct._object*, %struct._object** %res1311, align 8
  %847 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1339 = getelementptr %struct._object*, %struct._object** %847, i64 -1
  store %struct._object* %846, %struct._object** %arrayidx1339, align 8
  %848 = load %struct._object*, %struct._object** %res1311, align 8
  %cmp1340 = icmp eq %struct._object* %848, null
  br i1 %cmp1340, label %if.then.1342, label %if.end.1343

if.then.1342:                                     ; preds = %do.end.1338
  br label %error

if.end.1343:                                      ; preds = %do.end.1338
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1345, align 8
  %849 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1345, align 8
  %_value1350 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %849, i32 0, i32 0
  store i32* %_value1350, i32** %volatile_data1349, align 8
  store i32 0, i32* %order1352, align 4
  %850 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1345, align 8
  %851 = bitcast %struct._Py_atomic_int* %850 to i8*
  %852 = load i32, i32* %order1352, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %851, i32 %852)
  %853 = load i32, i32* %order1352, align 4
  switch i32 %853, label %sw.default.1354 [
    i32 2, label %sw.bb.1353
    i32 3, label %sw.bb.1353
    i32 4, label %sw.bb.1353
  ]

sw.bb.1353:                                       ; preds = %if.end.1343, %if.end.1343, %if.end.1343
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1355

sw.default.1354:                                  ; preds = %if.end.1343
  br label %sw.epilog.1355

sw.epilog.1355:                                   ; preds = %sw.default.1354, %sw.bb.1353
  %854 = load i32*, i32** %volatile_data1349, align 8
  %855 = load volatile i32, i32* %854, align 4
  store i32 %855, i32* %result1347, align 4
  %856 = load i32, i32* %order1352, align 4
  switch i32 %856, label %sw.default.1357 [
    i32 1, label %sw.bb.1356
    i32 3, label %sw.bb.1356
    i32 4, label %sw.bb.1356
  ]

sw.bb.1356:                                       ; preds = %sw.epilog.1355, %sw.epilog.1355, %sw.epilog.1355
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1358

sw.default.1357:                                  ; preds = %sw.epilog.1355
  br label %sw.epilog.1358

sw.epilog.1358:                                   ; preds = %sw.default.1357, %sw.bb.1356
  %857 = load i32, i32* %result1347, align 4
  store i32 %857, i32* %tmp1359
  %858 = load i32, i32* %tmp1359
  %tobool1360 = icmp ne i32 %858, 0
  br i1 %tobool1360, label %if.end.1373, label %if.then.1361

if.then.1361:                                     ; preds = %sw.epilog.1358
  %859 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1362 = icmp ne i32 %859, 0
  br i1 %tobool1362, label %if.end.1372, label %if.then.1363

if.then.1363:                                     ; preds = %if.then.1361
  %860 = load i8*, i8** %next_instr, align 8
  %861 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1364 = ptrtoint i8* %860 to i64
  %sub.ptr.rhs.cast1365 = ptrtoint i8* %861 to i64
  %sub.ptr.sub1366 = sub i64 %sub.ptr.lhs.cast1364, %sub.ptr.rhs.cast1365
  %conv1367 = trunc i64 %sub.ptr.sub1366 to i32
  %862 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1368 = getelementptr inbounds %struct._frame, %struct._frame* %862, i32 0, i32 13
  store i32 %conv1367, i32* %f_lasti1368, align 4
  %863 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1369 = getelementptr i8, i8* %863, i32 1
  store i8* %incdec.ptr1369, i8** %next_instr, align 8
  %864 = load i8, i8* %863, align 1
  %idxprom1370 = zext i8 %864 to i64
  %arrayidx1371 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1370
  %865 = load i8*, i8** %arrayidx1371, align 8
  br label %indirectgoto

if.end.1372:                                      ; preds = %if.then.1361
  br label %fast_next_opcode

if.end.1373:                                      ; preds = %sw.epilog.1358
  br label %for.cond

TARGET_BINARY_RSHIFT:                             ; preds = %indirectgoto
  store i32 63, i32* %opcode, align 4
  br label %sw.bb.1374

sw.bb.1374:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_RSHIFT
  %866 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1377 = getelementptr %struct._object*, %struct._object** %866, i32 -1
  store %struct._object** %incdec.ptr1377, %struct._object*** %stack_pointer, align 8
  %867 = load %struct._object*, %struct._object** %incdec.ptr1377, align 8
  store %struct._object* %867, %struct._object** %right1376, align 8
  %868 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1380 = getelementptr %struct._object*, %struct._object** %868, i64 -1
  %869 = load %struct._object*, %struct._object** %arrayidx1380, align 8
  store %struct._object* %869, %struct._object** %left1379, align 8
  %870 = load %struct._object*, %struct._object** %left1379, align 8
  %871 = load %struct._object*, %struct._object** %right1376, align 8
  %call1383 = call %struct._object* @PyNumber_Rshift(%struct._object* %870, %struct._object* %871)
  store %struct._object* %call1383, %struct._object** %res1382, align 8
  br label %do.body.1384

do.body.1384:                                     ; preds = %sw.bb.1374
  %872 = load %struct._object*, %struct._object** %left1379, align 8
  store %struct._object* %872, %struct._object** %_py_decref_tmp1386, align 8
  %873 = load %struct._object*, %struct._object** %_py_decref_tmp1386, align 8
  %ob_refcnt1387 = getelementptr inbounds %struct._object, %struct._object* %873, i32 0, i32 0
  %874 = load i64, i64* %ob_refcnt1387, align 8
  %dec1388 = add i64 %874, -1
  store i64 %dec1388, i64* %ob_refcnt1387, align 8
  %cmp1389 = icmp ne i64 %dec1388, 0
  br i1 %cmp1389, label %if.then.1391, label %if.else.1392

if.then.1391:                                     ; preds = %do.body.1384
  br label %if.end.1395

if.else.1392:                                     ; preds = %do.body.1384
  %875 = load %struct._object*, %struct._object** %_py_decref_tmp1386, align 8
  %ob_type1393 = getelementptr inbounds %struct._object, %struct._object* %875, i32 0, i32 1
  %876 = load %struct._typeobject*, %struct._typeobject** %ob_type1393, align 8
  %tp_dealloc1394 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %876, i32 0, i32 4
  %877 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1394, align 8
  %878 = load %struct._object*, %struct._object** %_py_decref_tmp1386, align 8
  call void %877(%struct._object* %878)
  br label %if.end.1395

if.end.1395:                                      ; preds = %if.else.1392, %if.then.1391
  br label %do.end.1396

do.end.1396:                                      ; preds = %if.end.1395
  br label %do.body.1397

do.body.1397:                                     ; preds = %do.end.1396
  %879 = load %struct._object*, %struct._object** %right1376, align 8
  store %struct._object* %879, %struct._object** %_py_decref_tmp1399, align 8
  %880 = load %struct._object*, %struct._object** %_py_decref_tmp1399, align 8
  %ob_refcnt1400 = getelementptr inbounds %struct._object, %struct._object* %880, i32 0, i32 0
  %881 = load i64, i64* %ob_refcnt1400, align 8
  %dec1401 = add i64 %881, -1
  store i64 %dec1401, i64* %ob_refcnt1400, align 8
  %cmp1402 = icmp ne i64 %dec1401, 0
  br i1 %cmp1402, label %if.then.1404, label %if.else.1405

if.then.1404:                                     ; preds = %do.body.1397
  br label %if.end.1408

if.else.1405:                                     ; preds = %do.body.1397
  %882 = load %struct._object*, %struct._object** %_py_decref_tmp1399, align 8
  %ob_type1406 = getelementptr inbounds %struct._object, %struct._object* %882, i32 0, i32 1
  %883 = load %struct._typeobject*, %struct._typeobject** %ob_type1406, align 8
  %tp_dealloc1407 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %883, i32 0, i32 4
  %884 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1407, align 8
  %885 = load %struct._object*, %struct._object** %_py_decref_tmp1399, align 8
  call void %884(%struct._object* %885)
  br label %if.end.1408

if.end.1408:                                      ; preds = %if.else.1405, %if.then.1404
  br label %do.end.1409

do.end.1409:                                      ; preds = %if.end.1408
  %886 = load %struct._object*, %struct._object** %res1382, align 8
  %887 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1410 = getelementptr %struct._object*, %struct._object** %887, i64 -1
  store %struct._object* %886, %struct._object** %arrayidx1410, align 8
  %888 = load %struct._object*, %struct._object** %res1382, align 8
  %cmp1411 = icmp eq %struct._object* %888, null
  br i1 %cmp1411, label %if.then.1413, label %if.end.1414

if.then.1413:                                     ; preds = %do.end.1409
  br label %error

if.end.1414:                                      ; preds = %do.end.1409
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1416, align 8
  %889 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1416, align 8
  %_value1421 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %889, i32 0, i32 0
  store i32* %_value1421, i32** %volatile_data1420, align 8
  store i32 0, i32* %order1423, align 4
  %890 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1416, align 8
  %891 = bitcast %struct._Py_atomic_int* %890 to i8*
  %892 = load i32, i32* %order1423, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %891, i32 %892)
  %893 = load i32, i32* %order1423, align 4
  switch i32 %893, label %sw.default.1425 [
    i32 2, label %sw.bb.1424
    i32 3, label %sw.bb.1424
    i32 4, label %sw.bb.1424
  ]

sw.bb.1424:                                       ; preds = %if.end.1414, %if.end.1414, %if.end.1414
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1426

sw.default.1425:                                  ; preds = %if.end.1414
  br label %sw.epilog.1426

sw.epilog.1426:                                   ; preds = %sw.default.1425, %sw.bb.1424
  %894 = load i32*, i32** %volatile_data1420, align 8
  %895 = load volatile i32, i32* %894, align 4
  store i32 %895, i32* %result1418, align 4
  %896 = load i32, i32* %order1423, align 4
  switch i32 %896, label %sw.default.1428 [
    i32 1, label %sw.bb.1427
    i32 3, label %sw.bb.1427
    i32 4, label %sw.bb.1427
  ]

sw.bb.1427:                                       ; preds = %sw.epilog.1426, %sw.epilog.1426, %sw.epilog.1426
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1429

sw.default.1428:                                  ; preds = %sw.epilog.1426
  br label %sw.epilog.1429

sw.epilog.1429:                                   ; preds = %sw.default.1428, %sw.bb.1427
  %897 = load i32, i32* %result1418, align 4
  store i32 %897, i32* %tmp1430
  %898 = load i32, i32* %tmp1430
  %tobool1431 = icmp ne i32 %898, 0
  br i1 %tobool1431, label %if.end.1444, label %if.then.1432

if.then.1432:                                     ; preds = %sw.epilog.1429
  %899 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1433 = icmp ne i32 %899, 0
  br i1 %tobool1433, label %if.end.1443, label %if.then.1434

if.then.1434:                                     ; preds = %if.then.1432
  %900 = load i8*, i8** %next_instr, align 8
  %901 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1435 = ptrtoint i8* %900 to i64
  %sub.ptr.rhs.cast1436 = ptrtoint i8* %901 to i64
  %sub.ptr.sub1437 = sub i64 %sub.ptr.lhs.cast1435, %sub.ptr.rhs.cast1436
  %conv1438 = trunc i64 %sub.ptr.sub1437 to i32
  %902 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1439 = getelementptr inbounds %struct._frame, %struct._frame* %902, i32 0, i32 13
  store i32 %conv1438, i32* %f_lasti1439, align 4
  %903 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1440 = getelementptr i8, i8* %903, i32 1
  store i8* %incdec.ptr1440, i8** %next_instr, align 8
  %904 = load i8, i8* %903, align 1
  %idxprom1441 = zext i8 %904 to i64
  %arrayidx1442 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1441
  %905 = load i8*, i8** %arrayidx1442, align 8
  br label %indirectgoto

if.end.1443:                                      ; preds = %if.then.1432
  br label %fast_next_opcode

if.end.1444:                                      ; preds = %sw.epilog.1429
  br label %for.cond

TARGET_BINARY_AND:                                ; preds = %indirectgoto
  store i32 64, i32* %opcode, align 4
  br label %sw.bb.1445

sw.bb.1445:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_AND
  %906 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1448 = getelementptr %struct._object*, %struct._object** %906, i32 -1
  store %struct._object** %incdec.ptr1448, %struct._object*** %stack_pointer, align 8
  %907 = load %struct._object*, %struct._object** %incdec.ptr1448, align 8
  store %struct._object* %907, %struct._object** %right1447, align 8
  %908 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1451 = getelementptr %struct._object*, %struct._object** %908, i64 -1
  %909 = load %struct._object*, %struct._object** %arrayidx1451, align 8
  store %struct._object* %909, %struct._object** %left1450, align 8
  %910 = load %struct._object*, %struct._object** %left1450, align 8
  %911 = load %struct._object*, %struct._object** %right1447, align 8
  %call1454 = call %struct._object* @PyNumber_And(%struct._object* %910, %struct._object* %911)
  store %struct._object* %call1454, %struct._object** %res1453, align 8
  br label %do.body.1455

do.body.1455:                                     ; preds = %sw.bb.1445
  %912 = load %struct._object*, %struct._object** %left1450, align 8
  store %struct._object* %912, %struct._object** %_py_decref_tmp1457, align 8
  %913 = load %struct._object*, %struct._object** %_py_decref_tmp1457, align 8
  %ob_refcnt1458 = getelementptr inbounds %struct._object, %struct._object* %913, i32 0, i32 0
  %914 = load i64, i64* %ob_refcnt1458, align 8
  %dec1459 = add i64 %914, -1
  store i64 %dec1459, i64* %ob_refcnt1458, align 8
  %cmp1460 = icmp ne i64 %dec1459, 0
  br i1 %cmp1460, label %if.then.1462, label %if.else.1463

if.then.1462:                                     ; preds = %do.body.1455
  br label %if.end.1466

if.else.1463:                                     ; preds = %do.body.1455
  %915 = load %struct._object*, %struct._object** %_py_decref_tmp1457, align 8
  %ob_type1464 = getelementptr inbounds %struct._object, %struct._object* %915, i32 0, i32 1
  %916 = load %struct._typeobject*, %struct._typeobject** %ob_type1464, align 8
  %tp_dealloc1465 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %916, i32 0, i32 4
  %917 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1465, align 8
  %918 = load %struct._object*, %struct._object** %_py_decref_tmp1457, align 8
  call void %917(%struct._object* %918)
  br label %if.end.1466

if.end.1466:                                      ; preds = %if.else.1463, %if.then.1462
  br label %do.end.1467

do.end.1467:                                      ; preds = %if.end.1466
  br label %do.body.1468

do.body.1468:                                     ; preds = %do.end.1467
  %919 = load %struct._object*, %struct._object** %right1447, align 8
  store %struct._object* %919, %struct._object** %_py_decref_tmp1470, align 8
  %920 = load %struct._object*, %struct._object** %_py_decref_tmp1470, align 8
  %ob_refcnt1471 = getelementptr inbounds %struct._object, %struct._object* %920, i32 0, i32 0
  %921 = load i64, i64* %ob_refcnt1471, align 8
  %dec1472 = add i64 %921, -1
  store i64 %dec1472, i64* %ob_refcnt1471, align 8
  %cmp1473 = icmp ne i64 %dec1472, 0
  br i1 %cmp1473, label %if.then.1475, label %if.else.1476

if.then.1475:                                     ; preds = %do.body.1468
  br label %if.end.1479

if.else.1476:                                     ; preds = %do.body.1468
  %922 = load %struct._object*, %struct._object** %_py_decref_tmp1470, align 8
  %ob_type1477 = getelementptr inbounds %struct._object, %struct._object* %922, i32 0, i32 1
  %923 = load %struct._typeobject*, %struct._typeobject** %ob_type1477, align 8
  %tp_dealloc1478 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %923, i32 0, i32 4
  %924 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1478, align 8
  %925 = load %struct._object*, %struct._object** %_py_decref_tmp1470, align 8
  call void %924(%struct._object* %925)
  br label %if.end.1479

if.end.1479:                                      ; preds = %if.else.1476, %if.then.1475
  br label %do.end.1480

do.end.1480:                                      ; preds = %if.end.1479
  %926 = load %struct._object*, %struct._object** %res1453, align 8
  %927 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1481 = getelementptr %struct._object*, %struct._object** %927, i64 -1
  store %struct._object* %926, %struct._object** %arrayidx1481, align 8
  %928 = load %struct._object*, %struct._object** %res1453, align 8
  %cmp1482 = icmp eq %struct._object* %928, null
  br i1 %cmp1482, label %if.then.1484, label %if.end.1485

if.then.1484:                                     ; preds = %do.end.1480
  br label %error

if.end.1485:                                      ; preds = %do.end.1480
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1487, align 8
  %929 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1487, align 8
  %_value1492 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %929, i32 0, i32 0
  store i32* %_value1492, i32** %volatile_data1491, align 8
  store i32 0, i32* %order1494, align 4
  %930 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1487, align 8
  %931 = bitcast %struct._Py_atomic_int* %930 to i8*
  %932 = load i32, i32* %order1494, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %931, i32 %932)
  %933 = load i32, i32* %order1494, align 4
  switch i32 %933, label %sw.default.1496 [
    i32 2, label %sw.bb.1495
    i32 3, label %sw.bb.1495
    i32 4, label %sw.bb.1495
  ]

sw.bb.1495:                                       ; preds = %if.end.1485, %if.end.1485, %if.end.1485
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1497

sw.default.1496:                                  ; preds = %if.end.1485
  br label %sw.epilog.1497

sw.epilog.1497:                                   ; preds = %sw.default.1496, %sw.bb.1495
  %934 = load i32*, i32** %volatile_data1491, align 8
  %935 = load volatile i32, i32* %934, align 4
  store i32 %935, i32* %result1489, align 4
  %936 = load i32, i32* %order1494, align 4
  switch i32 %936, label %sw.default.1499 [
    i32 1, label %sw.bb.1498
    i32 3, label %sw.bb.1498
    i32 4, label %sw.bb.1498
  ]

sw.bb.1498:                                       ; preds = %sw.epilog.1497, %sw.epilog.1497, %sw.epilog.1497
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1500

sw.default.1499:                                  ; preds = %sw.epilog.1497
  br label %sw.epilog.1500

sw.epilog.1500:                                   ; preds = %sw.default.1499, %sw.bb.1498
  %937 = load i32, i32* %result1489, align 4
  store i32 %937, i32* %tmp1501
  %938 = load i32, i32* %tmp1501
  %tobool1502 = icmp ne i32 %938, 0
  br i1 %tobool1502, label %if.end.1515, label %if.then.1503

if.then.1503:                                     ; preds = %sw.epilog.1500
  %939 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1504 = icmp ne i32 %939, 0
  br i1 %tobool1504, label %if.end.1514, label %if.then.1505

if.then.1505:                                     ; preds = %if.then.1503
  %940 = load i8*, i8** %next_instr, align 8
  %941 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1506 = ptrtoint i8* %940 to i64
  %sub.ptr.rhs.cast1507 = ptrtoint i8* %941 to i64
  %sub.ptr.sub1508 = sub i64 %sub.ptr.lhs.cast1506, %sub.ptr.rhs.cast1507
  %conv1509 = trunc i64 %sub.ptr.sub1508 to i32
  %942 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1510 = getelementptr inbounds %struct._frame, %struct._frame* %942, i32 0, i32 13
  store i32 %conv1509, i32* %f_lasti1510, align 4
  %943 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1511 = getelementptr i8, i8* %943, i32 1
  store i8* %incdec.ptr1511, i8** %next_instr, align 8
  %944 = load i8, i8* %943, align 1
  %idxprom1512 = zext i8 %944 to i64
  %arrayidx1513 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1512
  %945 = load i8*, i8** %arrayidx1513, align 8
  br label %indirectgoto

if.end.1514:                                      ; preds = %if.then.1503
  br label %fast_next_opcode

if.end.1515:                                      ; preds = %sw.epilog.1500
  br label %for.cond

TARGET_BINARY_XOR:                                ; preds = %indirectgoto
  store i32 65, i32* %opcode, align 4
  br label %sw.bb.1516

sw.bb.1516:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_XOR
  %946 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1519 = getelementptr %struct._object*, %struct._object** %946, i32 -1
  store %struct._object** %incdec.ptr1519, %struct._object*** %stack_pointer, align 8
  %947 = load %struct._object*, %struct._object** %incdec.ptr1519, align 8
  store %struct._object* %947, %struct._object** %right1518, align 8
  %948 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1522 = getelementptr %struct._object*, %struct._object** %948, i64 -1
  %949 = load %struct._object*, %struct._object** %arrayidx1522, align 8
  store %struct._object* %949, %struct._object** %left1521, align 8
  %950 = load %struct._object*, %struct._object** %left1521, align 8
  %951 = load %struct._object*, %struct._object** %right1518, align 8
  %call1525 = call %struct._object* @PyNumber_Xor(%struct._object* %950, %struct._object* %951)
  store %struct._object* %call1525, %struct._object** %res1524, align 8
  br label %do.body.1526

do.body.1526:                                     ; preds = %sw.bb.1516
  %952 = load %struct._object*, %struct._object** %left1521, align 8
  store %struct._object* %952, %struct._object** %_py_decref_tmp1528, align 8
  %953 = load %struct._object*, %struct._object** %_py_decref_tmp1528, align 8
  %ob_refcnt1529 = getelementptr inbounds %struct._object, %struct._object* %953, i32 0, i32 0
  %954 = load i64, i64* %ob_refcnt1529, align 8
  %dec1530 = add i64 %954, -1
  store i64 %dec1530, i64* %ob_refcnt1529, align 8
  %cmp1531 = icmp ne i64 %dec1530, 0
  br i1 %cmp1531, label %if.then.1533, label %if.else.1534

if.then.1533:                                     ; preds = %do.body.1526
  br label %if.end.1537

if.else.1534:                                     ; preds = %do.body.1526
  %955 = load %struct._object*, %struct._object** %_py_decref_tmp1528, align 8
  %ob_type1535 = getelementptr inbounds %struct._object, %struct._object* %955, i32 0, i32 1
  %956 = load %struct._typeobject*, %struct._typeobject** %ob_type1535, align 8
  %tp_dealloc1536 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %956, i32 0, i32 4
  %957 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1536, align 8
  %958 = load %struct._object*, %struct._object** %_py_decref_tmp1528, align 8
  call void %957(%struct._object* %958)
  br label %if.end.1537

if.end.1537:                                      ; preds = %if.else.1534, %if.then.1533
  br label %do.end.1538

do.end.1538:                                      ; preds = %if.end.1537
  br label %do.body.1539

do.body.1539:                                     ; preds = %do.end.1538
  %959 = load %struct._object*, %struct._object** %right1518, align 8
  store %struct._object* %959, %struct._object** %_py_decref_tmp1541, align 8
  %960 = load %struct._object*, %struct._object** %_py_decref_tmp1541, align 8
  %ob_refcnt1542 = getelementptr inbounds %struct._object, %struct._object* %960, i32 0, i32 0
  %961 = load i64, i64* %ob_refcnt1542, align 8
  %dec1543 = add i64 %961, -1
  store i64 %dec1543, i64* %ob_refcnt1542, align 8
  %cmp1544 = icmp ne i64 %dec1543, 0
  br i1 %cmp1544, label %if.then.1546, label %if.else.1547

if.then.1546:                                     ; preds = %do.body.1539
  br label %if.end.1550

if.else.1547:                                     ; preds = %do.body.1539
  %962 = load %struct._object*, %struct._object** %_py_decref_tmp1541, align 8
  %ob_type1548 = getelementptr inbounds %struct._object, %struct._object* %962, i32 0, i32 1
  %963 = load %struct._typeobject*, %struct._typeobject** %ob_type1548, align 8
  %tp_dealloc1549 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %963, i32 0, i32 4
  %964 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1549, align 8
  %965 = load %struct._object*, %struct._object** %_py_decref_tmp1541, align 8
  call void %964(%struct._object* %965)
  br label %if.end.1550

if.end.1550:                                      ; preds = %if.else.1547, %if.then.1546
  br label %do.end.1551

do.end.1551:                                      ; preds = %if.end.1550
  %966 = load %struct._object*, %struct._object** %res1524, align 8
  %967 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1552 = getelementptr %struct._object*, %struct._object** %967, i64 -1
  store %struct._object* %966, %struct._object** %arrayidx1552, align 8
  %968 = load %struct._object*, %struct._object** %res1524, align 8
  %cmp1553 = icmp eq %struct._object* %968, null
  br i1 %cmp1553, label %if.then.1555, label %if.end.1556

if.then.1555:                                     ; preds = %do.end.1551
  br label %error

if.end.1556:                                      ; preds = %do.end.1551
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1558, align 8
  %969 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1558, align 8
  %_value1563 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %969, i32 0, i32 0
  store i32* %_value1563, i32** %volatile_data1562, align 8
  store i32 0, i32* %order1565, align 4
  %970 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1558, align 8
  %971 = bitcast %struct._Py_atomic_int* %970 to i8*
  %972 = load i32, i32* %order1565, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %971, i32 %972)
  %973 = load i32, i32* %order1565, align 4
  switch i32 %973, label %sw.default.1567 [
    i32 2, label %sw.bb.1566
    i32 3, label %sw.bb.1566
    i32 4, label %sw.bb.1566
  ]

sw.bb.1566:                                       ; preds = %if.end.1556, %if.end.1556, %if.end.1556
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1568

sw.default.1567:                                  ; preds = %if.end.1556
  br label %sw.epilog.1568

sw.epilog.1568:                                   ; preds = %sw.default.1567, %sw.bb.1566
  %974 = load i32*, i32** %volatile_data1562, align 8
  %975 = load volatile i32, i32* %974, align 4
  store i32 %975, i32* %result1560, align 4
  %976 = load i32, i32* %order1565, align 4
  switch i32 %976, label %sw.default.1570 [
    i32 1, label %sw.bb.1569
    i32 3, label %sw.bb.1569
    i32 4, label %sw.bb.1569
  ]

sw.bb.1569:                                       ; preds = %sw.epilog.1568, %sw.epilog.1568, %sw.epilog.1568
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1571

sw.default.1570:                                  ; preds = %sw.epilog.1568
  br label %sw.epilog.1571

sw.epilog.1571:                                   ; preds = %sw.default.1570, %sw.bb.1569
  %977 = load i32, i32* %result1560, align 4
  store i32 %977, i32* %tmp1572
  %978 = load i32, i32* %tmp1572
  %tobool1573 = icmp ne i32 %978, 0
  br i1 %tobool1573, label %if.end.1586, label %if.then.1574

if.then.1574:                                     ; preds = %sw.epilog.1571
  %979 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1575 = icmp ne i32 %979, 0
  br i1 %tobool1575, label %if.end.1585, label %if.then.1576

if.then.1576:                                     ; preds = %if.then.1574
  %980 = load i8*, i8** %next_instr, align 8
  %981 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1577 = ptrtoint i8* %980 to i64
  %sub.ptr.rhs.cast1578 = ptrtoint i8* %981 to i64
  %sub.ptr.sub1579 = sub i64 %sub.ptr.lhs.cast1577, %sub.ptr.rhs.cast1578
  %conv1580 = trunc i64 %sub.ptr.sub1579 to i32
  %982 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1581 = getelementptr inbounds %struct._frame, %struct._frame* %982, i32 0, i32 13
  store i32 %conv1580, i32* %f_lasti1581, align 4
  %983 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1582 = getelementptr i8, i8* %983, i32 1
  store i8* %incdec.ptr1582, i8** %next_instr, align 8
  %984 = load i8, i8* %983, align 1
  %idxprom1583 = zext i8 %984 to i64
  %arrayidx1584 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1583
  %985 = load i8*, i8** %arrayidx1584, align 8
  br label %indirectgoto

if.end.1585:                                      ; preds = %if.then.1574
  br label %fast_next_opcode

if.end.1586:                                      ; preds = %sw.epilog.1571
  br label %for.cond

TARGET_BINARY_OR:                                 ; preds = %indirectgoto
  store i32 66, i32* %opcode, align 4
  br label %sw.bb.1587

sw.bb.1587:                                       ; preds = %dispatch_opcode, %TARGET_BINARY_OR
  %986 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1590 = getelementptr %struct._object*, %struct._object** %986, i32 -1
  store %struct._object** %incdec.ptr1590, %struct._object*** %stack_pointer, align 8
  %987 = load %struct._object*, %struct._object** %incdec.ptr1590, align 8
  store %struct._object* %987, %struct._object** %right1589, align 8
  %988 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1593 = getelementptr %struct._object*, %struct._object** %988, i64 -1
  %989 = load %struct._object*, %struct._object** %arrayidx1593, align 8
  store %struct._object* %989, %struct._object** %left1592, align 8
  %990 = load %struct._object*, %struct._object** %left1592, align 8
  %991 = load %struct._object*, %struct._object** %right1589, align 8
  %call1596 = call %struct._object* @PyNumber_Or(%struct._object* %990, %struct._object* %991)
  store %struct._object* %call1596, %struct._object** %res1595, align 8
  br label %do.body.1597

do.body.1597:                                     ; preds = %sw.bb.1587
  %992 = load %struct._object*, %struct._object** %left1592, align 8
  store %struct._object* %992, %struct._object** %_py_decref_tmp1599, align 8
  %993 = load %struct._object*, %struct._object** %_py_decref_tmp1599, align 8
  %ob_refcnt1600 = getelementptr inbounds %struct._object, %struct._object* %993, i32 0, i32 0
  %994 = load i64, i64* %ob_refcnt1600, align 8
  %dec1601 = add i64 %994, -1
  store i64 %dec1601, i64* %ob_refcnt1600, align 8
  %cmp1602 = icmp ne i64 %dec1601, 0
  br i1 %cmp1602, label %if.then.1604, label %if.else.1605

if.then.1604:                                     ; preds = %do.body.1597
  br label %if.end.1608

if.else.1605:                                     ; preds = %do.body.1597
  %995 = load %struct._object*, %struct._object** %_py_decref_tmp1599, align 8
  %ob_type1606 = getelementptr inbounds %struct._object, %struct._object* %995, i32 0, i32 1
  %996 = load %struct._typeobject*, %struct._typeobject** %ob_type1606, align 8
  %tp_dealloc1607 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %996, i32 0, i32 4
  %997 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1607, align 8
  %998 = load %struct._object*, %struct._object** %_py_decref_tmp1599, align 8
  call void %997(%struct._object* %998)
  br label %if.end.1608

if.end.1608:                                      ; preds = %if.else.1605, %if.then.1604
  br label %do.end.1609

do.end.1609:                                      ; preds = %if.end.1608
  br label %do.body.1610

do.body.1610:                                     ; preds = %do.end.1609
  %999 = load %struct._object*, %struct._object** %right1589, align 8
  store %struct._object* %999, %struct._object** %_py_decref_tmp1612, align 8
  %1000 = load %struct._object*, %struct._object** %_py_decref_tmp1612, align 8
  %ob_refcnt1613 = getelementptr inbounds %struct._object, %struct._object* %1000, i32 0, i32 0
  %1001 = load i64, i64* %ob_refcnt1613, align 8
  %dec1614 = add i64 %1001, -1
  store i64 %dec1614, i64* %ob_refcnt1613, align 8
  %cmp1615 = icmp ne i64 %dec1614, 0
  br i1 %cmp1615, label %if.then.1617, label %if.else.1618

if.then.1617:                                     ; preds = %do.body.1610
  br label %if.end.1621

if.else.1618:                                     ; preds = %do.body.1610
  %1002 = load %struct._object*, %struct._object** %_py_decref_tmp1612, align 8
  %ob_type1619 = getelementptr inbounds %struct._object, %struct._object* %1002, i32 0, i32 1
  %1003 = load %struct._typeobject*, %struct._typeobject** %ob_type1619, align 8
  %tp_dealloc1620 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1003, i32 0, i32 4
  %1004 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1620, align 8
  %1005 = load %struct._object*, %struct._object** %_py_decref_tmp1612, align 8
  call void %1004(%struct._object* %1005)
  br label %if.end.1621

if.end.1621:                                      ; preds = %if.else.1618, %if.then.1617
  br label %do.end.1622

do.end.1622:                                      ; preds = %if.end.1621
  %1006 = load %struct._object*, %struct._object** %res1595, align 8
  %1007 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1623 = getelementptr %struct._object*, %struct._object** %1007, i64 -1
  store %struct._object* %1006, %struct._object** %arrayidx1623, align 8
  %1008 = load %struct._object*, %struct._object** %res1595, align 8
  %cmp1624 = icmp eq %struct._object* %1008, null
  br i1 %cmp1624, label %if.then.1626, label %if.end.1627

if.then.1626:                                     ; preds = %do.end.1622
  br label %error

if.end.1627:                                      ; preds = %do.end.1622
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1629, align 8
  %1009 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1629, align 8
  %_value1634 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1009, i32 0, i32 0
  store i32* %_value1634, i32** %volatile_data1633, align 8
  store i32 0, i32* %order1636, align 4
  %1010 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1629, align 8
  %1011 = bitcast %struct._Py_atomic_int* %1010 to i8*
  %1012 = load i32, i32* %order1636, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1011, i32 %1012)
  %1013 = load i32, i32* %order1636, align 4
  switch i32 %1013, label %sw.default.1638 [
    i32 2, label %sw.bb.1637
    i32 3, label %sw.bb.1637
    i32 4, label %sw.bb.1637
  ]

sw.bb.1637:                                       ; preds = %if.end.1627, %if.end.1627, %if.end.1627
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1639

sw.default.1638:                                  ; preds = %if.end.1627
  br label %sw.epilog.1639

sw.epilog.1639:                                   ; preds = %sw.default.1638, %sw.bb.1637
  %1014 = load i32*, i32** %volatile_data1633, align 8
  %1015 = load volatile i32, i32* %1014, align 4
  store i32 %1015, i32* %result1631, align 4
  %1016 = load i32, i32* %order1636, align 4
  switch i32 %1016, label %sw.default.1641 [
    i32 1, label %sw.bb.1640
    i32 3, label %sw.bb.1640
    i32 4, label %sw.bb.1640
  ]

sw.bb.1640:                                       ; preds = %sw.epilog.1639, %sw.epilog.1639, %sw.epilog.1639
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1642

sw.default.1641:                                  ; preds = %sw.epilog.1639
  br label %sw.epilog.1642

sw.epilog.1642:                                   ; preds = %sw.default.1641, %sw.bb.1640
  %1017 = load i32, i32* %result1631, align 4
  store i32 %1017, i32* %tmp1643
  %1018 = load i32, i32* %tmp1643
  %tobool1644 = icmp ne i32 %1018, 0
  br i1 %tobool1644, label %if.end.1657, label %if.then.1645

if.then.1645:                                     ; preds = %sw.epilog.1642
  %1019 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1646 = icmp ne i32 %1019, 0
  br i1 %tobool1646, label %if.end.1656, label %if.then.1647

if.then.1647:                                     ; preds = %if.then.1645
  %1020 = load i8*, i8** %next_instr, align 8
  %1021 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1648 = ptrtoint i8* %1020 to i64
  %sub.ptr.rhs.cast1649 = ptrtoint i8* %1021 to i64
  %sub.ptr.sub1650 = sub i64 %sub.ptr.lhs.cast1648, %sub.ptr.rhs.cast1649
  %conv1651 = trunc i64 %sub.ptr.sub1650 to i32
  %1022 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1652 = getelementptr inbounds %struct._frame, %struct._frame* %1022, i32 0, i32 13
  store i32 %conv1651, i32* %f_lasti1652, align 4
  %1023 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1653 = getelementptr i8, i8* %1023, i32 1
  store i8* %incdec.ptr1653, i8** %next_instr, align 8
  %1024 = load i8, i8* %1023, align 1
  %idxprom1654 = zext i8 %1024 to i64
  %arrayidx1655 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1654
  %1025 = load i8*, i8** %arrayidx1655, align 8
  br label %indirectgoto

if.end.1656:                                      ; preds = %if.then.1645
  br label %fast_next_opcode

if.end.1657:                                      ; preds = %sw.epilog.1642
  br label %for.cond

TARGET_LIST_APPEND:                               ; preds = %indirectgoto
  store i32 145, i32* %opcode, align 4
  %1026 = load i8*, i8** %next_instr, align 8
  %add.ptr1658 = getelementptr i8, i8* %1026, i64 2
  store i8* %add.ptr1658, i8** %next_instr, align 8
  %1027 = load i8*, i8** %next_instr, align 8
  %arrayidx1659 = getelementptr i8, i8* %1027, i64 -1
  %1028 = load i8, i8* %arrayidx1659, align 1
  %conv1660 = zext i8 %1028 to i32
  %shl1661 = shl i32 %conv1660, 8
  %1029 = load i8*, i8** %next_instr, align 8
  %arrayidx1662 = getelementptr i8, i8* %1029, i64 -2
  %1030 = load i8, i8* %arrayidx1662, align 1
  %conv1663 = zext i8 %1030 to i32
  %add1664 = add i32 %shl1661, %conv1663
  store i32 %add1664, i32* %oparg, align 4
  br label %sw.bb.1665

sw.bb.1665:                                       ; preds = %dispatch_opcode, %TARGET_LIST_APPEND
  %1031 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1667 = getelementptr %struct._object*, %struct._object** %1031, i32 -1
  store %struct._object** %incdec.ptr1667, %struct._object*** %stack_pointer, align 8
  %1032 = load %struct._object*, %struct._object** %incdec.ptr1667, align 8
  store %struct._object* %1032, %struct._object** %v, align 8
  %1033 = load i32, i32* %oparg, align 4
  %sub1669 = sub i32 0, %1033
  %idxprom1670 = sext i32 %sub1669 to i64
  %1034 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1671 = getelementptr %struct._object*, %struct._object** %1034, i64 %idxprom1670
  %1035 = load %struct._object*, %struct._object** %arrayidx1671, align 8
  store %struct._object* %1035, %struct._object** %list, align 8
  %1036 = load %struct._object*, %struct._object** %list, align 8
  %1037 = load %struct._object*, %struct._object** %v, align 8
  %call1674 = call i32 @PyList_Append(%struct._object* %1036, %struct._object* %1037)
  store i32 %call1674, i32* %err1673, align 4
  br label %do.body.1675

do.body.1675:                                     ; preds = %sw.bb.1665
  %1038 = load %struct._object*, %struct._object** %v, align 8
  store %struct._object* %1038, %struct._object** %_py_decref_tmp1677, align 8
  %1039 = load %struct._object*, %struct._object** %_py_decref_tmp1677, align 8
  %ob_refcnt1678 = getelementptr inbounds %struct._object, %struct._object* %1039, i32 0, i32 0
  %1040 = load i64, i64* %ob_refcnt1678, align 8
  %dec1679 = add i64 %1040, -1
  store i64 %dec1679, i64* %ob_refcnt1678, align 8
  %cmp1680 = icmp ne i64 %dec1679, 0
  br i1 %cmp1680, label %if.then.1682, label %if.else.1683

if.then.1682:                                     ; preds = %do.body.1675
  br label %if.end.1686

if.else.1683:                                     ; preds = %do.body.1675
  %1041 = load %struct._object*, %struct._object** %_py_decref_tmp1677, align 8
  %ob_type1684 = getelementptr inbounds %struct._object, %struct._object* %1041, i32 0, i32 1
  %1042 = load %struct._typeobject*, %struct._typeobject** %ob_type1684, align 8
  %tp_dealloc1685 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1042, i32 0, i32 4
  %1043 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1685, align 8
  %1044 = load %struct._object*, %struct._object** %_py_decref_tmp1677, align 8
  call void %1043(%struct._object* %1044)
  br label %if.end.1686

if.end.1686:                                      ; preds = %if.else.1683, %if.then.1682
  br label %do.end.1687

do.end.1687:                                      ; preds = %if.end.1686
  %1045 = load i32, i32* %err1673, align 4
  %cmp1688 = icmp ne i32 %1045, 0
  br i1 %cmp1688, label %if.then.1690, label %if.end.1691

if.then.1690:                                     ; preds = %do.end.1687
  br label %error

if.end.1691:                                      ; preds = %do.end.1687
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1693, align 8
  %1046 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1693, align 8
  %_value1698 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1046, i32 0, i32 0
  store i32* %_value1698, i32** %volatile_data1697, align 8
  store i32 0, i32* %order1700, align 4
  %1047 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1693, align 8
  %1048 = bitcast %struct._Py_atomic_int* %1047 to i8*
  %1049 = load i32, i32* %order1700, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1048, i32 %1049)
  %1050 = load i32, i32* %order1700, align 4
  switch i32 %1050, label %sw.default.1702 [
    i32 2, label %sw.bb.1701
    i32 3, label %sw.bb.1701
    i32 4, label %sw.bb.1701
  ]

sw.bb.1701:                                       ; preds = %if.end.1691, %if.end.1691, %if.end.1691
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1703

sw.default.1702:                                  ; preds = %if.end.1691
  br label %sw.epilog.1703

sw.epilog.1703:                                   ; preds = %sw.default.1702, %sw.bb.1701
  %1051 = load i32*, i32** %volatile_data1697, align 8
  %1052 = load volatile i32, i32* %1051, align 4
  store i32 %1052, i32* %result1695, align 4
  %1053 = load i32, i32* %order1700, align 4
  switch i32 %1053, label %sw.default.1705 [
    i32 1, label %sw.bb.1704
    i32 3, label %sw.bb.1704
    i32 4, label %sw.bb.1704
  ]

sw.bb.1704:                                       ; preds = %sw.epilog.1703, %sw.epilog.1703, %sw.epilog.1703
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1706

sw.default.1705:                                  ; preds = %sw.epilog.1703
  br label %sw.epilog.1706

sw.epilog.1706:                                   ; preds = %sw.default.1705, %sw.bb.1704
  %1054 = load i32, i32* %result1695, align 4
  store i32 %1054, i32* %tmp1707
  %1055 = load i32, i32* %tmp1707
  %tobool1708 = icmp ne i32 %1055, 0
  br i1 %tobool1708, label %if.end.1721, label %if.then.1709

if.then.1709:                                     ; preds = %sw.epilog.1706
  %1056 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1710 = icmp ne i32 %1056, 0
  br i1 %tobool1710, label %if.end.1720, label %if.then.1711

if.then.1711:                                     ; preds = %if.then.1709
  %1057 = load i8*, i8** %next_instr, align 8
  %1058 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1712 = ptrtoint i8* %1057 to i64
  %sub.ptr.rhs.cast1713 = ptrtoint i8* %1058 to i64
  %sub.ptr.sub1714 = sub i64 %sub.ptr.lhs.cast1712, %sub.ptr.rhs.cast1713
  %conv1715 = trunc i64 %sub.ptr.sub1714 to i32
  %1059 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1716 = getelementptr inbounds %struct._frame, %struct._frame* %1059, i32 0, i32 13
  store i32 %conv1715, i32* %f_lasti1716, align 4
  %1060 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1717 = getelementptr i8, i8* %1060, i32 1
  store i8* %incdec.ptr1717, i8** %next_instr, align 8
  %1061 = load i8, i8* %1060, align 1
  %idxprom1718 = zext i8 %1061 to i64
  %arrayidx1719 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1718
  %1062 = load i8*, i8** %arrayidx1719, align 8
  br label %indirectgoto

if.end.1720:                                      ; preds = %if.then.1709
  br label %fast_next_opcode

if.end.1721:                                      ; preds = %sw.epilog.1706
  br label %for.cond

TARGET_SET_ADD:                                   ; preds = %indirectgoto
  store i32 146, i32* %opcode, align 4
  %1063 = load i8*, i8** %next_instr, align 8
  %add.ptr1722 = getelementptr i8, i8* %1063, i64 2
  store i8* %add.ptr1722, i8** %next_instr, align 8
  %1064 = load i8*, i8** %next_instr, align 8
  %arrayidx1723 = getelementptr i8, i8* %1064, i64 -1
  %1065 = load i8, i8* %arrayidx1723, align 1
  %conv1724 = zext i8 %1065 to i32
  %shl1725 = shl i32 %conv1724, 8
  %1066 = load i8*, i8** %next_instr, align 8
  %arrayidx1726 = getelementptr i8, i8* %1066, i64 -2
  %1067 = load i8, i8* %arrayidx1726, align 1
  %conv1727 = zext i8 %1067 to i32
  %add1728 = add i32 %shl1725, %conv1727
  store i32 %add1728, i32* %oparg, align 4
  br label %sw.bb.1729

sw.bb.1729:                                       ; preds = %dispatch_opcode, %TARGET_SET_ADD
  %1068 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1732 = getelementptr %struct._object*, %struct._object** %1068, i32 -1
  store %struct._object** %incdec.ptr1732, %struct._object*** %stack_pointer, align 8
  %1069 = load %struct._object*, %struct._object** %incdec.ptr1732, align 8
  store %struct._object* %1069, %struct._object** %v1731, align 8
  %1070 = load i32, i32* %oparg, align 4
  %sub1734 = sub i32 0, %1070
  %idxprom1735 = sext i32 %sub1734 to i64
  %1071 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1736 = getelementptr %struct._object*, %struct._object** %1071, i64 %idxprom1735
  %1072 = load %struct._object*, %struct._object** %arrayidx1736, align 8
  store %struct._object* %1072, %struct._object** %set, align 8
  %1073 = load %struct._object*, %struct._object** %set, align 8
  %1074 = load %struct._object*, %struct._object** %v1731, align 8
  %call1739 = call i32 @PySet_Add(%struct._object* %1073, %struct._object* %1074)
  store i32 %call1739, i32* %err1738, align 4
  br label %do.body.1740

do.body.1740:                                     ; preds = %sw.bb.1729
  %1075 = load %struct._object*, %struct._object** %v1731, align 8
  store %struct._object* %1075, %struct._object** %_py_decref_tmp1742, align 8
  %1076 = load %struct._object*, %struct._object** %_py_decref_tmp1742, align 8
  %ob_refcnt1743 = getelementptr inbounds %struct._object, %struct._object* %1076, i32 0, i32 0
  %1077 = load i64, i64* %ob_refcnt1743, align 8
  %dec1744 = add i64 %1077, -1
  store i64 %dec1744, i64* %ob_refcnt1743, align 8
  %cmp1745 = icmp ne i64 %dec1744, 0
  br i1 %cmp1745, label %if.then.1747, label %if.else.1748

if.then.1747:                                     ; preds = %do.body.1740
  br label %if.end.1751

if.else.1748:                                     ; preds = %do.body.1740
  %1078 = load %struct._object*, %struct._object** %_py_decref_tmp1742, align 8
  %ob_type1749 = getelementptr inbounds %struct._object, %struct._object* %1078, i32 0, i32 1
  %1079 = load %struct._typeobject*, %struct._typeobject** %ob_type1749, align 8
  %tp_dealloc1750 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1079, i32 0, i32 4
  %1080 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1750, align 8
  %1081 = load %struct._object*, %struct._object** %_py_decref_tmp1742, align 8
  call void %1080(%struct._object* %1081)
  br label %if.end.1751

if.end.1751:                                      ; preds = %if.else.1748, %if.then.1747
  br label %do.end.1752

do.end.1752:                                      ; preds = %if.end.1751
  %1082 = load i32, i32* %err1738, align 4
  %cmp1753 = icmp ne i32 %1082, 0
  br i1 %cmp1753, label %if.then.1755, label %if.end.1756

if.then.1755:                                     ; preds = %do.end.1752
  br label %error

if.end.1756:                                      ; preds = %do.end.1752
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1758, align 8
  %1083 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1758, align 8
  %_value1763 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1083, i32 0, i32 0
  store i32* %_value1763, i32** %volatile_data1762, align 8
  store i32 0, i32* %order1765, align 4
  %1084 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1758, align 8
  %1085 = bitcast %struct._Py_atomic_int* %1084 to i8*
  %1086 = load i32, i32* %order1765, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1085, i32 %1086)
  %1087 = load i32, i32* %order1765, align 4
  switch i32 %1087, label %sw.default.1767 [
    i32 2, label %sw.bb.1766
    i32 3, label %sw.bb.1766
    i32 4, label %sw.bb.1766
  ]

sw.bb.1766:                                       ; preds = %if.end.1756, %if.end.1756, %if.end.1756
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1768

sw.default.1767:                                  ; preds = %if.end.1756
  br label %sw.epilog.1768

sw.epilog.1768:                                   ; preds = %sw.default.1767, %sw.bb.1766
  %1088 = load i32*, i32** %volatile_data1762, align 8
  %1089 = load volatile i32, i32* %1088, align 4
  store i32 %1089, i32* %result1760, align 4
  %1090 = load i32, i32* %order1765, align 4
  switch i32 %1090, label %sw.default.1770 [
    i32 1, label %sw.bb.1769
    i32 3, label %sw.bb.1769
    i32 4, label %sw.bb.1769
  ]

sw.bb.1769:                                       ; preds = %sw.epilog.1768, %sw.epilog.1768, %sw.epilog.1768
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1771

sw.default.1770:                                  ; preds = %sw.epilog.1768
  br label %sw.epilog.1771

sw.epilog.1771:                                   ; preds = %sw.default.1770, %sw.bb.1769
  %1091 = load i32, i32* %result1760, align 4
  store i32 %1091, i32* %tmp1772
  %1092 = load i32, i32* %tmp1772
  %tobool1773 = icmp ne i32 %1092, 0
  br i1 %tobool1773, label %if.end.1786, label %if.then.1774

if.then.1774:                                     ; preds = %sw.epilog.1771
  %1093 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1775 = icmp ne i32 %1093, 0
  br i1 %tobool1775, label %if.end.1785, label %if.then.1776

if.then.1776:                                     ; preds = %if.then.1774
  %1094 = load i8*, i8** %next_instr, align 8
  %1095 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1777 = ptrtoint i8* %1094 to i64
  %sub.ptr.rhs.cast1778 = ptrtoint i8* %1095 to i64
  %sub.ptr.sub1779 = sub i64 %sub.ptr.lhs.cast1777, %sub.ptr.rhs.cast1778
  %conv1780 = trunc i64 %sub.ptr.sub1779 to i32
  %1096 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1781 = getelementptr inbounds %struct._frame, %struct._frame* %1096, i32 0, i32 13
  store i32 %conv1780, i32* %f_lasti1781, align 4
  %1097 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1782 = getelementptr i8, i8* %1097, i32 1
  store i8* %incdec.ptr1782, i8** %next_instr, align 8
  %1098 = load i8, i8* %1097, align 1
  %idxprom1783 = zext i8 %1098 to i64
  %arrayidx1784 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1783
  %1099 = load i8*, i8** %arrayidx1784, align 8
  br label %indirectgoto

if.end.1785:                                      ; preds = %if.then.1774
  br label %fast_next_opcode

if.end.1786:                                      ; preds = %sw.epilog.1771
  br label %for.cond

TARGET_INPLACE_POWER:                             ; preds = %indirectgoto
  store i32 67, i32* %opcode, align 4
  br label %sw.bb.1787

sw.bb.1787:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_POWER
  %1100 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1790 = getelementptr %struct._object*, %struct._object** %1100, i32 -1
  store %struct._object** %incdec.ptr1790, %struct._object*** %stack_pointer, align 8
  %1101 = load %struct._object*, %struct._object** %incdec.ptr1790, align 8
  store %struct._object* %1101, %struct._object** %exp1789, align 8
  %1102 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1793 = getelementptr %struct._object*, %struct._object** %1102, i64 -1
  %1103 = load %struct._object*, %struct._object** %arrayidx1793, align 8
  store %struct._object* %1103, %struct._object** %base1792, align 8
  %1104 = load %struct._object*, %struct._object** %base1792, align 8
  %1105 = load %struct._object*, %struct._object** %exp1789, align 8
  %call1796 = call %struct._object* @PyNumber_InPlacePower(%struct._object* %1104, %struct._object* %1105, %struct._object* @_Py_NoneStruct)
  store %struct._object* %call1796, %struct._object** %res1795, align 8
  br label %do.body.1797

do.body.1797:                                     ; preds = %sw.bb.1787
  %1106 = load %struct._object*, %struct._object** %base1792, align 8
  store %struct._object* %1106, %struct._object** %_py_decref_tmp1799, align 8
  %1107 = load %struct._object*, %struct._object** %_py_decref_tmp1799, align 8
  %ob_refcnt1800 = getelementptr inbounds %struct._object, %struct._object* %1107, i32 0, i32 0
  %1108 = load i64, i64* %ob_refcnt1800, align 8
  %dec1801 = add i64 %1108, -1
  store i64 %dec1801, i64* %ob_refcnt1800, align 8
  %cmp1802 = icmp ne i64 %dec1801, 0
  br i1 %cmp1802, label %if.then.1804, label %if.else.1805

if.then.1804:                                     ; preds = %do.body.1797
  br label %if.end.1808

if.else.1805:                                     ; preds = %do.body.1797
  %1109 = load %struct._object*, %struct._object** %_py_decref_tmp1799, align 8
  %ob_type1806 = getelementptr inbounds %struct._object, %struct._object* %1109, i32 0, i32 1
  %1110 = load %struct._typeobject*, %struct._typeobject** %ob_type1806, align 8
  %tp_dealloc1807 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1110, i32 0, i32 4
  %1111 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1807, align 8
  %1112 = load %struct._object*, %struct._object** %_py_decref_tmp1799, align 8
  call void %1111(%struct._object* %1112)
  br label %if.end.1808

if.end.1808:                                      ; preds = %if.else.1805, %if.then.1804
  br label %do.end.1809

do.end.1809:                                      ; preds = %if.end.1808
  br label %do.body.1810

do.body.1810:                                     ; preds = %do.end.1809
  %1113 = load %struct._object*, %struct._object** %exp1789, align 8
  store %struct._object* %1113, %struct._object** %_py_decref_tmp1812, align 8
  %1114 = load %struct._object*, %struct._object** %_py_decref_tmp1812, align 8
  %ob_refcnt1813 = getelementptr inbounds %struct._object, %struct._object* %1114, i32 0, i32 0
  %1115 = load i64, i64* %ob_refcnt1813, align 8
  %dec1814 = add i64 %1115, -1
  store i64 %dec1814, i64* %ob_refcnt1813, align 8
  %cmp1815 = icmp ne i64 %dec1814, 0
  br i1 %cmp1815, label %if.then.1817, label %if.else.1818

if.then.1817:                                     ; preds = %do.body.1810
  br label %if.end.1821

if.else.1818:                                     ; preds = %do.body.1810
  %1116 = load %struct._object*, %struct._object** %_py_decref_tmp1812, align 8
  %ob_type1819 = getelementptr inbounds %struct._object, %struct._object* %1116, i32 0, i32 1
  %1117 = load %struct._typeobject*, %struct._typeobject** %ob_type1819, align 8
  %tp_dealloc1820 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1117, i32 0, i32 4
  %1118 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1820, align 8
  %1119 = load %struct._object*, %struct._object** %_py_decref_tmp1812, align 8
  call void %1118(%struct._object* %1119)
  br label %if.end.1821

if.end.1821:                                      ; preds = %if.else.1818, %if.then.1817
  br label %do.end.1822

do.end.1822:                                      ; preds = %if.end.1821
  %1120 = load %struct._object*, %struct._object** %res1795, align 8
  %1121 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1823 = getelementptr %struct._object*, %struct._object** %1121, i64 -1
  store %struct._object* %1120, %struct._object** %arrayidx1823, align 8
  %1122 = load %struct._object*, %struct._object** %res1795, align 8
  %cmp1824 = icmp eq %struct._object* %1122, null
  br i1 %cmp1824, label %if.then.1826, label %if.end.1827

if.then.1826:                                     ; preds = %do.end.1822
  br label %error

if.end.1827:                                      ; preds = %do.end.1822
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1829, align 8
  %1123 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1829, align 8
  %_value1834 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1123, i32 0, i32 0
  store i32* %_value1834, i32** %volatile_data1833, align 8
  store i32 0, i32* %order1836, align 4
  %1124 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1829, align 8
  %1125 = bitcast %struct._Py_atomic_int* %1124 to i8*
  %1126 = load i32, i32* %order1836, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1125, i32 %1126)
  %1127 = load i32, i32* %order1836, align 4
  switch i32 %1127, label %sw.default.1838 [
    i32 2, label %sw.bb.1837
    i32 3, label %sw.bb.1837
    i32 4, label %sw.bb.1837
  ]

sw.bb.1837:                                       ; preds = %if.end.1827, %if.end.1827, %if.end.1827
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1839

sw.default.1838:                                  ; preds = %if.end.1827
  br label %sw.epilog.1839

sw.epilog.1839:                                   ; preds = %sw.default.1838, %sw.bb.1837
  %1128 = load i32*, i32** %volatile_data1833, align 8
  %1129 = load volatile i32, i32* %1128, align 4
  store i32 %1129, i32* %result1831, align 4
  %1130 = load i32, i32* %order1836, align 4
  switch i32 %1130, label %sw.default.1841 [
    i32 1, label %sw.bb.1840
    i32 3, label %sw.bb.1840
    i32 4, label %sw.bb.1840
  ]

sw.bb.1840:                                       ; preds = %sw.epilog.1839, %sw.epilog.1839, %sw.epilog.1839
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1842

sw.default.1841:                                  ; preds = %sw.epilog.1839
  br label %sw.epilog.1842

sw.epilog.1842:                                   ; preds = %sw.default.1841, %sw.bb.1840
  %1131 = load i32, i32* %result1831, align 4
  store i32 %1131, i32* %tmp1843
  %1132 = load i32, i32* %tmp1843
  %tobool1844 = icmp ne i32 %1132, 0
  br i1 %tobool1844, label %if.end.1857, label %if.then.1845

if.then.1845:                                     ; preds = %sw.epilog.1842
  %1133 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1846 = icmp ne i32 %1133, 0
  br i1 %tobool1846, label %if.end.1856, label %if.then.1847

if.then.1847:                                     ; preds = %if.then.1845
  %1134 = load i8*, i8** %next_instr, align 8
  %1135 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1848 = ptrtoint i8* %1134 to i64
  %sub.ptr.rhs.cast1849 = ptrtoint i8* %1135 to i64
  %sub.ptr.sub1850 = sub i64 %sub.ptr.lhs.cast1848, %sub.ptr.rhs.cast1849
  %conv1851 = trunc i64 %sub.ptr.sub1850 to i32
  %1136 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1852 = getelementptr inbounds %struct._frame, %struct._frame* %1136, i32 0, i32 13
  store i32 %conv1851, i32* %f_lasti1852, align 4
  %1137 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1853 = getelementptr i8, i8* %1137, i32 1
  store i8* %incdec.ptr1853, i8** %next_instr, align 8
  %1138 = load i8, i8* %1137, align 1
  %idxprom1854 = zext i8 %1138 to i64
  %arrayidx1855 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1854
  %1139 = load i8*, i8** %arrayidx1855, align 8
  br label %indirectgoto

if.end.1856:                                      ; preds = %if.then.1845
  br label %fast_next_opcode

if.end.1857:                                      ; preds = %sw.epilog.1842
  br label %for.cond

TARGET_INPLACE_MULTIPLY:                          ; preds = %indirectgoto
  store i32 57, i32* %opcode, align 4
  br label %sw.bb.1858

sw.bb.1858:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_MULTIPLY
  %1140 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1861 = getelementptr %struct._object*, %struct._object** %1140, i32 -1
  store %struct._object** %incdec.ptr1861, %struct._object*** %stack_pointer, align 8
  %1141 = load %struct._object*, %struct._object** %incdec.ptr1861, align 8
  store %struct._object* %1141, %struct._object** %right1860, align 8
  %1142 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1864 = getelementptr %struct._object*, %struct._object** %1142, i64 -1
  %1143 = load %struct._object*, %struct._object** %arrayidx1864, align 8
  store %struct._object* %1143, %struct._object** %left1863, align 8
  %1144 = load %struct._object*, %struct._object** %left1863, align 8
  %1145 = load %struct._object*, %struct._object** %right1860, align 8
  %call1867 = call %struct._object* @PyNumber_InPlaceMultiply(%struct._object* %1144, %struct._object* %1145)
  store %struct._object* %call1867, %struct._object** %res1866, align 8
  br label %do.body.1868

do.body.1868:                                     ; preds = %sw.bb.1858
  %1146 = load %struct._object*, %struct._object** %left1863, align 8
  store %struct._object* %1146, %struct._object** %_py_decref_tmp1870, align 8
  %1147 = load %struct._object*, %struct._object** %_py_decref_tmp1870, align 8
  %ob_refcnt1871 = getelementptr inbounds %struct._object, %struct._object* %1147, i32 0, i32 0
  %1148 = load i64, i64* %ob_refcnt1871, align 8
  %dec1872 = add i64 %1148, -1
  store i64 %dec1872, i64* %ob_refcnt1871, align 8
  %cmp1873 = icmp ne i64 %dec1872, 0
  br i1 %cmp1873, label %if.then.1875, label %if.else.1876

if.then.1875:                                     ; preds = %do.body.1868
  br label %if.end.1879

if.else.1876:                                     ; preds = %do.body.1868
  %1149 = load %struct._object*, %struct._object** %_py_decref_tmp1870, align 8
  %ob_type1877 = getelementptr inbounds %struct._object, %struct._object* %1149, i32 0, i32 1
  %1150 = load %struct._typeobject*, %struct._typeobject** %ob_type1877, align 8
  %tp_dealloc1878 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1150, i32 0, i32 4
  %1151 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1878, align 8
  %1152 = load %struct._object*, %struct._object** %_py_decref_tmp1870, align 8
  call void %1151(%struct._object* %1152)
  br label %if.end.1879

if.end.1879:                                      ; preds = %if.else.1876, %if.then.1875
  br label %do.end.1880

do.end.1880:                                      ; preds = %if.end.1879
  br label %do.body.1881

do.body.1881:                                     ; preds = %do.end.1880
  %1153 = load %struct._object*, %struct._object** %right1860, align 8
  store %struct._object* %1153, %struct._object** %_py_decref_tmp1883, align 8
  %1154 = load %struct._object*, %struct._object** %_py_decref_tmp1883, align 8
  %ob_refcnt1884 = getelementptr inbounds %struct._object, %struct._object* %1154, i32 0, i32 0
  %1155 = load i64, i64* %ob_refcnt1884, align 8
  %dec1885 = add i64 %1155, -1
  store i64 %dec1885, i64* %ob_refcnt1884, align 8
  %cmp1886 = icmp ne i64 %dec1885, 0
  br i1 %cmp1886, label %if.then.1888, label %if.else.1889

if.then.1888:                                     ; preds = %do.body.1881
  br label %if.end.1892

if.else.1889:                                     ; preds = %do.body.1881
  %1156 = load %struct._object*, %struct._object** %_py_decref_tmp1883, align 8
  %ob_type1890 = getelementptr inbounds %struct._object, %struct._object* %1156, i32 0, i32 1
  %1157 = load %struct._typeobject*, %struct._typeobject** %ob_type1890, align 8
  %tp_dealloc1891 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1157, i32 0, i32 4
  %1158 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1891, align 8
  %1159 = load %struct._object*, %struct._object** %_py_decref_tmp1883, align 8
  call void %1158(%struct._object* %1159)
  br label %if.end.1892

if.end.1892:                                      ; preds = %if.else.1889, %if.then.1888
  br label %do.end.1893

do.end.1893:                                      ; preds = %if.end.1892
  %1160 = load %struct._object*, %struct._object** %res1866, align 8
  %1161 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1894 = getelementptr %struct._object*, %struct._object** %1161, i64 -1
  store %struct._object* %1160, %struct._object** %arrayidx1894, align 8
  %1162 = load %struct._object*, %struct._object** %res1866, align 8
  %cmp1895 = icmp eq %struct._object* %1162, null
  br i1 %cmp1895, label %if.then.1897, label %if.end.1898

if.then.1897:                                     ; preds = %do.end.1893
  br label %error

if.end.1898:                                      ; preds = %do.end.1893
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1900, align 8
  %1163 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1900, align 8
  %_value1905 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1163, i32 0, i32 0
  store i32* %_value1905, i32** %volatile_data1904, align 8
  store i32 0, i32* %order1907, align 4
  %1164 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1900, align 8
  %1165 = bitcast %struct._Py_atomic_int* %1164 to i8*
  %1166 = load i32, i32* %order1907, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1165, i32 %1166)
  %1167 = load i32, i32* %order1907, align 4
  switch i32 %1167, label %sw.default.1909 [
    i32 2, label %sw.bb.1908
    i32 3, label %sw.bb.1908
    i32 4, label %sw.bb.1908
  ]

sw.bb.1908:                                       ; preds = %if.end.1898, %if.end.1898, %if.end.1898
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1910

sw.default.1909:                                  ; preds = %if.end.1898
  br label %sw.epilog.1910

sw.epilog.1910:                                   ; preds = %sw.default.1909, %sw.bb.1908
  %1168 = load i32*, i32** %volatile_data1904, align 8
  %1169 = load volatile i32, i32* %1168, align 4
  store i32 %1169, i32* %result1902, align 4
  %1170 = load i32, i32* %order1907, align 4
  switch i32 %1170, label %sw.default.1912 [
    i32 1, label %sw.bb.1911
    i32 3, label %sw.bb.1911
    i32 4, label %sw.bb.1911
  ]

sw.bb.1911:                                       ; preds = %sw.epilog.1910, %sw.epilog.1910, %sw.epilog.1910
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1913

sw.default.1912:                                  ; preds = %sw.epilog.1910
  br label %sw.epilog.1913

sw.epilog.1913:                                   ; preds = %sw.default.1912, %sw.bb.1911
  %1171 = load i32, i32* %result1902, align 4
  store i32 %1171, i32* %tmp1914
  %1172 = load i32, i32* %tmp1914
  %tobool1915 = icmp ne i32 %1172, 0
  br i1 %tobool1915, label %if.end.1928, label %if.then.1916

if.then.1916:                                     ; preds = %sw.epilog.1913
  %1173 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1917 = icmp ne i32 %1173, 0
  br i1 %tobool1917, label %if.end.1927, label %if.then.1918

if.then.1918:                                     ; preds = %if.then.1916
  %1174 = load i8*, i8** %next_instr, align 8
  %1175 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1919 = ptrtoint i8* %1174 to i64
  %sub.ptr.rhs.cast1920 = ptrtoint i8* %1175 to i64
  %sub.ptr.sub1921 = sub i64 %sub.ptr.lhs.cast1919, %sub.ptr.rhs.cast1920
  %conv1922 = trunc i64 %sub.ptr.sub1921 to i32
  %1176 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1923 = getelementptr inbounds %struct._frame, %struct._frame* %1176, i32 0, i32 13
  store i32 %conv1922, i32* %f_lasti1923, align 4
  %1177 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1924 = getelementptr i8, i8* %1177, i32 1
  store i8* %incdec.ptr1924, i8** %next_instr, align 8
  %1178 = load i8, i8* %1177, align 1
  %idxprom1925 = zext i8 %1178 to i64
  %arrayidx1926 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1925
  %1179 = load i8*, i8** %arrayidx1926, align 8
  br label %indirectgoto

if.end.1927:                                      ; preds = %if.then.1916
  br label %fast_next_opcode

if.end.1928:                                      ; preds = %sw.epilog.1913
  br label %for.cond

TARGET_INPLACE_TRUE_DIVIDE:                       ; preds = %indirectgoto
  store i32 29, i32* %opcode, align 4
  br label %sw.bb.1929

sw.bb.1929:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_TRUE_DIVIDE
  %1180 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr1932 = getelementptr %struct._object*, %struct._object** %1180, i32 -1
  store %struct._object** %incdec.ptr1932, %struct._object*** %stack_pointer, align 8
  %1181 = load %struct._object*, %struct._object** %incdec.ptr1932, align 8
  store %struct._object* %1181, %struct._object** %divisor1931, align 8
  %1182 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1935 = getelementptr %struct._object*, %struct._object** %1182, i64 -1
  %1183 = load %struct._object*, %struct._object** %arrayidx1935, align 8
  store %struct._object* %1183, %struct._object** %dividend1934, align 8
  %1184 = load %struct._object*, %struct._object** %dividend1934, align 8
  %1185 = load %struct._object*, %struct._object** %divisor1931, align 8
  %call1938 = call %struct._object* @PyNumber_InPlaceTrueDivide(%struct._object* %1184, %struct._object* %1185)
  store %struct._object* %call1938, %struct._object** %quotient1937, align 8
  br label %do.body.1939

do.body.1939:                                     ; preds = %sw.bb.1929
  %1186 = load %struct._object*, %struct._object** %dividend1934, align 8
  store %struct._object* %1186, %struct._object** %_py_decref_tmp1941, align 8
  %1187 = load %struct._object*, %struct._object** %_py_decref_tmp1941, align 8
  %ob_refcnt1942 = getelementptr inbounds %struct._object, %struct._object* %1187, i32 0, i32 0
  %1188 = load i64, i64* %ob_refcnt1942, align 8
  %dec1943 = add i64 %1188, -1
  store i64 %dec1943, i64* %ob_refcnt1942, align 8
  %cmp1944 = icmp ne i64 %dec1943, 0
  br i1 %cmp1944, label %if.then.1946, label %if.else.1947

if.then.1946:                                     ; preds = %do.body.1939
  br label %if.end.1950

if.else.1947:                                     ; preds = %do.body.1939
  %1189 = load %struct._object*, %struct._object** %_py_decref_tmp1941, align 8
  %ob_type1948 = getelementptr inbounds %struct._object, %struct._object* %1189, i32 0, i32 1
  %1190 = load %struct._typeobject*, %struct._typeobject** %ob_type1948, align 8
  %tp_dealloc1949 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1190, i32 0, i32 4
  %1191 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1949, align 8
  %1192 = load %struct._object*, %struct._object** %_py_decref_tmp1941, align 8
  call void %1191(%struct._object* %1192)
  br label %if.end.1950

if.end.1950:                                      ; preds = %if.else.1947, %if.then.1946
  br label %do.end.1951

do.end.1951:                                      ; preds = %if.end.1950
  br label %do.body.1952

do.body.1952:                                     ; preds = %do.end.1951
  %1193 = load %struct._object*, %struct._object** %divisor1931, align 8
  store %struct._object* %1193, %struct._object** %_py_decref_tmp1954, align 8
  %1194 = load %struct._object*, %struct._object** %_py_decref_tmp1954, align 8
  %ob_refcnt1955 = getelementptr inbounds %struct._object, %struct._object* %1194, i32 0, i32 0
  %1195 = load i64, i64* %ob_refcnt1955, align 8
  %dec1956 = add i64 %1195, -1
  store i64 %dec1956, i64* %ob_refcnt1955, align 8
  %cmp1957 = icmp ne i64 %dec1956, 0
  br i1 %cmp1957, label %if.then.1959, label %if.else.1960

if.then.1959:                                     ; preds = %do.body.1952
  br label %if.end.1963

if.else.1960:                                     ; preds = %do.body.1952
  %1196 = load %struct._object*, %struct._object** %_py_decref_tmp1954, align 8
  %ob_type1961 = getelementptr inbounds %struct._object, %struct._object* %1196, i32 0, i32 1
  %1197 = load %struct._typeobject*, %struct._typeobject** %ob_type1961, align 8
  %tp_dealloc1962 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1197, i32 0, i32 4
  %1198 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc1962, align 8
  %1199 = load %struct._object*, %struct._object** %_py_decref_tmp1954, align 8
  call void %1198(%struct._object* %1199)
  br label %if.end.1963

if.end.1963:                                      ; preds = %if.else.1960, %if.then.1959
  br label %do.end.1964

do.end.1964:                                      ; preds = %if.end.1963
  %1200 = load %struct._object*, %struct._object** %quotient1937, align 8
  %1201 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx1965 = getelementptr %struct._object*, %struct._object** %1201, i64 -1
  store %struct._object* %1200, %struct._object** %arrayidx1965, align 8
  %1202 = load %struct._object*, %struct._object** %quotient1937, align 8
  %cmp1966 = icmp eq %struct._object* %1202, null
  br i1 %cmp1966, label %if.then.1968, label %if.end.1969

if.then.1968:                                     ; preds = %do.end.1964
  br label %error

if.end.1969:                                      ; preds = %do.end.1964
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val1971, align 8
  %1203 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1971, align 8
  %_value1976 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1203, i32 0, i32 0
  store i32* %_value1976, i32** %volatile_data1975, align 8
  store i32 0, i32* %order1978, align 4
  %1204 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val1971, align 8
  %1205 = bitcast %struct._Py_atomic_int* %1204 to i8*
  %1206 = load i32, i32* %order1978, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1205, i32 %1206)
  %1207 = load i32, i32* %order1978, align 4
  switch i32 %1207, label %sw.default.1980 [
    i32 2, label %sw.bb.1979
    i32 3, label %sw.bb.1979
    i32 4, label %sw.bb.1979
  ]

sw.bb.1979:                                       ; preds = %if.end.1969, %if.end.1969, %if.end.1969
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.1981

sw.default.1980:                                  ; preds = %if.end.1969
  br label %sw.epilog.1981

sw.epilog.1981:                                   ; preds = %sw.default.1980, %sw.bb.1979
  %1208 = load i32*, i32** %volatile_data1975, align 8
  %1209 = load volatile i32, i32* %1208, align 4
  store i32 %1209, i32* %result1973, align 4
  %1210 = load i32, i32* %order1978, align 4
  switch i32 %1210, label %sw.default.1983 [
    i32 1, label %sw.bb.1982
    i32 3, label %sw.bb.1982
    i32 4, label %sw.bb.1982
  ]

sw.bb.1982:                                       ; preds = %sw.epilog.1981, %sw.epilog.1981, %sw.epilog.1981
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.1984

sw.default.1983:                                  ; preds = %sw.epilog.1981
  br label %sw.epilog.1984

sw.epilog.1984:                                   ; preds = %sw.default.1983, %sw.bb.1982
  %1211 = load i32, i32* %result1973, align 4
  store i32 %1211, i32* %tmp1985
  %1212 = load i32, i32* %tmp1985
  %tobool1986 = icmp ne i32 %1212, 0
  br i1 %tobool1986, label %if.end.1999, label %if.then.1987

if.then.1987:                                     ; preds = %sw.epilog.1984
  %1213 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool1988 = icmp ne i32 %1213, 0
  br i1 %tobool1988, label %if.end.1998, label %if.then.1989

if.then.1989:                                     ; preds = %if.then.1987
  %1214 = load i8*, i8** %next_instr, align 8
  %1215 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast1990 = ptrtoint i8* %1214 to i64
  %sub.ptr.rhs.cast1991 = ptrtoint i8* %1215 to i64
  %sub.ptr.sub1992 = sub i64 %sub.ptr.lhs.cast1990, %sub.ptr.rhs.cast1991
  %conv1993 = trunc i64 %sub.ptr.sub1992 to i32
  %1216 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti1994 = getelementptr inbounds %struct._frame, %struct._frame* %1216, i32 0, i32 13
  store i32 %conv1993, i32* %f_lasti1994, align 4
  %1217 = load i8*, i8** %next_instr, align 8
  %incdec.ptr1995 = getelementptr i8, i8* %1217, i32 1
  store i8* %incdec.ptr1995, i8** %next_instr, align 8
  %1218 = load i8, i8* %1217, align 1
  %idxprom1996 = zext i8 %1218 to i64
  %arrayidx1997 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom1996
  %1219 = load i8*, i8** %arrayidx1997, align 8
  br label %indirectgoto

if.end.1998:                                      ; preds = %if.then.1987
  br label %fast_next_opcode

if.end.1999:                                      ; preds = %sw.epilog.1984
  br label %for.cond

TARGET_INPLACE_FLOOR_DIVIDE:                      ; preds = %indirectgoto
  store i32 28, i32* %opcode, align 4
  br label %sw.bb.2000

sw.bb.2000:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_FLOOR_DIVIDE
  %1220 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2003 = getelementptr %struct._object*, %struct._object** %1220, i32 -1
  store %struct._object** %incdec.ptr2003, %struct._object*** %stack_pointer, align 8
  %1221 = load %struct._object*, %struct._object** %incdec.ptr2003, align 8
  store %struct._object* %1221, %struct._object** %divisor2002, align 8
  %1222 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2006 = getelementptr %struct._object*, %struct._object** %1222, i64 -1
  %1223 = load %struct._object*, %struct._object** %arrayidx2006, align 8
  store %struct._object* %1223, %struct._object** %dividend2005, align 8
  %1224 = load %struct._object*, %struct._object** %dividend2005, align 8
  %1225 = load %struct._object*, %struct._object** %divisor2002, align 8
  %call2009 = call %struct._object* @PyNumber_InPlaceFloorDivide(%struct._object* %1224, %struct._object* %1225)
  store %struct._object* %call2009, %struct._object** %quotient2008, align 8
  br label %do.body.2010

do.body.2010:                                     ; preds = %sw.bb.2000
  %1226 = load %struct._object*, %struct._object** %dividend2005, align 8
  store %struct._object* %1226, %struct._object** %_py_decref_tmp2012, align 8
  %1227 = load %struct._object*, %struct._object** %_py_decref_tmp2012, align 8
  %ob_refcnt2013 = getelementptr inbounds %struct._object, %struct._object* %1227, i32 0, i32 0
  %1228 = load i64, i64* %ob_refcnt2013, align 8
  %dec2014 = add i64 %1228, -1
  store i64 %dec2014, i64* %ob_refcnt2013, align 8
  %cmp2015 = icmp ne i64 %dec2014, 0
  br i1 %cmp2015, label %if.then.2017, label %if.else.2018

if.then.2017:                                     ; preds = %do.body.2010
  br label %if.end.2021

if.else.2018:                                     ; preds = %do.body.2010
  %1229 = load %struct._object*, %struct._object** %_py_decref_tmp2012, align 8
  %ob_type2019 = getelementptr inbounds %struct._object, %struct._object* %1229, i32 0, i32 1
  %1230 = load %struct._typeobject*, %struct._typeobject** %ob_type2019, align 8
  %tp_dealloc2020 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1230, i32 0, i32 4
  %1231 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2020, align 8
  %1232 = load %struct._object*, %struct._object** %_py_decref_tmp2012, align 8
  call void %1231(%struct._object* %1232)
  br label %if.end.2021

if.end.2021:                                      ; preds = %if.else.2018, %if.then.2017
  br label %do.end.2022

do.end.2022:                                      ; preds = %if.end.2021
  br label %do.body.2023

do.body.2023:                                     ; preds = %do.end.2022
  %1233 = load %struct._object*, %struct._object** %divisor2002, align 8
  store %struct._object* %1233, %struct._object** %_py_decref_tmp2025, align 8
  %1234 = load %struct._object*, %struct._object** %_py_decref_tmp2025, align 8
  %ob_refcnt2026 = getelementptr inbounds %struct._object, %struct._object* %1234, i32 0, i32 0
  %1235 = load i64, i64* %ob_refcnt2026, align 8
  %dec2027 = add i64 %1235, -1
  store i64 %dec2027, i64* %ob_refcnt2026, align 8
  %cmp2028 = icmp ne i64 %dec2027, 0
  br i1 %cmp2028, label %if.then.2030, label %if.else.2031

if.then.2030:                                     ; preds = %do.body.2023
  br label %if.end.2034

if.else.2031:                                     ; preds = %do.body.2023
  %1236 = load %struct._object*, %struct._object** %_py_decref_tmp2025, align 8
  %ob_type2032 = getelementptr inbounds %struct._object, %struct._object* %1236, i32 0, i32 1
  %1237 = load %struct._typeobject*, %struct._typeobject** %ob_type2032, align 8
  %tp_dealloc2033 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1237, i32 0, i32 4
  %1238 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2033, align 8
  %1239 = load %struct._object*, %struct._object** %_py_decref_tmp2025, align 8
  call void %1238(%struct._object* %1239)
  br label %if.end.2034

if.end.2034:                                      ; preds = %if.else.2031, %if.then.2030
  br label %do.end.2035

do.end.2035:                                      ; preds = %if.end.2034
  %1240 = load %struct._object*, %struct._object** %quotient2008, align 8
  %1241 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2036 = getelementptr %struct._object*, %struct._object** %1241, i64 -1
  store %struct._object* %1240, %struct._object** %arrayidx2036, align 8
  %1242 = load %struct._object*, %struct._object** %quotient2008, align 8
  %cmp2037 = icmp eq %struct._object* %1242, null
  br i1 %cmp2037, label %if.then.2039, label %if.end.2040

if.then.2039:                                     ; preds = %do.end.2035
  br label %error

if.end.2040:                                      ; preds = %do.end.2035
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2042, align 8
  %1243 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2042, align 8
  %_value2047 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1243, i32 0, i32 0
  store i32* %_value2047, i32** %volatile_data2046, align 8
  store i32 0, i32* %order2049, align 4
  %1244 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2042, align 8
  %1245 = bitcast %struct._Py_atomic_int* %1244 to i8*
  %1246 = load i32, i32* %order2049, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1245, i32 %1246)
  %1247 = load i32, i32* %order2049, align 4
  switch i32 %1247, label %sw.default.2051 [
    i32 2, label %sw.bb.2050
    i32 3, label %sw.bb.2050
    i32 4, label %sw.bb.2050
  ]

sw.bb.2050:                                       ; preds = %if.end.2040, %if.end.2040, %if.end.2040
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2052

sw.default.2051:                                  ; preds = %if.end.2040
  br label %sw.epilog.2052

sw.epilog.2052:                                   ; preds = %sw.default.2051, %sw.bb.2050
  %1248 = load i32*, i32** %volatile_data2046, align 8
  %1249 = load volatile i32, i32* %1248, align 4
  store i32 %1249, i32* %result2044, align 4
  %1250 = load i32, i32* %order2049, align 4
  switch i32 %1250, label %sw.default.2054 [
    i32 1, label %sw.bb.2053
    i32 3, label %sw.bb.2053
    i32 4, label %sw.bb.2053
  ]

sw.bb.2053:                                       ; preds = %sw.epilog.2052, %sw.epilog.2052, %sw.epilog.2052
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2055

sw.default.2054:                                  ; preds = %sw.epilog.2052
  br label %sw.epilog.2055

sw.epilog.2055:                                   ; preds = %sw.default.2054, %sw.bb.2053
  %1251 = load i32, i32* %result2044, align 4
  store i32 %1251, i32* %tmp2056
  %1252 = load i32, i32* %tmp2056
  %tobool2057 = icmp ne i32 %1252, 0
  br i1 %tobool2057, label %if.end.2070, label %if.then.2058

if.then.2058:                                     ; preds = %sw.epilog.2055
  %1253 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2059 = icmp ne i32 %1253, 0
  br i1 %tobool2059, label %if.end.2069, label %if.then.2060

if.then.2060:                                     ; preds = %if.then.2058
  %1254 = load i8*, i8** %next_instr, align 8
  %1255 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2061 = ptrtoint i8* %1254 to i64
  %sub.ptr.rhs.cast2062 = ptrtoint i8* %1255 to i64
  %sub.ptr.sub2063 = sub i64 %sub.ptr.lhs.cast2061, %sub.ptr.rhs.cast2062
  %conv2064 = trunc i64 %sub.ptr.sub2063 to i32
  %1256 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2065 = getelementptr inbounds %struct._frame, %struct._frame* %1256, i32 0, i32 13
  store i32 %conv2064, i32* %f_lasti2065, align 4
  %1257 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2066 = getelementptr i8, i8* %1257, i32 1
  store i8* %incdec.ptr2066, i8** %next_instr, align 8
  %1258 = load i8, i8* %1257, align 1
  %idxprom2067 = zext i8 %1258 to i64
  %arrayidx2068 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2067
  %1259 = load i8*, i8** %arrayidx2068, align 8
  br label %indirectgoto

if.end.2069:                                      ; preds = %if.then.2058
  br label %fast_next_opcode

if.end.2070:                                      ; preds = %sw.epilog.2055
  br label %for.cond

TARGET_INPLACE_MODULO:                            ; preds = %indirectgoto
  store i32 59, i32* %opcode, align 4
  br label %sw.bb.2071

sw.bb.2071:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_MODULO
  %1260 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2074 = getelementptr %struct._object*, %struct._object** %1260, i32 -1
  store %struct._object** %incdec.ptr2074, %struct._object*** %stack_pointer, align 8
  %1261 = load %struct._object*, %struct._object** %incdec.ptr2074, align 8
  store %struct._object* %1261, %struct._object** %right2073, align 8
  %1262 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2077 = getelementptr %struct._object*, %struct._object** %1262, i64 -1
  %1263 = load %struct._object*, %struct._object** %arrayidx2077, align 8
  store %struct._object* %1263, %struct._object** %left2076, align 8
  %1264 = load %struct._object*, %struct._object** %left2076, align 8
  %1265 = load %struct._object*, %struct._object** %right2073, align 8
  %call2079 = call %struct._object* @PyNumber_InPlaceRemainder(%struct._object* %1264, %struct._object* %1265)
  store %struct._object* %call2079, %struct._object** %mod, align 8
  br label %do.body.2080

do.body.2080:                                     ; preds = %sw.bb.2071
  %1266 = load %struct._object*, %struct._object** %left2076, align 8
  store %struct._object* %1266, %struct._object** %_py_decref_tmp2082, align 8
  %1267 = load %struct._object*, %struct._object** %_py_decref_tmp2082, align 8
  %ob_refcnt2083 = getelementptr inbounds %struct._object, %struct._object* %1267, i32 0, i32 0
  %1268 = load i64, i64* %ob_refcnt2083, align 8
  %dec2084 = add i64 %1268, -1
  store i64 %dec2084, i64* %ob_refcnt2083, align 8
  %cmp2085 = icmp ne i64 %dec2084, 0
  br i1 %cmp2085, label %if.then.2087, label %if.else.2088

if.then.2087:                                     ; preds = %do.body.2080
  br label %if.end.2091

if.else.2088:                                     ; preds = %do.body.2080
  %1269 = load %struct._object*, %struct._object** %_py_decref_tmp2082, align 8
  %ob_type2089 = getelementptr inbounds %struct._object, %struct._object* %1269, i32 0, i32 1
  %1270 = load %struct._typeobject*, %struct._typeobject** %ob_type2089, align 8
  %tp_dealloc2090 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1270, i32 0, i32 4
  %1271 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2090, align 8
  %1272 = load %struct._object*, %struct._object** %_py_decref_tmp2082, align 8
  call void %1271(%struct._object* %1272)
  br label %if.end.2091

if.end.2091:                                      ; preds = %if.else.2088, %if.then.2087
  br label %do.end.2092

do.end.2092:                                      ; preds = %if.end.2091
  br label %do.body.2093

do.body.2093:                                     ; preds = %do.end.2092
  %1273 = load %struct._object*, %struct._object** %right2073, align 8
  store %struct._object* %1273, %struct._object** %_py_decref_tmp2095, align 8
  %1274 = load %struct._object*, %struct._object** %_py_decref_tmp2095, align 8
  %ob_refcnt2096 = getelementptr inbounds %struct._object, %struct._object* %1274, i32 0, i32 0
  %1275 = load i64, i64* %ob_refcnt2096, align 8
  %dec2097 = add i64 %1275, -1
  store i64 %dec2097, i64* %ob_refcnt2096, align 8
  %cmp2098 = icmp ne i64 %dec2097, 0
  br i1 %cmp2098, label %if.then.2100, label %if.else.2101

if.then.2100:                                     ; preds = %do.body.2093
  br label %if.end.2104

if.else.2101:                                     ; preds = %do.body.2093
  %1276 = load %struct._object*, %struct._object** %_py_decref_tmp2095, align 8
  %ob_type2102 = getelementptr inbounds %struct._object, %struct._object* %1276, i32 0, i32 1
  %1277 = load %struct._typeobject*, %struct._typeobject** %ob_type2102, align 8
  %tp_dealloc2103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1277, i32 0, i32 4
  %1278 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2103, align 8
  %1279 = load %struct._object*, %struct._object** %_py_decref_tmp2095, align 8
  call void %1278(%struct._object* %1279)
  br label %if.end.2104

if.end.2104:                                      ; preds = %if.else.2101, %if.then.2100
  br label %do.end.2105

do.end.2105:                                      ; preds = %if.end.2104
  %1280 = load %struct._object*, %struct._object** %mod, align 8
  %1281 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2106 = getelementptr %struct._object*, %struct._object** %1281, i64 -1
  store %struct._object* %1280, %struct._object** %arrayidx2106, align 8
  %1282 = load %struct._object*, %struct._object** %mod, align 8
  %cmp2107 = icmp eq %struct._object* %1282, null
  br i1 %cmp2107, label %if.then.2109, label %if.end.2110

if.then.2109:                                     ; preds = %do.end.2105
  br label %error

if.end.2110:                                      ; preds = %do.end.2105
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2112, align 8
  %1283 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2112, align 8
  %_value2117 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1283, i32 0, i32 0
  store i32* %_value2117, i32** %volatile_data2116, align 8
  store i32 0, i32* %order2119, align 4
  %1284 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2112, align 8
  %1285 = bitcast %struct._Py_atomic_int* %1284 to i8*
  %1286 = load i32, i32* %order2119, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1285, i32 %1286)
  %1287 = load i32, i32* %order2119, align 4
  switch i32 %1287, label %sw.default.2121 [
    i32 2, label %sw.bb.2120
    i32 3, label %sw.bb.2120
    i32 4, label %sw.bb.2120
  ]

sw.bb.2120:                                       ; preds = %if.end.2110, %if.end.2110, %if.end.2110
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2122

sw.default.2121:                                  ; preds = %if.end.2110
  br label %sw.epilog.2122

sw.epilog.2122:                                   ; preds = %sw.default.2121, %sw.bb.2120
  %1288 = load i32*, i32** %volatile_data2116, align 8
  %1289 = load volatile i32, i32* %1288, align 4
  store i32 %1289, i32* %result2114, align 4
  %1290 = load i32, i32* %order2119, align 4
  switch i32 %1290, label %sw.default.2124 [
    i32 1, label %sw.bb.2123
    i32 3, label %sw.bb.2123
    i32 4, label %sw.bb.2123
  ]

sw.bb.2123:                                       ; preds = %sw.epilog.2122, %sw.epilog.2122, %sw.epilog.2122
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2125

sw.default.2124:                                  ; preds = %sw.epilog.2122
  br label %sw.epilog.2125

sw.epilog.2125:                                   ; preds = %sw.default.2124, %sw.bb.2123
  %1291 = load i32, i32* %result2114, align 4
  store i32 %1291, i32* %tmp2126
  %1292 = load i32, i32* %tmp2126
  %tobool2127 = icmp ne i32 %1292, 0
  br i1 %tobool2127, label %if.end.2140, label %if.then.2128

if.then.2128:                                     ; preds = %sw.epilog.2125
  %1293 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2129 = icmp ne i32 %1293, 0
  br i1 %tobool2129, label %if.end.2139, label %if.then.2130

if.then.2130:                                     ; preds = %if.then.2128
  %1294 = load i8*, i8** %next_instr, align 8
  %1295 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2131 = ptrtoint i8* %1294 to i64
  %sub.ptr.rhs.cast2132 = ptrtoint i8* %1295 to i64
  %sub.ptr.sub2133 = sub i64 %sub.ptr.lhs.cast2131, %sub.ptr.rhs.cast2132
  %conv2134 = trunc i64 %sub.ptr.sub2133 to i32
  %1296 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2135 = getelementptr inbounds %struct._frame, %struct._frame* %1296, i32 0, i32 13
  store i32 %conv2134, i32* %f_lasti2135, align 4
  %1297 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2136 = getelementptr i8, i8* %1297, i32 1
  store i8* %incdec.ptr2136, i8** %next_instr, align 8
  %1298 = load i8, i8* %1297, align 1
  %idxprom2137 = zext i8 %1298 to i64
  %arrayidx2138 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2137
  %1299 = load i8*, i8** %arrayidx2138, align 8
  br label %indirectgoto

if.end.2139:                                      ; preds = %if.then.2128
  br label %fast_next_opcode

if.end.2140:                                      ; preds = %sw.epilog.2125
  br label %for.cond

TARGET_INPLACE_ADD:                               ; preds = %indirectgoto
  store i32 55, i32* %opcode, align 4
  br label %sw.bb.2141

sw.bb.2141:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_ADD
  %1300 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2144 = getelementptr %struct._object*, %struct._object** %1300, i32 -1
  store %struct._object** %incdec.ptr2144, %struct._object*** %stack_pointer, align 8
  %1301 = load %struct._object*, %struct._object** %incdec.ptr2144, align 8
  store %struct._object* %1301, %struct._object** %right2143, align 8
  %1302 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2147 = getelementptr %struct._object*, %struct._object** %1302, i64 -1
  %1303 = load %struct._object*, %struct._object** %arrayidx2147, align 8
  store %struct._object* %1303, %struct._object** %left2146, align 8
  %1304 = load %struct._object*, %struct._object** %left2146, align 8
  %ob_type2150 = getelementptr inbounds %struct._object, %struct._object* %1304, i32 0, i32 1
  %1305 = load %struct._typeobject*, %struct._typeobject** %ob_type2150, align 8
  %cmp2151 = icmp eq %struct._typeobject* %1305, @PyUnicode_Type
  br i1 %cmp2151, label %land.lhs.true.2153, label %if.else.2159

land.lhs.true.2153:                               ; preds = %sw.bb.2141
  %1306 = load %struct._object*, %struct._object** %right2143, align 8
  %ob_type2154 = getelementptr inbounds %struct._object, %struct._object* %1306, i32 0, i32 1
  %1307 = load %struct._typeobject*, %struct._typeobject** %ob_type2154, align 8
  %cmp2155 = icmp eq %struct._typeobject* %1307, @PyUnicode_Type
  br i1 %cmp2155, label %if.then.2157, label %if.else.2159

if.then.2157:                                     ; preds = %land.lhs.true.2153
  %1308 = load %struct._object*, %struct._object** %left2146, align 8
  %1309 = load %struct._object*, %struct._object** %right2143, align 8
  %1310 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %1311 = load i8*, i8** %next_instr, align 8
  %call2158 = call %struct._object* @unicode_concatenate(%struct._object* %1308, %struct._object* %1309, %struct._frame* %1310, i8* %1311)
  store %struct._object* %call2158, %struct._object** %sum2149, align 8
  br label %if.end.2174

if.else.2159:                                     ; preds = %land.lhs.true.2153, %sw.bb.2141
  %1312 = load %struct._object*, %struct._object** %left2146, align 8
  %1313 = load %struct._object*, %struct._object** %right2143, align 8
  %call2160 = call %struct._object* @PyNumber_InPlaceAdd(%struct._object* %1312, %struct._object* %1313)
  store %struct._object* %call2160, %struct._object** %sum2149, align 8
  br label %do.body.2161

do.body.2161:                                     ; preds = %if.else.2159
  %1314 = load %struct._object*, %struct._object** %left2146, align 8
  store %struct._object* %1314, %struct._object** %_py_decref_tmp2163, align 8
  %1315 = load %struct._object*, %struct._object** %_py_decref_tmp2163, align 8
  %ob_refcnt2164 = getelementptr inbounds %struct._object, %struct._object* %1315, i32 0, i32 0
  %1316 = load i64, i64* %ob_refcnt2164, align 8
  %dec2165 = add i64 %1316, -1
  store i64 %dec2165, i64* %ob_refcnt2164, align 8
  %cmp2166 = icmp ne i64 %dec2165, 0
  br i1 %cmp2166, label %if.then.2168, label %if.else.2169

if.then.2168:                                     ; preds = %do.body.2161
  br label %if.end.2172

if.else.2169:                                     ; preds = %do.body.2161
  %1317 = load %struct._object*, %struct._object** %_py_decref_tmp2163, align 8
  %ob_type2170 = getelementptr inbounds %struct._object, %struct._object* %1317, i32 0, i32 1
  %1318 = load %struct._typeobject*, %struct._typeobject** %ob_type2170, align 8
  %tp_dealloc2171 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1318, i32 0, i32 4
  %1319 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2171, align 8
  %1320 = load %struct._object*, %struct._object** %_py_decref_tmp2163, align 8
  call void %1319(%struct._object* %1320)
  br label %if.end.2172

if.end.2172:                                      ; preds = %if.else.2169, %if.then.2168
  br label %do.end.2173

do.end.2173:                                      ; preds = %if.end.2172
  br label %if.end.2174

if.end.2174:                                      ; preds = %do.end.2173, %if.then.2157
  br label %do.body.2175

do.body.2175:                                     ; preds = %if.end.2174
  %1321 = load %struct._object*, %struct._object** %right2143, align 8
  store %struct._object* %1321, %struct._object** %_py_decref_tmp2177, align 8
  %1322 = load %struct._object*, %struct._object** %_py_decref_tmp2177, align 8
  %ob_refcnt2178 = getelementptr inbounds %struct._object, %struct._object* %1322, i32 0, i32 0
  %1323 = load i64, i64* %ob_refcnt2178, align 8
  %dec2179 = add i64 %1323, -1
  store i64 %dec2179, i64* %ob_refcnt2178, align 8
  %cmp2180 = icmp ne i64 %dec2179, 0
  br i1 %cmp2180, label %if.then.2182, label %if.else.2183

if.then.2182:                                     ; preds = %do.body.2175
  br label %if.end.2186

if.else.2183:                                     ; preds = %do.body.2175
  %1324 = load %struct._object*, %struct._object** %_py_decref_tmp2177, align 8
  %ob_type2184 = getelementptr inbounds %struct._object, %struct._object* %1324, i32 0, i32 1
  %1325 = load %struct._typeobject*, %struct._typeobject** %ob_type2184, align 8
  %tp_dealloc2185 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1325, i32 0, i32 4
  %1326 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2185, align 8
  %1327 = load %struct._object*, %struct._object** %_py_decref_tmp2177, align 8
  call void %1326(%struct._object* %1327)
  br label %if.end.2186

if.end.2186:                                      ; preds = %if.else.2183, %if.then.2182
  br label %do.end.2187

do.end.2187:                                      ; preds = %if.end.2186
  %1328 = load %struct._object*, %struct._object** %sum2149, align 8
  %1329 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2188 = getelementptr %struct._object*, %struct._object** %1329, i64 -1
  store %struct._object* %1328, %struct._object** %arrayidx2188, align 8
  %1330 = load %struct._object*, %struct._object** %sum2149, align 8
  %cmp2189 = icmp eq %struct._object* %1330, null
  br i1 %cmp2189, label %if.then.2191, label %if.end.2192

if.then.2191:                                     ; preds = %do.end.2187
  br label %error

if.end.2192:                                      ; preds = %do.end.2187
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2194, align 8
  %1331 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2194, align 8
  %_value2199 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1331, i32 0, i32 0
  store i32* %_value2199, i32** %volatile_data2198, align 8
  store i32 0, i32* %order2201, align 4
  %1332 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2194, align 8
  %1333 = bitcast %struct._Py_atomic_int* %1332 to i8*
  %1334 = load i32, i32* %order2201, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1333, i32 %1334)
  %1335 = load i32, i32* %order2201, align 4
  switch i32 %1335, label %sw.default.2203 [
    i32 2, label %sw.bb.2202
    i32 3, label %sw.bb.2202
    i32 4, label %sw.bb.2202
  ]

sw.bb.2202:                                       ; preds = %if.end.2192, %if.end.2192, %if.end.2192
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2204

sw.default.2203:                                  ; preds = %if.end.2192
  br label %sw.epilog.2204

sw.epilog.2204:                                   ; preds = %sw.default.2203, %sw.bb.2202
  %1336 = load i32*, i32** %volatile_data2198, align 8
  %1337 = load volatile i32, i32* %1336, align 4
  store i32 %1337, i32* %result2196, align 4
  %1338 = load i32, i32* %order2201, align 4
  switch i32 %1338, label %sw.default.2206 [
    i32 1, label %sw.bb.2205
    i32 3, label %sw.bb.2205
    i32 4, label %sw.bb.2205
  ]

sw.bb.2205:                                       ; preds = %sw.epilog.2204, %sw.epilog.2204, %sw.epilog.2204
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2207

sw.default.2206:                                  ; preds = %sw.epilog.2204
  br label %sw.epilog.2207

sw.epilog.2207:                                   ; preds = %sw.default.2206, %sw.bb.2205
  %1339 = load i32, i32* %result2196, align 4
  store i32 %1339, i32* %tmp2208
  %1340 = load i32, i32* %tmp2208
  %tobool2209 = icmp ne i32 %1340, 0
  br i1 %tobool2209, label %if.end.2222, label %if.then.2210

if.then.2210:                                     ; preds = %sw.epilog.2207
  %1341 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2211 = icmp ne i32 %1341, 0
  br i1 %tobool2211, label %if.end.2221, label %if.then.2212

if.then.2212:                                     ; preds = %if.then.2210
  %1342 = load i8*, i8** %next_instr, align 8
  %1343 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2213 = ptrtoint i8* %1342 to i64
  %sub.ptr.rhs.cast2214 = ptrtoint i8* %1343 to i64
  %sub.ptr.sub2215 = sub i64 %sub.ptr.lhs.cast2213, %sub.ptr.rhs.cast2214
  %conv2216 = trunc i64 %sub.ptr.sub2215 to i32
  %1344 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2217 = getelementptr inbounds %struct._frame, %struct._frame* %1344, i32 0, i32 13
  store i32 %conv2216, i32* %f_lasti2217, align 4
  %1345 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2218 = getelementptr i8, i8* %1345, i32 1
  store i8* %incdec.ptr2218, i8** %next_instr, align 8
  %1346 = load i8, i8* %1345, align 1
  %idxprom2219 = zext i8 %1346 to i64
  %arrayidx2220 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2219
  %1347 = load i8*, i8** %arrayidx2220, align 8
  br label %indirectgoto

if.end.2221:                                      ; preds = %if.then.2210
  br label %fast_next_opcode

if.end.2222:                                      ; preds = %sw.epilog.2207
  br label %for.cond

TARGET_INPLACE_SUBTRACT:                          ; preds = %indirectgoto
  store i32 56, i32* %opcode, align 4
  br label %sw.bb.2223

sw.bb.2223:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_SUBTRACT
  %1348 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2226 = getelementptr %struct._object*, %struct._object** %1348, i32 -1
  store %struct._object** %incdec.ptr2226, %struct._object*** %stack_pointer, align 8
  %1349 = load %struct._object*, %struct._object** %incdec.ptr2226, align 8
  store %struct._object* %1349, %struct._object** %right2225, align 8
  %1350 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2229 = getelementptr %struct._object*, %struct._object** %1350, i64 -1
  %1351 = load %struct._object*, %struct._object** %arrayidx2229, align 8
  store %struct._object* %1351, %struct._object** %left2228, align 8
  %1352 = load %struct._object*, %struct._object** %left2228, align 8
  %1353 = load %struct._object*, %struct._object** %right2225, align 8
  %call2232 = call %struct._object* @PyNumber_InPlaceSubtract(%struct._object* %1352, %struct._object* %1353)
  store %struct._object* %call2232, %struct._object** %diff2231, align 8
  br label %do.body.2233

do.body.2233:                                     ; preds = %sw.bb.2223
  %1354 = load %struct._object*, %struct._object** %left2228, align 8
  store %struct._object* %1354, %struct._object** %_py_decref_tmp2235, align 8
  %1355 = load %struct._object*, %struct._object** %_py_decref_tmp2235, align 8
  %ob_refcnt2236 = getelementptr inbounds %struct._object, %struct._object* %1355, i32 0, i32 0
  %1356 = load i64, i64* %ob_refcnt2236, align 8
  %dec2237 = add i64 %1356, -1
  store i64 %dec2237, i64* %ob_refcnt2236, align 8
  %cmp2238 = icmp ne i64 %dec2237, 0
  br i1 %cmp2238, label %if.then.2240, label %if.else.2241

if.then.2240:                                     ; preds = %do.body.2233
  br label %if.end.2244

if.else.2241:                                     ; preds = %do.body.2233
  %1357 = load %struct._object*, %struct._object** %_py_decref_tmp2235, align 8
  %ob_type2242 = getelementptr inbounds %struct._object, %struct._object* %1357, i32 0, i32 1
  %1358 = load %struct._typeobject*, %struct._typeobject** %ob_type2242, align 8
  %tp_dealloc2243 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1358, i32 0, i32 4
  %1359 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2243, align 8
  %1360 = load %struct._object*, %struct._object** %_py_decref_tmp2235, align 8
  call void %1359(%struct._object* %1360)
  br label %if.end.2244

if.end.2244:                                      ; preds = %if.else.2241, %if.then.2240
  br label %do.end.2245

do.end.2245:                                      ; preds = %if.end.2244
  br label %do.body.2246

do.body.2246:                                     ; preds = %do.end.2245
  %1361 = load %struct._object*, %struct._object** %right2225, align 8
  store %struct._object* %1361, %struct._object** %_py_decref_tmp2248, align 8
  %1362 = load %struct._object*, %struct._object** %_py_decref_tmp2248, align 8
  %ob_refcnt2249 = getelementptr inbounds %struct._object, %struct._object* %1362, i32 0, i32 0
  %1363 = load i64, i64* %ob_refcnt2249, align 8
  %dec2250 = add i64 %1363, -1
  store i64 %dec2250, i64* %ob_refcnt2249, align 8
  %cmp2251 = icmp ne i64 %dec2250, 0
  br i1 %cmp2251, label %if.then.2253, label %if.else.2254

if.then.2253:                                     ; preds = %do.body.2246
  br label %if.end.2257

if.else.2254:                                     ; preds = %do.body.2246
  %1364 = load %struct._object*, %struct._object** %_py_decref_tmp2248, align 8
  %ob_type2255 = getelementptr inbounds %struct._object, %struct._object* %1364, i32 0, i32 1
  %1365 = load %struct._typeobject*, %struct._typeobject** %ob_type2255, align 8
  %tp_dealloc2256 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1365, i32 0, i32 4
  %1366 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2256, align 8
  %1367 = load %struct._object*, %struct._object** %_py_decref_tmp2248, align 8
  call void %1366(%struct._object* %1367)
  br label %if.end.2257

if.end.2257:                                      ; preds = %if.else.2254, %if.then.2253
  br label %do.end.2258

do.end.2258:                                      ; preds = %if.end.2257
  %1368 = load %struct._object*, %struct._object** %diff2231, align 8
  %1369 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2259 = getelementptr %struct._object*, %struct._object** %1369, i64 -1
  store %struct._object* %1368, %struct._object** %arrayidx2259, align 8
  %1370 = load %struct._object*, %struct._object** %diff2231, align 8
  %cmp2260 = icmp eq %struct._object* %1370, null
  br i1 %cmp2260, label %if.then.2262, label %if.end.2263

if.then.2262:                                     ; preds = %do.end.2258
  br label %error

if.end.2263:                                      ; preds = %do.end.2258
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2265, align 8
  %1371 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2265, align 8
  %_value2270 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1371, i32 0, i32 0
  store i32* %_value2270, i32** %volatile_data2269, align 8
  store i32 0, i32* %order2272, align 4
  %1372 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2265, align 8
  %1373 = bitcast %struct._Py_atomic_int* %1372 to i8*
  %1374 = load i32, i32* %order2272, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1373, i32 %1374)
  %1375 = load i32, i32* %order2272, align 4
  switch i32 %1375, label %sw.default.2274 [
    i32 2, label %sw.bb.2273
    i32 3, label %sw.bb.2273
    i32 4, label %sw.bb.2273
  ]

sw.bb.2273:                                       ; preds = %if.end.2263, %if.end.2263, %if.end.2263
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2275

sw.default.2274:                                  ; preds = %if.end.2263
  br label %sw.epilog.2275

sw.epilog.2275:                                   ; preds = %sw.default.2274, %sw.bb.2273
  %1376 = load i32*, i32** %volatile_data2269, align 8
  %1377 = load volatile i32, i32* %1376, align 4
  store i32 %1377, i32* %result2267, align 4
  %1378 = load i32, i32* %order2272, align 4
  switch i32 %1378, label %sw.default.2277 [
    i32 1, label %sw.bb.2276
    i32 3, label %sw.bb.2276
    i32 4, label %sw.bb.2276
  ]

sw.bb.2276:                                       ; preds = %sw.epilog.2275, %sw.epilog.2275, %sw.epilog.2275
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2278

sw.default.2277:                                  ; preds = %sw.epilog.2275
  br label %sw.epilog.2278

sw.epilog.2278:                                   ; preds = %sw.default.2277, %sw.bb.2276
  %1379 = load i32, i32* %result2267, align 4
  store i32 %1379, i32* %tmp2279
  %1380 = load i32, i32* %tmp2279
  %tobool2280 = icmp ne i32 %1380, 0
  br i1 %tobool2280, label %if.end.2293, label %if.then.2281

if.then.2281:                                     ; preds = %sw.epilog.2278
  %1381 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2282 = icmp ne i32 %1381, 0
  br i1 %tobool2282, label %if.end.2292, label %if.then.2283

if.then.2283:                                     ; preds = %if.then.2281
  %1382 = load i8*, i8** %next_instr, align 8
  %1383 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2284 = ptrtoint i8* %1382 to i64
  %sub.ptr.rhs.cast2285 = ptrtoint i8* %1383 to i64
  %sub.ptr.sub2286 = sub i64 %sub.ptr.lhs.cast2284, %sub.ptr.rhs.cast2285
  %conv2287 = trunc i64 %sub.ptr.sub2286 to i32
  %1384 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2288 = getelementptr inbounds %struct._frame, %struct._frame* %1384, i32 0, i32 13
  store i32 %conv2287, i32* %f_lasti2288, align 4
  %1385 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2289 = getelementptr i8, i8* %1385, i32 1
  store i8* %incdec.ptr2289, i8** %next_instr, align 8
  %1386 = load i8, i8* %1385, align 1
  %idxprom2290 = zext i8 %1386 to i64
  %arrayidx2291 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2290
  %1387 = load i8*, i8** %arrayidx2291, align 8
  br label %indirectgoto

if.end.2292:                                      ; preds = %if.then.2281
  br label %fast_next_opcode

if.end.2293:                                      ; preds = %sw.epilog.2278
  br label %for.cond

TARGET_INPLACE_LSHIFT:                            ; preds = %indirectgoto
  store i32 75, i32* %opcode, align 4
  br label %sw.bb.2294

sw.bb.2294:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_LSHIFT
  %1388 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2297 = getelementptr %struct._object*, %struct._object** %1388, i32 -1
  store %struct._object** %incdec.ptr2297, %struct._object*** %stack_pointer, align 8
  %1389 = load %struct._object*, %struct._object** %incdec.ptr2297, align 8
  store %struct._object* %1389, %struct._object** %right2296, align 8
  %1390 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2300 = getelementptr %struct._object*, %struct._object** %1390, i64 -1
  %1391 = load %struct._object*, %struct._object** %arrayidx2300, align 8
  store %struct._object* %1391, %struct._object** %left2299, align 8
  %1392 = load %struct._object*, %struct._object** %left2299, align 8
  %1393 = load %struct._object*, %struct._object** %right2296, align 8
  %call2303 = call %struct._object* @PyNumber_InPlaceLshift(%struct._object* %1392, %struct._object* %1393)
  store %struct._object* %call2303, %struct._object** %res2302, align 8
  br label %do.body.2304

do.body.2304:                                     ; preds = %sw.bb.2294
  %1394 = load %struct._object*, %struct._object** %left2299, align 8
  store %struct._object* %1394, %struct._object** %_py_decref_tmp2306, align 8
  %1395 = load %struct._object*, %struct._object** %_py_decref_tmp2306, align 8
  %ob_refcnt2307 = getelementptr inbounds %struct._object, %struct._object* %1395, i32 0, i32 0
  %1396 = load i64, i64* %ob_refcnt2307, align 8
  %dec2308 = add i64 %1396, -1
  store i64 %dec2308, i64* %ob_refcnt2307, align 8
  %cmp2309 = icmp ne i64 %dec2308, 0
  br i1 %cmp2309, label %if.then.2311, label %if.else.2312

if.then.2311:                                     ; preds = %do.body.2304
  br label %if.end.2315

if.else.2312:                                     ; preds = %do.body.2304
  %1397 = load %struct._object*, %struct._object** %_py_decref_tmp2306, align 8
  %ob_type2313 = getelementptr inbounds %struct._object, %struct._object* %1397, i32 0, i32 1
  %1398 = load %struct._typeobject*, %struct._typeobject** %ob_type2313, align 8
  %tp_dealloc2314 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1398, i32 0, i32 4
  %1399 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2314, align 8
  %1400 = load %struct._object*, %struct._object** %_py_decref_tmp2306, align 8
  call void %1399(%struct._object* %1400)
  br label %if.end.2315

if.end.2315:                                      ; preds = %if.else.2312, %if.then.2311
  br label %do.end.2316

do.end.2316:                                      ; preds = %if.end.2315
  br label %do.body.2317

do.body.2317:                                     ; preds = %do.end.2316
  %1401 = load %struct._object*, %struct._object** %right2296, align 8
  store %struct._object* %1401, %struct._object** %_py_decref_tmp2319, align 8
  %1402 = load %struct._object*, %struct._object** %_py_decref_tmp2319, align 8
  %ob_refcnt2320 = getelementptr inbounds %struct._object, %struct._object* %1402, i32 0, i32 0
  %1403 = load i64, i64* %ob_refcnt2320, align 8
  %dec2321 = add i64 %1403, -1
  store i64 %dec2321, i64* %ob_refcnt2320, align 8
  %cmp2322 = icmp ne i64 %dec2321, 0
  br i1 %cmp2322, label %if.then.2324, label %if.else.2325

if.then.2324:                                     ; preds = %do.body.2317
  br label %if.end.2328

if.else.2325:                                     ; preds = %do.body.2317
  %1404 = load %struct._object*, %struct._object** %_py_decref_tmp2319, align 8
  %ob_type2326 = getelementptr inbounds %struct._object, %struct._object* %1404, i32 0, i32 1
  %1405 = load %struct._typeobject*, %struct._typeobject** %ob_type2326, align 8
  %tp_dealloc2327 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1405, i32 0, i32 4
  %1406 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2327, align 8
  %1407 = load %struct._object*, %struct._object** %_py_decref_tmp2319, align 8
  call void %1406(%struct._object* %1407)
  br label %if.end.2328

if.end.2328:                                      ; preds = %if.else.2325, %if.then.2324
  br label %do.end.2329

do.end.2329:                                      ; preds = %if.end.2328
  %1408 = load %struct._object*, %struct._object** %res2302, align 8
  %1409 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2330 = getelementptr %struct._object*, %struct._object** %1409, i64 -1
  store %struct._object* %1408, %struct._object** %arrayidx2330, align 8
  %1410 = load %struct._object*, %struct._object** %res2302, align 8
  %cmp2331 = icmp eq %struct._object* %1410, null
  br i1 %cmp2331, label %if.then.2333, label %if.end.2334

if.then.2333:                                     ; preds = %do.end.2329
  br label %error

if.end.2334:                                      ; preds = %do.end.2329
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2336, align 8
  %1411 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2336, align 8
  %_value2341 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1411, i32 0, i32 0
  store i32* %_value2341, i32** %volatile_data2340, align 8
  store i32 0, i32* %order2343, align 4
  %1412 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2336, align 8
  %1413 = bitcast %struct._Py_atomic_int* %1412 to i8*
  %1414 = load i32, i32* %order2343, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1413, i32 %1414)
  %1415 = load i32, i32* %order2343, align 4
  switch i32 %1415, label %sw.default.2345 [
    i32 2, label %sw.bb.2344
    i32 3, label %sw.bb.2344
    i32 4, label %sw.bb.2344
  ]

sw.bb.2344:                                       ; preds = %if.end.2334, %if.end.2334, %if.end.2334
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2346

sw.default.2345:                                  ; preds = %if.end.2334
  br label %sw.epilog.2346

sw.epilog.2346:                                   ; preds = %sw.default.2345, %sw.bb.2344
  %1416 = load i32*, i32** %volatile_data2340, align 8
  %1417 = load volatile i32, i32* %1416, align 4
  store i32 %1417, i32* %result2338, align 4
  %1418 = load i32, i32* %order2343, align 4
  switch i32 %1418, label %sw.default.2348 [
    i32 1, label %sw.bb.2347
    i32 3, label %sw.bb.2347
    i32 4, label %sw.bb.2347
  ]

sw.bb.2347:                                       ; preds = %sw.epilog.2346, %sw.epilog.2346, %sw.epilog.2346
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2349

sw.default.2348:                                  ; preds = %sw.epilog.2346
  br label %sw.epilog.2349

sw.epilog.2349:                                   ; preds = %sw.default.2348, %sw.bb.2347
  %1419 = load i32, i32* %result2338, align 4
  store i32 %1419, i32* %tmp2350
  %1420 = load i32, i32* %tmp2350
  %tobool2351 = icmp ne i32 %1420, 0
  br i1 %tobool2351, label %if.end.2364, label %if.then.2352

if.then.2352:                                     ; preds = %sw.epilog.2349
  %1421 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2353 = icmp ne i32 %1421, 0
  br i1 %tobool2353, label %if.end.2363, label %if.then.2354

if.then.2354:                                     ; preds = %if.then.2352
  %1422 = load i8*, i8** %next_instr, align 8
  %1423 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2355 = ptrtoint i8* %1422 to i64
  %sub.ptr.rhs.cast2356 = ptrtoint i8* %1423 to i64
  %sub.ptr.sub2357 = sub i64 %sub.ptr.lhs.cast2355, %sub.ptr.rhs.cast2356
  %conv2358 = trunc i64 %sub.ptr.sub2357 to i32
  %1424 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2359 = getelementptr inbounds %struct._frame, %struct._frame* %1424, i32 0, i32 13
  store i32 %conv2358, i32* %f_lasti2359, align 4
  %1425 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2360 = getelementptr i8, i8* %1425, i32 1
  store i8* %incdec.ptr2360, i8** %next_instr, align 8
  %1426 = load i8, i8* %1425, align 1
  %idxprom2361 = zext i8 %1426 to i64
  %arrayidx2362 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2361
  %1427 = load i8*, i8** %arrayidx2362, align 8
  br label %indirectgoto

if.end.2363:                                      ; preds = %if.then.2352
  br label %fast_next_opcode

if.end.2364:                                      ; preds = %sw.epilog.2349
  br label %for.cond

TARGET_INPLACE_RSHIFT:                            ; preds = %indirectgoto
  store i32 76, i32* %opcode, align 4
  br label %sw.bb.2365

sw.bb.2365:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_RSHIFT
  %1428 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2368 = getelementptr %struct._object*, %struct._object** %1428, i32 -1
  store %struct._object** %incdec.ptr2368, %struct._object*** %stack_pointer, align 8
  %1429 = load %struct._object*, %struct._object** %incdec.ptr2368, align 8
  store %struct._object* %1429, %struct._object** %right2367, align 8
  %1430 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2371 = getelementptr %struct._object*, %struct._object** %1430, i64 -1
  %1431 = load %struct._object*, %struct._object** %arrayidx2371, align 8
  store %struct._object* %1431, %struct._object** %left2370, align 8
  %1432 = load %struct._object*, %struct._object** %left2370, align 8
  %1433 = load %struct._object*, %struct._object** %right2367, align 8
  %call2374 = call %struct._object* @PyNumber_InPlaceRshift(%struct._object* %1432, %struct._object* %1433)
  store %struct._object* %call2374, %struct._object** %res2373, align 8
  br label %do.body.2375

do.body.2375:                                     ; preds = %sw.bb.2365
  %1434 = load %struct._object*, %struct._object** %left2370, align 8
  store %struct._object* %1434, %struct._object** %_py_decref_tmp2377, align 8
  %1435 = load %struct._object*, %struct._object** %_py_decref_tmp2377, align 8
  %ob_refcnt2378 = getelementptr inbounds %struct._object, %struct._object* %1435, i32 0, i32 0
  %1436 = load i64, i64* %ob_refcnt2378, align 8
  %dec2379 = add i64 %1436, -1
  store i64 %dec2379, i64* %ob_refcnt2378, align 8
  %cmp2380 = icmp ne i64 %dec2379, 0
  br i1 %cmp2380, label %if.then.2382, label %if.else.2383

if.then.2382:                                     ; preds = %do.body.2375
  br label %if.end.2386

if.else.2383:                                     ; preds = %do.body.2375
  %1437 = load %struct._object*, %struct._object** %_py_decref_tmp2377, align 8
  %ob_type2384 = getelementptr inbounds %struct._object, %struct._object* %1437, i32 0, i32 1
  %1438 = load %struct._typeobject*, %struct._typeobject** %ob_type2384, align 8
  %tp_dealloc2385 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1438, i32 0, i32 4
  %1439 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2385, align 8
  %1440 = load %struct._object*, %struct._object** %_py_decref_tmp2377, align 8
  call void %1439(%struct._object* %1440)
  br label %if.end.2386

if.end.2386:                                      ; preds = %if.else.2383, %if.then.2382
  br label %do.end.2387

do.end.2387:                                      ; preds = %if.end.2386
  br label %do.body.2388

do.body.2388:                                     ; preds = %do.end.2387
  %1441 = load %struct._object*, %struct._object** %right2367, align 8
  store %struct._object* %1441, %struct._object** %_py_decref_tmp2390, align 8
  %1442 = load %struct._object*, %struct._object** %_py_decref_tmp2390, align 8
  %ob_refcnt2391 = getelementptr inbounds %struct._object, %struct._object* %1442, i32 0, i32 0
  %1443 = load i64, i64* %ob_refcnt2391, align 8
  %dec2392 = add i64 %1443, -1
  store i64 %dec2392, i64* %ob_refcnt2391, align 8
  %cmp2393 = icmp ne i64 %dec2392, 0
  br i1 %cmp2393, label %if.then.2395, label %if.else.2396

if.then.2395:                                     ; preds = %do.body.2388
  br label %if.end.2399

if.else.2396:                                     ; preds = %do.body.2388
  %1444 = load %struct._object*, %struct._object** %_py_decref_tmp2390, align 8
  %ob_type2397 = getelementptr inbounds %struct._object, %struct._object* %1444, i32 0, i32 1
  %1445 = load %struct._typeobject*, %struct._typeobject** %ob_type2397, align 8
  %tp_dealloc2398 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1445, i32 0, i32 4
  %1446 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2398, align 8
  %1447 = load %struct._object*, %struct._object** %_py_decref_tmp2390, align 8
  call void %1446(%struct._object* %1447)
  br label %if.end.2399

if.end.2399:                                      ; preds = %if.else.2396, %if.then.2395
  br label %do.end.2400

do.end.2400:                                      ; preds = %if.end.2399
  %1448 = load %struct._object*, %struct._object** %res2373, align 8
  %1449 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2401 = getelementptr %struct._object*, %struct._object** %1449, i64 -1
  store %struct._object* %1448, %struct._object** %arrayidx2401, align 8
  %1450 = load %struct._object*, %struct._object** %res2373, align 8
  %cmp2402 = icmp eq %struct._object* %1450, null
  br i1 %cmp2402, label %if.then.2404, label %if.end.2405

if.then.2404:                                     ; preds = %do.end.2400
  br label %error

if.end.2405:                                      ; preds = %do.end.2400
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2407, align 8
  %1451 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2407, align 8
  %_value2412 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1451, i32 0, i32 0
  store i32* %_value2412, i32** %volatile_data2411, align 8
  store i32 0, i32* %order2414, align 4
  %1452 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2407, align 8
  %1453 = bitcast %struct._Py_atomic_int* %1452 to i8*
  %1454 = load i32, i32* %order2414, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1453, i32 %1454)
  %1455 = load i32, i32* %order2414, align 4
  switch i32 %1455, label %sw.default.2416 [
    i32 2, label %sw.bb.2415
    i32 3, label %sw.bb.2415
    i32 4, label %sw.bb.2415
  ]

sw.bb.2415:                                       ; preds = %if.end.2405, %if.end.2405, %if.end.2405
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2417

sw.default.2416:                                  ; preds = %if.end.2405
  br label %sw.epilog.2417

sw.epilog.2417:                                   ; preds = %sw.default.2416, %sw.bb.2415
  %1456 = load i32*, i32** %volatile_data2411, align 8
  %1457 = load volatile i32, i32* %1456, align 4
  store i32 %1457, i32* %result2409, align 4
  %1458 = load i32, i32* %order2414, align 4
  switch i32 %1458, label %sw.default.2419 [
    i32 1, label %sw.bb.2418
    i32 3, label %sw.bb.2418
    i32 4, label %sw.bb.2418
  ]

sw.bb.2418:                                       ; preds = %sw.epilog.2417, %sw.epilog.2417, %sw.epilog.2417
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2420

sw.default.2419:                                  ; preds = %sw.epilog.2417
  br label %sw.epilog.2420

sw.epilog.2420:                                   ; preds = %sw.default.2419, %sw.bb.2418
  %1459 = load i32, i32* %result2409, align 4
  store i32 %1459, i32* %tmp2421
  %1460 = load i32, i32* %tmp2421
  %tobool2422 = icmp ne i32 %1460, 0
  br i1 %tobool2422, label %if.end.2435, label %if.then.2423

if.then.2423:                                     ; preds = %sw.epilog.2420
  %1461 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2424 = icmp ne i32 %1461, 0
  br i1 %tobool2424, label %if.end.2434, label %if.then.2425

if.then.2425:                                     ; preds = %if.then.2423
  %1462 = load i8*, i8** %next_instr, align 8
  %1463 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2426 = ptrtoint i8* %1462 to i64
  %sub.ptr.rhs.cast2427 = ptrtoint i8* %1463 to i64
  %sub.ptr.sub2428 = sub i64 %sub.ptr.lhs.cast2426, %sub.ptr.rhs.cast2427
  %conv2429 = trunc i64 %sub.ptr.sub2428 to i32
  %1464 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2430 = getelementptr inbounds %struct._frame, %struct._frame* %1464, i32 0, i32 13
  store i32 %conv2429, i32* %f_lasti2430, align 4
  %1465 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2431 = getelementptr i8, i8* %1465, i32 1
  store i8* %incdec.ptr2431, i8** %next_instr, align 8
  %1466 = load i8, i8* %1465, align 1
  %idxprom2432 = zext i8 %1466 to i64
  %arrayidx2433 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2432
  %1467 = load i8*, i8** %arrayidx2433, align 8
  br label %indirectgoto

if.end.2434:                                      ; preds = %if.then.2423
  br label %fast_next_opcode

if.end.2435:                                      ; preds = %sw.epilog.2420
  br label %for.cond

TARGET_INPLACE_AND:                               ; preds = %indirectgoto
  store i32 77, i32* %opcode, align 4
  br label %sw.bb.2436

sw.bb.2436:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_AND
  %1468 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2439 = getelementptr %struct._object*, %struct._object** %1468, i32 -1
  store %struct._object** %incdec.ptr2439, %struct._object*** %stack_pointer, align 8
  %1469 = load %struct._object*, %struct._object** %incdec.ptr2439, align 8
  store %struct._object* %1469, %struct._object** %right2438, align 8
  %1470 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2442 = getelementptr %struct._object*, %struct._object** %1470, i64 -1
  %1471 = load %struct._object*, %struct._object** %arrayidx2442, align 8
  store %struct._object* %1471, %struct._object** %left2441, align 8
  %1472 = load %struct._object*, %struct._object** %left2441, align 8
  %1473 = load %struct._object*, %struct._object** %right2438, align 8
  %call2445 = call %struct._object* @PyNumber_InPlaceAnd(%struct._object* %1472, %struct._object* %1473)
  store %struct._object* %call2445, %struct._object** %res2444, align 8
  br label %do.body.2446

do.body.2446:                                     ; preds = %sw.bb.2436
  %1474 = load %struct._object*, %struct._object** %left2441, align 8
  store %struct._object* %1474, %struct._object** %_py_decref_tmp2448, align 8
  %1475 = load %struct._object*, %struct._object** %_py_decref_tmp2448, align 8
  %ob_refcnt2449 = getelementptr inbounds %struct._object, %struct._object* %1475, i32 0, i32 0
  %1476 = load i64, i64* %ob_refcnt2449, align 8
  %dec2450 = add i64 %1476, -1
  store i64 %dec2450, i64* %ob_refcnt2449, align 8
  %cmp2451 = icmp ne i64 %dec2450, 0
  br i1 %cmp2451, label %if.then.2453, label %if.else.2454

if.then.2453:                                     ; preds = %do.body.2446
  br label %if.end.2457

if.else.2454:                                     ; preds = %do.body.2446
  %1477 = load %struct._object*, %struct._object** %_py_decref_tmp2448, align 8
  %ob_type2455 = getelementptr inbounds %struct._object, %struct._object* %1477, i32 0, i32 1
  %1478 = load %struct._typeobject*, %struct._typeobject** %ob_type2455, align 8
  %tp_dealloc2456 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1478, i32 0, i32 4
  %1479 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2456, align 8
  %1480 = load %struct._object*, %struct._object** %_py_decref_tmp2448, align 8
  call void %1479(%struct._object* %1480)
  br label %if.end.2457

if.end.2457:                                      ; preds = %if.else.2454, %if.then.2453
  br label %do.end.2458

do.end.2458:                                      ; preds = %if.end.2457
  br label %do.body.2459

do.body.2459:                                     ; preds = %do.end.2458
  %1481 = load %struct._object*, %struct._object** %right2438, align 8
  store %struct._object* %1481, %struct._object** %_py_decref_tmp2461, align 8
  %1482 = load %struct._object*, %struct._object** %_py_decref_tmp2461, align 8
  %ob_refcnt2462 = getelementptr inbounds %struct._object, %struct._object* %1482, i32 0, i32 0
  %1483 = load i64, i64* %ob_refcnt2462, align 8
  %dec2463 = add i64 %1483, -1
  store i64 %dec2463, i64* %ob_refcnt2462, align 8
  %cmp2464 = icmp ne i64 %dec2463, 0
  br i1 %cmp2464, label %if.then.2466, label %if.else.2467

if.then.2466:                                     ; preds = %do.body.2459
  br label %if.end.2470

if.else.2467:                                     ; preds = %do.body.2459
  %1484 = load %struct._object*, %struct._object** %_py_decref_tmp2461, align 8
  %ob_type2468 = getelementptr inbounds %struct._object, %struct._object* %1484, i32 0, i32 1
  %1485 = load %struct._typeobject*, %struct._typeobject** %ob_type2468, align 8
  %tp_dealloc2469 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1485, i32 0, i32 4
  %1486 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2469, align 8
  %1487 = load %struct._object*, %struct._object** %_py_decref_tmp2461, align 8
  call void %1486(%struct._object* %1487)
  br label %if.end.2470

if.end.2470:                                      ; preds = %if.else.2467, %if.then.2466
  br label %do.end.2471

do.end.2471:                                      ; preds = %if.end.2470
  %1488 = load %struct._object*, %struct._object** %res2444, align 8
  %1489 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2472 = getelementptr %struct._object*, %struct._object** %1489, i64 -1
  store %struct._object* %1488, %struct._object** %arrayidx2472, align 8
  %1490 = load %struct._object*, %struct._object** %res2444, align 8
  %cmp2473 = icmp eq %struct._object* %1490, null
  br i1 %cmp2473, label %if.then.2475, label %if.end.2476

if.then.2475:                                     ; preds = %do.end.2471
  br label %error

if.end.2476:                                      ; preds = %do.end.2471
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2478, align 8
  %1491 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2478, align 8
  %_value2483 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1491, i32 0, i32 0
  store i32* %_value2483, i32** %volatile_data2482, align 8
  store i32 0, i32* %order2485, align 4
  %1492 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2478, align 8
  %1493 = bitcast %struct._Py_atomic_int* %1492 to i8*
  %1494 = load i32, i32* %order2485, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1493, i32 %1494)
  %1495 = load i32, i32* %order2485, align 4
  switch i32 %1495, label %sw.default.2487 [
    i32 2, label %sw.bb.2486
    i32 3, label %sw.bb.2486
    i32 4, label %sw.bb.2486
  ]

sw.bb.2486:                                       ; preds = %if.end.2476, %if.end.2476, %if.end.2476
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2488

sw.default.2487:                                  ; preds = %if.end.2476
  br label %sw.epilog.2488

sw.epilog.2488:                                   ; preds = %sw.default.2487, %sw.bb.2486
  %1496 = load i32*, i32** %volatile_data2482, align 8
  %1497 = load volatile i32, i32* %1496, align 4
  store i32 %1497, i32* %result2480, align 4
  %1498 = load i32, i32* %order2485, align 4
  switch i32 %1498, label %sw.default.2490 [
    i32 1, label %sw.bb.2489
    i32 3, label %sw.bb.2489
    i32 4, label %sw.bb.2489
  ]

sw.bb.2489:                                       ; preds = %sw.epilog.2488, %sw.epilog.2488, %sw.epilog.2488
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2491

sw.default.2490:                                  ; preds = %sw.epilog.2488
  br label %sw.epilog.2491

sw.epilog.2491:                                   ; preds = %sw.default.2490, %sw.bb.2489
  %1499 = load i32, i32* %result2480, align 4
  store i32 %1499, i32* %tmp2492
  %1500 = load i32, i32* %tmp2492
  %tobool2493 = icmp ne i32 %1500, 0
  br i1 %tobool2493, label %if.end.2506, label %if.then.2494

if.then.2494:                                     ; preds = %sw.epilog.2491
  %1501 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2495 = icmp ne i32 %1501, 0
  br i1 %tobool2495, label %if.end.2505, label %if.then.2496

if.then.2496:                                     ; preds = %if.then.2494
  %1502 = load i8*, i8** %next_instr, align 8
  %1503 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2497 = ptrtoint i8* %1502 to i64
  %sub.ptr.rhs.cast2498 = ptrtoint i8* %1503 to i64
  %sub.ptr.sub2499 = sub i64 %sub.ptr.lhs.cast2497, %sub.ptr.rhs.cast2498
  %conv2500 = trunc i64 %sub.ptr.sub2499 to i32
  %1504 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2501 = getelementptr inbounds %struct._frame, %struct._frame* %1504, i32 0, i32 13
  store i32 %conv2500, i32* %f_lasti2501, align 4
  %1505 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2502 = getelementptr i8, i8* %1505, i32 1
  store i8* %incdec.ptr2502, i8** %next_instr, align 8
  %1506 = load i8, i8* %1505, align 1
  %idxprom2503 = zext i8 %1506 to i64
  %arrayidx2504 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2503
  %1507 = load i8*, i8** %arrayidx2504, align 8
  br label %indirectgoto

if.end.2505:                                      ; preds = %if.then.2494
  br label %fast_next_opcode

if.end.2506:                                      ; preds = %sw.epilog.2491
  br label %for.cond

TARGET_INPLACE_XOR:                               ; preds = %indirectgoto
  store i32 78, i32* %opcode, align 4
  br label %sw.bb.2507

sw.bb.2507:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_XOR
  %1508 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2510 = getelementptr %struct._object*, %struct._object** %1508, i32 -1
  store %struct._object** %incdec.ptr2510, %struct._object*** %stack_pointer, align 8
  %1509 = load %struct._object*, %struct._object** %incdec.ptr2510, align 8
  store %struct._object* %1509, %struct._object** %right2509, align 8
  %1510 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2513 = getelementptr %struct._object*, %struct._object** %1510, i64 -1
  %1511 = load %struct._object*, %struct._object** %arrayidx2513, align 8
  store %struct._object* %1511, %struct._object** %left2512, align 8
  %1512 = load %struct._object*, %struct._object** %left2512, align 8
  %1513 = load %struct._object*, %struct._object** %right2509, align 8
  %call2516 = call %struct._object* @PyNumber_InPlaceXor(%struct._object* %1512, %struct._object* %1513)
  store %struct._object* %call2516, %struct._object** %res2515, align 8
  br label %do.body.2517

do.body.2517:                                     ; preds = %sw.bb.2507
  %1514 = load %struct._object*, %struct._object** %left2512, align 8
  store %struct._object* %1514, %struct._object** %_py_decref_tmp2519, align 8
  %1515 = load %struct._object*, %struct._object** %_py_decref_tmp2519, align 8
  %ob_refcnt2520 = getelementptr inbounds %struct._object, %struct._object* %1515, i32 0, i32 0
  %1516 = load i64, i64* %ob_refcnt2520, align 8
  %dec2521 = add i64 %1516, -1
  store i64 %dec2521, i64* %ob_refcnt2520, align 8
  %cmp2522 = icmp ne i64 %dec2521, 0
  br i1 %cmp2522, label %if.then.2524, label %if.else.2525

if.then.2524:                                     ; preds = %do.body.2517
  br label %if.end.2528

if.else.2525:                                     ; preds = %do.body.2517
  %1517 = load %struct._object*, %struct._object** %_py_decref_tmp2519, align 8
  %ob_type2526 = getelementptr inbounds %struct._object, %struct._object* %1517, i32 0, i32 1
  %1518 = load %struct._typeobject*, %struct._typeobject** %ob_type2526, align 8
  %tp_dealloc2527 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1518, i32 0, i32 4
  %1519 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2527, align 8
  %1520 = load %struct._object*, %struct._object** %_py_decref_tmp2519, align 8
  call void %1519(%struct._object* %1520)
  br label %if.end.2528

if.end.2528:                                      ; preds = %if.else.2525, %if.then.2524
  br label %do.end.2529

do.end.2529:                                      ; preds = %if.end.2528
  br label %do.body.2530

do.body.2530:                                     ; preds = %do.end.2529
  %1521 = load %struct._object*, %struct._object** %right2509, align 8
  store %struct._object* %1521, %struct._object** %_py_decref_tmp2532, align 8
  %1522 = load %struct._object*, %struct._object** %_py_decref_tmp2532, align 8
  %ob_refcnt2533 = getelementptr inbounds %struct._object, %struct._object* %1522, i32 0, i32 0
  %1523 = load i64, i64* %ob_refcnt2533, align 8
  %dec2534 = add i64 %1523, -1
  store i64 %dec2534, i64* %ob_refcnt2533, align 8
  %cmp2535 = icmp ne i64 %dec2534, 0
  br i1 %cmp2535, label %if.then.2537, label %if.else.2538

if.then.2537:                                     ; preds = %do.body.2530
  br label %if.end.2541

if.else.2538:                                     ; preds = %do.body.2530
  %1524 = load %struct._object*, %struct._object** %_py_decref_tmp2532, align 8
  %ob_type2539 = getelementptr inbounds %struct._object, %struct._object* %1524, i32 0, i32 1
  %1525 = load %struct._typeobject*, %struct._typeobject** %ob_type2539, align 8
  %tp_dealloc2540 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1525, i32 0, i32 4
  %1526 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2540, align 8
  %1527 = load %struct._object*, %struct._object** %_py_decref_tmp2532, align 8
  call void %1526(%struct._object* %1527)
  br label %if.end.2541

if.end.2541:                                      ; preds = %if.else.2538, %if.then.2537
  br label %do.end.2542

do.end.2542:                                      ; preds = %if.end.2541
  %1528 = load %struct._object*, %struct._object** %res2515, align 8
  %1529 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2543 = getelementptr %struct._object*, %struct._object** %1529, i64 -1
  store %struct._object* %1528, %struct._object** %arrayidx2543, align 8
  %1530 = load %struct._object*, %struct._object** %res2515, align 8
  %cmp2544 = icmp eq %struct._object* %1530, null
  br i1 %cmp2544, label %if.then.2546, label %if.end.2547

if.then.2546:                                     ; preds = %do.end.2542
  br label %error

if.end.2547:                                      ; preds = %do.end.2542
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2549, align 8
  %1531 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2549, align 8
  %_value2554 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1531, i32 0, i32 0
  store i32* %_value2554, i32** %volatile_data2553, align 8
  store i32 0, i32* %order2556, align 4
  %1532 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2549, align 8
  %1533 = bitcast %struct._Py_atomic_int* %1532 to i8*
  %1534 = load i32, i32* %order2556, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1533, i32 %1534)
  %1535 = load i32, i32* %order2556, align 4
  switch i32 %1535, label %sw.default.2558 [
    i32 2, label %sw.bb.2557
    i32 3, label %sw.bb.2557
    i32 4, label %sw.bb.2557
  ]

sw.bb.2557:                                       ; preds = %if.end.2547, %if.end.2547, %if.end.2547
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2559

sw.default.2558:                                  ; preds = %if.end.2547
  br label %sw.epilog.2559

sw.epilog.2559:                                   ; preds = %sw.default.2558, %sw.bb.2557
  %1536 = load i32*, i32** %volatile_data2553, align 8
  %1537 = load volatile i32, i32* %1536, align 4
  store i32 %1537, i32* %result2551, align 4
  %1538 = load i32, i32* %order2556, align 4
  switch i32 %1538, label %sw.default.2561 [
    i32 1, label %sw.bb.2560
    i32 3, label %sw.bb.2560
    i32 4, label %sw.bb.2560
  ]

sw.bb.2560:                                       ; preds = %sw.epilog.2559, %sw.epilog.2559, %sw.epilog.2559
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2562

sw.default.2561:                                  ; preds = %sw.epilog.2559
  br label %sw.epilog.2562

sw.epilog.2562:                                   ; preds = %sw.default.2561, %sw.bb.2560
  %1539 = load i32, i32* %result2551, align 4
  store i32 %1539, i32* %tmp2563
  %1540 = load i32, i32* %tmp2563
  %tobool2564 = icmp ne i32 %1540, 0
  br i1 %tobool2564, label %if.end.2577, label %if.then.2565

if.then.2565:                                     ; preds = %sw.epilog.2562
  %1541 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2566 = icmp ne i32 %1541, 0
  br i1 %tobool2566, label %if.end.2576, label %if.then.2567

if.then.2567:                                     ; preds = %if.then.2565
  %1542 = load i8*, i8** %next_instr, align 8
  %1543 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2568 = ptrtoint i8* %1542 to i64
  %sub.ptr.rhs.cast2569 = ptrtoint i8* %1543 to i64
  %sub.ptr.sub2570 = sub i64 %sub.ptr.lhs.cast2568, %sub.ptr.rhs.cast2569
  %conv2571 = trunc i64 %sub.ptr.sub2570 to i32
  %1544 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2572 = getelementptr inbounds %struct._frame, %struct._frame* %1544, i32 0, i32 13
  store i32 %conv2571, i32* %f_lasti2572, align 4
  %1545 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2573 = getelementptr i8, i8* %1545, i32 1
  store i8* %incdec.ptr2573, i8** %next_instr, align 8
  %1546 = load i8, i8* %1545, align 1
  %idxprom2574 = zext i8 %1546 to i64
  %arrayidx2575 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2574
  %1547 = load i8*, i8** %arrayidx2575, align 8
  br label %indirectgoto

if.end.2576:                                      ; preds = %if.then.2565
  br label %fast_next_opcode

if.end.2577:                                      ; preds = %sw.epilog.2562
  br label %for.cond

TARGET_INPLACE_OR:                                ; preds = %indirectgoto
  store i32 79, i32* %opcode, align 4
  br label %sw.bb.2578

sw.bb.2578:                                       ; preds = %dispatch_opcode, %TARGET_INPLACE_OR
  %1548 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2581 = getelementptr %struct._object*, %struct._object** %1548, i32 -1
  store %struct._object** %incdec.ptr2581, %struct._object*** %stack_pointer, align 8
  %1549 = load %struct._object*, %struct._object** %incdec.ptr2581, align 8
  store %struct._object* %1549, %struct._object** %right2580, align 8
  %1550 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2584 = getelementptr %struct._object*, %struct._object** %1550, i64 -1
  %1551 = load %struct._object*, %struct._object** %arrayidx2584, align 8
  store %struct._object* %1551, %struct._object** %left2583, align 8
  %1552 = load %struct._object*, %struct._object** %left2583, align 8
  %1553 = load %struct._object*, %struct._object** %right2580, align 8
  %call2587 = call %struct._object* @PyNumber_InPlaceOr(%struct._object* %1552, %struct._object* %1553)
  store %struct._object* %call2587, %struct._object** %res2586, align 8
  br label %do.body.2588

do.body.2588:                                     ; preds = %sw.bb.2578
  %1554 = load %struct._object*, %struct._object** %left2583, align 8
  store %struct._object* %1554, %struct._object** %_py_decref_tmp2590, align 8
  %1555 = load %struct._object*, %struct._object** %_py_decref_tmp2590, align 8
  %ob_refcnt2591 = getelementptr inbounds %struct._object, %struct._object* %1555, i32 0, i32 0
  %1556 = load i64, i64* %ob_refcnt2591, align 8
  %dec2592 = add i64 %1556, -1
  store i64 %dec2592, i64* %ob_refcnt2591, align 8
  %cmp2593 = icmp ne i64 %dec2592, 0
  br i1 %cmp2593, label %if.then.2595, label %if.else.2596

if.then.2595:                                     ; preds = %do.body.2588
  br label %if.end.2599

if.else.2596:                                     ; preds = %do.body.2588
  %1557 = load %struct._object*, %struct._object** %_py_decref_tmp2590, align 8
  %ob_type2597 = getelementptr inbounds %struct._object, %struct._object* %1557, i32 0, i32 1
  %1558 = load %struct._typeobject*, %struct._typeobject** %ob_type2597, align 8
  %tp_dealloc2598 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1558, i32 0, i32 4
  %1559 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2598, align 8
  %1560 = load %struct._object*, %struct._object** %_py_decref_tmp2590, align 8
  call void %1559(%struct._object* %1560)
  br label %if.end.2599

if.end.2599:                                      ; preds = %if.else.2596, %if.then.2595
  br label %do.end.2600

do.end.2600:                                      ; preds = %if.end.2599
  br label %do.body.2601

do.body.2601:                                     ; preds = %do.end.2600
  %1561 = load %struct._object*, %struct._object** %right2580, align 8
  store %struct._object* %1561, %struct._object** %_py_decref_tmp2603, align 8
  %1562 = load %struct._object*, %struct._object** %_py_decref_tmp2603, align 8
  %ob_refcnt2604 = getelementptr inbounds %struct._object, %struct._object* %1562, i32 0, i32 0
  %1563 = load i64, i64* %ob_refcnt2604, align 8
  %dec2605 = add i64 %1563, -1
  store i64 %dec2605, i64* %ob_refcnt2604, align 8
  %cmp2606 = icmp ne i64 %dec2605, 0
  br i1 %cmp2606, label %if.then.2608, label %if.else.2609

if.then.2608:                                     ; preds = %do.body.2601
  br label %if.end.2612

if.else.2609:                                     ; preds = %do.body.2601
  %1564 = load %struct._object*, %struct._object** %_py_decref_tmp2603, align 8
  %ob_type2610 = getelementptr inbounds %struct._object, %struct._object* %1564, i32 0, i32 1
  %1565 = load %struct._typeobject*, %struct._typeobject** %ob_type2610, align 8
  %tp_dealloc2611 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1565, i32 0, i32 4
  %1566 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2611, align 8
  %1567 = load %struct._object*, %struct._object** %_py_decref_tmp2603, align 8
  call void %1566(%struct._object* %1567)
  br label %if.end.2612

if.end.2612:                                      ; preds = %if.else.2609, %if.then.2608
  br label %do.end.2613

do.end.2613:                                      ; preds = %if.end.2612
  %1568 = load %struct._object*, %struct._object** %res2586, align 8
  %1569 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2614 = getelementptr %struct._object*, %struct._object** %1569, i64 -1
  store %struct._object* %1568, %struct._object** %arrayidx2614, align 8
  %1570 = load %struct._object*, %struct._object** %res2586, align 8
  %cmp2615 = icmp eq %struct._object* %1570, null
  br i1 %cmp2615, label %if.then.2617, label %if.end.2618

if.then.2617:                                     ; preds = %do.end.2613
  br label %error

if.end.2618:                                      ; preds = %do.end.2613
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2620, align 8
  %1571 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2620, align 8
  %_value2625 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1571, i32 0, i32 0
  store i32* %_value2625, i32** %volatile_data2624, align 8
  store i32 0, i32* %order2627, align 4
  %1572 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2620, align 8
  %1573 = bitcast %struct._Py_atomic_int* %1572 to i8*
  %1574 = load i32, i32* %order2627, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1573, i32 %1574)
  %1575 = load i32, i32* %order2627, align 4
  switch i32 %1575, label %sw.default.2629 [
    i32 2, label %sw.bb.2628
    i32 3, label %sw.bb.2628
    i32 4, label %sw.bb.2628
  ]

sw.bb.2628:                                       ; preds = %if.end.2618, %if.end.2618, %if.end.2618
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2630

sw.default.2629:                                  ; preds = %if.end.2618
  br label %sw.epilog.2630

sw.epilog.2630:                                   ; preds = %sw.default.2629, %sw.bb.2628
  %1576 = load i32*, i32** %volatile_data2624, align 8
  %1577 = load volatile i32, i32* %1576, align 4
  store i32 %1577, i32* %result2622, align 4
  %1578 = load i32, i32* %order2627, align 4
  switch i32 %1578, label %sw.default.2632 [
    i32 1, label %sw.bb.2631
    i32 3, label %sw.bb.2631
    i32 4, label %sw.bb.2631
  ]

sw.bb.2631:                                       ; preds = %sw.epilog.2630, %sw.epilog.2630, %sw.epilog.2630
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2633

sw.default.2632:                                  ; preds = %sw.epilog.2630
  br label %sw.epilog.2633

sw.epilog.2633:                                   ; preds = %sw.default.2632, %sw.bb.2631
  %1579 = load i32, i32* %result2622, align 4
  store i32 %1579, i32* %tmp2634
  %1580 = load i32, i32* %tmp2634
  %tobool2635 = icmp ne i32 %1580, 0
  br i1 %tobool2635, label %if.end.2648, label %if.then.2636

if.then.2636:                                     ; preds = %sw.epilog.2633
  %1581 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2637 = icmp ne i32 %1581, 0
  br i1 %tobool2637, label %if.end.2647, label %if.then.2638

if.then.2638:                                     ; preds = %if.then.2636
  %1582 = load i8*, i8** %next_instr, align 8
  %1583 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2639 = ptrtoint i8* %1582 to i64
  %sub.ptr.rhs.cast2640 = ptrtoint i8* %1583 to i64
  %sub.ptr.sub2641 = sub i64 %sub.ptr.lhs.cast2639, %sub.ptr.rhs.cast2640
  %conv2642 = trunc i64 %sub.ptr.sub2641 to i32
  %1584 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2643 = getelementptr inbounds %struct._frame, %struct._frame* %1584, i32 0, i32 13
  store i32 %conv2642, i32* %f_lasti2643, align 4
  %1585 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2644 = getelementptr i8, i8* %1585, i32 1
  store i8* %incdec.ptr2644, i8** %next_instr, align 8
  %1586 = load i8, i8* %1585, align 1
  %idxprom2645 = zext i8 %1586 to i64
  %arrayidx2646 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2645
  %1587 = load i8*, i8** %arrayidx2646, align 8
  br label %indirectgoto

if.end.2647:                                      ; preds = %if.then.2636
  br label %fast_next_opcode

if.end.2648:                                      ; preds = %sw.epilog.2633
  br label %for.cond

TARGET_STORE_SUBSCR:                              ; preds = %indirectgoto
  store i32 60, i32* %opcode, align 4
  br label %sw.bb.2649

sw.bb.2649:                                       ; preds = %dispatch_opcode, %TARGET_STORE_SUBSCR
  %1588 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2652 = getelementptr %struct._object*, %struct._object** %1588, i64 -1
  %1589 = load %struct._object*, %struct._object** %arrayidx2652, align 8
  store %struct._object* %1589, %struct._object** %sub2651, align 8
  %1590 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2655 = getelementptr %struct._object*, %struct._object** %1590, i64 -2
  %1591 = load %struct._object*, %struct._object** %arrayidx2655, align 8
  store %struct._object* %1591, %struct._object** %container2654, align 8
  %1592 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2658 = getelementptr %struct._object*, %struct._object** %1592, i64 -3
  %1593 = load %struct._object*, %struct._object** %arrayidx2658, align 8
  store %struct._object* %1593, %struct._object** %v2657, align 8
  %1594 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr2661 = getelementptr %struct._object*, %struct._object** %1594, i64 -3
  store %struct._object** %add.ptr2661, %struct._object*** %stack_pointer, align 8
  %1595 = load %struct._object*, %struct._object** %container2654, align 8
  %1596 = load %struct._object*, %struct._object** %sub2651, align 8
  %1597 = load %struct._object*, %struct._object** %v2657, align 8
  %call2662 = call i32 @PyObject_SetItem(%struct._object* %1595, %struct._object* %1596, %struct._object* %1597)
  store i32 %call2662, i32* %err2660, align 4
  br label %do.body.2663

do.body.2663:                                     ; preds = %sw.bb.2649
  %1598 = load %struct._object*, %struct._object** %v2657, align 8
  store %struct._object* %1598, %struct._object** %_py_decref_tmp2665, align 8
  %1599 = load %struct._object*, %struct._object** %_py_decref_tmp2665, align 8
  %ob_refcnt2666 = getelementptr inbounds %struct._object, %struct._object* %1599, i32 0, i32 0
  %1600 = load i64, i64* %ob_refcnt2666, align 8
  %dec2667 = add i64 %1600, -1
  store i64 %dec2667, i64* %ob_refcnt2666, align 8
  %cmp2668 = icmp ne i64 %dec2667, 0
  br i1 %cmp2668, label %if.then.2670, label %if.else.2671

if.then.2670:                                     ; preds = %do.body.2663
  br label %if.end.2674

if.else.2671:                                     ; preds = %do.body.2663
  %1601 = load %struct._object*, %struct._object** %_py_decref_tmp2665, align 8
  %ob_type2672 = getelementptr inbounds %struct._object, %struct._object* %1601, i32 0, i32 1
  %1602 = load %struct._typeobject*, %struct._typeobject** %ob_type2672, align 8
  %tp_dealloc2673 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1602, i32 0, i32 4
  %1603 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2673, align 8
  %1604 = load %struct._object*, %struct._object** %_py_decref_tmp2665, align 8
  call void %1603(%struct._object* %1604)
  br label %if.end.2674

if.end.2674:                                      ; preds = %if.else.2671, %if.then.2670
  br label %do.end.2675

do.end.2675:                                      ; preds = %if.end.2674
  br label %do.body.2676

do.body.2676:                                     ; preds = %do.end.2675
  %1605 = load %struct._object*, %struct._object** %container2654, align 8
  store %struct._object* %1605, %struct._object** %_py_decref_tmp2678, align 8
  %1606 = load %struct._object*, %struct._object** %_py_decref_tmp2678, align 8
  %ob_refcnt2679 = getelementptr inbounds %struct._object, %struct._object* %1606, i32 0, i32 0
  %1607 = load i64, i64* %ob_refcnt2679, align 8
  %dec2680 = add i64 %1607, -1
  store i64 %dec2680, i64* %ob_refcnt2679, align 8
  %cmp2681 = icmp ne i64 %dec2680, 0
  br i1 %cmp2681, label %if.then.2683, label %if.else.2684

if.then.2683:                                     ; preds = %do.body.2676
  br label %if.end.2687

if.else.2684:                                     ; preds = %do.body.2676
  %1608 = load %struct._object*, %struct._object** %_py_decref_tmp2678, align 8
  %ob_type2685 = getelementptr inbounds %struct._object, %struct._object* %1608, i32 0, i32 1
  %1609 = load %struct._typeobject*, %struct._typeobject** %ob_type2685, align 8
  %tp_dealloc2686 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1609, i32 0, i32 4
  %1610 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2686, align 8
  %1611 = load %struct._object*, %struct._object** %_py_decref_tmp2678, align 8
  call void %1610(%struct._object* %1611)
  br label %if.end.2687

if.end.2687:                                      ; preds = %if.else.2684, %if.then.2683
  br label %do.end.2688

do.end.2688:                                      ; preds = %if.end.2687
  br label %do.body.2689

do.body.2689:                                     ; preds = %do.end.2688
  %1612 = load %struct._object*, %struct._object** %sub2651, align 8
  store %struct._object* %1612, %struct._object** %_py_decref_tmp2691, align 8
  %1613 = load %struct._object*, %struct._object** %_py_decref_tmp2691, align 8
  %ob_refcnt2692 = getelementptr inbounds %struct._object, %struct._object* %1613, i32 0, i32 0
  %1614 = load i64, i64* %ob_refcnt2692, align 8
  %dec2693 = add i64 %1614, -1
  store i64 %dec2693, i64* %ob_refcnt2692, align 8
  %cmp2694 = icmp ne i64 %dec2693, 0
  br i1 %cmp2694, label %if.then.2696, label %if.else.2697

if.then.2696:                                     ; preds = %do.body.2689
  br label %if.end.2700

if.else.2697:                                     ; preds = %do.body.2689
  %1615 = load %struct._object*, %struct._object** %_py_decref_tmp2691, align 8
  %ob_type2698 = getelementptr inbounds %struct._object, %struct._object* %1615, i32 0, i32 1
  %1616 = load %struct._typeobject*, %struct._typeobject** %ob_type2698, align 8
  %tp_dealloc2699 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1616, i32 0, i32 4
  %1617 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2699, align 8
  %1618 = load %struct._object*, %struct._object** %_py_decref_tmp2691, align 8
  call void %1617(%struct._object* %1618)
  br label %if.end.2700

if.end.2700:                                      ; preds = %if.else.2697, %if.then.2696
  br label %do.end.2701

do.end.2701:                                      ; preds = %if.end.2700
  %1619 = load i32, i32* %err2660, align 4
  %cmp2702 = icmp ne i32 %1619, 0
  br i1 %cmp2702, label %if.then.2704, label %if.end.2705

if.then.2704:                                     ; preds = %do.end.2701
  br label %error

if.end.2705:                                      ; preds = %do.end.2701
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2707, align 8
  %1620 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2707, align 8
  %_value2712 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1620, i32 0, i32 0
  store i32* %_value2712, i32** %volatile_data2711, align 8
  store i32 0, i32* %order2714, align 4
  %1621 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2707, align 8
  %1622 = bitcast %struct._Py_atomic_int* %1621 to i8*
  %1623 = load i32, i32* %order2714, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1622, i32 %1623)
  %1624 = load i32, i32* %order2714, align 4
  switch i32 %1624, label %sw.default.2716 [
    i32 2, label %sw.bb.2715
    i32 3, label %sw.bb.2715
    i32 4, label %sw.bb.2715
  ]

sw.bb.2715:                                       ; preds = %if.end.2705, %if.end.2705, %if.end.2705
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2717

sw.default.2716:                                  ; preds = %if.end.2705
  br label %sw.epilog.2717

sw.epilog.2717:                                   ; preds = %sw.default.2716, %sw.bb.2715
  %1625 = load i32*, i32** %volatile_data2711, align 8
  %1626 = load volatile i32, i32* %1625, align 4
  store i32 %1626, i32* %result2709, align 4
  %1627 = load i32, i32* %order2714, align 4
  switch i32 %1627, label %sw.default.2719 [
    i32 1, label %sw.bb.2718
    i32 3, label %sw.bb.2718
    i32 4, label %sw.bb.2718
  ]

sw.bb.2718:                                       ; preds = %sw.epilog.2717, %sw.epilog.2717, %sw.epilog.2717
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2720

sw.default.2719:                                  ; preds = %sw.epilog.2717
  br label %sw.epilog.2720

sw.epilog.2720:                                   ; preds = %sw.default.2719, %sw.bb.2718
  %1628 = load i32, i32* %result2709, align 4
  store i32 %1628, i32* %tmp2721
  %1629 = load i32, i32* %tmp2721
  %tobool2722 = icmp ne i32 %1629, 0
  br i1 %tobool2722, label %if.end.2735, label %if.then.2723

if.then.2723:                                     ; preds = %sw.epilog.2720
  %1630 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2724 = icmp ne i32 %1630, 0
  br i1 %tobool2724, label %if.end.2734, label %if.then.2725

if.then.2725:                                     ; preds = %if.then.2723
  %1631 = load i8*, i8** %next_instr, align 8
  %1632 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2726 = ptrtoint i8* %1631 to i64
  %sub.ptr.rhs.cast2727 = ptrtoint i8* %1632 to i64
  %sub.ptr.sub2728 = sub i64 %sub.ptr.lhs.cast2726, %sub.ptr.rhs.cast2727
  %conv2729 = trunc i64 %sub.ptr.sub2728 to i32
  %1633 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2730 = getelementptr inbounds %struct._frame, %struct._frame* %1633, i32 0, i32 13
  store i32 %conv2729, i32* %f_lasti2730, align 4
  %1634 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2731 = getelementptr i8, i8* %1634, i32 1
  store i8* %incdec.ptr2731, i8** %next_instr, align 8
  %1635 = load i8, i8* %1634, align 1
  %idxprom2732 = zext i8 %1635 to i64
  %arrayidx2733 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2732
  %1636 = load i8*, i8** %arrayidx2733, align 8
  br label %indirectgoto

if.end.2734:                                      ; preds = %if.then.2723
  br label %fast_next_opcode

if.end.2735:                                      ; preds = %sw.epilog.2720
  br label %for.cond

TARGET_DELETE_SUBSCR:                             ; preds = %indirectgoto
  store i32 61, i32* %opcode, align 4
  br label %sw.bb.2736

sw.bb.2736:                                       ; preds = %dispatch_opcode, %TARGET_DELETE_SUBSCR
  %1637 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2739 = getelementptr %struct._object*, %struct._object** %1637, i64 -1
  %1638 = load %struct._object*, %struct._object** %arrayidx2739, align 8
  store %struct._object* %1638, %struct._object** %sub2738, align 8
  %1639 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2742 = getelementptr %struct._object*, %struct._object** %1639, i64 -2
  %1640 = load %struct._object*, %struct._object** %arrayidx2742, align 8
  store %struct._object* %1640, %struct._object** %container2741, align 8
  %1641 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr2745 = getelementptr %struct._object*, %struct._object** %1641, i64 -2
  store %struct._object** %add.ptr2745, %struct._object*** %stack_pointer, align 8
  %1642 = load %struct._object*, %struct._object** %container2741, align 8
  %1643 = load %struct._object*, %struct._object** %sub2738, align 8
  %call2746 = call i32 @PyObject_DelItem(%struct._object* %1642, %struct._object* %1643)
  store i32 %call2746, i32* %err2744, align 4
  br label %do.body.2747

do.body.2747:                                     ; preds = %sw.bb.2736
  %1644 = load %struct._object*, %struct._object** %container2741, align 8
  store %struct._object* %1644, %struct._object** %_py_decref_tmp2749, align 8
  %1645 = load %struct._object*, %struct._object** %_py_decref_tmp2749, align 8
  %ob_refcnt2750 = getelementptr inbounds %struct._object, %struct._object* %1645, i32 0, i32 0
  %1646 = load i64, i64* %ob_refcnt2750, align 8
  %dec2751 = add i64 %1646, -1
  store i64 %dec2751, i64* %ob_refcnt2750, align 8
  %cmp2752 = icmp ne i64 %dec2751, 0
  br i1 %cmp2752, label %if.then.2754, label %if.else.2755

if.then.2754:                                     ; preds = %do.body.2747
  br label %if.end.2758

if.else.2755:                                     ; preds = %do.body.2747
  %1647 = load %struct._object*, %struct._object** %_py_decref_tmp2749, align 8
  %ob_type2756 = getelementptr inbounds %struct._object, %struct._object* %1647, i32 0, i32 1
  %1648 = load %struct._typeobject*, %struct._typeobject** %ob_type2756, align 8
  %tp_dealloc2757 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1648, i32 0, i32 4
  %1649 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2757, align 8
  %1650 = load %struct._object*, %struct._object** %_py_decref_tmp2749, align 8
  call void %1649(%struct._object* %1650)
  br label %if.end.2758

if.end.2758:                                      ; preds = %if.else.2755, %if.then.2754
  br label %do.end.2759

do.end.2759:                                      ; preds = %if.end.2758
  br label %do.body.2760

do.body.2760:                                     ; preds = %do.end.2759
  %1651 = load %struct._object*, %struct._object** %sub2738, align 8
  store %struct._object* %1651, %struct._object** %_py_decref_tmp2762, align 8
  %1652 = load %struct._object*, %struct._object** %_py_decref_tmp2762, align 8
  %ob_refcnt2763 = getelementptr inbounds %struct._object, %struct._object* %1652, i32 0, i32 0
  %1653 = load i64, i64* %ob_refcnt2763, align 8
  %dec2764 = add i64 %1653, -1
  store i64 %dec2764, i64* %ob_refcnt2763, align 8
  %cmp2765 = icmp ne i64 %dec2764, 0
  br i1 %cmp2765, label %if.then.2767, label %if.else.2768

if.then.2767:                                     ; preds = %do.body.2760
  br label %if.end.2771

if.else.2768:                                     ; preds = %do.body.2760
  %1654 = load %struct._object*, %struct._object** %_py_decref_tmp2762, align 8
  %ob_type2769 = getelementptr inbounds %struct._object, %struct._object* %1654, i32 0, i32 1
  %1655 = load %struct._typeobject*, %struct._typeobject** %ob_type2769, align 8
  %tp_dealloc2770 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1655, i32 0, i32 4
  %1656 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2770, align 8
  %1657 = load %struct._object*, %struct._object** %_py_decref_tmp2762, align 8
  call void %1656(%struct._object* %1657)
  br label %if.end.2771

if.end.2771:                                      ; preds = %if.else.2768, %if.then.2767
  br label %do.end.2772

do.end.2772:                                      ; preds = %if.end.2771
  %1658 = load i32, i32* %err2744, align 4
  %cmp2773 = icmp ne i32 %1658, 0
  br i1 %cmp2773, label %if.then.2775, label %if.end.2776

if.then.2775:                                     ; preds = %do.end.2772
  br label %error

if.end.2776:                                      ; preds = %do.end.2772
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2778, align 8
  %1659 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2778, align 8
  %_value2783 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1659, i32 0, i32 0
  store i32* %_value2783, i32** %volatile_data2782, align 8
  store i32 0, i32* %order2785, align 4
  %1660 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2778, align 8
  %1661 = bitcast %struct._Py_atomic_int* %1660 to i8*
  %1662 = load i32, i32* %order2785, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1661, i32 %1662)
  %1663 = load i32, i32* %order2785, align 4
  switch i32 %1663, label %sw.default.2787 [
    i32 2, label %sw.bb.2786
    i32 3, label %sw.bb.2786
    i32 4, label %sw.bb.2786
  ]

sw.bb.2786:                                       ; preds = %if.end.2776, %if.end.2776, %if.end.2776
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2788

sw.default.2787:                                  ; preds = %if.end.2776
  br label %sw.epilog.2788

sw.epilog.2788:                                   ; preds = %sw.default.2787, %sw.bb.2786
  %1664 = load i32*, i32** %volatile_data2782, align 8
  %1665 = load volatile i32, i32* %1664, align 4
  store i32 %1665, i32* %result2780, align 4
  %1666 = load i32, i32* %order2785, align 4
  switch i32 %1666, label %sw.default.2790 [
    i32 1, label %sw.bb.2789
    i32 3, label %sw.bb.2789
    i32 4, label %sw.bb.2789
  ]

sw.bb.2789:                                       ; preds = %sw.epilog.2788, %sw.epilog.2788, %sw.epilog.2788
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2791

sw.default.2790:                                  ; preds = %sw.epilog.2788
  br label %sw.epilog.2791

sw.epilog.2791:                                   ; preds = %sw.default.2790, %sw.bb.2789
  %1667 = load i32, i32* %result2780, align 4
  store i32 %1667, i32* %tmp2792
  %1668 = load i32, i32* %tmp2792
  %tobool2793 = icmp ne i32 %1668, 0
  br i1 %tobool2793, label %if.end.2806, label %if.then.2794

if.then.2794:                                     ; preds = %sw.epilog.2791
  %1669 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2795 = icmp ne i32 %1669, 0
  br i1 %tobool2795, label %if.end.2805, label %if.then.2796

if.then.2796:                                     ; preds = %if.then.2794
  %1670 = load i8*, i8** %next_instr, align 8
  %1671 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2797 = ptrtoint i8* %1670 to i64
  %sub.ptr.rhs.cast2798 = ptrtoint i8* %1671 to i64
  %sub.ptr.sub2799 = sub i64 %sub.ptr.lhs.cast2797, %sub.ptr.rhs.cast2798
  %conv2800 = trunc i64 %sub.ptr.sub2799 to i32
  %1672 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2801 = getelementptr inbounds %struct._frame, %struct._frame* %1672, i32 0, i32 13
  store i32 %conv2800, i32* %f_lasti2801, align 4
  %1673 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2802 = getelementptr i8, i8* %1673, i32 1
  store i8* %incdec.ptr2802, i8** %next_instr, align 8
  %1674 = load i8, i8* %1673, align 1
  %idxprom2803 = zext i8 %1674 to i64
  %arrayidx2804 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2803
  %1675 = load i8*, i8** %arrayidx2804, align 8
  br label %indirectgoto

if.end.2805:                                      ; preds = %if.then.2794
  br label %fast_next_opcode

if.end.2806:                                      ; preds = %sw.epilog.2791
  br label %for.cond

TARGET_PRINT_EXPR:                                ; preds = %indirectgoto
  store i32 70, i32* %opcode, align 4
  br label %sw.bb.2807

sw.bb.2807:                                       ; preds = %dispatch_opcode, %TARGET_PRINT_EXPR
  %1676 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2810 = getelementptr %struct._object*, %struct._object** %1676, i32 -1
  store %struct._object** %incdec.ptr2810, %struct._object*** %stack_pointer, align 8
  %1677 = load %struct._object*, %struct._object** %incdec.ptr2810, align 8
  store %struct._object* %1677, %struct._object** %value2809, align 8
  %call2812 = call %struct._object* @_PySys_GetObjectId(%struct._Py_Identifier* @PyEval_EvalFrameEx.PyId_displayhook)
  store %struct._object* %call2812, %struct._object** %hook, align 8
  %1678 = load %struct._object*, %struct._object** %hook, align 8
  %cmp2815 = icmp eq %struct._object* %1678, null
  br i1 %cmp2815, label %if.then.2817, label %if.end.2831

if.then.2817:                                     ; preds = %sw.bb.2807
  %1679 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %1679, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i32 0, i32 0))
  br label %do.body.2818

do.body.2818:                                     ; preds = %if.then.2817
  %1680 = load %struct._object*, %struct._object** %value2809, align 8
  store %struct._object* %1680, %struct._object** %_py_decref_tmp2820, align 8
  %1681 = load %struct._object*, %struct._object** %_py_decref_tmp2820, align 8
  %ob_refcnt2821 = getelementptr inbounds %struct._object, %struct._object* %1681, i32 0, i32 0
  %1682 = load i64, i64* %ob_refcnt2821, align 8
  %dec2822 = add i64 %1682, -1
  store i64 %dec2822, i64* %ob_refcnt2821, align 8
  %cmp2823 = icmp ne i64 %dec2822, 0
  br i1 %cmp2823, label %if.then.2825, label %if.else.2826

if.then.2825:                                     ; preds = %do.body.2818
  br label %if.end.2829

if.else.2826:                                     ; preds = %do.body.2818
  %1683 = load %struct._object*, %struct._object** %_py_decref_tmp2820, align 8
  %ob_type2827 = getelementptr inbounds %struct._object, %struct._object* %1683, i32 0, i32 1
  %1684 = load %struct._typeobject*, %struct._typeobject** %ob_type2827, align 8
  %tp_dealloc2828 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1684, i32 0, i32 4
  %1685 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2828, align 8
  %1686 = load %struct._object*, %struct._object** %_py_decref_tmp2820, align 8
  call void %1685(%struct._object* %1686)
  br label %if.end.2829

if.end.2829:                                      ; preds = %if.else.2826, %if.then.2825
  br label %do.end.2830

do.end.2830:                                      ; preds = %if.end.2829
  br label %error

if.end.2831:                                      ; preds = %sw.bb.2807
  %1687 = load %struct._object*, %struct._object** %hook, align 8
  %1688 = load %struct._object*, %struct._object** %value2809, align 8
  %call2832 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %1687, %struct._object* %1688, i8* null)
  store %struct._object* %call2832, %struct._object** %res2814, align 8
  br label %do.body.2833

do.body.2833:                                     ; preds = %if.end.2831
  %1689 = load %struct._object*, %struct._object** %value2809, align 8
  store %struct._object* %1689, %struct._object** %_py_decref_tmp2835, align 8
  %1690 = load %struct._object*, %struct._object** %_py_decref_tmp2835, align 8
  %ob_refcnt2836 = getelementptr inbounds %struct._object, %struct._object* %1690, i32 0, i32 0
  %1691 = load i64, i64* %ob_refcnt2836, align 8
  %dec2837 = add i64 %1691, -1
  store i64 %dec2837, i64* %ob_refcnt2836, align 8
  %cmp2838 = icmp ne i64 %dec2837, 0
  br i1 %cmp2838, label %if.then.2840, label %if.else.2841

if.then.2840:                                     ; preds = %do.body.2833
  br label %if.end.2844

if.else.2841:                                     ; preds = %do.body.2833
  %1692 = load %struct._object*, %struct._object** %_py_decref_tmp2835, align 8
  %ob_type2842 = getelementptr inbounds %struct._object, %struct._object* %1692, i32 0, i32 1
  %1693 = load %struct._typeobject*, %struct._typeobject** %ob_type2842, align 8
  %tp_dealloc2843 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1693, i32 0, i32 4
  %1694 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2843, align 8
  %1695 = load %struct._object*, %struct._object** %_py_decref_tmp2835, align 8
  call void %1694(%struct._object* %1695)
  br label %if.end.2844

if.end.2844:                                      ; preds = %if.else.2841, %if.then.2840
  br label %do.end.2845

do.end.2845:                                      ; preds = %if.end.2844
  %1696 = load %struct._object*, %struct._object** %res2814, align 8
  %cmp2846 = icmp eq %struct._object* %1696, null
  br i1 %cmp2846, label %if.then.2848, label %if.end.2849

if.then.2848:                                     ; preds = %do.end.2845
  br label %error

if.end.2849:                                      ; preds = %do.end.2845
  br label %do.body.2850

do.body.2850:                                     ; preds = %if.end.2849
  %1697 = load %struct._object*, %struct._object** %res2814, align 8
  store %struct._object* %1697, %struct._object** %_py_decref_tmp2852, align 8
  %1698 = load %struct._object*, %struct._object** %_py_decref_tmp2852, align 8
  %ob_refcnt2853 = getelementptr inbounds %struct._object, %struct._object* %1698, i32 0, i32 0
  %1699 = load i64, i64* %ob_refcnt2853, align 8
  %dec2854 = add i64 %1699, -1
  store i64 %dec2854, i64* %ob_refcnt2853, align 8
  %cmp2855 = icmp ne i64 %dec2854, 0
  br i1 %cmp2855, label %if.then.2857, label %if.else.2858

if.then.2857:                                     ; preds = %do.body.2850
  br label %if.end.2861

if.else.2858:                                     ; preds = %do.body.2850
  %1700 = load %struct._object*, %struct._object** %_py_decref_tmp2852, align 8
  %ob_type2859 = getelementptr inbounds %struct._object, %struct._object* %1700, i32 0, i32 1
  %1701 = load %struct._typeobject*, %struct._typeobject** %ob_type2859, align 8
  %tp_dealloc2860 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1701, i32 0, i32 4
  %1702 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2860, align 8
  %1703 = load %struct._object*, %struct._object** %_py_decref_tmp2852, align 8
  call void %1702(%struct._object* %1703)
  br label %if.end.2861

if.end.2861:                                      ; preds = %if.else.2858, %if.then.2857
  br label %do.end.2862

do.end.2862:                                      ; preds = %if.end.2861
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2864, align 8
  %1704 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2864, align 8
  %_value2869 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1704, i32 0, i32 0
  store i32* %_value2869, i32** %volatile_data2868, align 8
  store i32 0, i32* %order2871, align 4
  %1705 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2864, align 8
  %1706 = bitcast %struct._Py_atomic_int* %1705 to i8*
  %1707 = load i32, i32* %order2871, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1706, i32 %1707)
  %1708 = load i32, i32* %order2871, align 4
  switch i32 %1708, label %sw.default.2873 [
    i32 2, label %sw.bb.2872
    i32 3, label %sw.bb.2872
    i32 4, label %sw.bb.2872
  ]

sw.bb.2872:                                       ; preds = %do.end.2862, %do.end.2862, %do.end.2862
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2874

sw.default.2873:                                  ; preds = %do.end.2862
  br label %sw.epilog.2874

sw.epilog.2874:                                   ; preds = %sw.default.2873, %sw.bb.2872
  %1709 = load i32*, i32** %volatile_data2868, align 8
  %1710 = load volatile i32, i32* %1709, align 4
  store i32 %1710, i32* %result2866, align 4
  %1711 = load i32, i32* %order2871, align 4
  switch i32 %1711, label %sw.default.2876 [
    i32 1, label %sw.bb.2875
    i32 3, label %sw.bb.2875
    i32 4, label %sw.bb.2875
  ]

sw.bb.2875:                                       ; preds = %sw.epilog.2874, %sw.epilog.2874, %sw.epilog.2874
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.2877

sw.default.2876:                                  ; preds = %sw.epilog.2874
  br label %sw.epilog.2877

sw.epilog.2877:                                   ; preds = %sw.default.2876, %sw.bb.2875
  %1712 = load i32, i32* %result2866, align 4
  store i32 %1712, i32* %tmp2878
  %1713 = load i32, i32* %tmp2878
  %tobool2879 = icmp ne i32 %1713, 0
  br i1 %tobool2879, label %if.end.2892, label %if.then.2880

if.then.2880:                                     ; preds = %sw.epilog.2877
  %1714 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool2881 = icmp ne i32 %1714, 0
  br i1 %tobool2881, label %if.end.2891, label %if.then.2882

if.then.2882:                                     ; preds = %if.then.2880
  %1715 = load i8*, i8** %next_instr, align 8
  %1716 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast2883 = ptrtoint i8* %1715 to i64
  %sub.ptr.rhs.cast2884 = ptrtoint i8* %1716 to i64
  %sub.ptr.sub2885 = sub i64 %sub.ptr.lhs.cast2883, %sub.ptr.rhs.cast2884
  %conv2886 = trunc i64 %sub.ptr.sub2885 to i32
  %1717 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti2887 = getelementptr inbounds %struct._frame, %struct._frame* %1717, i32 0, i32 13
  store i32 %conv2886, i32* %f_lasti2887, align 4
  %1718 = load i8*, i8** %next_instr, align 8
  %incdec.ptr2888 = getelementptr i8, i8* %1718, i32 1
  store i8* %incdec.ptr2888, i8** %next_instr, align 8
  %1719 = load i8, i8* %1718, align 1
  %idxprom2889 = zext i8 %1719 to i64
  %arrayidx2890 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom2889
  %1720 = load i8*, i8** %arrayidx2890, align 8
  br label %indirectgoto

if.end.2891:                                      ; preds = %if.then.2880
  br label %fast_next_opcode

if.end.2892:                                      ; preds = %sw.epilog.2877
  br label %for.cond

TARGET_RAISE_VARARGS:                             ; preds = %indirectgoto
  store i32 130, i32* %opcode, align 4
  %1721 = load i8*, i8** %next_instr, align 8
  %add.ptr2893 = getelementptr i8, i8* %1721, i64 2
  store i8* %add.ptr2893, i8** %next_instr, align 8
  %1722 = load i8*, i8** %next_instr, align 8
  %arrayidx2894 = getelementptr i8, i8* %1722, i64 -1
  %1723 = load i8, i8* %arrayidx2894, align 1
  %conv2895 = zext i8 %1723 to i32
  %shl2896 = shl i32 %conv2895, 8
  %1724 = load i8*, i8** %next_instr, align 8
  %arrayidx2897 = getelementptr i8, i8* %1724, i64 -2
  %1725 = load i8, i8* %arrayidx2897, align 1
  %conv2898 = zext i8 %1725 to i32
  %add2899 = add i32 %shl2896, %conv2898
  store i32 %add2899, i32* %oparg, align 4
  br label %sw.bb.2900

sw.bb.2900:                                       ; preds = %dispatch_opcode, %TARGET_RAISE_VARARGS
  store %struct._object* null, %struct._object** %cause, align 8
  store %struct._object* null, %struct._object** %exc2903, align 8
  %1726 = load i32, i32* %oparg, align 4
  switch i32 %1726, label %sw.default.2913 [
    i32 2, label %sw.bb.2904
    i32 1, label %sw.bb.2906
    i32 0, label %sw.bb.2908
  ]

sw.bb.2904:                                       ; preds = %sw.bb.2900
  %1727 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2905 = getelementptr %struct._object*, %struct._object** %1727, i32 -1
  store %struct._object** %incdec.ptr2905, %struct._object*** %stack_pointer, align 8
  %1728 = load %struct._object*, %struct._object** %incdec.ptr2905, align 8
  store %struct._object* %1728, %struct._object** %cause, align 8
  br label %sw.bb.2906

sw.bb.2906:                                       ; preds = %sw.bb.2900, %sw.bb.2904
  %1729 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2907 = getelementptr %struct._object*, %struct._object** %1729, i32 -1
  store %struct._object** %incdec.ptr2907, %struct._object*** %stack_pointer, align 8
  %1730 = load %struct._object*, %struct._object** %incdec.ptr2907, align 8
  store %struct._object* %1730, %struct._object** %exc2903, align 8
  br label %sw.bb.2908

sw.bb.2908:                                       ; preds = %sw.bb.2900, %sw.bb.2906
  %1731 = load %struct._object*, %struct._object** %exc2903, align 8
  %1732 = load %struct._object*, %struct._object** %cause, align 8
  %call2909 = call i32 @do_raise(%struct._object* %1731, %struct._object* %1732)
  %tobool2910 = icmp ne i32 %call2909, 0
  br i1 %tobool2910, label %if.then.2911, label %if.end.2912

if.then.2911:                                     ; preds = %sw.bb.2908
  store i32 2, i32* %why, align 4
  br label %fast_block_end

if.end.2912:                                      ; preds = %sw.bb.2908
  br label %sw.epilog.2914

sw.default.2913:                                  ; preds = %sw.bb.2900
  %1733 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %1733, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i32 0, i32 0))
  br label %sw.epilog.2914

sw.epilog.2914:                                   ; preds = %sw.default.2913, %if.end.2912
  br label %error

TARGET_RETURN_VALUE:                              ; preds = %indirectgoto
  store i32 83, i32* %opcode, align 4
  br label %sw.bb.2915

sw.bb.2915:                                       ; preds = %dispatch_opcode, %TARGET_RETURN_VALUE
  %1734 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2916 = getelementptr %struct._object*, %struct._object** %1734, i32 -1
  store %struct._object** %incdec.ptr2916, %struct._object*** %stack_pointer, align 8
  %1735 = load %struct._object*, %struct._object** %incdec.ptr2916, align 8
  store %struct._object* %1735, %struct._object** %retval1, align 8
  store i32 8, i32* %why, align 4
  br label %fast_block_end

TARGET_YIELD_FROM:                                ; preds = %indirectgoto
  store i32 72, i32* %opcode, align 4
  br label %sw.bb.2917

sw.bb.2917:                                       ; preds = %dispatch_opcode, %TARGET_YIELD_FROM
  %1736 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr2920 = getelementptr %struct._object*, %struct._object** %1736, i32 -1
  store %struct._object** %incdec.ptr2920, %struct._object*** %stack_pointer, align 8
  %1737 = load %struct._object*, %struct._object** %incdec.ptr2920, align 8
  store %struct._object* %1737, %struct._object** %v2919, align 8
  %1738 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2922 = getelementptr %struct._object*, %struct._object** %1738, i64 -1
  %1739 = load %struct._object*, %struct._object** %arrayidx2922, align 8
  store %struct._object* %1739, %struct._object** %reciever, align 8
  %1740 = load %struct._object*, %struct._object** %reciever, align 8
  %ob_type2925 = getelementptr inbounds %struct._object, %struct._object* %1740, i32 0, i32 1
  %1741 = load %struct._typeobject*, %struct._typeobject** %ob_type2925, align 8
  %cmp2926 = icmp eq %struct._typeobject* %1741, @PyGen_Type
  br i1 %cmp2926, label %if.then.2928, label %if.else.2930

if.then.2928:                                     ; preds = %sw.bb.2917
  %1742 = load %struct._object*, %struct._object** %reciever, align 8
  %1743 = bitcast %struct._object* %1742 to %struct.PyGenObject*
  %1744 = load %struct._object*, %struct._object** %v2919, align 8
  %call2929 = call %struct._object* @_PyGen_Send(%struct.PyGenObject* %1743, %struct._object* %1744)
  store %struct._object* %call2929, %struct._object** %retval1, align 8
  br label %if.end.2940

if.else.2930:                                     ; preds = %sw.bb.2917
  %1745 = load %struct._object*, %struct._object** %v2919, align 8
  %cmp2931 = icmp eq %struct._object* %1745, @_Py_NoneStruct
  br i1 %cmp2931, label %if.then.2933, label %if.else.2937

if.then.2933:                                     ; preds = %if.else.2930
  %1746 = load %struct._object*, %struct._object** %reciever, align 8
  %ob_type2934 = getelementptr inbounds %struct._object, %struct._object* %1746, i32 0, i32 1
  %1747 = load %struct._typeobject*, %struct._typeobject** %ob_type2934, align 8
  %tp_iternext = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1747, i32 0, i32 26
  %tp_iternext2935 = bitcast {}** %tp_iternext to %struct._object* (%struct._object*)**
  %1748 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext2935, align 8
  %1749 = load %struct._object*, %struct._object** %reciever, align 8
  %call2936 = call %struct._object* %1748(%struct._object* %1749)
  store %struct._object* %call2936, %struct._object** %retval1, align 8
  br label %if.end.2939

if.else.2937:                                     ; preds = %if.else.2930
  %1750 = load %struct._object*, %struct._object** %reciever, align 8
  %1751 = load %struct._object*, %struct._object** %v2919, align 8
  %call2938 = call %struct._object* (%struct._object*, %struct._Py_Identifier*, ...) @_PyObject_CallMethodIdObjArgs(%struct._object* %1750, %struct._Py_Identifier* @PyEval_EvalFrameEx.PyId_send, %struct._object* %1751, i8* null)
  store %struct._object* %call2938, %struct._object** %retval1, align 8
  br label %if.end.2939

if.end.2939:                                      ; preds = %if.else.2937, %if.then.2933
  br label %if.end.2940

if.end.2940:                                      ; preds = %if.end.2939, %if.then.2928
  br label %do.body.2941

do.body.2941:                                     ; preds = %if.end.2940
  %1752 = load %struct._object*, %struct._object** %v2919, align 8
  store %struct._object* %1752, %struct._object** %_py_decref_tmp2943, align 8
  %1753 = load %struct._object*, %struct._object** %_py_decref_tmp2943, align 8
  %ob_refcnt2944 = getelementptr inbounds %struct._object, %struct._object* %1753, i32 0, i32 0
  %1754 = load i64, i64* %ob_refcnt2944, align 8
  %dec2945 = add i64 %1754, -1
  store i64 %dec2945, i64* %ob_refcnt2944, align 8
  %cmp2946 = icmp ne i64 %dec2945, 0
  br i1 %cmp2946, label %if.then.2948, label %if.else.2949

if.then.2948:                                     ; preds = %do.body.2941
  br label %if.end.2952

if.else.2949:                                     ; preds = %do.body.2941
  %1755 = load %struct._object*, %struct._object** %_py_decref_tmp2943, align 8
  %ob_type2950 = getelementptr inbounds %struct._object, %struct._object* %1755, i32 0, i32 1
  %1756 = load %struct._typeobject*, %struct._typeobject** %ob_type2950, align 8
  %tp_dealloc2951 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1756, i32 0, i32 4
  %1757 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2951, align 8
  %1758 = load %struct._object*, %struct._object** %_py_decref_tmp2943, align 8
  call void %1757(%struct._object* %1758)
  br label %if.end.2952

if.end.2952:                                      ; preds = %if.else.2949, %if.then.2948
  br label %do.end.2953

do.end.2953:                                      ; preds = %if.end.2952
  %1759 = load %struct._object*, %struct._object** %retval1, align 8
  %cmp2954 = icmp eq %struct._object* %1759, null
  br i1 %cmp2954, label %if.then.2956, label %if.end.3017

if.then.2956:                                     ; preds = %do.end.2953
  %1760 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc2958 = getelementptr inbounds %struct._ts, %struct._ts* %1760, i32 0, i32 10
  %1761 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc2958, align 8
  %cmp2959 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %1761, null
  br i1 %cmp2959, label %land.lhs.true.2961, label %if.end.2967

land.lhs.true.2961:                               ; preds = %if.then.2956
  %1762 = load %struct._object*, %struct._object** @PyExc_StopIteration, align 8
  %call2962 = call i32 @PyErr_ExceptionMatches(%struct._object* %1762)
  %tobool2963 = icmp ne i32 %call2962, 0
  br i1 %tobool2963, label %if.then.2964, label %if.end.2967

if.then.2964:                                     ; preds = %land.lhs.true.2961
  %1763 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc2965 = getelementptr inbounds %struct._ts, %struct._ts* %1763, i32 0, i32 10
  %1764 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc2965, align 8
  %1765 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj2966 = getelementptr inbounds %struct._ts, %struct._ts* %1765, i32 0, i32 12
  %1766 = load %struct._object*, %struct._object** %c_traceobj2966, align 8
  %1767 = load %struct._ts*, %struct._ts** %tstate, align 8
  %1768 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @call_exc_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %1764, %struct._object* %1766, %struct._ts* %1767, %struct._frame* %1768)
  br label %if.end.2967

if.end.2967:                                      ; preds = %if.then.2964, %land.lhs.true.2961, %if.then.2956
  %call2968 = call i32 @_PyGen_FetchStopIterationValue(%struct._object** %val)
  store i32 %call2968, i32* %err2924, align 4
  %1769 = load i32, i32* %err2924, align 4
  %cmp2969 = icmp slt i32 %1769, 0
  br i1 %cmp2969, label %if.then.2971, label %if.end.2972

if.then.2971:                                     ; preds = %if.end.2967
  br label %error

if.end.2972:                                      ; preds = %if.end.2967
  br label %do.body.2973

do.body.2973:                                     ; preds = %if.end.2972
  %1770 = load %struct._object*, %struct._object** %reciever, align 8
  store %struct._object* %1770, %struct._object** %_py_decref_tmp2975, align 8
  %1771 = load %struct._object*, %struct._object** %_py_decref_tmp2975, align 8
  %ob_refcnt2976 = getelementptr inbounds %struct._object, %struct._object* %1771, i32 0, i32 0
  %1772 = load i64, i64* %ob_refcnt2976, align 8
  %dec2977 = add i64 %1772, -1
  store i64 %dec2977, i64* %ob_refcnt2976, align 8
  %cmp2978 = icmp ne i64 %dec2977, 0
  br i1 %cmp2978, label %if.then.2980, label %if.else.2981

if.then.2980:                                     ; preds = %do.body.2973
  br label %if.end.2984

if.else.2981:                                     ; preds = %do.body.2973
  %1773 = load %struct._object*, %struct._object** %_py_decref_tmp2975, align 8
  %ob_type2982 = getelementptr inbounds %struct._object, %struct._object* %1773, i32 0, i32 1
  %1774 = load %struct._typeobject*, %struct._typeobject** %ob_type2982, align 8
  %tp_dealloc2983 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1774, i32 0, i32 4
  %1775 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc2983, align 8
  %1776 = load %struct._object*, %struct._object** %_py_decref_tmp2975, align 8
  call void %1775(%struct._object* %1776)
  br label %if.end.2984

if.end.2984:                                      ; preds = %if.else.2981, %if.then.2980
  br label %do.end.2985

do.end.2985:                                      ; preds = %if.end.2984
  %1777 = load %struct._object*, %struct._object** %val, align 8
  %1778 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx2986 = getelementptr %struct._object*, %struct._object** %1778, i64 -1
  store %struct._object* %1777, %struct._object** %arrayidx2986, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val2988, align 8
  %1779 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2988, align 8
  %_value2993 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1779, i32 0, i32 0
  store i32* %_value2993, i32** %volatile_data2992, align 8
  store i32 0, i32* %order2995, align 4
  %1780 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val2988, align 8
  %1781 = bitcast %struct._Py_atomic_int* %1780 to i8*
  %1782 = load i32, i32* %order2995, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1781, i32 %1782)
  %1783 = load i32, i32* %order2995, align 4
  switch i32 %1783, label %sw.default.2997 [
    i32 2, label %sw.bb.2996
    i32 3, label %sw.bb.2996
    i32 4, label %sw.bb.2996
  ]

sw.bb.2996:                                       ; preds = %do.end.2985, %do.end.2985, %do.end.2985
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.2998

sw.default.2997:                                  ; preds = %do.end.2985
  br label %sw.epilog.2998

sw.epilog.2998:                                   ; preds = %sw.default.2997, %sw.bb.2996
  %1784 = load i32*, i32** %volatile_data2992, align 8
  %1785 = load volatile i32, i32* %1784, align 4
  store i32 %1785, i32* %result2990, align 4
  %1786 = load i32, i32* %order2995, align 4
  switch i32 %1786, label %sw.default.3000 [
    i32 1, label %sw.bb.2999
    i32 3, label %sw.bb.2999
    i32 4, label %sw.bb.2999
  ]

sw.bb.2999:                                       ; preds = %sw.epilog.2998, %sw.epilog.2998, %sw.epilog.2998
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3001

sw.default.3000:                                  ; preds = %sw.epilog.2998
  br label %sw.epilog.3001

sw.epilog.3001:                                   ; preds = %sw.default.3000, %sw.bb.2999
  %1787 = load i32, i32* %result2990, align 4
  store i32 %1787, i32* %tmp3002
  %1788 = load i32, i32* %tmp3002
  %tobool3003 = icmp ne i32 %1788, 0
  br i1 %tobool3003, label %if.end.3016, label %if.then.3004

if.then.3004:                                     ; preds = %sw.epilog.3001
  %1789 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3005 = icmp ne i32 %1789, 0
  br i1 %tobool3005, label %if.end.3015, label %if.then.3006

if.then.3006:                                     ; preds = %if.then.3004
  %1790 = load i8*, i8** %next_instr, align 8
  %1791 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3007 = ptrtoint i8* %1790 to i64
  %sub.ptr.rhs.cast3008 = ptrtoint i8* %1791 to i64
  %sub.ptr.sub3009 = sub i64 %sub.ptr.lhs.cast3007, %sub.ptr.rhs.cast3008
  %conv3010 = trunc i64 %sub.ptr.sub3009 to i32
  %1792 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3011 = getelementptr inbounds %struct._frame, %struct._frame* %1792, i32 0, i32 13
  store i32 %conv3010, i32* %f_lasti3011, align 4
  %1793 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3012 = getelementptr i8, i8* %1793, i32 1
  store i8* %incdec.ptr3012, i8** %next_instr, align 8
  %1794 = load i8, i8* %1793, align 1
  %idxprom3013 = zext i8 %1794 to i64
  %arrayidx3014 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3013
  %1795 = load i8*, i8** %arrayidx3014, align 8
  br label %indirectgoto

if.end.3015:                                      ; preds = %if.then.3004
  br label %fast_next_opcode

if.end.3016:                                      ; preds = %sw.epilog.3001
  br label %for.cond

if.end.3017:                                      ; preds = %do.end.2953
  %1796 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %1797 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop3018 = getelementptr inbounds %struct._frame, %struct._frame* %1797, i32 0, i32 7
  store %struct._object** %1796, %struct._object*** %f_stacktop3018, align 8
  store i32 64, i32* %why, align 4
  %1798 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3019 = getelementptr inbounds %struct._frame, %struct._frame* %1798, i32 0, i32 13
  %1799 = load i32, i32* %f_lasti3019, align 4
  %dec3020 = add i32 %1799, -1
  store i32 %dec3020, i32* %f_lasti3019, align 4
  br label %fast_yield

TARGET_YIELD_VALUE:                               ; preds = %indirectgoto
  store i32 86, i32* %opcode, align 4
  br label %sw.bb.3021

sw.bb.3021:                                       ; preds = %dispatch_opcode, %TARGET_YIELD_VALUE
  %1800 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3022 = getelementptr %struct._object*, %struct._object** %1800, i32 -1
  store %struct._object** %incdec.ptr3022, %struct._object*** %stack_pointer, align 8
  %1801 = load %struct._object*, %struct._object** %incdec.ptr3022, align 8
  store %struct._object* %1801, %struct._object** %retval1, align 8
  %1802 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %1803 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_stacktop3023 = getelementptr inbounds %struct._frame, %struct._frame* %1803, i32 0, i32 7
  store %struct._object** %1802, %struct._object*** %f_stacktop3023, align 8
  store i32 64, i32* %why, align 4
  br label %fast_yield

TARGET_POP_EXCEPT:                                ; preds = %indirectgoto
  store i32 89, i32* %opcode, align 4
  br label %sw.bb.3024

sw.bb.3024:                                       ; preds = %dispatch_opcode, %TARGET_POP_EXCEPT
  %1804 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call3026 = call %struct.PyTryBlock* @PyFrame_BlockPop(%struct._frame* %1804)
  store %struct.PyTryBlock* %call3026, %struct.PyTryBlock** %b, align 8
  %1805 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b, align 8
  %b_type = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %1805, i32 0, i32 0
  %1806 = load i32, i32* %b_type, align 4
  %cmp3027 = icmp ne i32 %1806, 257
  br i1 %cmp3027, label %if.then.3029, label %if.end.3030

if.then.3029:                                     ; preds = %sw.bb.3024
  %1807 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %1807, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.19, i32 0, i32 0))
  br label %error

if.end.3030:                                      ; preds = %sw.bb.3024
  br label %while.cond

while.cond:                                       ; preds = %do.end.3063, %if.end.3030
  %1808 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %1809 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack = getelementptr inbounds %struct._frame, %struct._frame* %1809, i32 0, i32 6
  %1810 = load %struct._object**, %struct._object*** %f_valuestack, align 8
  %sub.ptr.lhs.cast3035 = ptrtoint %struct._object** %1808 to i64
  %sub.ptr.rhs.cast3036 = ptrtoint %struct._object** %1810 to i64
  %sub.ptr.sub3037 = sub i64 %sub.ptr.lhs.cast3035, %sub.ptr.rhs.cast3036
  %sub.ptr.div = sdiv exact i64 %sub.ptr.sub3037, 8
  %conv3038 = trunc i64 %sub.ptr.div to i32
  %1811 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b, align 8
  %b_level = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %1811, i32 0, i32 2
  %1812 = load i32, i32* %b_level, align 4
  %add3039 = add i32 %1812, 3
  %cmp3040 = icmp sgt i32 %conv3038, %add3039
  br i1 %cmp3040, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %1813 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3042 = getelementptr %struct._object*, %struct._object** %1813, i32 -1
  store %struct._object** %incdec.ptr3042, %struct._object*** %stack_pointer, align 8
  %1814 = load %struct._object*, %struct._object** %incdec.ptr3042, align 8
  store %struct._object* %1814, %struct._object** %value3033, align 8
  br label %do.body.3043

do.body.3043:                                     ; preds = %while.body
  %1815 = load %struct._object*, %struct._object** %value3033, align 8
  store %struct._object* %1815, %struct._object** %_py_xdecref_tmp3045, align 8
  %1816 = load %struct._object*, %struct._object** %_py_xdecref_tmp3045, align 8
  %cmp3046 = icmp ne %struct._object* %1816, null
  br i1 %cmp3046, label %if.then.3048, label %if.end.3062

if.then.3048:                                     ; preds = %do.body.3043
  br label %do.body.3049

do.body.3049:                                     ; preds = %if.then.3048
  %1817 = load %struct._object*, %struct._object** %_py_xdecref_tmp3045, align 8
  store %struct._object* %1817, %struct._object** %_py_decref_tmp3051, align 8
  %1818 = load %struct._object*, %struct._object** %_py_decref_tmp3051, align 8
  %ob_refcnt3052 = getelementptr inbounds %struct._object, %struct._object* %1818, i32 0, i32 0
  %1819 = load i64, i64* %ob_refcnt3052, align 8
  %dec3053 = add i64 %1819, -1
  store i64 %dec3053, i64* %ob_refcnt3052, align 8
  %cmp3054 = icmp ne i64 %dec3053, 0
  br i1 %cmp3054, label %if.then.3056, label %if.else.3057

if.then.3056:                                     ; preds = %do.body.3049
  br label %if.end.3060

if.else.3057:                                     ; preds = %do.body.3049
  %1820 = load %struct._object*, %struct._object** %_py_decref_tmp3051, align 8
  %ob_type3058 = getelementptr inbounds %struct._object, %struct._object* %1820, i32 0, i32 1
  %1821 = load %struct._typeobject*, %struct._typeobject** %ob_type3058, align 8
  %tp_dealloc3059 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1821, i32 0, i32 4
  %1822 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3059, align 8
  %1823 = load %struct._object*, %struct._object** %_py_decref_tmp3051, align 8
  call void %1822(%struct._object* %1823)
  br label %if.end.3060

if.end.3060:                                      ; preds = %if.else.3057, %if.then.3056
  br label %do.end.3061

do.end.3061:                                      ; preds = %if.end.3060
  br label %if.end.3062

if.end.3062:                                      ; preds = %do.end.3061, %do.body.3043
  br label %do.end.3063

do.end.3063:                                      ; preds = %if.end.3062
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %1824 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type = getelementptr inbounds %struct._ts, %struct._ts* %1824, i32 0, i32 16
  %1825 = load %struct._object*, %struct._object** %exc_type, align 8
  store %struct._object* %1825, %struct._object** %type, align 8
  %1826 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value = getelementptr inbounds %struct._ts, %struct._ts* %1826, i32 0, i32 17
  %1827 = load %struct._object*, %struct._object** %exc_value, align 8
  store %struct._object* %1827, %struct._object** %value3033, align 8
  %1828 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback = getelementptr inbounds %struct._ts, %struct._ts* %1828, i32 0, i32 18
  %1829 = load %struct._object*, %struct._object** %exc_traceback, align 8
  store %struct._object* %1829, %struct._object** %traceback, align 8
  %1830 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3064 = getelementptr %struct._object*, %struct._object** %1830, i32 -1
  store %struct._object** %incdec.ptr3064, %struct._object*** %stack_pointer, align 8
  %1831 = load %struct._object*, %struct._object** %incdec.ptr3064, align 8
  %1832 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type3065 = getelementptr inbounds %struct._ts, %struct._ts* %1832, i32 0, i32 16
  store %struct._object* %1831, %struct._object** %exc_type3065, align 8
  %1833 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3066 = getelementptr %struct._object*, %struct._object** %1833, i32 -1
  store %struct._object** %incdec.ptr3066, %struct._object*** %stack_pointer, align 8
  %1834 = load %struct._object*, %struct._object** %incdec.ptr3066, align 8
  %1835 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value3067 = getelementptr inbounds %struct._ts, %struct._ts* %1835, i32 0, i32 17
  store %struct._object* %1834, %struct._object** %exc_value3067, align 8
  %1836 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3068 = getelementptr %struct._object*, %struct._object** %1836, i32 -1
  store %struct._object** %incdec.ptr3068, %struct._object*** %stack_pointer, align 8
  %1837 = load %struct._object*, %struct._object** %incdec.ptr3068, align 8
  %1838 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback3069 = getelementptr inbounds %struct._ts, %struct._ts* %1838, i32 0, i32 18
  store %struct._object* %1837, %struct._object** %exc_traceback3069, align 8
  br label %do.body.3070

do.body.3070:                                     ; preds = %while.end
  %1839 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %1839, %struct._object** %_py_xdecref_tmp3072, align 8
  %1840 = load %struct._object*, %struct._object** %_py_xdecref_tmp3072, align 8
  %cmp3073 = icmp ne %struct._object* %1840, null
  br i1 %cmp3073, label %if.then.3075, label %if.end.3089

if.then.3075:                                     ; preds = %do.body.3070
  br label %do.body.3076

do.body.3076:                                     ; preds = %if.then.3075
  %1841 = load %struct._object*, %struct._object** %_py_xdecref_tmp3072, align 8
  store %struct._object* %1841, %struct._object** %_py_decref_tmp3078, align 8
  %1842 = load %struct._object*, %struct._object** %_py_decref_tmp3078, align 8
  %ob_refcnt3079 = getelementptr inbounds %struct._object, %struct._object* %1842, i32 0, i32 0
  %1843 = load i64, i64* %ob_refcnt3079, align 8
  %dec3080 = add i64 %1843, -1
  store i64 %dec3080, i64* %ob_refcnt3079, align 8
  %cmp3081 = icmp ne i64 %dec3080, 0
  br i1 %cmp3081, label %if.then.3083, label %if.else.3084

if.then.3083:                                     ; preds = %do.body.3076
  br label %if.end.3087

if.else.3084:                                     ; preds = %do.body.3076
  %1844 = load %struct._object*, %struct._object** %_py_decref_tmp3078, align 8
  %ob_type3085 = getelementptr inbounds %struct._object, %struct._object* %1844, i32 0, i32 1
  %1845 = load %struct._typeobject*, %struct._typeobject** %ob_type3085, align 8
  %tp_dealloc3086 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1845, i32 0, i32 4
  %1846 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3086, align 8
  %1847 = load %struct._object*, %struct._object** %_py_decref_tmp3078, align 8
  call void %1846(%struct._object* %1847)
  br label %if.end.3087

if.end.3087:                                      ; preds = %if.else.3084, %if.then.3083
  br label %do.end.3088

do.end.3088:                                      ; preds = %if.end.3087
  br label %if.end.3089

if.end.3089:                                      ; preds = %do.end.3088, %do.body.3070
  br label %do.end.3090

do.end.3090:                                      ; preds = %if.end.3089
  br label %do.body.3091

do.body.3091:                                     ; preds = %do.end.3090
  %1848 = load %struct._object*, %struct._object** %value3033, align 8
  store %struct._object* %1848, %struct._object** %_py_xdecref_tmp3093, align 8
  %1849 = load %struct._object*, %struct._object** %_py_xdecref_tmp3093, align 8
  %cmp3094 = icmp ne %struct._object* %1849, null
  br i1 %cmp3094, label %if.then.3096, label %if.end.3110

if.then.3096:                                     ; preds = %do.body.3091
  br label %do.body.3097

do.body.3097:                                     ; preds = %if.then.3096
  %1850 = load %struct._object*, %struct._object** %_py_xdecref_tmp3093, align 8
  store %struct._object* %1850, %struct._object** %_py_decref_tmp3099, align 8
  %1851 = load %struct._object*, %struct._object** %_py_decref_tmp3099, align 8
  %ob_refcnt3100 = getelementptr inbounds %struct._object, %struct._object* %1851, i32 0, i32 0
  %1852 = load i64, i64* %ob_refcnt3100, align 8
  %dec3101 = add i64 %1852, -1
  store i64 %dec3101, i64* %ob_refcnt3100, align 8
  %cmp3102 = icmp ne i64 %dec3101, 0
  br i1 %cmp3102, label %if.then.3104, label %if.else.3105

if.then.3104:                                     ; preds = %do.body.3097
  br label %if.end.3108

if.else.3105:                                     ; preds = %do.body.3097
  %1853 = load %struct._object*, %struct._object** %_py_decref_tmp3099, align 8
  %ob_type3106 = getelementptr inbounds %struct._object, %struct._object* %1853, i32 0, i32 1
  %1854 = load %struct._typeobject*, %struct._typeobject** %ob_type3106, align 8
  %tp_dealloc3107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1854, i32 0, i32 4
  %1855 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3107, align 8
  %1856 = load %struct._object*, %struct._object** %_py_decref_tmp3099, align 8
  call void %1855(%struct._object* %1856)
  br label %if.end.3108

if.end.3108:                                      ; preds = %if.else.3105, %if.then.3104
  br label %do.end.3109

do.end.3109:                                      ; preds = %if.end.3108
  br label %if.end.3110

if.end.3110:                                      ; preds = %do.end.3109, %do.body.3091
  br label %do.end.3111

do.end.3111:                                      ; preds = %if.end.3110
  br label %do.body.3112

do.body.3112:                                     ; preds = %do.end.3111
  %1857 = load %struct._object*, %struct._object** %traceback, align 8
  store %struct._object* %1857, %struct._object** %_py_xdecref_tmp3114, align 8
  %1858 = load %struct._object*, %struct._object** %_py_xdecref_tmp3114, align 8
  %cmp3115 = icmp ne %struct._object* %1858, null
  br i1 %cmp3115, label %if.then.3117, label %if.end.3131

if.then.3117:                                     ; preds = %do.body.3112
  br label %do.body.3118

do.body.3118:                                     ; preds = %if.then.3117
  %1859 = load %struct._object*, %struct._object** %_py_xdecref_tmp3114, align 8
  store %struct._object* %1859, %struct._object** %_py_decref_tmp3120, align 8
  %1860 = load %struct._object*, %struct._object** %_py_decref_tmp3120, align 8
  %ob_refcnt3121 = getelementptr inbounds %struct._object, %struct._object* %1860, i32 0, i32 0
  %1861 = load i64, i64* %ob_refcnt3121, align 8
  %dec3122 = add i64 %1861, -1
  store i64 %dec3122, i64* %ob_refcnt3121, align 8
  %cmp3123 = icmp ne i64 %dec3122, 0
  br i1 %cmp3123, label %if.then.3125, label %if.else.3126

if.then.3125:                                     ; preds = %do.body.3118
  br label %if.end.3129

if.else.3126:                                     ; preds = %do.body.3118
  %1862 = load %struct._object*, %struct._object** %_py_decref_tmp3120, align 8
  %ob_type3127 = getelementptr inbounds %struct._object, %struct._object* %1862, i32 0, i32 1
  %1863 = load %struct._typeobject*, %struct._typeobject** %ob_type3127, align 8
  %tp_dealloc3128 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1863, i32 0, i32 4
  %1864 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3128, align 8
  %1865 = load %struct._object*, %struct._object** %_py_decref_tmp3120, align 8
  call void %1864(%struct._object* %1865)
  br label %if.end.3129

if.end.3129:                                      ; preds = %if.else.3126, %if.then.3125
  br label %do.end.3130

do.end.3130:                                      ; preds = %if.end.3129
  br label %if.end.3131

if.end.3131:                                      ; preds = %do.end.3130, %do.body.3112
  br label %do.end.3132

do.end.3132:                                      ; preds = %if.end.3131
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3134, align 8
  %1866 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3134, align 8
  %_value3139 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1866, i32 0, i32 0
  store i32* %_value3139, i32** %volatile_data3138, align 8
  store i32 0, i32* %order3141, align 4
  %1867 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3134, align 8
  %1868 = bitcast %struct._Py_atomic_int* %1867 to i8*
  %1869 = load i32, i32* %order3141, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1868, i32 %1869)
  %1870 = load i32, i32* %order3141, align 4
  switch i32 %1870, label %sw.default.3143 [
    i32 2, label %sw.bb.3142
    i32 3, label %sw.bb.3142
    i32 4, label %sw.bb.3142
  ]

sw.bb.3142:                                       ; preds = %do.end.3132, %do.end.3132, %do.end.3132
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3144

sw.default.3143:                                  ; preds = %do.end.3132
  br label %sw.epilog.3144

sw.epilog.3144:                                   ; preds = %sw.default.3143, %sw.bb.3142
  %1871 = load i32*, i32** %volatile_data3138, align 8
  %1872 = load volatile i32, i32* %1871, align 4
  store i32 %1872, i32* %result3136, align 4
  %1873 = load i32, i32* %order3141, align 4
  switch i32 %1873, label %sw.default.3146 [
    i32 1, label %sw.bb.3145
    i32 3, label %sw.bb.3145
    i32 4, label %sw.bb.3145
  ]

sw.bb.3145:                                       ; preds = %sw.epilog.3144, %sw.epilog.3144, %sw.epilog.3144
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3147

sw.default.3146:                                  ; preds = %sw.epilog.3144
  br label %sw.epilog.3147

sw.epilog.3147:                                   ; preds = %sw.default.3146, %sw.bb.3145
  %1874 = load i32, i32* %result3136, align 4
  store i32 %1874, i32* %tmp3148
  %1875 = load i32, i32* %tmp3148
  %tobool3149 = icmp ne i32 %1875, 0
  br i1 %tobool3149, label %if.end.3162, label %if.then.3150

if.then.3150:                                     ; preds = %sw.epilog.3147
  %1876 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3151 = icmp ne i32 %1876, 0
  br i1 %tobool3151, label %if.end.3161, label %if.then.3152

if.then.3152:                                     ; preds = %if.then.3150
  %1877 = load i8*, i8** %next_instr, align 8
  %1878 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3153 = ptrtoint i8* %1877 to i64
  %sub.ptr.rhs.cast3154 = ptrtoint i8* %1878 to i64
  %sub.ptr.sub3155 = sub i64 %sub.ptr.lhs.cast3153, %sub.ptr.rhs.cast3154
  %conv3156 = trunc i64 %sub.ptr.sub3155 to i32
  %1879 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3157 = getelementptr inbounds %struct._frame, %struct._frame* %1879, i32 0, i32 13
  store i32 %conv3156, i32* %f_lasti3157, align 4
  %1880 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3158 = getelementptr i8, i8* %1880, i32 1
  store i8* %incdec.ptr3158, i8** %next_instr, align 8
  %1881 = load i8, i8* %1880, align 1
  %idxprom3159 = zext i8 %1881 to i64
  %arrayidx3160 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3159
  %1882 = load i8*, i8** %arrayidx3160, align 8
  br label %indirectgoto

if.end.3161:                                      ; preds = %if.then.3150
  br label %fast_next_opcode

if.end.3162:                                      ; preds = %sw.epilog.3147
  br label %for.cond

TARGET_POP_BLOCK:                                 ; preds = %indirectgoto
  store i32 87, i32* %opcode, align 4
  br label %sw.bb.3163

sw.bb.3163:                                       ; preds = %dispatch_opcode, %TARGET_POP_BLOCK
  %1883 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call3166 = call %struct.PyTryBlock* @PyFrame_BlockPop(%struct._frame* %1883)
  store %struct.PyTryBlock* %call3166, %struct.PyTryBlock** %b3165, align 8
  br label %while.cond.3167

while.cond.3167:                                  ; preds = %do.end.3201, %sw.bb.3163
  %1884 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %1885 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack3168 = getelementptr inbounds %struct._frame, %struct._frame* %1885, i32 0, i32 6
  %1886 = load %struct._object**, %struct._object*** %f_valuestack3168, align 8
  %sub.ptr.lhs.cast3169 = ptrtoint %struct._object** %1884 to i64
  %sub.ptr.rhs.cast3170 = ptrtoint %struct._object** %1886 to i64
  %sub.ptr.sub3171 = sub i64 %sub.ptr.lhs.cast3169, %sub.ptr.rhs.cast3170
  %sub.ptr.div3172 = sdiv exact i64 %sub.ptr.sub3171, 8
  %conv3173 = trunc i64 %sub.ptr.div3172 to i32
  %1887 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b3165, align 8
  %b_level3174 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %1887, i32 0, i32 2
  %1888 = load i32, i32* %b_level3174, align 4
  %cmp3175 = icmp sgt i32 %conv3173, %1888
  br i1 %cmp3175, label %while.body.3177, label %while.end.3202

while.body.3177:                                  ; preds = %while.cond.3167
  %1889 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3180 = getelementptr %struct._object*, %struct._object** %1889, i32 -1
  store %struct._object** %incdec.ptr3180, %struct._object*** %stack_pointer, align 8
  %1890 = load %struct._object*, %struct._object** %incdec.ptr3180, align 8
  store %struct._object* %1890, %struct._object** %v3179, align 8
  br label %do.body.3181

do.body.3181:                                     ; preds = %while.body.3177
  %1891 = load %struct._object*, %struct._object** %v3179, align 8
  store %struct._object* %1891, %struct._object** %_py_xdecref_tmp3183, align 8
  %1892 = load %struct._object*, %struct._object** %_py_xdecref_tmp3183, align 8
  %cmp3184 = icmp ne %struct._object* %1892, null
  br i1 %cmp3184, label %if.then.3186, label %if.end.3200

if.then.3186:                                     ; preds = %do.body.3181
  br label %do.body.3187

do.body.3187:                                     ; preds = %if.then.3186
  %1893 = load %struct._object*, %struct._object** %_py_xdecref_tmp3183, align 8
  store %struct._object* %1893, %struct._object** %_py_decref_tmp3189, align 8
  %1894 = load %struct._object*, %struct._object** %_py_decref_tmp3189, align 8
  %ob_refcnt3190 = getelementptr inbounds %struct._object, %struct._object* %1894, i32 0, i32 0
  %1895 = load i64, i64* %ob_refcnt3190, align 8
  %dec3191 = add i64 %1895, -1
  store i64 %dec3191, i64* %ob_refcnt3190, align 8
  %cmp3192 = icmp ne i64 %dec3191, 0
  br i1 %cmp3192, label %if.then.3194, label %if.else.3195

if.then.3194:                                     ; preds = %do.body.3187
  br label %if.end.3198

if.else.3195:                                     ; preds = %do.body.3187
  %1896 = load %struct._object*, %struct._object** %_py_decref_tmp3189, align 8
  %ob_type3196 = getelementptr inbounds %struct._object, %struct._object* %1896, i32 0, i32 1
  %1897 = load %struct._typeobject*, %struct._typeobject** %ob_type3196, align 8
  %tp_dealloc3197 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1897, i32 0, i32 4
  %1898 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3197, align 8
  %1899 = load %struct._object*, %struct._object** %_py_decref_tmp3189, align 8
  call void %1898(%struct._object* %1899)
  br label %if.end.3198

if.end.3198:                                      ; preds = %if.else.3195, %if.then.3194
  br label %do.end.3199

do.end.3199:                                      ; preds = %if.end.3198
  br label %if.end.3200

if.end.3200:                                      ; preds = %do.end.3199, %do.body.3181
  br label %do.end.3201

do.end.3201:                                      ; preds = %if.end.3200
  br label %while.cond.3167

while.end.3202:                                   ; preds = %while.cond.3167
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3204, align 8
  %1900 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3204, align 8
  %_value3209 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1900, i32 0, i32 0
  store i32* %_value3209, i32** %volatile_data3208, align 8
  store i32 0, i32* %order3211, align 4
  %1901 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3204, align 8
  %1902 = bitcast %struct._Py_atomic_int* %1901 to i8*
  %1903 = load i32, i32* %order3211, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1902, i32 %1903)
  %1904 = load i32, i32* %order3211, align 4
  switch i32 %1904, label %sw.default.3213 [
    i32 2, label %sw.bb.3212
    i32 3, label %sw.bb.3212
    i32 4, label %sw.bb.3212
  ]

sw.bb.3212:                                       ; preds = %while.end.3202, %while.end.3202, %while.end.3202
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3214

sw.default.3213:                                  ; preds = %while.end.3202
  br label %sw.epilog.3214

sw.epilog.3214:                                   ; preds = %sw.default.3213, %sw.bb.3212
  %1905 = load i32*, i32** %volatile_data3208, align 8
  %1906 = load volatile i32, i32* %1905, align 4
  store i32 %1906, i32* %result3206, align 4
  %1907 = load i32, i32* %order3211, align 4
  switch i32 %1907, label %sw.default.3216 [
    i32 1, label %sw.bb.3215
    i32 3, label %sw.bb.3215
    i32 4, label %sw.bb.3215
  ]

sw.bb.3215:                                       ; preds = %sw.epilog.3214, %sw.epilog.3214, %sw.epilog.3214
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3217

sw.default.3216:                                  ; preds = %sw.epilog.3214
  br label %sw.epilog.3217

sw.epilog.3217:                                   ; preds = %sw.default.3216, %sw.bb.3215
  %1908 = load i32, i32* %result3206, align 4
  store i32 %1908, i32* %tmp3218
  %1909 = load i32, i32* %tmp3218
  %tobool3219 = icmp ne i32 %1909, 0
  br i1 %tobool3219, label %if.end.3232, label %if.then.3220

if.then.3220:                                     ; preds = %sw.epilog.3217
  %1910 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3221 = icmp ne i32 %1910, 0
  br i1 %tobool3221, label %if.end.3231, label %if.then.3222

if.then.3222:                                     ; preds = %if.then.3220
  %1911 = load i8*, i8** %next_instr, align 8
  %1912 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3223 = ptrtoint i8* %1911 to i64
  %sub.ptr.rhs.cast3224 = ptrtoint i8* %1912 to i64
  %sub.ptr.sub3225 = sub i64 %sub.ptr.lhs.cast3223, %sub.ptr.rhs.cast3224
  %conv3226 = trunc i64 %sub.ptr.sub3225 to i32
  %1913 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3227 = getelementptr inbounds %struct._frame, %struct._frame* %1913, i32 0, i32 13
  store i32 %conv3226, i32* %f_lasti3227, align 4
  %1914 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3228 = getelementptr i8, i8* %1914, i32 1
  store i8* %incdec.ptr3228, i8** %next_instr, align 8
  %1915 = load i8, i8* %1914, align 1
  %idxprom3229 = zext i8 %1915 to i64
  %arrayidx3230 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3229
  %1916 = load i8*, i8** %arrayidx3230, align 8
  br label %indirectgoto

if.end.3231:                                      ; preds = %if.then.3220
  br label %fast_next_opcode

if.end.3232:                                      ; preds = %sw.epilog.3217
  br label %for.cond

PRED_END_FINALLY:                                 ; No predecessors!
  br label %TARGET_END_FINALLY

TARGET_END_FINALLY:                               ; preds = %PRED_END_FINALLY, %indirectgoto
  store i32 88, i32* %opcode, align 4
  br label %sw.bb.3233

sw.bb.3233:                                       ; preds = %dispatch_opcode, %TARGET_END_FINALLY
  %1917 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3235 = getelementptr %struct._object*, %struct._object** %1917, i32 -1
  store %struct._object** %incdec.ptr3235, %struct._object*** %stack_pointer, align 8
  %1918 = load %struct._object*, %struct._object** %incdec.ptr3235, align 8
  store %struct._object* %1918, %struct._object** %status, align 8
  %1919 = load %struct._object*, %struct._object** %status, align 8
  %ob_type3236 = getelementptr inbounds %struct._object, %struct._object* %1919, i32 0, i32 1
  %1920 = load %struct._typeobject*, %struct._typeobject** %ob_type3236, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1920, i32 0, i32 19
  %1921 = load i64, i64* %tp_flags, align 8
  %and3237 = and i64 %1921, 16777216
  %cmp3238 = icmp ne i64 %and3237, 0
  br i1 %cmp3238, label %if.then.3240, label %if.else.3426

if.then.3240:                                     ; preds = %sw.bb.3233
  %1922 = load %struct._object*, %struct._object** %status, align 8
  %call3241 = call i64 @PyLong_AsLong(%struct._object* %1922)
  %conv3242 = trunc i64 %call3241 to i32
  store i32 %conv3242, i32* %why, align 4
  %1923 = load i32, i32* %why, align 4
  %cmp3243 = icmp eq i32 %1923, 8
  br i1 %cmp3243, label %if.then.3247, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then.3240
  %1924 = load i32, i32* %why, align 4
  %cmp3245 = icmp eq i32 %1924, 32
  br i1 %cmp3245, label %if.then.3247, label %if.end.3249

if.then.3247:                                     ; preds = %lor.lhs.false, %if.then.3240
  %1925 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3248 = getelementptr %struct._object*, %struct._object** %1925, i32 -1
  store %struct._object** %incdec.ptr3248, %struct._object*** %stack_pointer, align 8
  %1926 = load %struct._object*, %struct._object** %incdec.ptr3248, align 8
  store %struct._object* %1926, %struct._object** %retval1, align 8
  br label %if.end.3249

if.end.3249:                                      ; preds = %if.then.3247, %lor.lhs.false
  %1927 = load i32, i32* %why, align 4
  %cmp3250 = icmp eq i32 %1927, 128
  br i1 %cmp3250, label %if.then.3252, label %if.end.3412

if.then.3252:                                     ; preds = %if.end.3249
  %1928 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call3255 = call %struct.PyTryBlock* @PyFrame_BlockPop(%struct._frame* %1928)
  store %struct.PyTryBlock* %call3255, %struct.PyTryBlock** %b3254, align 8
  br label %while.cond.3262

while.cond.3262:                                  ; preds = %do.end.3295, %if.then.3252
  %1929 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %1930 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack3263 = getelementptr inbounds %struct._frame, %struct._frame* %1930, i32 0, i32 6
  %1931 = load %struct._object**, %struct._object*** %f_valuestack3263, align 8
  %sub.ptr.lhs.cast3264 = ptrtoint %struct._object** %1929 to i64
  %sub.ptr.rhs.cast3265 = ptrtoint %struct._object** %1931 to i64
  %sub.ptr.sub3266 = sub i64 %sub.ptr.lhs.cast3264, %sub.ptr.rhs.cast3265
  %sub.ptr.div3267 = sdiv exact i64 %sub.ptr.sub3266, 8
  %conv3268 = trunc i64 %sub.ptr.div3267 to i32
  %1932 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b3254, align 8
  %b_level3269 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %1932, i32 0, i32 2
  %1933 = load i32, i32* %b_level3269, align 4
  %add3270 = add i32 %1933, 3
  %cmp3271 = icmp sgt i32 %conv3268, %add3270
  br i1 %cmp3271, label %while.body.3273, label %while.end.3296

while.body.3273:                                  ; preds = %while.cond.3262
  %1934 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3274 = getelementptr %struct._object*, %struct._object** %1934, i32 -1
  store %struct._object** %incdec.ptr3274, %struct._object*** %stack_pointer, align 8
  %1935 = load %struct._object*, %struct._object** %incdec.ptr3274, align 8
  store %struct._object* %1935, %struct._object** %value3259, align 8
  br label %do.body.3275

do.body.3275:                                     ; preds = %while.body.3273
  %1936 = load %struct._object*, %struct._object** %value3259, align 8
  store %struct._object* %1936, %struct._object** %_py_xdecref_tmp3277, align 8
  %1937 = load %struct._object*, %struct._object** %_py_xdecref_tmp3277, align 8
  %cmp3278 = icmp ne %struct._object* %1937, null
  br i1 %cmp3278, label %if.then.3280, label %if.end.3294

if.then.3280:                                     ; preds = %do.body.3275
  br label %do.body.3281

do.body.3281:                                     ; preds = %if.then.3280
  %1938 = load %struct._object*, %struct._object** %_py_xdecref_tmp3277, align 8
  store %struct._object* %1938, %struct._object** %_py_decref_tmp3283, align 8
  %1939 = load %struct._object*, %struct._object** %_py_decref_tmp3283, align 8
  %ob_refcnt3284 = getelementptr inbounds %struct._object, %struct._object* %1939, i32 0, i32 0
  %1940 = load i64, i64* %ob_refcnt3284, align 8
  %dec3285 = add i64 %1940, -1
  store i64 %dec3285, i64* %ob_refcnt3284, align 8
  %cmp3286 = icmp ne i64 %dec3285, 0
  br i1 %cmp3286, label %if.then.3288, label %if.else.3289

if.then.3288:                                     ; preds = %do.body.3281
  br label %if.end.3292

if.else.3289:                                     ; preds = %do.body.3281
  %1941 = load %struct._object*, %struct._object** %_py_decref_tmp3283, align 8
  %ob_type3290 = getelementptr inbounds %struct._object, %struct._object* %1941, i32 0, i32 1
  %1942 = load %struct._typeobject*, %struct._typeobject** %ob_type3290, align 8
  %tp_dealloc3291 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1942, i32 0, i32 4
  %1943 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3291, align 8
  %1944 = load %struct._object*, %struct._object** %_py_decref_tmp3283, align 8
  call void %1943(%struct._object* %1944)
  br label %if.end.3292

if.end.3292:                                      ; preds = %if.else.3289, %if.then.3288
  br label %do.end.3293

do.end.3293:                                      ; preds = %if.end.3292
  br label %if.end.3294

if.end.3294:                                      ; preds = %do.end.3293, %do.body.3275
  br label %do.end.3295

do.end.3295:                                      ; preds = %if.end.3294
  br label %while.cond.3262

while.end.3296:                                   ; preds = %while.cond.3262
  %1945 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type3297 = getelementptr inbounds %struct._ts, %struct._ts* %1945, i32 0, i32 16
  %1946 = load %struct._object*, %struct._object** %exc_type3297, align 8
  store %struct._object* %1946, %struct._object** %type3257, align 8
  %1947 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value3298 = getelementptr inbounds %struct._ts, %struct._ts* %1947, i32 0, i32 17
  %1948 = load %struct._object*, %struct._object** %exc_value3298, align 8
  store %struct._object* %1948, %struct._object** %value3259, align 8
  %1949 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback3299 = getelementptr inbounds %struct._ts, %struct._ts* %1949, i32 0, i32 18
  %1950 = load %struct._object*, %struct._object** %exc_traceback3299, align 8
  store %struct._object* %1950, %struct._object** %traceback3261, align 8
  %1951 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3300 = getelementptr %struct._object*, %struct._object** %1951, i32 -1
  store %struct._object** %incdec.ptr3300, %struct._object*** %stack_pointer, align 8
  %1952 = load %struct._object*, %struct._object** %incdec.ptr3300, align 8
  %1953 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type3301 = getelementptr inbounds %struct._ts, %struct._ts* %1953, i32 0, i32 16
  store %struct._object* %1952, %struct._object** %exc_type3301, align 8
  %1954 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3302 = getelementptr %struct._object*, %struct._object** %1954, i32 -1
  store %struct._object** %incdec.ptr3302, %struct._object*** %stack_pointer, align 8
  %1955 = load %struct._object*, %struct._object** %incdec.ptr3302, align 8
  %1956 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value3303 = getelementptr inbounds %struct._ts, %struct._ts* %1956, i32 0, i32 17
  store %struct._object* %1955, %struct._object** %exc_value3303, align 8
  %1957 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3304 = getelementptr %struct._object*, %struct._object** %1957, i32 -1
  store %struct._object** %incdec.ptr3304, %struct._object*** %stack_pointer, align 8
  %1958 = load %struct._object*, %struct._object** %incdec.ptr3304, align 8
  %1959 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback3305 = getelementptr inbounds %struct._ts, %struct._ts* %1959, i32 0, i32 18
  store %struct._object* %1958, %struct._object** %exc_traceback3305, align 8
  br label %do.body.3306

do.body.3306:                                     ; preds = %while.end.3296
  %1960 = load %struct._object*, %struct._object** %type3257, align 8
  store %struct._object* %1960, %struct._object** %_py_xdecref_tmp3308, align 8
  %1961 = load %struct._object*, %struct._object** %_py_xdecref_tmp3308, align 8
  %cmp3309 = icmp ne %struct._object* %1961, null
  br i1 %cmp3309, label %if.then.3311, label %if.end.3325

if.then.3311:                                     ; preds = %do.body.3306
  br label %do.body.3312

do.body.3312:                                     ; preds = %if.then.3311
  %1962 = load %struct._object*, %struct._object** %_py_xdecref_tmp3308, align 8
  store %struct._object* %1962, %struct._object** %_py_decref_tmp3314, align 8
  %1963 = load %struct._object*, %struct._object** %_py_decref_tmp3314, align 8
  %ob_refcnt3315 = getelementptr inbounds %struct._object, %struct._object* %1963, i32 0, i32 0
  %1964 = load i64, i64* %ob_refcnt3315, align 8
  %dec3316 = add i64 %1964, -1
  store i64 %dec3316, i64* %ob_refcnt3315, align 8
  %cmp3317 = icmp ne i64 %dec3316, 0
  br i1 %cmp3317, label %if.then.3319, label %if.else.3320

if.then.3319:                                     ; preds = %do.body.3312
  br label %if.end.3323

if.else.3320:                                     ; preds = %do.body.3312
  %1965 = load %struct._object*, %struct._object** %_py_decref_tmp3314, align 8
  %ob_type3321 = getelementptr inbounds %struct._object, %struct._object* %1965, i32 0, i32 1
  %1966 = load %struct._typeobject*, %struct._typeobject** %ob_type3321, align 8
  %tp_dealloc3322 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1966, i32 0, i32 4
  %1967 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3322, align 8
  %1968 = load %struct._object*, %struct._object** %_py_decref_tmp3314, align 8
  call void %1967(%struct._object* %1968)
  br label %if.end.3323

if.end.3323:                                      ; preds = %if.else.3320, %if.then.3319
  br label %do.end.3324

do.end.3324:                                      ; preds = %if.end.3323
  br label %if.end.3325

if.end.3325:                                      ; preds = %do.end.3324, %do.body.3306
  br label %do.end.3326

do.end.3326:                                      ; preds = %if.end.3325
  br label %do.body.3327

do.body.3327:                                     ; preds = %do.end.3326
  %1969 = load %struct._object*, %struct._object** %value3259, align 8
  store %struct._object* %1969, %struct._object** %_py_xdecref_tmp3329, align 8
  %1970 = load %struct._object*, %struct._object** %_py_xdecref_tmp3329, align 8
  %cmp3330 = icmp ne %struct._object* %1970, null
  br i1 %cmp3330, label %if.then.3332, label %if.end.3346

if.then.3332:                                     ; preds = %do.body.3327
  br label %do.body.3333

do.body.3333:                                     ; preds = %if.then.3332
  %1971 = load %struct._object*, %struct._object** %_py_xdecref_tmp3329, align 8
  store %struct._object* %1971, %struct._object** %_py_decref_tmp3335, align 8
  %1972 = load %struct._object*, %struct._object** %_py_decref_tmp3335, align 8
  %ob_refcnt3336 = getelementptr inbounds %struct._object, %struct._object* %1972, i32 0, i32 0
  %1973 = load i64, i64* %ob_refcnt3336, align 8
  %dec3337 = add i64 %1973, -1
  store i64 %dec3337, i64* %ob_refcnt3336, align 8
  %cmp3338 = icmp ne i64 %dec3337, 0
  br i1 %cmp3338, label %if.then.3340, label %if.else.3341

if.then.3340:                                     ; preds = %do.body.3333
  br label %if.end.3344

if.else.3341:                                     ; preds = %do.body.3333
  %1974 = load %struct._object*, %struct._object** %_py_decref_tmp3335, align 8
  %ob_type3342 = getelementptr inbounds %struct._object, %struct._object* %1974, i32 0, i32 1
  %1975 = load %struct._typeobject*, %struct._typeobject** %ob_type3342, align 8
  %tp_dealloc3343 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1975, i32 0, i32 4
  %1976 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3343, align 8
  %1977 = load %struct._object*, %struct._object** %_py_decref_tmp3335, align 8
  call void %1976(%struct._object* %1977)
  br label %if.end.3344

if.end.3344:                                      ; preds = %if.else.3341, %if.then.3340
  br label %do.end.3345

do.end.3345:                                      ; preds = %if.end.3344
  br label %if.end.3346

if.end.3346:                                      ; preds = %do.end.3345, %do.body.3327
  br label %do.end.3347

do.end.3347:                                      ; preds = %if.end.3346
  br label %do.body.3348

do.body.3348:                                     ; preds = %do.end.3347
  %1978 = load %struct._object*, %struct._object** %traceback3261, align 8
  store %struct._object* %1978, %struct._object** %_py_xdecref_tmp3350, align 8
  %1979 = load %struct._object*, %struct._object** %_py_xdecref_tmp3350, align 8
  %cmp3351 = icmp ne %struct._object* %1979, null
  br i1 %cmp3351, label %if.then.3353, label %if.end.3367

if.then.3353:                                     ; preds = %do.body.3348
  br label %do.body.3354

do.body.3354:                                     ; preds = %if.then.3353
  %1980 = load %struct._object*, %struct._object** %_py_xdecref_tmp3350, align 8
  store %struct._object* %1980, %struct._object** %_py_decref_tmp3356, align 8
  %1981 = load %struct._object*, %struct._object** %_py_decref_tmp3356, align 8
  %ob_refcnt3357 = getelementptr inbounds %struct._object, %struct._object* %1981, i32 0, i32 0
  %1982 = load i64, i64* %ob_refcnt3357, align 8
  %dec3358 = add i64 %1982, -1
  store i64 %dec3358, i64* %ob_refcnt3357, align 8
  %cmp3359 = icmp ne i64 %dec3358, 0
  br i1 %cmp3359, label %if.then.3361, label %if.else.3362

if.then.3361:                                     ; preds = %do.body.3354
  br label %if.end.3365

if.else.3362:                                     ; preds = %do.body.3354
  %1983 = load %struct._object*, %struct._object** %_py_decref_tmp3356, align 8
  %ob_type3363 = getelementptr inbounds %struct._object, %struct._object* %1983, i32 0, i32 1
  %1984 = load %struct._typeobject*, %struct._typeobject** %ob_type3363, align 8
  %tp_dealloc3364 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1984, i32 0, i32 4
  %1985 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3364, align 8
  %1986 = load %struct._object*, %struct._object** %_py_decref_tmp3356, align 8
  call void %1985(%struct._object* %1986)
  br label %if.end.3365

if.end.3365:                                      ; preds = %if.else.3362, %if.then.3361
  br label %do.end.3366

do.end.3366:                                      ; preds = %if.end.3365
  br label %if.end.3367

if.end.3367:                                      ; preds = %do.end.3366, %do.body.3348
  br label %do.end.3368

do.end.3368:                                      ; preds = %if.end.3367
  store i32 1, i32* %why, align 4
  br label %do.body.3369

do.body.3369:                                     ; preds = %do.end.3368
  %1987 = load %struct._object*, %struct._object** %status, align 8
  store %struct._object* %1987, %struct._object** %_py_decref_tmp3371, align 8
  %1988 = load %struct._object*, %struct._object** %_py_decref_tmp3371, align 8
  %ob_refcnt3372 = getelementptr inbounds %struct._object, %struct._object* %1988, i32 0, i32 0
  %1989 = load i64, i64* %ob_refcnt3372, align 8
  %dec3373 = add i64 %1989, -1
  store i64 %dec3373, i64* %ob_refcnt3372, align 8
  %cmp3374 = icmp ne i64 %dec3373, 0
  br i1 %cmp3374, label %if.then.3376, label %if.else.3377

if.then.3376:                                     ; preds = %do.body.3369
  br label %if.end.3380

if.else.3377:                                     ; preds = %do.body.3369
  %1990 = load %struct._object*, %struct._object** %_py_decref_tmp3371, align 8
  %ob_type3378 = getelementptr inbounds %struct._object, %struct._object* %1990, i32 0, i32 1
  %1991 = load %struct._typeobject*, %struct._typeobject** %ob_type3378, align 8
  %tp_dealloc3379 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %1991, i32 0, i32 4
  %1992 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3379, align 8
  %1993 = load %struct._object*, %struct._object** %_py_decref_tmp3371, align 8
  call void %1992(%struct._object* %1993)
  br label %if.end.3380

if.end.3380:                                      ; preds = %if.else.3377, %if.then.3376
  br label %do.end.3381

do.end.3381:                                      ; preds = %if.end.3380
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3383, align 8
  %1994 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3383, align 8
  %_value3388 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %1994, i32 0, i32 0
  store i32* %_value3388, i32** %volatile_data3387, align 8
  store i32 0, i32* %order3390, align 4
  %1995 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3383, align 8
  %1996 = bitcast %struct._Py_atomic_int* %1995 to i8*
  %1997 = load i32, i32* %order3390, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %1996, i32 %1997)
  %1998 = load i32, i32* %order3390, align 4
  switch i32 %1998, label %sw.default.3392 [
    i32 2, label %sw.bb.3391
    i32 3, label %sw.bb.3391
    i32 4, label %sw.bb.3391
  ]

sw.bb.3391:                                       ; preds = %do.end.3381, %do.end.3381, %do.end.3381
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3393

sw.default.3392:                                  ; preds = %do.end.3381
  br label %sw.epilog.3393

sw.epilog.3393:                                   ; preds = %sw.default.3392, %sw.bb.3391
  %1999 = load i32*, i32** %volatile_data3387, align 8
  %2000 = load volatile i32, i32* %1999, align 4
  store i32 %2000, i32* %result3385, align 4
  %2001 = load i32, i32* %order3390, align 4
  switch i32 %2001, label %sw.default.3395 [
    i32 1, label %sw.bb.3394
    i32 3, label %sw.bb.3394
    i32 4, label %sw.bb.3394
  ]

sw.bb.3394:                                       ; preds = %sw.epilog.3393, %sw.epilog.3393, %sw.epilog.3393
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3396

sw.default.3395:                                  ; preds = %sw.epilog.3393
  br label %sw.epilog.3396

sw.epilog.3396:                                   ; preds = %sw.default.3395, %sw.bb.3394
  %2002 = load i32, i32* %result3385, align 4
  store i32 %2002, i32* %tmp3397
  %2003 = load i32, i32* %tmp3397
  %tobool3398 = icmp ne i32 %2003, 0
  br i1 %tobool3398, label %if.end.3411, label %if.then.3399

if.then.3399:                                     ; preds = %sw.epilog.3396
  %2004 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3400 = icmp ne i32 %2004, 0
  br i1 %tobool3400, label %if.end.3410, label %if.then.3401

if.then.3401:                                     ; preds = %if.then.3399
  %2005 = load i8*, i8** %next_instr, align 8
  %2006 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3402 = ptrtoint i8* %2005 to i64
  %sub.ptr.rhs.cast3403 = ptrtoint i8* %2006 to i64
  %sub.ptr.sub3404 = sub i64 %sub.ptr.lhs.cast3402, %sub.ptr.rhs.cast3403
  %conv3405 = trunc i64 %sub.ptr.sub3404 to i32
  %2007 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3406 = getelementptr inbounds %struct._frame, %struct._frame* %2007, i32 0, i32 13
  store i32 %conv3405, i32* %f_lasti3406, align 4
  %2008 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3407 = getelementptr i8, i8* %2008, i32 1
  store i8* %incdec.ptr3407, i8** %next_instr, align 8
  %2009 = load i8, i8* %2008, align 1
  %idxprom3408 = zext i8 %2009 to i64
  %arrayidx3409 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3408
  %2010 = load i8*, i8** %arrayidx3409, align 8
  br label %indirectgoto

if.end.3410:                                      ; preds = %if.then.3399
  br label %fast_next_opcode

if.end.3411:                                      ; preds = %sw.epilog.3396
  br label %for.cond

if.end.3412:                                      ; preds = %if.end.3249
  br label %do.body.3413

do.body.3413:                                     ; preds = %if.end.3412
  %2011 = load %struct._object*, %struct._object** %status, align 8
  store %struct._object* %2011, %struct._object** %_py_decref_tmp3415, align 8
  %2012 = load %struct._object*, %struct._object** %_py_decref_tmp3415, align 8
  %ob_refcnt3416 = getelementptr inbounds %struct._object, %struct._object* %2012, i32 0, i32 0
  %2013 = load i64, i64* %ob_refcnt3416, align 8
  %dec3417 = add i64 %2013, -1
  store i64 %dec3417, i64* %ob_refcnt3416, align 8
  %cmp3418 = icmp ne i64 %dec3417, 0
  br i1 %cmp3418, label %if.then.3420, label %if.else.3421

if.then.3420:                                     ; preds = %do.body.3413
  br label %if.end.3424

if.else.3421:                                     ; preds = %do.body.3413
  %2014 = load %struct._object*, %struct._object** %_py_decref_tmp3415, align 8
  %ob_type3422 = getelementptr inbounds %struct._object, %struct._object* %2014, i32 0, i32 1
  %2015 = load %struct._typeobject*, %struct._typeobject** %ob_type3422, align 8
  %tp_dealloc3423 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2015, i32 0, i32 4
  %2016 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3423, align 8
  %2017 = load %struct._object*, %struct._object** %_py_decref_tmp3415, align 8
  call void %2016(%struct._object* %2017)
  br label %if.end.3424

if.end.3424:                                      ; preds = %if.else.3421, %if.then.3420
  br label %do.end.3425

do.end.3425:                                      ; preds = %if.end.3424
  br label %fast_block_end

if.else.3426:                                     ; preds = %sw.bb.3233
  %2018 = load %struct._object*, %struct._object** %status, align 8
  %ob_type3427 = getelementptr inbounds %struct._object, %struct._object* %2018, i32 0, i32 1
  %2019 = load %struct._typeobject*, %struct._typeobject** %ob_type3427, align 8
  %tp_flags3428 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2019, i32 0, i32 19
  %2020 = load i64, i64* %tp_flags3428, align 8
  %and3429 = and i64 %2020, 2147483648
  %cmp3430 = icmp ne i64 %and3429, 0
  br i1 %cmp3430, label %land.lhs.true.3432, label %if.else.3443

land.lhs.true.3432:                               ; preds = %if.else.3426
  %2021 = load %struct._object*, %struct._object** %status, align 8
  %2022 = bitcast %struct._object* %2021 to %struct._typeobject*
  %tp_flags3433 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2022, i32 0, i32 19
  %2023 = load i64, i64* %tp_flags3433, align 8
  %and3434 = and i64 %2023, 1073741824
  %cmp3435 = icmp ne i64 %and3434, 0
  br i1 %cmp3435, label %if.then.3437, label %if.else.3443

if.then.3437:                                     ; preds = %land.lhs.true.3432
  %2024 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3440 = getelementptr %struct._object*, %struct._object** %2024, i32 -1
  store %struct._object** %incdec.ptr3440, %struct._object*** %stack_pointer, align 8
  %2025 = load %struct._object*, %struct._object** %incdec.ptr3440, align 8
  store %struct._object* %2025, %struct._object** %exc3439, align 8
  %2026 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3442 = getelementptr %struct._object*, %struct._object** %2026, i32 -1
  store %struct._object** %incdec.ptr3442, %struct._object*** %stack_pointer, align 8
  %2027 = load %struct._object*, %struct._object** %incdec.ptr3442, align 8
  store %struct._object* %2027, %struct._object** %tb, align 8
  %2028 = load %struct._object*, %struct._object** %status, align 8
  %2029 = load %struct._object*, %struct._object** %exc3439, align 8
  %2030 = load %struct._object*, %struct._object** %tb, align 8
  call void @PyErr_Restore(%struct._object* %2028, %struct._object* %2029, %struct._object* %2030)
  store i32 2, i32* %why, align 4
  br label %fast_block_end

if.else.3443:                                     ; preds = %land.lhs.true.3432, %if.else.3426
  %2031 = load %struct._object*, %struct._object** %status, align 8
  %cmp3444 = icmp ne %struct._object* %2031, @_Py_NoneStruct
  br i1 %cmp3444, label %if.then.3446, label %if.end.3460

if.then.3446:                                     ; preds = %if.else.3443
  %2032 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %2032, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.20, i32 0, i32 0))
  br label %do.body.3447

do.body.3447:                                     ; preds = %if.then.3446
  %2033 = load %struct._object*, %struct._object** %status, align 8
  store %struct._object* %2033, %struct._object** %_py_decref_tmp3449, align 8
  %2034 = load %struct._object*, %struct._object** %_py_decref_tmp3449, align 8
  %ob_refcnt3450 = getelementptr inbounds %struct._object, %struct._object* %2034, i32 0, i32 0
  %2035 = load i64, i64* %ob_refcnt3450, align 8
  %dec3451 = add i64 %2035, -1
  store i64 %dec3451, i64* %ob_refcnt3450, align 8
  %cmp3452 = icmp ne i64 %dec3451, 0
  br i1 %cmp3452, label %if.then.3454, label %if.else.3455

if.then.3454:                                     ; preds = %do.body.3447
  br label %if.end.3458

if.else.3455:                                     ; preds = %do.body.3447
  %2036 = load %struct._object*, %struct._object** %_py_decref_tmp3449, align 8
  %ob_type3456 = getelementptr inbounds %struct._object, %struct._object* %2036, i32 0, i32 1
  %2037 = load %struct._typeobject*, %struct._typeobject** %ob_type3456, align 8
  %tp_dealloc3457 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2037, i32 0, i32 4
  %2038 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3457, align 8
  %2039 = load %struct._object*, %struct._object** %_py_decref_tmp3449, align 8
  call void %2038(%struct._object* %2039)
  br label %if.end.3458

if.end.3458:                                      ; preds = %if.else.3455, %if.then.3454
  br label %do.end.3459

do.end.3459:                                      ; preds = %if.end.3458
  br label %error

if.end.3460:                                      ; preds = %if.else.3443
  br label %if.end.3461

if.end.3461:                                      ; preds = %if.end.3460
  br label %if.end.3462

if.end.3462:                                      ; preds = %if.end.3461
  br label %do.body.3463

do.body.3463:                                     ; preds = %if.end.3462
  %2040 = load %struct._object*, %struct._object** %status, align 8
  store %struct._object* %2040, %struct._object** %_py_decref_tmp3465, align 8
  %2041 = load %struct._object*, %struct._object** %_py_decref_tmp3465, align 8
  %ob_refcnt3466 = getelementptr inbounds %struct._object, %struct._object* %2041, i32 0, i32 0
  %2042 = load i64, i64* %ob_refcnt3466, align 8
  %dec3467 = add i64 %2042, -1
  store i64 %dec3467, i64* %ob_refcnt3466, align 8
  %cmp3468 = icmp ne i64 %dec3467, 0
  br i1 %cmp3468, label %if.then.3470, label %if.else.3471

if.then.3470:                                     ; preds = %do.body.3463
  br label %if.end.3474

if.else.3471:                                     ; preds = %do.body.3463
  %2043 = load %struct._object*, %struct._object** %_py_decref_tmp3465, align 8
  %ob_type3472 = getelementptr inbounds %struct._object, %struct._object* %2043, i32 0, i32 1
  %2044 = load %struct._typeobject*, %struct._typeobject** %ob_type3472, align 8
  %tp_dealloc3473 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2044, i32 0, i32 4
  %2045 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3473, align 8
  %2046 = load %struct._object*, %struct._object** %_py_decref_tmp3465, align 8
  call void %2045(%struct._object* %2046)
  br label %if.end.3474

if.end.3474:                                      ; preds = %if.else.3471, %if.then.3470
  br label %do.end.3475

do.end.3475:                                      ; preds = %if.end.3474
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3477, align 8
  %2047 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3477, align 8
  %_value3482 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2047, i32 0, i32 0
  store i32* %_value3482, i32** %volatile_data3481, align 8
  store i32 0, i32* %order3484, align 4
  %2048 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3477, align 8
  %2049 = bitcast %struct._Py_atomic_int* %2048 to i8*
  %2050 = load i32, i32* %order3484, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2049, i32 %2050)
  %2051 = load i32, i32* %order3484, align 4
  switch i32 %2051, label %sw.default.3486 [
    i32 2, label %sw.bb.3485
    i32 3, label %sw.bb.3485
    i32 4, label %sw.bb.3485
  ]

sw.bb.3485:                                       ; preds = %do.end.3475, %do.end.3475, %do.end.3475
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3487

sw.default.3486:                                  ; preds = %do.end.3475
  br label %sw.epilog.3487

sw.epilog.3487:                                   ; preds = %sw.default.3486, %sw.bb.3485
  %2052 = load i32*, i32** %volatile_data3481, align 8
  %2053 = load volatile i32, i32* %2052, align 4
  store i32 %2053, i32* %result3479, align 4
  %2054 = load i32, i32* %order3484, align 4
  switch i32 %2054, label %sw.default.3489 [
    i32 1, label %sw.bb.3488
    i32 3, label %sw.bb.3488
    i32 4, label %sw.bb.3488
  ]

sw.bb.3488:                                       ; preds = %sw.epilog.3487, %sw.epilog.3487, %sw.epilog.3487
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3490

sw.default.3489:                                  ; preds = %sw.epilog.3487
  br label %sw.epilog.3490

sw.epilog.3490:                                   ; preds = %sw.default.3489, %sw.bb.3488
  %2055 = load i32, i32* %result3479, align 4
  store i32 %2055, i32* %tmp3491
  %2056 = load i32, i32* %tmp3491
  %tobool3492 = icmp ne i32 %2056, 0
  br i1 %tobool3492, label %if.end.3505, label %if.then.3493

if.then.3493:                                     ; preds = %sw.epilog.3490
  %2057 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3494 = icmp ne i32 %2057, 0
  br i1 %tobool3494, label %if.end.3504, label %if.then.3495

if.then.3495:                                     ; preds = %if.then.3493
  %2058 = load i8*, i8** %next_instr, align 8
  %2059 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3496 = ptrtoint i8* %2058 to i64
  %sub.ptr.rhs.cast3497 = ptrtoint i8* %2059 to i64
  %sub.ptr.sub3498 = sub i64 %sub.ptr.lhs.cast3496, %sub.ptr.rhs.cast3497
  %conv3499 = trunc i64 %sub.ptr.sub3498 to i32
  %2060 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3500 = getelementptr inbounds %struct._frame, %struct._frame* %2060, i32 0, i32 13
  store i32 %conv3499, i32* %f_lasti3500, align 4
  %2061 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3501 = getelementptr i8, i8* %2061, i32 1
  store i8* %incdec.ptr3501, i8** %next_instr, align 8
  %2062 = load i8, i8* %2061, align 1
  %idxprom3502 = zext i8 %2062 to i64
  %arrayidx3503 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3502
  %2063 = load i8*, i8** %arrayidx3503, align 8
  br label %indirectgoto

if.end.3504:                                      ; preds = %if.then.3493
  br label %fast_next_opcode

if.end.3505:                                      ; preds = %sw.epilog.3490
  br label %for.cond

TARGET_LOAD_BUILD_CLASS:                          ; preds = %indirectgoto
  store i32 71, i32* %opcode, align 4
  br label %sw.bb.3506

sw.bb.3506:                                       ; preds = %dispatch_opcode, %TARGET_LOAD_BUILD_CLASS
  %2064 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins = getelementptr inbounds %struct._frame, %struct._frame* %2064, i32 0, i32 3
  %2065 = load %struct._object*, %struct._object** %f_builtins, align 8
  %ob_type3508 = getelementptr inbounds %struct._object, %struct._object* %2065, i32 0, i32 1
  %2066 = load %struct._typeobject*, %struct._typeobject** %ob_type3508, align 8
  %cmp3509 = icmp eq %struct._typeobject* %2066, @PyDict_Type
  br i1 %cmp3509, label %if.then.3511, label %if.else.3520

if.then.3511:                                     ; preds = %sw.bb.3506
  %2067 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins3512 = getelementptr inbounds %struct._frame, %struct._frame* %2067, i32 0, i32 3
  %2068 = load %struct._object*, %struct._object** %f_builtins3512, align 8
  %call3513 = call %struct._object* @_PyDict_GetItemId(%struct._object* %2068, %struct._Py_Identifier* @PyEval_EvalFrameEx.PyId___build_class__)
  store %struct._object* %call3513, %struct._object** %bc, align 8
  %2069 = load %struct._object*, %struct._object** %bc, align 8
  %cmp3514 = icmp eq %struct._object* %2069, null
  br i1 %cmp3514, label %if.then.3516, label %if.end.3517

if.then.3516:                                     ; preds = %if.then.3511
  %2070 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  call void @PyErr_SetString(%struct._object* %2070, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.22, i32 0, i32 0))
  br label %error

if.end.3517:                                      ; preds = %if.then.3511
  %2071 = load %struct._object*, %struct._object** %bc, align 8
  %ob_refcnt3518 = getelementptr inbounds %struct._object, %struct._object* %2071, i32 0, i32 0
  %2072 = load i64, i64* %ob_refcnt3518, align 8
  %inc3519 = add i64 %2072, 1
  store i64 %inc3519, i64* %ob_refcnt3518, align 8
  br label %if.end.3537

if.else.3520:                                     ; preds = %sw.bb.3506
  %call3522 = call %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier* @PyEval_EvalFrameEx.PyId___build_class__)
  store %struct._object* %call3522, %struct._object** %build_class_str, align 8
  %2073 = load %struct._object*, %struct._object** %build_class_str, align 8
  %cmp3523 = icmp eq %struct._object* %2073, null
  br i1 %cmp3523, label %if.then.3525, label %if.end.3526

if.then.3525:                                     ; preds = %if.else.3520
  br label %sw.epilog.7503

if.end.3526:                                      ; preds = %if.else.3520
  %2074 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins3527 = getelementptr inbounds %struct._frame, %struct._frame* %2074, i32 0, i32 3
  %2075 = load %struct._object*, %struct._object** %f_builtins3527, align 8
  %2076 = load %struct._object*, %struct._object** %build_class_str, align 8
  %call3528 = call %struct._object* @PyObject_GetItem(%struct._object* %2075, %struct._object* %2076)
  store %struct._object* %call3528, %struct._object** %bc, align 8
  %2077 = load %struct._object*, %struct._object** %bc, align 8
  %cmp3529 = icmp eq %struct._object* %2077, null
  br i1 %cmp3529, label %if.then.3531, label %if.end.3536

if.then.3531:                                     ; preds = %if.end.3526
  %2078 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %call3532 = call i32 @PyErr_ExceptionMatches(%struct._object* %2078)
  %tobool3533 = icmp ne i32 %call3532, 0
  br i1 %tobool3533, label %if.then.3534, label %if.end.3535

if.then.3534:                                     ; preds = %if.then.3531
  %2079 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  call void @PyErr_SetString(%struct._object* %2079, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.22, i32 0, i32 0))
  br label %if.end.3535

if.end.3535:                                      ; preds = %if.then.3534, %if.then.3531
  br label %error

if.end.3536:                                      ; preds = %if.end.3526
  br label %if.end.3537

if.end.3537:                                      ; preds = %if.end.3536, %if.end.3517
  %2080 = load %struct._object*, %struct._object** %bc, align 8
  %2081 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3538 = getelementptr %struct._object*, %struct._object** %2081, i32 1
  store %struct._object** %incdec.ptr3538, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2080, %struct._object** %2081, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3540, align 8
  %2082 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3540, align 8
  %_value3545 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2082, i32 0, i32 0
  store i32* %_value3545, i32** %volatile_data3544, align 8
  store i32 0, i32* %order3547, align 4
  %2083 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3540, align 8
  %2084 = bitcast %struct._Py_atomic_int* %2083 to i8*
  %2085 = load i32, i32* %order3547, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2084, i32 %2085)
  %2086 = load i32, i32* %order3547, align 4
  switch i32 %2086, label %sw.default.3549 [
    i32 2, label %sw.bb.3548
    i32 3, label %sw.bb.3548
    i32 4, label %sw.bb.3548
  ]

sw.bb.3548:                                       ; preds = %if.end.3537, %if.end.3537, %if.end.3537
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3550

sw.default.3549:                                  ; preds = %if.end.3537
  br label %sw.epilog.3550

sw.epilog.3550:                                   ; preds = %sw.default.3549, %sw.bb.3548
  %2087 = load i32*, i32** %volatile_data3544, align 8
  %2088 = load volatile i32, i32* %2087, align 4
  store i32 %2088, i32* %result3542, align 4
  %2089 = load i32, i32* %order3547, align 4
  switch i32 %2089, label %sw.default.3552 [
    i32 1, label %sw.bb.3551
    i32 3, label %sw.bb.3551
    i32 4, label %sw.bb.3551
  ]

sw.bb.3551:                                       ; preds = %sw.epilog.3550, %sw.epilog.3550, %sw.epilog.3550
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3553

sw.default.3552:                                  ; preds = %sw.epilog.3550
  br label %sw.epilog.3553

sw.epilog.3553:                                   ; preds = %sw.default.3552, %sw.bb.3551
  %2090 = load i32, i32* %result3542, align 4
  store i32 %2090, i32* %tmp3554
  %2091 = load i32, i32* %tmp3554
  %tobool3555 = icmp ne i32 %2091, 0
  br i1 %tobool3555, label %if.end.3568, label %if.then.3556

if.then.3556:                                     ; preds = %sw.epilog.3553
  %2092 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3557 = icmp ne i32 %2092, 0
  br i1 %tobool3557, label %if.end.3567, label %if.then.3558

if.then.3558:                                     ; preds = %if.then.3556
  %2093 = load i8*, i8** %next_instr, align 8
  %2094 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3559 = ptrtoint i8* %2093 to i64
  %sub.ptr.rhs.cast3560 = ptrtoint i8* %2094 to i64
  %sub.ptr.sub3561 = sub i64 %sub.ptr.lhs.cast3559, %sub.ptr.rhs.cast3560
  %conv3562 = trunc i64 %sub.ptr.sub3561 to i32
  %2095 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3563 = getelementptr inbounds %struct._frame, %struct._frame* %2095, i32 0, i32 13
  store i32 %conv3562, i32* %f_lasti3563, align 4
  %2096 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3564 = getelementptr i8, i8* %2096, i32 1
  store i8* %incdec.ptr3564, i8** %next_instr, align 8
  %2097 = load i8, i8* %2096, align 1
  %idxprom3565 = zext i8 %2097 to i64
  %arrayidx3566 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3565
  %2098 = load i8*, i8** %arrayidx3566, align 8
  br label %indirectgoto

if.end.3567:                                      ; preds = %if.then.3556
  br label %fast_next_opcode

if.end.3568:                                      ; preds = %sw.epilog.3553
  br label %for.cond

TARGET_STORE_NAME:                                ; preds = %indirectgoto
  store i32 90, i32* %opcode, align 4
  %2099 = load i8*, i8** %next_instr, align 8
  %add.ptr3569 = getelementptr i8, i8* %2099, i64 2
  store i8* %add.ptr3569, i8** %next_instr, align 8
  %2100 = load i8*, i8** %next_instr, align 8
  %arrayidx3570 = getelementptr i8, i8* %2100, i64 -1
  %2101 = load i8, i8* %arrayidx3570, align 1
  %conv3571 = zext i8 %2101 to i32
  %shl3572 = shl i32 %conv3571, 8
  %2102 = load i8*, i8** %next_instr, align 8
  %arrayidx3573 = getelementptr i8, i8* %2102, i64 -2
  %2103 = load i8, i8* %arrayidx3573, align 1
  %conv3574 = zext i8 %2103 to i32
  %add3575 = add i32 %shl3572, %conv3574
  store i32 %add3575, i32* %oparg, align 4
  br label %sw.bb.3576

sw.bb.3576:                                       ; preds = %dispatch_opcode, %TARGET_STORE_NAME
  %2104 = load i32, i32* %oparg, align 4
  %idxprom3578 = sext i32 %2104 to i64
  %2105 = load %struct._object*, %struct._object** %names, align 8
  %2106 = bitcast %struct._object* %2105 to %struct.PyTupleObject*
  %ob_item3579 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2106, i32 0, i32 1
  %arrayidx3580 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item3579, i32 0, i64 %idxprom3578
  %2107 = load %struct._object*, %struct._object** %arrayidx3580, align 8
  store %struct._object* %2107, %struct._object** %name, align 8
  %2108 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3583 = getelementptr %struct._object*, %struct._object** %2108, i32 -1
  store %struct._object** %incdec.ptr3583, %struct._object*** %stack_pointer, align 8
  %2109 = load %struct._object*, %struct._object** %incdec.ptr3583, align 8
  store %struct._object* %2109, %struct._object** %v3582, align 8
  %2110 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals = getelementptr inbounds %struct._frame, %struct._frame* %2110, i32 0, i32 5
  %2111 = load %struct._object*, %struct._object** %f_locals, align 8
  store %struct._object* %2111, %struct._object** %ns, align 8
  %2112 = load %struct._object*, %struct._object** %ns, align 8
  %cmp3587 = icmp eq %struct._object* %2112, null
  br i1 %cmp3587, label %if.then.3589, label %if.end.3604

if.then.3589:                                     ; preds = %sw.bb.3576
  %2113 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %2114 = load %struct._object*, %struct._object** %name, align 8
  %call3590 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2113, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.23, i32 0, i32 0), %struct._object* %2114)
  br label %do.body.3591

do.body.3591:                                     ; preds = %if.then.3589
  %2115 = load %struct._object*, %struct._object** %v3582, align 8
  store %struct._object* %2115, %struct._object** %_py_decref_tmp3593, align 8
  %2116 = load %struct._object*, %struct._object** %_py_decref_tmp3593, align 8
  %ob_refcnt3594 = getelementptr inbounds %struct._object, %struct._object* %2116, i32 0, i32 0
  %2117 = load i64, i64* %ob_refcnt3594, align 8
  %dec3595 = add i64 %2117, -1
  store i64 %dec3595, i64* %ob_refcnt3594, align 8
  %cmp3596 = icmp ne i64 %dec3595, 0
  br i1 %cmp3596, label %if.then.3598, label %if.else.3599

if.then.3598:                                     ; preds = %do.body.3591
  br label %if.end.3602

if.else.3599:                                     ; preds = %do.body.3591
  %2118 = load %struct._object*, %struct._object** %_py_decref_tmp3593, align 8
  %ob_type3600 = getelementptr inbounds %struct._object, %struct._object* %2118, i32 0, i32 1
  %2119 = load %struct._typeobject*, %struct._typeobject** %ob_type3600, align 8
  %tp_dealloc3601 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2119, i32 0, i32 4
  %2120 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3601, align 8
  %2121 = load %struct._object*, %struct._object** %_py_decref_tmp3593, align 8
  call void %2120(%struct._object* %2121)
  br label %if.end.3602

if.end.3602:                                      ; preds = %if.else.3599, %if.then.3598
  br label %do.end.3603

do.end.3603:                                      ; preds = %if.end.3602
  br label %error

if.end.3604:                                      ; preds = %sw.bb.3576
  %2122 = load %struct._object*, %struct._object** %ns, align 8
  %ob_type3605 = getelementptr inbounds %struct._object, %struct._object* %2122, i32 0, i32 1
  %2123 = load %struct._typeobject*, %struct._typeobject** %ob_type3605, align 8
  %cmp3606 = icmp eq %struct._typeobject* %2123, @PyDict_Type
  br i1 %cmp3606, label %if.then.3608, label %if.else.3610

if.then.3608:                                     ; preds = %if.end.3604
  %2124 = load %struct._object*, %struct._object** %ns, align 8
  %2125 = load %struct._object*, %struct._object** %name, align 8
  %2126 = load %struct._object*, %struct._object** %v3582, align 8
  %call3609 = call i32 @PyDict_SetItem(%struct._object* %2124, %struct._object* %2125, %struct._object* %2126)
  store i32 %call3609, i32* %err3586, align 4
  br label %if.end.3612

if.else.3610:                                     ; preds = %if.end.3604
  %2127 = load %struct._object*, %struct._object** %ns, align 8
  %2128 = load %struct._object*, %struct._object** %name, align 8
  %2129 = load %struct._object*, %struct._object** %v3582, align 8
  %call3611 = call i32 @PyObject_SetItem(%struct._object* %2127, %struct._object* %2128, %struct._object* %2129)
  store i32 %call3611, i32* %err3586, align 4
  br label %if.end.3612

if.end.3612:                                      ; preds = %if.else.3610, %if.then.3608
  br label %do.body.3613

do.body.3613:                                     ; preds = %if.end.3612
  %2130 = load %struct._object*, %struct._object** %v3582, align 8
  store %struct._object* %2130, %struct._object** %_py_decref_tmp3615, align 8
  %2131 = load %struct._object*, %struct._object** %_py_decref_tmp3615, align 8
  %ob_refcnt3616 = getelementptr inbounds %struct._object, %struct._object* %2131, i32 0, i32 0
  %2132 = load i64, i64* %ob_refcnt3616, align 8
  %dec3617 = add i64 %2132, -1
  store i64 %dec3617, i64* %ob_refcnt3616, align 8
  %cmp3618 = icmp ne i64 %dec3617, 0
  br i1 %cmp3618, label %if.then.3620, label %if.else.3621

if.then.3620:                                     ; preds = %do.body.3613
  br label %if.end.3624

if.else.3621:                                     ; preds = %do.body.3613
  %2133 = load %struct._object*, %struct._object** %_py_decref_tmp3615, align 8
  %ob_type3622 = getelementptr inbounds %struct._object, %struct._object* %2133, i32 0, i32 1
  %2134 = load %struct._typeobject*, %struct._typeobject** %ob_type3622, align 8
  %tp_dealloc3623 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2134, i32 0, i32 4
  %2135 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3623, align 8
  %2136 = load %struct._object*, %struct._object** %_py_decref_tmp3615, align 8
  call void %2135(%struct._object* %2136)
  br label %if.end.3624

if.end.3624:                                      ; preds = %if.else.3621, %if.then.3620
  br label %do.end.3625

do.end.3625:                                      ; preds = %if.end.3624
  %2137 = load i32, i32* %err3586, align 4
  %cmp3626 = icmp ne i32 %2137, 0
  br i1 %cmp3626, label %if.then.3628, label %if.end.3629

if.then.3628:                                     ; preds = %do.end.3625
  br label %error

if.end.3629:                                      ; preds = %do.end.3625
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3631, align 8
  %2138 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3631, align 8
  %_value3636 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2138, i32 0, i32 0
  store i32* %_value3636, i32** %volatile_data3635, align 8
  store i32 0, i32* %order3638, align 4
  %2139 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3631, align 8
  %2140 = bitcast %struct._Py_atomic_int* %2139 to i8*
  %2141 = load i32, i32* %order3638, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2140, i32 %2141)
  %2142 = load i32, i32* %order3638, align 4
  switch i32 %2142, label %sw.default.3640 [
    i32 2, label %sw.bb.3639
    i32 3, label %sw.bb.3639
    i32 4, label %sw.bb.3639
  ]

sw.bb.3639:                                       ; preds = %if.end.3629, %if.end.3629, %if.end.3629
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3641

sw.default.3640:                                  ; preds = %if.end.3629
  br label %sw.epilog.3641

sw.epilog.3641:                                   ; preds = %sw.default.3640, %sw.bb.3639
  %2143 = load i32*, i32** %volatile_data3635, align 8
  %2144 = load volatile i32, i32* %2143, align 4
  store i32 %2144, i32* %result3633, align 4
  %2145 = load i32, i32* %order3638, align 4
  switch i32 %2145, label %sw.default.3643 [
    i32 1, label %sw.bb.3642
    i32 3, label %sw.bb.3642
    i32 4, label %sw.bb.3642
  ]

sw.bb.3642:                                       ; preds = %sw.epilog.3641, %sw.epilog.3641, %sw.epilog.3641
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3644

sw.default.3643:                                  ; preds = %sw.epilog.3641
  br label %sw.epilog.3644

sw.epilog.3644:                                   ; preds = %sw.default.3643, %sw.bb.3642
  %2146 = load i32, i32* %result3633, align 4
  store i32 %2146, i32* %tmp3645
  %2147 = load i32, i32* %tmp3645
  %tobool3646 = icmp ne i32 %2147, 0
  br i1 %tobool3646, label %if.end.3659, label %if.then.3647

if.then.3647:                                     ; preds = %sw.epilog.3644
  %2148 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3648 = icmp ne i32 %2148, 0
  br i1 %tobool3648, label %if.end.3658, label %if.then.3649

if.then.3649:                                     ; preds = %if.then.3647
  %2149 = load i8*, i8** %next_instr, align 8
  %2150 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3650 = ptrtoint i8* %2149 to i64
  %sub.ptr.rhs.cast3651 = ptrtoint i8* %2150 to i64
  %sub.ptr.sub3652 = sub i64 %sub.ptr.lhs.cast3650, %sub.ptr.rhs.cast3651
  %conv3653 = trunc i64 %sub.ptr.sub3652 to i32
  %2151 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3654 = getelementptr inbounds %struct._frame, %struct._frame* %2151, i32 0, i32 13
  store i32 %conv3653, i32* %f_lasti3654, align 4
  %2152 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3655 = getelementptr i8, i8* %2152, i32 1
  store i8* %incdec.ptr3655, i8** %next_instr, align 8
  %2153 = load i8, i8* %2152, align 1
  %idxprom3656 = zext i8 %2153 to i64
  %arrayidx3657 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3656
  %2154 = load i8*, i8** %arrayidx3657, align 8
  br label %indirectgoto

if.end.3658:                                      ; preds = %if.then.3647
  br label %fast_next_opcode

if.end.3659:                                      ; preds = %sw.epilog.3644
  br label %for.cond

TARGET_DELETE_NAME:                               ; preds = %indirectgoto
  store i32 91, i32* %opcode, align 4
  %2155 = load i8*, i8** %next_instr, align 8
  %add.ptr3660 = getelementptr i8, i8* %2155, i64 2
  store i8* %add.ptr3660, i8** %next_instr, align 8
  %2156 = load i8*, i8** %next_instr, align 8
  %arrayidx3661 = getelementptr i8, i8* %2156, i64 -1
  %2157 = load i8, i8* %arrayidx3661, align 1
  %conv3662 = zext i8 %2157 to i32
  %shl3663 = shl i32 %conv3662, 8
  %2158 = load i8*, i8** %next_instr, align 8
  %arrayidx3664 = getelementptr i8, i8* %2158, i64 -2
  %2159 = load i8, i8* %arrayidx3664, align 1
  %conv3665 = zext i8 %2159 to i32
  %add3666 = add i32 %shl3663, %conv3665
  store i32 %add3666, i32* %oparg, align 4
  br label %sw.bb.3667

sw.bb.3667:                                       ; preds = %dispatch_opcode, %TARGET_DELETE_NAME
  %2160 = load i32, i32* %oparg, align 4
  %idxprom3670 = sext i32 %2160 to i64
  %2161 = load %struct._object*, %struct._object** %names, align 8
  %2162 = bitcast %struct._object* %2161 to %struct.PyTupleObject*
  %ob_item3671 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2162, i32 0, i32 1
  %arrayidx3672 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item3671, i32 0, i64 %idxprom3670
  %2163 = load %struct._object*, %struct._object** %arrayidx3672, align 8
  store %struct._object* %2163, %struct._object** %name3669, align 8
  %2164 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals3675 = getelementptr inbounds %struct._frame, %struct._frame* %2164, i32 0, i32 5
  %2165 = load %struct._object*, %struct._object** %f_locals3675, align 8
  store %struct._object* %2165, %struct._object** %ns3674, align 8
  %2166 = load %struct._object*, %struct._object** %ns3674, align 8
  %cmp3678 = icmp eq %struct._object* %2166, null
  br i1 %cmp3678, label %if.then.3680, label %if.end.3682

if.then.3680:                                     ; preds = %sw.bb.3667
  %2167 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %2168 = load %struct._object*, %struct._object** %name3669, align 8
  %call3681 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2167, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i32 0, i32 0), %struct._object* %2168)
  br label %error

if.end.3682:                                      ; preds = %sw.bb.3667
  %2169 = load %struct._object*, %struct._object** %ns3674, align 8
  %2170 = load %struct._object*, %struct._object** %name3669, align 8
  %call3683 = call i32 @PyObject_DelItem(%struct._object* %2169, %struct._object* %2170)
  store i32 %call3683, i32* %err3677, align 4
  %2171 = load i32, i32* %err3677, align 4
  %cmp3684 = icmp ne i32 %2171, 0
  br i1 %cmp3684, label %if.then.3686, label %if.end.3687

if.then.3686:                                     ; preds = %if.end.3682
  %2172 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  %2173 = load %struct._object*, %struct._object** %name3669, align 8
  call void @format_exc_check_arg(%struct._object* %2172, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i32 0, i32 0), %struct._object* %2173)
  br label %error

if.end.3687:                                      ; preds = %if.end.3682
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3689, align 8
  %2174 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3689, align 8
  %_value3694 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2174, i32 0, i32 0
  store i32* %_value3694, i32** %volatile_data3693, align 8
  store i32 0, i32* %order3696, align 4
  %2175 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3689, align 8
  %2176 = bitcast %struct._Py_atomic_int* %2175 to i8*
  %2177 = load i32, i32* %order3696, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2176, i32 %2177)
  %2178 = load i32, i32* %order3696, align 4
  switch i32 %2178, label %sw.default.3698 [
    i32 2, label %sw.bb.3697
    i32 3, label %sw.bb.3697
    i32 4, label %sw.bb.3697
  ]

sw.bb.3697:                                       ; preds = %if.end.3687, %if.end.3687, %if.end.3687
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3699

sw.default.3698:                                  ; preds = %if.end.3687
  br label %sw.epilog.3699

sw.epilog.3699:                                   ; preds = %sw.default.3698, %sw.bb.3697
  %2179 = load i32*, i32** %volatile_data3693, align 8
  %2180 = load volatile i32, i32* %2179, align 4
  store i32 %2180, i32* %result3691, align 4
  %2181 = load i32, i32* %order3696, align 4
  switch i32 %2181, label %sw.default.3701 [
    i32 1, label %sw.bb.3700
    i32 3, label %sw.bb.3700
    i32 4, label %sw.bb.3700
  ]

sw.bb.3700:                                       ; preds = %sw.epilog.3699, %sw.epilog.3699, %sw.epilog.3699
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3702

sw.default.3701:                                  ; preds = %sw.epilog.3699
  br label %sw.epilog.3702

sw.epilog.3702:                                   ; preds = %sw.default.3701, %sw.bb.3700
  %2182 = load i32, i32* %result3691, align 4
  store i32 %2182, i32* %tmp3703
  %2183 = load i32, i32* %tmp3703
  %tobool3704 = icmp ne i32 %2183, 0
  br i1 %tobool3704, label %if.end.3717, label %if.then.3705

if.then.3705:                                     ; preds = %sw.epilog.3702
  %2184 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3706 = icmp ne i32 %2184, 0
  br i1 %tobool3706, label %if.end.3716, label %if.then.3707

if.then.3707:                                     ; preds = %if.then.3705
  %2185 = load i8*, i8** %next_instr, align 8
  %2186 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3708 = ptrtoint i8* %2185 to i64
  %sub.ptr.rhs.cast3709 = ptrtoint i8* %2186 to i64
  %sub.ptr.sub3710 = sub i64 %sub.ptr.lhs.cast3708, %sub.ptr.rhs.cast3709
  %conv3711 = trunc i64 %sub.ptr.sub3710 to i32
  %2187 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3712 = getelementptr inbounds %struct._frame, %struct._frame* %2187, i32 0, i32 13
  store i32 %conv3711, i32* %f_lasti3712, align 4
  %2188 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3713 = getelementptr i8, i8* %2188, i32 1
  store i8* %incdec.ptr3713, i8** %next_instr, align 8
  %2189 = load i8, i8* %2188, align 1
  %idxprom3714 = zext i8 %2189 to i64
  %arrayidx3715 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3714
  %2190 = load i8*, i8** %arrayidx3715, align 8
  br label %indirectgoto

if.end.3716:                                      ; preds = %if.then.3705
  br label %fast_next_opcode

if.end.3717:                                      ; preds = %sw.epilog.3702
  br label %for.cond

PRED_UNPACK_SEQUENCE:                             ; No predecessors!
  br label %TARGET_UNPACK_SEQUENCE

TARGET_UNPACK_SEQUENCE:                           ; preds = %PRED_UNPACK_SEQUENCE, %indirectgoto
  store i32 92, i32* %opcode, align 4
  %2191 = load i8*, i8** %next_instr, align 8
  %add.ptr3718 = getelementptr i8, i8* %2191, i64 2
  store i8* %add.ptr3718, i8** %next_instr, align 8
  %2192 = load i8*, i8** %next_instr, align 8
  %arrayidx3719 = getelementptr i8, i8* %2192, i64 -1
  %2193 = load i8, i8* %arrayidx3719, align 1
  %conv3720 = zext i8 %2193 to i32
  %shl3721 = shl i32 %conv3720, 8
  %2194 = load i8*, i8** %next_instr, align 8
  %arrayidx3722 = getelementptr i8, i8* %2194, i64 -2
  %2195 = load i8, i8* %arrayidx3722, align 1
  %conv3723 = zext i8 %2195 to i32
  %add3724 = add i32 %shl3721, %conv3723
  store i32 %add3724, i32* %oparg, align 4
  br label %sw.bb.3725

sw.bb.3725:                                       ; preds = %dispatch_opcode, %TARGET_UNPACK_SEQUENCE
  %2196 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3727 = getelementptr %struct._object*, %struct._object** %2196, i32 -1
  store %struct._object** %incdec.ptr3727, %struct._object*** %stack_pointer, align 8
  %2197 = load %struct._object*, %struct._object** %incdec.ptr3727, align 8
  store %struct._object* %2197, %struct._object** %seq, align 8
  %2198 = load %struct._object*, %struct._object** %seq, align 8
  %ob_type3730 = getelementptr inbounds %struct._object, %struct._object* %2198, i32 0, i32 1
  %2199 = load %struct._typeobject*, %struct._typeobject** %ob_type3730, align 8
  %cmp3731 = icmp eq %struct._typeobject* %2199, @PyTuple_Type
  br i1 %cmp3731, label %land.lhs.true.3733, label %if.else.3750

land.lhs.true.3733:                               ; preds = %sw.bb.3725
  %2200 = load %struct._object*, %struct._object** %seq, align 8
  %2201 = bitcast %struct._object* %2200 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2201, i32 0, i32 1
  %2202 = load i64, i64* %ob_size, align 8
  %2203 = load i32, i32* %oparg, align 4
  %conv3734 = sext i32 %2203 to i64
  %cmp3735 = icmp eq i64 %2202, %conv3734
  br i1 %cmp3735, label %if.then.3737, label %if.else.3750

if.then.3737:                                     ; preds = %land.lhs.true.3733
  %2204 = load %struct._object*, %struct._object** %seq, align 8
  %2205 = bitcast %struct._object* %2204 to %struct.PyTupleObject*
  %ob_item3738 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2205, i32 0, i32 1
  %arraydecay3739 = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %ob_item3738, i32 0, i32 0
  store %struct._object** %arraydecay3739, %struct._object*** %items, align 8
  br label %while.cond.3740

while.cond.3740:                                  ; preds = %while.body.3743, %if.then.3737
  %2206 = load i32, i32* %oparg, align 4
  %dec3741 = add i32 %2206, -1
  store i32 %dec3741, i32* %oparg, align 4
  %tobool3742 = icmp ne i32 %2206, 0
  br i1 %tobool3742, label %while.body.3743, label %while.end.3749

while.body.3743:                                  ; preds = %while.cond.3740
  %2207 = load i32, i32* %oparg, align 4
  %idxprom3744 = sext i32 %2207 to i64
  %2208 = load %struct._object**, %struct._object*** %items, align 8
  %arrayidx3745 = getelementptr %struct._object*, %struct._object** %2208, i64 %idxprom3744
  %2209 = load %struct._object*, %struct._object** %arrayidx3745, align 8
  store %struct._object* %2209, %struct._object** %item, align 8
  %2210 = load %struct._object*, %struct._object** %item, align 8
  %ob_refcnt3746 = getelementptr inbounds %struct._object, %struct._object* %2210, i32 0, i32 0
  %2211 = load i64, i64* %ob_refcnt3746, align 8
  %inc3747 = add i64 %2211, 1
  store i64 %inc3747, i64* %ob_refcnt3746, align 8
  %2212 = load %struct._object*, %struct._object** %item, align 8
  %2213 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3748 = getelementptr %struct._object*, %struct._object** %2213, i32 1
  store %struct._object** %incdec.ptr3748, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2212, %struct._object** %2213, align 8
  br label %while.cond.3740

while.end.3749:                                   ; preds = %while.cond.3740
  br label %if.end.3795

if.else.3750:                                     ; preds = %land.lhs.true.3733, %sw.bb.3725
  %2214 = load %struct._object*, %struct._object** %seq, align 8
  %ob_type3751 = getelementptr inbounds %struct._object, %struct._object* %2214, i32 0, i32 1
  %2215 = load %struct._typeobject*, %struct._typeobject** %ob_type3751, align 8
  %cmp3752 = icmp eq %struct._typeobject* %2215, @PyList_Type
  br i1 %cmp3752, label %land.lhs.true.3754, label %if.else.3771

land.lhs.true.3754:                               ; preds = %if.else.3750
  %2216 = load %struct._object*, %struct._object** %seq, align 8
  %2217 = bitcast %struct._object* %2216 to %struct.PyVarObject*
  %ob_size3755 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2217, i32 0, i32 1
  %2218 = load i64, i64* %ob_size3755, align 8
  %2219 = load i32, i32* %oparg, align 4
  %conv3756 = sext i32 %2219 to i64
  %cmp3757 = icmp eq i64 %2218, %conv3756
  br i1 %cmp3757, label %if.then.3759, label %if.else.3771

if.then.3759:                                     ; preds = %land.lhs.true.3754
  %2220 = load %struct._object*, %struct._object** %seq, align 8
  %2221 = bitcast %struct._object* %2220 to %struct.PyListObject*
  %ob_item3760 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %2221, i32 0, i32 1
  %2222 = load %struct._object**, %struct._object*** %ob_item3760, align 8
  store %struct._object** %2222, %struct._object*** %items, align 8
  br label %while.cond.3761

while.cond.3761:                                  ; preds = %while.body.3764, %if.then.3759
  %2223 = load i32, i32* %oparg, align 4
  %dec3762 = add i32 %2223, -1
  store i32 %dec3762, i32* %oparg, align 4
  %tobool3763 = icmp ne i32 %2223, 0
  br i1 %tobool3763, label %while.body.3764, label %while.end.3770

while.body.3764:                                  ; preds = %while.cond.3761
  %2224 = load i32, i32* %oparg, align 4
  %idxprom3765 = sext i32 %2224 to i64
  %2225 = load %struct._object**, %struct._object*** %items, align 8
  %arrayidx3766 = getelementptr %struct._object*, %struct._object** %2225, i64 %idxprom3765
  %2226 = load %struct._object*, %struct._object** %arrayidx3766, align 8
  store %struct._object* %2226, %struct._object** %item, align 8
  %2227 = load %struct._object*, %struct._object** %item, align 8
  %ob_refcnt3767 = getelementptr inbounds %struct._object, %struct._object* %2227, i32 0, i32 0
  %2228 = load i64, i64* %ob_refcnt3767, align 8
  %inc3768 = add i64 %2228, 1
  store i64 %inc3768, i64* %ob_refcnt3767, align 8
  %2229 = load %struct._object*, %struct._object** %item, align 8
  %2230 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3769 = getelementptr %struct._object*, %struct._object** %2230, i32 1
  store %struct._object** %incdec.ptr3769, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2229, %struct._object** %2230, align 8
  br label %while.cond.3761

while.end.3770:                                   ; preds = %while.cond.3761
  br label %if.end.3794

if.else.3771:                                     ; preds = %land.lhs.true.3754, %if.else.3750
  %2231 = load %struct._object*, %struct._object** %seq, align 8
  %2232 = load i32, i32* %oparg, align 4
  %2233 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %2234 = load i32, i32* %oparg, align 4
  %idx.ext3772 = sext i32 %2234 to i64
  %add.ptr3773 = getelementptr %struct._object*, %struct._object** %2233, i64 %idx.ext3772
  %call3774 = call i32 @unpack_iterable(%struct._object* %2231, i32 %2232, i32 -1, %struct._object** %add.ptr3773)
  %tobool3775 = icmp ne i32 %call3774, 0
  br i1 %tobool3775, label %if.then.3776, label %if.else.3779

if.then.3776:                                     ; preds = %if.else.3771
  %2235 = load i32, i32* %oparg, align 4
  %2236 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %idx.ext3777 = sext i32 %2235 to i64
  %add.ptr3778 = getelementptr %struct._object*, %struct._object** %2236, i64 %idx.ext3777
  store %struct._object** %add.ptr3778, %struct._object*** %stack_pointer, align 8
  br label %if.end.3793

if.else.3779:                                     ; preds = %if.else.3771
  br label %do.body.3780

do.body.3780:                                     ; preds = %if.else.3779
  %2237 = load %struct._object*, %struct._object** %seq, align 8
  store %struct._object* %2237, %struct._object** %_py_decref_tmp3782, align 8
  %2238 = load %struct._object*, %struct._object** %_py_decref_tmp3782, align 8
  %ob_refcnt3783 = getelementptr inbounds %struct._object, %struct._object* %2238, i32 0, i32 0
  %2239 = load i64, i64* %ob_refcnt3783, align 8
  %dec3784 = add i64 %2239, -1
  store i64 %dec3784, i64* %ob_refcnt3783, align 8
  %cmp3785 = icmp ne i64 %dec3784, 0
  br i1 %cmp3785, label %if.then.3787, label %if.else.3788

if.then.3787:                                     ; preds = %do.body.3780
  br label %if.end.3791

if.else.3788:                                     ; preds = %do.body.3780
  %2240 = load %struct._object*, %struct._object** %_py_decref_tmp3782, align 8
  %ob_type3789 = getelementptr inbounds %struct._object, %struct._object* %2240, i32 0, i32 1
  %2241 = load %struct._typeobject*, %struct._typeobject** %ob_type3789, align 8
  %tp_dealloc3790 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2241, i32 0, i32 4
  %2242 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3790, align 8
  %2243 = load %struct._object*, %struct._object** %_py_decref_tmp3782, align 8
  call void %2242(%struct._object* %2243)
  br label %if.end.3791

if.end.3791:                                      ; preds = %if.else.3788, %if.then.3787
  br label %do.end.3792

do.end.3792:                                      ; preds = %if.end.3791
  br label %error

if.end.3793:                                      ; preds = %if.then.3776
  br label %if.end.3794

if.end.3794:                                      ; preds = %if.end.3793, %while.end.3770
  br label %if.end.3795

if.end.3795:                                      ; preds = %if.end.3794, %while.end.3749
  br label %do.body.3796

do.body.3796:                                     ; preds = %if.end.3795
  %2244 = load %struct._object*, %struct._object** %seq, align 8
  store %struct._object* %2244, %struct._object** %_py_decref_tmp3798, align 8
  %2245 = load %struct._object*, %struct._object** %_py_decref_tmp3798, align 8
  %ob_refcnt3799 = getelementptr inbounds %struct._object, %struct._object* %2245, i32 0, i32 0
  %2246 = load i64, i64* %ob_refcnt3799, align 8
  %dec3800 = add i64 %2246, -1
  store i64 %dec3800, i64* %ob_refcnt3799, align 8
  %cmp3801 = icmp ne i64 %dec3800, 0
  br i1 %cmp3801, label %if.then.3803, label %if.else.3804

if.then.3803:                                     ; preds = %do.body.3796
  br label %if.end.3807

if.else.3804:                                     ; preds = %do.body.3796
  %2247 = load %struct._object*, %struct._object** %_py_decref_tmp3798, align 8
  %ob_type3805 = getelementptr inbounds %struct._object, %struct._object* %2247, i32 0, i32 1
  %2248 = load %struct._typeobject*, %struct._typeobject** %ob_type3805, align 8
  %tp_dealloc3806 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2248, i32 0, i32 4
  %2249 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3806, align 8
  %2250 = load %struct._object*, %struct._object** %_py_decref_tmp3798, align 8
  call void %2249(%struct._object* %2250)
  br label %if.end.3807

if.end.3807:                                      ; preds = %if.else.3804, %if.then.3803
  br label %do.end.3808

do.end.3808:                                      ; preds = %if.end.3807
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3810, align 8
  %2251 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3810, align 8
  %_value3815 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2251, i32 0, i32 0
  store i32* %_value3815, i32** %volatile_data3814, align 8
  store i32 0, i32* %order3817, align 4
  %2252 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3810, align 8
  %2253 = bitcast %struct._Py_atomic_int* %2252 to i8*
  %2254 = load i32, i32* %order3817, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2253, i32 %2254)
  %2255 = load i32, i32* %order3817, align 4
  switch i32 %2255, label %sw.default.3819 [
    i32 2, label %sw.bb.3818
    i32 3, label %sw.bb.3818
    i32 4, label %sw.bb.3818
  ]

sw.bb.3818:                                       ; preds = %do.end.3808, %do.end.3808, %do.end.3808
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3820

sw.default.3819:                                  ; preds = %do.end.3808
  br label %sw.epilog.3820

sw.epilog.3820:                                   ; preds = %sw.default.3819, %sw.bb.3818
  %2256 = load i32*, i32** %volatile_data3814, align 8
  %2257 = load volatile i32, i32* %2256, align 4
  store i32 %2257, i32* %result3812, align 4
  %2258 = load i32, i32* %order3817, align 4
  switch i32 %2258, label %sw.default.3822 [
    i32 1, label %sw.bb.3821
    i32 3, label %sw.bb.3821
    i32 4, label %sw.bb.3821
  ]

sw.bb.3821:                                       ; preds = %sw.epilog.3820, %sw.epilog.3820, %sw.epilog.3820
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3823

sw.default.3822:                                  ; preds = %sw.epilog.3820
  br label %sw.epilog.3823

sw.epilog.3823:                                   ; preds = %sw.default.3822, %sw.bb.3821
  %2259 = load i32, i32* %result3812, align 4
  store i32 %2259, i32* %tmp3824
  %2260 = load i32, i32* %tmp3824
  %tobool3825 = icmp ne i32 %2260, 0
  br i1 %tobool3825, label %if.end.3838, label %if.then.3826

if.then.3826:                                     ; preds = %sw.epilog.3823
  %2261 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3827 = icmp ne i32 %2261, 0
  br i1 %tobool3827, label %if.end.3837, label %if.then.3828

if.then.3828:                                     ; preds = %if.then.3826
  %2262 = load i8*, i8** %next_instr, align 8
  %2263 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3829 = ptrtoint i8* %2262 to i64
  %sub.ptr.rhs.cast3830 = ptrtoint i8* %2263 to i64
  %sub.ptr.sub3831 = sub i64 %sub.ptr.lhs.cast3829, %sub.ptr.rhs.cast3830
  %conv3832 = trunc i64 %sub.ptr.sub3831 to i32
  %2264 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3833 = getelementptr inbounds %struct._frame, %struct._frame* %2264, i32 0, i32 13
  store i32 %conv3832, i32* %f_lasti3833, align 4
  %2265 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3834 = getelementptr i8, i8* %2265, i32 1
  store i8* %incdec.ptr3834, i8** %next_instr, align 8
  %2266 = load i8, i8* %2265, align 1
  %idxprom3835 = zext i8 %2266 to i64
  %arrayidx3836 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3835
  %2267 = load i8*, i8** %arrayidx3836, align 8
  br label %indirectgoto

if.end.3837:                                      ; preds = %if.then.3826
  br label %fast_next_opcode

if.end.3838:                                      ; preds = %sw.epilog.3823
  br label %for.cond

TARGET_UNPACK_EX:                                 ; preds = %indirectgoto
  store i32 94, i32* %opcode, align 4
  %2268 = load i8*, i8** %next_instr, align 8
  %add.ptr3839 = getelementptr i8, i8* %2268, i64 2
  store i8* %add.ptr3839, i8** %next_instr, align 8
  %2269 = load i8*, i8** %next_instr, align 8
  %arrayidx3840 = getelementptr i8, i8* %2269, i64 -1
  %2270 = load i8, i8* %arrayidx3840, align 1
  %conv3841 = zext i8 %2270 to i32
  %shl3842 = shl i32 %conv3841, 8
  %2271 = load i8*, i8** %next_instr, align 8
  %arrayidx3843 = getelementptr i8, i8* %2271, i64 -2
  %2272 = load i8, i8* %arrayidx3843, align 1
  %conv3844 = zext i8 %2272 to i32
  %add3845 = add i32 %shl3842, %conv3844
  store i32 %add3845, i32* %oparg, align 4
  br label %sw.bb.3846

sw.bb.3846:                                       ; preds = %dispatch_opcode, %TARGET_UNPACK_EX
  %2273 = load i32, i32* %oparg, align 4
  %and3848 = and i32 %2273, 255
  %add3849 = add i32 1, %and3848
  %2274 = load i32, i32* %oparg, align 4
  %shr = ashr i32 %2274, 8
  %add3850 = add i32 %add3849, %shr
  store i32 %add3850, i32* %totalargs, align 4
  %2275 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr3853 = getelementptr %struct._object*, %struct._object** %2275, i32 -1
  store %struct._object** %incdec.ptr3853, %struct._object*** %stack_pointer, align 8
  %2276 = load %struct._object*, %struct._object** %incdec.ptr3853, align 8
  store %struct._object* %2276, %struct._object** %seq3852, align 8
  %2277 = load %struct._object*, %struct._object** %seq3852, align 8
  %2278 = load i32, i32* %oparg, align 4
  %and3854 = and i32 %2278, 255
  %2279 = load i32, i32* %oparg, align 4
  %shr3855 = ashr i32 %2279, 8
  %2280 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %2281 = load i32, i32* %totalargs, align 4
  %idx.ext3856 = sext i32 %2281 to i64
  %add.ptr3857 = getelementptr %struct._object*, %struct._object** %2280, i64 %idx.ext3856
  %call3858 = call i32 @unpack_iterable(%struct._object* %2277, i32 %and3854, i32 %shr3855, %struct._object** %add.ptr3857)
  %tobool3859 = icmp ne i32 %call3858, 0
  br i1 %tobool3859, label %if.then.3860, label %if.else.3863

if.then.3860:                                     ; preds = %sw.bb.3846
  %2282 = load i32, i32* %totalargs, align 4
  %2283 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %idx.ext3861 = sext i32 %2282 to i64
  %add.ptr3862 = getelementptr %struct._object*, %struct._object** %2283, i64 %idx.ext3861
  store %struct._object** %add.ptr3862, %struct._object*** %stack_pointer, align 8
  br label %if.end.3877

if.else.3863:                                     ; preds = %sw.bb.3846
  br label %do.body.3864

do.body.3864:                                     ; preds = %if.else.3863
  %2284 = load %struct._object*, %struct._object** %seq3852, align 8
  store %struct._object* %2284, %struct._object** %_py_decref_tmp3866, align 8
  %2285 = load %struct._object*, %struct._object** %_py_decref_tmp3866, align 8
  %ob_refcnt3867 = getelementptr inbounds %struct._object, %struct._object* %2285, i32 0, i32 0
  %2286 = load i64, i64* %ob_refcnt3867, align 8
  %dec3868 = add i64 %2286, -1
  store i64 %dec3868, i64* %ob_refcnt3867, align 8
  %cmp3869 = icmp ne i64 %dec3868, 0
  br i1 %cmp3869, label %if.then.3871, label %if.else.3872

if.then.3871:                                     ; preds = %do.body.3864
  br label %if.end.3875

if.else.3872:                                     ; preds = %do.body.3864
  %2287 = load %struct._object*, %struct._object** %_py_decref_tmp3866, align 8
  %ob_type3873 = getelementptr inbounds %struct._object, %struct._object* %2287, i32 0, i32 1
  %2288 = load %struct._typeobject*, %struct._typeobject** %ob_type3873, align 8
  %tp_dealloc3874 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2288, i32 0, i32 4
  %2289 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3874, align 8
  %2290 = load %struct._object*, %struct._object** %_py_decref_tmp3866, align 8
  call void %2289(%struct._object* %2290)
  br label %if.end.3875

if.end.3875:                                      ; preds = %if.else.3872, %if.then.3871
  br label %do.end.3876

do.end.3876:                                      ; preds = %if.end.3875
  br label %error

if.end.3877:                                      ; preds = %if.then.3860
  br label %do.body.3878

do.body.3878:                                     ; preds = %if.end.3877
  %2291 = load %struct._object*, %struct._object** %seq3852, align 8
  store %struct._object* %2291, %struct._object** %_py_decref_tmp3880, align 8
  %2292 = load %struct._object*, %struct._object** %_py_decref_tmp3880, align 8
  %ob_refcnt3881 = getelementptr inbounds %struct._object, %struct._object* %2292, i32 0, i32 0
  %2293 = load i64, i64* %ob_refcnt3881, align 8
  %dec3882 = add i64 %2293, -1
  store i64 %dec3882, i64* %ob_refcnt3881, align 8
  %cmp3883 = icmp ne i64 %dec3882, 0
  br i1 %cmp3883, label %if.then.3885, label %if.else.3886

if.then.3885:                                     ; preds = %do.body.3878
  br label %if.end.3889

if.else.3886:                                     ; preds = %do.body.3878
  %2294 = load %struct._object*, %struct._object** %_py_decref_tmp3880, align 8
  %ob_type3887 = getelementptr inbounds %struct._object, %struct._object* %2294, i32 0, i32 1
  %2295 = load %struct._typeobject*, %struct._typeobject** %ob_type3887, align 8
  %tp_dealloc3888 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2295, i32 0, i32 4
  %2296 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3888, align 8
  %2297 = load %struct._object*, %struct._object** %_py_decref_tmp3880, align 8
  call void %2296(%struct._object* %2297)
  br label %if.end.3889

if.end.3889:                                      ; preds = %if.else.3886, %if.then.3885
  br label %do.end.3890

do.end.3890:                                      ; preds = %if.end.3889
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3892, align 8
  %2298 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3892, align 8
  %_value3897 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2298, i32 0, i32 0
  store i32* %_value3897, i32** %volatile_data3896, align 8
  store i32 0, i32* %order3899, align 4
  %2299 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3892, align 8
  %2300 = bitcast %struct._Py_atomic_int* %2299 to i8*
  %2301 = load i32, i32* %order3899, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2300, i32 %2301)
  %2302 = load i32, i32* %order3899, align 4
  switch i32 %2302, label %sw.default.3901 [
    i32 2, label %sw.bb.3900
    i32 3, label %sw.bb.3900
    i32 4, label %sw.bb.3900
  ]

sw.bb.3900:                                       ; preds = %do.end.3890, %do.end.3890, %do.end.3890
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3902

sw.default.3901:                                  ; preds = %do.end.3890
  br label %sw.epilog.3902

sw.epilog.3902:                                   ; preds = %sw.default.3901, %sw.bb.3900
  %2303 = load i32*, i32** %volatile_data3896, align 8
  %2304 = load volatile i32, i32* %2303, align 4
  store i32 %2304, i32* %result3894, align 4
  %2305 = load i32, i32* %order3899, align 4
  switch i32 %2305, label %sw.default.3904 [
    i32 1, label %sw.bb.3903
    i32 3, label %sw.bb.3903
    i32 4, label %sw.bb.3903
  ]

sw.bb.3903:                                       ; preds = %sw.epilog.3902, %sw.epilog.3902, %sw.epilog.3902
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3905

sw.default.3904:                                  ; preds = %sw.epilog.3902
  br label %sw.epilog.3905

sw.epilog.3905:                                   ; preds = %sw.default.3904, %sw.bb.3903
  %2306 = load i32, i32* %result3894, align 4
  store i32 %2306, i32* %tmp3906
  %2307 = load i32, i32* %tmp3906
  %tobool3907 = icmp ne i32 %2307, 0
  br i1 %tobool3907, label %if.end.3920, label %if.then.3908

if.then.3908:                                     ; preds = %sw.epilog.3905
  %2308 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3909 = icmp ne i32 %2308, 0
  br i1 %tobool3909, label %if.end.3919, label %if.then.3910

if.then.3910:                                     ; preds = %if.then.3908
  %2309 = load i8*, i8** %next_instr, align 8
  %2310 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3911 = ptrtoint i8* %2309 to i64
  %sub.ptr.rhs.cast3912 = ptrtoint i8* %2310 to i64
  %sub.ptr.sub3913 = sub i64 %sub.ptr.lhs.cast3911, %sub.ptr.rhs.cast3912
  %conv3914 = trunc i64 %sub.ptr.sub3913 to i32
  %2311 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3915 = getelementptr inbounds %struct._frame, %struct._frame* %2311, i32 0, i32 13
  store i32 %conv3914, i32* %f_lasti3915, align 4
  %2312 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3916 = getelementptr i8, i8* %2312, i32 1
  store i8* %incdec.ptr3916, i8** %next_instr, align 8
  %2313 = load i8, i8* %2312, align 1
  %idxprom3917 = zext i8 %2313 to i64
  %arrayidx3918 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3917
  %2314 = load i8*, i8** %arrayidx3918, align 8
  br label %indirectgoto

if.end.3919:                                      ; preds = %if.then.3908
  br label %fast_next_opcode

if.end.3920:                                      ; preds = %sw.epilog.3905
  br label %for.cond

TARGET_STORE_ATTR:                                ; preds = %indirectgoto
  store i32 95, i32* %opcode, align 4
  %2315 = load i8*, i8** %next_instr, align 8
  %add.ptr3921 = getelementptr i8, i8* %2315, i64 2
  store i8* %add.ptr3921, i8** %next_instr, align 8
  %2316 = load i8*, i8** %next_instr, align 8
  %arrayidx3922 = getelementptr i8, i8* %2316, i64 -1
  %2317 = load i8, i8* %arrayidx3922, align 1
  %conv3923 = zext i8 %2317 to i32
  %shl3924 = shl i32 %conv3923, 8
  %2318 = load i8*, i8** %next_instr, align 8
  %arrayidx3925 = getelementptr i8, i8* %2318, i64 -2
  %2319 = load i8, i8* %arrayidx3925, align 1
  %conv3926 = zext i8 %2319 to i32
  %add3927 = add i32 %shl3924, %conv3926
  store i32 %add3927, i32* %oparg, align 4
  br label %sw.bb.3928

sw.bb.3928:                                       ; preds = %dispatch_opcode, %TARGET_STORE_ATTR
  %2320 = load i32, i32* %oparg, align 4
  %idxprom3931 = sext i32 %2320 to i64
  %2321 = load %struct._object*, %struct._object** %names, align 8
  %2322 = bitcast %struct._object* %2321 to %struct.PyTupleObject*
  %ob_item3932 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2322, i32 0, i32 1
  %arrayidx3933 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item3932, i32 0, i64 %idxprom3931
  %2323 = load %struct._object*, %struct._object** %arrayidx3933, align 8
  store %struct._object* %2323, %struct._object** %name3930, align 8
  %2324 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx3935 = getelementptr %struct._object*, %struct._object** %2324, i64 -1
  %2325 = load %struct._object*, %struct._object** %arrayidx3935, align 8
  store %struct._object* %2325, %struct._object** %owner, align 8
  %2326 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx3938 = getelementptr %struct._object*, %struct._object** %2326, i64 -2
  %2327 = load %struct._object*, %struct._object** %arrayidx3938, align 8
  store %struct._object* %2327, %struct._object** %v3937, align 8
  %2328 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr3941 = getelementptr %struct._object*, %struct._object** %2328, i64 -2
  store %struct._object** %add.ptr3941, %struct._object*** %stack_pointer, align 8
  %2329 = load %struct._object*, %struct._object** %owner, align 8
  %2330 = load %struct._object*, %struct._object** %name3930, align 8
  %2331 = load %struct._object*, %struct._object** %v3937, align 8
  %call3942 = call i32 @PyObject_SetAttr(%struct._object* %2329, %struct._object* %2330, %struct._object* %2331)
  store i32 %call3942, i32* %err3940, align 4
  br label %do.body.3943

do.body.3943:                                     ; preds = %sw.bb.3928
  %2332 = load %struct._object*, %struct._object** %v3937, align 8
  store %struct._object* %2332, %struct._object** %_py_decref_tmp3945, align 8
  %2333 = load %struct._object*, %struct._object** %_py_decref_tmp3945, align 8
  %ob_refcnt3946 = getelementptr inbounds %struct._object, %struct._object* %2333, i32 0, i32 0
  %2334 = load i64, i64* %ob_refcnt3946, align 8
  %dec3947 = add i64 %2334, -1
  store i64 %dec3947, i64* %ob_refcnt3946, align 8
  %cmp3948 = icmp ne i64 %dec3947, 0
  br i1 %cmp3948, label %if.then.3950, label %if.else.3951

if.then.3950:                                     ; preds = %do.body.3943
  br label %if.end.3954

if.else.3951:                                     ; preds = %do.body.3943
  %2335 = load %struct._object*, %struct._object** %_py_decref_tmp3945, align 8
  %ob_type3952 = getelementptr inbounds %struct._object, %struct._object* %2335, i32 0, i32 1
  %2336 = load %struct._typeobject*, %struct._typeobject** %ob_type3952, align 8
  %tp_dealloc3953 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2336, i32 0, i32 4
  %2337 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3953, align 8
  %2338 = load %struct._object*, %struct._object** %_py_decref_tmp3945, align 8
  call void %2337(%struct._object* %2338)
  br label %if.end.3954

if.end.3954:                                      ; preds = %if.else.3951, %if.then.3950
  br label %do.end.3955

do.end.3955:                                      ; preds = %if.end.3954
  br label %do.body.3956

do.body.3956:                                     ; preds = %do.end.3955
  %2339 = load %struct._object*, %struct._object** %owner, align 8
  store %struct._object* %2339, %struct._object** %_py_decref_tmp3958, align 8
  %2340 = load %struct._object*, %struct._object** %_py_decref_tmp3958, align 8
  %ob_refcnt3959 = getelementptr inbounds %struct._object, %struct._object* %2340, i32 0, i32 0
  %2341 = load i64, i64* %ob_refcnt3959, align 8
  %dec3960 = add i64 %2341, -1
  store i64 %dec3960, i64* %ob_refcnt3959, align 8
  %cmp3961 = icmp ne i64 %dec3960, 0
  br i1 %cmp3961, label %if.then.3963, label %if.else.3964

if.then.3963:                                     ; preds = %do.body.3956
  br label %if.end.3967

if.else.3964:                                     ; preds = %do.body.3956
  %2342 = load %struct._object*, %struct._object** %_py_decref_tmp3958, align 8
  %ob_type3965 = getelementptr inbounds %struct._object, %struct._object* %2342, i32 0, i32 1
  %2343 = load %struct._typeobject*, %struct._typeobject** %ob_type3965, align 8
  %tp_dealloc3966 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2343, i32 0, i32 4
  %2344 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc3966, align 8
  %2345 = load %struct._object*, %struct._object** %_py_decref_tmp3958, align 8
  call void %2344(%struct._object* %2345)
  br label %if.end.3967

if.end.3967:                                      ; preds = %if.else.3964, %if.then.3963
  br label %do.end.3968

do.end.3968:                                      ; preds = %if.end.3967
  %2346 = load i32, i32* %err3940, align 4
  %cmp3969 = icmp ne i32 %2346, 0
  br i1 %cmp3969, label %if.then.3971, label %if.end.3972

if.then.3971:                                     ; preds = %do.end.3968
  br label %error

if.end.3972:                                      ; preds = %do.end.3968
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val3974, align 8
  %2347 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3974, align 8
  %_value3979 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2347, i32 0, i32 0
  store i32* %_value3979, i32** %volatile_data3978, align 8
  store i32 0, i32* %order3981, align 4
  %2348 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val3974, align 8
  %2349 = bitcast %struct._Py_atomic_int* %2348 to i8*
  %2350 = load i32, i32* %order3981, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2349, i32 %2350)
  %2351 = load i32, i32* %order3981, align 4
  switch i32 %2351, label %sw.default.3983 [
    i32 2, label %sw.bb.3982
    i32 3, label %sw.bb.3982
    i32 4, label %sw.bb.3982
  ]

sw.bb.3982:                                       ; preds = %if.end.3972, %if.end.3972, %if.end.3972
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.3984

sw.default.3983:                                  ; preds = %if.end.3972
  br label %sw.epilog.3984

sw.epilog.3984:                                   ; preds = %sw.default.3983, %sw.bb.3982
  %2352 = load i32*, i32** %volatile_data3978, align 8
  %2353 = load volatile i32, i32* %2352, align 4
  store i32 %2353, i32* %result3976, align 4
  %2354 = load i32, i32* %order3981, align 4
  switch i32 %2354, label %sw.default.3986 [
    i32 1, label %sw.bb.3985
    i32 3, label %sw.bb.3985
    i32 4, label %sw.bb.3985
  ]

sw.bb.3985:                                       ; preds = %sw.epilog.3984, %sw.epilog.3984, %sw.epilog.3984
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3987

sw.default.3986:                                  ; preds = %sw.epilog.3984
  br label %sw.epilog.3987

sw.epilog.3987:                                   ; preds = %sw.default.3986, %sw.bb.3985
  %2355 = load i32, i32* %result3976, align 4
  store i32 %2355, i32* %tmp3988
  %2356 = load i32, i32* %tmp3988
  %tobool3989 = icmp ne i32 %2356, 0
  br i1 %tobool3989, label %if.end.4002, label %if.then.3990

if.then.3990:                                     ; preds = %sw.epilog.3987
  %2357 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool3991 = icmp ne i32 %2357, 0
  br i1 %tobool3991, label %if.end.4001, label %if.then.3992

if.then.3992:                                     ; preds = %if.then.3990
  %2358 = load i8*, i8** %next_instr, align 8
  %2359 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast3993 = ptrtoint i8* %2358 to i64
  %sub.ptr.rhs.cast3994 = ptrtoint i8* %2359 to i64
  %sub.ptr.sub3995 = sub i64 %sub.ptr.lhs.cast3993, %sub.ptr.rhs.cast3994
  %conv3996 = trunc i64 %sub.ptr.sub3995 to i32
  %2360 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti3997 = getelementptr inbounds %struct._frame, %struct._frame* %2360, i32 0, i32 13
  store i32 %conv3996, i32* %f_lasti3997, align 4
  %2361 = load i8*, i8** %next_instr, align 8
  %incdec.ptr3998 = getelementptr i8, i8* %2361, i32 1
  store i8* %incdec.ptr3998, i8** %next_instr, align 8
  %2362 = load i8, i8* %2361, align 1
  %idxprom3999 = zext i8 %2362 to i64
  %arrayidx4000 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom3999
  %2363 = load i8*, i8** %arrayidx4000, align 8
  br label %indirectgoto

if.end.4001:                                      ; preds = %if.then.3990
  br label %fast_next_opcode

if.end.4002:                                      ; preds = %sw.epilog.3987
  br label %for.cond

TARGET_DELETE_ATTR:                               ; preds = %indirectgoto
  store i32 96, i32* %opcode, align 4
  %2364 = load i8*, i8** %next_instr, align 8
  %add.ptr4003 = getelementptr i8, i8* %2364, i64 2
  store i8* %add.ptr4003, i8** %next_instr, align 8
  %2365 = load i8*, i8** %next_instr, align 8
  %arrayidx4004 = getelementptr i8, i8* %2365, i64 -1
  %2366 = load i8, i8* %arrayidx4004, align 1
  %conv4005 = zext i8 %2366 to i32
  %shl4006 = shl i32 %conv4005, 8
  %2367 = load i8*, i8** %next_instr, align 8
  %arrayidx4007 = getelementptr i8, i8* %2367, i64 -2
  %2368 = load i8, i8* %arrayidx4007, align 1
  %conv4008 = zext i8 %2368 to i32
  %add4009 = add i32 %shl4006, %conv4008
  store i32 %add4009, i32* %oparg, align 4
  br label %sw.bb.4010

sw.bb.4010:                                       ; preds = %dispatch_opcode, %TARGET_DELETE_ATTR
  %2369 = load i32, i32* %oparg, align 4
  %idxprom4013 = sext i32 %2369 to i64
  %2370 = load %struct._object*, %struct._object** %names, align 8
  %2371 = bitcast %struct._object* %2370 to %struct.PyTupleObject*
  %ob_item4014 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2371, i32 0, i32 1
  %arrayidx4015 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4014, i32 0, i64 %idxprom4013
  %2372 = load %struct._object*, %struct._object** %arrayidx4015, align 8
  store %struct._object* %2372, %struct._object** %name4012, align 8
  %2373 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4018 = getelementptr %struct._object*, %struct._object** %2373, i32 -1
  store %struct._object** %incdec.ptr4018, %struct._object*** %stack_pointer, align 8
  %2374 = load %struct._object*, %struct._object** %incdec.ptr4018, align 8
  store %struct._object* %2374, %struct._object** %owner4017, align 8
  %2375 = load %struct._object*, %struct._object** %owner4017, align 8
  %2376 = load %struct._object*, %struct._object** %name4012, align 8
  %call4021 = call i32 @PyObject_SetAttr(%struct._object* %2375, %struct._object* %2376, %struct._object* null)
  store i32 %call4021, i32* %err4020, align 4
  br label %do.body.4022

do.body.4022:                                     ; preds = %sw.bb.4010
  %2377 = load %struct._object*, %struct._object** %owner4017, align 8
  store %struct._object* %2377, %struct._object** %_py_decref_tmp4024, align 8
  %2378 = load %struct._object*, %struct._object** %_py_decref_tmp4024, align 8
  %ob_refcnt4025 = getelementptr inbounds %struct._object, %struct._object* %2378, i32 0, i32 0
  %2379 = load i64, i64* %ob_refcnt4025, align 8
  %dec4026 = add i64 %2379, -1
  store i64 %dec4026, i64* %ob_refcnt4025, align 8
  %cmp4027 = icmp ne i64 %dec4026, 0
  br i1 %cmp4027, label %if.then.4029, label %if.else.4030

if.then.4029:                                     ; preds = %do.body.4022
  br label %if.end.4033

if.else.4030:                                     ; preds = %do.body.4022
  %2380 = load %struct._object*, %struct._object** %_py_decref_tmp4024, align 8
  %ob_type4031 = getelementptr inbounds %struct._object, %struct._object* %2380, i32 0, i32 1
  %2381 = load %struct._typeobject*, %struct._typeobject** %ob_type4031, align 8
  %tp_dealloc4032 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2381, i32 0, i32 4
  %2382 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc4032, align 8
  %2383 = load %struct._object*, %struct._object** %_py_decref_tmp4024, align 8
  call void %2382(%struct._object* %2383)
  br label %if.end.4033

if.end.4033:                                      ; preds = %if.else.4030, %if.then.4029
  br label %do.end.4034

do.end.4034:                                      ; preds = %if.end.4033
  %2384 = load i32, i32* %err4020, align 4
  %cmp4035 = icmp ne i32 %2384, 0
  br i1 %cmp4035, label %if.then.4037, label %if.end.4038

if.then.4037:                                     ; preds = %do.end.4034
  br label %error

if.end.4038:                                      ; preds = %do.end.4034
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4040, align 8
  %2385 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4040, align 8
  %_value4045 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2385, i32 0, i32 0
  store i32* %_value4045, i32** %volatile_data4044, align 8
  store i32 0, i32* %order4047, align 4
  %2386 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4040, align 8
  %2387 = bitcast %struct._Py_atomic_int* %2386 to i8*
  %2388 = load i32, i32* %order4047, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2387, i32 %2388)
  %2389 = load i32, i32* %order4047, align 4
  switch i32 %2389, label %sw.default.4049 [
    i32 2, label %sw.bb.4048
    i32 3, label %sw.bb.4048
    i32 4, label %sw.bb.4048
  ]

sw.bb.4048:                                       ; preds = %if.end.4038, %if.end.4038, %if.end.4038
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4050

sw.default.4049:                                  ; preds = %if.end.4038
  br label %sw.epilog.4050

sw.epilog.4050:                                   ; preds = %sw.default.4049, %sw.bb.4048
  %2390 = load i32*, i32** %volatile_data4044, align 8
  %2391 = load volatile i32, i32* %2390, align 4
  store i32 %2391, i32* %result4042, align 4
  %2392 = load i32, i32* %order4047, align 4
  switch i32 %2392, label %sw.default.4052 [
    i32 1, label %sw.bb.4051
    i32 3, label %sw.bb.4051
    i32 4, label %sw.bb.4051
  ]

sw.bb.4051:                                       ; preds = %sw.epilog.4050, %sw.epilog.4050, %sw.epilog.4050
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4053

sw.default.4052:                                  ; preds = %sw.epilog.4050
  br label %sw.epilog.4053

sw.epilog.4053:                                   ; preds = %sw.default.4052, %sw.bb.4051
  %2393 = load i32, i32* %result4042, align 4
  store i32 %2393, i32* %tmp4054
  %2394 = load i32, i32* %tmp4054
  %tobool4055 = icmp ne i32 %2394, 0
  br i1 %tobool4055, label %if.end.4068, label %if.then.4056

if.then.4056:                                     ; preds = %sw.epilog.4053
  %2395 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4057 = icmp ne i32 %2395, 0
  br i1 %tobool4057, label %if.end.4067, label %if.then.4058

if.then.4058:                                     ; preds = %if.then.4056
  %2396 = load i8*, i8** %next_instr, align 8
  %2397 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4059 = ptrtoint i8* %2396 to i64
  %sub.ptr.rhs.cast4060 = ptrtoint i8* %2397 to i64
  %sub.ptr.sub4061 = sub i64 %sub.ptr.lhs.cast4059, %sub.ptr.rhs.cast4060
  %conv4062 = trunc i64 %sub.ptr.sub4061 to i32
  %2398 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4063 = getelementptr inbounds %struct._frame, %struct._frame* %2398, i32 0, i32 13
  store i32 %conv4062, i32* %f_lasti4063, align 4
  %2399 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4064 = getelementptr i8, i8* %2399, i32 1
  store i8* %incdec.ptr4064, i8** %next_instr, align 8
  %2400 = load i8, i8* %2399, align 1
  %idxprom4065 = zext i8 %2400 to i64
  %arrayidx4066 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4065
  %2401 = load i8*, i8** %arrayidx4066, align 8
  br label %indirectgoto

if.end.4067:                                      ; preds = %if.then.4056
  br label %fast_next_opcode

if.end.4068:                                      ; preds = %sw.epilog.4053
  br label %for.cond

TARGET_STORE_GLOBAL:                              ; preds = %indirectgoto
  store i32 97, i32* %opcode, align 4
  %2402 = load i8*, i8** %next_instr, align 8
  %add.ptr4069 = getelementptr i8, i8* %2402, i64 2
  store i8* %add.ptr4069, i8** %next_instr, align 8
  %2403 = load i8*, i8** %next_instr, align 8
  %arrayidx4070 = getelementptr i8, i8* %2403, i64 -1
  %2404 = load i8, i8* %arrayidx4070, align 1
  %conv4071 = zext i8 %2404 to i32
  %shl4072 = shl i32 %conv4071, 8
  %2405 = load i8*, i8** %next_instr, align 8
  %arrayidx4073 = getelementptr i8, i8* %2405, i64 -2
  %2406 = load i8, i8* %arrayidx4073, align 1
  %conv4074 = zext i8 %2406 to i32
  %add4075 = add i32 %shl4072, %conv4074
  store i32 %add4075, i32* %oparg, align 4
  br label %sw.bb.4076

sw.bb.4076:                                       ; preds = %dispatch_opcode, %TARGET_STORE_GLOBAL
  %2407 = load i32, i32* %oparg, align 4
  %idxprom4079 = sext i32 %2407 to i64
  %2408 = load %struct._object*, %struct._object** %names, align 8
  %2409 = bitcast %struct._object* %2408 to %struct.PyTupleObject*
  %ob_item4080 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2409, i32 0, i32 1
  %arrayidx4081 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4080, i32 0, i64 %idxprom4079
  %2410 = load %struct._object*, %struct._object** %arrayidx4081, align 8
  store %struct._object* %2410, %struct._object** %name4078, align 8
  %2411 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4084 = getelementptr %struct._object*, %struct._object** %2411, i32 -1
  store %struct._object** %incdec.ptr4084, %struct._object*** %stack_pointer, align 8
  %2412 = load %struct._object*, %struct._object** %incdec.ptr4084, align 8
  store %struct._object* %2412, %struct._object** %v4083, align 8
  %2413 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals = getelementptr inbounds %struct._frame, %struct._frame* %2413, i32 0, i32 4
  %2414 = load %struct._object*, %struct._object** %f_globals, align 8
  %2415 = load %struct._object*, %struct._object** %name4078, align 8
  %2416 = load %struct._object*, %struct._object** %v4083, align 8
  %call4087 = call i32 @PyDict_SetItem(%struct._object* %2414, %struct._object* %2415, %struct._object* %2416)
  store i32 %call4087, i32* %err4086, align 4
  br label %do.body.4088

do.body.4088:                                     ; preds = %sw.bb.4076
  %2417 = load %struct._object*, %struct._object** %v4083, align 8
  store %struct._object* %2417, %struct._object** %_py_decref_tmp4090, align 8
  %2418 = load %struct._object*, %struct._object** %_py_decref_tmp4090, align 8
  %ob_refcnt4091 = getelementptr inbounds %struct._object, %struct._object* %2418, i32 0, i32 0
  %2419 = load i64, i64* %ob_refcnt4091, align 8
  %dec4092 = add i64 %2419, -1
  store i64 %dec4092, i64* %ob_refcnt4091, align 8
  %cmp4093 = icmp ne i64 %dec4092, 0
  br i1 %cmp4093, label %if.then.4095, label %if.else.4096

if.then.4095:                                     ; preds = %do.body.4088
  br label %if.end.4099

if.else.4096:                                     ; preds = %do.body.4088
  %2420 = load %struct._object*, %struct._object** %_py_decref_tmp4090, align 8
  %ob_type4097 = getelementptr inbounds %struct._object, %struct._object* %2420, i32 0, i32 1
  %2421 = load %struct._typeobject*, %struct._typeobject** %ob_type4097, align 8
  %tp_dealloc4098 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2421, i32 0, i32 4
  %2422 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc4098, align 8
  %2423 = load %struct._object*, %struct._object** %_py_decref_tmp4090, align 8
  call void %2422(%struct._object* %2423)
  br label %if.end.4099

if.end.4099:                                      ; preds = %if.else.4096, %if.then.4095
  br label %do.end.4100

do.end.4100:                                      ; preds = %if.end.4099
  %2424 = load i32, i32* %err4086, align 4
  %cmp4101 = icmp ne i32 %2424, 0
  br i1 %cmp4101, label %if.then.4103, label %if.end.4104

if.then.4103:                                     ; preds = %do.end.4100
  br label %error

if.end.4104:                                      ; preds = %do.end.4100
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4106, align 8
  %2425 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4106, align 8
  %_value4111 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2425, i32 0, i32 0
  store i32* %_value4111, i32** %volatile_data4110, align 8
  store i32 0, i32* %order4113, align 4
  %2426 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4106, align 8
  %2427 = bitcast %struct._Py_atomic_int* %2426 to i8*
  %2428 = load i32, i32* %order4113, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2427, i32 %2428)
  %2429 = load i32, i32* %order4113, align 4
  switch i32 %2429, label %sw.default.4115 [
    i32 2, label %sw.bb.4114
    i32 3, label %sw.bb.4114
    i32 4, label %sw.bb.4114
  ]

sw.bb.4114:                                       ; preds = %if.end.4104, %if.end.4104, %if.end.4104
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4116

sw.default.4115:                                  ; preds = %if.end.4104
  br label %sw.epilog.4116

sw.epilog.4116:                                   ; preds = %sw.default.4115, %sw.bb.4114
  %2430 = load i32*, i32** %volatile_data4110, align 8
  %2431 = load volatile i32, i32* %2430, align 4
  store i32 %2431, i32* %result4108, align 4
  %2432 = load i32, i32* %order4113, align 4
  switch i32 %2432, label %sw.default.4118 [
    i32 1, label %sw.bb.4117
    i32 3, label %sw.bb.4117
    i32 4, label %sw.bb.4117
  ]

sw.bb.4117:                                       ; preds = %sw.epilog.4116, %sw.epilog.4116, %sw.epilog.4116
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4119

sw.default.4118:                                  ; preds = %sw.epilog.4116
  br label %sw.epilog.4119

sw.epilog.4119:                                   ; preds = %sw.default.4118, %sw.bb.4117
  %2433 = load i32, i32* %result4108, align 4
  store i32 %2433, i32* %tmp4120
  %2434 = load i32, i32* %tmp4120
  %tobool4121 = icmp ne i32 %2434, 0
  br i1 %tobool4121, label %if.end.4134, label %if.then.4122

if.then.4122:                                     ; preds = %sw.epilog.4119
  %2435 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4123 = icmp ne i32 %2435, 0
  br i1 %tobool4123, label %if.end.4133, label %if.then.4124

if.then.4124:                                     ; preds = %if.then.4122
  %2436 = load i8*, i8** %next_instr, align 8
  %2437 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4125 = ptrtoint i8* %2436 to i64
  %sub.ptr.rhs.cast4126 = ptrtoint i8* %2437 to i64
  %sub.ptr.sub4127 = sub i64 %sub.ptr.lhs.cast4125, %sub.ptr.rhs.cast4126
  %conv4128 = trunc i64 %sub.ptr.sub4127 to i32
  %2438 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4129 = getelementptr inbounds %struct._frame, %struct._frame* %2438, i32 0, i32 13
  store i32 %conv4128, i32* %f_lasti4129, align 4
  %2439 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4130 = getelementptr i8, i8* %2439, i32 1
  store i8* %incdec.ptr4130, i8** %next_instr, align 8
  %2440 = load i8, i8* %2439, align 1
  %idxprom4131 = zext i8 %2440 to i64
  %arrayidx4132 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4131
  %2441 = load i8*, i8** %arrayidx4132, align 8
  br label %indirectgoto

if.end.4133:                                      ; preds = %if.then.4122
  br label %fast_next_opcode

if.end.4134:                                      ; preds = %sw.epilog.4119
  br label %for.cond

TARGET_DELETE_GLOBAL:                             ; preds = %indirectgoto
  store i32 98, i32* %opcode, align 4
  %2442 = load i8*, i8** %next_instr, align 8
  %add.ptr4135 = getelementptr i8, i8* %2442, i64 2
  store i8* %add.ptr4135, i8** %next_instr, align 8
  %2443 = load i8*, i8** %next_instr, align 8
  %arrayidx4136 = getelementptr i8, i8* %2443, i64 -1
  %2444 = load i8, i8* %arrayidx4136, align 1
  %conv4137 = zext i8 %2444 to i32
  %shl4138 = shl i32 %conv4137, 8
  %2445 = load i8*, i8** %next_instr, align 8
  %arrayidx4139 = getelementptr i8, i8* %2445, i64 -2
  %2446 = load i8, i8* %arrayidx4139, align 1
  %conv4140 = zext i8 %2446 to i32
  %add4141 = add i32 %shl4138, %conv4140
  store i32 %add4141, i32* %oparg, align 4
  br label %sw.bb.4142

sw.bb.4142:                                       ; preds = %dispatch_opcode, %TARGET_DELETE_GLOBAL
  %2447 = load i32, i32* %oparg, align 4
  %idxprom4145 = sext i32 %2447 to i64
  %2448 = load %struct._object*, %struct._object** %names, align 8
  %2449 = bitcast %struct._object* %2448 to %struct.PyTupleObject*
  %ob_item4146 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2449, i32 0, i32 1
  %arrayidx4147 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4146, i32 0, i64 %idxprom4145
  %2450 = load %struct._object*, %struct._object** %arrayidx4147, align 8
  store %struct._object* %2450, %struct._object** %name4144, align 8
  %2451 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals4150 = getelementptr inbounds %struct._frame, %struct._frame* %2451, i32 0, i32 4
  %2452 = load %struct._object*, %struct._object** %f_globals4150, align 8
  %2453 = load %struct._object*, %struct._object** %name4144, align 8
  %call4151 = call i32 @PyDict_DelItem(%struct._object* %2452, %struct._object* %2453)
  store i32 %call4151, i32* %err4149, align 4
  %2454 = load i32, i32* %err4149, align 4
  %cmp4152 = icmp ne i32 %2454, 0
  br i1 %cmp4152, label %if.then.4154, label %if.end.4155

if.then.4154:                                     ; preds = %sw.bb.4142
  %2455 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  %2456 = load %struct._object*, %struct._object** %name4144, align 8
  call void @format_exc_check_arg(%struct._object* %2455, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i32 0, i32 0), %struct._object* %2456)
  br label %error

if.end.4155:                                      ; preds = %sw.bb.4142
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4157, align 8
  %2457 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4157, align 8
  %_value4162 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2457, i32 0, i32 0
  store i32* %_value4162, i32** %volatile_data4161, align 8
  store i32 0, i32* %order4164, align 4
  %2458 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4157, align 8
  %2459 = bitcast %struct._Py_atomic_int* %2458 to i8*
  %2460 = load i32, i32* %order4164, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2459, i32 %2460)
  %2461 = load i32, i32* %order4164, align 4
  switch i32 %2461, label %sw.default.4166 [
    i32 2, label %sw.bb.4165
    i32 3, label %sw.bb.4165
    i32 4, label %sw.bb.4165
  ]

sw.bb.4165:                                       ; preds = %if.end.4155, %if.end.4155, %if.end.4155
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4167

sw.default.4166:                                  ; preds = %if.end.4155
  br label %sw.epilog.4167

sw.epilog.4167:                                   ; preds = %sw.default.4166, %sw.bb.4165
  %2462 = load i32*, i32** %volatile_data4161, align 8
  %2463 = load volatile i32, i32* %2462, align 4
  store i32 %2463, i32* %result4159, align 4
  %2464 = load i32, i32* %order4164, align 4
  switch i32 %2464, label %sw.default.4169 [
    i32 1, label %sw.bb.4168
    i32 3, label %sw.bb.4168
    i32 4, label %sw.bb.4168
  ]

sw.bb.4168:                                       ; preds = %sw.epilog.4167, %sw.epilog.4167, %sw.epilog.4167
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4170

sw.default.4169:                                  ; preds = %sw.epilog.4167
  br label %sw.epilog.4170

sw.epilog.4170:                                   ; preds = %sw.default.4169, %sw.bb.4168
  %2465 = load i32, i32* %result4159, align 4
  store i32 %2465, i32* %tmp4171
  %2466 = load i32, i32* %tmp4171
  %tobool4172 = icmp ne i32 %2466, 0
  br i1 %tobool4172, label %if.end.4185, label %if.then.4173

if.then.4173:                                     ; preds = %sw.epilog.4170
  %2467 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4174 = icmp ne i32 %2467, 0
  br i1 %tobool4174, label %if.end.4184, label %if.then.4175

if.then.4175:                                     ; preds = %if.then.4173
  %2468 = load i8*, i8** %next_instr, align 8
  %2469 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4176 = ptrtoint i8* %2468 to i64
  %sub.ptr.rhs.cast4177 = ptrtoint i8* %2469 to i64
  %sub.ptr.sub4178 = sub i64 %sub.ptr.lhs.cast4176, %sub.ptr.rhs.cast4177
  %conv4179 = trunc i64 %sub.ptr.sub4178 to i32
  %2470 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4180 = getelementptr inbounds %struct._frame, %struct._frame* %2470, i32 0, i32 13
  store i32 %conv4179, i32* %f_lasti4180, align 4
  %2471 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4181 = getelementptr i8, i8* %2471, i32 1
  store i8* %incdec.ptr4181, i8** %next_instr, align 8
  %2472 = load i8, i8* %2471, align 1
  %idxprom4182 = zext i8 %2472 to i64
  %arrayidx4183 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4182
  %2473 = load i8*, i8** %arrayidx4183, align 8
  br label %indirectgoto

if.end.4184:                                      ; preds = %if.then.4173
  br label %fast_next_opcode

if.end.4185:                                      ; preds = %sw.epilog.4170
  br label %for.cond

TARGET_LOAD_NAME:                                 ; preds = %indirectgoto
  store i32 101, i32* %opcode, align 4
  %2474 = load i8*, i8** %next_instr, align 8
  %add.ptr4186 = getelementptr i8, i8* %2474, i64 2
  store i8* %add.ptr4186, i8** %next_instr, align 8
  %2475 = load i8*, i8** %next_instr, align 8
  %arrayidx4187 = getelementptr i8, i8* %2475, i64 -1
  %2476 = load i8, i8* %arrayidx4187, align 1
  %conv4188 = zext i8 %2476 to i32
  %shl4189 = shl i32 %conv4188, 8
  %2477 = load i8*, i8** %next_instr, align 8
  %arrayidx4190 = getelementptr i8, i8* %2477, i64 -2
  %2478 = load i8, i8* %arrayidx4190, align 1
  %conv4191 = zext i8 %2478 to i32
  %add4192 = add i32 %shl4189, %conv4191
  store i32 %add4192, i32* %oparg, align 4
  br label %sw.bb.4193

sw.bb.4193:                                       ; preds = %dispatch_opcode, %TARGET_LOAD_NAME
  %2479 = load i32, i32* %oparg, align 4
  %idxprom4196 = sext i32 %2479 to i64
  %2480 = load %struct._object*, %struct._object** %names, align 8
  %2481 = bitcast %struct._object* %2480 to %struct.PyTupleObject*
  %ob_item4197 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2481, i32 0, i32 1
  %arrayidx4198 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4197, i32 0, i64 %idxprom4196
  %2482 = load %struct._object*, %struct._object** %arrayidx4198, align 8
  store %struct._object* %2482, %struct._object** %name4195, align 8
  %2483 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals4200 = getelementptr inbounds %struct._frame, %struct._frame* %2483, i32 0, i32 5
  %2484 = load %struct._object*, %struct._object** %f_locals4200, align 8
  store %struct._object* %2484, %struct._object** %locals, align 8
  %2485 = load %struct._object*, %struct._object** %locals, align 8
  %cmp4203 = icmp eq %struct._object* %2485, null
  br i1 %cmp4203, label %if.then.4205, label %if.end.4207

if.then.4205:                                     ; preds = %sw.bb.4193
  %2486 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  %2487 = load %struct._object*, %struct._object** %name4195, align 8
  %call4206 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %2486, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.26, i32 0, i32 0), %struct._object* %2487)
  br label %error

if.end.4207:                                      ; preds = %sw.bb.4193
  %2488 = load %struct._object*, %struct._object** %locals, align 8
  %ob_type4208 = getelementptr inbounds %struct._object, %struct._object* %2488, i32 0, i32 1
  %2489 = load %struct._typeobject*, %struct._typeobject** %ob_type4208, align 8
  %cmp4209 = icmp eq %struct._typeobject* %2489, @PyDict_Type
  br i1 %cmp4209, label %if.then.4211, label %if.else.4222

if.then.4211:                                     ; preds = %if.end.4207
  %2490 = load %struct._object*, %struct._object** %locals, align 8
  %2491 = load %struct._object*, %struct._object** %name4195, align 8
  %call4212 = call %struct._object* @PyDict_GetItem(%struct._object* %2490, %struct._object* %2491)
  store %struct._object* %call4212, %struct._object** %v4202, align 8
  br label %do.body.4213

do.body.4213:                                     ; preds = %if.then.4211
  %2492 = load %struct._object*, %struct._object** %v4202, align 8
  store %struct._object* %2492, %struct._object** %_py_xincref_tmp, align 8
  %2493 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp4215 = icmp ne %struct._object* %2493, null
  br i1 %cmp4215, label %if.then.4217, label %if.end.4220

if.then.4217:                                     ; preds = %do.body.4213
  %2494 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt4218 = getelementptr inbounds %struct._object, %struct._object* %2494, i32 0, i32 0
  %2495 = load i64, i64* %ob_refcnt4218, align 8
  %inc4219 = add i64 %2495, 1
  store i64 %inc4219, i64* %ob_refcnt4218, align 8
  br label %if.end.4220

if.end.4220:                                      ; preds = %if.then.4217, %do.body.4213
  br label %do.end.4221

do.end.4221:                                      ; preds = %if.end.4220
  br label %if.end.4250

if.else.4222:                                     ; preds = %if.end.4207
  %2496 = load %struct._object*, %struct._object** %locals, align 8
  %2497 = load %struct._object*, %struct._object** %name4195, align 8
  %call4223 = call %struct._object* @PyObject_GetItem(%struct._object* %2496, %struct._object* %2497)
  store %struct._object* %call4223, %struct._object** %v4202, align 8
  %2498 = load %struct._object*, %struct._object** %v4202, align 8
  %cmp4224 = icmp eq %struct._object* %2498, null
  br i1 %cmp4224, label %land.lhs.true.4226, label %if.end.4249

land.lhs.true.4226:                               ; preds = %if.else.4222
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val4228, align 8
  %2499 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val4228, align 8
  %_value4233 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %2499, i32 0, i32 0
  store i8** %_value4233, i8*** %volatile_data4232, align 8
  store i32 0, i32* %order4235, align 4
  %2500 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val4228, align 8
  %2501 = bitcast %struct._Py_atomic_address* %2500 to i8*
  %2502 = load i32, i32* %order4235, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2501, i32 %2502)
  %2503 = load i32, i32* %order4235, align 4
  switch i32 %2503, label %sw.default.4237 [
    i32 2, label %sw.bb.4236
    i32 3, label %sw.bb.4236
    i32 4, label %sw.bb.4236
  ]

sw.bb.4236:                                       ; preds = %land.lhs.true.4226, %land.lhs.true.4226, %land.lhs.true.4226
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4238

sw.default.4237:                                  ; preds = %land.lhs.true.4226
  br label %sw.epilog.4238

sw.epilog.4238:                                   ; preds = %sw.default.4237, %sw.bb.4236
  %2504 = load i8**, i8*** %volatile_data4232, align 8
  %2505 = load volatile i8*, i8** %2504, align 8
  store i8* %2505, i8** %result4230, align 8
  %2506 = load i32, i32* %order4235, align 4
  switch i32 %2506, label %sw.default.4240 [
    i32 1, label %sw.bb.4239
    i32 3, label %sw.bb.4239
    i32 4, label %sw.bb.4239
  ]

sw.bb.4239:                                       ; preds = %sw.epilog.4238, %sw.epilog.4238, %sw.epilog.4238
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4241

sw.default.4240:                                  ; preds = %sw.epilog.4238
  br label %sw.epilog.4241

sw.epilog.4241:                                   ; preds = %sw.default.4240, %sw.bb.4239
  %2507 = load i8*, i8** %result4230, align 8
  store i8* %2507, i8** %tmp4242
  %2508 = load i8*, i8** %tmp4242
  %2509 = bitcast i8* %2508 to %struct._ts*
  %curexc_type = getelementptr inbounds %struct._ts, %struct._ts* %2509, i32 0, i32 13
  %2510 = load %struct._object*, %struct._object** %curexc_type, align 8
  %tobool4243 = icmp ne %struct._object* %2510, null
  br i1 %tobool4243, label %if.then.4244, label %if.end.4249

if.then.4244:                                     ; preds = %sw.epilog.4241
  %2511 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %call4245 = call i32 @PyErr_ExceptionMatches(%struct._object* %2511)
  %tobool4246 = icmp ne i32 %call4245, 0
  br i1 %tobool4246, label %if.end.4248, label %if.then.4247

if.then.4247:                                     ; preds = %if.then.4244
  br label %error

if.end.4248:                                      ; preds = %if.then.4244
  call void @PyErr_Clear()
  br label %if.end.4249

if.end.4249:                                      ; preds = %if.end.4248, %sw.epilog.4241, %if.else.4222
  br label %if.end.4250

if.end.4250:                                      ; preds = %if.end.4249, %do.end.4221
  %2512 = load %struct._object*, %struct._object** %v4202, align 8
  %cmp4251 = icmp eq %struct._object* %2512, null
  br i1 %cmp4251, label %if.then.4253, label %if.end.4295

if.then.4253:                                     ; preds = %if.end.4250
  %2513 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals4254 = getelementptr inbounds %struct._frame, %struct._frame* %2513, i32 0, i32 4
  %2514 = load %struct._object*, %struct._object** %f_globals4254, align 8
  %2515 = load %struct._object*, %struct._object** %name4195, align 8
  %call4255 = call %struct._object* @PyDict_GetItem(%struct._object* %2514, %struct._object* %2515)
  store %struct._object* %call4255, %struct._object** %v4202, align 8
  br label %do.body.4256

do.body.4256:                                     ; preds = %if.then.4253
  %2516 = load %struct._object*, %struct._object** %v4202, align 8
  store %struct._object* %2516, %struct._object** %_py_xincref_tmp4258, align 8
  %2517 = load %struct._object*, %struct._object** %_py_xincref_tmp4258, align 8
  %cmp4259 = icmp ne %struct._object* %2517, null
  br i1 %cmp4259, label %if.then.4261, label %if.end.4264

if.then.4261:                                     ; preds = %do.body.4256
  %2518 = load %struct._object*, %struct._object** %_py_xincref_tmp4258, align 8
  %ob_refcnt4262 = getelementptr inbounds %struct._object, %struct._object* %2518, i32 0, i32 0
  %2519 = load i64, i64* %ob_refcnt4262, align 8
  %inc4263 = add i64 %2519, 1
  store i64 %inc4263, i64* %ob_refcnt4262, align 8
  br label %if.end.4264

if.end.4264:                                      ; preds = %if.then.4261, %do.body.4256
  br label %do.end.4265

do.end.4265:                                      ; preds = %if.end.4264
  %2520 = load %struct._object*, %struct._object** %v4202, align 8
  %cmp4266 = icmp eq %struct._object* %2520, null
  br i1 %cmp4266, label %if.then.4268, label %if.end.4294

if.then.4268:                                     ; preds = %do.end.4265
  %2521 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins4269 = getelementptr inbounds %struct._frame, %struct._frame* %2521, i32 0, i32 3
  %2522 = load %struct._object*, %struct._object** %f_builtins4269, align 8
  %ob_type4270 = getelementptr inbounds %struct._object, %struct._object* %2522, i32 0, i32 1
  %2523 = load %struct._typeobject*, %struct._typeobject** %ob_type4270, align 8
  %cmp4271 = icmp eq %struct._typeobject* %2523, @PyDict_Type
  br i1 %cmp4271, label %if.then.4273, label %if.else.4282

if.then.4273:                                     ; preds = %if.then.4268
  %2524 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins4274 = getelementptr inbounds %struct._frame, %struct._frame* %2524, i32 0, i32 3
  %2525 = load %struct._object*, %struct._object** %f_builtins4274, align 8
  %2526 = load %struct._object*, %struct._object** %name4195, align 8
  %call4275 = call %struct._object* @PyDict_GetItem(%struct._object* %2525, %struct._object* %2526)
  store %struct._object* %call4275, %struct._object** %v4202, align 8
  %2527 = load %struct._object*, %struct._object** %v4202, align 8
  %cmp4276 = icmp eq %struct._object* %2527, null
  br i1 %cmp4276, label %if.then.4278, label %if.end.4279

if.then.4278:                                     ; preds = %if.then.4273
  %2528 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  %2529 = load %struct._object*, %struct._object** %name4195, align 8
  call void @format_exc_check_arg(%struct._object* %2528, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i32 0, i32 0), %struct._object* %2529)
  br label %error

if.end.4279:                                      ; preds = %if.then.4273
  %2530 = load %struct._object*, %struct._object** %v4202, align 8
  %ob_refcnt4280 = getelementptr inbounds %struct._object, %struct._object* %2530, i32 0, i32 0
  %2531 = load i64, i64* %ob_refcnt4280, align 8
  %inc4281 = add i64 %2531, 1
  store i64 %inc4281, i64* %ob_refcnt4280, align 8
  br label %if.end.4293

if.else.4282:                                     ; preds = %if.then.4268
  %2532 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins4283 = getelementptr inbounds %struct._frame, %struct._frame* %2532, i32 0, i32 3
  %2533 = load %struct._object*, %struct._object** %f_builtins4283, align 8
  %2534 = load %struct._object*, %struct._object** %name4195, align 8
  %call4284 = call %struct._object* @PyObject_GetItem(%struct._object* %2533, %struct._object* %2534)
  store %struct._object* %call4284, %struct._object** %v4202, align 8
  %2535 = load %struct._object*, %struct._object** %v4202, align 8
  %cmp4285 = icmp eq %struct._object* %2535, null
  br i1 %cmp4285, label %if.then.4287, label %if.end.4292

if.then.4287:                                     ; preds = %if.else.4282
  %2536 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %call4288 = call i32 @PyErr_ExceptionMatches(%struct._object* %2536)
  %tobool4289 = icmp ne i32 %call4288, 0
  br i1 %tobool4289, label %if.then.4290, label %if.end.4291

if.then.4290:                                     ; preds = %if.then.4287
  %2537 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  %2538 = load %struct._object*, %struct._object** %name4195, align 8
  call void @format_exc_check_arg(%struct._object* %2537, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i32 0, i32 0), %struct._object* %2538)
  br label %if.end.4291

if.end.4291:                                      ; preds = %if.then.4290, %if.then.4287
  br label %error

if.end.4292:                                      ; preds = %if.else.4282
  br label %if.end.4293

if.end.4293:                                      ; preds = %if.end.4292, %if.end.4279
  br label %if.end.4294

if.end.4294:                                      ; preds = %if.end.4293, %do.end.4265
  br label %if.end.4295

if.end.4295:                                      ; preds = %if.end.4294, %if.end.4250
  %2539 = load %struct._object*, %struct._object** %v4202, align 8
  %2540 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4296 = getelementptr %struct._object*, %struct._object** %2540, i32 1
  store %struct._object** %incdec.ptr4296, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2539, %struct._object** %2540, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4298, align 8
  %2541 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4298, align 8
  %_value4303 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2541, i32 0, i32 0
  store i32* %_value4303, i32** %volatile_data4302, align 8
  store i32 0, i32* %order4305, align 4
  %2542 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4298, align 8
  %2543 = bitcast %struct._Py_atomic_int* %2542 to i8*
  %2544 = load i32, i32* %order4305, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2543, i32 %2544)
  %2545 = load i32, i32* %order4305, align 4
  switch i32 %2545, label %sw.default.4307 [
    i32 2, label %sw.bb.4306
    i32 3, label %sw.bb.4306
    i32 4, label %sw.bb.4306
  ]

sw.bb.4306:                                       ; preds = %if.end.4295, %if.end.4295, %if.end.4295
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4308

sw.default.4307:                                  ; preds = %if.end.4295
  br label %sw.epilog.4308

sw.epilog.4308:                                   ; preds = %sw.default.4307, %sw.bb.4306
  %2546 = load i32*, i32** %volatile_data4302, align 8
  %2547 = load volatile i32, i32* %2546, align 4
  store i32 %2547, i32* %result4300, align 4
  %2548 = load i32, i32* %order4305, align 4
  switch i32 %2548, label %sw.default.4310 [
    i32 1, label %sw.bb.4309
    i32 3, label %sw.bb.4309
    i32 4, label %sw.bb.4309
  ]

sw.bb.4309:                                       ; preds = %sw.epilog.4308, %sw.epilog.4308, %sw.epilog.4308
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4311

sw.default.4310:                                  ; preds = %sw.epilog.4308
  br label %sw.epilog.4311

sw.epilog.4311:                                   ; preds = %sw.default.4310, %sw.bb.4309
  %2549 = load i32, i32* %result4300, align 4
  store i32 %2549, i32* %tmp4312
  %2550 = load i32, i32* %tmp4312
  %tobool4313 = icmp ne i32 %2550, 0
  br i1 %tobool4313, label %if.end.4326, label %if.then.4314

if.then.4314:                                     ; preds = %sw.epilog.4311
  %2551 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4315 = icmp ne i32 %2551, 0
  br i1 %tobool4315, label %if.end.4325, label %if.then.4316

if.then.4316:                                     ; preds = %if.then.4314
  %2552 = load i8*, i8** %next_instr, align 8
  %2553 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4317 = ptrtoint i8* %2552 to i64
  %sub.ptr.rhs.cast4318 = ptrtoint i8* %2553 to i64
  %sub.ptr.sub4319 = sub i64 %sub.ptr.lhs.cast4317, %sub.ptr.rhs.cast4318
  %conv4320 = trunc i64 %sub.ptr.sub4319 to i32
  %2554 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4321 = getelementptr inbounds %struct._frame, %struct._frame* %2554, i32 0, i32 13
  store i32 %conv4320, i32* %f_lasti4321, align 4
  %2555 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4322 = getelementptr i8, i8* %2555, i32 1
  store i8* %incdec.ptr4322, i8** %next_instr, align 8
  %2556 = load i8, i8* %2555, align 1
  %idxprom4323 = zext i8 %2556 to i64
  %arrayidx4324 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4323
  %2557 = load i8*, i8** %arrayidx4324, align 8
  br label %indirectgoto

if.end.4325:                                      ; preds = %if.then.4314
  br label %fast_next_opcode

if.end.4326:                                      ; preds = %sw.epilog.4311
  br label %for.cond

TARGET_LOAD_GLOBAL:                               ; preds = %indirectgoto
  store i32 116, i32* %opcode, align 4
  %2558 = load i8*, i8** %next_instr, align 8
  %add.ptr4327 = getelementptr i8, i8* %2558, i64 2
  store i8* %add.ptr4327, i8** %next_instr, align 8
  %2559 = load i8*, i8** %next_instr, align 8
  %arrayidx4328 = getelementptr i8, i8* %2559, i64 -1
  %2560 = load i8, i8* %arrayidx4328, align 1
  %conv4329 = zext i8 %2560 to i32
  %shl4330 = shl i32 %conv4329, 8
  %2561 = load i8*, i8** %next_instr, align 8
  %arrayidx4331 = getelementptr i8, i8* %2561, i64 -2
  %2562 = load i8, i8* %arrayidx4331, align 1
  %conv4332 = zext i8 %2562 to i32
  %add4333 = add i32 %shl4330, %conv4332
  store i32 %add4333, i32* %oparg, align 4
  br label %sw.bb.4334

sw.bb.4334:                                       ; preds = %dispatch_opcode, %TARGET_LOAD_GLOBAL
  %2563 = load i32, i32* %oparg, align 4
  %idxprom4337 = sext i32 %2563 to i64
  %2564 = load %struct._object*, %struct._object** %names, align 8
  %2565 = bitcast %struct._object* %2564 to %struct.PyTupleObject*
  %ob_item4338 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2565, i32 0, i32 1
  %arrayidx4339 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4338, i32 0, i64 %idxprom4337
  %2566 = load %struct._object*, %struct._object** %arrayidx4339, align 8
  store %struct._object* %2566, %struct._object** %name4336, align 8
  %2567 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals4342 = getelementptr inbounds %struct._frame, %struct._frame* %2567, i32 0, i32 4
  %2568 = load %struct._object*, %struct._object** %f_globals4342, align 8
  %ob_type4343 = getelementptr inbounds %struct._object, %struct._object* %2568, i32 0, i32 1
  %2569 = load %struct._typeobject*, %struct._typeobject** %ob_type4343, align 8
  %cmp4344 = icmp eq %struct._typeobject* %2569, @PyDict_Type
  br i1 %cmp4344, label %land.lhs.true.4346, label %if.else.4381

land.lhs.true.4346:                               ; preds = %sw.bb.4334
  %2570 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins4347 = getelementptr inbounds %struct._frame, %struct._frame* %2570, i32 0, i32 3
  %2571 = load %struct._object*, %struct._object** %f_builtins4347, align 8
  %ob_type4348 = getelementptr inbounds %struct._object, %struct._object* %2571, i32 0, i32 1
  %2572 = load %struct._typeobject*, %struct._typeobject** %ob_type4348, align 8
  %cmp4349 = icmp eq %struct._typeobject* %2572, @PyDict_Type
  br i1 %cmp4349, label %if.then.4351, label %if.else.4381

if.then.4351:                                     ; preds = %land.lhs.true.4346
  %2573 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals4352 = getelementptr inbounds %struct._frame, %struct._frame* %2573, i32 0, i32 4
  %2574 = load %struct._object*, %struct._object** %f_globals4352, align 8
  %2575 = bitcast %struct._object* %2574 to %struct.PyDictObject*
  %2576 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins4353 = getelementptr inbounds %struct._frame, %struct._frame* %2576, i32 0, i32 3
  %2577 = load %struct._object*, %struct._object** %f_builtins4353, align 8
  %2578 = bitcast %struct._object* %2577 to %struct.PyDictObject*
  %2579 = load %struct._object*, %struct._object** %name4336, align 8
  %call4354 = call %struct._object* @_PyDict_LoadGlobal(%struct.PyDictObject* %2575, %struct.PyDictObject* %2578, %struct._object* %2579)
  store %struct._object* %call4354, %struct._object** %v4341, align 8
  %2580 = load %struct._object*, %struct._object** %v4341, align 8
  %cmp4355 = icmp eq %struct._object* %2580, null
  br i1 %cmp4355, label %if.then.4357, label %if.end.4378

if.then.4357:                                     ; preds = %if.then.4351
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val4359, align 8
  %2581 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val4359, align 8
  %_value4364 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %2581, i32 0, i32 0
  store i8** %_value4364, i8*** %volatile_data4363, align 8
  store i32 0, i32* %order4366, align 4
  %2582 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val4359, align 8
  %2583 = bitcast %struct._Py_atomic_address* %2582 to i8*
  %2584 = load i32, i32* %order4366, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2583, i32 %2584)
  %2585 = load i32, i32* %order4366, align 4
  switch i32 %2585, label %sw.default.4368 [
    i32 2, label %sw.bb.4367
    i32 3, label %sw.bb.4367
    i32 4, label %sw.bb.4367
  ]

sw.bb.4367:                                       ; preds = %if.then.4357, %if.then.4357, %if.then.4357
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4369

sw.default.4368:                                  ; preds = %if.then.4357
  br label %sw.epilog.4369

sw.epilog.4369:                                   ; preds = %sw.default.4368, %sw.bb.4367
  %2586 = load i8**, i8*** %volatile_data4363, align 8
  %2587 = load volatile i8*, i8** %2586, align 8
  store i8* %2587, i8** %result4361, align 8
  %2588 = load i32, i32* %order4366, align 4
  switch i32 %2588, label %sw.default.4371 [
    i32 1, label %sw.bb.4370
    i32 3, label %sw.bb.4370
    i32 4, label %sw.bb.4370
  ]

sw.bb.4370:                                       ; preds = %sw.epilog.4369, %sw.epilog.4369, %sw.epilog.4369
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4372

sw.default.4371:                                  ; preds = %sw.epilog.4369
  br label %sw.epilog.4372

sw.epilog.4372:                                   ; preds = %sw.default.4371, %sw.bb.4370
  %2589 = load i8*, i8** %result4361, align 8
  store i8* %2589, i8** %tmp4373
  %2590 = load i8*, i8** %tmp4373
  %2591 = bitcast i8* %2590 to %struct._ts*
  %curexc_type4374 = getelementptr inbounds %struct._ts, %struct._ts* %2591, i32 0, i32 13
  %2592 = load %struct._object*, %struct._object** %curexc_type4374, align 8
  %tobool4375 = icmp ne %struct._object* %2592, null
  br i1 %tobool4375, label %if.end.4377, label %if.then.4376

if.then.4376:                                     ; preds = %sw.epilog.4372
  %2593 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  %2594 = load %struct._object*, %struct._object** %name4336, align 8
  call void @format_exc_check_arg(%struct._object* %2593, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i32 0, i32 0), %struct._object* %2594)
  br label %if.end.4377

if.end.4377:                                      ; preds = %if.then.4376, %sw.epilog.4372
  br label %error

if.end.4378:                                      ; preds = %if.then.4351
  %2595 = load %struct._object*, %struct._object** %v4341, align 8
  %ob_refcnt4379 = getelementptr inbounds %struct._object, %struct._object* %2595, i32 0, i32 0
  %2596 = load i64, i64* %ob_refcnt4379, align 8
  %inc4380 = add i64 %2596, 1
  store i64 %inc4380, i64* %ob_refcnt4379, align 8
  br label %if.end.4398

if.else.4381:                                     ; preds = %land.lhs.true.4346, %sw.bb.4334
  %2597 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals4382 = getelementptr inbounds %struct._frame, %struct._frame* %2597, i32 0, i32 4
  %2598 = load %struct._object*, %struct._object** %f_globals4382, align 8
  %2599 = load %struct._object*, %struct._object** %name4336, align 8
  %call4383 = call %struct._object* @PyObject_GetItem(%struct._object* %2598, %struct._object* %2599)
  store %struct._object* %call4383, %struct._object** %v4341, align 8
  %2600 = load %struct._object*, %struct._object** %v4341, align 8
  %cmp4384 = icmp eq %struct._object* %2600, null
  br i1 %cmp4384, label %if.then.4386, label %if.end.4397

if.then.4386:                                     ; preds = %if.else.4381
  %2601 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins4387 = getelementptr inbounds %struct._frame, %struct._frame* %2601, i32 0, i32 3
  %2602 = load %struct._object*, %struct._object** %f_builtins4387, align 8
  %2603 = load %struct._object*, %struct._object** %name4336, align 8
  %call4388 = call %struct._object* @PyObject_GetItem(%struct._object* %2602, %struct._object* %2603)
  store %struct._object* %call4388, %struct._object** %v4341, align 8
  %2604 = load %struct._object*, %struct._object** %v4341, align 8
  %cmp4389 = icmp eq %struct._object* %2604, null
  br i1 %cmp4389, label %if.then.4391, label %if.end.4396

if.then.4391:                                     ; preds = %if.then.4386
  %2605 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %call4392 = call i32 @PyErr_ExceptionMatches(%struct._object* %2605)
  %tobool4393 = icmp ne i32 %call4392, 0
  br i1 %tobool4393, label %if.then.4394, label %if.end.4395

if.then.4394:                                     ; preds = %if.then.4391
  %2606 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  %2607 = load %struct._object*, %struct._object** %name4336, align 8
  call void @format_exc_check_arg(%struct._object* %2606, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.25, i32 0, i32 0), %struct._object* %2607)
  br label %if.end.4395

if.end.4395:                                      ; preds = %if.then.4394, %if.then.4391
  br label %error

if.end.4396:                                      ; preds = %if.then.4386
  br label %if.end.4397

if.end.4397:                                      ; preds = %if.end.4396, %if.else.4381
  br label %if.end.4398

if.end.4398:                                      ; preds = %if.end.4397, %if.end.4378
  %2608 = load %struct._object*, %struct._object** %v4341, align 8
  %2609 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4399 = getelementptr %struct._object*, %struct._object** %2609, i32 1
  store %struct._object** %incdec.ptr4399, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2608, %struct._object** %2609, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4401, align 8
  %2610 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4401, align 8
  %_value4406 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2610, i32 0, i32 0
  store i32* %_value4406, i32** %volatile_data4405, align 8
  store i32 0, i32* %order4408, align 4
  %2611 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4401, align 8
  %2612 = bitcast %struct._Py_atomic_int* %2611 to i8*
  %2613 = load i32, i32* %order4408, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2612, i32 %2613)
  %2614 = load i32, i32* %order4408, align 4
  switch i32 %2614, label %sw.default.4410 [
    i32 2, label %sw.bb.4409
    i32 3, label %sw.bb.4409
    i32 4, label %sw.bb.4409
  ]

sw.bb.4409:                                       ; preds = %if.end.4398, %if.end.4398, %if.end.4398
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4411

sw.default.4410:                                  ; preds = %if.end.4398
  br label %sw.epilog.4411

sw.epilog.4411:                                   ; preds = %sw.default.4410, %sw.bb.4409
  %2615 = load i32*, i32** %volatile_data4405, align 8
  %2616 = load volatile i32, i32* %2615, align 4
  store i32 %2616, i32* %result4403, align 4
  %2617 = load i32, i32* %order4408, align 4
  switch i32 %2617, label %sw.default.4413 [
    i32 1, label %sw.bb.4412
    i32 3, label %sw.bb.4412
    i32 4, label %sw.bb.4412
  ]

sw.bb.4412:                                       ; preds = %sw.epilog.4411, %sw.epilog.4411, %sw.epilog.4411
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4414

sw.default.4413:                                  ; preds = %sw.epilog.4411
  br label %sw.epilog.4414

sw.epilog.4414:                                   ; preds = %sw.default.4413, %sw.bb.4412
  %2618 = load i32, i32* %result4403, align 4
  store i32 %2618, i32* %tmp4415
  %2619 = load i32, i32* %tmp4415
  %tobool4416 = icmp ne i32 %2619, 0
  br i1 %tobool4416, label %if.end.4429, label %if.then.4417

if.then.4417:                                     ; preds = %sw.epilog.4414
  %2620 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4418 = icmp ne i32 %2620, 0
  br i1 %tobool4418, label %if.end.4428, label %if.then.4419

if.then.4419:                                     ; preds = %if.then.4417
  %2621 = load i8*, i8** %next_instr, align 8
  %2622 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4420 = ptrtoint i8* %2621 to i64
  %sub.ptr.rhs.cast4421 = ptrtoint i8* %2622 to i64
  %sub.ptr.sub4422 = sub i64 %sub.ptr.lhs.cast4420, %sub.ptr.rhs.cast4421
  %conv4423 = trunc i64 %sub.ptr.sub4422 to i32
  %2623 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4424 = getelementptr inbounds %struct._frame, %struct._frame* %2623, i32 0, i32 13
  store i32 %conv4423, i32* %f_lasti4424, align 4
  %2624 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4425 = getelementptr i8, i8* %2624, i32 1
  store i8* %incdec.ptr4425, i8** %next_instr, align 8
  %2625 = load i8, i8* %2624, align 1
  %idxprom4426 = zext i8 %2625 to i64
  %arrayidx4427 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4426
  %2626 = load i8*, i8** %arrayidx4427, align 8
  br label %indirectgoto

if.end.4428:                                      ; preds = %if.then.4417
  br label %fast_next_opcode

if.end.4429:                                      ; preds = %sw.epilog.4414
  br label %for.cond

TARGET_DELETE_FAST:                               ; preds = %indirectgoto
  store i32 126, i32* %opcode, align 4
  %2627 = load i8*, i8** %next_instr, align 8
  %add.ptr4430 = getelementptr i8, i8* %2627, i64 2
  store i8* %add.ptr4430, i8** %next_instr, align 8
  %2628 = load i8*, i8** %next_instr, align 8
  %arrayidx4431 = getelementptr i8, i8* %2628, i64 -1
  %2629 = load i8, i8* %arrayidx4431, align 1
  %conv4432 = zext i8 %2629 to i32
  %shl4433 = shl i32 %conv4432, 8
  %2630 = load i8*, i8** %next_instr, align 8
  %arrayidx4434 = getelementptr i8, i8* %2630, i64 -2
  %2631 = load i8, i8* %arrayidx4434, align 1
  %conv4435 = zext i8 %2631 to i32
  %add4436 = add i32 %shl4433, %conv4435
  store i32 %add4436, i32* %oparg, align 4
  br label %sw.bb.4437

sw.bb.4437:                                       ; preds = %dispatch_opcode, %TARGET_DELETE_FAST
  %2632 = load i32, i32* %oparg, align 4
  %idxprom4440 = sext i32 %2632 to i64
  %2633 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx4441 = getelementptr %struct._object*, %struct._object** %2633, i64 %idxprom4440
  %2634 = load %struct._object*, %struct._object** %arrayidx4441, align 8
  store %struct._object* %2634, %struct._object** %v4439, align 8
  %2635 = load %struct._object*, %struct._object** %v4439, align 8
  %cmp4442 = icmp ne %struct._object* %2635, null
  br i1 %cmp4442, label %if.then.4444, label %if.end.4504

if.then.4444:                                     ; preds = %sw.bb.4437
  br label %do.body.4445

do.body.4445:                                     ; preds = %if.then.4444
  %2636 = load i32, i32* %oparg, align 4
  %idxprom4448 = sext i32 %2636 to i64
  %2637 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx4449 = getelementptr %struct._object*, %struct._object** %2637, i64 %idxprom4448
  %2638 = load %struct._object*, %struct._object** %arrayidx4449, align 8
  store %struct._object* %2638, %struct._object** %tmp4447, align 8
  %2639 = load i32, i32* %oparg, align 4
  %idxprom4450 = sext i32 %2639 to i64
  %2640 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx4451 = getelementptr %struct._object*, %struct._object** %2640, i64 %idxprom4450
  store %struct._object* null, %struct._object** %arrayidx4451, align 8
  br label %do.body.4452

do.body.4452:                                     ; preds = %do.body.4445
  %2641 = load %struct._object*, %struct._object** %tmp4447, align 8
  store %struct._object* %2641, %struct._object** %_py_xdecref_tmp4454, align 8
  %2642 = load %struct._object*, %struct._object** %_py_xdecref_tmp4454, align 8
  %cmp4455 = icmp ne %struct._object* %2642, null
  br i1 %cmp4455, label %if.then.4457, label %if.end.4471

if.then.4457:                                     ; preds = %do.body.4452
  br label %do.body.4458

do.body.4458:                                     ; preds = %if.then.4457
  %2643 = load %struct._object*, %struct._object** %_py_xdecref_tmp4454, align 8
  store %struct._object* %2643, %struct._object** %_py_decref_tmp4460, align 8
  %2644 = load %struct._object*, %struct._object** %_py_decref_tmp4460, align 8
  %ob_refcnt4461 = getelementptr inbounds %struct._object, %struct._object* %2644, i32 0, i32 0
  %2645 = load i64, i64* %ob_refcnt4461, align 8
  %dec4462 = add i64 %2645, -1
  store i64 %dec4462, i64* %ob_refcnt4461, align 8
  %cmp4463 = icmp ne i64 %dec4462, 0
  br i1 %cmp4463, label %if.then.4465, label %if.else.4466

if.then.4465:                                     ; preds = %do.body.4458
  br label %if.end.4469

if.else.4466:                                     ; preds = %do.body.4458
  %2646 = load %struct._object*, %struct._object** %_py_decref_tmp4460, align 8
  %ob_type4467 = getelementptr inbounds %struct._object, %struct._object* %2646, i32 0, i32 1
  %2647 = load %struct._typeobject*, %struct._typeobject** %ob_type4467, align 8
  %tp_dealloc4468 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2647, i32 0, i32 4
  %2648 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc4468, align 8
  %2649 = load %struct._object*, %struct._object** %_py_decref_tmp4460, align 8
  call void %2648(%struct._object* %2649)
  br label %if.end.4469

if.end.4469:                                      ; preds = %if.else.4466, %if.then.4465
  br label %do.end.4470

do.end.4470:                                      ; preds = %if.end.4469
  br label %if.end.4471

if.end.4471:                                      ; preds = %do.end.4470, %do.body.4452
  br label %do.end.4472

do.end.4472:                                      ; preds = %if.end.4471
  br label %do.end.4473

do.end.4473:                                      ; preds = %do.end.4472
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4475, align 8
  %2650 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4475, align 8
  %_value4480 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2650, i32 0, i32 0
  store i32* %_value4480, i32** %volatile_data4479, align 8
  store i32 0, i32* %order4482, align 4
  %2651 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4475, align 8
  %2652 = bitcast %struct._Py_atomic_int* %2651 to i8*
  %2653 = load i32, i32* %order4482, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2652, i32 %2653)
  %2654 = load i32, i32* %order4482, align 4
  switch i32 %2654, label %sw.default.4484 [
    i32 2, label %sw.bb.4483
    i32 3, label %sw.bb.4483
    i32 4, label %sw.bb.4483
  ]

sw.bb.4483:                                       ; preds = %do.end.4473, %do.end.4473, %do.end.4473
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4485

sw.default.4484:                                  ; preds = %do.end.4473
  br label %sw.epilog.4485

sw.epilog.4485:                                   ; preds = %sw.default.4484, %sw.bb.4483
  %2655 = load i32*, i32** %volatile_data4479, align 8
  %2656 = load volatile i32, i32* %2655, align 4
  store i32 %2656, i32* %result4477, align 4
  %2657 = load i32, i32* %order4482, align 4
  switch i32 %2657, label %sw.default.4487 [
    i32 1, label %sw.bb.4486
    i32 3, label %sw.bb.4486
    i32 4, label %sw.bb.4486
  ]

sw.bb.4486:                                       ; preds = %sw.epilog.4485, %sw.epilog.4485, %sw.epilog.4485
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4488

sw.default.4487:                                  ; preds = %sw.epilog.4485
  br label %sw.epilog.4488

sw.epilog.4488:                                   ; preds = %sw.default.4487, %sw.bb.4486
  %2658 = load i32, i32* %result4477, align 4
  store i32 %2658, i32* %tmp4489
  %2659 = load i32, i32* %tmp4489
  %tobool4490 = icmp ne i32 %2659, 0
  br i1 %tobool4490, label %if.end.4503, label %if.then.4491

if.then.4491:                                     ; preds = %sw.epilog.4488
  %2660 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4492 = icmp ne i32 %2660, 0
  br i1 %tobool4492, label %if.end.4502, label %if.then.4493

if.then.4493:                                     ; preds = %if.then.4491
  %2661 = load i8*, i8** %next_instr, align 8
  %2662 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4494 = ptrtoint i8* %2661 to i64
  %sub.ptr.rhs.cast4495 = ptrtoint i8* %2662 to i64
  %sub.ptr.sub4496 = sub i64 %sub.ptr.lhs.cast4494, %sub.ptr.rhs.cast4495
  %conv4497 = trunc i64 %sub.ptr.sub4496 to i32
  %2663 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4498 = getelementptr inbounds %struct._frame, %struct._frame* %2663, i32 0, i32 13
  store i32 %conv4497, i32* %f_lasti4498, align 4
  %2664 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4499 = getelementptr i8, i8* %2664, i32 1
  store i8* %incdec.ptr4499, i8** %next_instr, align 8
  %2665 = load i8, i8* %2664, align 1
  %idxprom4500 = zext i8 %2665 to i64
  %arrayidx4501 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4500
  %2666 = load i8*, i8** %arrayidx4501, align 8
  br label %indirectgoto

if.end.4502:                                      ; preds = %if.then.4491
  br label %fast_next_opcode

if.end.4503:                                      ; preds = %sw.epilog.4488
  br label %for.cond

if.end.4504:                                      ; preds = %sw.bb.4437
  %2667 = load %struct._object*, %struct._object** @PyExc_UnboundLocalError, align 8
  %2668 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_varnames4505 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %2668, i32 0, i32 9
  %2669 = load %struct._object*, %struct._object** %co_varnames4505, align 8
  %2670 = load i32, i32* %oparg, align 4
  %conv4506 = sext i32 %2670 to i64
  %call4507 = call %struct._object* @PyTuple_GetItem(%struct._object* %2669, i64 %conv4506)
  call void @format_exc_check_arg(%struct._object* %2667, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.14, i32 0, i32 0), %struct._object* %call4507)
  br label %error

TARGET_DELETE_DEREF:                              ; preds = %indirectgoto
  store i32 138, i32* %opcode, align 4
  %2671 = load i8*, i8** %next_instr, align 8
  %add.ptr4508 = getelementptr i8, i8* %2671, i64 2
  store i8* %add.ptr4508, i8** %next_instr, align 8
  %2672 = load i8*, i8** %next_instr, align 8
  %arrayidx4509 = getelementptr i8, i8* %2672, i64 -1
  %2673 = load i8, i8* %arrayidx4509, align 1
  %conv4510 = zext i8 %2673 to i32
  %shl4511 = shl i32 %conv4510, 8
  %2674 = load i8*, i8** %next_instr, align 8
  %arrayidx4512 = getelementptr i8, i8* %2674, i64 -2
  %2675 = load i8, i8* %arrayidx4512, align 1
  %conv4513 = zext i8 %2675 to i32
  %add4514 = add i32 %shl4511, %conv4513
  store i32 %add4514, i32* %oparg, align 4
  br label %sw.bb.4515

sw.bb.4515:                                       ; preds = %dispatch_opcode, %TARGET_DELETE_DEREF
  %2676 = load i32, i32* %oparg, align 4
  %idxprom4517 = sext i32 %2676 to i64
  %2677 = load %struct._object**, %struct._object*** %freevars, align 8
  %arrayidx4518 = getelementptr %struct._object*, %struct._object** %2677, i64 %idxprom4517
  %2678 = load %struct._object*, %struct._object** %arrayidx4518, align 8
  store %struct._object* %2678, %struct._object** %cell, align 8
  %2679 = load %struct._object*, %struct._object** %cell, align 8
  %2680 = bitcast %struct._object* %2679 to %struct.PyCellObject*
  %ob_ref = getelementptr inbounds %struct.PyCellObject, %struct.PyCellObject* %2680, i32 0, i32 1
  %2681 = load %struct._object*, %struct._object** %ob_ref, align 8
  %cmp4519 = icmp ne %struct._object* %2681, null
  br i1 %cmp4519, label %if.then.4521, label %if.end.4553

if.then.4521:                                     ; preds = %sw.bb.4515
  %2682 = load %struct._object*, %struct._object** %cell, align 8
  %call4522 = call i32 @PyCell_Set(%struct._object* %2682, %struct._object* null)
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4524, align 8
  %2683 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4524, align 8
  %_value4529 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2683, i32 0, i32 0
  store i32* %_value4529, i32** %volatile_data4528, align 8
  store i32 0, i32* %order4531, align 4
  %2684 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4524, align 8
  %2685 = bitcast %struct._Py_atomic_int* %2684 to i8*
  %2686 = load i32, i32* %order4531, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2685, i32 %2686)
  %2687 = load i32, i32* %order4531, align 4
  switch i32 %2687, label %sw.default.4533 [
    i32 2, label %sw.bb.4532
    i32 3, label %sw.bb.4532
    i32 4, label %sw.bb.4532
  ]

sw.bb.4532:                                       ; preds = %if.then.4521, %if.then.4521, %if.then.4521
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4534

sw.default.4533:                                  ; preds = %if.then.4521
  br label %sw.epilog.4534

sw.epilog.4534:                                   ; preds = %sw.default.4533, %sw.bb.4532
  %2688 = load i32*, i32** %volatile_data4528, align 8
  %2689 = load volatile i32, i32* %2688, align 4
  store i32 %2689, i32* %result4526, align 4
  %2690 = load i32, i32* %order4531, align 4
  switch i32 %2690, label %sw.default.4536 [
    i32 1, label %sw.bb.4535
    i32 3, label %sw.bb.4535
    i32 4, label %sw.bb.4535
  ]

sw.bb.4535:                                       ; preds = %sw.epilog.4534, %sw.epilog.4534, %sw.epilog.4534
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4537

sw.default.4536:                                  ; preds = %sw.epilog.4534
  br label %sw.epilog.4537

sw.epilog.4537:                                   ; preds = %sw.default.4536, %sw.bb.4535
  %2691 = load i32, i32* %result4526, align 4
  store i32 %2691, i32* %tmp4538
  %2692 = load i32, i32* %tmp4538
  %tobool4539 = icmp ne i32 %2692, 0
  br i1 %tobool4539, label %if.end.4552, label %if.then.4540

if.then.4540:                                     ; preds = %sw.epilog.4537
  %2693 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4541 = icmp ne i32 %2693, 0
  br i1 %tobool4541, label %if.end.4551, label %if.then.4542

if.then.4542:                                     ; preds = %if.then.4540
  %2694 = load i8*, i8** %next_instr, align 8
  %2695 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4543 = ptrtoint i8* %2694 to i64
  %sub.ptr.rhs.cast4544 = ptrtoint i8* %2695 to i64
  %sub.ptr.sub4545 = sub i64 %sub.ptr.lhs.cast4543, %sub.ptr.rhs.cast4544
  %conv4546 = trunc i64 %sub.ptr.sub4545 to i32
  %2696 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4547 = getelementptr inbounds %struct._frame, %struct._frame* %2696, i32 0, i32 13
  store i32 %conv4546, i32* %f_lasti4547, align 4
  %2697 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4548 = getelementptr i8, i8* %2697, i32 1
  store i8* %incdec.ptr4548, i8** %next_instr, align 8
  %2698 = load i8, i8* %2697, align 1
  %idxprom4549 = zext i8 %2698 to i64
  %arrayidx4550 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4549
  %2699 = load i8*, i8** %arrayidx4550, align 8
  br label %indirectgoto

if.end.4551:                                      ; preds = %if.then.4540
  br label %fast_next_opcode

if.end.4552:                                      ; preds = %sw.epilog.4537
  br label %for.cond

if.end.4553:                                      ; preds = %sw.bb.4515
  %2700 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %2701 = load i32, i32* %oparg, align 4
  call void @format_exc_unbound(%struct.PyCodeObject* %2700, i32 %2701)
  br label %error

TARGET_LOAD_CLOSURE:                              ; preds = %indirectgoto
  store i32 135, i32* %opcode, align 4
  %2702 = load i8*, i8** %next_instr, align 8
  %add.ptr4554 = getelementptr i8, i8* %2702, i64 2
  store i8* %add.ptr4554, i8** %next_instr, align 8
  %2703 = load i8*, i8** %next_instr, align 8
  %arrayidx4555 = getelementptr i8, i8* %2703, i64 -1
  %2704 = load i8, i8* %arrayidx4555, align 1
  %conv4556 = zext i8 %2704 to i32
  %shl4557 = shl i32 %conv4556, 8
  %2705 = load i8*, i8** %next_instr, align 8
  %arrayidx4558 = getelementptr i8, i8* %2705, i64 -2
  %2706 = load i8, i8* %arrayidx4558, align 1
  %conv4559 = zext i8 %2706 to i32
  %add4560 = add i32 %shl4557, %conv4559
  store i32 %add4560, i32* %oparg, align 4
  br label %sw.bb.4561

sw.bb.4561:                                       ; preds = %dispatch_opcode, %TARGET_LOAD_CLOSURE
  %2707 = load i32, i32* %oparg, align 4
  %idxprom4564 = sext i32 %2707 to i64
  %2708 = load %struct._object**, %struct._object*** %freevars, align 8
  %arrayidx4565 = getelementptr %struct._object*, %struct._object** %2708, i64 %idxprom4564
  %2709 = load %struct._object*, %struct._object** %arrayidx4565, align 8
  store %struct._object* %2709, %struct._object** %cell4563, align 8
  %2710 = load %struct._object*, %struct._object** %cell4563, align 8
  %ob_refcnt4566 = getelementptr inbounds %struct._object, %struct._object* %2710, i32 0, i32 0
  %2711 = load i64, i64* %ob_refcnt4566, align 8
  %inc4567 = add i64 %2711, 1
  store i64 %inc4567, i64* %ob_refcnt4566, align 8
  %2712 = load %struct._object*, %struct._object** %cell4563, align 8
  %2713 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4568 = getelementptr %struct._object*, %struct._object** %2713, i32 1
  store %struct._object** %incdec.ptr4568, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2712, %struct._object** %2713, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4570, align 8
  %2714 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4570, align 8
  %_value4575 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2714, i32 0, i32 0
  store i32* %_value4575, i32** %volatile_data4574, align 8
  store i32 0, i32* %order4577, align 4
  %2715 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4570, align 8
  %2716 = bitcast %struct._Py_atomic_int* %2715 to i8*
  %2717 = load i32, i32* %order4577, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2716, i32 %2717)
  %2718 = load i32, i32* %order4577, align 4
  switch i32 %2718, label %sw.default.4579 [
    i32 2, label %sw.bb.4578
    i32 3, label %sw.bb.4578
    i32 4, label %sw.bb.4578
  ]

sw.bb.4578:                                       ; preds = %sw.bb.4561, %sw.bb.4561, %sw.bb.4561
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4580

sw.default.4579:                                  ; preds = %sw.bb.4561
  br label %sw.epilog.4580

sw.epilog.4580:                                   ; preds = %sw.default.4579, %sw.bb.4578
  %2719 = load i32*, i32** %volatile_data4574, align 8
  %2720 = load volatile i32, i32* %2719, align 4
  store i32 %2720, i32* %result4572, align 4
  %2721 = load i32, i32* %order4577, align 4
  switch i32 %2721, label %sw.default.4582 [
    i32 1, label %sw.bb.4581
    i32 3, label %sw.bb.4581
    i32 4, label %sw.bb.4581
  ]

sw.bb.4581:                                       ; preds = %sw.epilog.4580, %sw.epilog.4580, %sw.epilog.4580
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4583

sw.default.4582:                                  ; preds = %sw.epilog.4580
  br label %sw.epilog.4583

sw.epilog.4583:                                   ; preds = %sw.default.4582, %sw.bb.4581
  %2722 = load i32, i32* %result4572, align 4
  store i32 %2722, i32* %tmp4584
  %2723 = load i32, i32* %tmp4584
  %tobool4585 = icmp ne i32 %2723, 0
  br i1 %tobool4585, label %if.end.4598, label %if.then.4586

if.then.4586:                                     ; preds = %sw.epilog.4583
  %2724 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4587 = icmp ne i32 %2724, 0
  br i1 %tobool4587, label %if.end.4597, label %if.then.4588

if.then.4588:                                     ; preds = %if.then.4586
  %2725 = load i8*, i8** %next_instr, align 8
  %2726 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4589 = ptrtoint i8* %2725 to i64
  %sub.ptr.rhs.cast4590 = ptrtoint i8* %2726 to i64
  %sub.ptr.sub4591 = sub i64 %sub.ptr.lhs.cast4589, %sub.ptr.rhs.cast4590
  %conv4592 = trunc i64 %sub.ptr.sub4591 to i32
  %2727 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4593 = getelementptr inbounds %struct._frame, %struct._frame* %2727, i32 0, i32 13
  store i32 %conv4592, i32* %f_lasti4593, align 4
  %2728 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4594 = getelementptr i8, i8* %2728, i32 1
  store i8* %incdec.ptr4594, i8** %next_instr, align 8
  %2729 = load i8, i8* %2728, align 1
  %idxprom4595 = zext i8 %2729 to i64
  %arrayidx4596 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4595
  %2730 = load i8*, i8** %arrayidx4596, align 8
  br label %indirectgoto

if.end.4597:                                      ; preds = %if.then.4586
  br label %fast_next_opcode

if.end.4598:                                      ; preds = %sw.epilog.4583
  br label %for.cond

TARGET_LOAD_CLASSDEREF:                           ; preds = %indirectgoto
  store i32 148, i32* %opcode, align 4
  %2731 = load i8*, i8** %next_instr, align 8
  %add.ptr4599 = getelementptr i8, i8* %2731, i64 2
  store i8* %add.ptr4599, i8** %next_instr, align 8
  %2732 = load i8*, i8** %next_instr, align 8
  %arrayidx4600 = getelementptr i8, i8* %2732, i64 -1
  %2733 = load i8, i8* %arrayidx4600, align 1
  %conv4601 = zext i8 %2733 to i32
  %shl4602 = shl i32 %conv4601, 8
  %2734 = load i8*, i8** %next_instr, align 8
  %arrayidx4603 = getelementptr i8, i8* %2734, i64 -2
  %2735 = load i8, i8* %arrayidx4603, align 1
  %conv4604 = zext i8 %2735 to i32
  %add4605 = add i32 %shl4602, %conv4604
  store i32 %add4605, i32* %oparg, align 4
  br label %sw.bb.4606

sw.bb.4606:                                       ; preds = %dispatch_opcode, %TARGET_LOAD_CLASSDEREF
  %2736 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals4613 = getelementptr inbounds %struct._frame, %struct._frame* %2736, i32 0, i32 5
  %2737 = load %struct._object*, %struct._object** %f_locals4613, align 8
  store %struct._object* %2737, %struct._object** %locals4612, align 8
  %2738 = load i32, i32* %oparg, align 4
  %conv4615 = sext i32 %2738 to i64
  %2739 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_cellvars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %2739, i32 0, i32 11
  %2740 = load %struct._object*, %struct._object** %co_cellvars, align 8
  %2741 = bitcast %struct._object* %2740 to %struct.PyVarObject*
  %ob_size4616 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %2741, i32 0, i32 1
  %2742 = load i64, i64* %ob_size4616, align 8
  %sub4617 = sub i64 %conv4615, %2742
  store i64 %sub4617, i64* %idx, align 8
  %2743 = load i64, i64* %idx, align 8
  %2744 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_freevars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %2744, i32 0, i32 10
  %2745 = load %struct._object*, %struct._object** %co_freevars, align 8
  %2746 = bitcast %struct._object* %2745 to %struct.PyTupleObject*
  %ob_item4618 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2746, i32 0, i32 1
  %arrayidx4619 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4618, i32 0, i64 %2743
  %2747 = load %struct._object*, %struct._object** %arrayidx4619, align 8
  store %struct._object* %2747, %struct._object** %name4608, align 8
  %2748 = load %struct._object*, %struct._object** %locals4612, align 8
  %ob_type4620 = getelementptr inbounds %struct._object, %struct._object* %2748, i32 0, i32 1
  %2749 = load %struct._typeobject*, %struct._typeobject** %ob_type4620, align 8
  %cmp4621 = icmp eq %struct._typeobject* %2749, @PyDict_Type
  br i1 %cmp4621, label %if.then.4623, label %if.else.4635

if.then.4623:                                     ; preds = %sw.bb.4606
  %2750 = load %struct._object*, %struct._object** %locals4612, align 8
  %2751 = load %struct._object*, %struct._object** %name4608, align 8
  %call4624 = call %struct._object* @PyDict_GetItem(%struct._object* %2750, %struct._object* %2751)
  store %struct._object* %call4624, %struct._object** %value4610, align 8
  br label %do.body.4625

do.body.4625:                                     ; preds = %if.then.4623
  %2752 = load %struct._object*, %struct._object** %value4610, align 8
  store %struct._object* %2752, %struct._object** %_py_xincref_tmp4627, align 8
  %2753 = load %struct._object*, %struct._object** %_py_xincref_tmp4627, align 8
  %cmp4628 = icmp ne %struct._object* %2753, null
  br i1 %cmp4628, label %if.then.4630, label %if.end.4633

if.then.4630:                                     ; preds = %do.body.4625
  %2754 = load %struct._object*, %struct._object** %_py_xincref_tmp4627, align 8
  %ob_refcnt4631 = getelementptr inbounds %struct._object, %struct._object* %2754, i32 0, i32 0
  %2755 = load i64, i64* %ob_refcnt4631, align 8
  %inc4632 = add i64 %2755, 1
  store i64 %inc4632, i64* %ob_refcnt4631, align 8
  br label %if.end.4633

if.end.4633:                                      ; preds = %if.then.4630, %do.body.4625
  br label %do.end.4634

do.end.4634:                                      ; preds = %if.end.4633
  br label %if.end.4648

if.else.4635:                                     ; preds = %sw.bb.4606
  %2756 = load %struct._object*, %struct._object** %locals4612, align 8
  %2757 = load %struct._object*, %struct._object** %name4608, align 8
  %call4636 = call %struct._object* @PyObject_GetItem(%struct._object* %2756, %struct._object* %2757)
  store %struct._object* %call4636, %struct._object** %value4610, align 8
  %2758 = load %struct._object*, %struct._object** %value4610, align 8
  %cmp4637 = icmp eq %struct._object* %2758, null
  br i1 %cmp4637, label %land.lhs.true.4639, label %if.end.4647

land.lhs.true.4639:                               ; preds = %if.else.4635
  %call4640 = call %struct._object* @PyErr_Occurred()
  %tobool4641 = icmp ne %struct._object* %call4640, null
  br i1 %tobool4641, label %if.then.4642, label %if.end.4647

if.then.4642:                                     ; preds = %land.lhs.true.4639
  %2759 = load %struct._object*, %struct._object** @PyExc_KeyError, align 8
  %call4643 = call i32 @PyErr_ExceptionMatches(%struct._object* %2759)
  %tobool4644 = icmp ne i32 %call4643, 0
  br i1 %tobool4644, label %if.end.4646, label %if.then.4645

if.then.4645:                                     ; preds = %if.then.4642
  br label %error

if.end.4646:                                      ; preds = %if.then.4642
  call void @PyErr_Clear()
  br label %if.end.4647

if.end.4647:                                      ; preds = %if.end.4646, %land.lhs.true.4639, %if.else.4635
  br label %if.end.4648

if.end.4648:                                      ; preds = %if.end.4647, %do.end.4634
  %2760 = load %struct._object*, %struct._object** %value4610, align 8
  %tobool4649 = icmp ne %struct._object* %2760, null
  br i1 %tobool4649, label %if.end.4662, label %if.then.4650

if.then.4650:                                     ; preds = %if.end.4648
  %2761 = load i32, i32* %oparg, align 4
  %idxprom4653 = sext i32 %2761 to i64
  %2762 = load %struct._object**, %struct._object*** %freevars, align 8
  %arrayidx4654 = getelementptr %struct._object*, %struct._object** %2762, i64 %idxprom4653
  %2763 = load %struct._object*, %struct._object** %arrayidx4654, align 8
  store %struct._object* %2763, %struct._object** %cell4652, align 8
  %2764 = load %struct._object*, %struct._object** %cell4652, align 8
  %2765 = bitcast %struct._object* %2764 to %struct.PyCellObject*
  %ob_ref4655 = getelementptr inbounds %struct.PyCellObject, %struct.PyCellObject* %2765, i32 0, i32 1
  %2766 = load %struct._object*, %struct._object** %ob_ref4655, align 8
  store %struct._object* %2766, %struct._object** %value4610, align 8
  %2767 = load %struct._object*, %struct._object** %value4610, align 8
  %cmp4656 = icmp eq %struct._object* %2767, null
  br i1 %cmp4656, label %if.then.4658, label %if.end.4659

if.then.4658:                                     ; preds = %if.then.4650
  %2768 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %2769 = load i32, i32* %oparg, align 4
  call void @format_exc_unbound(%struct.PyCodeObject* %2768, i32 %2769)
  br label %error

if.end.4659:                                      ; preds = %if.then.4650
  %2770 = load %struct._object*, %struct._object** %value4610, align 8
  %ob_refcnt4660 = getelementptr inbounds %struct._object, %struct._object* %2770, i32 0, i32 0
  %2771 = load i64, i64* %ob_refcnt4660, align 8
  %inc4661 = add i64 %2771, 1
  store i64 %inc4661, i64* %ob_refcnt4660, align 8
  br label %if.end.4662

if.end.4662:                                      ; preds = %if.end.4659, %if.end.4648
  %2772 = load %struct._object*, %struct._object** %value4610, align 8
  %2773 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4663 = getelementptr %struct._object*, %struct._object** %2773, i32 1
  store %struct._object** %incdec.ptr4663, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2772, %struct._object** %2773, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4665, align 8
  %2774 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4665, align 8
  %_value4670 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2774, i32 0, i32 0
  store i32* %_value4670, i32** %volatile_data4669, align 8
  store i32 0, i32* %order4672, align 4
  %2775 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4665, align 8
  %2776 = bitcast %struct._Py_atomic_int* %2775 to i8*
  %2777 = load i32, i32* %order4672, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2776, i32 %2777)
  %2778 = load i32, i32* %order4672, align 4
  switch i32 %2778, label %sw.default.4674 [
    i32 2, label %sw.bb.4673
    i32 3, label %sw.bb.4673
    i32 4, label %sw.bb.4673
  ]

sw.bb.4673:                                       ; preds = %if.end.4662, %if.end.4662, %if.end.4662
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4675

sw.default.4674:                                  ; preds = %if.end.4662
  br label %sw.epilog.4675

sw.epilog.4675:                                   ; preds = %sw.default.4674, %sw.bb.4673
  %2779 = load i32*, i32** %volatile_data4669, align 8
  %2780 = load volatile i32, i32* %2779, align 4
  store i32 %2780, i32* %result4667, align 4
  %2781 = load i32, i32* %order4672, align 4
  switch i32 %2781, label %sw.default.4677 [
    i32 1, label %sw.bb.4676
    i32 3, label %sw.bb.4676
    i32 4, label %sw.bb.4676
  ]

sw.bb.4676:                                       ; preds = %sw.epilog.4675, %sw.epilog.4675, %sw.epilog.4675
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4678

sw.default.4677:                                  ; preds = %sw.epilog.4675
  br label %sw.epilog.4678

sw.epilog.4678:                                   ; preds = %sw.default.4677, %sw.bb.4676
  %2782 = load i32, i32* %result4667, align 4
  store i32 %2782, i32* %tmp4679
  %2783 = load i32, i32* %tmp4679
  %tobool4680 = icmp ne i32 %2783, 0
  br i1 %tobool4680, label %if.end.4693, label %if.then.4681

if.then.4681:                                     ; preds = %sw.epilog.4678
  %2784 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4682 = icmp ne i32 %2784, 0
  br i1 %tobool4682, label %if.end.4692, label %if.then.4683

if.then.4683:                                     ; preds = %if.then.4681
  %2785 = load i8*, i8** %next_instr, align 8
  %2786 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4684 = ptrtoint i8* %2785 to i64
  %sub.ptr.rhs.cast4685 = ptrtoint i8* %2786 to i64
  %sub.ptr.sub4686 = sub i64 %sub.ptr.lhs.cast4684, %sub.ptr.rhs.cast4685
  %conv4687 = trunc i64 %sub.ptr.sub4686 to i32
  %2787 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4688 = getelementptr inbounds %struct._frame, %struct._frame* %2787, i32 0, i32 13
  store i32 %conv4687, i32* %f_lasti4688, align 4
  %2788 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4689 = getelementptr i8, i8* %2788, i32 1
  store i8* %incdec.ptr4689, i8** %next_instr, align 8
  %2789 = load i8, i8* %2788, align 1
  %idxprom4690 = zext i8 %2789 to i64
  %arrayidx4691 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4690
  %2790 = load i8*, i8** %arrayidx4691, align 8
  br label %indirectgoto

if.end.4692:                                      ; preds = %if.then.4681
  br label %fast_next_opcode

if.end.4693:                                      ; preds = %sw.epilog.4678
  br label %for.cond

TARGET_LOAD_DEREF:                                ; preds = %indirectgoto
  store i32 136, i32* %opcode, align 4
  %2791 = load i8*, i8** %next_instr, align 8
  %add.ptr4694 = getelementptr i8, i8* %2791, i64 2
  store i8* %add.ptr4694, i8** %next_instr, align 8
  %2792 = load i8*, i8** %next_instr, align 8
  %arrayidx4695 = getelementptr i8, i8* %2792, i64 -1
  %2793 = load i8, i8* %arrayidx4695, align 1
  %conv4696 = zext i8 %2793 to i32
  %shl4697 = shl i32 %conv4696, 8
  %2794 = load i8*, i8** %next_instr, align 8
  %arrayidx4698 = getelementptr i8, i8* %2794, i64 -2
  %2795 = load i8, i8* %arrayidx4698, align 1
  %conv4699 = zext i8 %2795 to i32
  %add4700 = add i32 %shl4697, %conv4699
  store i32 %add4700, i32* %oparg, align 4
  br label %sw.bb.4701

sw.bb.4701:                                       ; preds = %dispatch_opcode, %TARGET_LOAD_DEREF
  %2796 = load i32, i32* %oparg, align 4
  %idxprom4704 = sext i32 %2796 to i64
  %2797 = load %struct._object**, %struct._object*** %freevars, align 8
  %arrayidx4705 = getelementptr %struct._object*, %struct._object** %2797, i64 %idxprom4704
  %2798 = load %struct._object*, %struct._object** %arrayidx4705, align 8
  store %struct._object* %2798, %struct._object** %cell4703, align 8
  %2799 = load %struct._object*, %struct._object** %cell4703, align 8
  %2800 = bitcast %struct._object* %2799 to %struct.PyCellObject*
  %ob_ref4708 = getelementptr inbounds %struct.PyCellObject, %struct.PyCellObject* %2800, i32 0, i32 1
  %2801 = load %struct._object*, %struct._object** %ob_ref4708, align 8
  store %struct._object* %2801, %struct._object** %value4707, align 8
  %2802 = load %struct._object*, %struct._object** %value4707, align 8
  %cmp4709 = icmp eq %struct._object* %2802, null
  br i1 %cmp4709, label %if.then.4711, label %if.end.4712

if.then.4711:                                     ; preds = %sw.bb.4701
  %2803 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %2804 = load i32, i32* %oparg, align 4
  call void @format_exc_unbound(%struct.PyCodeObject* %2803, i32 %2804)
  br label %error

if.end.4712:                                      ; preds = %sw.bb.4701
  %2805 = load %struct._object*, %struct._object** %value4707, align 8
  %ob_refcnt4713 = getelementptr inbounds %struct._object, %struct._object* %2805, i32 0, i32 0
  %2806 = load i64, i64* %ob_refcnt4713, align 8
  %inc4714 = add i64 %2806, 1
  store i64 %inc4714, i64* %ob_refcnt4713, align 8
  %2807 = load %struct._object*, %struct._object** %value4707, align 8
  %2808 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4715 = getelementptr %struct._object*, %struct._object** %2808, i32 1
  store %struct._object** %incdec.ptr4715, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2807, %struct._object** %2808, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4717, align 8
  %2809 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4717, align 8
  %_value4722 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2809, i32 0, i32 0
  store i32* %_value4722, i32** %volatile_data4721, align 8
  store i32 0, i32* %order4724, align 4
  %2810 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4717, align 8
  %2811 = bitcast %struct._Py_atomic_int* %2810 to i8*
  %2812 = load i32, i32* %order4724, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2811, i32 %2812)
  %2813 = load i32, i32* %order4724, align 4
  switch i32 %2813, label %sw.default.4726 [
    i32 2, label %sw.bb.4725
    i32 3, label %sw.bb.4725
    i32 4, label %sw.bb.4725
  ]

sw.bb.4725:                                       ; preds = %if.end.4712, %if.end.4712, %if.end.4712
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4727

sw.default.4726:                                  ; preds = %if.end.4712
  br label %sw.epilog.4727

sw.epilog.4727:                                   ; preds = %sw.default.4726, %sw.bb.4725
  %2814 = load i32*, i32** %volatile_data4721, align 8
  %2815 = load volatile i32, i32* %2814, align 4
  store i32 %2815, i32* %result4719, align 4
  %2816 = load i32, i32* %order4724, align 4
  switch i32 %2816, label %sw.default.4729 [
    i32 1, label %sw.bb.4728
    i32 3, label %sw.bb.4728
    i32 4, label %sw.bb.4728
  ]

sw.bb.4728:                                       ; preds = %sw.epilog.4727, %sw.epilog.4727, %sw.epilog.4727
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4730

sw.default.4729:                                  ; preds = %sw.epilog.4727
  br label %sw.epilog.4730

sw.epilog.4730:                                   ; preds = %sw.default.4729, %sw.bb.4728
  %2817 = load i32, i32* %result4719, align 4
  store i32 %2817, i32* %tmp4731
  %2818 = load i32, i32* %tmp4731
  %tobool4732 = icmp ne i32 %2818, 0
  br i1 %tobool4732, label %if.end.4745, label %if.then.4733

if.then.4733:                                     ; preds = %sw.epilog.4730
  %2819 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4734 = icmp ne i32 %2819, 0
  br i1 %tobool4734, label %if.end.4744, label %if.then.4735

if.then.4735:                                     ; preds = %if.then.4733
  %2820 = load i8*, i8** %next_instr, align 8
  %2821 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4736 = ptrtoint i8* %2820 to i64
  %sub.ptr.rhs.cast4737 = ptrtoint i8* %2821 to i64
  %sub.ptr.sub4738 = sub i64 %sub.ptr.lhs.cast4736, %sub.ptr.rhs.cast4737
  %conv4739 = trunc i64 %sub.ptr.sub4738 to i32
  %2822 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4740 = getelementptr inbounds %struct._frame, %struct._frame* %2822, i32 0, i32 13
  store i32 %conv4739, i32* %f_lasti4740, align 4
  %2823 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4741 = getelementptr i8, i8* %2823, i32 1
  store i8* %incdec.ptr4741, i8** %next_instr, align 8
  %2824 = load i8, i8* %2823, align 1
  %idxprom4742 = zext i8 %2824 to i64
  %arrayidx4743 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4742
  %2825 = load i8*, i8** %arrayidx4743, align 8
  br label %indirectgoto

if.end.4744:                                      ; preds = %if.then.4733
  br label %fast_next_opcode

if.end.4745:                                      ; preds = %sw.epilog.4730
  br label %for.cond

TARGET_STORE_DEREF:                               ; preds = %indirectgoto
  store i32 137, i32* %opcode, align 4
  %2826 = load i8*, i8** %next_instr, align 8
  %add.ptr4746 = getelementptr i8, i8* %2826, i64 2
  store i8* %add.ptr4746, i8** %next_instr, align 8
  %2827 = load i8*, i8** %next_instr, align 8
  %arrayidx4747 = getelementptr i8, i8* %2827, i64 -1
  %2828 = load i8, i8* %arrayidx4747, align 1
  %conv4748 = zext i8 %2828 to i32
  %shl4749 = shl i32 %conv4748, 8
  %2829 = load i8*, i8** %next_instr, align 8
  %arrayidx4750 = getelementptr i8, i8* %2829, i64 -2
  %2830 = load i8, i8* %arrayidx4750, align 1
  %conv4751 = zext i8 %2830 to i32
  %add4752 = add i32 %shl4749, %conv4751
  store i32 %add4752, i32* %oparg, align 4
  br label %sw.bb.4753

sw.bb.4753:                                       ; preds = %dispatch_opcode, %TARGET_STORE_DEREF
  %2831 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4756 = getelementptr %struct._object*, %struct._object** %2831, i32 -1
  store %struct._object** %incdec.ptr4756, %struct._object*** %stack_pointer, align 8
  %2832 = load %struct._object*, %struct._object** %incdec.ptr4756, align 8
  store %struct._object* %2832, %struct._object** %v4755, align 8
  %2833 = load i32, i32* %oparg, align 4
  %idxprom4759 = sext i32 %2833 to i64
  %2834 = load %struct._object**, %struct._object*** %freevars, align 8
  %arrayidx4760 = getelementptr %struct._object*, %struct._object** %2834, i64 %idxprom4759
  %2835 = load %struct._object*, %struct._object** %arrayidx4760, align 8
  store %struct._object* %2835, %struct._object** %cell4758, align 8
  %2836 = load %struct._object*, %struct._object** %cell4758, align 8
  %2837 = load %struct._object*, %struct._object** %v4755, align 8
  %call4761 = call i32 @PyCell_Set(%struct._object* %2836, %struct._object* %2837)
  br label %do.body.4762

do.body.4762:                                     ; preds = %sw.bb.4753
  %2838 = load %struct._object*, %struct._object** %v4755, align 8
  store %struct._object* %2838, %struct._object** %_py_decref_tmp4764, align 8
  %2839 = load %struct._object*, %struct._object** %_py_decref_tmp4764, align 8
  %ob_refcnt4765 = getelementptr inbounds %struct._object, %struct._object* %2839, i32 0, i32 0
  %2840 = load i64, i64* %ob_refcnt4765, align 8
  %dec4766 = add i64 %2840, -1
  store i64 %dec4766, i64* %ob_refcnt4765, align 8
  %cmp4767 = icmp ne i64 %dec4766, 0
  br i1 %cmp4767, label %if.then.4769, label %if.else.4770

if.then.4769:                                     ; preds = %do.body.4762
  br label %if.end.4773

if.else.4770:                                     ; preds = %do.body.4762
  %2841 = load %struct._object*, %struct._object** %_py_decref_tmp4764, align 8
  %ob_type4771 = getelementptr inbounds %struct._object, %struct._object* %2841, i32 0, i32 1
  %2842 = load %struct._typeobject*, %struct._typeobject** %ob_type4771, align 8
  %tp_dealloc4772 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2842, i32 0, i32 4
  %2843 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc4772, align 8
  %2844 = load %struct._object*, %struct._object** %_py_decref_tmp4764, align 8
  call void %2843(%struct._object* %2844)
  br label %if.end.4773

if.end.4773:                                      ; preds = %if.else.4770, %if.then.4769
  br label %do.end.4774

do.end.4774:                                      ; preds = %if.end.4773
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4776, align 8
  %2845 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4776, align 8
  %_value4781 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2845, i32 0, i32 0
  store i32* %_value4781, i32** %volatile_data4780, align 8
  store i32 0, i32* %order4783, align 4
  %2846 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4776, align 8
  %2847 = bitcast %struct._Py_atomic_int* %2846 to i8*
  %2848 = load i32, i32* %order4783, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2847, i32 %2848)
  %2849 = load i32, i32* %order4783, align 4
  switch i32 %2849, label %sw.default.4785 [
    i32 2, label %sw.bb.4784
    i32 3, label %sw.bb.4784
    i32 4, label %sw.bb.4784
  ]

sw.bb.4784:                                       ; preds = %do.end.4774, %do.end.4774, %do.end.4774
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4786

sw.default.4785:                                  ; preds = %do.end.4774
  br label %sw.epilog.4786

sw.epilog.4786:                                   ; preds = %sw.default.4785, %sw.bb.4784
  %2850 = load i32*, i32** %volatile_data4780, align 8
  %2851 = load volatile i32, i32* %2850, align 4
  store i32 %2851, i32* %result4778, align 4
  %2852 = load i32, i32* %order4783, align 4
  switch i32 %2852, label %sw.default.4788 [
    i32 1, label %sw.bb.4787
    i32 3, label %sw.bb.4787
    i32 4, label %sw.bb.4787
  ]

sw.bb.4787:                                       ; preds = %sw.epilog.4786, %sw.epilog.4786, %sw.epilog.4786
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4789

sw.default.4788:                                  ; preds = %sw.epilog.4786
  br label %sw.epilog.4789

sw.epilog.4789:                                   ; preds = %sw.default.4788, %sw.bb.4787
  %2853 = load i32, i32* %result4778, align 4
  store i32 %2853, i32* %tmp4790
  %2854 = load i32, i32* %tmp4790
  %tobool4791 = icmp ne i32 %2854, 0
  br i1 %tobool4791, label %if.end.4804, label %if.then.4792

if.then.4792:                                     ; preds = %sw.epilog.4789
  %2855 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4793 = icmp ne i32 %2855, 0
  br i1 %tobool4793, label %if.end.4803, label %if.then.4794

if.then.4794:                                     ; preds = %if.then.4792
  %2856 = load i8*, i8** %next_instr, align 8
  %2857 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4795 = ptrtoint i8* %2856 to i64
  %sub.ptr.rhs.cast4796 = ptrtoint i8* %2857 to i64
  %sub.ptr.sub4797 = sub i64 %sub.ptr.lhs.cast4795, %sub.ptr.rhs.cast4796
  %conv4798 = trunc i64 %sub.ptr.sub4797 to i32
  %2858 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4799 = getelementptr inbounds %struct._frame, %struct._frame* %2858, i32 0, i32 13
  store i32 %conv4798, i32* %f_lasti4799, align 4
  %2859 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4800 = getelementptr i8, i8* %2859, i32 1
  store i8* %incdec.ptr4800, i8** %next_instr, align 8
  %2860 = load i8, i8* %2859, align 1
  %idxprom4801 = zext i8 %2860 to i64
  %arrayidx4802 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4801
  %2861 = load i8*, i8** %arrayidx4802, align 8
  br label %indirectgoto

if.end.4803:                                      ; preds = %if.then.4792
  br label %fast_next_opcode

if.end.4804:                                      ; preds = %sw.epilog.4789
  br label %for.cond

TARGET_BUILD_TUPLE:                               ; preds = %indirectgoto
  store i32 102, i32* %opcode, align 4
  %2862 = load i8*, i8** %next_instr, align 8
  %add.ptr4805 = getelementptr i8, i8* %2862, i64 2
  store i8* %add.ptr4805, i8** %next_instr, align 8
  %2863 = load i8*, i8** %next_instr, align 8
  %arrayidx4806 = getelementptr i8, i8* %2863, i64 -1
  %2864 = load i8, i8* %arrayidx4806, align 1
  %conv4807 = zext i8 %2864 to i32
  %shl4808 = shl i32 %conv4807, 8
  %2865 = load i8*, i8** %next_instr, align 8
  %arrayidx4809 = getelementptr i8, i8* %2865, i64 -2
  %2866 = load i8, i8* %arrayidx4809, align 1
  %conv4810 = zext i8 %2866 to i32
  %add4811 = add i32 %shl4808, %conv4810
  store i32 %add4811, i32* %oparg, align 4
  br label %sw.bb.4812

sw.bb.4812:                                       ; preds = %dispatch_opcode, %TARGET_BUILD_TUPLE
  %2867 = load i32, i32* %oparg, align 4
  %conv4814 = sext i32 %2867 to i64
  %call4815 = call %struct._object* @PyTuple_New(i64 %conv4814)
  store %struct._object* %call4815, %struct._object** %tup, align 8
  %2868 = load %struct._object*, %struct._object** %tup, align 8
  %cmp4816 = icmp eq %struct._object* %2868, null
  br i1 %cmp4816, label %if.then.4818, label %if.end.4819

if.then.4818:                                     ; preds = %sw.bb.4812
  br label %error

if.end.4819:                                      ; preds = %sw.bb.4812
  br label %while.cond.4820

while.cond.4820:                                  ; preds = %while.body.4824, %if.end.4819
  %2869 = load i32, i32* %oparg, align 4
  %dec4821 = add i32 %2869, -1
  store i32 %dec4821, i32* %oparg, align 4
  %cmp4822 = icmp sge i32 %dec4821, 0
  br i1 %cmp4822, label %while.body.4824, label %while.end.4831

while.body.4824:                                  ; preds = %while.cond.4820
  %2870 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4827 = getelementptr %struct._object*, %struct._object** %2870, i32 -1
  store %struct._object** %incdec.ptr4827, %struct._object*** %stack_pointer, align 8
  %2871 = load %struct._object*, %struct._object** %incdec.ptr4827, align 8
  store %struct._object* %2871, %struct._object** %item4826, align 8
  %2872 = load %struct._object*, %struct._object** %item4826, align 8
  %2873 = load i32, i32* %oparg, align 4
  %idxprom4828 = sext i32 %2873 to i64
  %2874 = load %struct._object*, %struct._object** %tup, align 8
  %2875 = bitcast %struct._object* %2874 to %struct.PyTupleObject*
  %ob_item4829 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %2875, i32 0, i32 1
  %arrayidx4830 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item4829, i32 0, i64 %idxprom4828
  store %struct._object* %2872, %struct._object** %arrayidx4830, align 8
  br label %while.cond.4820

while.end.4831:                                   ; preds = %while.cond.4820
  %2876 = load %struct._object*, %struct._object** %tup, align 8
  %2877 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4832 = getelementptr %struct._object*, %struct._object** %2877, i32 1
  store %struct._object** %incdec.ptr4832, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2876, %struct._object** %2877, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4834, align 8
  %2878 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4834, align 8
  %_value4839 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2878, i32 0, i32 0
  store i32* %_value4839, i32** %volatile_data4838, align 8
  store i32 0, i32* %order4841, align 4
  %2879 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4834, align 8
  %2880 = bitcast %struct._Py_atomic_int* %2879 to i8*
  %2881 = load i32, i32* %order4841, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2880, i32 %2881)
  %2882 = load i32, i32* %order4841, align 4
  switch i32 %2882, label %sw.default.4843 [
    i32 2, label %sw.bb.4842
    i32 3, label %sw.bb.4842
    i32 4, label %sw.bb.4842
  ]

sw.bb.4842:                                       ; preds = %while.end.4831, %while.end.4831, %while.end.4831
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4844

sw.default.4843:                                  ; preds = %while.end.4831
  br label %sw.epilog.4844

sw.epilog.4844:                                   ; preds = %sw.default.4843, %sw.bb.4842
  %2883 = load i32*, i32** %volatile_data4838, align 8
  %2884 = load volatile i32, i32* %2883, align 4
  store i32 %2884, i32* %result4836, align 4
  %2885 = load i32, i32* %order4841, align 4
  switch i32 %2885, label %sw.default.4846 [
    i32 1, label %sw.bb.4845
    i32 3, label %sw.bb.4845
    i32 4, label %sw.bb.4845
  ]

sw.bb.4845:                                       ; preds = %sw.epilog.4844, %sw.epilog.4844, %sw.epilog.4844
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4847

sw.default.4846:                                  ; preds = %sw.epilog.4844
  br label %sw.epilog.4847

sw.epilog.4847:                                   ; preds = %sw.default.4846, %sw.bb.4845
  %2886 = load i32, i32* %result4836, align 4
  store i32 %2886, i32* %tmp4848
  %2887 = load i32, i32* %tmp4848
  %tobool4849 = icmp ne i32 %2887, 0
  br i1 %tobool4849, label %if.end.4862, label %if.then.4850

if.then.4850:                                     ; preds = %sw.epilog.4847
  %2888 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4851 = icmp ne i32 %2888, 0
  br i1 %tobool4851, label %if.end.4861, label %if.then.4852

if.then.4852:                                     ; preds = %if.then.4850
  %2889 = load i8*, i8** %next_instr, align 8
  %2890 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4853 = ptrtoint i8* %2889 to i64
  %sub.ptr.rhs.cast4854 = ptrtoint i8* %2890 to i64
  %sub.ptr.sub4855 = sub i64 %sub.ptr.lhs.cast4853, %sub.ptr.rhs.cast4854
  %conv4856 = trunc i64 %sub.ptr.sub4855 to i32
  %2891 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4857 = getelementptr inbounds %struct._frame, %struct._frame* %2891, i32 0, i32 13
  store i32 %conv4856, i32* %f_lasti4857, align 4
  %2892 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4858 = getelementptr i8, i8* %2892, i32 1
  store i8* %incdec.ptr4858, i8** %next_instr, align 8
  %2893 = load i8, i8* %2892, align 1
  %idxprom4859 = zext i8 %2893 to i64
  %arrayidx4860 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4859
  %2894 = load i8*, i8** %arrayidx4860, align 8
  br label %indirectgoto

if.end.4861:                                      ; preds = %if.then.4850
  br label %fast_next_opcode

if.end.4862:                                      ; preds = %sw.epilog.4847
  br label %for.cond

TARGET_BUILD_LIST:                                ; preds = %indirectgoto
  store i32 103, i32* %opcode, align 4
  %2895 = load i8*, i8** %next_instr, align 8
  %add.ptr4863 = getelementptr i8, i8* %2895, i64 2
  store i8* %add.ptr4863, i8** %next_instr, align 8
  %2896 = load i8*, i8** %next_instr, align 8
  %arrayidx4864 = getelementptr i8, i8* %2896, i64 -1
  %2897 = load i8, i8* %arrayidx4864, align 1
  %conv4865 = zext i8 %2897 to i32
  %shl4866 = shl i32 %conv4865, 8
  %2898 = load i8*, i8** %next_instr, align 8
  %arrayidx4867 = getelementptr i8, i8* %2898, i64 -2
  %2899 = load i8, i8* %arrayidx4867, align 1
  %conv4868 = zext i8 %2899 to i32
  %add4869 = add i32 %shl4866, %conv4868
  store i32 %add4869, i32* %oparg, align 4
  br label %sw.bb.4870

sw.bb.4870:                                       ; preds = %dispatch_opcode, %TARGET_BUILD_LIST
  %2900 = load i32, i32* %oparg, align 4
  %conv4873 = sext i32 %2900 to i64
  %call4874 = call %struct._object* @PyList_New(i64 %conv4873)
  store %struct._object* %call4874, %struct._object** %list4872, align 8
  %2901 = load %struct._object*, %struct._object** %list4872, align 8
  %cmp4875 = icmp eq %struct._object* %2901, null
  br i1 %cmp4875, label %if.then.4877, label %if.end.4878

if.then.4877:                                     ; preds = %sw.bb.4870
  br label %error

if.end.4878:                                      ; preds = %sw.bb.4870
  br label %while.cond.4879

while.cond.4879:                                  ; preds = %while.body.4883, %if.end.4878
  %2902 = load i32, i32* %oparg, align 4
  %dec4880 = add i32 %2902, -1
  store i32 %dec4880, i32* %oparg, align 4
  %cmp4881 = icmp sge i32 %dec4880, 0
  br i1 %cmp4881, label %while.body.4883, label %while.end.4890

while.body.4883:                                  ; preds = %while.cond.4879
  %2903 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4886 = getelementptr %struct._object*, %struct._object** %2903, i32 -1
  store %struct._object** %incdec.ptr4886, %struct._object*** %stack_pointer, align 8
  %2904 = load %struct._object*, %struct._object** %incdec.ptr4886, align 8
  store %struct._object* %2904, %struct._object** %item4885, align 8
  %2905 = load %struct._object*, %struct._object** %item4885, align 8
  %2906 = load i32, i32* %oparg, align 4
  %idxprom4887 = sext i32 %2906 to i64
  %2907 = load %struct._object*, %struct._object** %list4872, align 8
  %2908 = bitcast %struct._object* %2907 to %struct.PyListObject*
  %ob_item4888 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %2908, i32 0, i32 1
  %2909 = load %struct._object**, %struct._object*** %ob_item4888, align 8
  %arrayidx4889 = getelementptr %struct._object*, %struct._object** %2909, i64 %idxprom4887
  store %struct._object* %2905, %struct._object** %arrayidx4889, align 8
  br label %while.cond.4879

while.end.4890:                                   ; preds = %while.cond.4879
  %2910 = load %struct._object*, %struct._object** %list4872, align 8
  %2911 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4891 = getelementptr %struct._object*, %struct._object** %2911, i32 1
  store %struct._object** %incdec.ptr4891, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2910, %struct._object** %2911, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4893, align 8
  %2912 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4893, align 8
  %_value4898 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2912, i32 0, i32 0
  store i32* %_value4898, i32** %volatile_data4897, align 8
  store i32 0, i32* %order4900, align 4
  %2913 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4893, align 8
  %2914 = bitcast %struct._Py_atomic_int* %2913 to i8*
  %2915 = load i32, i32* %order4900, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2914, i32 %2915)
  %2916 = load i32, i32* %order4900, align 4
  switch i32 %2916, label %sw.default.4902 [
    i32 2, label %sw.bb.4901
    i32 3, label %sw.bb.4901
    i32 4, label %sw.bb.4901
  ]

sw.bb.4901:                                       ; preds = %while.end.4890, %while.end.4890, %while.end.4890
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4903

sw.default.4902:                                  ; preds = %while.end.4890
  br label %sw.epilog.4903

sw.epilog.4903:                                   ; preds = %sw.default.4902, %sw.bb.4901
  %2917 = load i32*, i32** %volatile_data4897, align 8
  %2918 = load volatile i32, i32* %2917, align 4
  store i32 %2918, i32* %result4895, align 4
  %2919 = load i32, i32* %order4900, align 4
  switch i32 %2919, label %sw.default.4905 [
    i32 1, label %sw.bb.4904
    i32 3, label %sw.bb.4904
    i32 4, label %sw.bb.4904
  ]

sw.bb.4904:                                       ; preds = %sw.epilog.4903, %sw.epilog.4903, %sw.epilog.4903
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4906

sw.default.4905:                                  ; preds = %sw.epilog.4903
  br label %sw.epilog.4906

sw.epilog.4906:                                   ; preds = %sw.default.4905, %sw.bb.4904
  %2920 = load i32, i32* %result4895, align 4
  store i32 %2920, i32* %tmp4907
  %2921 = load i32, i32* %tmp4907
  %tobool4908 = icmp ne i32 %2921, 0
  br i1 %tobool4908, label %if.end.4921, label %if.then.4909

if.then.4909:                                     ; preds = %sw.epilog.4906
  %2922 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool4910 = icmp ne i32 %2922, 0
  br i1 %tobool4910, label %if.end.4920, label %if.then.4911

if.then.4911:                                     ; preds = %if.then.4909
  %2923 = load i8*, i8** %next_instr, align 8
  %2924 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast4912 = ptrtoint i8* %2923 to i64
  %sub.ptr.rhs.cast4913 = ptrtoint i8* %2924 to i64
  %sub.ptr.sub4914 = sub i64 %sub.ptr.lhs.cast4912, %sub.ptr.rhs.cast4913
  %conv4915 = trunc i64 %sub.ptr.sub4914 to i32
  %2925 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti4916 = getelementptr inbounds %struct._frame, %struct._frame* %2925, i32 0, i32 13
  store i32 %conv4915, i32* %f_lasti4916, align 4
  %2926 = load i8*, i8** %next_instr, align 8
  %incdec.ptr4917 = getelementptr i8, i8* %2926, i32 1
  store i8* %incdec.ptr4917, i8** %next_instr, align 8
  %2927 = load i8, i8* %2926, align 1
  %idxprom4918 = zext i8 %2927 to i64
  %arrayidx4919 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom4918
  %2928 = load i8*, i8** %arrayidx4919, align 8
  br label %indirectgoto

if.end.4920:                                      ; preds = %if.then.4909
  br label %fast_next_opcode

if.end.4921:                                      ; preds = %sw.epilog.4906
  br label %for.cond

TARGET_BUILD_SET:                                 ; preds = %indirectgoto
  store i32 104, i32* %opcode, align 4
  %2929 = load i8*, i8** %next_instr, align 8
  %add.ptr4922 = getelementptr i8, i8* %2929, i64 2
  store i8* %add.ptr4922, i8** %next_instr, align 8
  %2930 = load i8*, i8** %next_instr, align 8
  %arrayidx4923 = getelementptr i8, i8* %2930, i64 -1
  %2931 = load i8, i8* %arrayidx4923, align 1
  %conv4924 = zext i8 %2931 to i32
  %shl4925 = shl i32 %conv4924, 8
  %2932 = load i8*, i8** %next_instr, align 8
  %arrayidx4926 = getelementptr i8, i8* %2932, i64 -2
  %2933 = load i8, i8* %arrayidx4926, align 1
  %conv4927 = zext i8 %2933 to i32
  %add4928 = add i32 %shl4925, %conv4927
  store i32 %add4928, i32* %oparg, align 4
  br label %sw.bb.4929

sw.bb.4929:                                       ; preds = %dispatch_opcode, %TARGET_BUILD_SET
  %call4932 = call %struct._object* @PySet_New(%struct._object* null)
  store %struct._object* %call4932, %struct._object** %set4931, align 8
  store i32 0, i32* %err4934, align 4
  %2934 = load %struct._object*, %struct._object** %set4931, align 8
  %cmp4935 = icmp eq %struct._object* %2934, null
  br i1 %cmp4935, label %if.then.4937, label %if.end.4938

if.then.4937:                                     ; preds = %sw.bb.4929
  br label %error

if.end.4938:                                      ; preds = %sw.bb.4929
  br label %while.cond.4939

while.cond.4939:                                  ; preds = %do.end.4964, %if.end.4938
  %2935 = load i32, i32* %oparg, align 4
  %dec4940 = add i32 %2935, -1
  store i32 %dec4940, i32* %oparg, align 4
  %cmp4941 = icmp sge i32 %dec4940, 0
  br i1 %cmp4941, label %while.body.4943, label %while.end.4965

while.body.4943:                                  ; preds = %while.cond.4939
  %2936 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4946 = getelementptr %struct._object*, %struct._object** %2936, i32 -1
  store %struct._object** %incdec.ptr4946, %struct._object*** %stack_pointer, align 8
  %2937 = load %struct._object*, %struct._object** %incdec.ptr4946, align 8
  store %struct._object* %2937, %struct._object** %item4945, align 8
  %2938 = load i32, i32* %err4934, align 4
  %cmp4947 = icmp eq i32 %2938, 0
  br i1 %cmp4947, label %if.then.4949, label %if.end.4951

if.then.4949:                                     ; preds = %while.body.4943
  %2939 = load %struct._object*, %struct._object** %set4931, align 8
  %2940 = load %struct._object*, %struct._object** %item4945, align 8
  %call4950 = call i32 @PySet_Add(%struct._object* %2939, %struct._object* %2940)
  store i32 %call4950, i32* %err4934, align 4
  br label %if.end.4951

if.end.4951:                                      ; preds = %if.then.4949, %while.body.4943
  br label %do.body.4952

do.body.4952:                                     ; preds = %if.end.4951
  %2941 = load %struct._object*, %struct._object** %item4945, align 8
  store %struct._object* %2941, %struct._object** %_py_decref_tmp4954, align 8
  %2942 = load %struct._object*, %struct._object** %_py_decref_tmp4954, align 8
  %ob_refcnt4955 = getelementptr inbounds %struct._object, %struct._object* %2942, i32 0, i32 0
  %2943 = load i64, i64* %ob_refcnt4955, align 8
  %dec4956 = add i64 %2943, -1
  store i64 %dec4956, i64* %ob_refcnt4955, align 8
  %cmp4957 = icmp ne i64 %dec4956, 0
  br i1 %cmp4957, label %if.then.4959, label %if.else.4960

if.then.4959:                                     ; preds = %do.body.4952
  br label %if.end.4963

if.else.4960:                                     ; preds = %do.body.4952
  %2944 = load %struct._object*, %struct._object** %_py_decref_tmp4954, align 8
  %ob_type4961 = getelementptr inbounds %struct._object, %struct._object* %2944, i32 0, i32 1
  %2945 = load %struct._typeobject*, %struct._typeobject** %ob_type4961, align 8
  %tp_dealloc4962 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2945, i32 0, i32 4
  %2946 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc4962, align 8
  %2947 = load %struct._object*, %struct._object** %_py_decref_tmp4954, align 8
  call void %2946(%struct._object* %2947)
  br label %if.end.4963

if.end.4963:                                      ; preds = %if.else.4960, %if.then.4959
  br label %do.end.4964

do.end.4964:                                      ; preds = %if.end.4963
  br label %while.cond.4939

while.end.4965:                                   ; preds = %while.cond.4939
  %2948 = load i32, i32* %err4934, align 4
  %cmp4966 = icmp ne i32 %2948, 0
  br i1 %cmp4966, label %if.then.4968, label %if.end.4982

if.then.4968:                                     ; preds = %while.end.4965
  br label %do.body.4969

do.body.4969:                                     ; preds = %if.then.4968
  %2949 = load %struct._object*, %struct._object** %set4931, align 8
  store %struct._object* %2949, %struct._object** %_py_decref_tmp4971, align 8
  %2950 = load %struct._object*, %struct._object** %_py_decref_tmp4971, align 8
  %ob_refcnt4972 = getelementptr inbounds %struct._object, %struct._object* %2950, i32 0, i32 0
  %2951 = load i64, i64* %ob_refcnt4972, align 8
  %dec4973 = add i64 %2951, -1
  store i64 %dec4973, i64* %ob_refcnt4972, align 8
  %cmp4974 = icmp ne i64 %dec4973, 0
  br i1 %cmp4974, label %if.then.4976, label %if.else.4977

if.then.4976:                                     ; preds = %do.body.4969
  br label %if.end.4980

if.else.4977:                                     ; preds = %do.body.4969
  %2952 = load %struct._object*, %struct._object** %_py_decref_tmp4971, align 8
  %ob_type4978 = getelementptr inbounds %struct._object, %struct._object* %2952, i32 0, i32 1
  %2953 = load %struct._typeobject*, %struct._typeobject** %ob_type4978, align 8
  %tp_dealloc4979 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2953, i32 0, i32 4
  %2954 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc4979, align 8
  %2955 = load %struct._object*, %struct._object** %_py_decref_tmp4971, align 8
  call void %2954(%struct._object* %2955)
  br label %if.end.4980

if.end.4980:                                      ; preds = %if.else.4977, %if.then.4976
  br label %do.end.4981

do.end.4981:                                      ; preds = %if.end.4980
  br label %error

if.end.4982:                                      ; preds = %while.end.4965
  %2956 = load %struct._object*, %struct._object** %set4931, align 8
  %2957 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr4983 = getelementptr %struct._object*, %struct._object** %2957, i32 1
  store %struct._object** %incdec.ptr4983, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2956, %struct._object** %2957, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val4985, align 8
  %2958 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4985, align 8
  %_value4990 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2958, i32 0, i32 0
  store i32* %_value4990, i32** %volatile_data4989, align 8
  store i32 0, i32* %order4992, align 4
  %2959 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val4985, align 8
  %2960 = bitcast %struct._Py_atomic_int* %2959 to i8*
  %2961 = load i32, i32* %order4992, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2960, i32 %2961)
  %2962 = load i32, i32* %order4992, align 4
  switch i32 %2962, label %sw.default.4994 [
    i32 2, label %sw.bb.4993
    i32 3, label %sw.bb.4993
    i32 4, label %sw.bb.4993
  ]

sw.bb.4993:                                       ; preds = %if.end.4982, %if.end.4982, %if.end.4982
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.4995

sw.default.4994:                                  ; preds = %if.end.4982
  br label %sw.epilog.4995

sw.epilog.4995:                                   ; preds = %sw.default.4994, %sw.bb.4993
  %2963 = load i32*, i32** %volatile_data4989, align 8
  %2964 = load volatile i32, i32* %2963, align 4
  store i32 %2964, i32* %result4987, align 4
  %2965 = load i32, i32* %order4992, align 4
  switch i32 %2965, label %sw.default.4997 [
    i32 1, label %sw.bb.4996
    i32 3, label %sw.bb.4996
    i32 4, label %sw.bb.4996
  ]

sw.bb.4996:                                       ; preds = %sw.epilog.4995, %sw.epilog.4995, %sw.epilog.4995
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.4998

sw.default.4997:                                  ; preds = %sw.epilog.4995
  br label %sw.epilog.4998

sw.epilog.4998:                                   ; preds = %sw.default.4997, %sw.bb.4996
  %2966 = load i32, i32* %result4987, align 4
  store i32 %2966, i32* %tmp4999
  %2967 = load i32, i32* %tmp4999
  %tobool5000 = icmp ne i32 %2967, 0
  br i1 %tobool5000, label %if.end.5013, label %if.then.5001

if.then.5001:                                     ; preds = %sw.epilog.4998
  %2968 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5002 = icmp ne i32 %2968, 0
  br i1 %tobool5002, label %if.end.5012, label %if.then.5003

if.then.5003:                                     ; preds = %if.then.5001
  %2969 = load i8*, i8** %next_instr, align 8
  %2970 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5004 = ptrtoint i8* %2969 to i64
  %sub.ptr.rhs.cast5005 = ptrtoint i8* %2970 to i64
  %sub.ptr.sub5006 = sub i64 %sub.ptr.lhs.cast5004, %sub.ptr.rhs.cast5005
  %conv5007 = trunc i64 %sub.ptr.sub5006 to i32
  %2971 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5008 = getelementptr inbounds %struct._frame, %struct._frame* %2971, i32 0, i32 13
  store i32 %conv5007, i32* %f_lasti5008, align 4
  %2972 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5009 = getelementptr i8, i8* %2972, i32 1
  store i8* %incdec.ptr5009, i8** %next_instr, align 8
  %2973 = load i8, i8* %2972, align 1
  %idxprom5010 = zext i8 %2973 to i64
  %arrayidx5011 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5010
  %2974 = load i8*, i8** %arrayidx5011, align 8
  br label %indirectgoto

if.end.5012:                                      ; preds = %if.then.5001
  br label %fast_next_opcode

if.end.5013:                                      ; preds = %sw.epilog.4998
  br label %for.cond

TARGET_BUILD_MAP:                                 ; preds = %indirectgoto
  store i32 105, i32* %opcode, align 4
  %2975 = load i8*, i8** %next_instr, align 8
  %add.ptr5014 = getelementptr i8, i8* %2975, i64 2
  store i8* %add.ptr5014, i8** %next_instr, align 8
  %2976 = load i8*, i8** %next_instr, align 8
  %arrayidx5015 = getelementptr i8, i8* %2976, i64 -1
  %2977 = load i8, i8* %arrayidx5015, align 1
  %conv5016 = zext i8 %2977 to i32
  %shl5017 = shl i32 %conv5016, 8
  %2978 = load i8*, i8** %next_instr, align 8
  %arrayidx5018 = getelementptr i8, i8* %2978, i64 -2
  %2979 = load i8, i8* %arrayidx5018, align 1
  %conv5019 = zext i8 %2979 to i32
  %add5020 = add i32 %shl5017, %conv5019
  store i32 %add5020, i32* %oparg, align 4
  br label %sw.bb.5021

sw.bb.5021:                                       ; preds = %dispatch_opcode, %TARGET_BUILD_MAP
  %2980 = load i32, i32* %oparg, align 4
  %conv5023 = sext i32 %2980 to i64
  %call5024 = call %struct._object* @_PyDict_NewPresized(i64 %conv5023)
  store %struct._object* %call5024, %struct._object** %map, align 8
  %2981 = load %struct._object*, %struct._object** %map, align 8
  %cmp5025 = icmp eq %struct._object* %2981, null
  br i1 %cmp5025, label %if.then.5027, label %if.end.5028

if.then.5027:                                     ; preds = %sw.bb.5021
  br label %error

if.end.5028:                                      ; preds = %sw.bb.5021
  %2982 = load %struct._object*, %struct._object** %map, align 8
  %2983 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr5029 = getelementptr %struct._object*, %struct._object** %2983, i32 1
  store %struct._object** %incdec.ptr5029, %struct._object*** %stack_pointer, align 8
  store %struct._object* %2982, %struct._object** %2983, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5031, align 8
  %2984 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5031, align 8
  %_value5036 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %2984, i32 0, i32 0
  store i32* %_value5036, i32** %volatile_data5035, align 8
  store i32 0, i32* %order5038, align 4
  %2985 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5031, align 8
  %2986 = bitcast %struct._Py_atomic_int* %2985 to i8*
  %2987 = load i32, i32* %order5038, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2986, i32 %2987)
  %2988 = load i32, i32* %order5038, align 4
  switch i32 %2988, label %sw.default.5040 [
    i32 2, label %sw.bb.5039
    i32 3, label %sw.bb.5039
    i32 4, label %sw.bb.5039
  ]

sw.bb.5039:                                       ; preds = %if.end.5028, %if.end.5028, %if.end.5028
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5041

sw.default.5040:                                  ; preds = %if.end.5028
  br label %sw.epilog.5041

sw.epilog.5041:                                   ; preds = %sw.default.5040, %sw.bb.5039
  %2989 = load i32*, i32** %volatile_data5035, align 8
  %2990 = load volatile i32, i32* %2989, align 4
  store i32 %2990, i32* %result5033, align 4
  %2991 = load i32, i32* %order5038, align 4
  switch i32 %2991, label %sw.default.5043 [
    i32 1, label %sw.bb.5042
    i32 3, label %sw.bb.5042
    i32 4, label %sw.bb.5042
  ]

sw.bb.5042:                                       ; preds = %sw.epilog.5041, %sw.epilog.5041, %sw.epilog.5041
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5044

sw.default.5043:                                  ; preds = %sw.epilog.5041
  br label %sw.epilog.5044

sw.epilog.5044:                                   ; preds = %sw.default.5043, %sw.bb.5042
  %2992 = load i32, i32* %result5033, align 4
  store i32 %2992, i32* %tmp5045
  %2993 = load i32, i32* %tmp5045
  %tobool5046 = icmp ne i32 %2993, 0
  br i1 %tobool5046, label %if.end.5059, label %if.then.5047

if.then.5047:                                     ; preds = %sw.epilog.5044
  %2994 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5048 = icmp ne i32 %2994, 0
  br i1 %tobool5048, label %if.end.5058, label %if.then.5049

if.then.5049:                                     ; preds = %if.then.5047
  %2995 = load i8*, i8** %next_instr, align 8
  %2996 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5050 = ptrtoint i8* %2995 to i64
  %sub.ptr.rhs.cast5051 = ptrtoint i8* %2996 to i64
  %sub.ptr.sub5052 = sub i64 %sub.ptr.lhs.cast5050, %sub.ptr.rhs.cast5051
  %conv5053 = trunc i64 %sub.ptr.sub5052 to i32
  %2997 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5054 = getelementptr inbounds %struct._frame, %struct._frame* %2997, i32 0, i32 13
  store i32 %conv5053, i32* %f_lasti5054, align 4
  %2998 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5055 = getelementptr i8, i8* %2998, i32 1
  store i8* %incdec.ptr5055, i8** %next_instr, align 8
  %2999 = load i8, i8* %2998, align 1
  %idxprom5056 = zext i8 %2999 to i64
  %arrayidx5057 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5056
  %3000 = load i8*, i8** %arrayidx5057, align 8
  br label %indirectgoto

if.end.5058:                                      ; preds = %if.then.5047
  br label %fast_next_opcode

if.end.5059:                                      ; preds = %sw.epilog.5044
  br label %for.cond

TARGET_STORE_MAP:                                 ; preds = %indirectgoto
  store i32 54, i32* %opcode, align 4
  br label %sw.bb.5060

sw.bb.5060:                                       ; preds = %dispatch_opcode, %TARGET_STORE_MAP
  %3001 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5062 = getelementptr %struct._object*, %struct._object** %3001, i64 -1
  %3002 = load %struct._object*, %struct._object** %arrayidx5062, align 8
  store %struct._object* %3002, %struct._object** %key, align 8
  %3003 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5065 = getelementptr %struct._object*, %struct._object** %3003, i64 -2
  %3004 = load %struct._object*, %struct._object** %arrayidx5065, align 8
  store %struct._object* %3004, %struct._object** %value5064, align 8
  %3005 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5068 = getelementptr %struct._object*, %struct._object** %3005, i64 -3
  %3006 = load %struct._object*, %struct._object** %arrayidx5068, align 8
  store %struct._object* %3006, %struct._object** %map5067, align 8
  %3007 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr5071 = getelementptr %struct._object*, %struct._object** %3007, i64 -2
  store %struct._object** %add.ptr5071, %struct._object*** %stack_pointer, align 8
  %3008 = load %struct._object*, %struct._object** %map5067, align 8
  %3009 = load %struct._object*, %struct._object** %key, align 8
  %3010 = load %struct._object*, %struct._object** %value5064, align 8
  %call5072 = call i32 @PyDict_SetItem(%struct._object* %3008, %struct._object* %3009, %struct._object* %3010)
  store i32 %call5072, i32* %err5070, align 4
  br label %do.body.5073

do.body.5073:                                     ; preds = %sw.bb.5060
  %3011 = load %struct._object*, %struct._object** %value5064, align 8
  store %struct._object* %3011, %struct._object** %_py_decref_tmp5075, align 8
  %3012 = load %struct._object*, %struct._object** %_py_decref_tmp5075, align 8
  %ob_refcnt5076 = getelementptr inbounds %struct._object, %struct._object* %3012, i32 0, i32 0
  %3013 = load i64, i64* %ob_refcnt5076, align 8
  %dec5077 = add i64 %3013, -1
  store i64 %dec5077, i64* %ob_refcnt5076, align 8
  %cmp5078 = icmp ne i64 %dec5077, 0
  br i1 %cmp5078, label %if.then.5080, label %if.else.5081

if.then.5080:                                     ; preds = %do.body.5073
  br label %if.end.5084

if.else.5081:                                     ; preds = %do.body.5073
  %3014 = load %struct._object*, %struct._object** %_py_decref_tmp5075, align 8
  %ob_type5082 = getelementptr inbounds %struct._object, %struct._object* %3014, i32 0, i32 1
  %3015 = load %struct._typeobject*, %struct._typeobject** %ob_type5082, align 8
  %tp_dealloc5083 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3015, i32 0, i32 4
  %3016 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5083, align 8
  %3017 = load %struct._object*, %struct._object** %_py_decref_tmp5075, align 8
  call void %3016(%struct._object* %3017)
  br label %if.end.5084

if.end.5084:                                      ; preds = %if.else.5081, %if.then.5080
  br label %do.end.5085

do.end.5085:                                      ; preds = %if.end.5084
  br label %do.body.5086

do.body.5086:                                     ; preds = %do.end.5085
  %3018 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %3018, %struct._object** %_py_decref_tmp5088, align 8
  %3019 = load %struct._object*, %struct._object** %_py_decref_tmp5088, align 8
  %ob_refcnt5089 = getelementptr inbounds %struct._object, %struct._object* %3019, i32 0, i32 0
  %3020 = load i64, i64* %ob_refcnt5089, align 8
  %dec5090 = add i64 %3020, -1
  store i64 %dec5090, i64* %ob_refcnt5089, align 8
  %cmp5091 = icmp ne i64 %dec5090, 0
  br i1 %cmp5091, label %if.then.5093, label %if.else.5094

if.then.5093:                                     ; preds = %do.body.5086
  br label %if.end.5097

if.else.5094:                                     ; preds = %do.body.5086
  %3021 = load %struct._object*, %struct._object** %_py_decref_tmp5088, align 8
  %ob_type5095 = getelementptr inbounds %struct._object, %struct._object* %3021, i32 0, i32 1
  %3022 = load %struct._typeobject*, %struct._typeobject** %ob_type5095, align 8
  %tp_dealloc5096 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3022, i32 0, i32 4
  %3023 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5096, align 8
  %3024 = load %struct._object*, %struct._object** %_py_decref_tmp5088, align 8
  call void %3023(%struct._object* %3024)
  br label %if.end.5097

if.end.5097:                                      ; preds = %if.else.5094, %if.then.5093
  br label %do.end.5098

do.end.5098:                                      ; preds = %if.end.5097
  %3025 = load i32, i32* %err5070, align 4
  %cmp5099 = icmp ne i32 %3025, 0
  br i1 %cmp5099, label %if.then.5101, label %if.end.5102

if.then.5101:                                     ; preds = %do.end.5098
  br label %error

if.end.5102:                                      ; preds = %do.end.5098
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5104, align 8
  %3026 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5104, align 8
  %_value5109 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3026, i32 0, i32 0
  store i32* %_value5109, i32** %volatile_data5108, align 8
  store i32 0, i32* %order5111, align 4
  %3027 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5104, align 8
  %3028 = bitcast %struct._Py_atomic_int* %3027 to i8*
  %3029 = load i32, i32* %order5111, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3028, i32 %3029)
  %3030 = load i32, i32* %order5111, align 4
  switch i32 %3030, label %sw.default.5113 [
    i32 2, label %sw.bb.5112
    i32 3, label %sw.bb.5112
    i32 4, label %sw.bb.5112
  ]

sw.bb.5112:                                       ; preds = %if.end.5102, %if.end.5102, %if.end.5102
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5114

sw.default.5113:                                  ; preds = %if.end.5102
  br label %sw.epilog.5114

sw.epilog.5114:                                   ; preds = %sw.default.5113, %sw.bb.5112
  %3031 = load i32*, i32** %volatile_data5108, align 8
  %3032 = load volatile i32, i32* %3031, align 4
  store i32 %3032, i32* %result5106, align 4
  %3033 = load i32, i32* %order5111, align 4
  switch i32 %3033, label %sw.default.5116 [
    i32 1, label %sw.bb.5115
    i32 3, label %sw.bb.5115
    i32 4, label %sw.bb.5115
  ]

sw.bb.5115:                                       ; preds = %sw.epilog.5114, %sw.epilog.5114, %sw.epilog.5114
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5117

sw.default.5116:                                  ; preds = %sw.epilog.5114
  br label %sw.epilog.5117

sw.epilog.5117:                                   ; preds = %sw.default.5116, %sw.bb.5115
  %3034 = load i32, i32* %result5106, align 4
  store i32 %3034, i32* %tmp5118
  %3035 = load i32, i32* %tmp5118
  %tobool5119 = icmp ne i32 %3035, 0
  br i1 %tobool5119, label %if.end.5132, label %if.then.5120

if.then.5120:                                     ; preds = %sw.epilog.5117
  %3036 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5121 = icmp ne i32 %3036, 0
  br i1 %tobool5121, label %if.end.5131, label %if.then.5122

if.then.5122:                                     ; preds = %if.then.5120
  %3037 = load i8*, i8** %next_instr, align 8
  %3038 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5123 = ptrtoint i8* %3037 to i64
  %sub.ptr.rhs.cast5124 = ptrtoint i8* %3038 to i64
  %sub.ptr.sub5125 = sub i64 %sub.ptr.lhs.cast5123, %sub.ptr.rhs.cast5124
  %conv5126 = trunc i64 %sub.ptr.sub5125 to i32
  %3039 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5127 = getelementptr inbounds %struct._frame, %struct._frame* %3039, i32 0, i32 13
  store i32 %conv5126, i32* %f_lasti5127, align 4
  %3040 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5128 = getelementptr i8, i8* %3040, i32 1
  store i8* %incdec.ptr5128, i8** %next_instr, align 8
  %3041 = load i8, i8* %3040, align 1
  %idxprom5129 = zext i8 %3041 to i64
  %arrayidx5130 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5129
  %3042 = load i8*, i8** %arrayidx5130, align 8
  br label %indirectgoto

if.end.5131:                                      ; preds = %if.then.5120
  br label %fast_next_opcode

if.end.5132:                                      ; preds = %sw.epilog.5117
  br label %for.cond

TARGET_MAP_ADD:                                   ; preds = %indirectgoto
  store i32 147, i32* %opcode, align 4
  %3043 = load i8*, i8** %next_instr, align 8
  %add.ptr5133 = getelementptr i8, i8* %3043, i64 2
  store i8* %add.ptr5133, i8** %next_instr, align 8
  %3044 = load i8*, i8** %next_instr, align 8
  %arrayidx5134 = getelementptr i8, i8* %3044, i64 -1
  %3045 = load i8, i8* %arrayidx5134, align 1
  %conv5135 = zext i8 %3045 to i32
  %shl5136 = shl i32 %conv5135, 8
  %3046 = load i8*, i8** %next_instr, align 8
  %arrayidx5137 = getelementptr i8, i8* %3046, i64 -2
  %3047 = load i8, i8* %arrayidx5137, align 1
  %conv5138 = zext i8 %3047 to i32
  %add5139 = add i32 %shl5136, %conv5138
  store i32 %add5139, i32* %oparg, align 4
  br label %sw.bb.5140

sw.bb.5140:                                       ; preds = %dispatch_opcode, %TARGET_MAP_ADD
  %3048 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5143 = getelementptr %struct._object*, %struct._object** %3048, i64 -1
  %3049 = load %struct._object*, %struct._object** %arrayidx5143, align 8
  store %struct._object* %3049, %struct._object** %key5142, align 8
  %3050 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5146 = getelementptr %struct._object*, %struct._object** %3050, i64 -2
  %3051 = load %struct._object*, %struct._object** %arrayidx5146, align 8
  store %struct._object* %3051, %struct._object** %value5145, align 8
  %3052 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr5151 = getelementptr %struct._object*, %struct._object** %3052, i64 -2
  store %struct._object** %add.ptr5151, %struct._object*** %stack_pointer, align 8
  %3053 = load i32, i32* %oparg, align 4
  %sub5152 = sub i32 0, %3053
  %idxprom5153 = sext i32 %sub5152 to i64
  %3054 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5154 = getelementptr %struct._object*, %struct._object** %3054, i64 %idxprom5153
  %3055 = load %struct._object*, %struct._object** %arrayidx5154, align 8
  store %struct._object* %3055, %struct._object** %map5148, align 8
  %3056 = load %struct._object*, %struct._object** %map5148, align 8
  %3057 = load %struct._object*, %struct._object** %key5142, align 8
  %3058 = load %struct._object*, %struct._object** %value5145, align 8
  %call5155 = call i32 @PyDict_SetItem(%struct._object* %3056, %struct._object* %3057, %struct._object* %3058)
  store i32 %call5155, i32* %err5150, align 4
  br label %do.body.5156

do.body.5156:                                     ; preds = %sw.bb.5140
  %3059 = load %struct._object*, %struct._object** %value5145, align 8
  store %struct._object* %3059, %struct._object** %_py_decref_tmp5158, align 8
  %3060 = load %struct._object*, %struct._object** %_py_decref_tmp5158, align 8
  %ob_refcnt5159 = getelementptr inbounds %struct._object, %struct._object* %3060, i32 0, i32 0
  %3061 = load i64, i64* %ob_refcnt5159, align 8
  %dec5160 = add i64 %3061, -1
  store i64 %dec5160, i64* %ob_refcnt5159, align 8
  %cmp5161 = icmp ne i64 %dec5160, 0
  br i1 %cmp5161, label %if.then.5163, label %if.else.5164

if.then.5163:                                     ; preds = %do.body.5156
  br label %if.end.5167

if.else.5164:                                     ; preds = %do.body.5156
  %3062 = load %struct._object*, %struct._object** %_py_decref_tmp5158, align 8
  %ob_type5165 = getelementptr inbounds %struct._object, %struct._object* %3062, i32 0, i32 1
  %3063 = load %struct._typeobject*, %struct._typeobject** %ob_type5165, align 8
  %tp_dealloc5166 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3063, i32 0, i32 4
  %3064 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5166, align 8
  %3065 = load %struct._object*, %struct._object** %_py_decref_tmp5158, align 8
  call void %3064(%struct._object* %3065)
  br label %if.end.5167

if.end.5167:                                      ; preds = %if.else.5164, %if.then.5163
  br label %do.end.5168

do.end.5168:                                      ; preds = %if.end.5167
  br label %do.body.5169

do.body.5169:                                     ; preds = %do.end.5168
  %3066 = load %struct._object*, %struct._object** %key5142, align 8
  store %struct._object* %3066, %struct._object** %_py_decref_tmp5171, align 8
  %3067 = load %struct._object*, %struct._object** %_py_decref_tmp5171, align 8
  %ob_refcnt5172 = getelementptr inbounds %struct._object, %struct._object* %3067, i32 0, i32 0
  %3068 = load i64, i64* %ob_refcnt5172, align 8
  %dec5173 = add i64 %3068, -1
  store i64 %dec5173, i64* %ob_refcnt5172, align 8
  %cmp5174 = icmp ne i64 %dec5173, 0
  br i1 %cmp5174, label %if.then.5176, label %if.else.5177

if.then.5176:                                     ; preds = %do.body.5169
  br label %if.end.5180

if.else.5177:                                     ; preds = %do.body.5169
  %3069 = load %struct._object*, %struct._object** %_py_decref_tmp5171, align 8
  %ob_type5178 = getelementptr inbounds %struct._object, %struct._object* %3069, i32 0, i32 1
  %3070 = load %struct._typeobject*, %struct._typeobject** %ob_type5178, align 8
  %tp_dealloc5179 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3070, i32 0, i32 4
  %3071 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5179, align 8
  %3072 = load %struct._object*, %struct._object** %_py_decref_tmp5171, align 8
  call void %3071(%struct._object* %3072)
  br label %if.end.5180

if.end.5180:                                      ; preds = %if.else.5177, %if.then.5176
  br label %do.end.5181

do.end.5181:                                      ; preds = %if.end.5180
  %3073 = load i32, i32* %err5150, align 4
  %cmp5182 = icmp ne i32 %3073, 0
  br i1 %cmp5182, label %if.then.5184, label %if.end.5185

if.then.5184:                                     ; preds = %do.end.5181
  br label %error

if.end.5185:                                      ; preds = %do.end.5181
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5187, align 8
  %3074 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5187, align 8
  %_value5192 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3074, i32 0, i32 0
  store i32* %_value5192, i32** %volatile_data5191, align 8
  store i32 0, i32* %order5194, align 4
  %3075 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5187, align 8
  %3076 = bitcast %struct._Py_atomic_int* %3075 to i8*
  %3077 = load i32, i32* %order5194, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3076, i32 %3077)
  %3078 = load i32, i32* %order5194, align 4
  switch i32 %3078, label %sw.default.5196 [
    i32 2, label %sw.bb.5195
    i32 3, label %sw.bb.5195
    i32 4, label %sw.bb.5195
  ]

sw.bb.5195:                                       ; preds = %if.end.5185, %if.end.5185, %if.end.5185
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5197

sw.default.5196:                                  ; preds = %if.end.5185
  br label %sw.epilog.5197

sw.epilog.5197:                                   ; preds = %sw.default.5196, %sw.bb.5195
  %3079 = load i32*, i32** %volatile_data5191, align 8
  %3080 = load volatile i32, i32* %3079, align 4
  store i32 %3080, i32* %result5189, align 4
  %3081 = load i32, i32* %order5194, align 4
  switch i32 %3081, label %sw.default.5199 [
    i32 1, label %sw.bb.5198
    i32 3, label %sw.bb.5198
    i32 4, label %sw.bb.5198
  ]

sw.bb.5198:                                       ; preds = %sw.epilog.5197, %sw.epilog.5197, %sw.epilog.5197
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5200

sw.default.5199:                                  ; preds = %sw.epilog.5197
  br label %sw.epilog.5200

sw.epilog.5200:                                   ; preds = %sw.default.5199, %sw.bb.5198
  %3082 = load i32, i32* %result5189, align 4
  store i32 %3082, i32* %tmp5201
  %3083 = load i32, i32* %tmp5201
  %tobool5202 = icmp ne i32 %3083, 0
  br i1 %tobool5202, label %if.end.5215, label %if.then.5203

if.then.5203:                                     ; preds = %sw.epilog.5200
  %3084 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5204 = icmp ne i32 %3084, 0
  br i1 %tobool5204, label %if.end.5214, label %if.then.5205

if.then.5205:                                     ; preds = %if.then.5203
  %3085 = load i8*, i8** %next_instr, align 8
  %3086 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5206 = ptrtoint i8* %3085 to i64
  %sub.ptr.rhs.cast5207 = ptrtoint i8* %3086 to i64
  %sub.ptr.sub5208 = sub i64 %sub.ptr.lhs.cast5206, %sub.ptr.rhs.cast5207
  %conv5209 = trunc i64 %sub.ptr.sub5208 to i32
  %3087 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5210 = getelementptr inbounds %struct._frame, %struct._frame* %3087, i32 0, i32 13
  store i32 %conv5209, i32* %f_lasti5210, align 4
  %3088 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5211 = getelementptr i8, i8* %3088, i32 1
  store i8* %incdec.ptr5211, i8** %next_instr, align 8
  %3089 = load i8, i8* %3088, align 1
  %idxprom5212 = zext i8 %3089 to i64
  %arrayidx5213 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5212
  %3090 = load i8*, i8** %arrayidx5213, align 8
  br label %indirectgoto

if.end.5214:                                      ; preds = %if.then.5203
  br label %fast_next_opcode

if.end.5215:                                      ; preds = %sw.epilog.5200
  br label %for.cond

TARGET_LOAD_ATTR:                                 ; preds = %indirectgoto
  store i32 106, i32* %opcode, align 4
  %3091 = load i8*, i8** %next_instr, align 8
  %add.ptr5216 = getelementptr i8, i8* %3091, i64 2
  store i8* %add.ptr5216, i8** %next_instr, align 8
  %3092 = load i8*, i8** %next_instr, align 8
  %arrayidx5217 = getelementptr i8, i8* %3092, i64 -1
  %3093 = load i8, i8* %arrayidx5217, align 1
  %conv5218 = zext i8 %3093 to i32
  %shl5219 = shl i32 %conv5218, 8
  %3094 = load i8*, i8** %next_instr, align 8
  %arrayidx5220 = getelementptr i8, i8* %3094, i64 -2
  %3095 = load i8, i8* %arrayidx5220, align 1
  %conv5221 = zext i8 %3095 to i32
  %add5222 = add i32 %shl5219, %conv5221
  store i32 %add5222, i32* %oparg, align 4
  br label %sw.bb.5223

sw.bb.5223:                                       ; preds = %dispatch_opcode, %TARGET_LOAD_ATTR
  %3096 = load i32, i32* %oparg, align 4
  %idxprom5226 = sext i32 %3096 to i64
  %3097 = load %struct._object*, %struct._object** %names, align 8
  %3098 = bitcast %struct._object* %3097 to %struct.PyTupleObject*
  %ob_item5227 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %3098, i32 0, i32 1
  %arrayidx5228 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item5227, i32 0, i64 %idxprom5226
  %3099 = load %struct._object*, %struct._object** %arrayidx5228, align 8
  store %struct._object* %3099, %struct._object** %name5225, align 8
  %3100 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5231 = getelementptr %struct._object*, %struct._object** %3100, i64 -1
  %3101 = load %struct._object*, %struct._object** %arrayidx5231, align 8
  store %struct._object* %3101, %struct._object** %owner5230, align 8
  %3102 = load %struct._object*, %struct._object** %owner5230, align 8
  %3103 = load %struct._object*, %struct._object** %name5225, align 8
  %call5234 = call %struct._object* @PyObject_GetAttr(%struct._object* %3102, %struct._object* %3103)
  store %struct._object* %call5234, %struct._object** %res5233, align 8
  br label %do.body.5235

do.body.5235:                                     ; preds = %sw.bb.5223
  %3104 = load %struct._object*, %struct._object** %owner5230, align 8
  store %struct._object* %3104, %struct._object** %_py_decref_tmp5237, align 8
  %3105 = load %struct._object*, %struct._object** %_py_decref_tmp5237, align 8
  %ob_refcnt5238 = getelementptr inbounds %struct._object, %struct._object* %3105, i32 0, i32 0
  %3106 = load i64, i64* %ob_refcnt5238, align 8
  %dec5239 = add i64 %3106, -1
  store i64 %dec5239, i64* %ob_refcnt5238, align 8
  %cmp5240 = icmp ne i64 %dec5239, 0
  br i1 %cmp5240, label %if.then.5242, label %if.else.5243

if.then.5242:                                     ; preds = %do.body.5235
  br label %if.end.5246

if.else.5243:                                     ; preds = %do.body.5235
  %3107 = load %struct._object*, %struct._object** %_py_decref_tmp5237, align 8
  %ob_type5244 = getelementptr inbounds %struct._object, %struct._object* %3107, i32 0, i32 1
  %3108 = load %struct._typeobject*, %struct._typeobject** %ob_type5244, align 8
  %tp_dealloc5245 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3108, i32 0, i32 4
  %3109 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5245, align 8
  %3110 = load %struct._object*, %struct._object** %_py_decref_tmp5237, align 8
  call void %3109(%struct._object* %3110)
  br label %if.end.5246

if.end.5246:                                      ; preds = %if.else.5243, %if.then.5242
  br label %do.end.5247

do.end.5247:                                      ; preds = %if.end.5246
  %3111 = load %struct._object*, %struct._object** %res5233, align 8
  %3112 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5248 = getelementptr %struct._object*, %struct._object** %3112, i64 -1
  store %struct._object* %3111, %struct._object** %arrayidx5248, align 8
  %3113 = load %struct._object*, %struct._object** %res5233, align 8
  %cmp5249 = icmp eq %struct._object* %3113, null
  br i1 %cmp5249, label %if.then.5251, label %if.end.5252

if.then.5251:                                     ; preds = %do.end.5247
  br label %error

if.end.5252:                                      ; preds = %do.end.5247
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5254, align 8
  %3114 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5254, align 8
  %_value5259 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3114, i32 0, i32 0
  store i32* %_value5259, i32** %volatile_data5258, align 8
  store i32 0, i32* %order5261, align 4
  %3115 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5254, align 8
  %3116 = bitcast %struct._Py_atomic_int* %3115 to i8*
  %3117 = load i32, i32* %order5261, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3116, i32 %3117)
  %3118 = load i32, i32* %order5261, align 4
  switch i32 %3118, label %sw.default.5263 [
    i32 2, label %sw.bb.5262
    i32 3, label %sw.bb.5262
    i32 4, label %sw.bb.5262
  ]

sw.bb.5262:                                       ; preds = %if.end.5252, %if.end.5252, %if.end.5252
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5264

sw.default.5263:                                  ; preds = %if.end.5252
  br label %sw.epilog.5264

sw.epilog.5264:                                   ; preds = %sw.default.5263, %sw.bb.5262
  %3119 = load i32*, i32** %volatile_data5258, align 8
  %3120 = load volatile i32, i32* %3119, align 4
  store i32 %3120, i32* %result5256, align 4
  %3121 = load i32, i32* %order5261, align 4
  switch i32 %3121, label %sw.default.5266 [
    i32 1, label %sw.bb.5265
    i32 3, label %sw.bb.5265
    i32 4, label %sw.bb.5265
  ]

sw.bb.5265:                                       ; preds = %sw.epilog.5264, %sw.epilog.5264, %sw.epilog.5264
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5267

sw.default.5266:                                  ; preds = %sw.epilog.5264
  br label %sw.epilog.5267

sw.epilog.5267:                                   ; preds = %sw.default.5266, %sw.bb.5265
  %3122 = load i32, i32* %result5256, align 4
  store i32 %3122, i32* %tmp5268
  %3123 = load i32, i32* %tmp5268
  %tobool5269 = icmp ne i32 %3123, 0
  br i1 %tobool5269, label %if.end.5282, label %if.then.5270

if.then.5270:                                     ; preds = %sw.epilog.5267
  %3124 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5271 = icmp ne i32 %3124, 0
  br i1 %tobool5271, label %if.end.5281, label %if.then.5272

if.then.5272:                                     ; preds = %if.then.5270
  %3125 = load i8*, i8** %next_instr, align 8
  %3126 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5273 = ptrtoint i8* %3125 to i64
  %sub.ptr.rhs.cast5274 = ptrtoint i8* %3126 to i64
  %sub.ptr.sub5275 = sub i64 %sub.ptr.lhs.cast5273, %sub.ptr.rhs.cast5274
  %conv5276 = trunc i64 %sub.ptr.sub5275 to i32
  %3127 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5277 = getelementptr inbounds %struct._frame, %struct._frame* %3127, i32 0, i32 13
  store i32 %conv5276, i32* %f_lasti5277, align 4
  %3128 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5278 = getelementptr i8, i8* %3128, i32 1
  store i8* %incdec.ptr5278, i8** %next_instr, align 8
  %3129 = load i8, i8* %3128, align 1
  %idxprom5279 = zext i8 %3129 to i64
  %arrayidx5280 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5279
  %3130 = load i8*, i8** %arrayidx5280, align 8
  br label %indirectgoto

if.end.5281:                                      ; preds = %if.then.5270
  br label %fast_next_opcode

if.end.5282:                                      ; preds = %sw.epilog.5267
  br label %for.cond

TARGET_COMPARE_OP:                                ; preds = %indirectgoto
  store i32 107, i32* %opcode, align 4
  %3131 = load i8*, i8** %next_instr, align 8
  %add.ptr5283 = getelementptr i8, i8* %3131, i64 2
  store i8* %add.ptr5283, i8** %next_instr, align 8
  %3132 = load i8*, i8** %next_instr, align 8
  %arrayidx5284 = getelementptr i8, i8* %3132, i64 -1
  %3133 = load i8, i8* %arrayidx5284, align 1
  %conv5285 = zext i8 %3133 to i32
  %shl5286 = shl i32 %conv5285, 8
  %3134 = load i8*, i8** %next_instr, align 8
  %arrayidx5287 = getelementptr i8, i8* %3134, i64 -2
  %3135 = load i8, i8* %arrayidx5287, align 1
  %conv5288 = zext i8 %3135 to i32
  %add5289 = add i32 %shl5286, %conv5288
  store i32 %add5289, i32* %oparg, align 4
  br label %sw.bb.5290

sw.bb.5290:                                       ; preds = %dispatch_opcode, %TARGET_COMPARE_OP
  %3136 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr5293 = getelementptr %struct._object*, %struct._object** %3136, i32 -1
  store %struct._object** %incdec.ptr5293, %struct._object*** %stack_pointer, align 8
  %3137 = load %struct._object*, %struct._object** %incdec.ptr5293, align 8
  store %struct._object* %3137, %struct._object** %right5292, align 8
  %3138 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5296 = getelementptr %struct._object*, %struct._object** %3138, i64 -1
  %3139 = load %struct._object*, %struct._object** %arrayidx5296, align 8
  store %struct._object* %3139, %struct._object** %left5295, align 8
  %3140 = load i32, i32* %oparg, align 4
  %3141 = load %struct._object*, %struct._object** %left5295, align 8
  %3142 = load %struct._object*, %struct._object** %right5292, align 8
  %call5299 = call %struct._object* @cmp_outcome(i32 %3140, %struct._object* %3141, %struct._object* %3142)
  store %struct._object* %call5299, %struct._object** %res5298, align 8
  br label %do.body.5300

do.body.5300:                                     ; preds = %sw.bb.5290
  %3143 = load %struct._object*, %struct._object** %left5295, align 8
  store %struct._object* %3143, %struct._object** %_py_decref_tmp5302, align 8
  %3144 = load %struct._object*, %struct._object** %_py_decref_tmp5302, align 8
  %ob_refcnt5303 = getelementptr inbounds %struct._object, %struct._object* %3144, i32 0, i32 0
  %3145 = load i64, i64* %ob_refcnt5303, align 8
  %dec5304 = add i64 %3145, -1
  store i64 %dec5304, i64* %ob_refcnt5303, align 8
  %cmp5305 = icmp ne i64 %dec5304, 0
  br i1 %cmp5305, label %if.then.5307, label %if.else.5308

if.then.5307:                                     ; preds = %do.body.5300
  br label %if.end.5311

if.else.5308:                                     ; preds = %do.body.5300
  %3146 = load %struct._object*, %struct._object** %_py_decref_tmp5302, align 8
  %ob_type5309 = getelementptr inbounds %struct._object, %struct._object* %3146, i32 0, i32 1
  %3147 = load %struct._typeobject*, %struct._typeobject** %ob_type5309, align 8
  %tp_dealloc5310 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3147, i32 0, i32 4
  %3148 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5310, align 8
  %3149 = load %struct._object*, %struct._object** %_py_decref_tmp5302, align 8
  call void %3148(%struct._object* %3149)
  br label %if.end.5311

if.end.5311:                                      ; preds = %if.else.5308, %if.then.5307
  br label %do.end.5312

do.end.5312:                                      ; preds = %if.end.5311
  br label %do.body.5313

do.body.5313:                                     ; preds = %do.end.5312
  %3150 = load %struct._object*, %struct._object** %right5292, align 8
  store %struct._object* %3150, %struct._object** %_py_decref_tmp5315, align 8
  %3151 = load %struct._object*, %struct._object** %_py_decref_tmp5315, align 8
  %ob_refcnt5316 = getelementptr inbounds %struct._object, %struct._object* %3151, i32 0, i32 0
  %3152 = load i64, i64* %ob_refcnt5316, align 8
  %dec5317 = add i64 %3152, -1
  store i64 %dec5317, i64* %ob_refcnt5316, align 8
  %cmp5318 = icmp ne i64 %dec5317, 0
  br i1 %cmp5318, label %if.then.5320, label %if.else.5321

if.then.5320:                                     ; preds = %do.body.5313
  br label %if.end.5324

if.else.5321:                                     ; preds = %do.body.5313
  %3153 = load %struct._object*, %struct._object** %_py_decref_tmp5315, align 8
  %ob_type5322 = getelementptr inbounds %struct._object, %struct._object* %3153, i32 0, i32 1
  %3154 = load %struct._typeobject*, %struct._typeobject** %ob_type5322, align 8
  %tp_dealloc5323 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3154, i32 0, i32 4
  %3155 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5323, align 8
  %3156 = load %struct._object*, %struct._object** %_py_decref_tmp5315, align 8
  call void %3155(%struct._object* %3156)
  br label %if.end.5324

if.end.5324:                                      ; preds = %if.else.5321, %if.then.5320
  br label %do.end.5325

do.end.5325:                                      ; preds = %if.end.5324
  %3157 = load %struct._object*, %struct._object** %res5298, align 8
  %3158 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5326 = getelementptr %struct._object*, %struct._object** %3158, i64 -1
  store %struct._object* %3157, %struct._object** %arrayidx5326, align 8
  %3159 = load %struct._object*, %struct._object** %res5298, align 8
  %cmp5327 = icmp eq %struct._object* %3159, null
  br i1 %cmp5327, label %if.then.5329, label %if.end.5330

if.then.5329:                                     ; preds = %do.end.5325
  br label %error

if.end.5330:                                      ; preds = %do.end.5325
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5332, align 8
  %3160 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5332, align 8
  %_value5337 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3160, i32 0, i32 0
  store i32* %_value5337, i32** %volatile_data5336, align 8
  store i32 0, i32* %order5339, align 4
  %3161 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5332, align 8
  %3162 = bitcast %struct._Py_atomic_int* %3161 to i8*
  %3163 = load i32, i32* %order5339, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3162, i32 %3163)
  %3164 = load i32, i32* %order5339, align 4
  switch i32 %3164, label %sw.default.5341 [
    i32 2, label %sw.bb.5340
    i32 3, label %sw.bb.5340
    i32 4, label %sw.bb.5340
  ]

sw.bb.5340:                                       ; preds = %if.end.5330, %if.end.5330, %if.end.5330
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5342

sw.default.5341:                                  ; preds = %if.end.5330
  br label %sw.epilog.5342

sw.epilog.5342:                                   ; preds = %sw.default.5341, %sw.bb.5340
  %3165 = load i32*, i32** %volatile_data5336, align 8
  %3166 = load volatile i32, i32* %3165, align 4
  store i32 %3166, i32* %result5334, align 4
  %3167 = load i32, i32* %order5339, align 4
  switch i32 %3167, label %sw.default.5344 [
    i32 1, label %sw.bb.5343
    i32 3, label %sw.bb.5343
    i32 4, label %sw.bb.5343
  ]

sw.bb.5343:                                       ; preds = %sw.epilog.5342, %sw.epilog.5342, %sw.epilog.5342
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5345

sw.default.5344:                                  ; preds = %sw.epilog.5342
  br label %sw.epilog.5345

sw.epilog.5345:                                   ; preds = %sw.default.5344, %sw.bb.5343
  %3168 = load i32, i32* %result5334, align 4
  store i32 %3168, i32* %tmp5346
  %3169 = load i32, i32* %tmp5346
  %tobool5347 = icmp ne i32 %3169, 0
  br i1 %tobool5347, label %if.end.5360, label %if.then.5348

if.then.5348:                                     ; preds = %sw.epilog.5345
  %3170 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5349 = icmp ne i32 %3170, 0
  br i1 %tobool5349, label %if.end.5359, label %if.then.5350

if.then.5350:                                     ; preds = %if.then.5348
  %3171 = load i8*, i8** %next_instr, align 8
  %3172 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5351 = ptrtoint i8* %3171 to i64
  %sub.ptr.rhs.cast5352 = ptrtoint i8* %3172 to i64
  %sub.ptr.sub5353 = sub i64 %sub.ptr.lhs.cast5351, %sub.ptr.rhs.cast5352
  %conv5354 = trunc i64 %sub.ptr.sub5353 to i32
  %3173 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5355 = getelementptr inbounds %struct._frame, %struct._frame* %3173, i32 0, i32 13
  store i32 %conv5354, i32* %f_lasti5355, align 4
  %3174 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5356 = getelementptr i8, i8* %3174, i32 1
  store i8* %incdec.ptr5356, i8** %next_instr, align 8
  %3175 = load i8, i8* %3174, align 1
  %idxprom5357 = zext i8 %3175 to i64
  %arrayidx5358 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5357
  %3176 = load i8*, i8** %arrayidx5358, align 8
  br label %indirectgoto

if.end.5359:                                      ; preds = %if.then.5348
  br label %fast_next_opcode

if.end.5360:                                      ; preds = %sw.epilog.5345
  br label %for.cond

TARGET_IMPORT_NAME:                               ; preds = %indirectgoto
  store i32 108, i32* %opcode, align 4
  %3177 = load i8*, i8** %next_instr, align 8
  %add.ptr5361 = getelementptr i8, i8* %3177, i64 2
  store i8* %add.ptr5361, i8** %next_instr, align 8
  %3178 = load i8*, i8** %next_instr, align 8
  %arrayidx5362 = getelementptr i8, i8* %3178, i64 -1
  %3179 = load i8, i8* %arrayidx5362, align 1
  %conv5363 = zext i8 %3179 to i32
  %shl5364 = shl i32 %conv5363, 8
  %3180 = load i8*, i8** %next_instr, align 8
  %arrayidx5365 = getelementptr i8, i8* %3180, i64 -2
  %3181 = load i8, i8* %arrayidx5365, align 1
  %conv5366 = zext i8 %3181 to i32
  %add5367 = add i32 %shl5364, %conv5366
  store i32 %add5367, i32* %oparg, align 4
  br label %sw.bb.5368

sw.bb.5368:                                       ; preds = %dispatch_opcode, %TARGET_IMPORT_NAME
  %3182 = load i32, i32* %oparg, align 4
  %idxprom5371 = sext i32 %3182 to i64
  %3183 = load %struct._object*, %struct._object** %names, align 8
  %3184 = bitcast %struct._object* %3183 to %struct.PyTupleObject*
  %ob_item5372 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %3184, i32 0, i32 1
  %arrayidx5373 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item5372, i32 0, i64 %idxprom5371
  %3185 = load %struct._object*, %struct._object** %arrayidx5373, align 8
  store %struct._object* %3185, %struct._object** %name5370, align 8
  %3186 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_builtins5375 = getelementptr inbounds %struct._frame, %struct._frame* %3186, i32 0, i32 3
  %3187 = load %struct._object*, %struct._object** %f_builtins5375, align 8
  %call5376 = call %struct._object* @_PyDict_GetItemId(%struct._object* %3187, %struct._Py_Identifier* @PyEval_EvalFrameEx.PyId___import__)
  store %struct._object* %call5376, %struct._object** %func, align 8
  %3188 = load %struct._object*, %struct._object** %func, align 8
  %cmp5382 = icmp eq %struct._object* %3188, null
  br i1 %cmp5382, label %if.then.5384, label %if.end.5385

if.then.5384:                                     ; preds = %sw.bb.5368
  %3189 = load %struct._object*, %struct._object** @PyExc_ImportError, align 8
  call void @PyErr_SetString(%struct._object* %3189, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.28, i32 0, i32 0))
  br label %error

if.end.5385:                                      ; preds = %sw.bb.5368
  %3190 = load %struct._object*, %struct._object** %func, align 8
  %ob_refcnt5386 = getelementptr inbounds %struct._object, %struct._object* %3190, i32 0, i32 0
  %3191 = load i64, i64* %ob_refcnt5386, align 8
  %inc5387 = add i64 %3191, 1
  store i64 %inc5387, i64* %ob_refcnt5386, align 8
  %3192 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr5388 = getelementptr %struct._object*, %struct._object** %3192, i32 -1
  store %struct._object** %incdec.ptr5388, %struct._object*** %stack_pointer, align 8
  %3193 = load %struct._object*, %struct._object** %incdec.ptr5388, align 8
  store %struct._object* %3193, %struct._object** %from, align 8
  %3194 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5389 = getelementptr %struct._object*, %struct._object** %3194, i64 -1
  %3195 = load %struct._object*, %struct._object** %arrayidx5389, align 8
  store %struct._object* %3195, %struct._object** %level, align 8
  %3196 = load %struct._object*, %struct._object** %level, align 8
  %call5390 = call i64 @PyLong_AsLong(%struct._object* %3196)
  %cmp5391 = icmp ne i64 %call5390, -1
  br i1 %cmp5391, label %if.then.5396, label %lor.lhs.false.5393

lor.lhs.false.5393:                               ; preds = %if.end.5385
  %call5394 = call %struct._object* @PyErr_Occurred()
  %tobool5395 = icmp ne %struct._object* %call5394, null
  br i1 %tobool5395, label %if.then.5396, label %if.else.5407

if.then.5396:                                     ; preds = %lor.lhs.false.5393, %if.end.5385
  %3197 = load %struct._object*, %struct._object** %name5370, align 8
  %3198 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals5397 = getelementptr inbounds %struct._frame, %struct._frame* %3198, i32 0, i32 4
  %3199 = load %struct._object*, %struct._object** %f_globals5397, align 8
  %3200 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals5398 = getelementptr inbounds %struct._frame, %struct._frame* %3200, i32 0, i32 5
  %3201 = load %struct._object*, %struct._object** %f_locals5398, align 8
  %cmp5399 = icmp eq %struct._object* %3201, null
  br i1 %cmp5399, label %cond.true.5401, label %cond.false.5402

cond.true.5401:                                   ; preds = %if.then.5396
  br label %cond.end.5404

cond.false.5402:                                  ; preds = %if.then.5396
  %3202 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals5403 = getelementptr inbounds %struct._frame, %struct._frame* %3202, i32 0, i32 5
  %3203 = load %struct._object*, %struct._object** %f_locals5403, align 8
  br label %cond.end.5404

cond.end.5404:                                    ; preds = %cond.false.5402, %cond.true.5401
  %cond5405 = phi %struct._object* [ @_Py_NoneStruct, %cond.true.5401 ], [ %3203, %cond.false.5402 ]
  %3204 = load %struct._object*, %struct._object** %from, align 8
  %3205 = load %struct._object*, %struct._object** %level, align 8
  %call5406 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 5, %struct._object* %3197, %struct._object* %3199, %struct._object* %cond5405, %struct._object* %3204, %struct._object* %3205)
  store %struct._object* %call5406, %struct._object** %args, align 8
  br label %if.end.5418

if.else.5407:                                     ; preds = %lor.lhs.false.5393
  %3206 = load %struct._object*, %struct._object** %name5370, align 8
  %3207 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals5408 = getelementptr inbounds %struct._frame, %struct._frame* %3207, i32 0, i32 4
  %3208 = load %struct._object*, %struct._object** %f_globals5408, align 8
  %3209 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals5409 = getelementptr inbounds %struct._frame, %struct._frame* %3209, i32 0, i32 5
  %3210 = load %struct._object*, %struct._object** %f_locals5409, align 8
  %cmp5410 = icmp eq %struct._object* %3210, null
  br i1 %cmp5410, label %cond.true.5412, label %cond.false.5413

cond.true.5412:                                   ; preds = %if.else.5407
  br label %cond.end.5415

cond.false.5413:                                  ; preds = %if.else.5407
  %3211 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals5414 = getelementptr inbounds %struct._frame, %struct._frame* %3211, i32 0, i32 5
  %3212 = load %struct._object*, %struct._object** %f_locals5414, align 8
  br label %cond.end.5415

cond.end.5415:                                    ; preds = %cond.false.5413, %cond.true.5412
  %cond5416 = phi %struct._object* [ @_Py_NoneStruct, %cond.true.5412 ], [ %3212, %cond.false.5413 ]
  %3213 = load %struct._object*, %struct._object** %from, align 8
  %call5417 = call %struct._object* (i64, ...) @PyTuple_Pack(i64 4, %struct._object* %3206, %struct._object* %3208, %struct._object* %cond5416, %struct._object* %3213)
  store %struct._object* %call5417, %struct._object** %args, align 8
  br label %if.end.5418

if.end.5418:                                      ; preds = %cond.end.5415, %cond.end.5404
  br label %do.body.5419

do.body.5419:                                     ; preds = %if.end.5418
  %3214 = load %struct._object*, %struct._object** %level, align 8
  store %struct._object* %3214, %struct._object** %_py_decref_tmp5421, align 8
  %3215 = load %struct._object*, %struct._object** %_py_decref_tmp5421, align 8
  %ob_refcnt5422 = getelementptr inbounds %struct._object, %struct._object* %3215, i32 0, i32 0
  %3216 = load i64, i64* %ob_refcnt5422, align 8
  %dec5423 = add i64 %3216, -1
  store i64 %dec5423, i64* %ob_refcnt5422, align 8
  %cmp5424 = icmp ne i64 %dec5423, 0
  br i1 %cmp5424, label %if.then.5426, label %if.else.5427

if.then.5426:                                     ; preds = %do.body.5419
  br label %if.end.5430

if.else.5427:                                     ; preds = %do.body.5419
  %3217 = load %struct._object*, %struct._object** %_py_decref_tmp5421, align 8
  %ob_type5428 = getelementptr inbounds %struct._object, %struct._object* %3217, i32 0, i32 1
  %3218 = load %struct._typeobject*, %struct._typeobject** %ob_type5428, align 8
  %tp_dealloc5429 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3218, i32 0, i32 4
  %3219 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5429, align 8
  %3220 = load %struct._object*, %struct._object** %_py_decref_tmp5421, align 8
  call void %3219(%struct._object* %3220)
  br label %if.end.5430

if.end.5430:                                      ; preds = %if.else.5427, %if.then.5426
  br label %do.end.5431

do.end.5431:                                      ; preds = %if.end.5430
  br label %do.body.5432

do.body.5432:                                     ; preds = %do.end.5431
  %3221 = load %struct._object*, %struct._object** %from, align 8
  store %struct._object* %3221, %struct._object** %_py_decref_tmp5434, align 8
  %3222 = load %struct._object*, %struct._object** %_py_decref_tmp5434, align 8
  %ob_refcnt5435 = getelementptr inbounds %struct._object, %struct._object* %3222, i32 0, i32 0
  %3223 = load i64, i64* %ob_refcnt5435, align 8
  %dec5436 = add i64 %3223, -1
  store i64 %dec5436, i64* %ob_refcnt5435, align 8
  %cmp5437 = icmp ne i64 %dec5436, 0
  br i1 %cmp5437, label %if.then.5439, label %if.else.5440

if.then.5439:                                     ; preds = %do.body.5432
  br label %if.end.5443

if.else.5440:                                     ; preds = %do.body.5432
  %3224 = load %struct._object*, %struct._object** %_py_decref_tmp5434, align 8
  %ob_type5441 = getelementptr inbounds %struct._object, %struct._object* %3224, i32 0, i32 1
  %3225 = load %struct._typeobject*, %struct._typeobject** %ob_type5441, align 8
  %tp_dealloc5442 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3225, i32 0, i32 4
  %3226 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5442, align 8
  %3227 = load %struct._object*, %struct._object** %_py_decref_tmp5434, align 8
  call void %3226(%struct._object* %3227)
  br label %if.end.5443

if.end.5443:                                      ; preds = %if.else.5440, %if.then.5439
  br label %do.end.5444

do.end.5444:                                      ; preds = %if.end.5443
  %3228 = load %struct._object*, %struct._object** %args, align 8
  %cmp5445 = icmp eq %struct._object* %3228, null
  br i1 %cmp5445, label %if.then.5447, label %if.end.5462

if.then.5447:                                     ; preds = %do.end.5444
  br label %do.body.5448

do.body.5448:                                     ; preds = %if.then.5447
  %3229 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %3229, %struct._object** %_py_decref_tmp5450, align 8
  %3230 = load %struct._object*, %struct._object** %_py_decref_tmp5450, align 8
  %ob_refcnt5451 = getelementptr inbounds %struct._object, %struct._object* %3230, i32 0, i32 0
  %3231 = load i64, i64* %ob_refcnt5451, align 8
  %dec5452 = add i64 %3231, -1
  store i64 %dec5452, i64* %ob_refcnt5451, align 8
  %cmp5453 = icmp ne i64 %dec5452, 0
  br i1 %cmp5453, label %if.then.5455, label %if.else.5456

if.then.5455:                                     ; preds = %do.body.5448
  br label %if.end.5459

if.else.5456:                                     ; preds = %do.body.5448
  %3232 = load %struct._object*, %struct._object** %_py_decref_tmp5450, align 8
  %ob_type5457 = getelementptr inbounds %struct._object, %struct._object* %3232, i32 0, i32 1
  %3233 = load %struct._typeobject*, %struct._typeobject** %ob_type5457, align 8
  %tp_dealloc5458 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3233, i32 0, i32 4
  %3234 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5458, align 8
  %3235 = load %struct._object*, %struct._object** %_py_decref_tmp5450, align 8
  call void %3234(%struct._object* %3235)
  br label %if.end.5459

if.end.5459:                                      ; preds = %if.else.5456, %if.then.5455
  br label %do.end.5460

do.end.5460:                                      ; preds = %if.end.5459
  %3236 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr5461 = getelementptr %struct._object*, %struct._object** %3236, i64 -1
  store %struct._object** %add.ptr5461, %struct._object*** %stack_pointer, align 8
  br label %error

if.end.5462:                                      ; preds = %do.end.5444
  %3237 = load %struct._object*, %struct._object** %func, align 8
  %3238 = load %struct._object*, %struct._object** %args, align 8
  %call5463 = call %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %3237, %struct._object* %3238, %struct._object* null)
  store %struct._object* %call5463, %struct._object** %res5381, align 8
  br label %do.body.5464

do.body.5464:                                     ; preds = %if.end.5462
  %3239 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %3239, %struct._object** %_py_decref_tmp5466, align 8
  %3240 = load %struct._object*, %struct._object** %_py_decref_tmp5466, align 8
  %ob_refcnt5467 = getelementptr inbounds %struct._object, %struct._object* %3240, i32 0, i32 0
  %3241 = load i64, i64* %ob_refcnt5467, align 8
  %dec5468 = add i64 %3241, -1
  store i64 %dec5468, i64* %ob_refcnt5467, align 8
  %cmp5469 = icmp ne i64 %dec5468, 0
  br i1 %cmp5469, label %if.then.5471, label %if.else.5472

if.then.5471:                                     ; preds = %do.body.5464
  br label %if.end.5475

if.else.5472:                                     ; preds = %do.body.5464
  %3242 = load %struct._object*, %struct._object** %_py_decref_tmp5466, align 8
  %ob_type5473 = getelementptr inbounds %struct._object, %struct._object* %3242, i32 0, i32 1
  %3243 = load %struct._typeobject*, %struct._typeobject** %ob_type5473, align 8
  %tp_dealloc5474 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3243, i32 0, i32 4
  %3244 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5474, align 8
  %3245 = load %struct._object*, %struct._object** %_py_decref_tmp5466, align 8
  call void %3244(%struct._object* %3245)
  br label %if.end.5475

if.end.5475:                                      ; preds = %if.else.5472, %if.then.5471
  br label %do.end.5476

do.end.5476:                                      ; preds = %if.end.5475
  br label %do.body.5477

do.body.5477:                                     ; preds = %do.end.5476
  %3246 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %3246, %struct._object** %_py_decref_tmp5479, align 8
  %3247 = load %struct._object*, %struct._object** %_py_decref_tmp5479, align 8
  %ob_refcnt5480 = getelementptr inbounds %struct._object, %struct._object* %3247, i32 0, i32 0
  %3248 = load i64, i64* %ob_refcnt5480, align 8
  %dec5481 = add i64 %3248, -1
  store i64 %dec5481, i64* %ob_refcnt5480, align 8
  %cmp5482 = icmp ne i64 %dec5481, 0
  br i1 %cmp5482, label %if.then.5484, label %if.else.5485

if.then.5484:                                     ; preds = %do.body.5477
  br label %if.end.5488

if.else.5485:                                     ; preds = %do.body.5477
  %3249 = load %struct._object*, %struct._object** %_py_decref_tmp5479, align 8
  %ob_type5486 = getelementptr inbounds %struct._object, %struct._object* %3249, i32 0, i32 1
  %3250 = load %struct._typeobject*, %struct._typeobject** %ob_type5486, align 8
  %tp_dealloc5487 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3250, i32 0, i32 4
  %3251 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5487, align 8
  %3252 = load %struct._object*, %struct._object** %_py_decref_tmp5479, align 8
  call void %3251(%struct._object* %3252)
  br label %if.end.5488

if.end.5488:                                      ; preds = %if.else.5485, %if.then.5484
  br label %do.end.5489

do.end.5489:                                      ; preds = %if.end.5488
  %3253 = load %struct._object*, %struct._object** %res5381, align 8
  %3254 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5490 = getelementptr %struct._object*, %struct._object** %3254, i64 -1
  store %struct._object* %3253, %struct._object** %arrayidx5490, align 8
  %3255 = load %struct._object*, %struct._object** %res5381, align 8
  %cmp5491 = icmp eq %struct._object* %3255, null
  br i1 %cmp5491, label %if.then.5493, label %if.end.5494

if.then.5493:                                     ; preds = %do.end.5489
  br label %error

if.end.5494:                                      ; preds = %do.end.5489
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5496, align 8
  %3256 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5496, align 8
  %_value5501 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3256, i32 0, i32 0
  store i32* %_value5501, i32** %volatile_data5500, align 8
  store i32 0, i32* %order5503, align 4
  %3257 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5496, align 8
  %3258 = bitcast %struct._Py_atomic_int* %3257 to i8*
  %3259 = load i32, i32* %order5503, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3258, i32 %3259)
  %3260 = load i32, i32* %order5503, align 4
  switch i32 %3260, label %sw.default.5505 [
    i32 2, label %sw.bb.5504
    i32 3, label %sw.bb.5504
    i32 4, label %sw.bb.5504
  ]

sw.bb.5504:                                       ; preds = %if.end.5494, %if.end.5494, %if.end.5494
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5506

sw.default.5505:                                  ; preds = %if.end.5494
  br label %sw.epilog.5506

sw.epilog.5506:                                   ; preds = %sw.default.5505, %sw.bb.5504
  %3261 = load i32*, i32** %volatile_data5500, align 8
  %3262 = load volatile i32, i32* %3261, align 4
  store i32 %3262, i32* %result5498, align 4
  %3263 = load i32, i32* %order5503, align 4
  switch i32 %3263, label %sw.default.5508 [
    i32 1, label %sw.bb.5507
    i32 3, label %sw.bb.5507
    i32 4, label %sw.bb.5507
  ]

sw.bb.5507:                                       ; preds = %sw.epilog.5506, %sw.epilog.5506, %sw.epilog.5506
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5509

sw.default.5508:                                  ; preds = %sw.epilog.5506
  br label %sw.epilog.5509

sw.epilog.5509:                                   ; preds = %sw.default.5508, %sw.bb.5507
  %3264 = load i32, i32* %result5498, align 4
  store i32 %3264, i32* %tmp5510
  %3265 = load i32, i32* %tmp5510
  %tobool5511 = icmp ne i32 %3265, 0
  br i1 %tobool5511, label %if.end.5524, label %if.then.5512

if.then.5512:                                     ; preds = %sw.epilog.5509
  %3266 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5513 = icmp ne i32 %3266, 0
  br i1 %tobool5513, label %if.end.5523, label %if.then.5514

if.then.5514:                                     ; preds = %if.then.5512
  %3267 = load i8*, i8** %next_instr, align 8
  %3268 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5515 = ptrtoint i8* %3267 to i64
  %sub.ptr.rhs.cast5516 = ptrtoint i8* %3268 to i64
  %sub.ptr.sub5517 = sub i64 %sub.ptr.lhs.cast5515, %sub.ptr.rhs.cast5516
  %conv5518 = trunc i64 %sub.ptr.sub5517 to i32
  %3269 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5519 = getelementptr inbounds %struct._frame, %struct._frame* %3269, i32 0, i32 13
  store i32 %conv5518, i32* %f_lasti5519, align 4
  %3270 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5520 = getelementptr i8, i8* %3270, i32 1
  store i8* %incdec.ptr5520, i8** %next_instr, align 8
  %3271 = load i8, i8* %3270, align 1
  %idxprom5521 = zext i8 %3271 to i64
  %arrayidx5522 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5521
  %3272 = load i8*, i8** %arrayidx5522, align 8
  br label %indirectgoto

if.end.5523:                                      ; preds = %if.then.5512
  br label %fast_next_opcode

if.end.5524:                                      ; preds = %sw.epilog.5509
  br label %for.cond

TARGET_IMPORT_STAR:                               ; preds = %indirectgoto
  store i32 84, i32* %opcode, align 4
  br label %sw.bb.5525

sw.bb.5525:                                       ; preds = %dispatch_opcode, %TARGET_IMPORT_STAR
  %3273 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr5528 = getelementptr %struct._object*, %struct._object** %3273, i32 -1
  store %struct._object** %incdec.ptr5528, %struct._object*** %stack_pointer, align 8
  %3274 = load %struct._object*, %struct._object** %incdec.ptr5528, align 8
  store %struct._object* %3274, %struct._object** %from5527, align 8
  %3275 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call5533 = call i32 @PyFrame_FastToLocalsWithError(%struct._frame* %3275)
  %cmp5534 = icmp slt i32 %call5533, 0
  br i1 %cmp5534, label %if.then.5536, label %if.end.5537

if.then.5536:                                     ; preds = %sw.bb.5525
  br label %error

if.end.5537:                                      ; preds = %sw.bb.5525
  %3276 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals5538 = getelementptr inbounds %struct._frame, %struct._frame* %3276, i32 0, i32 5
  %3277 = load %struct._object*, %struct._object** %f_locals5538, align 8
  store %struct._object* %3277, %struct._object** %locals5530, align 8
  %3278 = load %struct._object*, %struct._object** %locals5530, align 8
  %cmp5539 = icmp eq %struct._object* %3278, null
  br i1 %cmp5539, label %if.then.5541, label %if.end.5542

if.then.5541:                                     ; preds = %if.end.5537
  %3279 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %3279, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.29, i32 0, i32 0))
  br label %error

if.end.5542:                                      ; preds = %if.end.5537
  %3280 = load %struct._object*, %struct._object** %locals5530, align 8
  %3281 = load %struct._object*, %struct._object** %from5527, align 8
  %call5543 = call i32 @import_all_from(%struct._object* %3280, %struct._object* %3281)
  store i32 %call5543, i32* %err5532, align 4
  %3282 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @PyFrame_LocalsToFast(%struct._frame* %3282, i32 0)
  br label %do.body.5544

do.body.5544:                                     ; preds = %if.end.5542
  %3283 = load %struct._object*, %struct._object** %from5527, align 8
  store %struct._object* %3283, %struct._object** %_py_decref_tmp5546, align 8
  %3284 = load %struct._object*, %struct._object** %_py_decref_tmp5546, align 8
  %ob_refcnt5547 = getelementptr inbounds %struct._object, %struct._object* %3284, i32 0, i32 0
  %3285 = load i64, i64* %ob_refcnt5547, align 8
  %dec5548 = add i64 %3285, -1
  store i64 %dec5548, i64* %ob_refcnt5547, align 8
  %cmp5549 = icmp ne i64 %dec5548, 0
  br i1 %cmp5549, label %if.then.5551, label %if.else.5552

if.then.5551:                                     ; preds = %do.body.5544
  br label %if.end.5555

if.else.5552:                                     ; preds = %do.body.5544
  %3286 = load %struct._object*, %struct._object** %_py_decref_tmp5546, align 8
  %ob_type5553 = getelementptr inbounds %struct._object, %struct._object* %3286, i32 0, i32 1
  %3287 = load %struct._typeobject*, %struct._typeobject** %ob_type5553, align 8
  %tp_dealloc5554 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3287, i32 0, i32 4
  %3288 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5554, align 8
  %3289 = load %struct._object*, %struct._object** %_py_decref_tmp5546, align 8
  call void %3288(%struct._object* %3289)
  br label %if.end.5555

if.end.5555:                                      ; preds = %if.else.5552, %if.then.5551
  br label %do.end.5556

do.end.5556:                                      ; preds = %if.end.5555
  %3290 = load i32, i32* %err5532, align 4
  %cmp5557 = icmp ne i32 %3290, 0
  br i1 %cmp5557, label %if.then.5559, label %if.end.5560

if.then.5559:                                     ; preds = %do.end.5556
  br label %error

if.end.5560:                                      ; preds = %do.end.5556
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5562, align 8
  %3291 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5562, align 8
  %_value5567 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3291, i32 0, i32 0
  store i32* %_value5567, i32** %volatile_data5566, align 8
  store i32 0, i32* %order5569, align 4
  %3292 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5562, align 8
  %3293 = bitcast %struct._Py_atomic_int* %3292 to i8*
  %3294 = load i32, i32* %order5569, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3293, i32 %3294)
  %3295 = load i32, i32* %order5569, align 4
  switch i32 %3295, label %sw.default.5571 [
    i32 2, label %sw.bb.5570
    i32 3, label %sw.bb.5570
    i32 4, label %sw.bb.5570
  ]

sw.bb.5570:                                       ; preds = %if.end.5560, %if.end.5560, %if.end.5560
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5572

sw.default.5571:                                  ; preds = %if.end.5560
  br label %sw.epilog.5572

sw.epilog.5572:                                   ; preds = %sw.default.5571, %sw.bb.5570
  %3296 = load i32*, i32** %volatile_data5566, align 8
  %3297 = load volatile i32, i32* %3296, align 4
  store i32 %3297, i32* %result5564, align 4
  %3298 = load i32, i32* %order5569, align 4
  switch i32 %3298, label %sw.default.5574 [
    i32 1, label %sw.bb.5573
    i32 3, label %sw.bb.5573
    i32 4, label %sw.bb.5573
  ]

sw.bb.5573:                                       ; preds = %sw.epilog.5572, %sw.epilog.5572, %sw.epilog.5572
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5575

sw.default.5574:                                  ; preds = %sw.epilog.5572
  br label %sw.epilog.5575

sw.epilog.5575:                                   ; preds = %sw.default.5574, %sw.bb.5573
  %3299 = load i32, i32* %result5564, align 4
  store i32 %3299, i32* %tmp5576
  %3300 = load i32, i32* %tmp5576
  %tobool5577 = icmp ne i32 %3300, 0
  br i1 %tobool5577, label %if.end.5590, label %if.then.5578

if.then.5578:                                     ; preds = %sw.epilog.5575
  %3301 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5579 = icmp ne i32 %3301, 0
  br i1 %tobool5579, label %if.end.5589, label %if.then.5580

if.then.5580:                                     ; preds = %if.then.5578
  %3302 = load i8*, i8** %next_instr, align 8
  %3303 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5581 = ptrtoint i8* %3302 to i64
  %sub.ptr.rhs.cast5582 = ptrtoint i8* %3303 to i64
  %sub.ptr.sub5583 = sub i64 %sub.ptr.lhs.cast5581, %sub.ptr.rhs.cast5582
  %conv5584 = trunc i64 %sub.ptr.sub5583 to i32
  %3304 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5585 = getelementptr inbounds %struct._frame, %struct._frame* %3304, i32 0, i32 13
  store i32 %conv5584, i32* %f_lasti5585, align 4
  %3305 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5586 = getelementptr i8, i8* %3305, i32 1
  store i8* %incdec.ptr5586, i8** %next_instr, align 8
  %3306 = load i8, i8* %3305, align 1
  %idxprom5587 = zext i8 %3306 to i64
  %arrayidx5588 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5587
  %3307 = load i8*, i8** %arrayidx5588, align 8
  br label %indirectgoto

if.end.5589:                                      ; preds = %if.then.5578
  br label %fast_next_opcode

if.end.5590:                                      ; preds = %sw.epilog.5575
  br label %for.cond

TARGET_IMPORT_FROM:                               ; preds = %indirectgoto
  store i32 109, i32* %opcode, align 4
  %3308 = load i8*, i8** %next_instr, align 8
  %add.ptr5591 = getelementptr i8, i8* %3308, i64 2
  store i8* %add.ptr5591, i8** %next_instr, align 8
  %3309 = load i8*, i8** %next_instr, align 8
  %arrayidx5592 = getelementptr i8, i8* %3309, i64 -1
  %3310 = load i8, i8* %arrayidx5592, align 1
  %conv5593 = zext i8 %3310 to i32
  %shl5594 = shl i32 %conv5593, 8
  %3311 = load i8*, i8** %next_instr, align 8
  %arrayidx5595 = getelementptr i8, i8* %3311, i64 -2
  %3312 = load i8, i8* %arrayidx5595, align 1
  %conv5596 = zext i8 %3312 to i32
  %add5597 = add i32 %shl5594, %conv5596
  store i32 %add5597, i32* %oparg, align 4
  br label %sw.bb.5598

sw.bb.5598:                                       ; preds = %dispatch_opcode, %TARGET_IMPORT_FROM
  %3313 = load i32, i32* %oparg, align 4
  %idxprom5601 = sext i32 %3313 to i64
  %3314 = load %struct._object*, %struct._object** %names, align 8
  %3315 = bitcast %struct._object* %3314 to %struct.PyTupleObject*
  %ob_item5602 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %3315, i32 0, i32 1
  %arrayidx5603 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item5602, i32 0, i64 %idxprom5601
  %3316 = load %struct._object*, %struct._object** %arrayidx5603, align 8
  store %struct._object* %3316, %struct._object** %name5600, align 8
  %3317 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5606 = getelementptr %struct._object*, %struct._object** %3317, i64 -1
  %3318 = load %struct._object*, %struct._object** %arrayidx5606, align 8
  store %struct._object* %3318, %struct._object** %from5605, align 8
  %3319 = load %struct._object*, %struct._object** %from5605, align 8
  %3320 = load %struct._object*, %struct._object** %name5600, align 8
  %call5609 = call %struct._object* @import_from(%struct._object* %3319, %struct._object* %3320)
  store %struct._object* %call5609, %struct._object** %res5608, align 8
  %3321 = load %struct._object*, %struct._object** %res5608, align 8
  %3322 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr5610 = getelementptr %struct._object*, %struct._object** %3322, i32 1
  store %struct._object** %incdec.ptr5610, %struct._object*** %stack_pointer, align 8
  store %struct._object* %3321, %struct._object** %3322, align 8
  %3323 = load %struct._object*, %struct._object** %res5608, align 8
  %cmp5611 = icmp eq %struct._object* %3323, null
  br i1 %cmp5611, label %if.then.5613, label %if.end.5614

if.then.5613:                                     ; preds = %sw.bb.5598
  br label %error

if.end.5614:                                      ; preds = %sw.bb.5598
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5616, align 8
  %3324 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5616, align 8
  %_value5621 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3324, i32 0, i32 0
  store i32* %_value5621, i32** %volatile_data5620, align 8
  store i32 0, i32* %order5623, align 4
  %3325 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5616, align 8
  %3326 = bitcast %struct._Py_atomic_int* %3325 to i8*
  %3327 = load i32, i32* %order5623, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3326, i32 %3327)
  %3328 = load i32, i32* %order5623, align 4
  switch i32 %3328, label %sw.default.5625 [
    i32 2, label %sw.bb.5624
    i32 3, label %sw.bb.5624
    i32 4, label %sw.bb.5624
  ]

sw.bb.5624:                                       ; preds = %if.end.5614, %if.end.5614, %if.end.5614
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5626

sw.default.5625:                                  ; preds = %if.end.5614
  br label %sw.epilog.5626

sw.epilog.5626:                                   ; preds = %sw.default.5625, %sw.bb.5624
  %3329 = load i32*, i32** %volatile_data5620, align 8
  %3330 = load volatile i32, i32* %3329, align 4
  store i32 %3330, i32* %result5618, align 4
  %3331 = load i32, i32* %order5623, align 4
  switch i32 %3331, label %sw.default.5628 [
    i32 1, label %sw.bb.5627
    i32 3, label %sw.bb.5627
    i32 4, label %sw.bb.5627
  ]

sw.bb.5627:                                       ; preds = %sw.epilog.5626, %sw.epilog.5626, %sw.epilog.5626
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5629

sw.default.5628:                                  ; preds = %sw.epilog.5626
  br label %sw.epilog.5629

sw.epilog.5629:                                   ; preds = %sw.default.5628, %sw.bb.5627
  %3332 = load i32, i32* %result5618, align 4
  store i32 %3332, i32* %tmp5630
  %3333 = load i32, i32* %tmp5630
  %tobool5631 = icmp ne i32 %3333, 0
  br i1 %tobool5631, label %if.end.5644, label %if.then.5632

if.then.5632:                                     ; preds = %sw.epilog.5629
  %3334 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5633 = icmp ne i32 %3334, 0
  br i1 %tobool5633, label %if.end.5643, label %if.then.5634

if.then.5634:                                     ; preds = %if.then.5632
  %3335 = load i8*, i8** %next_instr, align 8
  %3336 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5635 = ptrtoint i8* %3335 to i64
  %sub.ptr.rhs.cast5636 = ptrtoint i8* %3336 to i64
  %sub.ptr.sub5637 = sub i64 %sub.ptr.lhs.cast5635, %sub.ptr.rhs.cast5636
  %conv5638 = trunc i64 %sub.ptr.sub5637 to i32
  %3337 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5639 = getelementptr inbounds %struct._frame, %struct._frame* %3337, i32 0, i32 13
  store i32 %conv5638, i32* %f_lasti5639, align 4
  %3338 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5640 = getelementptr i8, i8* %3338, i32 1
  store i8* %incdec.ptr5640, i8** %next_instr, align 8
  %3339 = load i8, i8* %3338, align 1
  %idxprom5641 = zext i8 %3339 to i64
  %arrayidx5642 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5641
  %3340 = load i8*, i8** %arrayidx5642, align 8
  br label %indirectgoto

if.end.5643:                                      ; preds = %if.then.5632
  br label %fast_next_opcode

if.end.5644:                                      ; preds = %sw.epilog.5629
  br label %for.cond

TARGET_JUMP_FORWARD:                              ; preds = %indirectgoto
  store i32 110, i32* %opcode, align 4
  %3341 = load i8*, i8** %next_instr, align 8
  %add.ptr5645 = getelementptr i8, i8* %3341, i64 2
  store i8* %add.ptr5645, i8** %next_instr, align 8
  %3342 = load i8*, i8** %next_instr, align 8
  %arrayidx5646 = getelementptr i8, i8* %3342, i64 -1
  %3343 = load i8, i8* %arrayidx5646, align 1
  %conv5647 = zext i8 %3343 to i32
  %shl5648 = shl i32 %conv5647, 8
  %3344 = load i8*, i8** %next_instr, align 8
  %arrayidx5649 = getelementptr i8, i8* %3344, i64 -2
  %3345 = load i8, i8* %arrayidx5649, align 1
  %conv5650 = zext i8 %3345 to i32
  %add5651 = add i32 %shl5648, %conv5650
  store i32 %add5651, i32* %oparg, align 4
  br label %sw.bb.5652

sw.bb.5652:                                       ; preds = %dispatch_opcode, %TARGET_JUMP_FORWARD
  %3346 = load i32, i32* %oparg, align 4
  %3347 = load i8*, i8** %next_instr, align 8
  %idx.ext5653 = sext i32 %3346 to i64
  %add.ptr5654 = getelementptr i8, i8* %3347, i64 %idx.ext5653
  store i8* %add.ptr5654, i8** %next_instr, align 8
  %3348 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5655 = icmp ne i32 %3348, 0
  br i1 %tobool5655, label %if.end.5665, label %if.then.5656

if.then.5656:                                     ; preds = %sw.bb.5652
  %3349 = load i8*, i8** %next_instr, align 8
  %3350 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5657 = ptrtoint i8* %3349 to i64
  %sub.ptr.rhs.cast5658 = ptrtoint i8* %3350 to i64
  %sub.ptr.sub5659 = sub i64 %sub.ptr.lhs.cast5657, %sub.ptr.rhs.cast5658
  %conv5660 = trunc i64 %sub.ptr.sub5659 to i32
  %3351 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5661 = getelementptr inbounds %struct._frame, %struct._frame* %3351, i32 0, i32 13
  store i32 %conv5660, i32* %f_lasti5661, align 4
  %3352 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5662 = getelementptr i8, i8* %3352, i32 1
  store i8* %incdec.ptr5662, i8** %next_instr, align 8
  %3353 = load i8, i8* %3352, align 1
  %idxprom5663 = zext i8 %3353 to i64
  %arrayidx5664 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5663
  %3354 = load i8*, i8** %arrayidx5664, align 8
  br label %indirectgoto

if.end.5665:                                      ; preds = %sw.bb.5652
  br label %fast_next_opcode

PRED_POP_JUMP_IF_FALSE:                           ; No predecessors!
  br label %TARGET_POP_JUMP_IF_FALSE

TARGET_POP_JUMP_IF_FALSE:                         ; preds = %PRED_POP_JUMP_IF_FALSE, %indirectgoto
  store i32 114, i32* %opcode, align 4
  %3355 = load i8*, i8** %next_instr, align 8
  %add.ptr5666 = getelementptr i8, i8* %3355, i64 2
  store i8* %add.ptr5666, i8** %next_instr, align 8
  %3356 = load i8*, i8** %next_instr, align 8
  %arrayidx5667 = getelementptr i8, i8* %3356, i64 -1
  %3357 = load i8, i8* %arrayidx5667, align 1
  %conv5668 = zext i8 %3357 to i32
  %shl5669 = shl i32 %conv5668, 8
  %3358 = load i8*, i8** %next_instr, align 8
  %arrayidx5670 = getelementptr i8, i8* %3358, i64 -2
  %3359 = load i8, i8* %arrayidx5670, align 1
  %conv5671 = zext i8 %3359 to i32
  %add5672 = add i32 %shl5669, %conv5671
  store i32 %add5672, i32* %oparg, align 4
  br label %sw.bb.5673

sw.bb.5673:                                       ; preds = %dispatch_opcode, %TARGET_POP_JUMP_IF_FALSE
  %3360 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr5676 = getelementptr %struct._object*, %struct._object** %3360, i32 -1
  store %struct._object** %incdec.ptr5676, %struct._object*** %stack_pointer, align 8
  %3361 = load %struct._object*, %struct._object** %incdec.ptr5676, align 8
  store %struct._object* %3361, %struct._object** %cond5675, align 8
  %3362 = load %struct._object*, %struct._object** %cond5675, align 8
  %cmp5679 = icmp eq %struct._object* %3362, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  br i1 %cmp5679, label %if.then.5681, label %if.end.5706

if.then.5681:                                     ; preds = %sw.bb.5673
  br label %do.body.5682

do.body.5682:                                     ; preds = %if.then.5681
  %3363 = load %struct._object*, %struct._object** %cond5675, align 8
  store %struct._object* %3363, %struct._object** %_py_decref_tmp5684, align 8
  %3364 = load %struct._object*, %struct._object** %_py_decref_tmp5684, align 8
  %ob_refcnt5685 = getelementptr inbounds %struct._object, %struct._object* %3364, i32 0, i32 0
  %3365 = load i64, i64* %ob_refcnt5685, align 8
  %dec5686 = add i64 %3365, -1
  store i64 %dec5686, i64* %ob_refcnt5685, align 8
  %cmp5687 = icmp ne i64 %dec5686, 0
  br i1 %cmp5687, label %if.then.5689, label %if.else.5690

if.then.5689:                                     ; preds = %do.body.5682
  br label %if.end.5693

if.else.5690:                                     ; preds = %do.body.5682
  %3366 = load %struct._object*, %struct._object** %_py_decref_tmp5684, align 8
  %ob_type5691 = getelementptr inbounds %struct._object, %struct._object* %3366, i32 0, i32 1
  %3367 = load %struct._typeobject*, %struct._typeobject** %ob_type5691, align 8
  %tp_dealloc5692 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3367, i32 0, i32 4
  %3368 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5692, align 8
  %3369 = load %struct._object*, %struct._object** %_py_decref_tmp5684, align 8
  call void %3368(%struct._object* %3369)
  br label %if.end.5693

if.end.5693:                                      ; preds = %if.else.5690, %if.then.5689
  br label %do.end.5694

do.end.5694:                                      ; preds = %if.end.5693
  %3370 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5695 = icmp ne i32 %3370, 0
  br i1 %tobool5695, label %if.end.5705, label %if.then.5696

if.then.5696:                                     ; preds = %do.end.5694
  %3371 = load i8*, i8** %next_instr, align 8
  %3372 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5697 = ptrtoint i8* %3371 to i64
  %sub.ptr.rhs.cast5698 = ptrtoint i8* %3372 to i64
  %sub.ptr.sub5699 = sub i64 %sub.ptr.lhs.cast5697, %sub.ptr.rhs.cast5698
  %conv5700 = trunc i64 %sub.ptr.sub5699 to i32
  %3373 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5701 = getelementptr inbounds %struct._frame, %struct._frame* %3373, i32 0, i32 13
  store i32 %conv5700, i32* %f_lasti5701, align 4
  %3374 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5702 = getelementptr i8, i8* %3374, i32 1
  store i8* %incdec.ptr5702, i8** %next_instr, align 8
  %3375 = load i8, i8* %3374, align 1
  %idxprom5703 = zext i8 %3375 to i64
  %arrayidx5704 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5703
  %3376 = load i8*, i8** %arrayidx5704, align 8
  br label %indirectgoto

if.end.5705:                                      ; preds = %do.end.5694
  br label %fast_next_opcode

if.end.5706:                                      ; preds = %sw.bb.5673
  %3377 = load %struct._object*, %struct._object** %cond5675, align 8
  %cmp5707 = icmp eq %struct._object* %3377, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  br i1 %cmp5707, label %if.then.5709, label %if.end.5736

if.then.5709:                                     ; preds = %if.end.5706
  br label %do.body.5710

do.body.5710:                                     ; preds = %if.then.5709
  %3378 = load %struct._object*, %struct._object** %cond5675, align 8
  store %struct._object* %3378, %struct._object** %_py_decref_tmp5712, align 8
  %3379 = load %struct._object*, %struct._object** %_py_decref_tmp5712, align 8
  %ob_refcnt5713 = getelementptr inbounds %struct._object, %struct._object* %3379, i32 0, i32 0
  %3380 = load i64, i64* %ob_refcnt5713, align 8
  %dec5714 = add i64 %3380, -1
  store i64 %dec5714, i64* %ob_refcnt5713, align 8
  %cmp5715 = icmp ne i64 %dec5714, 0
  br i1 %cmp5715, label %if.then.5717, label %if.else.5718

if.then.5717:                                     ; preds = %do.body.5710
  br label %if.end.5721

if.else.5718:                                     ; preds = %do.body.5710
  %3381 = load %struct._object*, %struct._object** %_py_decref_tmp5712, align 8
  %ob_type5719 = getelementptr inbounds %struct._object, %struct._object* %3381, i32 0, i32 1
  %3382 = load %struct._typeobject*, %struct._typeobject** %ob_type5719, align 8
  %tp_dealloc5720 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3382, i32 0, i32 4
  %3383 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5720, align 8
  %3384 = load %struct._object*, %struct._object** %_py_decref_tmp5712, align 8
  call void %3383(%struct._object* %3384)
  br label %if.end.5721

if.end.5721:                                      ; preds = %if.else.5718, %if.then.5717
  br label %do.end.5722

do.end.5722:                                      ; preds = %if.end.5721
  %3385 = load i8*, i8** %first_instr, align 8
  %3386 = load i32, i32* %oparg, align 4
  %idx.ext5723 = sext i32 %3386 to i64
  %add.ptr5724 = getelementptr i8, i8* %3385, i64 %idx.ext5723
  store i8* %add.ptr5724, i8** %next_instr, align 8
  %3387 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5725 = icmp ne i32 %3387, 0
  br i1 %tobool5725, label %if.end.5735, label %if.then.5726

if.then.5726:                                     ; preds = %do.end.5722
  %3388 = load i8*, i8** %next_instr, align 8
  %3389 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5727 = ptrtoint i8* %3388 to i64
  %sub.ptr.rhs.cast5728 = ptrtoint i8* %3389 to i64
  %sub.ptr.sub5729 = sub i64 %sub.ptr.lhs.cast5727, %sub.ptr.rhs.cast5728
  %conv5730 = trunc i64 %sub.ptr.sub5729 to i32
  %3390 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5731 = getelementptr inbounds %struct._frame, %struct._frame* %3390, i32 0, i32 13
  store i32 %conv5730, i32* %f_lasti5731, align 4
  %3391 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5732 = getelementptr i8, i8* %3391, i32 1
  store i8* %incdec.ptr5732, i8** %next_instr, align 8
  %3392 = load i8, i8* %3391, align 1
  %idxprom5733 = zext i8 %3392 to i64
  %arrayidx5734 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5733
  %3393 = load i8*, i8** %arrayidx5734, align 8
  br label %indirectgoto

if.end.5735:                                      ; preds = %do.end.5722
  br label %fast_next_opcode

if.end.5736:                                      ; preds = %if.end.5706
  %3394 = load %struct._object*, %struct._object** %cond5675, align 8
  %call5737 = call i32 @PyObject_IsTrue(%struct._object* %3394)
  store i32 %call5737, i32* %err5678, align 4
  br label %do.body.5738

do.body.5738:                                     ; preds = %if.end.5736
  %3395 = load %struct._object*, %struct._object** %cond5675, align 8
  store %struct._object* %3395, %struct._object** %_py_decref_tmp5740, align 8
  %3396 = load %struct._object*, %struct._object** %_py_decref_tmp5740, align 8
  %ob_refcnt5741 = getelementptr inbounds %struct._object, %struct._object* %3396, i32 0, i32 0
  %3397 = load i64, i64* %ob_refcnt5741, align 8
  %dec5742 = add i64 %3397, -1
  store i64 %dec5742, i64* %ob_refcnt5741, align 8
  %cmp5743 = icmp ne i64 %dec5742, 0
  br i1 %cmp5743, label %if.then.5745, label %if.else.5746

if.then.5745:                                     ; preds = %do.body.5738
  br label %if.end.5749

if.else.5746:                                     ; preds = %do.body.5738
  %3398 = load %struct._object*, %struct._object** %_py_decref_tmp5740, align 8
  %ob_type5747 = getelementptr inbounds %struct._object, %struct._object* %3398, i32 0, i32 1
  %3399 = load %struct._typeobject*, %struct._typeobject** %ob_type5747, align 8
  %tp_dealloc5748 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3399, i32 0, i32 4
  %3400 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5748, align 8
  %3401 = load %struct._object*, %struct._object** %_py_decref_tmp5740, align 8
  call void %3400(%struct._object* %3401)
  br label %if.end.5749

if.end.5749:                                      ; preds = %if.else.5746, %if.then.5745
  br label %do.end.5750

do.end.5750:                                      ; preds = %if.end.5749
  %3402 = load i32, i32* %err5678, align 4
  %cmp5751 = icmp sgt i32 %3402, 0
  br i1 %cmp5751, label %if.then.5753, label %if.else.5754

if.then.5753:                                     ; preds = %do.end.5750
  store i32 0, i32* %err5678, align 4
  br label %if.end.5762

if.else.5754:                                     ; preds = %do.end.5750
  %3403 = load i32, i32* %err5678, align 4
  %cmp5755 = icmp eq i32 %3403, 0
  br i1 %cmp5755, label %if.then.5757, label %if.else.5760

if.then.5757:                                     ; preds = %if.else.5754
  %3404 = load i8*, i8** %first_instr, align 8
  %3405 = load i32, i32* %oparg, align 4
  %idx.ext5758 = sext i32 %3405 to i64
  %add.ptr5759 = getelementptr i8, i8* %3404, i64 %idx.ext5758
  store i8* %add.ptr5759, i8** %next_instr, align 8
  br label %if.end.5761

if.else.5760:                                     ; preds = %if.else.5754
  br label %error

if.end.5761:                                      ; preds = %if.then.5757
  br label %if.end.5762

if.end.5762:                                      ; preds = %if.end.5761, %if.then.5753
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5764, align 8
  %3406 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5764, align 8
  %_value5769 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3406, i32 0, i32 0
  store i32* %_value5769, i32** %volatile_data5768, align 8
  store i32 0, i32* %order5771, align 4
  %3407 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5764, align 8
  %3408 = bitcast %struct._Py_atomic_int* %3407 to i8*
  %3409 = load i32, i32* %order5771, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3408, i32 %3409)
  %3410 = load i32, i32* %order5771, align 4
  switch i32 %3410, label %sw.default.5773 [
    i32 2, label %sw.bb.5772
    i32 3, label %sw.bb.5772
    i32 4, label %sw.bb.5772
  ]

sw.bb.5772:                                       ; preds = %if.end.5762, %if.end.5762, %if.end.5762
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5774

sw.default.5773:                                  ; preds = %if.end.5762
  br label %sw.epilog.5774

sw.epilog.5774:                                   ; preds = %sw.default.5773, %sw.bb.5772
  %3411 = load i32*, i32** %volatile_data5768, align 8
  %3412 = load volatile i32, i32* %3411, align 4
  store i32 %3412, i32* %result5766, align 4
  %3413 = load i32, i32* %order5771, align 4
  switch i32 %3413, label %sw.default.5776 [
    i32 1, label %sw.bb.5775
    i32 3, label %sw.bb.5775
    i32 4, label %sw.bb.5775
  ]

sw.bb.5775:                                       ; preds = %sw.epilog.5774, %sw.epilog.5774, %sw.epilog.5774
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5777

sw.default.5776:                                  ; preds = %sw.epilog.5774
  br label %sw.epilog.5777

sw.epilog.5777:                                   ; preds = %sw.default.5776, %sw.bb.5775
  %3414 = load i32, i32* %result5766, align 4
  store i32 %3414, i32* %tmp5778
  %3415 = load i32, i32* %tmp5778
  %tobool5779 = icmp ne i32 %3415, 0
  br i1 %tobool5779, label %if.end.5792, label %if.then.5780

if.then.5780:                                     ; preds = %sw.epilog.5777
  %3416 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5781 = icmp ne i32 %3416, 0
  br i1 %tobool5781, label %if.end.5791, label %if.then.5782

if.then.5782:                                     ; preds = %if.then.5780
  %3417 = load i8*, i8** %next_instr, align 8
  %3418 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5783 = ptrtoint i8* %3417 to i64
  %sub.ptr.rhs.cast5784 = ptrtoint i8* %3418 to i64
  %sub.ptr.sub5785 = sub i64 %sub.ptr.lhs.cast5783, %sub.ptr.rhs.cast5784
  %conv5786 = trunc i64 %sub.ptr.sub5785 to i32
  %3419 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5787 = getelementptr inbounds %struct._frame, %struct._frame* %3419, i32 0, i32 13
  store i32 %conv5786, i32* %f_lasti5787, align 4
  %3420 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5788 = getelementptr i8, i8* %3420, i32 1
  store i8* %incdec.ptr5788, i8** %next_instr, align 8
  %3421 = load i8, i8* %3420, align 1
  %idxprom5789 = zext i8 %3421 to i64
  %arrayidx5790 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5789
  %3422 = load i8*, i8** %arrayidx5790, align 8
  br label %indirectgoto

if.end.5791:                                      ; preds = %if.then.5780
  br label %fast_next_opcode

if.end.5792:                                      ; preds = %sw.epilog.5777
  br label %for.cond

PRED_POP_JUMP_IF_TRUE:                            ; No predecessors!
  br label %TARGET_POP_JUMP_IF_TRUE

TARGET_POP_JUMP_IF_TRUE:                          ; preds = %PRED_POP_JUMP_IF_TRUE, %indirectgoto
  store i32 115, i32* %opcode, align 4
  %3423 = load i8*, i8** %next_instr, align 8
  %add.ptr5793 = getelementptr i8, i8* %3423, i64 2
  store i8* %add.ptr5793, i8** %next_instr, align 8
  %3424 = load i8*, i8** %next_instr, align 8
  %arrayidx5794 = getelementptr i8, i8* %3424, i64 -1
  %3425 = load i8, i8* %arrayidx5794, align 1
  %conv5795 = zext i8 %3425 to i32
  %shl5796 = shl i32 %conv5795, 8
  %3426 = load i8*, i8** %next_instr, align 8
  %arrayidx5797 = getelementptr i8, i8* %3426, i64 -2
  %3427 = load i8, i8* %arrayidx5797, align 1
  %conv5798 = zext i8 %3427 to i32
  %add5799 = add i32 %shl5796, %conv5798
  store i32 %add5799, i32* %oparg, align 4
  br label %sw.bb.5800

sw.bb.5800:                                       ; preds = %dispatch_opcode, %TARGET_POP_JUMP_IF_TRUE
  %3428 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr5803 = getelementptr %struct._object*, %struct._object** %3428, i32 -1
  store %struct._object** %incdec.ptr5803, %struct._object*** %stack_pointer, align 8
  %3429 = load %struct._object*, %struct._object** %incdec.ptr5803, align 8
  store %struct._object* %3429, %struct._object** %cond5802, align 8
  %3430 = load %struct._object*, %struct._object** %cond5802, align 8
  %cmp5806 = icmp eq %struct._object* %3430, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  br i1 %cmp5806, label %if.then.5808, label %if.end.5833

if.then.5808:                                     ; preds = %sw.bb.5800
  br label %do.body.5809

do.body.5809:                                     ; preds = %if.then.5808
  %3431 = load %struct._object*, %struct._object** %cond5802, align 8
  store %struct._object* %3431, %struct._object** %_py_decref_tmp5811, align 8
  %3432 = load %struct._object*, %struct._object** %_py_decref_tmp5811, align 8
  %ob_refcnt5812 = getelementptr inbounds %struct._object, %struct._object* %3432, i32 0, i32 0
  %3433 = load i64, i64* %ob_refcnt5812, align 8
  %dec5813 = add i64 %3433, -1
  store i64 %dec5813, i64* %ob_refcnt5812, align 8
  %cmp5814 = icmp ne i64 %dec5813, 0
  br i1 %cmp5814, label %if.then.5816, label %if.else.5817

if.then.5816:                                     ; preds = %do.body.5809
  br label %if.end.5820

if.else.5817:                                     ; preds = %do.body.5809
  %3434 = load %struct._object*, %struct._object** %_py_decref_tmp5811, align 8
  %ob_type5818 = getelementptr inbounds %struct._object, %struct._object* %3434, i32 0, i32 1
  %3435 = load %struct._typeobject*, %struct._typeobject** %ob_type5818, align 8
  %tp_dealloc5819 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3435, i32 0, i32 4
  %3436 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5819, align 8
  %3437 = load %struct._object*, %struct._object** %_py_decref_tmp5811, align 8
  call void %3436(%struct._object* %3437)
  br label %if.end.5820

if.end.5820:                                      ; preds = %if.else.5817, %if.then.5816
  br label %do.end.5821

do.end.5821:                                      ; preds = %if.end.5820
  %3438 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5822 = icmp ne i32 %3438, 0
  br i1 %tobool5822, label %if.end.5832, label %if.then.5823

if.then.5823:                                     ; preds = %do.end.5821
  %3439 = load i8*, i8** %next_instr, align 8
  %3440 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5824 = ptrtoint i8* %3439 to i64
  %sub.ptr.rhs.cast5825 = ptrtoint i8* %3440 to i64
  %sub.ptr.sub5826 = sub i64 %sub.ptr.lhs.cast5824, %sub.ptr.rhs.cast5825
  %conv5827 = trunc i64 %sub.ptr.sub5826 to i32
  %3441 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5828 = getelementptr inbounds %struct._frame, %struct._frame* %3441, i32 0, i32 13
  store i32 %conv5827, i32* %f_lasti5828, align 4
  %3442 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5829 = getelementptr i8, i8* %3442, i32 1
  store i8* %incdec.ptr5829, i8** %next_instr, align 8
  %3443 = load i8, i8* %3442, align 1
  %idxprom5830 = zext i8 %3443 to i64
  %arrayidx5831 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5830
  %3444 = load i8*, i8** %arrayidx5831, align 8
  br label %indirectgoto

if.end.5832:                                      ; preds = %do.end.5821
  br label %fast_next_opcode

if.end.5833:                                      ; preds = %sw.bb.5800
  %3445 = load %struct._object*, %struct._object** %cond5802, align 8
  %cmp5834 = icmp eq %struct._object* %3445, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  br i1 %cmp5834, label %if.then.5836, label %if.end.5863

if.then.5836:                                     ; preds = %if.end.5833
  br label %do.body.5837

do.body.5837:                                     ; preds = %if.then.5836
  %3446 = load %struct._object*, %struct._object** %cond5802, align 8
  store %struct._object* %3446, %struct._object** %_py_decref_tmp5839, align 8
  %3447 = load %struct._object*, %struct._object** %_py_decref_tmp5839, align 8
  %ob_refcnt5840 = getelementptr inbounds %struct._object, %struct._object* %3447, i32 0, i32 0
  %3448 = load i64, i64* %ob_refcnt5840, align 8
  %dec5841 = add i64 %3448, -1
  store i64 %dec5841, i64* %ob_refcnt5840, align 8
  %cmp5842 = icmp ne i64 %dec5841, 0
  br i1 %cmp5842, label %if.then.5844, label %if.else.5845

if.then.5844:                                     ; preds = %do.body.5837
  br label %if.end.5848

if.else.5845:                                     ; preds = %do.body.5837
  %3449 = load %struct._object*, %struct._object** %_py_decref_tmp5839, align 8
  %ob_type5846 = getelementptr inbounds %struct._object, %struct._object* %3449, i32 0, i32 1
  %3450 = load %struct._typeobject*, %struct._typeobject** %ob_type5846, align 8
  %tp_dealloc5847 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3450, i32 0, i32 4
  %3451 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5847, align 8
  %3452 = load %struct._object*, %struct._object** %_py_decref_tmp5839, align 8
  call void %3451(%struct._object* %3452)
  br label %if.end.5848

if.end.5848:                                      ; preds = %if.else.5845, %if.then.5844
  br label %do.end.5849

do.end.5849:                                      ; preds = %if.end.5848
  %3453 = load i8*, i8** %first_instr, align 8
  %3454 = load i32, i32* %oparg, align 4
  %idx.ext5850 = sext i32 %3454 to i64
  %add.ptr5851 = getelementptr i8, i8* %3453, i64 %idx.ext5850
  store i8* %add.ptr5851, i8** %next_instr, align 8
  %3455 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5852 = icmp ne i32 %3455, 0
  br i1 %tobool5852, label %if.end.5862, label %if.then.5853

if.then.5853:                                     ; preds = %do.end.5849
  %3456 = load i8*, i8** %next_instr, align 8
  %3457 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5854 = ptrtoint i8* %3456 to i64
  %sub.ptr.rhs.cast5855 = ptrtoint i8* %3457 to i64
  %sub.ptr.sub5856 = sub i64 %sub.ptr.lhs.cast5854, %sub.ptr.rhs.cast5855
  %conv5857 = trunc i64 %sub.ptr.sub5856 to i32
  %3458 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5858 = getelementptr inbounds %struct._frame, %struct._frame* %3458, i32 0, i32 13
  store i32 %conv5857, i32* %f_lasti5858, align 4
  %3459 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5859 = getelementptr i8, i8* %3459, i32 1
  store i8* %incdec.ptr5859, i8** %next_instr, align 8
  %3460 = load i8, i8* %3459, align 1
  %idxprom5860 = zext i8 %3460 to i64
  %arrayidx5861 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5860
  %3461 = load i8*, i8** %arrayidx5861, align 8
  br label %indirectgoto

if.end.5862:                                      ; preds = %do.end.5849
  br label %fast_next_opcode

if.end.5863:                                      ; preds = %if.end.5833
  %3462 = load %struct._object*, %struct._object** %cond5802, align 8
  %call5864 = call i32 @PyObject_IsTrue(%struct._object* %3462)
  store i32 %call5864, i32* %err5805, align 4
  br label %do.body.5865

do.body.5865:                                     ; preds = %if.end.5863
  %3463 = load %struct._object*, %struct._object** %cond5802, align 8
  store %struct._object* %3463, %struct._object** %_py_decref_tmp5867, align 8
  %3464 = load %struct._object*, %struct._object** %_py_decref_tmp5867, align 8
  %ob_refcnt5868 = getelementptr inbounds %struct._object, %struct._object* %3464, i32 0, i32 0
  %3465 = load i64, i64* %ob_refcnt5868, align 8
  %dec5869 = add i64 %3465, -1
  store i64 %dec5869, i64* %ob_refcnt5868, align 8
  %cmp5870 = icmp ne i64 %dec5869, 0
  br i1 %cmp5870, label %if.then.5872, label %if.else.5873

if.then.5872:                                     ; preds = %do.body.5865
  br label %if.end.5876

if.else.5873:                                     ; preds = %do.body.5865
  %3466 = load %struct._object*, %struct._object** %_py_decref_tmp5867, align 8
  %ob_type5874 = getelementptr inbounds %struct._object, %struct._object* %3466, i32 0, i32 1
  %3467 = load %struct._typeobject*, %struct._typeobject** %ob_type5874, align 8
  %tp_dealloc5875 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3467, i32 0, i32 4
  %3468 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5875, align 8
  %3469 = load %struct._object*, %struct._object** %_py_decref_tmp5867, align 8
  call void %3468(%struct._object* %3469)
  br label %if.end.5876

if.end.5876:                                      ; preds = %if.else.5873, %if.then.5872
  br label %do.end.5877

do.end.5877:                                      ; preds = %if.end.5876
  %3470 = load i32, i32* %err5805, align 4
  %cmp5878 = icmp sgt i32 %3470, 0
  br i1 %cmp5878, label %if.then.5880, label %if.else.5883

if.then.5880:                                     ; preds = %do.end.5877
  store i32 0, i32* %err5805, align 4
  %3471 = load i8*, i8** %first_instr, align 8
  %3472 = load i32, i32* %oparg, align 4
  %idx.ext5881 = sext i32 %3472 to i64
  %add.ptr5882 = getelementptr i8, i8* %3471, i64 %idx.ext5881
  store i8* %add.ptr5882, i8** %next_instr, align 8
  br label %if.end.5889

if.else.5883:                                     ; preds = %do.end.5877
  %3473 = load i32, i32* %err5805, align 4
  %cmp5884 = icmp eq i32 %3473, 0
  br i1 %cmp5884, label %if.then.5886, label %if.else.5887

if.then.5886:                                     ; preds = %if.else.5883
  br label %if.end.5888

if.else.5887:                                     ; preds = %if.else.5883
  br label %error

if.end.5888:                                      ; preds = %if.then.5886
  br label %if.end.5889

if.end.5889:                                      ; preds = %if.end.5888, %if.then.5880
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val5891, align 8
  %3474 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5891, align 8
  %_value5896 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3474, i32 0, i32 0
  store i32* %_value5896, i32** %volatile_data5895, align 8
  store i32 0, i32* %order5898, align 4
  %3475 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val5891, align 8
  %3476 = bitcast %struct._Py_atomic_int* %3475 to i8*
  %3477 = load i32, i32* %order5898, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3476, i32 %3477)
  %3478 = load i32, i32* %order5898, align 4
  switch i32 %3478, label %sw.default.5900 [
    i32 2, label %sw.bb.5899
    i32 3, label %sw.bb.5899
    i32 4, label %sw.bb.5899
  ]

sw.bb.5899:                                       ; preds = %if.end.5889, %if.end.5889, %if.end.5889
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.5901

sw.default.5900:                                  ; preds = %if.end.5889
  br label %sw.epilog.5901

sw.epilog.5901:                                   ; preds = %sw.default.5900, %sw.bb.5899
  %3479 = load i32*, i32** %volatile_data5895, align 8
  %3480 = load volatile i32, i32* %3479, align 4
  store i32 %3480, i32* %result5893, align 4
  %3481 = load i32, i32* %order5898, align 4
  switch i32 %3481, label %sw.default.5903 [
    i32 1, label %sw.bb.5902
    i32 3, label %sw.bb.5902
    i32 4, label %sw.bb.5902
  ]

sw.bb.5902:                                       ; preds = %sw.epilog.5901, %sw.epilog.5901, %sw.epilog.5901
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.5904

sw.default.5903:                                  ; preds = %sw.epilog.5901
  br label %sw.epilog.5904

sw.epilog.5904:                                   ; preds = %sw.default.5903, %sw.bb.5902
  %3482 = load i32, i32* %result5893, align 4
  store i32 %3482, i32* %tmp5905
  %3483 = load i32, i32* %tmp5905
  %tobool5906 = icmp ne i32 %3483, 0
  br i1 %tobool5906, label %if.end.5919, label %if.then.5907

if.then.5907:                                     ; preds = %sw.epilog.5904
  %3484 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5908 = icmp ne i32 %3484, 0
  br i1 %tobool5908, label %if.end.5918, label %if.then.5909

if.then.5909:                                     ; preds = %if.then.5907
  %3485 = load i8*, i8** %next_instr, align 8
  %3486 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5910 = ptrtoint i8* %3485 to i64
  %sub.ptr.rhs.cast5911 = ptrtoint i8* %3486 to i64
  %sub.ptr.sub5912 = sub i64 %sub.ptr.lhs.cast5910, %sub.ptr.rhs.cast5911
  %conv5913 = trunc i64 %sub.ptr.sub5912 to i32
  %3487 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5914 = getelementptr inbounds %struct._frame, %struct._frame* %3487, i32 0, i32 13
  store i32 %conv5913, i32* %f_lasti5914, align 4
  %3488 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5915 = getelementptr i8, i8* %3488, i32 1
  store i8* %incdec.ptr5915, i8** %next_instr, align 8
  %3489 = load i8, i8* %3488, align 1
  %idxprom5916 = zext i8 %3489 to i64
  %arrayidx5917 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5916
  %3490 = load i8*, i8** %arrayidx5917, align 8
  br label %indirectgoto

if.end.5918:                                      ; preds = %if.then.5907
  br label %fast_next_opcode

if.end.5919:                                      ; preds = %sw.epilog.5904
  br label %for.cond

TARGET_JUMP_IF_FALSE_OR_POP:                      ; preds = %indirectgoto
  store i32 111, i32* %opcode, align 4
  %3491 = load i8*, i8** %next_instr, align 8
  %add.ptr5920 = getelementptr i8, i8* %3491, i64 2
  store i8* %add.ptr5920, i8** %next_instr, align 8
  %3492 = load i8*, i8** %next_instr, align 8
  %arrayidx5921 = getelementptr i8, i8* %3492, i64 -1
  %3493 = load i8, i8* %arrayidx5921, align 1
  %conv5922 = zext i8 %3493 to i32
  %shl5923 = shl i32 %conv5922, 8
  %3494 = load i8*, i8** %next_instr, align 8
  %arrayidx5924 = getelementptr i8, i8* %3494, i64 -2
  %3495 = load i8, i8* %arrayidx5924, align 1
  %conv5925 = zext i8 %3495 to i32
  %add5926 = add i32 %shl5923, %conv5925
  store i32 %add5926, i32* %oparg, align 4
  br label %sw.bb.5927

sw.bb.5927:                                       ; preds = %dispatch_opcode, %TARGET_JUMP_IF_FALSE_OR_POP
  %3496 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx5930 = getelementptr %struct._object*, %struct._object** %3496, i64 -1
  %3497 = load %struct._object*, %struct._object** %arrayidx5930, align 8
  store %struct._object* %3497, %struct._object** %cond5929, align 8
  %3498 = load %struct._object*, %struct._object** %cond5929, align 8
  %cmp5933 = icmp eq %struct._object* %3498, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  br i1 %cmp5933, label %if.then.5935, label %if.end.5961

if.then.5935:                                     ; preds = %sw.bb.5927
  %3499 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr5936 = getelementptr %struct._object*, %struct._object** %3499, i64 -1
  store %struct._object** %add.ptr5936, %struct._object*** %stack_pointer, align 8
  br label %do.body.5937

do.body.5937:                                     ; preds = %if.then.5935
  %3500 = load %struct._object*, %struct._object** %cond5929, align 8
  store %struct._object* %3500, %struct._object** %_py_decref_tmp5939, align 8
  %3501 = load %struct._object*, %struct._object** %_py_decref_tmp5939, align 8
  %ob_refcnt5940 = getelementptr inbounds %struct._object, %struct._object* %3501, i32 0, i32 0
  %3502 = load i64, i64* %ob_refcnt5940, align 8
  %dec5941 = add i64 %3502, -1
  store i64 %dec5941, i64* %ob_refcnt5940, align 8
  %cmp5942 = icmp ne i64 %dec5941, 0
  br i1 %cmp5942, label %if.then.5944, label %if.else.5945

if.then.5944:                                     ; preds = %do.body.5937
  br label %if.end.5948

if.else.5945:                                     ; preds = %do.body.5937
  %3503 = load %struct._object*, %struct._object** %_py_decref_tmp5939, align 8
  %ob_type5946 = getelementptr inbounds %struct._object, %struct._object* %3503, i32 0, i32 1
  %3504 = load %struct._typeobject*, %struct._typeobject** %ob_type5946, align 8
  %tp_dealloc5947 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3504, i32 0, i32 4
  %3505 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5947, align 8
  %3506 = load %struct._object*, %struct._object** %_py_decref_tmp5939, align 8
  call void %3505(%struct._object* %3506)
  br label %if.end.5948

if.end.5948:                                      ; preds = %if.else.5945, %if.then.5944
  br label %do.end.5949

do.end.5949:                                      ; preds = %if.end.5948
  %3507 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5950 = icmp ne i32 %3507, 0
  br i1 %tobool5950, label %if.end.5960, label %if.then.5951

if.then.5951:                                     ; preds = %do.end.5949
  %3508 = load i8*, i8** %next_instr, align 8
  %3509 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5952 = ptrtoint i8* %3508 to i64
  %sub.ptr.rhs.cast5953 = ptrtoint i8* %3509 to i64
  %sub.ptr.sub5954 = sub i64 %sub.ptr.lhs.cast5952, %sub.ptr.rhs.cast5953
  %conv5955 = trunc i64 %sub.ptr.sub5954 to i32
  %3510 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5956 = getelementptr inbounds %struct._frame, %struct._frame* %3510, i32 0, i32 13
  store i32 %conv5955, i32* %f_lasti5956, align 4
  %3511 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5957 = getelementptr i8, i8* %3511, i32 1
  store i8* %incdec.ptr5957, i8** %next_instr, align 8
  %3512 = load i8, i8* %3511, align 1
  %idxprom5958 = zext i8 %3512 to i64
  %arrayidx5959 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5958
  %3513 = load i8*, i8** %arrayidx5959, align 8
  br label %indirectgoto

if.end.5960:                                      ; preds = %do.end.5949
  br label %fast_next_opcode

if.end.5961:                                      ; preds = %sw.bb.5927
  %3514 = load %struct._object*, %struct._object** %cond5929, align 8
  %cmp5962 = icmp eq %struct._object* %3514, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  br i1 %cmp5962, label %if.then.5964, label %if.end.5978

if.then.5964:                                     ; preds = %if.end.5961
  %3515 = load i8*, i8** %first_instr, align 8
  %3516 = load i32, i32* %oparg, align 4
  %idx.ext5965 = sext i32 %3516 to i64
  %add.ptr5966 = getelementptr i8, i8* %3515, i64 %idx.ext5965
  store i8* %add.ptr5966, i8** %next_instr, align 8
  %3517 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool5967 = icmp ne i32 %3517, 0
  br i1 %tobool5967, label %if.end.5977, label %if.then.5968

if.then.5968:                                     ; preds = %if.then.5964
  %3518 = load i8*, i8** %next_instr, align 8
  %3519 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast5969 = ptrtoint i8* %3518 to i64
  %sub.ptr.rhs.cast5970 = ptrtoint i8* %3519 to i64
  %sub.ptr.sub5971 = sub i64 %sub.ptr.lhs.cast5969, %sub.ptr.rhs.cast5970
  %conv5972 = trunc i64 %sub.ptr.sub5971 to i32
  %3520 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti5973 = getelementptr inbounds %struct._frame, %struct._frame* %3520, i32 0, i32 13
  store i32 %conv5972, i32* %f_lasti5973, align 4
  %3521 = load i8*, i8** %next_instr, align 8
  %incdec.ptr5974 = getelementptr i8, i8* %3521, i32 1
  store i8* %incdec.ptr5974, i8** %next_instr, align 8
  %3522 = load i8, i8* %3521, align 1
  %idxprom5975 = zext i8 %3522 to i64
  %arrayidx5976 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom5975
  %3523 = load i8*, i8** %arrayidx5976, align 8
  br label %indirectgoto

if.end.5977:                                      ; preds = %if.then.5964
  br label %fast_next_opcode

if.end.5978:                                      ; preds = %if.end.5961
  %3524 = load %struct._object*, %struct._object** %cond5929, align 8
  %call5979 = call i32 @PyObject_IsTrue(%struct._object* %3524)
  store i32 %call5979, i32* %err5932, align 4
  %3525 = load i32, i32* %err5932, align 4
  %cmp5980 = icmp sgt i32 %3525, 0
  br i1 %cmp5980, label %if.then.5982, label %if.else.5997

if.then.5982:                                     ; preds = %if.end.5978
  %3526 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr5983 = getelementptr %struct._object*, %struct._object** %3526, i64 -1
  store %struct._object** %add.ptr5983, %struct._object*** %stack_pointer, align 8
  br label %do.body.5984

do.body.5984:                                     ; preds = %if.then.5982
  %3527 = load %struct._object*, %struct._object** %cond5929, align 8
  store %struct._object* %3527, %struct._object** %_py_decref_tmp5986, align 8
  %3528 = load %struct._object*, %struct._object** %_py_decref_tmp5986, align 8
  %ob_refcnt5987 = getelementptr inbounds %struct._object, %struct._object* %3528, i32 0, i32 0
  %3529 = load i64, i64* %ob_refcnt5987, align 8
  %dec5988 = add i64 %3529, -1
  store i64 %dec5988, i64* %ob_refcnt5987, align 8
  %cmp5989 = icmp ne i64 %dec5988, 0
  br i1 %cmp5989, label %if.then.5991, label %if.else.5992

if.then.5991:                                     ; preds = %do.body.5984
  br label %if.end.5995

if.else.5992:                                     ; preds = %do.body.5984
  %3530 = load %struct._object*, %struct._object** %_py_decref_tmp5986, align 8
  %ob_type5993 = getelementptr inbounds %struct._object, %struct._object* %3530, i32 0, i32 1
  %3531 = load %struct._typeobject*, %struct._typeobject** %ob_type5993, align 8
  %tp_dealloc5994 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3531, i32 0, i32 4
  %3532 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc5994, align 8
  %3533 = load %struct._object*, %struct._object** %_py_decref_tmp5986, align 8
  call void %3532(%struct._object* %3533)
  br label %if.end.5995

if.end.5995:                                      ; preds = %if.else.5992, %if.then.5991
  br label %do.end.5996

do.end.5996:                                      ; preds = %if.end.5995
  store i32 0, i32* %err5932, align 4
  br label %if.end.6005

if.else.5997:                                     ; preds = %if.end.5978
  %3534 = load i32, i32* %err5932, align 4
  %cmp5998 = icmp eq i32 %3534, 0
  br i1 %cmp5998, label %if.then.6000, label %if.else.6003

if.then.6000:                                     ; preds = %if.else.5997
  %3535 = load i8*, i8** %first_instr, align 8
  %3536 = load i32, i32* %oparg, align 4
  %idx.ext6001 = sext i32 %3536 to i64
  %add.ptr6002 = getelementptr i8, i8* %3535, i64 %idx.ext6001
  store i8* %add.ptr6002, i8** %next_instr, align 8
  br label %if.end.6004

if.else.6003:                                     ; preds = %if.else.5997
  br label %error

if.end.6004:                                      ; preds = %if.then.6000
  br label %if.end.6005

if.end.6005:                                      ; preds = %if.end.6004, %do.end.5996
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6007, align 8
  %3537 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6007, align 8
  %_value6012 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3537, i32 0, i32 0
  store i32* %_value6012, i32** %volatile_data6011, align 8
  store i32 0, i32* %order6014, align 4
  %3538 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6007, align 8
  %3539 = bitcast %struct._Py_atomic_int* %3538 to i8*
  %3540 = load i32, i32* %order6014, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3539, i32 %3540)
  %3541 = load i32, i32* %order6014, align 4
  switch i32 %3541, label %sw.default.6016 [
    i32 2, label %sw.bb.6015
    i32 3, label %sw.bb.6015
    i32 4, label %sw.bb.6015
  ]

sw.bb.6015:                                       ; preds = %if.end.6005, %if.end.6005, %if.end.6005
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6017

sw.default.6016:                                  ; preds = %if.end.6005
  br label %sw.epilog.6017

sw.epilog.6017:                                   ; preds = %sw.default.6016, %sw.bb.6015
  %3542 = load i32*, i32** %volatile_data6011, align 8
  %3543 = load volatile i32, i32* %3542, align 4
  store i32 %3543, i32* %result6009, align 4
  %3544 = load i32, i32* %order6014, align 4
  switch i32 %3544, label %sw.default.6019 [
    i32 1, label %sw.bb.6018
    i32 3, label %sw.bb.6018
    i32 4, label %sw.bb.6018
  ]

sw.bb.6018:                                       ; preds = %sw.epilog.6017, %sw.epilog.6017, %sw.epilog.6017
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6020

sw.default.6019:                                  ; preds = %sw.epilog.6017
  br label %sw.epilog.6020

sw.epilog.6020:                                   ; preds = %sw.default.6019, %sw.bb.6018
  %3545 = load i32, i32* %result6009, align 4
  store i32 %3545, i32* %tmp6021
  %3546 = load i32, i32* %tmp6021
  %tobool6022 = icmp ne i32 %3546, 0
  br i1 %tobool6022, label %if.end.6035, label %if.then.6023

if.then.6023:                                     ; preds = %sw.epilog.6020
  %3547 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6024 = icmp ne i32 %3547, 0
  br i1 %tobool6024, label %if.end.6034, label %if.then.6025

if.then.6025:                                     ; preds = %if.then.6023
  %3548 = load i8*, i8** %next_instr, align 8
  %3549 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6026 = ptrtoint i8* %3548 to i64
  %sub.ptr.rhs.cast6027 = ptrtoint i8* %3549 to i64
  %sub.ptr.sub6028 = sub i64 %sub.ptr.lhs.cast6026, %sub.ptr.rhs.cast6027
  %conv6029 = trunc i64 %sub.ptr.sub6028 to i32
  %3550 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6030 = getelementptr inbounds %struct._frame, %struct._frame* %3550, i32 0, i32 13
  store i32 %conv6029, i32* %f_lasti6030, align 4
  %3551 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6031 = getelementptr i8, i8* %3551, i32 1
  store i8* %incdec.ptr6031, i8** %next_instr, align 8
  %3552 = load i8, i8* %3551, align 1
  %idxprom6032 = zext i8 %3552 to i64
  %arrayidx6033 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6032
  %3553 = load i8*, i8** %arrayidx6033, align 8
  br label %indirectgoto

if.end.6034:                                      ; preds = %if.then.6023
  br label %fast_next_opcode

if.end.6035:                                      ; preds = %sw.epilog.6020
  br label %for.cond

TARGET_JUMP_IF_TRUE_OR_POP:                       ; preds = %indirectgoto
  store i32 112, i32* %opcode, align 4
  %3554 = load i8*, i8** %next_instr, align 8
  %add.ptr6036 = getelementptr i8, i8* %3554, i64 2
  store i8* %add.ptr6036, i8** %next_instr, align 8
  %3555 = load i8*, i8** %next_instr, align 8
  %arrayidx6037 = getelementptr i8, i8* %3555, i64 -1
  %3556 = load i8, i8* %arrayidx6037, align 1
  %conv6038 = zext i8 %3556 to i32
  %shl6039 = shl i32 %conv6038, 8
  %3557 = load i8*, i8** %next_instr, align 8
  %arrayidx6040 = getelementptr i8, i8* %3557, i64 -2
  %3558 = load i8, i8* %arrayidx6040, align 1
  %conv6041 = zext i8 %3558 to i32
  %add6042 = add i32 %shl6039, %conv6041
  store i32 %add6042, i32* %oparg, align 4
  br label %sw.bb.6043

sw.bb.6043:                                       ; preds = %dispatch_opcode, %TARGET_JUMP_IF_TRUE_OR_POP
  %3559 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6046 = getelementptr %struct._object*, %struct._object** %3559, i64 -1
  %3560 = load %struct._object*, %struct._object** %arrayidx6046, align 8
  store %struct._object* %3560, %struct._object** %cond6045, align 8
  %3561 = load %struct._object*, %struct._object** %cond6045, align 8
  %cmp6049 = icmp eq %struct._object* %3561, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  br i1 %cmp6049, label %if.then.6051, label %if.end.6077

if.then.6051:                                     ; preds = %sw.bb.6043
  %3562 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr6052 = getelementptr %struct._object*, %struct._object** %3562, i64 -1
  store %struct._object** %add.ptr6052, %struct._object*** %stack_pointer, align 8
  br label %do.body.6053

do.body.6053:                                     ; preds = %if.then.6051
  %3563 = load %struct._object*, %struct._object** %cond6045, align 8
  store %struct._object* %3563, %struct._object** %_py_decref_tmp6055, align 8
  %3564 = load %struct._object*, %struct._object** %_py_decref_tmp6055, align 8
  %ob_refcnt6056 = getelementptr inbounds %struct._object, %struct._object* %3564, i32 0, i32 0
  %3565 = load i64, i64* %ob_refcnt6056, align 8
  %dec6057 = add i64 %3565, -1
  store i64 %dec6057, i64* %ob_refcnt6056, align 8
  %cmp6058 = icmp ne i64 %dec6057, 0
  br i1 %cmp6058, label %if.then.6060, label %if.else.6061

if.then.6060:                                     ; preds = %do.body.6053
  br label %if.end.6064

if.else.6061:                                     ; preds = %do.body.6053
  %3566 = load %struct._object*, %struct._object** %_py_decref_tmp6055, align 8
  %ob_type6062 = getelementptr inbounds %struct._object, %struct._object* %3566, i32 0, i32 1
  %3567 = load %struct._typeobject*, %struct._typeobject** %ob_type6062, align 8
  %tp_dealloc6063 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3567, i32 0, i32 4
  %3568 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6063, align 8
  %3569 = load %struct._object*, %struct._object** %_py_decref_tmp6055, align 8
  call void %3568(%struct._object* %3569)
  br label %if.end.6064

if.end.6064:                                      ; preds = %if.else.6061, %if.then.6060
  br label %do.end.6065

do.end.6065:                                      ; preds = %if.end.6064
  %3570 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6066 = icmp ne i32 %3570, 0
  br i1 %tobool6066, label %if.end.6076, label %if.then.6067

if.then.6067:                                     ; preds = %do.end.6065
  %3571 = load i8*, i8** %next_instr, align 8
  %3572 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6068 = ptrtoint i8* %3571 to i64
  %sub.ptr.rhs.cast6069 = ptrtoint i8* %3572 to i64
  %sub.ptr.sub6070 = sub i64 %sub.ptr.lhs.cast6068, %sub.ptr.rhs.cast6069
  %conv6071 = trunc i64 %sub.ptr.sub6070 to i32
  %3573 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6072 = getelementptr inbounds %struct._frame, %struct._frame* %3573, i32 0, i32 13
  store i32 %conv6071, i32* %f_lasti6072, align 4
  %3574 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6073 = getelementptr i8, i8* %3574, i32 1
  store i8* %incdec.ptr6073, i8** %next_instr, align 8
  %3575 = load i8, i8* %3574, align 1
  %idxprom6074 = zext i8 %3575 to i64
  %arrayidx6075 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6074
  %3576 = load i8*, i8** %arrayidx6075, align 8
  br label %indirectgoto

if.end.6076:                                      ; preds = %do.end.6065
  br label %fast_next_opcode

if.end.6077:                                      ; preds = %sw.bb.6043
  %3577 = load %struct._object*, %struct._object** %cond6045, align 8
  %cmp6078 = icmp eq %struct._object* %3577, getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0)
  br i1 %cmp6078, label %if.then.6080, label %if.end.6094

if.then.6080:                                     ; preds = %if.end.6077
  %3578 = load i8*, i8** %first_instr, align 8
  %3579 = load i32, i32* %oparg, align 4
  %idx.ext6081 = sext i32 %3579 to i64
  %add.ptr6082 = getelementptr i8, i8* %3578, i64 %idx.ext6081
  store i8* %add.ptr6082, i8** %next_instr, align 8
  %3580 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6083 = icmp ne i32 %3580, 0
  br i1 %tobool6083, label %if.end.6093, label %if.then.6084

if.then.6084:                                     ; preds = %if.then.6080
  %3581 = load i8*, i8** %next_instr, align 8
  %3582 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6085 = ptrtoint i8* %3581 to i64
  %sub.ptr.rhs.cast6086 = ptrtoint i8* %3582 to i64
  %sub.ptr.sub6087 = sub i64 %sub.ptr.lhs.cast6085, %sub.ptr.rhs.cast6086
  %conv6088 = trunc i64 %sub.ptr.sub6087 to i32
  %3583 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6089 = getelementptr inbounds %struct._frame, %struct._frame* %3583, i32 0, i32 13
  store i32 %conv6088, i32* %f_lasti6089, align 4
  %3584 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6090 = getelementptr i8, i8* %3584, i32 1
  store i8* %incdec.ptr6090, i8** %next_instr, align 8
  %3585 = load i8, i8* %3584, align 1
  %idxprom6091 = zext i8 %3585 to i64
  %arrayidx6092 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6091
  %3586 = load i8*, i8** %arrayidx6092, align 8
  br label %indirectgoto

if.end.6093:                                      ; preds = %if.then.6080
  br label %fast_next_opcode

if.end.6094:                                      ; preds = %if.end.6077
  %3587 = load %struct._object*, %struct._object** %cond6045, align 8
  %call6095 = call i32 @PyObject_IsTrue(%struct._object* %3587)
  store i32 %call6095, i32* %err6048, align 4
  %3588 = load i32, i32* %err6048, align 4
  %cmp6096 = icmp sgt i32 %3588, 0
  br i1 %cmp6096, label %if.then.6098, label %if.else.6101

if.then.6098:                                     ; preds = %if.end.6094
  store i32 0, i32* %err6048, align 4
  %3589 = load i8*, i8** %first_instr, align 8
  %3590 = load i32, i32* %oparg, align 4
  %idx.ext6099 = sext i32 %3590 to i64
  %add.ptr6100 = getelementptr i8, i8* %3589, i64 %idx.ext6099
  store i8* %add.ptr6100, i8** %next_instr, align 8
  br label %if.end.6121

if.else.6101:                                     ; preds = %if.end.6094
  %3591 = load i32, i32* %err6048, align 4
  %cmp6102 = icmp eq i32 %3591, 0
  br i1 %cmp6102, label %if.then.6104, label %if.else.6119

if.then.6104:                                     ; preds = %if.else.6101
  %3592 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr6105 = getelementptr %struct._object*, %struct._object** %3592, i64 -1
  store %struct._object** %add.ptr6105, %struct._object*** %stack_pointer, align 8
  br label %do.body.6106

do.body.6106:                                     ; preds = %if.then.6104
  %3593 = load %struct._object*, %struct._object** %cond6045, align 8
  store %struct._object* %3593, %struct._object** %_py_decref_tmp6108, align 8
  %3594 = load %struct._object*, %struct._object** %_py_decref_tmp6108, align 8
  %ob_refcnt6109 = getelementptr inbounds %struct._object, %struct._object* %3594, i32 0, i32 0
  %3595 = load i64, i64* %ob_refcnt6109, align 8
  %dec6110 = add i64 %3595, -1
  store i64 %dec6110, i64* %ob_refcnt6109, align 8
  %cmp6111 = icmp ne i64 %dec6110, 0
  br i1 %cmp6111, label %if.then.6113, label %if.else.6114

if.then.6113:                                     ; preds = %do.body.6106
  br label %if.end.6117

if.else.6114:                                     ; preds = %do.body.6106
  %3596 = load %struct._object*, %struct._object** %_py_decref_tmp6108, align 8
  %ob_type6115 = getelementptr inbounds %struct._object, %struct._object* %3596, i32 0, i32 1
  %3597 = load %struct._typeobject*, %struct._typeobject** %ob_type6115, align 8
  %tp_dealloc6116 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3597, i32 0, i32 4
  %3598 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6116, align 8
  %3599 = load %struct._object*, %struct._object** %_py_decref_tmp6108, align 8
  call void %3598(%struct._object* %3599)
  br label %if.end.6117

if.end.6117:                                      ; preds = %if.else.6114, %if.then.6113
  br label %do.end.6118

do.end.6118:                                      ; preds = %if.end.6117
  br label %if.end.6120

if.else.6119:                                     ; preds = %if.else.6101
  br label %error

if.end.6120:                                      ; preds = %do.end.6118
  br label %if.end.6121

if.end.6121:                                      ; preds = %if.end.6120, %if.then.6098
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6123, align 8
  %3600 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6123, align 8
  %_value6128 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3600, i32 0, i32 0
  store i32* %_value6128, i32** %volatile_data6127, align 8
  store i32 0, i32* %order6130, align 4
  %3601 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6123, align 8
  %3602 = bitcast %struct._Py_atomic_int* %3601 to i8*
  %3603 = load i32, i32* %order6130, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3602, i32 %3603)
  %3604 = load i32, i32* %order6130, align 4
  switch i32 %3604, label %sw.default.6132 [
    i32 2, label %sw.bb.6131
    i32 3, label %sw.bb.6131
    i32 4, label %sw.bb.6131
  ]

sw.bb.6131:                                       ; preds = %if.end.6121, %if.end.6121, %if.end.6121
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6133

sw.default.6132:                                  ; preds = %if.end.6121
  br label %sw.epilog.6133

sw.epilog.6133:                                   ; preds = %sw.default.6132, %sw.bb.6131
  %3605 = load i32*, i32** %volatile_data6127, align 8
  %3606 = load volatile i32, i32* %3605, align 4
  store i32 %3606, i32* %result6125, align 4
  %3607 = load i32, i32* %order6130, align 4
  switch i32 %3607, label %sw.default.6135 [
    i32 1, label %sw.bb.6134
    i32 3, label %sw.bb.6134
    i32 4, label %sw.bb.6134
  ]

sw.bb.6134:                                       ; preds = %sw.epilog.6133, %sw.epilog.6133, %sw.epilog.6133
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6136

sw.default.6135:                                  ; preds = %sw.epilog.6133
  br label %sw.epilog.6136

sw.epilog.6136:                                   ; preds = %sw.default.6135, %sw.bb.6134
  %3608 = load i32, i32* %result6125, align 4
  store i32 %3608, i32* %tmp6137
  %3609 = load i32, i32* %tmp6137
  %tobool6138 = icmp ne i32 %3609, 0
  br i1 %tobool6138, label %if.end.6151, label %if.then.6139

if.then.6139:                                     ; preds = %sw.epilog.6136
  %3610 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6140 = icmp ne i32 %3610, 0
  br i1 %tobool6140, label %if.end.6150, label %if.then.6141

if.then.6141:                                     ; preds = %if.then.6139
  %3611 = load i8*, i8** %next_instr, align 8
  %3612 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6142 = ptrtoint i8* %3611 to i64
  %sub.ptr.rhs.cast6143 = ptrtoint i8* %3612 to i64
  %sub.ptr.sub6144 = sub i64 %sub.ptr.lhs.cast6142, %sub.ptr.rhs.cast6143
  %conv6145 = trunc i64 %sub.ptr.sub6144 to i32
  %3613 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6146 = getelementptr inbounds %struct._frame, %struct._frame* %3613, i32 0, i32 13
  store i32 %conv6145, i32* %f_lasti6146, align 4
  %3614 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6147 = getelementptr i8, i8* %3614, i32 1
  store i8* %incdec.ptr6147, i8** %next_instr, align 8
  %3615 = load i8, i8* %3614, align 1
  %idxprom6148 = zext i8 %3615 to i64
  %arrayidx6149 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6148
  %3616 = load i8*, i8** %arrayidx6149, align 8
  br label %indirectgoto

if.end.6150:                                      ; preds = %if.then.6139
  br label %fast_next_opcode

if.end.6151:                                      ; preds = %sw.epilog.6136
  br label %for.cond

PRED_JUMP_ABSOLUTE:                               ; No predecessors!
  br label %TARGET_JUMP_ABSOLUTE

TARGET_JUMP_ABSOLUTE:                             ; preds = %PRED_JUMP_ABSOLUTE, %indirectgoto
  store i32 113, i32* %opcode, align 4
  %3617 = load i8*, i8** %next_instr, align 8
  %add.ptr6152 = getelementptr i8, i8* %3617, i64 2
  store i8* %add.ptr6152, i8** %next_instr, align 8
  %3618 = load i8*, i8** %next_instr, align 8
  %arrayidx6153 = getelementptr i8, i8* %3618, i64 -1
  %3619 = load i8, i8* %arrayidx6153, align 1
  %conv6154 = zext i8 %3619 to i32
  %shl6155 = shl i32 %conv6154, 8
  %3620 = load i8*, i8** %next_instr, align 8
  %arrayidx6156 = getelementptr i8, i8* %3620, i64 -2
  %3621 = load i8, i8* %arrayidx6156, align 1
  %conv6157 = zext i8 %3621 to i32
  %add6158 = add i32 %shl6155, %conv6157
  store i32 %add6158, i32* %oparg, align 4
  br label %sw.bb.6159

sw.bb.6159:                                       ; preds = %dispatch_opcode, %TARGET_JUMP_ABSOLUTE
  %3622 = load i8*, i8** %first_instr, align 8
  %3623 = load i32, i32* %oparg, align 4
  %idx.ext6160 = sext i32 %3623 to i64
  %add.ptr6161 = getelementptr i8, i8* %3622, i64 %idx.ext6160
  store i8* %add.ptr6161, i8** %next_instr, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6163, align 8
  %3624 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6163, align 8
  %_value6168 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3624, i32 0, i32 0
  store i32* %_value6168, i32** %volatile_data6167, align 8
  store i32 0, i32* %order6170, align 4
  %3625 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6163, align 8
  %3626 = bitcast %struct._Py_atomic_int* %3625 to i8*
  %3627 = load i32, i32* %order6170, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3626, i32 %3627)
  %3628 = load i32, i32* %order6170, align 4
  switch i32 %3628, label %sw.default.6172 [
    i32 2, label %sw.bb.6171
    i32 3, label %sw.bb.6171
    i32 4, label %sw.bb.6171
  ]

sw.bb.6171:                                       ; preds = %sw.bb.6159, %sw.bb.6159, %sw.bb.6159
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6173

sw.default.6172:                                  ; preds = %sw.bb.6159
  br label %sw.epilog.6173

sw.epilog.6173:                                   ; preds = %sw.default.6172, %sw.bb.6171
  %3629 = load i32*, i32** %volatile_data6167, align 8
  %3630 = load volatile i32, i32* %3629, align 4
  store i32 %3630, i32* %result6165, align 4
  %3631 = load i32, i32* %order6170, align 4
  switch i32 %3631, label %sw.default.6175 [
    i32 1, label %sw.bb.6174
    i32 3, label %sw.bb.6174
    i32 4, label %sw.bb.6174
  ]

sw.bb.6174:                                       ; preds = %sw.epilog.6173, %sw.epilog.6173, %sw.epilog.6173
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6176

sw.default.6175:                                  ; preds = %sw.epilog.6173
  br label %sw.epilog.6176

sw.epilog.6176:                                   ; preds = %sw.default.6175, %sw.bb.6174
  %3632 = load i32, i32* %result6165, align 4
  store i32 %3632, i32* %tmp6177
  %3633 = load i32, i32* %tmp6177
  %tobool6178 = icmp ne i32 %3633, 0
  br i1 %tobool6178, label %if.end.6191, label %if.then.6179

if.then.6179:                                     ; preds = %sw.epilog.6176
  %3634 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6180 = icmp ne i32 %3634, 0
  br i1 %tobool6180, label %if.end.6190, label %if.then.6181

if.then.6181:                                     ; preds = %if.then.6179
  %3635 = load i8*, i8** %next_instr, align 8
  %3636 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6182 = ptrtoint i8* %3635 to i64
  %sub.ptr.rhs.cast6183 = ptrtoint i8* %3636 to i64
  %sub.ptr.sub6184 = sub i64 %sub.ptr.lhs.cast6182, %sub.ptr.rhs.cast6183
  %conv6185 = trunc i64 %sub.ptr.sub6184 to i32
  %3637 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6186 = getelementptr inbounds %struct._frame, %struct._frame* %3637, i32 0, i32 13
  store i32 %conv6185, i32* %f_lasti6186, align 4
  %3638 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6187 = getelementptr i8, i8* %3638, i32 1
  store i8* %incdec.ptr6187, i8** %next_instr, align 8
  %3639 = load i8, i8* %3638, align 1
  %idxprom6188 = zext i8 %3639 to i64
  %arrayidx6189 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6188
  %3640 = load i8*, i8** %arrayidx6189, align 8
  br label %indirectgoto

if.end.6190:                                      ; preds = %if.then.6179
  br label %fast_next_opcode

if.end.6191:                                      ; preds = %sw.epilog.6176
  br label %for.cond

TARGET_GET_ITER:                                  ; preds = %indirectgoto
  store i32 68, i32* %opcode, align 4
  br label %sw.bb.6192

sw.bb.6192:                                       ; preds = %dispatch_opcode, %TARGET_GET_ITER
  %3641 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6194 = getelementptr %struct._object*, %struct._object** %3641, i64 -1
  %3642 = load %struct._object*, %struct._object** %arrayidx6194, align 8
  store %struct._object* %3642, %struct._object** %iterable, align 8
  %3643 = load %struct._object*, %struct._object** %iterable, align 8
  %call6196 = call %struct._object* @PyObject_GetIter(%struct._object* %3643)
  store %struct._object* %call6196, %struct._object** %iter, align 8
  br label %do.body.6197

do.body.6197:                                     ; preds = %sw.bb.6192
  %3644 = load %struct._object*, %struct._object** %iterable, align 8
  store %struct._object* %3644, %struct._object** %_py_decref_tmp6199, align 8
  %3645 = load %struct._object*, %struct._object** %_py_decref_tmp6199, align 8
  %ob_refcnt6200 = getelementptr inbounds %struct._object, %struct._object* %3645, i32 0, i32 0
  %3646 = load i64, i64* %ob_refcnt6200, align 8
  %dec6201 = add i64 %3646, -1
  store i64 %dec6201, i64* %ob_refcnt6200, align 8
  %cmp6202 = icmp ne i64 %dec6201, 0
  br i1 %cmp6202, label %if.then.6204, label %if.else.6205

if.then.6204:                                     ; preds = %do.body.6197
  br label %if.end.6208

if.else.6205:                                     ; preds = %do.body.6197
  %3647 = load %struct._object*, %struct._object** %_py_decref_tmp6199, align 8
  %ob_type6206 = getelementptr inbounds %struct._object, %struct._object* %3647, i32 0, i32 1
  %3648 = load %struct._typeobject*, %struct._typeobject** %ob_type6206, align 8
  %tp_dealloc6207 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3648, i32 0, i32 4
  %3649 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6207, align 8
  %3650 = load %struct._object*, %struct._object** %_py_decref_tmp6199, align 8
  call void %3649(%struct._object* %3650)
  br label %if.end.6208

if.end.6208:                                      ; preds = %if.else.6205, %if.then.6204
  br label %do.end.6209

do.end.6209:                                      ; preds = %if.end.6208
  %3651 = load %struct._object*, %struct._object** %iter, align 8
  %3652 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6210 = getelementptr %struct._object*, %struct._object** %3652, i64 -1
  store %struct._object* %3651, %struct._object** %arrayidx6210, align 8
  %3653 = load %struct._object*, %struct._object** %iter, align 8
  %cmp6211 = icmp eq %struct._object* %3653, null
  br i1 %cmp6211, label %if.then.6213, label %if.end.6214

if.then.6213:                                     ; preds = %do.end.6209
  br label %error

if.end.6214:                                      ; preds = %do.end.6209
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6216, align 8
  %3654 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6216, align 8
  %_value6221 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3654, i32 0, i32 0
  store i32* %_value6221, i32** %volatile_data6220, align 8
  store i32 0, i32* %order6223, align 4
  %3655 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6216, align 8
  %3656 = bitcast %struct._Py_atomic_int* %3655 to i8*
  %3657 = load i32, i32* %order6223, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3656, i32 %3657)
  %3658 = load i32, i32* %order6223, align 4
  switch i32 %3658, label %sw.default.6225 [
    i32 2, label %sw.bb.6224
    i32 3, label %sw.bb.6224
    i32 4, label %sw.bb.6224
  ]

sw.bb.6224:                                       ; preds = %if.end.6214, %if.end.6214, %if.end.6214
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6226

sw.default.6225:                                  ; preds = %if.end.6214
  br label %sw.epilog.6226

sw.epilog.6226:                                   ; preds = %sw.default.6225, %sw.bb.6224
  %3659 = load i32*, i32** %volatile_data6220, align 8
  %3660 = load volatile i32, i32* %3659, align 4
  store i32 %3660, i32* %result6218, align 4
  %3661 = load i32, i32* %order6223, align 4
  switch i32 %3661, label %sw.default.6228 [
    i32 1, label %sw.bb.6227
    i32 3, label %sw.bb.6227
    i32 4, label %sw.bb.6227
  ]

sw.bb.6227:                                       ; preds = %sw.epilog.6226, %sw.epilog.6226, %sw.epilog.6226
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6229

sw.default.6228:                                  ; preds = %sw.epilog.6226
  br label %sw.epilog.6229

sw.epilog.6229:                                   ; preds = %sw.default.6228, %sw.bb.6227
  %3662 = load i32, i32* %result6218, align 4
  store i32 %3662, i32* %tmp6230
  %3663 = load i32, i32* %tmp6230
  %tobool6231 = icmp ne i32 %3663, 0
  br i1 %tobool6231, label %if.end.6244, label %if.then.6232

if.then.6232:                                     ; preds = %sw.epilog.6229
  %3664 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6233 = icmp ne i32 %3664, 0
  br i1 %tobool6233, label %if.end.6243, label %if.then.6234

if.then.6234:                                     ; preds = %if.then.6232
  %3665 = load i8*, i8** %next_instr, align 8
  %3666 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6235 = ptrtoint i8* %3665 to i64
  %sub.ptr.rhs.cast6236 = ptrtoint i8* %3666 to i64
  %sub.ptr.sub6237 = sub i64 %sub.ptr.lhs.cast6235, %sub.ptr.rhs.cast6236
  %conv6238 = trunc i64 %sub.ptr.sub6237 to i32
  %3667 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6239 = getelementptr inbounds %struct._frame, %struct._frame* %3667, i32 0, i32 13
  store i32 %conv6238, i32* %f_lasti6239, align 4
  %3668 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6240 = getelementptr i8, i8* %3668, i32 1
  store i8* %incdec.ptr6240, i8** %next_instr, align 8
  %3669 = load i8, i8* %3668, align 1
  %idxprom6241 = zext i8 %3669 to i64
  %arrayidx6242 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6241
  %3670 = load i8*, i8** %arrayidx6242, align 8
  br label %indirectgoto

if.end.6243:                                      ; preds = %if.then.6232
  br label %fast_next_opcode

if.end.6244:                                      ; preds = %sw.epilog.6229
  br label %for.cond

PRED_FOR_ITER:                                    ; No predecessors!
  br label %TARGET_FOR_ITER

TARGET_FOR_ITER:                                  ; preds = %PRED_FOR_ITER, %indirectgoto
  store i32 93, i32* %opcode, align 4
  %3671 = load i8*, i8** %next_instr, align 8
  %add.ptr6245 = getelementptr i8, i8* %3671, i64 2
  store i8* %add.ptr6245, i8** %next_instr, align 8
  %3672 = load i8*, i8** %next_instr, align 8
  %arrayidx6246 = getelementptr i8, i8* %3672, i64 -1
  %3673 = load i8, i8* %arrayidx6246, align 1
  %conv6247 = zext i8 %3673 to i32
  %shl6248 = shl i32 %conv6247, 8
  %3674 = load i8*, i8** %next_instr, align 8
  %arrayidx6249 = getelementptr i8, i8* %3674, i64 -2
  %3675 = load i8, i8* %arrayidx6249, align 1
  %conv6250 = zext i8 %3675 to i32
  %add6251 = add i32 %shl6248, %conv6250
  store i32 %add6251, i32* %oparg, align 4
  br label %sw.bb.6252

sw.bb.6252:                                       ; preds = %dispatch_opcode, %TARGET_FOR_ITER
  %3676 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6255 = getelementptr %struct._object*, %struct._object** %3676, i64 -1
  %3677 = load %struct._object*, %struct._object** %arrayidx6255, align 8
  store %struct._object* %3677, %struct._object** %iter6254, align 8
  %3678 = load %struct._object*, %struct._object** %iter6254, align 8
  %ob_type6257 = getelementptr inbounds %struct._object, %struct._object* %3678, i32 0, i32 1
  %3679 = load %struct._typeobject*, %struct._typeobject** %ob_type6257, align 8
  %tp_iternext6258 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3679, i32 0, i32 26
  %tp_iternext6259 = bitcast {}** %tp_iternext6258 to %struct._object* (%struct._object*)**
  %3680 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %tp_iternext6259, align 8
  %3681 = load %struct._object*, %struct._object** %iter6254, align 8
  %call6260 = call %struct._object* %3680(%struct._object* %3681)
  store %struct._object* %call6260, %struct._object** %next, align 8
  %3682 = load %struct._object*, %struct._object** %next, align 8
  %cmp6261 = icmp ne %struct._object* %3682, null
  br i1 %cmp6261, label %if.then.6263, label %if.end.6295

if.then.6263:                                     ; preds = %sw.bb.6252
  %3683 = load %struct._object*, %struct._object** %next, align 8
  %3684 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6264 = getelementptr %struct._object*, %struct._object** %3684, i32 1
  store %struct._object** %incdec.ptr6264, %struct._object*** %stack_pointer, align 8
  store %struct._object* %3683, %struct._object** %3684, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6266, align 8
  %3685 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6266, align 8
  %_value6271 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3685, i32 0, i32 0
  store i32* %_value6271, i32** %volatile_data6270, align 8
  store i32 0, i32* %order6273, align 4
  %3686 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6266, align 8
  %3687 = bitcast %struct._Py_atomic_int* %3686 to i8*
  %3688 = load i32, i32* %order6273, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3687, i32 %3688)
  %3689 = load i32, i32* %order6273, align 4
  switch i32 %3689, label %sw.default.6275 [
    i32 2, label %sw.bb.6274
    i32 3, label %sw.bb.6274
    i32 4, label %sw.bb.6274
  ]

sw.bb.6274:                                       ; preds = %if.then.6263, %if.then.6263, %if.then.6263
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6276

sw.default.6275:                                  ; preds = %if.then.6263
  br label %sw.epilog.6276

sw.epilog.6276:                                   ; preds = %sw.default.6275, %sw.bb.6274
  %3690 = load i32*, i32** %volatile_data6270, align 8
  %3691 = load volatile i32, i32* %3690, align 4
  store i32 %3691, i32* %result6268, align 4
  %3692 = load i32, i32* %order6273, align 4
  switch i32 %3692, label %sw.default.6278 [
    i32 1, label %sw.bb.6277
    i32 3, label %sw.bb.6277
    i32 4, label %sw.bb.6277
  ]

sw.bb.6277:                                       ; preds = %sw.epilog.6276, %sw.epilog.6276, %sw.epilog.6276
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6279

sw.default.6278:                                  ; preds = %sw.epilog.6276
  br label %sw.epilog.6279

sw.epilog.6279:                                   ; preds = %sw.default.6278, %sw.bb.6277
  %3693 = load i32, i32* %result6268, align 4
  store i32 %3693, i32* %tmp6280
  %3694 = load i32, i32* %tmp6280
  %tobool6281 = icmp ne i32 %3694, 0
  br i1 %tobool6281, label %if.end.6294, label %if.then.6282

if.then.6282:                                     ; preds = %sw.epilog.6279
  %3695 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6283 = icmp ne i32 %3695, 0
  br i1 %tobool6283, label %if.end.6293, label %if.then.6284

if.then.6284:                                     ; preds = %if.then.6282
  %3696 = load i8*, i8** %next_instr, align 8
  %3697 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6285 = ptrtoint i8* %3696 to i64
  %sub.ptr.rhs.cast6286 = ptrtoint i8* %3697 to i64
  %sub.ptr.sub6287 = sub i64 %sub.ptr.lhs.cast6285, %sub.ptr.rhs.cast6286
  %conv6288 = trunc i64 %sub.ptr.sub6287 to i32
  %3698 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6289 = getelementptr inbounds %struct._frame, %struct._frame* %3698, i32 0, i32 13
  store i32 %conv6288, i32* %f_lasti6289, align 4
  %3699 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6290 = getelementptr i8, i8* %3699, i32 1
  store i8* %incdec.ptr6290, i8** %next_instr, align 8
  %3700 = load i8, i8* %3699, align 1
  %idxprom6291 = zext i8 %3700 to i64
  %arrayidx6292 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6291
  %3701 = load i8*, i8** %arrayidx6292, align 8
  br label %indirectgoto

if.end.6293:                                      ; preds = %if.then.6282
  br label %fast_next_opcode

if.end.6294:                                      ; preds = %sw.epilog.6279
  br label %for.cond

if.end.6295:                                      ; preds = %sw.bb.6252
  %call6296 = call %struct._object* @PyErr_Occurred()
  %tobool6297 = icmp ne %struct._object* %call6296, null
  br i1 %tobool6297, label %if.then.6298, label %if.end.6311

if.then.6298:                                     ; preds = %if.end.6295
  %3702 = load %struct._object*, %struct._object** @PyExc_StopIteration, align 8
  %call6299 = call i32 @PyErr_ExceptionMatches(%struct._object* %3702)
  %tobool6300 = icmp ne i32 %call6299, 0
  br i1 %tobool6300, label %if.else.6302, label %if.then.6301

if.then.6301:                                     ; preds = %if.then.6298
  br label %error

if.else.6302:                                     ; preds = %if.then.6298
  %3703 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc6303 = getelementptr inbounds %struct._ts, %struct._ts* %3703, i32 0, i32 10
  %3704 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc6303, align 8
  %cmp6304 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %3704, null
  br i1 %cmp6304, label %if.then.6306, label %if.end.6309

if.then.6306:                                     ; preds = %if.else.6302
  %3705 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc6307 = getelementptr inbounds %struct._ts, %struct._ts* %3705, i32 0, i32 10
  %3706 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc6307, align 8
  %3707 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj6308 = getelementptr inbounds %struct._ts, %struct._ts* %3707, i32 0, i32 12
  %3708 = load %struct._object*, %struct._object** %c_traceobj6308, align 8
  %3709 = load %struct._ts*, %struct._ts** %tstate, align 8
  %3710 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @call_exc_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %3706, %struct._object* %3708, %struct._ts* %3709, %struct._frame* %3710)
  br label %if.end.6309

if.end.6309:                                      ; preds = %if.then.6306, %if.else.6302
  br label %if.end.6310

if.end.6310:                                      ; preds = %if.end.6309
  call void @PyErr_Clear()
  br label %if.end.6311

if.end.6311:                                      ; preds = %if.end.6310, %if.end.6295
  %3711 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr6312 = getelementptr %struct._object*, %struct._object** %3711, i64 -1
  store %struct._object** %add.ptr6312, %struct._object*** %stack_pointer, align 8
  br label %do.body.6313

do.body.6313:                                     ; preds = %if.end.6311
  %3712 = load %struct._object*, %struct._object** %iter6254, align 8
  store %struct._object* %3712, %struct._object** %_py_decref_tmp6315, align 8
  %3713 = load %struct._object*, %struct._object** %_py_decref_tmp6315, align 8
  %ob_refcnt6316 = getelementptr inbounds %struct._object, %struct._object* %3713, i32 0, i32 0
  %3714 = load i64, i64* %ob_refcnt6316, align 8
  %dec6317 = add i64 %3714, -1
  store i64 %dec6317, i64* %ob_refcnt6316, align 8
  %cmp6318 = icmp ne i64 %dec6317, 0
  br i1 %cmp6318, label %if.then.6320, label %if.else.6321

if.then.6320:                                     ; preds = %do.body.6313
  br label %if.end.6324

if.else.6321:                                     ; preds = %do.body.6313
  %3715 = load %struct._object*, %struct._object** %_py_decref_tmp6315, align 8
  %ob_type6322 = getelementptr inbounds %struct._object, %struct._object* %3715, i32 0, i32 1
  %3716 = load %struct._typeobject*, %struct._typeobject** %ob_type6322, align 8
  %tp_dealloc6323 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3716, i32 0, i32 4
  %3717 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6323, align 8
  %3718 = load %struct._object*, %struct._object** %_py_decref_tmp6315, align 8
  call void %3717(%struct._object* %3718)
  br label %if.end.6324

if.end.6324:                                      ; preds = %if.else.6321, %if.then.6320
  br label %do.end.6325

do.end.6325:                                      ; preds = %if.end.6324
  %3719 = load i32, i32* %oparg, align 4
  %3720 = load i8*, i8** %next_instr, align 8
  %idx.ext6326 = sext i32 %3719 to i64
  %add.ptr6327 = getelementptr i8, i8* %3720, i64 %idx.ext6326
  store i8* %add.ptr6327, i8** %next_instr, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6329, align 8
  %3721 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6329, align 8
  %_value6334 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3721, i32 0, i32 0
  store i32* %_value6334, i32** %volatile_data6333, align 8
  store i32 0, i32* %order6336, align 4
  %3722 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6329, align 8
  %3723 = bitcast %struct._Py_atomic_int* %3722 to i8*
  %3724 = load i32, i32* %order6336, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3723, i32 %3724)
  %3725 = load i32, i32* %order6336, align 4
  switch i32 %3725, label %sw.default.6338 [
    i32 2, label %sw.bb.6337
    i32 3, label %sw.bb.6337
    i32 4, label %sw.bb.6337
  ]

sw.bb.6337:                                       ; preds = %do.end.6325, %do.end.6325, %do.end.6325
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6339

sw.default.6338:                                  ; preds = %do.end.6325
  br label %sw.epilog.6339

sw.epilog.6339:                                   ; preds = %sw.default.6338, %sw.bb.6337
  %3726 = load i32*, i32** %volatile_data6333, align 8
  %3727 = load volatile i32, i32* %3726, align 4
  store i32 %3727, i32* %result6331, align 4
  %3728 = load i32, i32* %order6336, align 4
  switch i32 %3728, label %sw.default.6341 [
    i32 1, label %sw.bb.6340
    i32 3, label %sw.bb.6340
    i32 4, label %sw.bb.6340
  ]

sw.bb.6340:                                       ; preds = %sw.epilog.6339, %sw.epilog.6339, %sw.epilog.6339
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6342

sw.default.6341:                                  ; preds = %sw.epilog.6339
  br label %sw.epilog.6342

sw.epilog.6342:                                   ; preds = %sw.default.6341, %sw.bb.6340
  %3729 = load i32, i32* %result6331, align 4
  store i32 %3729, i32* %tmp6343
  %3730 = load i32, i32* %tmp6343
  %tobool6344 = icmp ne i32 %3730, 0
  br i1 %tobool6344, label %if.end.6357, label %if.then.6345

if.then.6345:                                     ; preds = %sw.epilog.6342
  %3731 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6346 = icmp ne i32 %3731, 0
  br i1 %tobool6346, label %if.end.6356, label %if.then.6347

if.then.6347:                                     ; preds = %if.then.6345
  %3732 = load i8*, i8** %next_instr, align 8
  %3733 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6348 = ptrtoint i8* %3732 to i64
  %sub.ptr.rhs.cast6349 = ptrtoint i8* %3733 to i64
  %sub.ptr.sub6350 = sub i64 %sub.ptr.lhs.cast6348, %sub.ptr.rhs.cast6349
  %conv6351 = trunc i64 %sub.ptr.sub6350 to i32
  %3734 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6352 = getelementptr inbounds %struct._frame, %struct._frame* %3734, i32 0, i32 13
  store i32 %conv6351, i32* %f_lasti6352, align 4
  %3735 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6353 = getelementptr i8, i8* %3735, i32 1
  store i8* %incdec.ptr6353, i8** %next_instr, align 8
  %3736 = load i8, i8* %3735, align 1
  %idxprom6354 = zext i8 %3736 to i64
  %arrayidx6355 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6354
  %3737 = load i8*, i8** %arrayidx6355, align 8
  br label %indirectgoto

if.end.6356:                                      ; preds = %if.then.6345
  br label %fast_next_opcode

if.end.6357:                                      ; preds = %sw.epilog.6342
  br label %for.cond

TARGET_BREAK_LOOP:                                ; preds = %indirectgoto
  store i32 80, i32* %opcode, align 4
  br label %sw.bb.6358

sw.bb.6358:                                       ; preds = %dispatch_opcode, %TARGET_BREAK_LOOP
  store i32 16, i32* %why, align 4
  br label %fast_block_end

TARGET_CONTINUE_LOOP:                             ; preds = %indirectgoto
  store i32 119, i32* %opcode, align 4
  %3738 = load i8*, i8** %next_instr, align 8
  %add.ptr6359 = getelementptr i8, i8* %3738, i64 2
  store i8* %add.ptr6359, i8** %next_instr, align 8
  %3739 = load i8*, i8** %next_instr, align 8
  %arrayidx6360 = getelementptr i8, i8* %3739, i64 -1
  %3740 = load i8, i8* %arrayidx6360, align 1
  %conv6361 = zext i8 %3740 to i32
  %shl6362 = shl i32 %conv6361, 8
  %3741 = load i8*, i8** %next_instr, align 8
  %arrayidx6363 = getelementptr i8, i8* %3741, i64 -2
  %3742 = load i8, i8* %arrayidx6363, align 1
  %conv6364 = zext i8 %3742 to i32
  %add6365 = add i32 %shl6362, %conv6364
  store i32 %add6365, i32* %oparg, align 4
  br label %sw.bb.6366

sw.bb.6366:                                       ; preds = %dispatch_opcode, %TARGET_CONTINUE_LOOP
  %3743 = load i32, i32* %oparg, align 4
  %conv6367 = sext i32 %3743 to i64
  %call6368 = call %struct._object* @PyLong_FromLong(i64 %conv6367)
  store %struct._object* %call6368, %struct._object** %retval1, align 8
  %3744 = load %struct._object*, %struct._object** %retval1, align 8
  %cmp6369 = icmp eq %struct._object* %3744, null
  br i1 %cmp6369, label %if.then.6371, label %if.end.6372

if.then.6371:                                     ; preds = %sw.bb.6366
  br label %error

if.end.6372:                                      ; preds = %sw.bb.6366
  store i32 32, i32* %why, align 4
  br label %fast_block_end

TARGET_SETUP_LOOP:                                ; preds = %indirectgoto
  store i32 120, i32* %opcode, align 4
  %3745 = load i8*, i8** %next_instr, align 8
  %add.ptr6373 = getelementptr i8, i8* %3745, i64 2
  store i8* %add.ptr6373, i8** %next_instr, align 8
  %3746 = load i8*, i8** %next_instr, align 8
  %arrayidx6374 = getelementptr i8, i8* %3746, i64 -1
  %3747 = load i8, i8* %arrayidx6374, align 1
  %conv6375 = zext i8 %3747 to i32
  %shl6376 = shl i32 %conv6375, 8
  %3748 = load i8*, i8** %next_instr, align 8
  %arrayidx6377 = getelementptr i8, i8* %3748, i64 -2
  %3749 = load i8, i8* %arrayidx6377, align 1
  %conv6378 = zext i8 %3749 to i32
  %add6379 = add i32 %shl6376, %conv6378
  store i32 %add6379, i32* %oparg, align 4
  br label %sw.bb.6380

sw.bb.6380:                                       ; preds = %dispatch_opcode, %TARGET_SETUP_LOOP
  br label %_setup_finally

TARGET_SETUP_EXCEPT:                              ; preds = %indirectgoto
  store i32 121, i32* %opcode, align 4
  %3750 = load i8*, i8** %next_instr, align 8
  %add.ptr6381 = getelementptr i8, i8* %3750, i64 2
  store i8* %add.ptr6381, i8** %next_instr, align 8
  %3751 = load i8*, i8** %next_instr, align 8
  %arrayidx6382 = getelementptr i8, i8* %3751, i64 -1
  %3752 = load i8, i8* %arrayidx6382, align 1
  %conv6383 = zext i8 %3752 to i32
  %shl6384 = shl i32 %conv6383, 8
  %3753 = load i8*, i8** %next_instr, align 8
  %arrayidx6385 = getelementptr i8, i8* %3753, i64 -2
  %3754 = load i8, i8* %arrayidx6385, align 1
  %conv6386 = zext i8 %3754 to i32
  %add6387 = add i32 %shl6384, %conv6386
  store i32 %add6387, i32* %oparg, align 4
  br label %sw.bb.6388

sw.bb.6388:                                       ; preds = %dispatch_opcode, %TARGET_SETUP_EXCEPT
  br label %_setup_finally

TARGET_SETUP_FINALLY:                             ; preds = %indirectgoto
  store i32 122, i32* %opcode, align 4
  %3755 = load i8*, i8** %next_instr, align 8
  %add.ptr6389 = getelementptr i8, i8* %3755, i64 2
  store i8* %add.ptr6389, i8** %next_instr, align 8
  %3756 = load i8*, i8** %next_instr, align 8
  %arrayidx6390 = getelementptr i8, i8* %3756, i64 -1
  %3757 = load i8, i8* %arrayidx6390, align 1
  %conv6391 = zext i8 %3757 to i32
  %shl6392 = shl i32 %conv6391, 8
  %3758 = load i8*, i8** %next_instr, align 8
  %arrayidx6393 = getelementptr i8, i8* %3758, i64 -2
  %3759 = load i8, i8* %arrayidx6393, align 1
  %conv6394 = zext i8 %3759 to i32
  %add6395 = add i32 %shl6392, %conv6394
  store i32 %add6395, i32* %oparg, align 4
  br label %sw.bb.6396

sw.bb.6396:                                       ; preds = %dispatch_opcode, %TARGET_SETUP_FINALLY
  br label %_setup_finally

_setup_finally:                                   ; preds = %sw.bb.6396, %sw.bb.6388, %sw.bb.6380
  %3760 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %3761 = load i32, i32* %opcode, align 4
  %3762 = load i8*, i8** %next_instr, align 8
  %3763 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6397 = ptrtoint i8* %3762 to i64
  %sub.ptr.rhs.cast6398 = ptrtoint i8* %3763 to i64
  %sub.ptr.sub6399 = sub i64 %sub.ptr.lhs.cast6397, %sub.ptr.rhs.cast6398
  %conv6400 = trunc i64 %sub.ptr.sub6399 to i32
  %3764 = load i32, i32* %oparg, align 4
  %add6401 = add i32 %conv6400, %3764
  %3765 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %3766 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack6402 = getelementptr inbounds %struct._frame, %struct._frame* %3766, i32 0, i32 6
  %3767 = load %struct._object**, %struct._object*** %f_valuestack6402, align 8
  %sub.ptr.lhs.cast6403 = ptrtoint %struct._object** %3765 to i64
  %sub.ptr.rhs.cast6404 = ptrtoint %struct._object** %3767 to i64
  %sub.ptr.sub6405 = sub i64 %sub.ptr.lhs.cast6403, %sub.ptr.rhs.cast6404
  %sub.ptr.div6406 = sdiv exact i64 %sub.ptr.sub6405, 8
  %conv6407 = trunc i64 %sub.ptr.div6406 to i32
  call void @PyFrame_BlockSetup(%struct._frame* %3760, i32 %3761, i32 %add6401, i32 %conv6407)
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6409, align 8
  %3768 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6409, align 8
  %_value6414 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3768, i32 0, i32 0
  store i32* %_value6414, i32** %volatile_data6413, align 8
  store i32 0, i32* %order6416, align 4
  %3769 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6409, align 8
  %3770 = bitcast %struct._Py_atomic_int* %3769 to i8*
  %3771 = load i32, i32* %order6416, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3770, i32 %3771)
  %3772 = load i32, i32* %order6416, align 4
  switch i32 %3772, label %sw.default.6418 [
    i32 2, label %sw.bb.6417
    i32 3, label %sw.bb.6417
    i32 4, label %sw.bb.6417
  ]

sw.bb.6417:                                       ; preds = %_setup_finally, %_setup_finally, %_setup_finally
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6419

sw.default.6418:                                  ; preds = %_setup_finally
  br label %sw.epilog.6419

sw.epilog.6419:                                   ; preds = %sw.default.6418, %sw.bb.6417
  %3773 = load i32*, i32** %volatile_data6413, align 8
  %3774 = load volatile i32, i32* %3773, align 4
  store i32 %3774, i32* %result6411, align 4
  %3775 = load i32, i32* %order6416, align 4
  switch i32 %3775, label %sw.default.6421 [
    i32 1, label %sw.bb.6420
    i32 3, label %sw.bb.6420
    i32 4, label %sw.bb.6420
  ]

sw.bb.6420:                                       ; preds = %sw.epilog.6419, %sw.epilog.6419, %sw.epilog.6419
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6422

sw.default.6421:                                  ; preds = %sw.epilog.6419
  br label %sw.epilog.6422

sw.epilog.6422:                                   ; preds = %sw.default.6421, %sw.bb.6420
  %3776 = load i32, i32* %result6411, align 4
  store i32 %3776, i32* %tmp6423
  %3777 = load i32, i32* %tmp6423
  %tobool6424 = icmp ne i32 %3777, 0
  br i1 %tobool6424, label %if.end.6437, label %if.then.6425

if.then.6425:                                     ; preds = %sw.epilog.6422
  %3778 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6426 = icmp ne i32 %3778, 0
  br i1 %tobool6426, label %if.end.6436, label %if.then.6427

if.then.6427:                                     ; preds = %if.then.6425
  %3779 = load i8*, i8** %next_instr, align 8
  %3780 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6428 = ptrtoint i8* %3779 to i64
  %sub.ptr.rhs.cast6429 = ptrtoint i8* %3780 to i64
  %sub.ptr.sub6430 = sub i64 %sub.ptr.lhs.cast6428, %sub.ptr.rhs.cast6429
  %conv6431 = trunc i64 %sub.ptr.sub6430 to i32
  %3781 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6432 = getelementptr inbounds %struct._frame, %struct._frame* %3781, i32 0, i32 13
  store i32 %conv6431, i32* %f_lasti6432, align 4
  %3782 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6433 = getelementptr i8, i8* %3782, i32 1
  store i8* %incdec.ptr6433, i8** %next_instr, align 8
  %3783 = load i8, i8* %3782, align 1
  %idxprom6434 = zext i8 %3783 to i64
  %arrayidx6435 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6434
  %3784 = load i8*, i8** %arrayidx6435, align 8
  br label %indirectgoto

if.end.6436:                                      ; preds = %if.then.6425
  br label %fast_next_opcode

if.end.6437:                                      ; preds = %sw.epilog.6422
  br label %for.cond

TARGET_SETUP_WITH:                                ; preds = %indirectgoto
  store i32 143, i32* %opcode, align 4
  %3785 = load i8*, i8** %next_instr, align 8
  %add.ptr6438 = getelementptr i8, i8* %3785, i64 2
  store i8* %add.ptr6438, i8** %next_instr, align 8
  %3786 = load i8*, i8** %next_instr, align 8
  %arrayidx6439 = getelementptr i8, i8* %3786, i64 -1
  %3787 = load i8, i8* %arrayidx6439, align 1
  %conv6440 = zext i8 %3787 to i32
  %shl6441 = shl i32 %conv6440, 8
  %3788 = load i8*, i8** %next_instr, align 8
  %arrayidx6442 = getelementptr i8, i8* %3788, i64 -2
  %3789 = load i8, i8* %arrayidx6442, align 1
  %conv6443 = zext i8 %3789 to i32
  %add6444 = add i32 %shl6441, %conv6443
  store i32 %add6444, i32* %oparg, align 4
  br label %sw.bb.6445

sw.bb.6445:                                       ; preds = %dispatch_opcode, %TARGET_SETUP_WITH
  %3790 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6447 = getelementptr %struct._object*, %struct._object** %3790, i64 -1
  %3791 = load %struct._object*, %struct._object** %arrayidx6447, align 8
  store %struct._object* %3791, %struct._object** %mgr, align 8
  %3792 = load %struct._object*, %struct._object** %mgr, align 8
  %call6449 = call %struct._object* @special_lookup(%struct._object* %3792, %struct._Py_Identifier* @PyEval_EvalFrameEx.PyId___exit__)
  store %struct._object* %call6449, %struct._object** %exit, align 8
  %3793 = load %struct._object*, %struct._object** %exit, align 8
  %cmp6453 = icmp eq %struct._object* %3793, null
  br i1 %cmp6453, label %if.then.6455, label %if.end.6456

if.then.6455:                                     ; preds = %sw.bb.6445
  br label %error

if.end.6456:                                      ; preds = %sw.bb.6445
  %3794 = load %struct._object*, %struct._object** %exit, align 8
  %3795 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6457 = getelementptr %struct._object*, %struct._object** %3795, i64 -1
  store %struct._object* %3794, %struct._object** %arrayidx6457, align 8
  %3796 = load %struct._object*, %struct._object** %mgr, align 8
  %call6458 = call %struct._object* @special_lookup(%struct._object* %3796, %struct._Py_Identifier* @PyEval_EvalFrameEx.PyId___enter__)
  store %struct._object* %call6458, %struct._object** %enter, align 8
  br label %do.body.6459

do.body.6459:                                     ; preds = %if.end.6456
  %3797 = load %struct._object*, %struct._object** %mgr, align 8
  store %struct._object* %3797, %struct._object** %_py_decref_tmp6461, align 8
  %3798 = load %struct._object*, %struct._object** %_py_decref_tmp6461, align 8
  %ob_refcnt6462 = getelementptr inbounds %struct._object, %struct._object* %3798, i32 0, i32 0
  %3799 = load i64, i64* %ob_refcnt6462, align 8
  %dec6463 = add i64 %3799, -1
  store i64 %dec6463, i64* %ob_refcnt6462, align 8
  %cmp6464 = icmp ne i64 %dec6463, 0
  br i1 %cmp6464, label %if.then.6466, label %if.else.6467

if.then.6466:                                     ; preds = %do.body.6459
  br label %if.end.6470

if.else.6467:                                     ; preds = %do.body.6459
  %3800 = load %struct._object*, %struct._object** %_py_decref_tmp6461, align 8
  %ob_type6468 = getelementptr inbounds %struct._object, %struct._object* %3800, i32 0, i32 1
  %3801 = load %struct._typeobject*, %struct._typeobject** %ob_type6468, align 8
  %tp_dealloc6469 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3801, i32 0, i32 4
  %3802 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6469, align 8
  %3803 = load %struct._object*, %struct._object** %_py_decref_tmp6461, align 8
  call void %3802(%struct._object* %3803)
  br label %if.end.6470

if.end.6470:                                      ; preds = %if.else.6467, %if.then.6466
  br label %do.end.6471

do.end.6471:                                      ; preds = %if.end.6470
  %3804 = load %struct._object*, %struct._object** %enter, align 8
  %cmp6472 = icmp eq %struct._object* %3804, null
  br i1 %cmp6472, label %if.then.6474, label %if.end.6475

if.then.6474:                                     ; preds = %do.end.6471
  br label %error

if.end.6475:                                      ; preds = %do.end.6471
  %3805 = load %struct._object*, %struct._object** %enter, align 8
  %call6476 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %3805, i8* null)
  store %struct._object* %call6476, %struct._object** %res6452, align 8
  br label %do.body.6477

do.body.6477:                                     ; preds = %if.end.6475
  %3806 = load %struct._object*, %struct._object** %enter, align 8
  store %struct._object* %3806, %struct._object** %_py_decref_tmp6479, align 8
  %3807 = load %struct._object*, %struct._object** %_py_decref_tmp6479, align 8
  %ob_refcnt6480 = getelementptr inbounds %struct._object, %struct._object* %3807, i32 0, i32 0
  %3808 = load i64, i64* %ob_refcnt6480, align 8
  %dec6481 = add i64 %3808, -1
  store i64 %dec6481, i64* %ob_refcnt6480, align 8
  %cmp6482 = icmp ne i64 %dec6481, 0
  br i1 %cmp6482, label %if.then.6484, label %if.else.6485

if.then.6484:                                     ; preds = %do.body.6477
  br label %if.end.6488

if.else.6485:                                     ; preds = %do.body.6477
  %3809 = load %struct._object*, %struct._object** %_py_decref_tmp6479, align 8
  %ob_type6486 = getelementptr inbounds %struct._object, %struct._object* %3809, i32 0, i32 1
  %3810 = load %struct._typeobject*, %struct._typeobject** %ob_type6486, align 8
  %tp_dealloc6487 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3810, i32 0, i32 4
  %3811 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6487, align 8
  %3812 = load %struct._object*, %struct._object** %_py_decref_tmp6479, align 8
  call void %3811(%struct._object* %3812)
  br label %if.end.6488

if.end.6488:                                      ; preds = %if.else.6485, %if.then.6484
  br label %do.end.6489

do.end.6489:                                      ; preds = %if.end.6488
  %3813 = load %struct._object*, %struct._object** %res6452, align 8
  %cmp6490 = icmp eq %struct._object* %3813, null
  br i1 %cmp6490, label %if.then.6492, label %if.end.6493

if.then.6492:                                     ; preds = %do.end.6489
  br label %error

if.end.6493:                                      ; preds = %do.end.6489
  %3814 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %3815 = load i8*, i8** %next_instr, align 8
  %3816 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6494 = ptrtoint i8* %3815 to i64
  %sub.ptr.rhs.cast6495 = ptrtoint i8* %3816 to i64
  %sub.ptr.sub6496 = sub i64 %sub.ptr.lhs.cast6494, %sub.ptr.rhs.cast6495
  %conv6497 = trunc i64 %sub.ptr.sub6496 to i32
  %3817 = load i32, i32* %oparg, align 4
  %add6498 = add i32 %conv6497, %3817
  %3818 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %3819 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack6499 = getelementptr inbounds %struct._frame, %struct._frame* %3819, i32 0, i32 6
  %3820 = load %struct._object**, %struct._object*** %f_valuestack6499, align 8
  %sub.ptr.lhs.cast6500 = ptrtoint %struct._object** %3818 to i64
  %sub.ptr.rhs.cast6501 = ptrtoint %struct._object** %3820 to i64
  %sub.ptr.sub6502 = sub i64 %sub.ptr.lhs.cast6500, %sub.ptr.rhs.cast6501
  %sub.ptr.div6503 = sdiv exact i64 %sub.ptr.sub6502, 8
  %conv6504 = trunc i64 %sub.ptr.div6503 to i32
  call void @PyFrame_BlockSetup(%struct._frame* %3814, i32 122, i32 %add6498, i32 %conv6504)
  %3821 = load %struct._object*, %struct._object** %res6452, align 8
  %3822 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6505 = getelementptr %struct._object*, %struct._object** %3822, i32 1
  store %struct._object** %incdec.ptr6505, %struct._object*** %stack_pointer, align 8
  store %struct._object* %3821, %struct._object** %3822, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6507, align 8
  %3823 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6507, align 8
  %_value6512 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3823, i32 0, i32 0
  store i32* %_value6512, i32** %volatile_data6511, align 8
  store i32 0, i32* %order6514, align 4
  %3824 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6507, align 8
  %3825 = bitcast %struct._Py_atomic_int* %3824 to i8*
  %3826 = load i32, i32* %order6514, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3825, i32 %3826)
  %3827 = load i32, i32* %order6514, align 4
  switch i32 %3827, label %sw.default.6516 [
    i32 2, label %sw.bb.6515
    i32 3, label %sw.bb.6515
    i32 4, label %sw.bb.6515
  ]

sw.bb.6515:                                       ; preds = %if.end.6493, %if.end.6493, %if.end.6493
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6517

sw.default.6516:                                  ; preds = %if.end.6493
  br label %sw.epilog.6517

sw.epilog.6517:                                   ; preds = %sw.default.6516, %sw.bb.6515
  %3828 = load i32*, i32** %volatile_data6511, align 8
  %3829 = load volatile i32, i32* %3828, align 4
  store i32 %3829, i32* %result6509, align 4
  %3830 = load i32, i32* %order6514, align 4
  switch i32 %3830, label %sw.default.6519 [
    i32 1, label %sw.bb.6518
    i32 3, label %sw.bb.6518
    i32 4, label %sw.bb.6518
  ]

sw.bb.6518:                                       ; preds = %sw.epilog.6517, %sw.epilog.6517, %sw.epilog.6517
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6520

sw.default.6519:                                  ; preds = %sw.epilog.6517
  br label %sw.epilog.6520

sw.epilog.6520:                                   ; preds = %sw.default.6519, %sw.bb.6518
  %3831 = load i32, i32* %result6509, align 4
  store i32 %3831, i32* %tmp6521
  %3832 = load i32, i32* %tmp6521
  %tobool6522 = icmp ne i32 %3832, 0
  br i1 %tobool6522, label %if.end.6535, label %if.then.6523

if.then.6523:                                     ; preds = %sw.epilog.6520
  %3833 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6524 = icmp ne i32 %3833, 0
  br i1 %tobool6524, label %if.end.6534, label %if.then.6525

if.then.6525:                                     ; preds = %if.then.6523
  %3834 = load i8*, i8** %next_instr, align 8
  %3835 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6526 = ptrtoint i8* %3834 to i64
  %sub.ptr.rhs.cast6527 = ptrtoint i8* %3835 to i64
  %sub.ptr.sub6528 = sub i64 %sub.ptr.lhs.cast6526, %sub.ptr.rhs.cast6527
  %conv6529 = trunc i64 %sub.ptr.sub6528 to i32
  %3836 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6530 = getelementptr inbounds %struct._frame, %struct._frame* %3836, i32 0, i32 13
  store i32 %conv6529, i32* %f_lasti6530, align 4
  %3837 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6531 = getelementptr i8, i8* %3837, i32 1
  store i8* %incdec.ptr6531, i8** %next_instr, align 8
  %3838 = load i8, i8* %3837, align 1
  %idxprom6532 = zext i8 %3838 to i64
  %arrayidx6533 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6532
  %3839 = load i8*, i8** %arrayidx6533, align 8
  br label %indirectgoto

if.end.6534:                                      ; preds = %if.then.6523
  br label %fast_next_opcode

if.end.6535:                                      ; preds = %sw.epilog.6520
  br label %for.cond

TARGET_WITH_CLEANUP:                              ; preds = %indirectgoto
  store i32 81, i32* %opcode, align 4
  br label %sw.bb.6536

sw.bb.6536:                                       ; preds = %dispatch_opcode, %TARGET_WITH_CLEANUP
  %3840 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6540 = getelementptr %struct._object*, %struct._object** %3840, i64 -1
  %3841 = load %struct._object*, %struct._object** %arrayidx6540, align 8
  store %struct._object* %3841, %struct._object** %exc6539, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %val6542, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %tb6544, align 8
  %3842 = load %struct._object*, %struct._object** %exc6539, align 8
  %cmp6549 = icmp eq %struct._object* %3842, @_Py_NoneStruct
  br i1 %cmp6549, label %if.then.6551, label %if.else.6555

if.then.6551:                                     ; preds = %sw.bb.6536
  %3843 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6552 = getelementptr %struct._object*, %struct._object** %3843, i32 -1
  store %struct._object** %incdec.ptr6552, %struct._object*** %stack_pointer, align 8
  %3844 = load %struct._object*, %struct._object** %incdec.ptr6552, align 8
  %3845 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6553 = getelementptr %struct._object*, %struct._object** %3845, i64 -1
  %3846 = load %struct._object*, %struct._object** %arrayidx6553, align 8
  store %struct._object* %3846, %struct._object** %exit_func, align 8
  %3847 = load %struct._object*, %struct._object** %exc6539, align 8
  %3848 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6554 = getelementptr %struct._object*, %struct._object** %3848, i64 -1
  store %struct._object* %3847, %struct._object** %arrayidx6554, align 8
  br label %if.end.6594

if.else.6555:                                     ; preds = %sw.bb.6536
  %3849 = load %struct._object*, %struct._object** %exc6539, align 8
  %ob_type6556 = getelementptr inbounds %struct._object, %struct._object* %3849, i32 0, i32 1
  %3850 = load %struct._typeobject*, %struct._typeobject** %ob_type6556, align 8
  %tp_flags6557 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3850, i32 0, i32 19
  %3851 = load i64, i64* %tp_flags6557, align 8
  %and6558 = and i64 %3851, 16777216
  %cmp6559 = icmp ne i64 %and6558, 0
  br i1 %cmp6559, label %if.then.6561, label %if.else.6573

if.then.6561:                                     ; preds = %if.else.6555
  %3852 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %add.ptr6562 = getelementptr %struct._object*, %struct._object** %3852, i64 -1
  store %struct._object** %add.ptr6562, %struct._object*** %stack_pointer, align 8
  %3853 = load %struct._object*, %struct._object** %exc6539, align 8
  %call6563 = call i64 @PyLong_AsLong(%struct._object* %3853)
  switch i64 %call6563, label %sw.default.6569 [
    i64 8, label %sw.bb.6564
    i64 32, label %sw.bb.6564
  ]

sw.bb.6564:                                       ; preds = %if.then.6561, %if.then.6561
  %3854 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6565 = getelementptr %struct._object*, %struct._object** %3854, i64 -2
  %3855 = load %struct._object*, %struct._object** %arrayidx6565, align 8
  store %struct._object* %3855, %struct._object** %exit_func, align 8
  %3856 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6566 = getelementptr %struct._object*, %struct._object** %3856, i64 -1
  %3857 = load %struct._object*, %struct._object** %arrayidx6566, align 8
  %3858 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6567 = getelementptr %struct._object*, %struct._object** %3858, i64 -2
  store %struct._object* %3857, %struct._object** %arrayidx6567, align 8
  %3859 = load %struct._object*, %struct._object** %exc6539, align 8
  %3860 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6568 = getelementptr %struct._object*, %struct._object** %3860, i64 -1
  store %struct._object* %3859, %struct._object** %arrayidx6568, align 8
  br label %sw.epilog.6572

sw.default.6569:                                  ; preds = %if.then.6561
  %3861 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6570 = getelementptr %struct._object*, %struct._object** %3861, i64 -1
  %3862 = load %struct._object*, %struct._object** %arrayidx6570, align 8
  store %struct._object* %3862, %struct._object** %exit_func, align 8
  %3863 = load %struct._object*, %struct._object** %exc6539, align 8
  %3864 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6571 = getelementptr %struct._object*, %struct._object** %3864, i64 -1
  store %struct._object* %3863, %struct._object** %arrayidx6571, align 8
  br label %sw.epilog.6572

sw.epilog.6572:                                   ; preds = %sw.default.6569, %sw.bb.6564
  store %struct._object* @_Py_NoneStruct, %struct._object** %exc6539, align 8
  br label %if.end.6593

if.else.6573:                                     ; preds = %if.else.6555
  %3865 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6578 = getelementptr %struct._object*, %struct._object** %3865, i64 -2
  %3866 = load %struct._object*, %struct._object** %arrayidx6578, align 8
  store %struct._object* %3866, %struct._object** %val6542, align 8
  %3867 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6579 = getelementptr %struct._object*, %struct._object** %3867, i64 -3
  %3868 = load %struct._object*, %struct._object** %arrayidx6579, align 8
  store %struct._object* %3868, %struct._object** %tb6544, align 8
  %3869 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6580 = getelementptr %struct._object*, %struct._object** %3869, i64 -4
  %3870 = load %struct._object*, %struct._object** %arrayidx6580, align 8
  store %struct._object* %3870, %struct._object** %tp2, align 8
  %3871 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6581 = getelementptr %struct._object*, %struct._object** %3871, i64 -5
  %3872 = load %struct._object*, %struct._object** %arrayidx6581, align 8
  store %struct._object* %3872, %struct._object** %exc2, align 8
  %3873 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6582 = getelementptr %struct._object*, %struct._object** %3873, i64 -6
  %3874 = load %struct._object*, %struct._object** %arrayidx6582, align 8
  store %struct._object* %3874, %struct._object** %tb2, align 8
  %3875 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6583 = getelementptr %struct._object*, %struct._object** %3875, i64 -7
  %3876 = load %struct._object*, %struct._object** %arrayidx6583, align 8
  store %struct._object* %3876, %struct._object** %exit_func, align 8
  %3877 = load %struct._object*, %struct._object** %tb2, align 8
  %3878 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6584 = getelementptr %struct._object*, %struct._object** %3878, i64 -7
  store %struct._object* %3877, %struct._object** %arrayidx6584, align 8
  %3879 = load %struct._object*, %struct._object** %exc2, align 8
  %3880 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6585 = getelementptr %struct._object*, %struct._object** %3880, i64 -6
  store %struct._object* %3879, %struct._object** %arrayidx6585, align 8
  %3881 = load %struct._object*, %struct._object** %tp2, align 8
  %3882 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6586 = getelementptr %struct._object*, %struct._object** %3882, i64 -5
  store %struct._object* %3881, %struct._object** %arrayidx6586, align 8
  %3883 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx6587 = getelementptr %struct._object*, %struct._object** %3883, i64 -4
  store %struct._object* null, %struct._object** %arrayidx6587, align 8
  %3884 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_iblock = getelementptr inbounds %struct._frame, %struct._frame* %3884, i32 0, i32 15
  %3885 = load i32, i32* %f_iblock, align 4
  %sub6588 = sub i32 %3885, 1
  %idxprom6589 = sext i32 %sub6588 to i64
  %3886 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_blockstack = getelementptr inbounds %struct._frame, %struct._frame* %3886, i32 0, i32 17
  %arrayidx6590 = getelementptr [20 x %struct.PyTryBlock], [20 x %struct.PyTryBlock]* %f_blockstack, i32 0, i64 %idxprom6589
  store %struct.PyTryBlock* %arrayidx6590, %struct.PyTryBlock** %block, align 8
  %3887 = load %struct.PyTryBlock*, %struct.PyTryBlock** %block, align 8
  %b_level6591 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %3887, i32 0, i32 2
  %3888 = load i32, i32* %b_level6591, align 4
  %dec6592 = add i32 %3888, -1
  store i32 %dec6592, i32* %b_level6591, align 4
  br label %if.end.6593

if.end.6593:                                      ; preds = %if.else.6573, %sw.epilog.6572
  br label %if.end.6594

if.end.6594:                                      ; preds = %if.end.6593, %if.then.6551
  %3889 = load %struct._object*, %struct._object** %exit_func, align 8
  %3890 = load %struct._object*, %struct._object** %exc6539, align 8
  %3891 = load %struct._object*, %struct._object** %val6542, align 8
  %3892 = load %struct._object*, %struct._object** %tb6544, align 8
  %call6595 = call %struct._object* (%struct._object*, ...) @PyObject_CallFunctionObjArgs(%struct._object* %3889, %struct._object* %3890, %struct._object* %3891, %struct._object* %3892, i8* null)
  store %struct._object* %call6595, %struct._object** %res6546, align 8
  br label %do.body.6596

do.body.6596:                                     ; preds = %if.end.6594
  %3893 = load %struct._object*, %struct._object** %exit_func, align 8
  store %struct._object* %3893, %struct._object** %_py_decref_tmp6598, align 8
  %3894 = load %struct._object*, %struct._object** %_py_decref_tmp6598, align 8
  %ob_refcnt6599 = getelementptr inbounds %struct._object, %struct._object* %3894, i32 0, i32 0
  %3895 = load i64, i64* %ob_refcnt6599, align 8
  %dec6600 = add i64 %3895, -1
  store i64 %dec6600, i64* %ob_refcnt6599, align 8
  %cmp6601 = icmp ne i64 %dec6600, 0
  br i1 %cmp6601, label %if.then.6603, label %if.else.6604

if.then.6603:                                     ; preds = %do.body.6596
  br label %if.end.6607

if.else.6604:                                     ; preds = %do.body.6596
  %3896 = load %struct._object*, %struct._object** %_py_decref_tmp6598, align 8
  %ob_type6605 = getelementptr inbounds %struct._object, %struct._object* %3896, i32 0, i32 1
  %3897 = load %struct._typeobject*, %struct._typeobject** %ob_type6605, align 8
  %tp_dealloc6606 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3897, i32 0, i32 4
  %3898 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6606, align 8
  %3899 = load %struct._object*, %struct._object** %_py_decref_tmp6598, align 8
  call void %3898(%struct._object* %3899)
  br label %if.end.6607

if.end.6607:                                      ; preds = %if.else.6604, %if.then.6603
  br label %do.end.6608

do.end.6608:                                      ; preds = %if.end.6607
  %3900 = load %struct._object*, %struct._object** %res6546, align 8
  %cmp6609 = icmp eq %struct._object* %3900, null
  br i1 %cmp6609, label %if.then.6611, label %if.end.6612

if.then.6611:                                     ; preds = %do.end.6608
  br label %error

if.end.6612:                                      ; preds = %do.end.6608
  %3901 = load %struct._object*, %struct._object** %exc6539, align 8
  %cmp6613 = icmp ne %struct._object* %3901, @_Py_NoneStruct
  br i1 %cmp6613, label %if.then.6615, label %if.else.6617

if.then.6615:                                     ; preds = %if.end.6612
  %3902 = load %struct._object*, %struct._object** %res6546, align 8
  %call6616 = call i32 @PyObject_IsTrue(%struct._object* %3902)
  store i32 %call6616, i32* %err6548, align 4
  br label %if.end.6618

if.else.6617:                                     ; preds = %if.end.6612
  store i32 0, i32* %err6548, align 4
  br label %if.end.6618

if.end.6618:                                      ; preds = %if.else.6617, %if.then.6615
  br label %do.body.6619

do.body.6619:                                     ; preds = %if.end.6618
  %3903 = load %struct._object*, %struct._object** %res6546, align 8
  store %struct._object* %3903, %struct._object** %_py_decref_tmp6621, align 8
  %3904 = load %struct._object*, %struct._object** %_py_decref_tmp6621, align 8
  %ob_refcnt6622 = getelementptr inbounds %struct._object, %struct._object* %3904, i32 0, i32 0
  %3905 = load i64, i64* %ob_refcnt6622, align 8
  %dec6623 = add i64 %3905, -1
  store i64 %dec6623, i64* %ob_refcnt6622, align 8
  %cmp6624 = icmp ne i64 %dec6623, 0
  br i1 %cmp6624, label %if.then.6626, label %if.else.6627

if.then.6626:                                     ; preds = %do.body.6619
  br label %if.end.6630

if.else.6627:                                     ; preds = %do.body.6619
  %3906 = load %struct._object*, %struct._object** %_py_decref_tmp6621, align 8
  %ob_type6628 = getelementptr inbounds %struct._object, %struct._object* %3906, i32 0, i32 1
  %3907 = load %struct._typeobject*, %struct._typeobject** %ob_type6628, align 8
  %tp_dealloc6629 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3907, i32 0, i32 4
  %3908 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6629, align 8
  %3909 = load %struct._object*, %struct._object** %_py_decref_tmp6621, align 8
  call void %3908(%struct._object* %3909)
  br label %if.end.6630

if.end.6630:                                      ; preds = %if.else.6627, %if.then.6626
  br label %do.end.6631

do.end.6631:                                      ; preds = %if.end.6630
  %3910 = load i32, i32* %err6548, align 4
  %cmp6632 = icmp slt i32 %3910, 0
  br i1 %cmp6632, label %if.then.6634, label %if.else.6635

if.then.6634:                                     ; preds = %do.end.6631
  br label %error

if.else.6635:                                     ; preds = %do.end.6631
  %3911 = load i32, i32* %err6548, align 4
  %cmp6636 = icmp sgt i32 %3911, 0
  br i1 %cmp6636, label %if.then.6638, label %if.end.6641

if.then.6638:                                     ; preds = %if.else.6635
  store i32 0, i32* %err6548, align 4
  %call6639 = call %struct._object* @PyLong_FromLong(i64 128)
  %3912 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6640 = getelementptr %struct._object*, %struct._object** %3912, i32 1
  store %struct._object** %incdec.ptr6640, %struct._object*** %stack_pointer, align 8
  store %struct._object* %call6639, %struct._object** %3912, align 8
  br label %if.end.6641

if.end.6641:                                      ; preds = %if.then.6638, %if.else.6635
  br label %if.end.6642

if.end.6642:                                      ; preds = %if.end.6641
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6644, align 8
  %3913 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6644, align 8
  %_value6649 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3913, i32 0, i32 0
  store i32* %_value6649, i32** %volatile_data6648, align 8
  store i32 0, i32* %order6651, align 4
  %3914 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6644, align 8
  %3915 = bitcast %struct._Py_atomic_int* %3914 to i8*
  %3916 = load i32, i32* %order6651, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3915, i32 %3916)
  %3917 = load i32, i32* %order6651, align 4
  switch i32 %3917, label %sw.default.6653 [
    i32 2, label %sw.bb.6652
    i32 3, label %sw.bb.6652
    i32 4, label %sw.bb.6652
  ]

sw.bb.6652:                                       ; preds = %if.end.6642, %if.end.6642, %if.end.6642
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6654

sw.default.6653:                                  ; preds = %if.end.6642
  br label %sw.epilog.6654

sw.epilog.6654:                                   ; preds = %sw.default.6653, %sw.bb.6652
  %3918 = load i32*, i32** %volatile_data6648, align 8
  %3919 = load volatile i32, i32* %3918, align 4
  store i32 %3919, i32* %result6646, align 4
  %3920 = load i32, i32* %order6651, align 4
  switch i32 %3920, label %sw.default.6656 [
    i32 1, label %sw.bb.6655
    i32 3, label %sw.bb.6655
    i32 4, label %sw.bb.6655
  ]

sw.bb.6655:                                       ; preds = %sw.epilog.6654, %sw.epilog.6654, %sw.epilog.6654
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6657

sw.default.6656:                                  ; preds = %sw.epilog.6654
  br label %sw.epilog.6657

sw.epilog.6657:                                   ; preds = %sw.default.6656, %sw.bb.6655
  %3921 = load i32, i32* %result6646, align 4
  store i32 %3921, i32* %tmp6658
  %3922 = load i32, i32* %tmp6658
  %tobool6659 = icmp ne i32 %3922, 0
  br i1 %tobool6659, label %if.end.6672, label %if.then.6660

if.then.6660:                                     ; preds = %sw.epilog.6657
  %3923 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6661 = icmp ne i32 %3923, 0
  br i1 %tobool6661, label %if.end.6671, label %if.then.6662

if.then.6662:                                     ; preds = %if.then.6660
  %3924 = load i8*, i8** %next_instr, align 8
  %3925 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6663 = ptrtoint i8* %3924 to i64
  %sub.ptr.rhs.cast6664 = ptrtoint i8* %3925 to i64
  %sub.ptr.sub6665 = sub i64 %sub.ptr.lhs.cast6663, %sub.ptr.rhs.cast6664
  %conv6666 = trunc i64 %sub.ptr.sub6665 to i32
  %3926 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6667 = getelementptr inbounds %struct._frame, %struct._frame* %3926, i32 0, i32 13
  store i32 %conv6666, i32* %f_lasti6667, align 4
  %3927 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6668 = getelementptr i8, i8* %3927, i32 1
  store i8* %incdec.ptr6668, i8** %next_instr, align 8
  %3928 = load i8, i8* %3927, align 1
  %idxprom6669 = zext i8 %3928 to i64
  %arrayidx6670 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6669
  %3929 = load i8*, i8** %arrayidx6670, align 8
  br label %indirectgoto

if.end.6671:                                      ; preds = %if.then.6660
  br label %fast_next_opcode

if.end.6672:                                      ; preds = %sw.epilog.6657
  br label %for.cond

TARGET_CALL_FUNCTION:                             ; preds = %indirectgoto
  store i32 131, i32* %opcode, align 4
  %3930 = load i8*, i8** %next_instr, align 8
  %add.ptr6673 = getelementptr i8, i8* %3930, i64 2
  store i8* %add.ptr6673, i8** %next_instr, align 8
  %3931 = load i8*, i8** %next_instr, align 8
  %arrayidx6674 = getelementptr i8, i8* %3931, i64 -1
  %3932 = load i8, i8* %arrayidx6674, align 1
  %conv6675 = zext i8 %3932 to i32
  %shl6676 = shl i32 %conv6675, 8
  %3933 = load i8*, i8** %next_instr, align 8
  %arrayidx6677 = getelementptr i8, i8* %3933, i64 -2
  %3934 = load i8, i8* %arrayidx6677, align 1
  %conv6678 = zext i8 %3934 to i32
  %add6679 = add i32 %shl6676, %conv6678
  store i32 %add6679, i32* %oparg, align 4
  br label %sw.bb.6680

sw.bb.6680:                                       ; preds = %dispatch_opcode, %TARGET_CALL_FUNCTION
  %3935 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  store %struct._object** %3935, %struct._object*** %sp, align 8
  %3936 = load i32, i32* %oparg, align 4
  %call6684 = call %struct._object* @call_function(%struct._object*** %sp, i32 %3936)
  store %struct._object* %call6684, %struct._object** %res6683, align 8
  %3937 = load %struct._object**, %struct._object*** %sp, align 8
  store %struct._object** %3937, %struct._object*** %stack_pointer, align 8
  %3938 = load %struct._object*, %struct._object** %res6683, align 8
  %3939 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6685 = getelementptr %struct._object*, %struct._object** %3939, i32 1
  store %struct._object** %incdec.ptr6685, %struct._object*** %stack_pointer, align 8
  store %struct._object* %3938, %struct._object** %3939, align 8
  %3940 = load %struct._object*, %struct._object** %res6683, align 8
  %cmp6686 = icmp eq %struct._object* %3940, null
  br i1 %cmp6686, label %if.then.6688, label %if.end.6689

if.then.6688:                                     ; preds = %sw.bb.6680
  br label %error

if.end.6689:                                      ; preds = %sw.bb.6680
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6691, align 8
  %3941 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6691, align 8
  %_value6696 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %3941, i32 0, i32 0
  store i32* %_value6696, i32** %volatile_data6695, align 8
  store i32 0, i32* %order6698, align 4
  %3942 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6691, align 8
  %3943 = bitcast %struct._Py_atomic_int* %3942 to i8*
  %3944 = load i32, i32* %order6698, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3943, i32 %3944)
  %3945 = load i32, i32* %order6698, align 4
  switch i32 %3945, label %sw.default.6700 [
    i32 2, label %sw.bb.6699
    i32 3, label %sw.bb.6699
    i32 4, label %sw.bb.6699
  ]

sw.bb.6699:                                       ; preds = %if.end.6689, %if.end.6689, %if.end.6689
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6701

sw.default.6700:                                  ; preds = %if.end.6689
  br label %sw.epilog.6701

sw.epilog.6701:                                   ; preds = %sw.default.6700, %sw.bb.6699
  %3946 = load i32*, i32** %volatile_data6695, align 8
  %3947 = load volatile i32, i32* %3946, align 4
  store i32 %3947, i32* %result6693, align 4
  %3948 = load i32, i32* %order6698, align 4
  switch i32 %3948, label %sw.default.6703 [
    i32 1, label %sw.bb.6702
    i32 3, label %sw.bb.6702
    i32 4, label %sw.bb.6702
  ]

sw.bb.6702:                                       ; preds = %sw.epilog.6701, %sw.epilog.6701, %sw.epilog.6701
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6704

sw.default.6703:                                  ; preds = %sw.epilog.6701
  br label %sw.epilog.6704

sw.epilog.6704:                                   ; preds = %sw.default.6703, %sw.bb.6702
  %3949 = load i32, i32* %result6693, align 4
  store i32 %3949, i32* %tmp6705
  %3950 = load i32, i32* %tmp6705
  %tobool6706 = icmp ne i32 %3950, 0
  br i1 %tobool6706, label %if.end.6719, label %if.then.6707

if.then.6707:                                     ; preds = %sw.epilog.6704
  %3951 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6708 = icmp ne i32 %3951, 0
  br i1 %tobool6708, label %if.end.6718, label %if.then.6709

if.then.6709:                                     ; preds = %if.then.6707
  %3952 = load i8*, i8** %next_instr, align 8
  %3953 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6710 = ptrtoint i8* %3952 to i64
  %sub.ptr.rhs.cast6711 = ptrtoint i8* %3953 to i64
  %sub.ptr.sub6712 = sub i64 %sub.ptr.lhs.cast6710, %sub.ptr.rhs.cast6711
  %conv6713 = trunc i64 %sub.ptr.sub6712 to i32
  %3954 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6714 = getelementptr inbounds %struct._frame, %struct._frame* %3954, i32 0, i32 13
  store i32 %conv6713, i32* %f_lasti6714, align 4
  %3955 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6715 = getelementptr i8, i8* %3955, i32 1
  store i8* %incdec.ptr6715, i8** %next_instr, align 8
  %3956 = load i8, i8* %3955, align 1
  %idxprom6716 = zext i8 %3956 to i64
  %arrayidx6717 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6716
  %3957 = load i8*, i8** %arrayidx6717, align 8
  br label %indirectgoto

if.end.6718:                                      ; preds = %if.then.6707
  br label %fast_next_opcode

if.end.6719:                                      ; preds = %sw.epilog.6704
  br label %for.cond

TARGET_CALL_FUNCTION_VAR:                         ; preds = %indirectgoto
  store i32 140, i32* %opcode, align 4
  %3958 = load i8*, i8** %next_instr, align 8
  %add.ptr6720 = getelementptr i8, i8* %3958, i64 2
  store i8* %add.ptr6720, i8** %next_instr, align 8
  %3959 = load i8*, i8** %next_instr, align 8
  %arrayidx6721 = getelementptr i8, i8* %3959, i64 -1
  %3960 = load i8, i8* %arrayidx6721, align 1
  %conv6722 = zext i8 %3960 to i32
  %shl6723 = shl i32 %conv6722, 8
  %3961 = load i8*, i8** %next_instr, align 8
  %arrayidx6724 = getelementptr i8, i8* %3961, i64 -2
  %3962 = load i8, i8* %arrayidx6724, align 1
  %conv6725 = zext i8 %3962 to i32
  %add6726 = add i32 %shl6723, %conv6725
  store i32 %add6726, i32* %oparg, align 4
  br label %sw.bb.6727

sw.bb.6727:                                       ; preds = %dispatch_opcode, %TARGET_CALL_FUNCTION_VAR
  br label %_call_function_var_kw

TARGET_CALL_FUNCTION_KW:                          ; preds = %indirectgoto
  store i32 141, i32* %opcode, align 4
  %3963 = load i8*, i8** %next_instr, align 8
  %add.ptr6728 = getelementptr i8, i8* %3963, i64 2
  store i8* %add.ptr6728, i8** %next_instr, align 8
  %3964 = load i8*, i8** %next_instr, align 8
  %arrayidx6729 = getelementptr i8, i8* %3964, i64 -1
  %3965 = load i8, i8* %arrayidx6729, align 1
  %conv6730 = zext i8 %3965 to i32
  %shl6731 = shl i32 %conv6730, 8
  %3966 = load i8*, i8** %next_instr, align 8
  %arrayidx6732 = getelementptr i8, i8* %3966, i64 -2
  %3967 = load i8, i8* %arrayidx6732, align 1
  %conv6733 = zext i8 %3967 to i32
  %add6734 = add i32 %shl6731, %conv6733
  store i32 %add6734, i32* %oparg, align 4
  br label %sw.bb.6735

sw.bb.6735:                                       ; preds = %dispatch_opcode, %TARGET_CALL_FUNCTION_KW
  br label %_call_function_var_kw

TARGET_CALL_FUNCTION_VAR_KW:                      ; preds = %indirectgoto
  store i32 142, i32* %opcode, align 4
  %3968 = load i8*, i8** %next_instr, align 8
  %add.ptr6736 = getelementptr i8, i8* %3968, i64 2
  store i8* %add.ptr6736, i8** %next_instr, align 8
  %3969 = load i8*, i8** %next_instr, align 8
  %arrayidx6737 = getelementptr i8, i8* %3969, i64 -1
  %3970 = load i8, i8* %arrayidx6737, align 1
  %conv6738 = zext i8 %3970 to i32
  %shl6739 = shl i32 %conv6738, 8
  %3971 = load i8*, i8** %next_instr, align 8
  %arrayidx6740 = getelementptr i8, i8* %3971, i64 -2
  %3972 = load i8, i8* %arrayidx6740, align 1
  %conv6741 = zext i8 %3972 to i32
  %add6742 = add i32 %shl6739, %conv6741
  store i32 %add6742, i32* %oparg, align 4
  br label %sw.bb.6743

sw.bb.6743:                                       ; preds = %dispatch_opcode, %TARGET_CALL_FUNCTION_VAR_KW
  br label %_call_function_var_kw

_call_function_var_kw:                            ; preds = %sw.bb.6743, %sw.bb.6735, %sw.bb.6727
  %3973 = load i32, i32* %oparg, align 4
  %and6745 = and i32 %3973, 255
  store i32 %and6745, i32* %na, align 4
  %3974 = load i32, i32* %oparg, align 4
  %shr6747 = ashr i32 %3974, 8
  %and6748 = and i32 %shr6747, 255
  store i32 %and6748, i32* %nk, align 4
  %3975 = load i32, i32* %opcode, align 4
  %sub6750 = sub i32 %3975, 131
  %and6751 = and i32 %sub6750, 3
  store i32 %and6751, i32* %flags, align 4
  %3976 = load i32, i32* %na, align 4
  %3977 = load i32, i32* %nk, align 4
  %mul = mul i32 2, %3977
  %add6753 = add i32 %3976, %mul
  store i32 %add6753, i32* %n, align 4
  %3978 = load i32, i32* %flags, align 4
  %and6761 = and i32 %3978, 1
  %tobool6762 = icmp ne i32 %and6761, 0
  br i1 %tobool6762, label %if.then.6763, label %if.end.6765

if.then.6763:                                     ; preds = %_call_function_var_kw
  %3979 = load i32, i32* %n, align 4
  %inc6764 = add i32 %3979, 1
  store i32 %inc6764, i32* %n, align 4
  br label %if.end.6765

if.end.6765:                                      ; preds = %if.then.6763, %_call_function_var_kw
  %3980 = load i32, i32* %flags, align 4
  %and6766 = and i32 %3980, 2
  %tobool6767 = icmp ne i32 %and6766, 0
  br i1 %tobool6767, label %if.then.6768, label %if.end.6770

if.then.6768:                                     ; preds = %if.end.6765
  %3981 = load i32, i32* %n, align 4
  %inc6769 = add i32 %3981, 1
  store i32 %inc6769, i32* %n, align 4
  br label %if.end.6770

if.end.6770:                                      ; preds = %if.then.6768, %if.end.6765
  %3982 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %3983 = load i32, i32* %n, align 4
  %idx.ext6771 = sext i32 %3983 to i64
  %idx.neg = sub i64 0, %idx.ext6771
  %add.ptr6772 = getelementptr %struct._object*, %struct._object** %3982, i64 %idx.neg
  %add.ptr6773 = getelementptr %struct._object*, %struct._object** %add.ptr6772, i64 -1
  store %struct._object** %add.ptr6773, %struct._object*** %pfunc, align 8
  %3984 = load %struct._object**, %struct._object*** %pfunc, align 8
  %3985 = load %struct._object*, %struct._object** %3984, align 8
  store %struct._object* %3985, %struct._object** %func6756, align 8
  %3986 = load %struct._object*, %struct._object** %func6756, align 8
  %ob_type6774 = getelementptr inbounds %struct._object, %struct._object* %3986, i32 0, i32 1
  %3987 = load %struct._typeobject*, %struct._typeobject** %ob_type6774, align 8
  %cmp6775 = icmp eq %struct._typeobject* %3987, @PyMethod_Type
  br i1 %cmp6775, label %land.lhs.true.6777, label %if.else.6801

land.lhs.true.6777:                               ; preds = %if.end.6770
  %3988 = load %struct._object*, %struct._object** %func6756, align 8
  %3989 = bitcast %struct._object* %3988 to %struct.PyMethodObject*
  %im_self = getelementptr inbounds %struct.PyMethodObject, %struct.PyMethodObject* %3989, i32 0, i32 2
  %3990 = load %struct._object*, %struct._object** %im_self, align 8
  %cmp6778 = icmp ne %struct._object* %3990, null
  br i1 %cmp6778, label %if.then.6780, label %if.else.6801

if.then.6780:                                     ; preds = %land.lhs.true.6777
  %3991 = load %struct._object*, %struct._object** %func6756, align 8
  %3992 = bitcast %struct._object* %3991 to %struct.PyMethodObject*
  %im_self6782 = getelementptr inbounds %struct.PyMethodObject, %struct.PyMethodObject* %3992, i32 0, i32 2
  %3993 = load %struct._object*, %struct._object** %im_self6782, align 8
  store %struct._object* %3993, %struct._object** %self, align 8
  %3994 = load %struct._object*, %struct._object** %self, align 8
  %ob_refcnt6783 = getelementptr inbounds %struct._object, %struct._object* %3994, i32 0, i32 0
  %3995 = load i64, i64* %ob_refcnt6783, align 8
  %inc6784 = add i64 %3995, 1
  store i64 %inc6784, i64* %ob_refcnt6783, align 8
  %3996 = load %struct._object*, %struct._object** %func6756, align 8
  %3997 = bitcast %struct._object* %3996 to %struct.PyMethodObject*
  %im_func = getelementptr inbounds %struct.PyMethodObject, %struct.PyMethodObject* %3997, i32 0, i32 1
  %3998 = load %struct._object*, %struct._object** %im_func, align 8
  store %struct._object* %3998, %struct._object** %func6756, align 8
  %3999 = load %struct._object*, %struct._object** %func6756, align 8
  %ob_refcnt6785 = getelementptr inbounds %struct._object, %struct._object* %3999, i32 0, i32 0
  %4000 = load i64, i64* %ob_refcnt6785, align 8
  %inc6786 = add i64 %4000, 1
  store i64 %inc6786, i64* %ob_refcnt6785, align 8
  br label %do.body.6787

do.body.6787:                                     ; preds = %if.then.6780
  %4001 = load %struct._object**, %struct._object*** %pfunc, align 8
  %4002 = load %struct._object*, %struct._object** %4001, align 8
  store %struct._object* %4002, %struct._object** %_py_decref_tmp6789, align 8
  %4003 = load %struct._object*, %struct._object** %_py_decref_tmp6789, align 8
  %ob_refcnt6790 = getelementptr inbounds %struct._object, %struct._object* %4003, i32 0, i32 0
  %4004 = load i64, i64* %ob_refcnt6790, align 8
  %dec6791 = add i64 %4004, -1
  store i64 %dec6791, i64* %ob_refcnt6790, align 8
  %cmp6792 = icmp ne i64 %dec6791, 0
  br i1 %cmp6792, label %if.then.6794, label %if.else.6795

if.then.6794:                                     ; preds = %do.body.6787
  br label %if.end.6798

if.else.6795:                                     ; preds = %do.body.6787
  %4005 = load %struct._object*, %struct._object** %_py_decref_tmp6789, align 8
  %ob_type6796 = getelementptr inbounds %struct._object, %struct._object* %4005, i32 0, i32 1
  %4006 = load %struct._typeobject*, %struct._typeobject** %ob_type6796, align 8
  %tp_dealloc6797 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4006, i32 0, i32 4
  %4007 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6797, align 8
  %4008 = load %struct._object*, %struct._object** %_py_decref_tmp6789, align 8
  call void %4007(%struct._object* %4008)
  br label %if.end.6798

if.end.6798:                                      ; preds = %if.else.6795, %if.then.6794
  br label %do.end.6799

do.end.6799:                                      ; preds = %if.end.6798
  %4009 = load %struct._object*, %struct._object** %self, align 8
  %4010 = load %struct._object**, %struct._object*** %pfunc, align 8
  store %struct._object* %4009, %struct._object** %4010, align 8
  %4011 = load i32, i32* %na, align 4
  %inc6800 = add i32 %4011, 1
  store i32 %inc6800, i32* %na, align 4
  br label %if.end.6804

if.else.6801:                                     ; preds = %land.lhs.true.6777, %if.end.6770
  %4012 = load %struct._object*, %struct._object** %func6756, align 8
  %ob_refcnt6802 = getelementptr inbounds %struct._object, %struct._object* %4012, i32 0, i32 0
  %4013 = load i64, i64* %ob_refcnt6802, align 8
  %inc6803 = add i64 %4013, 1
  store i64 %inc6803, i64* %ob_refcnt6802, align 8
  br label %if.end.6804

if.end.6804:                                      ; preds = %if.else.6801, %do.end.6799
  %4014 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  store %struct._object** %4014, %struct._object*** %sp6758, align 8
  %4015 = load %struct._object*, %struct._object** %func6756, align 8
  %4016 = load i32, i32* %flags, align 4
  %4017 = load i32, i32* %na, align 4
  %4018 = load i32, i32* %nk, align 4
  %call6805 = call %struct._object* @ext_do_call(%struct._object* %4015, %struct._object*** %sp6758, i32 %4016, i32 %4017, i32 %4018)
  store %struct._object* %call6805, %struct._object** %res6760, align 8
  %4019 = load %struct._object**, %struct._object*** %sp6758, align 8
  store %struct._object** %4019, %struct._object*** %stack_pointer, align 8
  br label %do.body.6806

do.body.6806:                                     ; preds = %if.end.6804
  %4020 = load %struct._object*, %struct._object** %func6756, align 8
  store %struct._object* %4020, %struct._object** %_py_decref_tmp6808, align 8
  %4021 = load %struct._object*, %struct._object** %_py_decref_tmp6808, align 8
  %ob_refcnt6809 = getelementptr inbounds %struct._object, %struct._object* %4021, i32 0, i32 0
  %4022 = load i64, i64* %ob_refcnt6809, align 8
  %dec6810 = add i64 %4022, -1
  store i64 %dec6810, i64* %ob_refcnt6809, align 8
  %cmp6811 = icmp ne i64 %dec6810, 0
  br i1 %cmp6811, label %if.then.6813, label %if.else.6814

if.then.6813:                                     ; preds = %do.body.6806
  br label %if.end.6817

if.else.6814:                                     ; preds = %do.body.6806
  %4023 = load %struct._object*, %struct._object** %_py_decref_tmp6808, align 8
  %ob_type6815 = getelementptr inbounds %struct._object, %struct._object* %4023, i32 0, i32 1
  %4024 = load %struct._typeobject*, %struct._typeobject** %ob_type6815, align 8
  %tp_dealloc6816 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4024, i32 0, i32 4
  %4025 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6816, align 8
  %4026 = load %struct._object*, %struct._object** %_py_decref_tmp6808, align 8
  call void %4025(%struct._object* %4026)
  br label %if.end.6817

if.end.6817:                                      ; preds = %if.else.6814, %if.then.6813
  br label %do.end.6818

do.end.6818:                                      ; preds = %if.end.6817
  br label %while.cond.6819

while.cond.6819:                                  ; preds = %do.end.6837, %do.end.6818
  %4027 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %4028 = load %struct._object**, %struct._object*** %pfunc, align 8
  %cmp6820 = icmp ugt %struct._object** %4027, %4028
  br i1 %cmp6820, label %while.body.6822, label %while.end.6838

while.body.6822:                                  ; preds = %while.cond.6819
  %4029 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6824 = getelementptr %struct._object*, %struct._object** %4029, i32 -1
  store %struct._object** %incdec.ptr6824, %struct._object*** %stack_pointer, align 8
  %4030 = load %struct._object*, %struct._object** %incdec.ptr6824, align 8
  store %struct._object* %4030, %struct._object** %o, align 8
  br label %do.body.6825

do.body.6825:                                     ; preds = %while.body.6822
  %4031 = load %struct._object*, %struct._object** %o, align 8
  store %struct._object* %4031, %struct._object** %_py_decref_tmp6827, align 8
  %4032 = load %struct._object*, %struct._object** %_py_decref_tmp6827, align 8
  %ob_refcnt6828 = getelementptr inbounds %struct._object, %struct._object* %4032, i32 0, i32 0
  %4033 = load i64, i64* %ob_refcnt6828, align 8
  %dec6829 = add i64 %4033, -1
  store i64 %dec6829, i64* %ob_refcnt6828, align 8
  %cmp6830 = icmp ne i64 %dec6829, 0
  br i1 %cmp6830, label %if.then.6832, label %if.else.6833

if.then.6832:                                     ; preds = %do.body.6825
  br label %if.end.6836

if.else.6833:                                     ; preds = %do.body.6825
  %4034 = load %struct._object*, %struct._object** %_py_decref_tmp6827, align 8
  %ob_type6834 = getelementptr inbounds %struct._object, %struct._object* %4034, i32 0, i32 1
  %4035 = load %struct._typeobject*, %struct._typeobject** %ob_type6834, align 8
  %tp_dealloc6835 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4035, i32 0, i32 4
  %4036 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6835, align 8
  %4037 = load %struct._object*, %struct._object** %_py_decref_tmp6827, align 8
  call void %4036(%struct._object* %4037)
  br label %if.end.6836

if.end.6836:                                      ; preds = %if.else.6833, %if.then.6832
  br label %do.end.6837

do.end.6837:                                      ; preds = %if.end.6836
  br label %while.cond.6819

while.end.6838:                                   ; preds = %while.cond.6819
  %4038 = load %struct._object*, %struct._object** %res6760, align 8
  %4039 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6839 = getelementptr %struct._object*, %struct._object** %4039, i32 1
  store %struct._object** %incdec.ptr6839, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4038, %struct._object** %4039, align 8
  %4040 = load %struct._object*, %struct._object** %res6760, align 8
  %cmp6840 = icmp eq %struct._object* %4040, null
  br i1 %cmp6840, label %if.then.6842, label %if.end.6843

if.then.6842:                                     ; preds = %while.end.6838
  br label %error

if.end.6843:                                      ; preds = %while.end.6838
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val6845, align 8
  %4041 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6845, align 8
  %_value6850 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %4041, i32 0, i32 0
  store i32* %_value6850, i32** %volatile_data6849, align 8
  store i32 0, i32* %order6852, align 4
  %4042 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val6845, align 8
  %4043 = bitcast %struct._Py_atomic_int* %4042 to i8*
  %4044 = load i32, i32* %order6852, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %4043, i32 %4044)
  %4045 = load i32, i32* %order6852, align 4
  switch i32 %4045, label %sw.default.6854 [
    i32 2, label %sw.bb.6853
    i32 3, label %sw.bb.6853
    i32 4, label %sw.bb.6853
  ]

sw.bb.6853:                                       ; preds = %if.end.6843, %if.end.6843, %if.end.6843
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.6855

sw.default.6854:                                  ; preds = %if.end.6843
  br label %sw.epilog.6855

sw.epilog.6855:                                   ; preds = %sw.default.6854, %sw.bb.6853
  %4046 = load i32*, i32** %volatile_data6849, align 8
  %4047 = load volatile i32, i32* %4046, align 4
  store i32 %4047, i32* %result6847, align 4
  %4048 = load i32, i32* %order6852, align 4
  switch i32 %4048, label %sw.default.6857 [
    i32 1, label %sw.bb.6856
    i32 3, label %sw.bb.6856
    i32 4, label %sw.bb.6856
  ]

sw.bb.6856:                                       ; preds = %sw.epilog.6855, %sw.epilog.6855, %sw.epilog.6855
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6858

sw.default.6857:                                  ; preds = %sw.epilog.6855
  br label %sw.epilog.6858

sw.epilog.6858:                                   ; preds = %sw.default.6857, %sw.bb.6856
  %4049 = load i32, i32* %result6847, align 4
  store i32 %4049, i32* %tmp6859
  %4050 = load i32, i32* %tmp6859
  %tobool6860 = icmp ne i32 %4050, 0
  br i1 %tobool6860, label %if.end.6873, label %if.then.6861

if.then.6861:                                     ; preds = %sw.epilog.6858
  %4051 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool6862 = icmp ne i32 %4051, 0
  br i1 %tobool6862, label %if.end.6872, label %if.then.6863

if.then.6863:                                     ; preds = %if.then.6861
  %4052 = load i8*, i8** %next_instr, align 8
  %4053 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast6864 = ptrtoint i8* %4052 to i64
  %sub.ptr.rhs.cast6865 = ptrtoint i8* %4053 to i64
  %sub.ptr.sub6866 = sub i64 %sub.ptr.lhs.cast6864, %sub.ptr.rhs.cast6865
  %conv6867 = trunc i64 %sub.ptr.sub6866 to i32
  %4054 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti6868 = getelementptr inbounds %struct._frame, %struct._frame* %4054, i32 0, i32 13
  store i32 %conv6867, i32* %f_lasti6868, align 4
  %4055 = load i8*, i8** %next_instr, align 8
  %incdec.ptr6869 = getelementptr i8, i8* %4055, i32 1
  store i8* %incdec.ptr6869, i8** %next_instr, align 8
  %4056 = load i8, i8* %4055, align 1
  %idxprom6870 = zext i8 %4056 to i64
  %arrayidx6871 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom6870
  %4057 = load i8*, i8** %arrayidx6871, align 8
  br label %indirectgoto

if.end.6872:                                      ; preds = %if.then.6861
  br label %fast_next_opcode

if.end.6873:                                      ; preds = %sw.epilog.6858
  br label %for.cond

TARGET_MAKE_CLOSURE:                              ; preds = %indirectgoto
  store i32 134, i32* %opcode, align 4
  %4058 = load i8*, i8** %next_instr, align 8
  %add.ptr6874 = getelementptr i8, i8* %4058, i64 2
  store i8* %add.ptr6874, i8** %next_instr, align 8
  %4059 = load i8*, i8** %next_instr, align 8
  %arrayidx6875 = getelementptr i8, i8* %4059, i64 -1
  %4060 = load i8, i8* %arrayidx6875, align 1
  %conv6876 = zext i8 %4060 to i32
  %shl6877 = shl i32 %conv6876, 8
  %4061 = load i8*, i8** %next_instr, align 8
  %arrayidx6878 = getelementptr i8, i8* %4061, i64 -2
  %4062 = load i8, i8* %arrayidx6878, align 1
  %conv6879 = zext i8 %4062 to i32
  %add6880 = add i32 %shl6877, %conv6879
  store i32 %add6880, i32* %oparg, align 4
  br label %sw.bb.6881

sw.bb.6881:                                       ; preds = %dispatch_opcode, %TARGET_MAKE_CLOSURE
  br label %_make_function

TARGET_MAKE_FUNCTION:                             ; preds = %indirectgoto
  store i32 132, i32* %opcode, align 4
  %4063 = load i8*, i8** %next_instr, align 8
  %add.ptr6882 = getelementptr i8, i8* %4063, i64 2
  store i8* %add.ptr6882, i8** %next_instr, align 8
  %4064 = load i8*, i8** %next_instr, align 8
  %arrayidx6883 = getelementptr i8, i8* %4064, i64 -1
  %4065 = load i8, i8* %arrayidx6883, align 1
  %conv6884 = zext i8 %4065 to i32
  %shl6885 = shl i32 %conv6884, 8
  %4066 = load i8*, i8** %next_instr, align 8
  %arrayidx6886 = getelementptr i8, i8* %4066, i64 -2
  %4067 = load i8, i8* %arrayidx6886, align 1
  %conv6887 = zext i8 %4067 to i32
  %add6888 = add i32 %shl6885, %conv6887
  store i32 %add6888, i32* %oparg, align 4
  br label %sw.bb.6889

sw.bb.6889:                                       ; preds = %dispatch_opcode, %TARGET_MAKE_FUNCTION
  br label %_make_function

_make_function:                                   ; preds = %sw.bb.6889, %sw.bb.6881
  %4068 = load i32, i32* %oparg, align 4
  %and6891 = and i32 %4068, 255
  store i32 %and6891, i32* %posdefaults, align 4
  %4069 = load i32, i32* %oparg, align 4
  %shr6893 = ashr i32 %4069, 8
  %and6894 = and i32 %shr6893, 255
  store i32 %and6894, i32* %kwdefaults, align 4
  %4070 = load i32, i32* %oparg, align 4
  %shr6896 = ashr i32 %4070, 16
  %and6897 = and i32 %shr6896, 32767
  store i32 %and6897, i32* %num_annotations, align 4
  %4071 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6899 = getelementptr %struct._object*, %struct._object** %4071, i32 -1
  store %struct._object** %incdec.ptr6899, %struct._object*** %stack_pointer, align 8
  %4072 = load %struct._object*, %struct._object** %incdec.ptr6899, align 8
  store %struct._object* %4072, %struct._object** %qualname, align 8
  %4073 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6901 = getelementptr %struct._object*, %struct._object** %4073, i32 -1
  store %struct._object** %incdec.ptr6901, %struct._object*** %stack_pointer, align 8
  %4074 = load %struct._object*, %struct._object** %incdec.ptr6901, align 8
  store %struct._object* %4074, %struct._object** %code, align 8
  %4075 = load %struct._object*, %struct._object** %code, align 8
  %4076 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_globals6904 = getelementptr inbounds %struct._frame, %struct._frame* %4076, i32 0, i32 4
  %4077 = load %struct._object*, %struct._object** %f_globals6904, align 8
  %4078 = load %struct._object*, %struct._object** %qualname, align 8
  %call6905 = call %struct._object* @PyFunction_NewWithQualName(%struct._object* %4075, %struct._object* %4077, %struct._object* %4078)
  store %struct._object* %call6905, %struct._object** %func6903, align 8
  br label %do.body.6906

do.body.6906:                                     ; preds = %_make_function
  %4079 = load %struct._object*, %struct._object** %code, align 8
  store %struct._object* %4079, %struct._object** %_py_decref_tmp6908, align 8
  %4080 = load %struct._object*, %struct._object** %_py_decref_tmp6908, align 8
  %ob_refcnt6909 = getelementptr inbounds %struct._object, %struct._object* %4080, i32 0, i32 0
  %4081 = load i64, i64* %ob_refcnt6909, align 8
  %dec6910 = add i64 %4081, -1
  store i64 %dec6910, i64* %ob_refcnt6909, align 8
  %cmp6911 = icmp ne i64 %dec6910, 0
  br i1 %cmp6911, label %if.then.6913, label %if.else.6914

if.then.6913:                                     ; preds = %do.body.6906
  br label %if.end.6917

if.else.6914:                                     ; preds = %do.body.6906
  %4082 = load %struct._object*, %struct._object** %_py_decref_tmp6908, align 8
  %ob_type6915 = getelementptr inbounds %struct._object, %struct._object* %4082, i32 0, i32 1
  %4083 = load %struct._typeobject*, %struct._typeobject** %ob_type6915, align 8
  %tp_dealloc6916 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4083, i32 0, i32 4
  %4084 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6916, align 8
  %4085 = load %struct._object*, %struct._object** %_py_decref_tmp6908, align 8
  call void %4084(%struct._object* %4085)
  br label %if.end.6917

if.end.6917:                                      ; preds = %if.else.6914, %if.then.6913
  br label %do.end.6918

do.end.6918:                                      ; preds = %if.end.6917
  br label %do.body.6919

do.body.6919:                                     ; preds = %do.end.6918
  %4086 = load %struct._object*, %struct._object** %qualname, align 8
  store %struct._object* %4086, %struct._object** %_py_decref_tmp6921, align 8
  %4087 = load %struct._object*, %struct._object** %_py_decref_tmp6921, align 8
  %ob_refcnt6922 = getelementptr inbounds %struct._object, %struct._object* %4087, i32 0, i32 0
  %4088 = load i64, i64* %ob_refcnt6922, align 8
  %dec6923 = add i64 %4088, -1
  store i64 %dec6923, i64* %ob_refcnt6922, align 8
  %cmp6924 = icmp ne i64 %dec6923, 0
  br i1 %cmp6924, label %if.then.6926, label %if.else.6927

if.then.6926:                                     ; preds = %do.body.6919
  br label %if.end.6930

if.else.6927:                                     ; preds = %do.body.6919
  %4089 = load %struct._object*, %struct._object** %_py_decref_tmp6921, align 8
  %ob_type6928 = getelementptr inbounds %struct._object, %struct._object* %4089, i32 0, i32 1
  %4090 = load %struct._typeobject*, %struct._typeobject** %ob_type6928, align 8
  %tp_dealloc6929 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4090, i32 0, i32 4
  %4091 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6929, align 8
  %4092 = load %struct._object*, %struct._object** %_py_decref_tmp6921, align 8
  call void %4091(%struct._object* %4092)
  br label %if.end.6930

if.end.6930:                                      ; preds = %if.else.6927, %if.then.6926
  br label %do.end.6931

do.end.6931:                                      ; preds = %if.end.6930
  %4093 = load %struct._object*, %struct._object** %func6903, align 8
  %cmp6932 = icmp eq %struct._object* %4093, null
  br i1 %cmp6932, label %if.then.6934, label %if.end.6935

if.then.6934:                                     ; preds = %do.end.6931
  br label %error

if.end.6935:                                      ; preds = %do.end.6931
  %4094 = load i32, i32* %opcode, align 4
  %cmp6936 = icmp eq i32 %4094, 134
  br i1 %cmp6936, label %if.then.6938, label %if.end.6985

if.then.6938:                                     ; preds = %if.end.6935
  %4095 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6940 = getelementptr %struct._object*, %struct._object** %4095, i32 -1
  store %struct._object** %incdec.ptr6940, %struct._object*** %stack_pointer, align 8
  %4096 = load %struct._object*, %struct._object** %incdec.ptr6940, align 8
  store %struct._object* %4096, %struct._object** %closure, align 8
  %4097 = load %struct._object*, %struct._object** %func6903, align 8
  %4098 = load %struct._object*, %struct._object** %closure, align 8
  %call6941 = call i32 @PyFunction_SetClosure(%struct._object* %4097, %struct._object* %4098)
  %cmp6942 = icmp ne i32 %call6941, 0
  br i1 %cmp6942, label %if.then.6944, label %if.end.6971

if.then.6944:                                     ; preds = %if.then.6938
  br label %do.body.6945

do.body.6945:                                     ; preds = %if.then.6944
  %4099 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4099, %struct._object** %_py_decref_tmp6947, align 8
  %4100 = load %struct._object*, %struct._object** %_py_decref_tmp6947, align 8
  %ob_refcnt6948 = getelementptr inbounds %struct._object, %struct._object* %4100, i32 0, i32 0
  %4101 = load i64, i64* %ob_refcnt6948, align 8
  %dec6949 = add i64 %4101, -1
  store i64 %dec6949, i64* %ob_refcnt6948, align 8
  %cmp6950 = icmp ne i64 %dec6949, 0
  br i1 %cmp6950, label %if.then.6952, label %if.else.6953

if.then.6952:                                     ; preds = %do.body.6945
  br label %if.end.6956

if.else.6953:                                     ; preds = %do.body.6945
  %4102 = load %struct._object*, %struct._object** %_py_decref_tmp6947, align 8
  %ob_type6954 = getelementptr inbounds %struct._object, %struct._object* %4102, i32 0, i32 1
  %4103 = load %struct._typeobject*, %struct._typeobject** %ob_type6954, align 8
  %tp_dealloc6955 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4103, i32 0, i32 4
  %4104 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6955, align 8
  %4105 = load %struct._object*, %struct._object** %_py_decref_tmp6947, align 8
  call void %4104(%struct._object* %4105)
  br label %if.end.6956

if.end.6956:                                      ; preds = %if.else.6953, %if.then.6952
  br label %do.end.6957

do.end.6957:                                      ; preds = %if.end.6956
  br label %do.body.6958

do.body.6958:                                     ; preds = %do.end.6957
  %4106 = load %struct._object*, %struct._object** %closure, align 8
  store %struct._object* %4106, %struct._object** %_py_decref_tmp6960, align 8
  %4107 = load %struct._object*, %struct._object** %_py_decref_tmp6960, align 8
  %ob_refcnt6961 = getelementptr inbounds %struct._object, %struct._object* %4107, i32 0, i32 0
  %4108 = load i64, i64* %ob_refcnt6961, align 8
  %dec6962 = add i64 %4108, -1
  store i64 %dec6962, i64* %ob_refcnt6961, align 8
  %cmp6963 = icmp ne i64 %dec6962, 0
  br i1 %cmp6963, label %if.then.6965, label %if.else.6966

if.then.6965:                                     ; preds = %do.body.6958
  br label %if.end.6969

if.else.6966:                                     ; preds = %do.body.6958
  %4109 = load %struct._object*, %struct._object** %_py_decref_tmp6960, align 8
  %ob_type6967 = getelementptr inbounds %struct._object, %struct._object* %4109, i32 0, i32 1
  %4110 = load %struct._typeobject*, %struct._typeobject** %ob_type6967, align 8
  %tp_dealloc6968 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4110, i32 0, i32 4
  %4111 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6968, align 8
  %4112 = load %struct._object*, %struct._object** %_py_decref_tmp6960, align 8
  call void %4111(%struct._object* %4112)
  br label %if.end.6969

if.end.6969:                                      ; preds = %if.else.6966, %if.then.6965
  br label %do.end.6970

do.end.6970:                                      ; preds = %if.end.6969
  br label %error

if.end.6971:                                      ; preds = %if.then.6938
  br label %do.body.6972

do.body.6972:                                     ; preds = %if.end.6971
  %4113 = load %struct._object*, %struct._object** %closure, align 8
  store %struct._object* %4113, %struct._object** %_py_decref_tmp6974, align 8
  %4114 = load %struct._object*, %struct._object** %_py_decref_tmp6974, align 8
  %ob_refcnt6975 = getelementptr inbounds %struct._object, %struct._object* %4114, i32 0, i32 0
  %4115 = load i64, i64* %ob_refcnt6975, align 8
  %dec6976 = add i64 %4115, -1
  store i64 %dec6976, i64* %ob_refcnt6975, align 8
  %cmp6977 = icmp ne i64 %dec6976, 0
  br i1 %cmp6977, label %if.then.6979, label %if.else.6980

if.then.6979:                                     ; preds = %do.body.6972
  br label %if.end.6983

if.else.6980:                                     ; preds = %do.body.6972
  %4116 = load %struct._object*, %struct._object** %_py_decref_tmp6974, align 8
  %ob_type6981 = getelementptr inbounds %struct._object, %struct._object* %4116, i32 0, i32 1
  %4117 = load %struct._typeobject*, %struct._typeobject** %ob_type6981, align 8
  %tp_dealloc6982 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4117, i32 0, i32 4
  %4118 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc6982, align 8
  %4119 = load %struct._object*, %struct._object** %_py_decref_tmp6974, align 8
  call void %4118(%struct._object* %4119)
  br label %if.end.6983

if.end.6983:                                      ; preds = %if.else.6980, %if.then.6979
  br label %do.end.6984

do.end.6984:                                      ; preds = %if.end.6983
  br label %if.end.6985

if.end.6985:                                      ; preds = %do.end.6984, %if.end.6935
  %4120 = load i32, i32* %num_annotations, align 4
  %cmp6986 = icmp sgt i32 %4120, 0
  br i1 %cmp6986, label %if.then.6988, label %if.end.7129

if.then.6988:                                     ; preds = %if.end.6985
  %4121 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr6992 = getelementptr %struct._object*, %struct._object** %4121, i32 -1
  store %struct._object** %incdec.ptr6992, %struct._object*** %stack_pointer, align 8
  %4122 = load %struct._object*, %struct._object** %incdec.ptr6992, align 8
  store %struct._object* %4122, %struct._object** %names6991, align 8
  %call6994 = call %struct._object* @PyDict_New()
  store %struct._object* %call6994, %struct._object** %anns, align 8
  %4123 = load %struct._object*, %struct._object** %anns, align 8
  %cmp6995 = icmp eq %struct._object* %4123, null
  br i1 %cmp6995, label %if.then.6997, label %if.end.7011

if.then.6997:                                     ; preds = %if.then.6988
  br label %do.body.6998

do.body.6998:                                     ; preds = %if.then.6997
  %4124 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4124, %struct._object** %_py_decref_tmp7000, align 8
  %4125 = load %struct._object*, %struct._object** %_py_decref_tmp7000, align 8
  %ob_refcnt7001 = getelementptr inbounds %struct._object, %struct._object* %4125, i32 0, i32 0
  %4126 = load i64, i64* %ob_refcnt7001, align 8
  %dec7002 = add i64 %4126, -1
  store i64 %dec7002, i64* %ob_refcnt7001, align 8
  %cmp7003 = icmp ne i64 %dec7002, 0
  br i1 %cmp7003, label %if.then.7005, label %if.else.7006

if.then.7005:                                     ; preds = %do.body.6998
  br label %if.end.7009

if.else.7006:                                     ; preds = %do.body.6998
  %4127 = load %struct._object*, %struct._object** %_py_decref_tmp7000, align 8
  %ob_type7007 = getelementptr inbounds %struct._object, %struct._object* %4127, i32 0, i32 1
  %4128 = load %struct._typeobject*, %struct._typeobject** %ob_type7007, align 8
  %tp_dealloc7008 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4128, i32 0, i32 4
  %4129 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7008, align 8
  %4130 = load %struct._object*, %struct._object** %_py_decref_tmp7000, align 8
  call void %4129(%struct._object* %4130)
  br label %if.end.7009

if.end.7009:                                      ; preds = %if.else.7006, %if.then.7005
  br label %do.end.7010

do.end.7010:                                      ; preds = %if.end.7009
  br label %error

if.end.7011:                                      ; preds = %if.then.6988
  %4131 = load %struct._object*, %struct._object** %names6991, align 8
  %call7012 = call i64 @PyTuple_Size(%struct._object* %4131)
  store i64 %call7012, i64* %name_ix, align 8
  br label %while.cond.7013

while.cond.7013:                                  ; preds = %if.end.7070, %if.end.7011
  %4132 = load i64, i64* %name_ix, align 8
  %cmp7014 = icmp sgt i64 %4132, 0
  br i1 %cmp7014, label %while.body.7016, label %while.end.7071

while.body.7016:                                  ; preds = %while.cond.7013
  %4133 = load i64, i64* %name_ix, align 8
  %dec7023 = add i64 %4133, -1
  store i64 %dec7023, i64* %name_ix, align 8
  %4134 = load i64, i64* %name_ix, align 8
  %4135 = load %struct._object*, %struct._object** %names6991, align 8
  %4136 = bitcast %struct._object* %4135 to %struct.PyTupleObject*
  %ob_item7024 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4136, i32 0, i32 1
  %arrayidx7025 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item7024, i32 0, i64 %4134
  %4137 = load %struct._object*, %struct._object** %arrayidx7025, align 8
  store %struct._object* %4137, %struct._object** %name7018, align 8
  %4138 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7026 = getelementptr %struct._object*, %struct._object** %4138, i32 -1
  store %struct._object** %incdec.ptr7026, %struct._object*** %stack_pointer, align 8
  %4139 = load %struct._object*, %struct._object** %incdec.ptr7026, align 8
  store %struct._object* %4139, %struct._object** %value7020, align 8
  %4140 = load %struct._object*, %struct._object** %anns, align 8
  %4141 = load %struct._object*, %struct._object** %name7018, align 8
  %4142 = load %struct._object*, %struct._object** %value7020, align 8
  %call7027 = call i32 @PyDict_SetItem(%struct._object* %4140, %struct._object* %4141, %struct._object* %4142)
  store i32 %call7027, i32* %err7022, align 4
  br label %do.body.7028

do.body.7028:                                     ; preds = %while.body.7016
  %4143 = load %struct._object*, %struct._object** %value7020, align 8
  store %struct._object* %4143, %struct._object** %_py_decref_tmp7030, align 8
  %4144 = load %struct._object*, %struct._object** %_py_decref_tmp7030, align 8
  %ob_refcnt7031 = getelementptr inbounds %struct._object, %struct._object* %4144, i32 0, i32 0
  %4145 = load i64, i64* %ob_refcnt7031, align 8
  %dec7032 = add i64 %4145, -1
  store i64 %dec7032, i64* %ob_refcnt7031, align 8
  %cmp7033 = icmp ne i64 %dec7032, 0
  br i1 %cmp7033, label %if.then.7035, label %if.else.7036

if.then.7035:                                     ; preds = %do.body.7028
  br label %if.end.7039

if.else.7036:                                     ; preds = %do.body.7028
  %4146 = load %struct._object*, %struct._object** %_py_decref_tmp7030, align 8
  %ob_type7037 = getelementptr inbounds %struct._object, %struct._object* %4146, i32 0, i32 1
  %4147 = load %struct._typeobject*, %struct._typeobject** %ob_type7037, align 8
  %tp_dealloc7038 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4147, i32 0, i32 4
  %4148 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7038, align 8
  %4149 = load %struct._object*, %struct._object** %_py_decref_tmp7030, align 8
  call void %4148(%struct._object* %4149)
  br label %if.end.7039

if.end.7039:                                      ; preds = %if.else.7036, %if.then.7035
  br label %do.end.7040

do.end.7040:                                      ; preds = %if.end.7039
  %4150 = load i32, i32* %err7022, align 4
  %cmp7041 = icmp ne i32 %4150, 0
  br i1 %cmp7041, label %if.then.7043, label %if.end.7070

if.then.7043:                                     ; preds = %do.end.7040
  br label %do.body.7044

do.body.7044:                                     ; preds = %if.then.7043
  %4151 = load %struct._object*, %struct._object** %anns, align 8
  store %struct._object* %4151, %struct._object** %_py_decref_tmp7046, align 8
  %4152 = load %struct._object*, %struct._object** %_py_decref_tmp7046, align 8
  %ob_refcnt7047 = getelementptr inbounds %struct._object, %struct._object* %4152, i32 0, i32 0
  %4153 = load i64, i64* %ob_refcnt7047, align 8
  %dec7048 = add i64 %4153, -1
  store i64 %dec7048, i64* %ob_refcnt7047, align 8
  %cmp7049 = icmp ne i64 %dec7048, 0
  br i1 %cmp7049, label %if.then.7051, label %if.else.7052

if.then.7051:                                     ; preds = %do.body.7044
  br label %if.end.7055

if.else.7052:                                     ; preds = %do.body.7044
  %4154 = load %struct._object*, %struct._object** %_py_decref_tmp7046, align 8
  %ob_type7053 = getelementptr inbounds %struct._object, %struct._object* %4154, i32 0, i32 1
  %4155 = load %struct._typeobject*, %struct._typeobject** %ob_type7053, align 8
  %tp_dealloc7054 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4155, i32 0, i32 4
  %4156 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7054, align 8
  %4157 = load %struct._object*, %struct._object** %_py_decref_tmp7046, align 8
  call void %4156(%struct._object* %4157)
  br label %if.end.7055

if.end.7055:                                      ; preds = %if.else.7052, %if.then.7051
  br label %do.end.7056

do.end.7056:                                      ; preds = %if.end.7055
  br label %do.body.7057

do.body.7057:                                     ; preds = %do.end.7056
  %4158 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4158, %struct._object** %_py_decref_tmp7059, align 8
  %4159 = load %struct._object*, %struct._object** %_py_decref_tmp7059, align 8
  %ob_refcnt7060 = getelementptr inbounds %struct._object, %struct._object* %4159, i32 0, i32 0
  %4160 = load i64, i64* %ob_refcnt7060, align 8
  %dec7061 = add i64 %4160, -1
  store i64 %dec7061, i64* %ob_refcnt7060, align 8
  %cmp7062 = icmp ne i64 %dec7061, 0
  br i1 %cmp7062, label %if.then.7064, label %if.else.7065

if.then.7064:                                     ; preds = %do.body.7057
  br label %if.end.7068

if.else.7065:                                     ; preds = %do.body.7057
  %4161 = load %struct._object*, %struct._object** %_py_decref_tmp7059, align 8
  %ob_type7066 = getelementptr inbounds %struct._object, %struct._object* %4161, i32 0, i32 1
  %4162 = load %struct._typeobject*, %struct._typeobject** %ob_type7066, align 8
  %tp_dealloc7067 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4162, i32 0, i32 4
  %4163 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7067, align 8
  %4164 = load %struct._object*, %struct._object** %_py_decref_tmp7059, align 8
  call void %4163(%struct._object* %4164)
  br label %if.end.7068

if.end.7068:                                      ; preds = %if.else.7065, %if.then.7064
  br label %do.end.7069

do.end.7069:                                      ; preds = %if.end.7068
  br label %error

if.end.7070:                                      ; preds = %do.end.7040
  br label %while.cond.7013

while.end.7071:                                   ; preds = %while.cond.7013
  %4165 = load %struct._object*, %struct._object** %func6903, align 8
  %4166 = load %struct._object*, %struct._object** %anns, align 8
  %call7072 = call i32 @PyFunction_SetAnnotations(%struct._object* %4165, %struct._object* %4166)
  %cmp7073 = icmp ne i32 %call7072, 0
  br i1 %cmp7073, label %if.then.7075, label %if.end.7102

if.then.7075:                                     ; preds = %while.end.7071
  br label %do.body.7076

do.body.7076:                                     ; preds = %if.then.7075
  %4167 = load %struct._object*, %struct._object** %anns, align 8
  store %struct._object* %4167, %struct._object** %_py_decref_tmp7078, align 8
  %4168 = load %struct._object*, %struct._object** %_py_decref_tmp7078, align 8
  %ob_refcnt7079 = getelementptr inbounds %struct._object, %struct._object* %4168, i32 0, i32 0
  %4169 = load i64, i64* %ob_refcnt7079, align 8
  %dec7080 = add i64 %4169, -1
  store i64 %dec7080, i64* %ob_refcnt7079, align 8
  %cmp7081 = icmp ne i64 %dec7080, 0
  br i1 %cmp7081, label %if.then.7083, label %if.else.7084

if.then.7083:                                     ; preds = %do.body.7076
  br label %if.end.7087

if.else.7084:                                     ; preds = %do.body.7076
  %4170 = load %struct._object*, %struct._object** %_py_decref_tmp7078, align 8
  %ob_type7085 = getelementptr inbounds %struct._object, %struct._object* %4170, i32 0, i32 1
  %4171 = load %struct._typeobject*, %struct._typeobject** %ob_type7085, align 8
  %tp_dealloc7086 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4171, i32 0, i32 4
  %4172 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7086, align 8
  %4173 = load %struct._object*, %struct._object** %_py_decref_tmp7078, align 8
  call void %4172(%struct._object* %4173)
  br label %if.end.7087

if.end.7087:                                      ; preds = %if.else.7084, %if.then.7083
  br label %do.end.7088

do.end.7088:                                      ; preds = %if.end.7087
  br label %do.body.7089

do.body.7089:                                     ; preds = %do.end.7088
  %4174 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4174, %struct._object** %_py_decref_tmp7091, align 8
  %4175 = load %struct._object*, %struct._object** %_py_decref_tmp7091, align 8
  %ob_refcnt7092 = getelementptr inbounds %struct._object, %struct._object* %4175, i32 0, i32 0
  %4176 = load i64, i64* %ob_refcnt7092, align 8
  %dec7093 = add i64 %4176, -1
  store i64 %dec7093, i64* %ob_refcnt7092, align 8
  %cmp7094 = icmp ne i64 %dec7093, 0
  br i1 %cmp7094, label %if.then.7096, label %if.else.7097

if.then.7096:                                     ; preds = %do.body.7089
  br label %if.end.7100

if.else.7097:                                     ; preds = %do.body.7089
  %4177 = load %struct._object*, %struct._object** %_py_decref_tmp7091, align 8
  %ob_type7098 = getelementptr inbounds %struct._object, %struct._object* %4177, i32 0, i32 1
  %4178 = load %struct._typeobject*, %struct._typeobject** %ob_type7098, align 8
  %tp_dealloc7099 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4178, i32 0, i32 4
  %4179 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7099, align 8
  %4180 = load %struct._object*, %struct._object** %_py_decref_tmp7091, align 8
  call void %4179(%struct._object* %4180)
  br label %if.end.7100

if.end.7100:                                      ; preds = %if.else.7097, %if.then.7096
  br label %do.end.7101

do.end.7101:                                      ; preds = %if.end.7100
  br label %error

if.end.7102:                                      ; preds = %while.end.7071
  br label %do.body.7103

do.body.7103:                                     ; preds = %if.end.7102
  %4181 = load %struct._object*, %struct._object** %anns, align 8
  store %struct._object* %4181, %struct._object** %_py_decref_tmp7105, align 8
  %4182 = load %struct._object*, %struct._object** %_py_decref_tmp7105, align 8
  %ob_refcnt7106 = getelementptr inbounds %struct._object, %struct._object* %4182, i32 0, i32 0
  %4183 = load i64, i64* %ob_refcnt7106, align 8
  %dec7107 = add i64 %4183, -1
  store i64 %dec7107, i64* %ob_refcnt7106, align 8
  %cmp7108 = icmp ne i64 %dec7107, 0
  br i1 %cmp7108, label %if.then.7110, label %if.else.7111

if.then.7110:                                     ; preds = %do.body.7103
  br label %if.end.7114

if.else.7111:                                     ; preds = %do.body.7103
  %4184 = load %struct._object*, %struct._object** %_py_decref_tmp7105, align 8
  %ob_type7112 = getelementptr inbounds %struct._object, %struct._object* %4184, i32 0, i32 1
  %4185 = load %struct._typeobject*, %struct._typeobject** %ob_type7112, align 8
  %tp_dealloc7113 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4185, i32 0, i32 4
  %4186 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7113, align 8
  %4187 = load %struct._object*, %struct._object** %_py_decref_tmp7105, align 8
  call void %4186(%struct._object* %4187)
  br label %if.end.7114

if.end.7114:                                      ; preds = %if.else.7111, %if.then.7110
  br label %do.end.7115

do.end.7115:                                      ; preds = %if.end.7114
  br label %do.body.7116

do.body.7116:                                     ; preds = %do.end.7115
  %4188 = load %struct._object*, %struct._object** %names6991, align 8
  store %struct._object* %4188, %struct._object** %_py_decref_tmp7118, align 8
  %4189 = load %struct._object*, %struct._object** %_py_decref_tmp7118, align 8
  %ob_refcnt7119 = getelementptr inbounds %struct._object, %struct._object* %4189, i32 0, i32 0
  %4190 = load i64, i64* %ob_refcnt7119, align 8
  %dec7120 = add i64 %4190, -1
  store i64 %dec7120, i64* %ob_refcnt7119, align 8
  %cmp7121 = icmp ne i64 %dec7120, 0
  br i1 %cmp7121, label %if.then.7123, label %if.else.7124

if.then.7123:                                     ; preds = %do.body.7116
  br label %if.end.7127

if.else.7124:                                     ; preds = %do.body.7116
  %4191 = load %struct._object*, %struct._object** %_py_decref_tmp7118, align 8
  %ob_type7125 = getelementptr inbounds %struct._object, %struct._object* %4191, i32 0, i32 1
  %4192 = load %struct._typeobject*, %struct._typeobject** %ob_type7125, align 8
  %tp_dealloc7126 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4192, i32 0, i32 4
  %4193 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7126, align 8
  %4194 = load %struct._object*, %struct._object** %_py_decref_tmp7118, align 8
  call void %4193(%struct._object* %4194)
  br label %if.end.7127

if.end.7127:                                      ; preds = %if.else.7124, %if.then.7123
  br label %do.end.7128

do.end.7128:                                      ; preds = %if.end.7127
  br label %if.end.7129

if.end.7129:                                      ; preds = %do.end.7128, %if.end.6985
  %4195 = load i32, i32* %kwdefaults, align 4
  %cmp7130 = icmp sgt i32 %4195, 0
  br i1 %cmp7130, label %if.then.7132, label %if.end.7267

if.then.7132:                                     ; preds = %if.end.7129
  %call7134 = call %struct._object* @PyDict_New()
  store %struct._object* %call7134, %struct._object** %defs, align 8
  %4196 = load %struct._object*, %struct._object** %defs, align 8
  %cmp7135 = icmp eq %struct._object* %4196, null
  br i1 %cmp7135, label %if.then.7137, label %if.end.7151

if.then.7137:                                     ; preds = %if.then.7132
  br label %do.body.7138

do.body.7138:                                     ; preds = %if.then.7137
  %4197 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4197, %struct._object** %_py_decref_tmp7140, align 8
  %4198 = load %struct._object*, %struct._object** %_py_decref_tmp7140, align 8
  %ob_refcnt7141 = getelementptr inbounds %struct._object, %struct._object* %4198, i32 0, i32 0
  %4199 = load i64, i64* %ob_refcnt7141, align 8
  %dec7142 = add i64 %4199, -1
  store i64 %dec7142, i64* %ob_refcnt7141, align 8
  %cmp7143 = icmp ne i64 %dec7142, 0
  br i1 %cmp7143, label %if.then.7145, label %if.else.7146

if.then.7145:                                     ; preds = %do.body.7138
  br label %if.end.7149

if.else.7146:                                     ; preds = %do.body.7138
  %4200 = load %struct._object*, %struct._object** %_py_decref_tmp7140, align 8
  %ob_type7147 = getelementptr inbounds %struct._object, %struct._object* %4200, i32 0, i32 1
  %4201 = load %struct._typeobject*, %struct._typeobject** %ob_type7147, align 8
  %tp_dealloc7148 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4201, i32 0, i32 4
  %4202 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7148, align 8
  %4203 = load %struct._object*, %struct._object** %_py_decref_tmp7140, align 8
  call void %4202(%struct._object* %4203)
  br label %if.end.7149

if.end.7149:                                      ; preds = %if.else.7146, %if.then.7145
  br label %do.end.7150

do.end.7150:                                      ; preds = %if.end.7149
  br label %error

if.end.7151:                                      ; preds = %if.then.7132
  br label %while.cond.7152

while.cond.7152:                                  ; preds = %if.end.7221, %if.end.7151
  %4204 = load i32, i32* %kwdefaults, align 4
  %dec7153 = add i32 %4204, -1
  store i32 %dec7153, i32* %kwdefaults, align 4
  %cmp7154 = icmp sge i32 %dec7153, 0
  br i1 %cmp7154, label %while.body.7156, label %while.end.7222

while.body.7156:                                  ; preds = %while.cond.7152
  %4205 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7159 = getelementptr %struct._object*, %struct._object** %4205, i32 -1
  store %struct._object** %incdec.ptr7159, %struct._object*** %stack_pointer, align 8
  %4206 = load %struct._object*, %struct._object** %incdec.ptr7159, align 8
  store %struct._object* %4206, %struct._object** %v7158, align 8
  %4207 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7162 = getelementptr %struct._object*, %struct._object** %4207, i32 -1
  store %struct._object** %incdec.ptr7162, %struct._object*** %stack_pointer, align 8
  %4208 = load %struct._object*, %struct._object** %incdec.ptr7162, align 8
  store %struct._object* %4208, %struct._object** %key7161, align 8
  %4209 = load %struct._object*, %struct._object** %defs, align 8
  %4210 = load %struct._object*, %struct._object** %key7161, align 8
  %4211 = load %struct._object*, %struct._object** %v7158, align 8
  %call7165 = call i32 @PyDict_SetItem(%struct._object* %4209, %struct._object* %4210, %struct._object* %4211)
  store i32 %call7165, i32* %err7164, align 4
  br label %do.body.7166

do.body.7166:                                     ; preds = %while.body.7156
  %4212 = load %struct._object*, %struct._object** %v7158, align 8
  store %struct._object* %4212, %struct._object** %_py_decref_tmp7168, align 8
  %4213 = load %struct._object*, %struct._object** %_py_decref_tmp7168, align 8
  %ob_refcnt7169 = getelementptr inbounds %struct._object, %struct._object* %4213, i32 0, i32 0
  %4214 = load i64, i64* %ob_refcnt7169, align 8
  %dec7170 = add i64 %4214, -1
  store i64 %dec7170, i64* %ob_refcnt7169, align 8
  %cmp7171 = icmp ne i64 %dec7170, 0
  br i1 %cmp7171, label %if.then.7173, label %if.else.7174

if.then.7173:                                     ; preds = %do.body.7166
  br label %if.end.7177

if.else.7174:                                     ; preds = %do.body.7166
  %4215 = load %struct._object*, %struct._object** %_py_decref_tmp7168, align 8
  %ob_type7175 = getelementptr inbounds %struct._object, %struct._object* %4215, i32 0, i32 1
  %4216 = load %struct._typeobject*, %struct._typeobject** %ob_type7175, align 8
  %tp_dealloc7176 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4216, i32 0, i32 4
  %4217 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7176, align 8
  %4218 = load %struct._object*, %struct._object** %_py_decref_tmp7168, align 8
  call void %4217(%struct._object* %4218)
  br label %if.end.7177

if.end.7177:                                      ; preds = %if.else.7174, %if.then.7173
  br label %do.end.7178

do.end.7178:                                      ; preds = %if.end.7177
  br label %do.body.7179

do.body.7179:                                     ; preds = %do.end.7178
  %4219 = load %struct._object*, %struct._object** %key7161, align 8
  store %struct._object* %4219, %struct._object** %_py_decref_tmp7181, align 8
  %4220 = load %struct._object*, %struct._object** %_py_decref_tmp7181, align 8
  %ob_refcnt7182 = getelementptr inbounds %struct._object, %struct._object* %4220, i32 0, i32 0
  %4221 = load i64, i64* %ob_refcnt7182, align 8
  %dec7183 = add i64 %4221, -1
  store i64 %dec7183, i64* %ob_refcnt7182, align 8
  %cmp7184 = icmp ne i64 %dec7183, 0
  br i1 %cmp7184, label %if.then.7186, label %if.else.7187

if.then.7186:                                     ; preds = %do.body.7179
  br label %if.end.7190

if.else.7187:                                     ; preds = %do.body.7179
  %4222 = load %struct._object*, %struct._object** %_py_decref_tmp7181, align 8
  %ob_type7188 = getelementptr inbounds %struct._object, %struct._object* %4222, i32 0, i32 1
  %4223 = load %struct._typeobject*, %struct._typeobject** %ob_type7188, align 8
  %tp_dealloc7189 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4223, i32 0, i32 4
  %4224 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7189, align 8
  %4225 = load %struct._object*, %struct._object** %_py_decref_tmp7181, align 8
  call void %4224(%struct._object* %4225)
  br label %if.end.7190

if.end.7190:                                      ; preds = %if.else.7187, %if.then.7186
  br label %do.end.7191

do.end.7191:                                      ; preds = %if.end.7190
  %4226 = load i32, i32* %err7164, align 4
  %cmp7192 = icmp ne i32 %4226, 0
  br i1 %cmp7192, label %if.then.7194, label %if.end.7221

if.then.7194:                                     ; preds = %do.end.7191
  br label %do.body.7195

do.body.7195:                                     ; preds = %if.then.7194
  %4227 = load %struct._object*, %struct._object** %defs, align 8
  store %struct._object* %4227, %struct._object** %_py_decref_tmp7197, align 8
  %4228 = load %struct._object*, %struct._object** %_py_decref_tmp7197, align 8
  %ob_refcnt7198 = getelementptr inbounds %struct._object, %struct._object* %4228, i32 0, i32 0
  %4229 = load i64, i64* %ob_refcnt7198, align 8
  %dec7199 = add i64 %4229, -1
  store i64 %dec7199, i64* %ob_refcnt7198, align 8
  %cmp7200 = icmp ne i64 %dec7199, 0
  br i1 %cmp7200, label %if.then.7202, label %if.else.7203

if.then.7202:                                     ; preds = %do.body.7195
  br label %if.end.7206

if.else.7203:                                     ; preds = %do.body.7195
  %4230 = load %struct._object*, %struct._object** %_py_decref_tmp7197, align 8
  %ob_type7204 = getelementptr inbounds %struct._object, %struct._object* %4230, i32 0, i32 1
  %4231 = load %struct._typeobject*, %struct._typeobject** %ob_type7204, align 8
  %tp_dealloc7205 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4231, i32 0, i32 4
  %4232 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7205, align 8
  %4233 = load %struct._object*, %struct._object** %_py_decref_tmp7197, align 8
  call void %4232(%struct._object* %4233)
  br label %if.end.7206

if.end.7206:                                      ; preds = %if.else.7203, %if.then.7202
  br label %do.end.7207

do.end.7207:                                      ; preds = %if.end.7206
  br label %do.body.7208

do.body.7208:                                     ; preds = %do.end.7207
  %4234 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4234, %struct._object** %_py_decref_tmp7210, align 8
  %4235 = load %struct._object*, %struct._object** %_py_decref_tmp7210, align 8
  %ob_refcnt7211 = getelementptr inbounds %struct._object, %struct._object* %4235, i32 0, i32 0
  %4236 = load i64, i64* %ob_refcnt7211, align 8
  %dec7212 = add i64 %4236, -1
  store i64 %dec7212, i64* %ob_refcnt7211, align 8
  %cmp7213 = icmp ne i64 %dec7212, 0
  br i1 %cmp7213, label %if.then.7215, label %if.else.7216

if.then.7215:                                     ; preds = %do.body.7208
  br label %if.end.7219

if.else.7216:                                     ; preds = %do.body.7208
  %4237 = load %struct._object*, %struct._object** %_py_decref_tmp7210, align 8
  %ob_type7217 = getelementptr inbounds %struct._object, %struct._object* %4237, i32 0, i32 1
  %4238 = load %struct._typeobject*, %struct._typeobject** %ob_type7217, align 8
  %tp_dealloc7218 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4238, i32 0, i32 4
  %4239 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7218, align 8
  %4240 = load %struct._object*, %struct._object** %_py_decref_tmp7210, align 8
  call void %4239(%struct._object* %4240)
  br label %if.end.7219

if.end.7219:                                      ; preds = %if.else.7216, %if.then.7215
  br label %do.end.7220

do.end.7220:                                      ; preds = %if.end.7219
  br label %error

if.end.7221:                                      ; preds = %do.end.7191
  br label %while.cond.7152

while.end.7222:                                   ; preds = %while.cond.7152
  %4241 = load %struct._object*, %struct._object** %func6903, align 8
  %4242 = load %struct._object*, %struct._object** %defs, align 8
  %call7223 = call i32 @PyFunction_SetKwDefaults(%struct._object* %4241, %struct._object* %4242)
  %cmp7224 = icmp ne i32 %call7223, 0
  br i1 %cmp7224, label %if.then.7226, label %if.end.7253

if.then.7226:                                     ; preds = %while.end.7222
  br label %do.body.7227

do.body.7227:                                     ; preds = %if.then.7226
  %4243 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4243, %struct._object** %_py_decref_tmp7229, align 8
  %4244 = load %struct._object*, %struct._object** %_py_decref_tmp7229, align 8
  %ob_refcnt7230 = getelementptr inbounds %struct._object, %struct._object* %4244, i32 0, i32 0
  %4245 = load i64, i64* %ob_refcnt7230, align 8
  %dec7231 = add i64 %4245, -1
  store i64 %dec7231, i64* %ob_refcnt7230, align 8
  %cmp7232 = icmp ne i64 %dec7231, 0
  br i1 %cmp7232, label %if.then.7234, label %if.else.7235

if.then.7234:                                     ; preds = %do.body.7227
  br label %if.end.7238

if.else.7235:                                     ; preds = %do.body.7227
  %4246 = load %struct._object*, %struct._object** %_py_decref_tmp7229, align 8
  %ob_type7236 = getelementptr inbounds %struct._object, %struct._object* %4246, i32 0, i32 1
  %4247 = load %struct._typeobject*, %struct._typeobject** %ob_type7236, align 8
  %tp_dealloc7237 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4247, i32 0, i32 4
  %4248 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7237, align 8
  %4249 = load %struct._object*, %struct._object** %_py_decref_tmp7229, align 8
  call void %4248(%struct._object* %4249)
  br label %if.end.7238

if.end.7238:                                      ; preds = %if.else.7235, %if.then.7234
  br label %do.end.7239

do.end.7239:                                      ; preds = %if.end.7238
  br label %do.body.7240

do.body.7240:                                     ; preds = %do.end.7239
  %4250 = load %struct._object*, %struct._object** %defs, align 8
  store %struct._object* %4250, %struct._object** %_py_decref_tmp7242, align 8
  %4251 = load %struct._object*, %struct._object** %_py_decref_tmp7242, align 8
  %ob_refcnt7243 = getelementptr inbounds %struct._object, %struct._object* %4251, i32 0, i32 0
  %4252 = load i64, i64* %ob_refcnt7243, align 8
  %dec7244 = add i64 %4252, -1
  store i64 %dec7244, i64* %ob_refcnt7243, align 8
  %cmp7245 = icmp ne i64 %dec7244, 0
  br i1 %cmp7245, label %if.then.7247, label %if.else.7248

if.then.7247:                                     ; preds = %do.body.7240
  br label %if.end.7251

if.else.7248:                                     ; preds = %do.body.7240
  %4253 = load %struct._object*, %struct._object** %_py_decref_tmp7242, align 8
  %ob_type7249 = getelementptr inbounds %struct._object, %struct._object* %4253, i32 0, i32 1
  %4254 = load %struct._typeobject*, %struct._typeobject** %ob_type7249, align 8
  %tp_dealloc7250 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4254, i32 0, i32 4
  %4255 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7250, align 8
  %4256 = load %struct._object*, %struct._object** %_py_decref_tmp7242, align 8
  call void %4255(%struct._object* %4256)
  br label %if.end.7251

if.end.7251:                                      ; preds = %if.else.7248, %if.then.7247
  br label %do.end.7252

do.end.7252:                                      ; preds = %if.end.7251
  br label %error

if.end.7253:                                      ; preds = %while.end.7222
  br label %do.body.7254

do.body.7254:                                     ; preds = %if.end.7253
  %4257 = load %struct._object*, %struct._object** %defs, align 8
  store %struct._object* %4257, %struct._object** %_py_decref_tmp7256, align 8
  %4258 = load %struct._object*, %struct._object** %_py_decref_tmp7256, align 8
  %ob_refcnt7257 = getelementptr inbounds %struct._object, %struct._object* %4258, i32 0, i32 0
  %4259 = load i64, i64* %ob_refcnt7257, align 8
  %dec7258 = add i64 %4259, -1
  store i64 %dec7258, i64* %ob_refcnt7257, align 8
  %cmp7259 = icmp ne i64 %dec7258, 0
  br i1 %cmp7259, label %if.then.7261, label %if.else.7262

if.then.7261:                                     ; preds = %do.body.7254
  br label %if.end.7265

if.else.7262:                                     ; preds = %do.body.7254
  %4260 = load %struct._object*, %struct._object** %_py_decref_tmp7256, align 8
  %ob_type7263 = getelementptr inbounds %struct._object, %struct._object* %4260, i32 0, i32 1
  %4261 = load %struct._typeobject*, %struct._typeobject** %ob_type7263, align 8
  %tp_dealloc7264 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4261, i32 0, i32 4
  %4262 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7264, align 8
  %4263 = load %struct._object*, %struct._object** %_py_decref_tmp7256, align 8
  call void %4262(%struct._object* %4263)
  br label %if.end.7265

if.end.7265:                                      ; preds = %if.else.7262, %if.then.7261
  br label %do.end.7266

do.end.7266:                                      ; preds = %if.end.7265
  br label %if.end.7267

if.end.7267:                                      ; preds = %do.end.7266, %if.end.7129
  %4264 = load i32, i32* %posdefaults, align 4
  %cmp7268 = icmp sgt i32 %4264, 0
  br i1 %cmp7268, label %if.then.7270, label %if.end.7346

if.then.7270:                                     ; preds = %if.end.7267
  %4265 = load i32, i32* %posdefaults, align 4
  %conv7273 = sext i32 %4265 to i64
  %call7274 = call %struct._object* @PyTuple_New(i64 %conv7273)
  store %struct._object* %call7274, %struct._object** %defs7272, align 8
  %4266 = load %struct._object*, %struct._object** %defs7272, align 8
  %cmp7275 = icmp eq %struct._object* %4266, null
  br i1 %cmp7275, label %if.then.7277, label %if.end.7291

if.then.7277:                                     ; preds = %if.then.7270
  br label %do.body.7278

do.body.7278:                                     ; preds = %if.then.7277
  %4267 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4267, %struct._object** %_py_decref_tmp7280, align 8
  %4268 = load %struct._object*, %struct._object** %_py_decref_tmp7280, align 8
  %ob_refcnt7281 = getelementptr inbounds %struct._object, %struct._object* %4268, i32 0, i32 0
  %4269 = load i64, i64* %ob_refcnt7281, align 8
  %dec7282 = add i64 %4269, -1
  store i64 %dec7282, i64* %ob_refcnt7281, align 8
  %cmp7283 = icmp ne i64 %dec7282, 0
  br i1 %cmp7283, label %if.then.7285, label %if.else.7286

if.then.7285:                                     ; preds = %do.body.7278
  br label %if.end.7289

if.else.7286:                                     ; preds = %do.body.7278
  %4270 = load %struct._object*, %struct._object** %_py_decref_tmp7280, align 8
  %ob_type7287 = getelementptr inbounds %struct._object, %struct._object* %4270, i32 0, i32 1
  %4271 = load %struct._typeobject*, %struct._typeobject** %ob_type7287, align 8
  %tp_dealloc7288 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4271, i32 0, i32 4
  %4272 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7288, align 8
  %4273 = load %struct._object*, %struct._object** %_py_decref_tmp7280, align 8
  call void %4272(%struct._object* %4273)
  br label %if.end.7289

if.end.7289:                                      ; preds = %if.else.7286, %if.then.7285
  br label %do.end.7290

do.end.7290:                                      ; preds = %if.end.7289
  br label %error

if.end.7291:                                      ; preds = %if.then.7270
  br label %while.cond.7292

while.cond.7292:                                  ; preds = %while.body.7296, %if.end.7291
  %4274 = load i32, i32* %posdefaults, align 4
  %dec7293 = add i32 %4274, -1
  store i32 %dec7293, i32* %posdefaults, align 4
  %cmp7294 = icmp sge i32 %dec7293, 0
  br i1 %cmp7294, label %while.body.7296, label %while.end.7301

while.body.7296:                                  ; preds = %while.cond.7292
  %4275 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7297 = getelementptr %struct._object*, %struct._object** %4275, i32 -1
  store %struct._object** %incdec.ptr7297, %struct._object*** %stack_pointer, align 8
  %4276 = load %struct._object*, %struct._object** %incdec.ptr7297, align 8
  %4277 = load i32, i32* %posdefaults, align 4
  %idxprom7298 = sext i32 %4277 to i64
  %4278 = load %struct._object*, %struct._object** %defs7272, align 8
  %4279 = bitcast %struct._object* %4278 to %struct.PyTupleObject*
  %ob_item7299 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %4279, i32 0, i32 1
  %arrayidx7300 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item7299, i32 0, i64 %idxprom7298
  store %struct._object* %4276, %struct._object** %arrayidx7300, align 8
  br label %while.cond.7292

while.end.7301:                                   ; preds = %while.cond.7292
  %4280 = load %struct._object*, %struct._object** %func6903, align 8
  %4281 = load %struct._object*, %struct._object** %defs7272, align 8
  %call7302 = call i32 @PyFunction_SetDefaults(%struct._object* %4280, %struct._object* %4281)
  %cmp7303 = icmp ne i32 %call7302, 0
  br i1 %cmp7303, label %if.then.7305, label %if.end.7332

if.then.7305:                                     ; preds = %while.end.7301
  br label %do.body.7306

do.body.7306:                                     ; preds = %if.then.7305
  %4282 = load %struct._object*, %struct._object** %defs7272, align 8
  store %struct._object* %4282, %struct._object** %_py_decref_tmp7308, align 8
  %4283 = load %struct._object*, %struct._object** %_py_decref_tmp7308, align 8
  %ob_refcnt7309 = getelementptr inbounds %struct._object, %struct._object* %4283, i32 0, i32 0
  %4284 = load i64, i64* %ob_refcnt7309, align 8
  %dec7310 = add i64 %4284, -1
  store i64 %dec7310, i64* %ob_refcnt7309, align 8
  %cmp7311 = icmp ne i64 %dec7310, 0
  br i1 %cmp7311, label %if.then.7313, label %if.else.7314

if.then.7313:                                     ; preds = %do.body.7306
  br label %if.end.7317

if.else.7314:                                     ; preds = %do.body.7306
  %4285 = load %struct._object*, %struct._object** %_py_decref_tmp7308, align 8
  %ob_type7315 = getelementptr inbounds %struct._object, %struct._object* %4285, i32 0, i32 1
  %4286 = load %struct._typeobject*, %struct._typeobject** %ob_type7315, align 8
  %tp_dealloc7316 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4286, i32 0, i32 4
  %4287 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7316, align 8
  %4288 = load %struct._object*, %struct._object** %_py_decref_tmp7308, align 8
  call void %4287(%struct._object* %4288)
  br label %if.end.7317

if.end.7317:                                      ; preds = %if.else.7314, %if.then.7313
  br label %do.end.7318

do.end.7318:                                      ; preds = %if.end.7317
  br label %do.body.7319

do.body.7319:                                     ; preds = %do.end.7318
  %4289 = load %struct._object*, %struct._object** %func6903, align 8
  store %struct._object* %4289, %struct._object** %_py_decref_tmp7321, align 8
  %4290 = load %struct._object*, %struct._object** %_py_decref_tmp7321, align 8
  %ob_refcnt7322 = getelementptr inbounds %struct._object, %struct._object* %4290, i32 0, i32 0
  %4291 = load i64, i64* %ob_refcnt7322, align 8
  %dec7323 = add i64 %4291, -1
  store i64 %dec7323, i64* %ob_refcnt7322, align 8
  %cmp7324 = icmp ne i64 %dec7323, 0
  br i1 %cmp7324, label %if.then.7326, label %if.else.7327

if.then.7326:                                     ; preds = %do.body.7319
  br label %if.end.7330

if.else.7327:                                     ; preds = %do.body.7319
  %4292 = load %struct._object*, %struct._object** %_py_decref_tmp7321, align 8
  %ob_type7328 = getelementptr inbounds %struct._object, %struct._object* %4292, i32 0, i32 1
  %4293 = load %struct._typeobject*, %struct._typeobject** %ob_type7328, align 8
  %tp_dealloc7329 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4293, i32 0, i32 4
  %4294 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7329, align 8
  %4295 = load %struct._object*, %struct._object** %_py_decref_tmp7321, align 8
  call void %4294(%struct._object* %4295)
  br label %if.end.7330

if.end.7330:                                      ; preds = %if.else.7327, %if.then.7326
  br label %do.end.7331

do.end.7331:                                      ; preds = %if.end.7330
  br label %error

if.end.7332:                                      ; preds = %while.end.7301
  br label %do.body.7333

do.body.7333:                                     ; preds = %if.end.7332
  %4296 = load %struct._object*, %struct._object** %defs7272, align 8
  store %struct._object* %4296, %struct._object** %_py_decref_tmp7335, align 8
  %4297 = load %struct._object*, %struct._object** %_py_decref_tmp7335, align 8
  %ob_refcnt7336 = getelementptr inbounds %struct._object, %struct._object* %4297, i32 0, i32 0
  %4298 = load i64, i64* %ob_refcnt7336, align 8
  %dec7337 = add i64 %4298, -1
  store i64 %dec7337, i64* %ob_refcnt7336, align 8
  %cmp7338 = icmp ne i64 %dec7337, 0
  br i1 %cmp7338, label %if.then.7340, label %if.else.7341

if.then.7340:                                     ; preds = %do.body.7333
  br label %if.end.7344

if.else.7341:                                     ; preds = %do.body.7333
  %4299 = load %struct._object*, %struct._object** %_py_decref_tmp7335, align 8
  %ob_type7342 = getelementptr inbounds %struct._object, %struct._object* %4299, i32 0, i32 1
  %4300 = load %struct._typeobject*, %struct._typeobject** %ob_type7342, align 8
  %tp_dealloc7343 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4300, i32 0, i32 4
  %4301 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7343, align 8
  %4302 = load %struct._object*, %struct._object** %_py_decref_tmp7335, align 8
  call void %4301(%struct._object* %4302)
  br label %if.end.7344

if.end.7344:                                      ; preds = %if.else.7341, %if.then.7340
  br label %do.end.7345

do.end.7345:                                      ; preds = %if.end.7344
  br label %if.end.7346

if.end.7346:                                      ; preds = %do.end.7345, %if.end.7267
  %4303 = load %struct._object*, %struct._object** %func6903, align 8
  %4304 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7347 = getelementptr %struct._object*, %struct._object** %4304, i32 1
  store %struct._object** %incdec.ptr7347, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4303, %struct._object** %4304, align 8
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val7349, align 8
  %4305 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val7349, align 8
  %_value7354 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %4305, i32 0, i32 0
  store i32* %_value7354, i32** %volatile_data7353, align 8
  store i32 0, i32* %order7356, align 4
  %4306 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val7349, align 8
  %4307 = bitcast %struct._Py_atomic_int* %4306 to i8*
  %4308 = load i32, i32* %order7356, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %4307, i32 %4308)
  %4309 = load i32, i32* %order7356, align 4
  switch i32 %4309, label %sw.default.7358 [
    i32 2, label %sw.bb.7357
    i32 3, label %sw.bb.7357
    i32 4, label %sw.bb.7357
  ]

sw.bb.7357:                                       ; preds = %if.end.7346, %if.end.7346, %if.end.7346
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.7359

sw.default.7358:                                  ; preds = %if.end.7346
  br label %sw.epilog.7359

sw.epilog.7359:                                   ; preds = %sw.default.7358, %sw.bb.7357
  %4310 = load i32*, i32** %volatile_data7353, align 8
  %4311 = load volatile i32, i32* %4310, align 4
  store i32 %4311, i32* %result7351, align 4
  %4312 = load i32, i32* %order7356, align 4
  switch i32 %4312, label %sw.default.7361 [
    i32 1, label %sw.bb.7360
    i32 3, label %sw.bb.7360
    i32 4, label %sw.bb.7360
  ]

sw.bb.7360:                                       ; preds = %sw.epilog.7359, %sw.epilog.7359, %sw.epilog.7359
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.7362

sw.default.7361:                                  ; preds = %sw.epilog.7359
  br label %sw.epilog.7362

sw.epilog.7362:                                   ; preds = %sw.default.7361, %sw.bb.7360
  %4313 = load i32, i32* %result7351, align 4
  store i32 %4313, i32* %tmp7363
  %4314 = load i32, i32* %tmp7363
  %tobool7364 = icmp ne i32 %4314, 0
  br i1 %tobool7364, label %if.end.7377, label %if.then.7365

if.then.7365:                                     ; preds = %sw.epilog.7362
  %4315 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool7366 = icmp ne i32 %4315, 0
  br i1 %tobool7366, label %if.end.7376, label %if.then.7367

if.then.7367:                                     ; preds = %if.then.7365
  %4316 = load i8*, i8** %next_instr, align 8
  %4317 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast7368 = ptrtoint i8* %4316 to i64
  %sub.ptr.rhs.cast7369 = ptrtoint i8* %4317 to i64
  %sub.ptr.sub7370 = sub i64 %sub.ptr.lhs.cast7368, %sub.ptr.rhs.cast7369
  %conv7371 = trunc i64 %sub.ptr.sub7370 to i32
  %4318 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti7372 = getelementptr inbounds %struct._frame, %struct._frame* %4318, i32 0, i32 13
  store i32 %conv7371, i32* %f_lasti7372, align 4
  %4319 = load i8*, i8** %next_instr, align 8
  %incdec.ptr7373 = getelementptr i8, i8* %4319, i32 1
  store i8* %incdec.ptr7373, i8** %next_instr, align 8
  %4320 = load i8, i8* %4319, align 1
  %idxprom7374 = zext i8 %4320 to i64
  %arrayidx7375 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom7374
  %4321 = load i8*, i8** %arrayidx7375, align 8
  br label %indirectgoto

if.end.7376:                                      ; preds = %if.then.7365
  br label %fast_next_opcode

if.end.7377:                                      ; preds = %sw.epilog.7362
  br label %for.cond

TARGET_BUILD_SLICE:                               ; preds = %indirectgoto
  store i32 133, i32* %opcode, align 4
  %4322 = load i8*, i8** %next_instr, align 8
  %add.ptr7378 = getelementptr i8, i8* %4322, i64 2
  store i8* %add.ptr7378, i8** %next_instr, align 8
  %4323 = load i8*, i8** %next_instr, align 8
  %arrayidx7379 = getelementptr i8, i8* %4323, i64 -1
  %4324 = load i8, i8* %arrayidx7379, align 1
  %conv7380 = zext i8 %4324 to i32
  %shl7381 = shl i32 %conv7380, 8
  %4325 = load i8*, i8** %next_instr, align 8
  %arrayidx7382 = getelementptr i8, i8* %4325, i64 -2
  %4326 = load i8, i8* %arrayidx7382, align 1
  %conv7383 = zext i8 %4326 to i32
  %add7384 = add i32 %shl7381, %conv7383
  store i32 %add7384, i32* %oparg, align 4
  br label %sw.bb.7385

sw.bb.7385:                                       ; preds = %dispatch_opcode, %TARGET_BUILD_SLICE
  %4327 = load i32, i32* %oparg, align 4
  %cmp7390 = icmp eq i32 %4327, 3
  br i1 %cmp7390, label %if.then.7392, label %if.else.7394

if.then.7392:                                     ; preds = %sw.bb.7385
  %4328 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7393 = getelementptr %struct._object*, %struct._object** %4328, i32 -1
  store %struct._object** %incdec.ptr7393, %struct._object*** %stack_pointer, align 8
  %4329 = load %struct._object*, %struct._object** %incdec.ptr7393, align 8
  store %struct._object* %4329, %struct._object** %step, align 8
  br label %if.end.7395

if.else.7394:                                     ; preds = %sw.bb.7385
  store %struct._object* null, %struct._object** %step, align 8
  br label %if.end.7395

if.end.7395:                                      ; preds = %if.else.7394, %if.then.7392
  %4330 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7396 = getelementptr %struct._object*, %struct._object** %4330, i32 -1
  store %struct._object** %incdec.ptr7396, %struct._object*** %stack_pointer, align 8
  %4331 = load %struct._object*, %struct._object** %incdec.ptr7396, align 8
  store %struct._object* %4331, %struct._object** %stop, align 8
  %4332 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx7397 = getelementptr %struct._object*, %struct._object** %4332, i64 -1
  %4333 = load %struct._object*, %struct._object** %arrayidx7397, align 8
  store %struct._object* %4333, %struct._object** %start, align 8
  %4334 = load %struct._object*, %struct._object** %start, align 8
  %4335 = load %struct._object*, %struct._object** %stop, align 8
  %4336 = load %struct._object*, %struct._object** %step, align 8
  %call7398 = call %struct._object* @PySlice_New(%struct._object* %4334, %struct._object* %4335, %struct._object* %4336)
  store %struct._object* %call7398, %struct._object** %slice, align 8
  br label %do.body.7399

do.body.7399:                                     ; preds = %if.end.7395
  %4337 = load %struct._object*, %struct._object** %start, align 8
  store %struct._object* %4337, %struct._object** %_py_decref_tmp7401, align 8
  %4338 = load %struct._object*, %struct._object** %_py_decref_tmp7401, align 8
  %ob_refcnt7402 = getelementptr inbounds %struct._object, %struct._object* %4338, i32 0, i32 0
  %4339 = load i64, i64* %ob_refcnt7402, align 8
  %dec7403 = add i64 %4339, -1
  store i64 %dec7403, i64* %ob_refcnt7402, align 8
  %cmp7404 = icmp ne i64 %dec7403, 0
  br i1 %cmp7404, label %if.then.7406, label %if.else.7407

if.then.7406:                                     ; preds = %do.body.7399
  br label %if.end.7410

if.else.7407:                                     ; preds = %do.body.7399
  %4340 = load %struct._object*, %struct._object** %_py_decref_tmp7401, align 8
  %ob_type7408 = getelementptr inbounds %struct._object, %struct._object* %4340, i32 0, i32 1
  %4341 = load %struct._typeobject*, %struct._typeobject** %ob_type7408, align 8
  %tp_dealloc7409 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4341, i32 0, i32 4
  %4342 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7409, align 8
  %4343 = load %struct._object*, %struct._object** %_py_decref_tmp7401, align 8
  call void %4342(%struct._object* %4343)
  br label %if.end.7410

if.end.7410:                                      ; preds = %if.else.7407, %if.then.7406
  br label %do.end.7411

do.end.7411:                                      ; preds = %if.end.7410
  br label %do.body.7412

do.body.7412:                                     ; preds = %do.end.7411
  %4344 = load %struct._object*, %struct._object** %stop, align 8
  store %struct._object* %4344, %struct._object** %_py_decref_tmp7414, align 8
  %4345 = load %struct._object*, %struct._object** %_py_decref_tmp7414, align 8
  %ob_refcnt7415 = getelementptr inbounds %struct._object, %struct._object* %4345, i32 0, i32 0
  %4346 = load i64, i64* %ob_refcnt7415, align 8
  %dec7416 = add i64 %4346, -1
  store i64 %dec7416, i64* %ob_refcnt7415, align 8
  %cmp7417 = icmp ne i64 %dec7416, 0
  br i1 %cmp7417, label %if.then.7419, label %if.else.7420

if.then.7419:                                     ; preds = %do.body.7412
  br label %if.end.7423

if.else.7420:                                     ; preds = %do.body.7412
  %4347 = load %struct._object*, %struct._object** %_py_decref_tmp7414, align 8
  %ob_type7421 = getelementptr inbounds %struct._object, %struct._object* %4347, i32 0, i32 1
  %4348 = load %struct._typeobject*, %struct._typeobject** %ob_type7421, align 8
  %tp_dealloc7422 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4348, i32 0, i32 4
  %4349 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7422, align 8
  %4350 = load %struct._object*, %struct._object** %_py_decref_tmp7414, align 8
  call void %4349(%struct._object* %4350)
  br label %if.end.7423

if.end.7423:                                      ; preds = %if.else.7420, %if.then.7419
  br label %do.end.7424

do.end.7424:                                      ; preds = %if.end.7423
  br label %do.body.7425

do.body.7425:                                     ; preds = %do.end.7424
  %4351 = load %struct._object*, %struct._object** %step, align 8
  store %struct._object* %4351, %struct._object** %_py_xdecref_tmp7427, align 8
  %4352 = load %struct._object*, %struct._object** %_py_xdecref_tmp7427, align 8
  %cmp7428 = icmp ne %struct._object* %4352, null
  br i1 %cmp7428, label %if.then.7430, label %if.end.7444

if.then.7430:                                     ; preds = %do.body.7425
  br label %do.body.7431

do.body.7431:                                     ; preds = %if.then.7430
  %4353 = load %struct._object*, %struct._object** %_py_xdecref_tmp7427, align 8
  store %struct._object* %4353, %struct._object** %_py_decref_tmp7433, align 8
  %4354 = load %struct._object*, %struct._object** %_py_decref_tmp7433, align 8
  %ob_refcnt7434 = getelementptr inbounds %struct._object, %struct._object* %4354, i32 0, i32 0
  %4355 = load i64, i64* %ob_refcnt7434, align 8
  %dec7435 = add i64 %4355, -1
  store i64 %dec7435, i64* %ob_refcnt7434, align 8
  %cmp7436 = icmp ne i64 %dec7435, 0
  br i1 %cmp7436, label %if.then.7438, label %if.else.7439

if.then.7438:                                     ; preds = %do.body.7431
  br label %if.end.7442

if.else.7439:                                     ; preds = %do.body.7431
  %4356 = load %struct._object*, %struct._object** %_py_decref_tmp7433, align 8
  %ob_type7440 = getelementptr inbounds %struct._object, %struct._object* %4356, i32 0, i32 1
  %4357 = load %struct._typeobject*, %struct._typeobject** %ob_type7440, align 8
  %tp_dealloc7441 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4357, i32 0, i32 4
  %4358 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7441, align 8
  %4359 = load %struct._object*, %struct._object** %_py_decref_tmp7433, align 8
  call void %4358(%struct._object* %4359)
  br label %if.end.7442

if.end.7442:                                      ; preds = %if.else.7439, %if.then.7438
  br label %do.end.7443

do.end.7443:                                      ; preds = %if.end.7442
  br label %if.end.7444

if.end.7444:                                      ; preds = %do.end.7443, %do.body.7425
  br label %do.end.7445

do.end.7445:                                      ; preds = %if.end.7444
  %4360 = load %struct._object*, %struct._object** %slice, align 8
  %4361 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %arrayidx7446 = getelementptr %struct._object*, %struct._object** %4361, i64 -1
  store %struct._object* %4360, %struct._object** %arrayidx7446, align 8
  %4362 = load %struct._object*, %struct._object** %slice, align 8
  %cmp7447 = icmp eq %struct._object* %4362, null
  br i1 %cmp7447, label %if.then.7449, label %if.end.7450

if.then.7449:                                     ; preds = %do.end.7445
  br label %error

if.end.7450:                                      ; preds = %do.end.7445
  store %struct._Py_atomic_int* @eval_breaker, %struct._Py_atomic_int** %atomic_val7452, align 8
  %4363 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val7452, align 8
  %_value7457 = getelementptr inbounds %struct._Py_atomic_int, %struct._Py_atomic_int* %4363, i32 0, i32 0
  store i32* %_value7457, i32** %volatile_data7456, align 8
  store i32 0, i32* %order7459, align 4
  %4364 = load %struct._Py_atomic_int*, %struct._Py_atomic_int** %atomic_val7452, align 8
  %4365 = bitcast %struct._Py_atomic_int* %4364 to i8*
  %4366 = load i32, i32* %order7459, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %4365, i32 %4366)
  %4367 = load i32, i32* %order7459, align 4
  switch i32 %4367, label %sw.default.7461 [
    i32 2, label %sw.bb.7460
    i32 3, label %sw.bb.7460
    i32 4, label %sw.bb.7460
  ]

sw.bb.7460:                                       ; preds = %if.end.7450, %if.end.7450, %if.end.7450
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.7462

sw.default.7461:                                  ; preds = %if.end.7450
  br label %sw.epilog.7462

sw.epilog.7462:                                   ; preds = %sw.default.7461, %sw.bb.7460
  %4368 = load i32*, i32** %volatile_data7456, align 8
  %4369 = load volatile i32, i32* %4368, align 4
  store i32 %4369, i32* %result7454, align 4
  %4370 = load i32, i32* %order7459, align 4
  switch i32 %4370, label %sw.default.7464 [
    i32 1, label %sw.bb.7463
    i32 3, label %sw.bb.7463
    i32 4, label %sw.bb.7463
  ]

sw.bb.7463:                                       ; preds = %sw.epilog.7462, %sw.epilog.7462, %sw.epilog.7462
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.7465

sw.default.7464:                                  ; preds = %sw.epilog.7462
  br label %sw.epilog.7465

sw.epilog.7465:                                   ; preds = %sw.default.7464, %sw.bb.7463
  %4371 = load i32, i32* %result7454, align 4
  store i32 %4371, i32* %tmp7466
  %4372 = load i32, i32* %tmp7466
  %tobool7467 = icmp ne i32 %4372, 0
  br i1 %tobool7467, label %if.end.7480, label %if.then.7468

if.then.7468:                                     ; preds = %sw.epilog.7465
  %4373 = load i32, i32* @_Py_TracingPossible, align 4
  %tobool7469 = icmp ne i32 %4373, 0
  br i1 %tobool7469, label %if.end.7479, label %if.then.7470

if.then.7470:                                     ; preds = %if.then.7468
  %4374 = load i8*, i8** %next_instr, align 8
  %4375 = load i8*, i8** %first_instr, align 8
  %sub.ptr.lhs.cast7471 = ptrtoint i8* %4374 to i64
  %sub.ptr.rhs.cast7472 = ptrtoint i8* %4375 to i64
  %sub.ptr.sub7473 = sub i64 %sub.ptr.lhs.cast7471, %sub.ptr.rhs.cast7472
  %conv7474 = trunc i64 %sub.ptr.sub7473 to i32
  %4376 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_lasti7475 = getelementptr inbounds %struct._frame, %struct._frame* %4376, i32 0, i32 13
  store i32 %conv7474, i32* %f_lasti7475, align 4
  %4377 = load i8*, i8** %next_instr, align 8
  %incdec.ptr7476 = getelementptr i8, i8* %4377, i32 1
  store i8* %incdec.ptr7476, i8** %next_instr, align 8
  %4378 = load i8, i8* %4377, align 1
  %idxprom7477 = zext i8 %4378 to i64
  %arrayidx7478 = getelementptr [256 x i8*], [256 x i8*]* @PyEval_EvalFrameEx.opcode_targets, i32 0, i64 %idxprom7477
  %4379 = load i8*, i8** %arrayidx7478, align 8
  br label %indirectgoto

if.end.7479:                                      ; preds = %if.then.7468
  br label %fast_next_opcode

if.end.7480:                                      ; preds = %sw.epilog.7465
  br label %for.cond

TARGET_EXTENDED_ARG:                              ; preds = %indirectgoto
  store i32 144, i32* %opcode, align 4
  %4380 = load i8*, i8** %next_instr, align 8
  %add.ptr7481 = getelementptr i8, i8* %4380, i64 2
  store i8* %add.ptr7481, i8** %next_instr, align 8
  %4381 = load i8*, i8** %next_instr, align 8
  %arrayidx7482 = getelementptr i8, i8* %4381, i64 -1
  %4382 = load i8, i8* %arrayidx7482, align 1
  %conv7483 = zext i8 %4382 to i32
  %shl7484 = shl i32 %conv7483, 8
  %4383 = load i8*, i8** %next_instr, align 8
  %arrayidx7485 = getelementptr i8, i8* %4383, i64 -2
  %4384 = load i8, i8* %arrayidx7485, align 1
  %conv7486 = zext i8 %4384 to i32
  %add7487 = add i32 %shl7484, %conv7486
  store i32 %add7487, i32* %oparg, align 4
  br label %sw.bb.7488

sw.bb.7488:                                       ; preds = %dispatch_opcode, %TARGET_EXTENDED_ARG
  %4385 = load i8*, i8** %next_instr, align 8
  %incdec.ptr7489 = getelementptr i8, i8* %4385, i32 1
  store i8* %incdec.ptr7489, i8** %next_instr, align 8
  %4386 = load i8, i8* %4385, align 1
  %conv7490 = zext i8 %4386 to i32
  store i32 %conv7490, i32* %opcode, align 4
  %4387 = load i32, i32* %oparg, align 4
  %shl7491 = shl i32 %4387, 16
  %4388 = load i8*, i8** %next_instr, align 8
  %add.ptr7492 = getelementptr i8, i8* %4388, i64 2
  store i8* %add.ptr7492, i8** %next_instr, align 8
  %4389 = load i8*, i8** %next_instr, align 8
  %arrayidx7493 = getelementptr i8, i8* %4389, i64 -1
  %4390 = load i8, i8* %arrayidx7493, align 1
  %conv7494 = zext i8 %4390 to i32
  %shl7495 = shl i32 %conv7494, 8
  %4391 = load i8*, i8** %next_instr, align 8
  %arrayidx7496 = getelementptr i8, i8* %4391, i64 -2
  %4392 = load i8, i8* %arrayidx7496, align 1
  %conv7497 = zext i8 %4392 to i32
  %add7498 = add i32 %shl7495, %conv7497
  %or7499 = or i32 %shl7491, %add7498
  store i32 %or7499, i32* %oparg, align 4
  br label %dispatch_opcode

_unknown_opcode:                                  ; preds = %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto, %indirectgoto
  br label %sw.default.7500

sw.default.7500:                                  ; preds = %dispatch_opcode, %_unknown_opcode
  %4393 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4394 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call7501 = call i32 @PyFrame_GetLineNumber(%struct._frame* %4394)
  %4395 = load i32, i32* %opcode, align 4
  %call7502 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4393, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.32, i32 0, i32 0), i32 %call7501, i32 %4395)
  %4396 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %4396, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i32 0, i32 0))
  br label %error

sw.epilog.7503:                                   ; preds = %if.then.3525
  br label %error

error:                                            ; preds = %sw.epilog.7503, %sw.default.7500, %if.then.7449, %do.end.7331, %do.end.7290, %do.end.7252, %do.end.7220, %do.end.7150, %do.end.7101, %do.end.7069, %do.end.7010, %do.end.6970, %if.then.6934, %if.then.6842, %if.then.6688, %if.then.6634, %if.then.6611, %if.then.6492, %if.then.6474, %if.then.6455, %if.then.6371, %if.then.6301, %if.then.6213, %if.else.6119, %if.else.6003, %if.else.5887, %if.else.5760, %if.then.5613, %if.then.5559, %if.then.5541, %if.then.5536, %if.then.5493, %do.end.5460, %if.then.5384, %if.then.5329, %if.then.5251, %if.then.5184, %if.then.5101, %if.then.5027, %do.end.4981, %if.then.4937, %if.then.4877, %if.then.4818, %if.then.4711, %if.then.4658, %if.then.4645, %if.end.4553, %if.end.4504, %if.end.4395, %if.end.4377, %if.end.4291, %if.then.4278, %if.then.4247, %if.then.4205, %if.then.4154, %if.then.4103, %if.then.4037, %if.then.3971, %do.end.3876, %do.end.3792, %if.then.3686, %if.then.3680, %if.then.3628, %do.end.3603, %if.end.3535, %if.then.3516, %do.end.3459, %if.then.3029, %if.then.2971, %sw.epilog.2914, %if.then.2848, %do.end.2830, %if.then.2775, %if.then.2704, %if.then.2617, %if.then.2546, %if.then.2475, %if.then.2404, %if.then.2333, %if.then.2262, %if.then.2191, %if.then.2109, %if.then.2039, %if.then.1968, %if.then.1897, %if.then.1826, %if.then.1755, %if.then.1690, %if.then.1626, %if.then.1555, %if.then.1484, %if.then.1413, %if.then.1342, %if.then.1271, %if.then.1202, %if.then.1132, %if.then.1051, %if.then.976, %if.then.905, %if.then.837, %if.then.768, %if.then.699, %if.end.674, %if.then.550, %if.then.495, %if.then.267, %if.then.231, %do.end.202, %if.then.111, %if.then.66
  store i32 2, i32* %why, align 4
  %call7504 = call %struct._object* @PyErr_Occurred()
  %tobool7505 = icmp ne %struct._object* %call7504, null
  br i1 %tobool7505, label %if.end.7507, label %if.then.7506

if.then.7506:                                     ; preds = %error
  %4397 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %4397, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34, i32 0, i32 0))
  br label %if.end.7507

if.end.7507:                                      ; preds = %if.then.7506, %error
  %4398 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call7508 = call i32 @PyTraceBack_Here(%struct._frame* %4398)
  %4399 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc7509 = getelementptr inbounds %struct._ts, %struct._ts* %4399, i32 0, i32 10
  %4400 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc7509, align 8
  %cmp7510 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4400, null
  br i1 %cmp7510, label %if.then.7512, label %if.end.7515

if.then.7512:                                     ; preds = %if.end.7507
  %4401 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc7513 = getelementptr inbounds %struct._ts, %struct._ts* %4401, i32 0, i32 10
  %4402 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc7513, align 8
  %4403 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj7514 = getelementptr inbounds %struct._ts, %struct._ts* %4403, i32 0, i32 12
  %4404 = load %struct._object*, %struct._object** %c_traceobj7514, align 8
  %4405 = load %struct._ts*, %struct._ts** %tstate, align 8
  %4406 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @call_exc_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4402, %struct._object* %4404, %struct._ts* %4405, %struct._frame* %4406)
  br label %if.end.7515

if.end.7515:                                      ; preds = %if.then.7512, %if.end.7507
  br label %fast_block_end

fast_block_end:                                   ; preds = %if.end.7515, %if.end.6372, %sw.bb.6358, %if.then.3437, %do.end.3425, %sw.bb.2915, %if.then.2911
  br label %while.cond.7516

while.cond.7516:                                  ; preds = %if.end.7799, %do.end.7671, %fast_block_end
  %4407 = load i32, i32* %why, align 4
  %cmp7517 = icmp ne i32 %4407, 1
  br i1 %cmp7517, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond.7516
  %4408 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_iblock7519 = getelementptr inbounds %struct._frame, %struct._frame* %4408, i32 0, i32 15
  %4409 = load i32, i32* %f_iblock7519, align 4
  %cmp7520 = icmp sgt i32 %4409, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond.7516
  %4410 = phi i1 [ false, %while.cond.7516 ], [ %cmp7520, %land.rhs ]
  br i1 %4410, label %while.body.7522, label %while.end.7800

while.body.7522:                                  ; preds = %land.end
  %4411 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_iblock7525 = getelementptr inbounds %struct._frame, %struct._frame* %4411, i32 0, i32 15
  %4412 = load i32, i32* %f_iblock7525, align 4
  %sub7526 = sub i32 %4412, 1
  %idxprom7527 = sext i32 %sub7526 to i64
  %4413 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_blockstack7528 = getelementptr inbounds %struct._frame, %struct._frame* %4413, i32 0, i32 17
  %arrayidx7529 = getelementptr [20 x %struct.PyTryBlock], [20 x %struct.PyTryBlock]* %f_blockstack7528, i32 0, i64 %idxprom7527
  store %struct.PyTryBlock* %arrayidx7529, %struct.PyTryBlock** %b7524, align 8
  %4414 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_type7530 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4414, i32 0, i32 0
  %4415 = load i32, i32* %b_type7530, align 4
  %cmp7531 = icmp eq i32 %4415, 120
  br i1 %cmp7531, label %land.lhs.true.7533, label %if.end.7552

land.lhs.true.7533:                               ; preds = %while.body.7522
  %4416 = load i32, i32* %why, align 4
  %cmp7534 = icmp eq i32 %4416, 32
  br i1 %cmp7534, label %if.then.7536, label %if.end.7552

if.then.7536:                                     ; preds = %land.lhs.true.7533
  store i32 1, i32* %why, align 4
  %4417 = load i8*, i8** %first_instr, align 8
  %4418 = load %struct._object*, %struct._object** %retval1, align 8
  %call7537 = call i64 @PyLong_AsLong(%struct._object* %4418)
  %add.ptr7538 = getelementptr i8, i8* %4417, i64 %call7537
  store i8* %add.ptr7538, i8** %next_instr, align 8
  br label %do.body.7539

do.body.7539:                                     ; preds = %if.then.7536
  %4419 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %4419, %struct._object** %_py_decref_tmp7541, align 8
  %4420 = load %struct._object*, %struct._object** %_py_decref_tmp7541, align 8
  %ob_refcnt7542 = getelementptr inbounds %struct._object, %struct._object* %4420, i32 0, i32 0
  %4421 = load i64, i64* %ob_refcnt7542, align 8
  %dec7543 = add i64 %4421, -1
  store i64 %dec7543, i64* %ob_refcnt7542, align 8
  %cmp7544 = icmp ne i64 %dec7543, 0
  br i1 %cmp7544, label %if.then.7546, label %if.else.7547

if.then.7546:                                     ; preds = %do.body.7539
  br label %if.end.7550

if.else.7547:                                     ; preds = %do.body.7539
  %4422 = load %struct._object*, %struct._object** %_py_decref_tmp7541, align 8
  %ob_type7548 = getelementptr inbounds %struct._object, %struct._object* %4422, i32 0, i32 1
  %4423 = load %struct._typeobject*, %struct._typeobject** %ob_type7548, align 8
  %tp_dealloc7549 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4423, i32 0, i32 4
  %4424 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7549, align 8
  %4425 = load %struct._object*, %struct._object** %_py_decref_tmp7541, align 8
  call void %4424(%struct._object* %4425)
  br label %if.end.7550

if.end.7550:                                      ; preds = %if.else.7547, %if.then.7546
  br label %do.end.7551

do.end.7551:                                      ; preds = %if.end.7550
  br label %while.end.7800

if.end.7552:                                      ; preds = %land.lhs.true.7533, %while.body.7522
  %4426 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_iblock7553 = getelementptr inbounds %struct._frame, %struct._frame* %4426, i32 0, i32 15
  %4427 = load i32, i32* %f_iblock7553, align 4
  %dec7554 = add i32 %4427, -1
  store i32 %dec7554, i32* %f_iblock7553, align 4
  %4428 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_type7555 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4428, i32 0, i32 0
  %4429 = load i32, i32* %b_type7555, align 4
  %cmp7556 = icmp eq i32 %4429, 257
  br i1 %cmp7556, label %if.then.7558, label %if.end.7672

if.then.7558:                                     ; preds = %if.end.7552
  br label %while.cond.7565

while.cond.7565:                                  ; preds = %do.end.7598, %if.then.7558
  %4430 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %4431 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack7566 = getelementptr inbounds %struct._frame, %struct._frame* %4431, i32 0, i32 6
  %4432 = load %struct._object**, %struct._object*** %f_valuestack7566, align 8
  %sub.ptr.lhs.cast7567 = ptrtoint %struct._object** %4430 to i64
  %sub.ptr.rhs.cast7568 = ptrtoint %struct._object** %4432 to i64
  %sub.ptr.sub7569 = sub i64 %sub.ptr.lhs.cast7567, %sub.ptr.rhs.cast7568
  %sub.ptr.div7570 = sdiv exact i64 %sub.ptr.sub7569, 8
  %conv7571 = trunc i64 %sub.ptr.div7570 to i32
  %4433 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_level7572 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4433, i32 0, i32 2
  %4434 = load i32, i32* %b_level7572, align 4
  %add7573 = add i32 %4434, 3
  %cmp7574 = icmp sgt i32 %conv7571, %add7573
  br i1 %cmp7574, label %while.body.7576, label %while.end.7599

while.body.7576:                                  ; preds = %while.cond.7565
  %4435 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7577 = getelementptr %struct._object*, %struct._object** %4435, i32 -1
  store %struct._object** %incdec.ptr7577, %struct._object*** %stack_pointer, align 8
  %4436 = load %struct._object*, %struct._object** %incdec.ptr7577, align 8
  store %struct._object* %4436, %struct._object** %value7562, align 8
  br label %do.body.7578

do.body.7578:                                     ; preds = %while.body.7576
  %4437 = load %struct._object*, %struct._object** %value7562, align 8
  store %struct._object* %4437, %struct._object** %_py_xdecref_tmp7580, align 8
  %4438 = load %struct._object*, %struct._object** %_py_xdecref_tmp7580, align 8
  %cmp7581 = icmp ne %struct._object* %4438, null
  br i1 %cmp7581, label %if.then.7583, label %if.end.7597

if.then.7583:                                     ; preds = %do.body.7578
  br label %do.body.7584

do.body.7584:                                     ; preds = %if.then.7583
  %4439 = load %struct._object*, %struct._object** %_py_xdecref_tmp7580, align 8
  store %struct._object* %4439, %struct._object** %_py_decref_tmp7586, align 8
  %4440 = load %struct._object*, %struct._object** %_py_decref_tmp7586, align 8
  %ob_refcnt7587 = getelementptr inbounds %struct._object, %struct._object* %4440, i32 0, i32 0
  %4441 = load i64, i64* %ob_refcnt7587, align 8
  %dec7588 = add i64 %4441, -1
  store i64 %dec7588, i64* %ob_refcnt7587, align 8
  %cmp7589 = icmp ne i64 %dec7588, 0
  br i1 %cmp7589, label %if.then.7591, label %if.else.7592

if.then.7591:                                     ; preds = %do.body.7584
  br label %if.end.7595

if.else.7592:                                     ; preds = %do.body.7584
  %4442 = load %struct._object*, %struct._object** %_py_decref_tmp7586, align 8
  %ob_type7593 = getelementptr inbounds %struct._object, %struct._object* %4442, i32 0, i32 1
  %4443 = load %struct._typeobject*, %struct._typeobject** %ob_type7593, align 8
  %tp_dealloc7594 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4443, i32 0, i32 4
  %4444 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7594, align 8
  %4445 = load %struct._object*, %struct._object** %_py_decref_tmp7586, align 8
  call void %4444(%struct._object* %4445)
  br label %if.end.7595

if.end.7595:                                      ; preds = %if.else.7592, %if.then.7591
  br label %do.end.7596

do.end.7596:                                      ; preds = %if.end.7595
  br label %if.end.7597

if.end.7597:                                      ; preds = %do.end.7596, %do.body.7578
  br label %do.end.7598

do.end.7598:                                      ; preds = %if.end.7597
  br label %while.cond.7565

while.end.7599:                                   ; preds = %while.cond.7565
  %4446 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type7600 = getelementptr inbounds %struct._ts, %struct._ts* %4446, i32 0, i32 16
  %4447 = load %struct._object*, %struct._object** %exc_type7600, align 8
  store %struct._object* %4447, %struct._object** %type7560, align 8
  %4448 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value7601 = getelementptr inbounds %struct._ts, %struct._ts* %4448, i32 0, i32 17
  %4449 = load %struct._object*, %struct._object** %exc_value7601, align 8
  store %struct._object* %4449, %struct._object** %value7562, align 8
  %4450 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback7602 = getelementptr inbounds %struct._ts, %struct._ts* %4450, i32 0, i32 18
  %4451 = load %struct._object*, %struct._object** %exc_traceback7602, align 8
  store %struct._object* %4451, %struct._object** %traceback7564, align 8
  %4452 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7603 = getelementptr %struct._object*, %struct._object** %4452, i32 -1
  store %struct._object** %incdec.ptr7603, %struct._object*** %stack_pointer, align 8
  %4453 = load %struct._object*, %struct._object** %incdec.ptr7603, align 8
  %4454 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type7604 = getelementptr inbounds %struct._ts, %struct._ts* %4454, i32 0, i32 16
  store %struct._object* %4453, %struct._object** %exc_type7604, align 8
  %4455 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7605 = getelementptr %struct._object*, %struct._object** %4455, i32 -1
  store %struct._object** %incdec.ptr7605, %struct._object*** %stack_pointer, align 8
  %4456 = load %struct._object*, %struct._object** %incdec.ptr7605, align 8
  %4457 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value7606 = getelementptr inbounds %struct._ts, %struct._ts* %4457, i32 0, i32 17
  store %struct._object* %4456, %struct._object** %exc_value7606, align 8
  %4458 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7607 = getelementptr %struct._object*, %struct._object** %4458, i32 -1
  store %struct._object** %incdec.ptr7607, %struct._object*** %stack_pointer, align 8
  %4459 = load %struct._object*, %struct._object** %incdec.ptr7607, align 8
  %4460 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback7608 = getelementptr inbounds %struct._ts, %struct._ts* %4460, i32 0, i32 18
  store %struct._object* %4459, %struct._object** %exc_traceback7608, align 8
  br label %do.body.7609

do.body.7609:                                     ; preds = %while.end.7599
  %4461 = load %struct._object*, %struct._object** %type7560, align 8
  store %struct._object* %4461, %struct._object** %_py_xdecref_tmp7611, align 8
  %4462 = load %struct._object*, %struct._object** %_py_xdecref_tmp7611, align 8
  %cmp7612 = icmp ne %struct._object* %4462, null
  br i1 %cmp7612, label %if.then.7614, label %if.end.7628

if.then.7614:                                     ; preds = %do.body.7609
  br label %do.body.7615

do.body.7615:                                     ; preds = %if.then.7614
  %4463 = load %struct._object*, %struct._object** %_py_xdecref_tmp7611, align 8
  store %struct._object* %4463, %struct._object** %_py_decref_tmp7617, align 8
  %4464 = load %struct._object*, %struct._object** %_py_decref_tmp7617, align 8
  %ob_refcnt7618 = getelementptr inbounds %struct._object, %struct._object* %4464, i32 0, i32 0
  %4465 = load i64, i64* %ob_refcnt7618, align 8
  %dec7619 = add i64 %4465, -1
  store i64 %dec7619, i64* %ob_refcnt7618, align 8
  %cmp7620 = icmp ne i64 %dec7619, 0
  br i1 %cmp7620, label %if.then.7622, label %if.else.7623

if.then.7622:                                     ; preds = %do.body.7615
  br label %if.end.7626

if.else.7623:                                     ; preds = %do.body.7615
  %4466 = load %struct._object*, %struct._object** %_py_decref_tmp7617, align 8
  %ob_type7624 = getelementptr inbounds %struct._object, %struct._object* %4466, i32 0, i32 1
  %4467 = load %struct._typeobject*, %struct._typeobject** %ob_type7624, align 8
  %tp_dealloc7625 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4467, i32 0, i32 4
  %4468 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7625, align 8
  %4469 = load %struct._object*, %struct._object** %_py_decref_tmp7617, align 8
  call void %4468(%struct._object* %4469)
  br label %if.end.7626

if.end.7626:                                      ; preds = %if.else.7623, %if.then.7622
  br label %do.end.7627

do.end.7627:                                      ; preds = %if.end.7626
  br label %if.end.7628

if.end.7628:                                      ; preds = %do.end.7627, %do.body.7609
  br label %do.end.7629

do.end.7629:                                      ; preds = %if.end.7628
  br label %do.body.7630

do.body.7630:                                     ; preds = %do.end.7629
  %4470 = load %struct._object*, %struct._object** %value7562, align 8
  store %struct._object* %4470, %struct._object** %_py_xdecref_tmp7632, align 8
  %4471 = load %struct._object*, %struct._object** %_py_xdecref_tmp7632, align 8
  %cmp7633 = icmp ne %struct._object* %4471, null
  br i1 %cmp7633, label %if.then.7635, label %if.end.7649

if.then.7635:                                     ; preds = %do.body.7630
  br label %do.body.7636

do.body.7636:                                     ; preds = %if.then.7635
  %4472 = load %struct._object*, %struct._object** %_py_xdecref_tmp7632, align 8
  store %struct._object* %4472, %struct._object** %_py_decref_tmp7638, align 8
  %4473 = load %struct._object*, %struct._object** %_py_decref_tmp7638, align 8
  %ob_refcnt7639 = getelementptr inbounds %struct._object, %struct._object* %4473, i32 0, i32 0
  %4474 = load i64, i64* %ob_refcnt7639, align 8
  %dec7640 = add i64 %4474, -1
  store i64 %dec7640, i64* %ob_refcnt7639, align 8
  %cmp7641 = icmp ne i64 %dec7640, 0
  br i1 %cmp7641, label %if.then.7643, label %if.else.7644

if.then.7643:                                     ; preds = %do.body.7636
  br label %if.end.7647

if.else.7644:                                     ; preds = %do.body.7636
  %4475 = load %struct._object*, %struct._object** %_py_decref_tmp7638, align 8
  %ob_type7645 = getelementptr inbounds %struct._object, %struct._object* %4475, i32 0, i32 1
  %4476 = load %struct._typeobject*, %struct._typeobject** %ob_type7645, align 8
  %tp_dealloc7646 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4476, i32 0, i32 4
  %4477 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7646, align 8
  %4478 = load %struct._object*, %struct._object** %_py_decref_tmp7638, align 8
  call void %4477(%struct._object* %4478)
  br label %if.end.7647

if.end.7647:                                      ; preds = %if.else.7644, %if.then.7643
  br label %do.end.7648

do.end.7648:                                      ; preds = %if.end.7647
  br label %if.end.7649

if.end.7649:                                      ; preds = %do.end.7648, %do.body.7630
  br label %do.end.7650

do.end.7650:                                      ; preds = %if.end.7649
  br label %do.body.7651

do.body.7651:                                     ; preds = %do.end.7650
  %4479 = load %struct._object*, %struct._object** %traceback7564, align 8
  store %struct._object* %4479, %struct._object** %_py_xdecref_tmp7653, align 8
  %4480 = load %struct._object*, %struct._object** %_py_xdecref_tmp7653, align 8
  %cmp7654 = icmp ne %struct._object* %4480, null
  br i1 %cmp7654, label %if.then.7656, label %if.end.7670

if.then.7656:                                     ; preds = %do.body.7651
  br label %do.body.7657

do.body.7657:                                     ; preds = %if.then.7656
  %4481 = load %struct._object*, %struct._object** %_py_xdecref_tmp7653, align 8
  store %struct._object* %4481, %struct._object** %_py_decref_tmp7659, align 8
  %4482 = load %struct._object*, %struct._object** %_py_decref_tmp7659, align 8
  %ob_refcnt7660 = getelementptr inbounds %struct._object, %struct._object* %4482, i32 0, i32 0
  %4483 = load i64, i64* %ob_refcnt7660, align 8
  %dec7661 = add i64 %4483, -1
  store i64 %dec7661, i64* %ob_refcnt7660, align 8
  %cmp7662 = icmp ne i64 %dec7661, 0
  br i1 %cmp7662, label %if.then.7664, label %if.else.7665

if.then.7664:                                     ; preds = %do.body.7657
  br label %if.end.7668

if.else.7665:                                     ; preds = %do.body.7657
  %4484 = load %struct._object*, %struct._object** %_py_decref_tmp7659, align 8
  %ob_type7666 = getelementptr inbounds %struct._object, %struct._object* %4484, i32 0, i32 1
  %4485 = load %struct._typeobject*, %struct._typeobject** %ob_type7666, align 8
  %tp_dealloc7667 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4485, i32 0, i32 4
  %4486 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7667, align 8
  %4487 = load %struct._object*, %struct._object** %_py_decref_tmp7659, align 8
  call void %4486(%struct._object* %4487)
  br label %if.end.7668

if.end.7668:                                      ; preds = %if.else.7665, %if.then.7664
  br label %do.end.7669

do.end.7669:                                      ; preds = %if.end.7668
  br label %if.end.7670

if.end.7670:                                      ; preds = %do.end.7669, %do.body.7651
  br label %do.end.7671

do.end.7671:                                      ; preds = %if.end.7670
  br label %while.cond.7516

if.end.7672:                                      ; preds = %if.end.7552
  br label %while.cond.7673

while.cond.7673:                                  ; preds = %do.end.7707, %if.end.7672
  %4488 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %4489 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack7674 = getelementptr inbounds %struct._frame, %struct._frame* %4489, i32 0, i32 6
  %4490 = load %struct._object**, %struct._object*** %f_valuestack7674, align 8
  %sub.ptr.lhs.cast7675 = ptrtoint %struct._object** %4488 to i64
  %sub.ptr.rhs.cast7676 = ptrtoint %struct._object** %4490 to i64
  %sub.ptr.sub7677 = sub i64 %sub.ptr.lhs.cast7675, %sub.ptr.rhs.cast7676
  %sub.ptr.div7678 = sdiv exact i64 %sub.ptr.sub7677, 8
  %conv7679 = trunc i64 %sub.ptr.div7678 to i32
  %4491 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_level7680 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4491, i32 0, i32 2
  %4492 = load i32, i32* %b_level7680, align 4
  %cmp7681 = icmp sgt i32 %conv7679, %4492
  br i1 %cmp7681, label %while.body.7683, label %while.end.7708

while.body.7683:                                  ; preds = %while.cond.7673
  %4493 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7686 = getelementptr %struct._object*, %struct._object** %4493, i32 -1
  store %struct._object** %incdec.ptr7686, %struct._object*** %stack_pointer, align 8
  %4494 = load %struct._object*, %struct._object** %incdec.ptr7686, align 8
  store %struct._object* %4494, %struct._object** %v7685, align 8
  br label %do.body.7687

do.body.7687:                                     ; preds = %while.body.7683
  %4495 = load %struct._object*, %struct._object** %v7685, align 8
  store %struct._object* %4495, %struct._object** %_py_xdecref_tmp7689, align 8
  %4496 = load %struct._object*, %struct._object** %_py_xdecref_tmp7689, align 8
  %cmp7690 = icmp ne %struct._object* %4496, null
  br i1 %cmp7690, label %if.then.7692, label %if.end.7706

if.then.7692:                                     ; preds = %do.body.7687
  br label %do.body.7693

do.body.7693:                                     ; preds = %if.then.7692
  %4497 = load %struct._object*, %struct._object** %_py_xdecref_tmp7689, align 8
  store %struct._object* %4497, %struct._object** %_py_decref_tmp7695, align 8
  %4498 = load %struct._object*, %struct._object** %_py_decref_tmp7695, align 8
  %ob_refcnt7696 = getelementptr inbounds %struct._object, %struct._object* %4498, i32 0, i32 0
  %4499 = load i64, i64* %ob_refcnt7696, align 8
  %dec7697 = add i64 %4499, -1
  store i64 %dec7697, i64* %ob_refcnt7696, align 8
  %cmp7698 = icmp ne i64 %dec7697, 0
  br i1 %cmp7698, label %if.then.7700, label %if.else.7701

if.then.7700:                                     ; preds = %do.body.7693
  br label %if.end.7704

if.else.7701:                                     ; preds = %do.body.7693
  %4500 = load %struct._object*, %struct._object** %_py_decref_tmp7695, align 8
  %ob_type7702 = getelementptr inbounds %struct._object, %struct._object* %4500, i32 0, i32 1
  %4501 = load %struct._typeobject*, %struct._typeobject** %ob_type7702, align 8
  %tp_dealloc7703 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4501, i32 0, i32 4
  %4502 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7703, align 8
  %4503 = load %struct._object*, %struct._object** %_py_decref_tmp7695, align 8
  call void %4502(%struct._object* %4503)
  br label %if.end.7704

if.end.7704:                                      ; preds = %if.else.7701, %if.then.7700
  br label %do.end.7705

do.end.7705:                                      ; preds = %if.end.7704
  br label %if.end.7706

if.end.7706:                                      ; preds = %do.end.7705, %do.body.7687
  br label %do.end.7707

do.end.7707:                                      ; preds = %if.end.7706
  br label %while.cond.7673

while.end.7708:                                   ; preds = %while.cond.7673
  %4504 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_type7709 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4504, i32 0, i32 0
  %4505 = load i32, i32* %b_type7709, align 4
  %cmp7710 = icmp eq i32 %4505, 120
  br i1 %cmp7710, label %land.lhs.true.7712, label %if.end.7718

land.lhs.true.7712:                               ; preds = %while.end.7708
  %4506 = load i32, i32* %why, align 4
  %cmp7713 = icmp eq i32 %4506, 16
  br i1 %cmp7713, label %if.then.7715, label %if.end.7718

if.then.7715:                                     ; preds = %land.lhs.true.7712
  store i32 1, i32* %why, align 4
  %4507 = load i8*, i8** %first_instr, align 8
  %4508 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_handler = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4508, i32 0, i32 1
  %4509 = load i32, i32* %b_handler, align 4
  %idx.ext7716 = sext i32 %4509 to i64
  %add.ptr7717 = getelementptr i8, i8* %4507, i64 %idx.ext7716
  store i8* %add.ptr7717, i8** %next_instr, align 8
  br label %while.end.7800

if.end.7718:                                      ; preds = %land.lhs.true.7712, %while.end.7708
  %4510 = load i32, i32* %why, align 4
  %cmp7719 = icmp eq i32 %4510, 2
  br i1 %cmp7719, label %land.lhs.true.7721, label %if.end.7783

land.lhs.true.7721:                               ; preds = %if.end.7718
  %4511 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_type7722 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4511, i32 0, i32 0
  %4512 = load i32, i32* %b_type7722, align 4
  %cmp7723 = icmp eq i32 %4512, 121
  br i1 %cmp7723, label %if.then.7729, label %lor.lhs.false.7725

lor.lhs.false.7725:                               ; preds = %land.lhs.true.7721
  %4513 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_type7726 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4513, i32 0, i32 0
  %4514 = load i32, i32* %b_type7726, align 4
  %cmp7727 = icmp eq i32 %4514, 122
  br i1 %cmp7727, label %if.then.7729, label %if.end.7783

if.then.7729:                                     ; preds = %lor.lhs.false.7725, %land.lhs.true.7721
  %4515 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_handler7737 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4515, i32 0, i32 1
  %4516 = load i32, i32* %b_handler7737, align 4
  store i32 %4516, i32* %handler, align 4
  %4517 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %4518 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %4519 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack7738 = getelementptr inbounds %struct._frame, %struct._frame* %4519, i32 0, i32 6
  %4520 = load %struct._object**, %struct._object*** %f_valuestack7738, align 8
  %sub.ptr.lhs.cast7739 = ptrtoint %struct._object** %4518 to i64
  %sub.ptr.rhs.cast7740 = ptrtoint %struct._object** %4520 to i64
  %sub.ptr.sub7741 = sub i64 %sub.ptr.lhs.cast7739, %sub.ptr.rhs.cast7740
  %sub.ptr.div7742 = sdiv exact i64 %sub.ptr.sub7741, 8
  %conv7743 = trunc i64 %sub.ptr.div7742 to i32
  call void @PyFrame_BlockSetup(%struct._frame* %4517, i32 257, i32 -1, i32 %conv7743)
  %4521 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback7744 = getelementptr inbounds %struct._ts, %struct._ts* %4521, i32 0, i32 18
  %4522 = load %struct._object*, %struct._object** %exc_traceback7744, align 8
  %4523 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7745 = getelementptr %struct._object*, %struct._object** %4523, i32 1
  store %struct._object** %incdec.ptr7745, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4522, %struct._object** %4523, align 8
  %4524 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value7746 = getelementptr inbounds %struct._ts, %struct._ts* %4524, i32 0, i32 17
  %4525 = load %struct._object*, %struct._object** %exc_value7746, align 8
  %4526 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7747 = getelementptr %struct._object*, %struct._object** %4526, i32 1
  store %struct._object** %incdec.ptr7747, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4525, %struct._object** %4526, align 8
  %4527 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type7748 = getelementptr inbounds %struct._ts, %struct._ts* %4527, i32 0, i32 16
  %4528 = load %struct._object*, %struct._object** %exc_type7748, align 8
  %cmp7749 = icmp ne %struct._object* %4528, null
  br i1 %cmp7749, label %if.then.7751, label %if.else.7754

if.then.7751:                                     ; preds = %if.then.7729
  %4529 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type7752 = getelementptr inbounds %struct._ts, %struct._ts* %4529, i32 0, i32 16
  %4530 = load %struct._object*, %struct._object** %exc_type7752, align 8
  %4531 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7753 = getelementptr %struct._object*, %struct._object** %4531, i32 1
  store %struct._object** %incdec.ptr7753, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4530, %struct._object** %4531, align 8
  br label %if.end.7757

if.else.7754:                                     ; preds = %if.then.7729
  %4532 = load i64, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %inc7755 = add i64 %4532, 1
  store i64 %inc7755, i64* getelementptr inbounds (%struct._object, %struct._object* @_Py_NoneStruct, i32 0, i32 0), align 8
  %4533 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7756 = getelementptr %struct._object*, %struct._object** %4533, i32 1
  store %struct._object** %incdec.ptr7756, %struct._object*** %stack_pointer, align 8
  store %struct._object* @_Py_NoneStruct, %struct._object** %4533, align 8
  br label %if.end.7757

if.end.7757:                                      ; preds = %if.else.7754, %if.then.7751
  call void @PyErr_Fetch(%struct._object** %exc7731, %struct._object** %val7733, %struct._object** %tb7735)
  call void @PyErr_NormalizeException(%struct._object** %exc7731, %struct._object** %val7733, %struct._object** %tb7735)
  %4534 = load %struct._object*, %struct._object** %tb7735, align 8
  %cmp7758 = icmp ne %struct._object* %4534, null
  br i1 %cmp7758, label %if.then.7760, label %if.else.7762

if.then.7760:                                     ; preds = %if.end.7757
  %4535 = load %struct._object*, %struct._object** %val7733, align 8
  %4536 = load %struct._object*, %struct._object** %tb7735, align 8
  %call7761 = call i32 @PyException_SetTraceback(%struct._object* %4535, %struct._object* %4536)
  br label %if.end.7764

if.else.7762:                                     ; preds = %if.end.7757
  %4537 = load %struct._object*, %struct._object** %val7733, align 8
  %call7763 = call i32 @PyException_SetTraceback(%struct._object* %4537, %struct._object* @_Py_NoneStruct)
  br label %if.end.7764

if.end.7764:                                      ; preds = %if.else.7762, %if.then.7760
  %4538 = load %struct._object*, %struct._object** %exc7731, align 8
  %ob_refcnt7765 = getelementptr inbounds %struct._object, %struct._object* %4538, i32 0, i32 0
  %4539 = load i64, i64* %ob_refcnt7765, align 8
  %inc7766 = add i64 %4539, 1
  store i64 %inc7766, i64* %ob_refcnt7765, align 8
  %4540 = load %struct._object*, %struct._object** %exc7731, align 8
  %4541 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type7767 = getelementptr inbounds %struct._ts, %struct._ts* %4541, i32 0, i32 16
  store %struct._object* %4540, %struct._object** %exc_type7767, align 8
  %4542 = load %struct._object*, %struct._object** %val7733, align 8
  %ob_refcnt7768 = getelementptr inbounds %struct._object, %struct._object* %4542, i32 0, i32 0
  %4543 = load i64, i64* %ob_refcnt7768, align 8
  %inc7769 = add i64 %4543, 1
  store i64 %inc7769, i64* %ob_refcnt7768, align 8
  %4544 = load %struct._object*, %struct._object** %val7733, align 8
  %4545 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value7770 = getelementptr inbounds %struct._ts, %struct._ts* %4545, i32 0, i32 17
  store %struct._object* %4544, %struct._object** %exc_value7770, align 8
  %4546 = load %struct._object*, %struct._object** %tb7735, align 8
  %4547 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback7771 = getelementptr inbounds %struct._ts, %struct._ts* %4547, i32 0, i32 18
  store %struct._object* %4546, %struct._object** %exc_traceback7771, align 8
  %4548 = load %struct._object*, %struct._object** %tb7735, align 8
  %cmp7772 = icmp eq %struct._object* %4548, null
  br i1 %cmp7772, label %if.then.7774, label %if.end.7775

if.then.7774:                                     ; preds = %if.end.7764
  store %struct._object* @_Py_NoneStruct, %struct._object** %tb7735, align 8
  br label %if.end.7775

if.end.7775:                                      ; preds = %if.then.7774, %if.end.7764
  %4549 = load %struct._object*, %struct._object** %tb7735, align 8
  %ob_refcnt7776 = getelementptr inbounds %struct._object, %struct._object* %4549, i32 0, i32 0
  %4550 = load i64, i64* %ob_refcnt7776, align 8
  %inc7777 = add i64 %4550, 1
  store i64 %inc7777, i64* %ob_refcnt7776, align 8
  %4551 = load %struct._object*, %struct._object** %tb7735, align 8
  %4552 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7778 = getelementptr %struct._object*, %struct._object** %4552, i32 1
  store %struct._object** %incdec.ptr7778, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4551, %struct._object** %4552, align 8
  %4553 = load %struct._object*, %struct._object** %val7733, align 8
  %4554 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7779 = getelementptr %struct._object*, %struct._object** %4554, i32 1
  store %struct._object** %incdec.ptr7779, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4553, %struct._object** %4554, align 8
  %4555 = load %struct._object*, %struct._object** %exc7731, align 8
  %4556 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7780 = getelementptr %struct._object*, %struct._object** %4556, i32 1
  store %struct._object** %incdec.ptr7780, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4555, %struct._object** %4556, align 8
  store i32 1, i32* %why, align 4
  %4557 = load i8*, i8** %first_instr, align 8
  %4558 = load i32, i32* %handler, align 4
  %idx.ext7781 = sext i32 %4558 to i64
  %add.ptr7782 = getelementptr i8, i8* %4557, i64 %idx.ext7781
  store i8* %add.ptr7782, i8** %next_instr, align 8
  br label %while.end.7800

if.end.7783:                                      ; preds = %lor.lhs.false.7725, %if.end.7718
  %4559 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_type7784 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4559, i32 0, i32 0
  %4560 = load i32, i32* %b_type7784, align 4
  %cmp7785 = icmp eq i32 %4560, 122
  br i1 %cmp7785, label %if.then.7787, label %if.end.7799

if.then.7787:                                     ; preds = %if.end.7783
  %4561 = load i32, i32* %why, align 4
  %and7788 = and i32 %4561, 40
  %tobool7789 = icmp ne i32 %and7788, 0
  br i1 %tobool7789, label %if.then.7790, label %if.end.7792

if.then.7790:                                     ; preds = %if.then.7787
  %4562 = load %struct._object*, %struct._object** %retval1, align 8
  %4563 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7791 = getelementptr %struct._object*, %struct._object** %4563, i32 1
  store %struct._object** %incdec.ptr7791, %struct._object*** %stack_pointer, align 8
  store %struct._object* %4562, %struct._object** %4563, align 8
  br label %if.end.7792

if.end.7792:                                      ; preds = %if.then.7790, %if.then.7787
  %4564 = load i32, i32* %why, align 4
  %conv7793 = zext i32 %4564 to i64
  %call7794 = call %struct._object* @PyLong_FromLong(i64 %conv7793)
  %4565 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7795 = getelementptr %struct._object*, %struct._object** %4565, i32 1
  store %struct._object** %incdec.ptr7795, %struct._object*** %stack_pointer, align 8
  store %struct._object* %call7794, %struct._object** %4565, align 8
  store i32 1, i32* %why, align 4
  %4566 = load i8*, i8** %first_instr, align 8
  %4567 = load %struct.PyTryBlock*, %struct.PyTryBlock** %b7524, align 8
  %b_handler7796 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %4567, i32 0, i32 1
  %4568 = load i32, i32* %b_handler7796, align 4
  %idx.ext7797 = sext i32 %4568 to i64
  %add.ptr7798 = getelementptr i8, i8* %4566, i64 %idx.ext7797
  store i8* %add.ptr7798, i8** %next_instr, align 8
  br label %while.end.7800

if.end.7799:                                      ; preds = %if.end.7783
  br label %while.cond.7516

while.end.7800:                                   ; preds = %if.end.7792, %if.end.7775, %if.then.7715, %do.end.7551, %land.end
  %4569 = load i32, i32* %why, align 4
  %cmp7801 = icmp ne i32 %4569, 1
  br i1 %cmp7801, label %if.then.7803, label %if.end.7804

if.then.7803:                                     ; preds = %while.end.7800
  br label %for.end

if.end.7804:                                      ; preds = %while.end.7800
  br label %for.cond

for.end:                                          ; preds = %if.then.7803
  br label %while.cond.7805

while.cond.7805:                                  ; preds = %do.end.7838, %for.end
  %4570 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %4571 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_valuestack7806 = getelementptr inbounds %struct._frame, %struct._frame* %4571, i32 0, i32 6
  %4572 = load %struct._object**, %struct._object*** %f_valuestack7806, align 8
  %sub.ptr.lhs.cast7807 = ptrtoint %struct._object** %4570 to i64
  %sub.ptr.rhs.cast7808 = ptrtoint %struct._object** %4572 to i64
  %sub.ptr.sub7809 = sub i64 %sub.ptr.lhs.cast7807, %sub.ptr.rhs.cast7808
  %sub.ptr.div7810 = sdiv exact i64 %sub.ptr.sub7809, 8
  %conv7811 = trunc i64 %sub.ptr.div7810 to i32
  %cmp7812 = icmp eq i32 %conv7811, 0
  %lnot = xor i1 %cmp7812, true
  br i1 %lnot, label %while.body.7814, label %while.end.7839

while.body.7814:                                  ; preds = %while.cond.7805
  %4573 = load %struct._object**, %struct._object*** %stack_pointer, align 8
  %incdec.ptr7817 = getelementptr %struct._object*, %struct._object** %4573, i32 -1
  store %struct._object** %incdec.ptr7817, %struct._object*** %stack_pointer, align 8
  %4574 = load %struct._object*, %struct._object** %incdec.ptr7817, align 8
  store %struct._object* %4574, %struct._object** %o7816, align 8
  br label %do.body.7818

do.body.7818:                                     ; preds = %while.body.7814
  %4575 = load %struct._object*, %struct._object** %o7816, align 8
  store %struct._object* %4575, %struct._object** %_py_xdecref_tmp7820, align 8
  %4576 = load %struct._object*, %struct._object** %_py_xdecref_tmp7820, align 8
  %cmp7821 = icmp ne %struct._object* %4576, null
  br i1 %cmp7821, label %if.then.7823, label %if.end.7837

if.then.7823:                                     ; preds = %do.body.7818
  br label %do.body.7824

do.body.7824:                                     ; preds = %if.then.7823
  %4577 = load %struct._object*, %struct._object** %_py_xdecref_tmp7820, align 8
  store %struct._object* %4577, %struct._object** %_py_decref_tmp7826, align 8
  %4578 = load %struct._object*, %struct._object** %_py_decref_tmp7826, align 8
  %ob_refcnt7827 = getelementptr inbounds %struct._object, %struct._object* %4578, i32 0, i32 0
  %4579 = load i64, i64* %ob_refcnt7827, align 8
  %dec7828 = add i64 %4579, -1
  store i64 %dec7828, i64* %ob_refcnt7827, align 8
  %cmp7829 = icmp ne i64 %dec7828, 0
  br i1 %cmp7829, label %if.then.7831, label %if.else.7832

if.then.7831:                                     ; preds = %do.body.7824
  br label %if.end.7835

if.else.7832:                                     ; preds = %do.body.7824
  %4580 = load %struct._object*, %struct._object** %_py_decref_tmp7826, align 8
  %ob_type7833 = getelementptr inbounds %struct._object, %struct._object* %4580, i32 0, i32 1
  %4581 = load %struct._typeobject*, %struct._typeobject** %ob_type7833, align 8
  %tp_dealloc7834 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4581, i32 0, i32 4
  %4582 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7834, align 8
  %4583 = load %struct._object*, %struct._object** %_py_decref_tmp7826, align 8
  call void %4582(%struct._object* %4583)
  br label %if.end.7835

if.end.7835:                                      ; preds = %if.else.7832, %if.then.7831
  br label %do.end.7836

do.end.7836:                                      ; preds = %if.end.7835
  br label %if.end.7837

if.end.7837:                                      ; preds = %do.end.7836, %do.body.7818
  br label %do.end.7838

do.end.7838:                                      ; preds = %if.end.7837
  br label %while.cond.7805

while.end.7839:                                   ; preds = %while.cond.7805
  %4584 = load i32, i32* %why, align 4
  %cmp7840 = icmp ne i32 %4584, 8
  br i1 %cmp7840, label %if.then.7842, label %if.end.7843

if.then.7842:                                     ; preds = %while.end.7839
  store %struct._object* null, %struct._object** %retval1, align 8
  br label %if.end.7843

if.end.7843:                                      ; preds = %if.then.7842, %while.end.7839
  br label %fast_yield

fast_yield:                                       ; preds = %if.end.7843, %sw.bb.3021, %if.end.3017
  %4585 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags7844 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %4585, i32 0, i32 5
  %4586 = load i32, i32* %co_flags7844, align 4
  %and7845 = and i32 %4586, 32
  %tobool7846 = icmp ne i32 %and7845, 0
  br i1 %tobool7846, label %land.lhs.true.7847, label %if.end.7875

land.lhs.true.7847:                               ; preds = %fast_yield
  %4587 = load i32, i32* %why, align 4
  %cmp7848 = icmp eq i32 %4587, 64
  br i1 %cmp7848, label %if.then.7853, label %lor.lhs.false.7850

lor.lhs.false.7850:                               ; preds = %land.lhs.true.7847
  %4588 = load i32, i32* %why, align 4
  %cmp7851 = icmp eq i32 %4588, 8
  br i1 %cmp7851, label %if.then.7853, label %if.end.7875

if.then.7853:                                     ; preds = %lor.lhs.false.7850, %land.lhs.true.7847
  store i32 0, i32* %i, align 4
  br label %for.cond.7855

for.cond.7855:                                    ; preds = %for.inc, %if.then.7853
  %4589 = load i32, i32* %i, align 4
  %4590 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_iblock7856 = getelementptr inbounds %struct._frame, %struct._frame* %4590, i32 0, i32 15
  %4591 = load i32, i32* %f_iblock7856, align 4
  %cmp7857 = icmp slt i32 %4589, %4591
  br i1 %cmp7857, label %for.body, label %for.end.7868

for.body:                                         ; preds = %for.cond.7855
  %4592 = load i32, i32* %i, align 4
  %idxprom7859 = sext i32 %4592 to i64
  %4593 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_blockstack7860 = getelementptr inbounds %struct._frame, %struct._frame* %4593, i32 0, i32 17
  %arrayidx7861 = getelementptr [20 x %struct.PyTryBlock], [20 x %struct.PyTryBlock]* %f_blockstack7860, i32 0, i64 %idxprom7859
  %b_type7862 = getelementptr inbounds %struct.PyTryBlock, %struct.PyTryBlock* %arrayidx7861, i32 0, i32 0
  %4594 = load i32, i32* %b_type7862, align 4
  %cmp7863 = icmp eq i32 %4594, 257
  br i1 %cmp7863, label %if.then.7865, label %if.end.7866

if.then.7865:                                     ; preds = %for.body
  br label %for.end.7868

if.end.7866:                                      ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.7866
  %4595 = load i32, i32* %i, align 4
  %inc7867 = add i32 %4595, 1
  store i32 %inc7867, i32* %i, align 4
  br label %for.cond.7855

for.end.7868:                                     ; preds = %if.then.7865, %for.cond.7855
  %4596 = load i32, i32* %i, align 4
  %4597 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_iblock7869 = getelementptr inbounds %struct._frame, %struct._frame* %4597, i32 0, i32 15
  %4598 = load i32, i32* %f_iblock7869, align 4
  %cmp7870 = icmp eq i32 %4596, %4598
  br i1 %cmp7870, label %if.then.7872, label %if.else.7873

if.then.7872:                                     ; preds = %for.end.7868
  %4599 = load %struct._ts*, %struct._ts** %tstate, align 8
  %4600 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @restore_and_clear_exc_state(%struct._ts* %4599, %struct._frame* %4600)
  br label %if.end.7874

if.else.7873:                                     ; preds = %for.end.7868
  %4601 = load %struct._ts*, %struct._ts** %tstate, align 8
  %4602 = load %struct._frame*, %struct._frame** %f.addr, align 8
  call void @swap_exc_state(%struct._ts* %4601, %struct._frame* %4602)
  br label %if.end.7874

if.end.7874:                                      ; preds = %if.else.7873, %if.then.7872
  br label %if.end.7875

if.end.7875:                                      ; preds = %if.end.7874, %lor.lhs.false.7850, %fast_yield
  %4603 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing7876 = getelementptr inbounds %struct._ts, %struct._ts* %4603, i32 0, i32 8
  %4604 = load i32, i32* %use_tracing7876, align 4
  %tobool7877 = icmp ne i32 %4604, 0
  br i1 %tobool7877, label %if.then.7878, label %if.end.7963

if.then.7878:                                     ; preds = %if.end.7875
  %4605 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc7879 = getelementptr inbounds %struct._ts, %struct._ts* %4605, i32 0, i32 10
  %4606 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc7879, align 8
  %tobool7880 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4606, null
  br i1 %tobool7880, label %if.then.7881, label %if.end.7923

if.then.7881:                                     ; preds = %if.then.7878
  %4607 = load i32, i32* %why, align 4
  %cmp7882 = icmp eq i32 %4607, 8
  br i1 %cmp7882, label %if.then.7887, label %lor.lhs.false.7884

lor.lhs.false.7884:                               ; preds = %if.then.7881
  %4608 = load i32, i32* %why, align 4
  %cmp7885 = icmp eq i32 %4608, 64
  br i1 %cmp7885, label %if.then.7887, label %if.else.7914

if.then.7887:                                     ; preds = %lor.lhs.false.7884, %if.then.7881
  %4609 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc7888 = getelementptr inbounds %struct._ts, %struct._ts* %4609, i32 0, i32 10
  %4610 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc7888, align 8
  %4611 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj7889 = getelementptr inbounds %struct._ts, %struct._ts* %4611, i32 0, i32 12
  %4612 = load %struct._object*, %struct._object** %c_traceobj7889, align 8
  %4613 = load %struct._ts*, %struct._ts** %tstate, align 8
  %4614 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %4615 = load %struct._object*, %struct._object** %retval1, align 8
  %call7890 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4610, %struct._object* %4612, %struct._ts* %4613, %struct._frame* %4614, i32 3, %struct._object* %4615)
  %tobool7891 = icmp ne i32 %call7890, 0
  br i1 %tobool7891, label %if.then.7892, label %if.end.7913

if.then.7892:                                     ; preds = %if.then.7887
  br label %do.body.7893

do.body.7893:                                     ; preds = %if.then.7892
  %4616 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %4616, %struct._object** %_py_tmp, align 8
  %4617 = load %struct._object*, %struct._object** %_py_tmp, align 8
  %cmp7895 = icmp ne %struct._object* %4617, null
  br i1 %cmp7895, label %if.then.7897, label %if.end.7911

if.then.7897:                                     ; preds = %do.body.7893
  store %struct._object* null, %struct._object** %retval1, align 8
  br label %do.body.7898

do.body.7898:                                     ; preds = %if.then.7897
  %4618 = load %struct._object*, %struct._object** %_py_tmp, align 8
  store %struct._object* %4618, %struct._object** %_py_decref_tmp7900, align 8
  %4619 = load %struct._object*, %struct._object** %_py_decref_tmp7900, align 8
  %ob_refcnt7901 = getelementptr inbounds %struct._object, %struct._object* %4619, i32 0, i32 0
  %4620 = load i64, i64* %ob_refcnt7901, align 8
  %dec7902 = add i64 %4620, -1
  store i64 %dec7902, i64* %ob_refcnt7901, align 8
  %cmp7903 = icmp ne i64 %dec7902, 0
  br i1 %cmp7903, label %if.then.7905, label %if.else.7906

if.then.7905:                                     ; preds = %do.body.7898
  br label %if.end.7909

if.else.7906:                                     ; preds = %do.body.7898
  %4621 = load %struct._object*, %struct._object** %_py_decref_tmp7900, align 8
  %ob_type7907 = getelementptr inbounds %struct._object, %struct._object* %4621, i32 0, i32 1
  %4622 = load %struct._typeobject*, %struct._typeobject** %ob_type7907, align 8
  %tp_dealloc7908 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4622, i32 0, i32 4
  %4623 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7908, align 8
  %4624 = load %struct._object*, %struct._object** %_py_decref_tmp7900, align 8
  call void %4623(%struct._object* %4624)
  br label %if.end.7909

if.end.7909:                                      ; preds = %if.else.7906, %if.then.7905
  br label %do.end.7910

do.end.7910:                                      ; preds = %if.end.7909
  br label %if.end.7911

if.end.7911:                                      ; preds = %do.end.7910, %do.body.7893
  br label %do.end.7912

do.end.7912:                                      ; preds = %if.end.7911
  store i32 2, i32* %why, align 4
  br label %if.end.7913

if.end.7913:                                      ; preds = %do.end.7912, %if.then.7887
  br label %if.end.7922

if.else.7914:                                     ; preds = %lor.lhs.false.7884
  %4625 = load i32, i32* %why, align 4
  %cmp7915 = icmp eq i32 %4625, 2
  br i1 %cmp7915, label %if.then.7917, label %if.end.7921

if.then.7917:                                     ; preds = %if.else.7914
  %4626 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc7918 = getelementptr inbounds %struct._ts, %struct._ts* %4626, i32 0, i32 10
  %4627 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc7918, align 8
  %4628 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj7919 = getelementptr inbounds %struct._ts, %struct._ts* %4628, i32 0, i32 12
  %4629 = load %struct._object*, %struct._object** %c_traceobj7919, align 8
  %4630 = load %struct._ts*, %struct._ts** %tstate, align 8
  %4631 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call7920 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4627, %struct._object* %4629, %struct._ts* %4630, %struct._frame* %4631, i32 3, %struct._object* null)
  br label %if.end.7921

if.end.7921:                                      ; preds = %if.then.7917, %if.else.7914
  br label %if.end.7922

if.end.7922:                                      ; preds = %if.end.7921, %if.end.7913
  br label %if.end.7923

if.end.7923:                                      ; preds = %if.end.7922, %if.then.7878
  %4632 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc7924 = getelementptr inbounds %struct._ts, %struct._ts* %4632, i32 0, i32 9
  %4633 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc7924, align 8
  %tobool7925 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4633, null
  br i1 %tobool7925, label %if.then.7926, label %if.end.7962

if.then.7926:                                     ; preds = %if.end.7923
  %4634 = load i32, i32* %why, align 4
  %cmp7927 = icmp eq i32 %4634, 2
  br i1 %cmp7927, label %if.then.7929, label %if.else.7933

if.then.7929:                                     ; preds = %if.then.7926
  %4635 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc7930 = getelementptr inbounds %struct._ts, %struct._ts* %4635, i32 0, i32 9
  %4636 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc7930, align 8
  %4637 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj7931 = getelementptr inbounds %struct._ts, %struct._ts* %4637, i32 0, i32 11
  %4638 = load %struct._object*, %struct._object** %c_profileobj7931, align 8
  %4639 = load %struct._ts*, %struct._ts** %tstate, align 8
  %4640 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %call7932 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4636, %struct._object* %4638, %struct._ts* %4639, %struct._frame* %4640, i32 3, %struct._object* null)
  br label %if.end.7961

if.else.7933:                                     ; preds = %if.then.7926
  %4641 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc7934 = getelementptr inbounds %struct._ts, %struct._ts* %4641, i32 0, i32 9
  %4642 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc7934, align 8
  %4643 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj7935 = getelementptr inbounds %struct._ts, %struct._ts* %4643, i32 0, i32 11
  %4644 = load %struct._object*, %struct._object** %c_profileobj7935, align 8
  %4645 = load %struct._ts*, %struct._ts** %tstate, align 8
  %4646 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %4647 = load %struct._object*, %struct._object** %retval1, align 8
  %call7936 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %4642, %struct._object* %4644, %struct._ts* %4645, %struct._frame* %4646, i32 3, %struct._object* %4647)
  %tobool7937 = icmp ne i32 %call7936, 0
  br i1 %tobool7937, label %if.then.7938, label %if.end.7960

if.then.7938:                                     ; preds = %if.else.7933
  br label %do.body.7939

do.body.7939:                                     ; preds = %if.then.7938
  %4648 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %4648, %struct._object** %_py_tmp7941, align 8
  %4649 = load %struct._object*, %struct._object** %_py_tmp7941, align 8
  %cmp7942 = icmp ne %struct._object* %4649, null
  br i1 %cmp7942, label %if.then.7944, label %if.end.7958

if.then.7944:                                     ; preds = %do.body.7939
  store %struct._object* null, %struct._object** %retval1, align 8
  br label %do.body.7945

do.body.7945:                                     ; preds = %if.then.7944
  %4650 = load %struct._object*, %struct._object** %_py_tmp7941, align 8
  store %struct._object* %4650, %struct._object** %_py_decref_tmp7947, align 8
  %4651 = load %struct._object*, %struct._object** %_py_decref_tmp7947, align 8
  %ob_refcnt7948 = getelementptr inbounds %struct._object, %struct._object* %4651, i32 0, i32 0
  %4652 = load i64, i64* %ob_refcnt7948, align 8
  %dec7949 = add i64 %4652, -1
  store i64 %dec7949, i64* %ob_refcnt7948, align 8
  %cmp7950 = icmp ne i64 %dec7949, 0
  br i1 %cmp7950, label %if.then.7952, label %if.else.7953

if.then.7952:                                     ; preds = %do.body.7945
  br label %if.end.7956

if.else.7953:                                     ; preds = %do.body.7945
  %4653 = load %struct._object*, %struct._object** %_py_decref_tmp7947, align 8
  %ob_type7954 = getelementptr inbounds %struct._object, %struct._object* %4653, i32 0, i32 1
  %4654 = load %struct._typeobject*, %struct._typeobject** %ob_type7954, align 8
  %tp_dealloc7955 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %4654, i32 0, i32 4
  %4655 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc7955, align 8
  %4656 = load %struct._object*, %struct._object** %_py_decref_tmp7947, align 8
  call void %4655(%struct._object* %4656)
  br label %if.end.7956

if.end.7956:                                      ; preds = %if.else.7953, %if.then.7952
  br label %do.end.7957

do.end.7957:                                      ; preds = %if.end.7956
  br label %if.end.7958

if.end.7958:                                      ; preds = %do.end.7957, %do.body.7939
  br label %do.end.7959

do.end.7959:                                      ; preds = %if.end.7958
  br label %if.end.7960

if.end.7960:                                      ; preds = %do.end.7959, %if.else.7933
  br label %if.end.7961

if.end.7961:                                      ; preds = %if.end.7960, %if.then.7929
  br label %if.end.7962

if.end.7962:                                      ; preds = %if.end.7961, %if.end.7923
  br label %if.end.7963

if.end.7963:                                      ; preds = %if.end.7962, %if.end.7875
  br label %exit_eval_frame

exit_eval_frame:                                  ; preds = %if.end.7963, %if.then.43, %if.then.35
  br label %do.body.7964

do.body.7964:                                     ; preds = %exit_eval_frame
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val7966, align 8
  %4657 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val7966, align 8
  %_value7971 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %4657, i32 0, i32 0
  store i8** %_value7971, i8*** %volatile_data7970, align 8
  store i32 0, i32* %order7973, align 4
  %4658 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val7966, align 8
  %4659 = bitcast %struct._Py_atomic_address* %4658 to i8*
  %4660 = load i32, i32* %order7973, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %4659, i32 %4660)
  %4661 = load i32, i32* %order7973, align 4
  switch i32 %4661, label %sw.default.7975 [
    i32 2, label %sw.bb.7974
    i32 3, label %sw.bb.7974
    i32 4, label %sw.bb.7974
  ]

sw.bb.7974:                                       ; preds = %do.body.7964, %do.body.7964, %do.body.7964
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.7976

sw.default.7975:                                  ; preds = %do.body.7964
  br label %sw.epilog.7976

sw.epilog.7976:                                   ; preds = %sw.default.7975, %sw.bb.7974
  %4662 = load i8**, i8*** %volatile_data7970, align 8
  %4663 = load volatile i8*, i8** %4662, align 8
  store i8* %4663, i8** %result7968, align 8
  %4664 = load i32, i32* %order7973, align 4
  switch i32 %4664, label %sw.default.7978 [
    i32 1, label %sw.bb.7977
    i32 3, label %sw.bb.7977
    i32 4, label %sw.bb.7977
  ]

sw.bb.7977:                                       ; preds = %sw.epilog.7976, %sw.epilog.7976, %sw.epilog.7976
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.7979

sw.default.7978:                                  ; preds = %sw.epilog.7976
  br label %sw.epilog.7979

sw.epilog.7979:                                   ; preds = %sw.default.7978, %sw.bb.7977
  %4665 = load i8*, i8** %result7968, align 8
  store i8* %4665, i8** %tmp7980
  %4666 = load i8*, i8** %tmp7980
  %4667 = bitcast i8* %4666 to %struct._ts*
  %recursion_depth7981 = getelementptr inbounds %struct._ts, %struct._ts* %4667, i32 0, i32 4
  %4668 = load i32, i32* %recursion_depth7981, align 4
  %dec7982 = add i32 %4668, -1
  store i32 %dec7982, i32* %recursion_depth7981, align 4
  %4669 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %cmp7983 = icmp sgt i32 %4669, 100
  br i1 %cmp7983, label %cond.true.7985, label %cond.false.7987

cond.true.7985:                                   ; preds = %sw.epilog.7979
  %4670 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %sub7986 = sub i32 %4670, 50
  br label %cond.end.7990

cond.false.7987:                                  ; preds = %sw.epilog.7979
  %4671 = load i32, i32* @_Py_CheckRecursionLimit, align 4
  %shr7988 = ashr i32 %4671, 2
  %mul7989 = mul i32 3, %shr7988
  br label %cond.end.7990

cond.end.7990:                                    ; preds = %cond.false.7987, %cond.true.7985
  %cond7991 = phi i32 [ %sub7986, %cond.true.7985 ], [ %mul7989, %cond.false.7987 ]
  %cmp7992 = icmp slt i32 %dec7982, %cond7991
  br i1 %cmp7992, label %if.then.7994, label %if.end.8011

if.then.7994:                                     ; preds = %cond.end.7990
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val7996, align 8
  %4672 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val7996, align 8
  %_value8001 = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %4672, i32 0, i32 0
  store i8** %_value8001, i8*** %volatile_data8000, align 8
  store i32 0, i32* %order8003, align 4
  %4673 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val7996, align 8
  %4674 = bitcast %struct._Py_atomic_address* %4673 to i8*
  %4675 = load i32, i32* %order8003, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %4674, i32 %4675)
  %4676 = load i32, i32* %order8003, align 4
  switch i32 %4676, label %sw.default.8005 [
    i32 2, label %sw.bb.8004
    i32 3, label %sw.bb.8004
    i32 4, label %sw.bb.8004
  ]

sw.bb.8004:                                       ; preds = %if.then.7994, %if.then.7994, %if.then.7994
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog.8006

sw.default.8005:                                  ; preds = %if.then.7994
  br label %sw.epilog.8006

sw.epilog.8006:                                   ; preds = %sw.default.8005, %sw.bb.8004
  %4677 = load i8**, i8*** %volatile_data8000, align 8
  %4678 = load volatile i8*, i8** %4677, align 8
  store i8* %4678, i8** %result7998, align 8
  %4679 = load i32, i32* %order8003, align 4
  switch i32 %4679, label %sw.default.8008 [
    i32 1, label %sw.bb.8007
    i32 3, label %sw.bb.8007
    i32 4, label %sw.bb.8007
  ]

sw.bb.8007:                                       ; preds = %sw.epilog.8006, %sw.epilog.8006, %sw.epilog.8006
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.8009

sw.default.8008:                                  ; preds = %sw.epilog.8006
  br label %sw.epilog.8009

sw.epilog.8009:                                   ; preds = %sw.default.8008, %sw.bb.8007
  %4680 = load i8*, i8** %result7998, align 8
  store i8* %4680, i8** %tmp8010
  %4681 = load i8*, i8** %tmp8010
  %4682 = bitcast i8* %4681 to %struct._ts*
  %overflowed = getelementptr inbounds %struct._ts, %struct._ts* %4682, i32 0, i32 5
  store i8 0, i8* %overflowed, align 1
  br label %if.end.8011

if.end.8011:                                      ; preds = %sw.epilog.8009, %cond.end.7990
  br label %do.end.8012

do.end.8012:                                      ; preds = %if.end.8011
  %4683 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_executing8013 = getelementptr inbounds %struct._frame, %struct._frame* %4683, i32 0, i32 16
  store i8 0, i8* %f_executing8013, align 1
  %4684 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_back = getelementptr inbounds %struct._frame, %struct._frame* %4684, i32 0, i32 1
  %4685 = load %struct._frame*, %struct._frame** %f_back, align 8
  %4686 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame8014 = getelementptr inbounds %struct._ts, %struct._ts* %4686, i32 0, i32 3
  store %struct._frame* %4685, %struct._frame** %frame8014, align 8
  %4687 = load %struct._object*, %struct._object** %retval1, align 8
  store %struct._object* %4687, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.8012, %if.then
  %4688 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %4688

indirectgoto:                                     ; preds = %if.then.7470, %if.then.7367, %if.then.6863, %if.then.6709, %if.then.6662, %if.then.6525, %if.then.6427, %if.then.6347, %if.then.6284, %if.then.6234, %if.then.6181, %if.then.6141, %if.then.6084, %if.then.6067, %if.then.6025, %if.then.5968, %if.then.5951, %if.then.5909, %if.then.5853, %if.then.5823, %if.then.5782, %if.then.5726, %if.then.5696, %if.then.5656, %if.then.5634, %if.then.5580, %if.then.5514, %if.then.5350, %if.then.5272, %if.then.5205, %if.then.5122, %if.then.5049, %if.then.5003, %if.then.4911, %if.then.4852, %if.then.4794, %if.then.4735, %if.then.4683, %if.then.4588, %if.then.4542, %if.then.4493, %if.then.4419, %if.then.4316, %if.then.4175, %if.then.4124, %if.then.4058, %if.then.3992, %if.then.3910, %if.then.3828, %if.then.3707, %if.then.3649, %if.then.3558, %if.then.3495, %if.then.3401, %if.then.3222, %if.then.3152, %if.then.3006, %if.then.2882, %if.then.2796, %if.then.2725, %if.then.2638, %if.then.2567, %if.then.2496, %if.then.2425, %if.then.2354, %if.then.2283, %if.then.2212, %if.then.2130, %if.then.2060, %if.then.1989, %if.then.1918, %if.then.1847, %if.then.1776, %if.then.1711, %if.then.1647, %if.then.1576, %if.then.1505, %if.then.1434, %if.then.1363, %if.then.1292, %if.then.1223, %if.then.1153, %if.then.1072, %if.then.997, %if.then.926, %if.then.858, %if.then.789, %if.then.720, %if.then.662, %if.then.626, %if.then.571, %if.then.516, %if.then.463, %if.then.438, %if.then.420, %if.then.397, %if.then.379, %if.then.351, %if.then.301, %if.then.275, %if.then.245
  %indirect.goto.dest = phi i8* [ %196, %if.then.245 ], [ %220, %if.then.275 ], [ %240, %if.then.301 ], [ %269, %if.then.351 ], [ %285, %if.then.379 ], [ %300, %if.then.397 ], [ %319, %if.then.420 ], [ %332, %if.then.438 ], [ %352, %if.then.463 ], [ %382, %if.then.516 ], [ %412, %if.then.571 ], [ %442, %if.then.626 ], [ %462, %if.then.662 ], [ %493, %if.then.720 ], [ %533, %if.then.789 ], [ %573, %if.then.858 ], [ %613, %if.then.926 ], [ %653, %if.then.997 ], [ %697, %if.then.1072 ], [ %745, %if.then.1153 ], [ %785, %if.then.1223 ], [ %825, %if.then.1292 ], [ %865, %if.then.1363 ], [ %905, %if.then.1434 ], [ %945, %if.then.1505 ], [ %985, %if.then.1576 ], [ %1025, %if.then.1647 ], [ %1062, %if.then.1711 ], [ %1099, %if.then.1776 ], [ %1139, %if.then.1847 ], [ %1179, %if.then.1918 ], [ %1219, %if.then.1989 ], [ %1259, %if.then.2060 ], [ %1299, %if.then.2130 ], [ %1347, %if.then.2212 ], [ %1387, %if.then.2283 ], [ %1427, %if.then.2354 ], [ %1467, %if.then.2425 ], [ %1507, %if.then.2496 ], [ %1547, %if.then.2567 ], [ %1587, %if.then.2638 ], [ %1636, %if.then.2725 ], [ %1675, %if.then.2796 ], [ %1720, %if.then.2882 ], [ %1795, %if.then.3006 ], [ %1882, %if.then.3152 ], [ %1916, %if.then.3222 ], [ %2010, %if.then.3401 ], [ %2063, %if.then.3495 ], [ %2098, %if.then.3558 ], [ %2154, %if.then.3649 ], [ %2190, %if.then.3707 ], [ %2267, %if.then.3828 ], [ %2314, %if.then.3910 ], [ %2363, %if.then.3992 ], [ %2401, %if.then.4058 ], [ %2441, %if.then.4124 ], [ %2473, %if.then.4175 ], [ %2557, %if.then.4316 ], [ %2626, %if.then.4419 ], [ %2666, %if.then.4493 ], [ %2699, %if.then.4542 ], [ %2730, %if.then.4588 ], [ %2790, %if.then.4683 ], [ %2825, %if.then.4735 ], [ %2861, %if.then.4794 ], [ %2894, %if.then.4852 ], [ %2928, %if.then.4911 ], [ %2974, %if.then.5003 ], [ %3000, %if.then.5049 ], [ %3042, %if.then.5122 ], [ %3090, %if.then.5205 ], [ %3130, %if.then.5272 ], [ %3176, %if.then.5350 ], [ %3272, %if.then.5514 ], [ %3307, %if.then.5580 ], [ %3340, %if.then.5634 ], [ %3354, %if.then.5656 ], [ %3376, %if.then.5696 ], [ %3393, %if.then.5726 ], [ %3422, %if.then.5782 ], [ %3444, %if.then.5823 ], [ %3461, %if.then.5853 ], [ %3490, %if.then.5909 ], [ %3513, %if.then.5951 ], [ %3523, %if.then.5968 ], [ %3553, %if.then.6025 ], [ %3576, %if.then.6067 ], [ %3586, %if.then.6084 ], [ %3616, %if.then.6141 ], [ %3640, %if.then.6181 ], [ %3670, %if.then.6234 ], [ %3701, %if.then.6284 ], [ %3737, %if.then.6347 ], [ %3784, %if.then.6427 ], [ %3839, %if.then.6525 ], [ %3929, %if.then.6662 ], [ %3957, %if.then.6709 ], [ %4057, %if.then.6863 ], [ %4321, %if.then.7367 ], [ %4379, %if.then.7470 ]
  indirectbr i8* %indirect.goto.dest, [label %_unknown_opcode, label %TARGET_POP_TOP, label %TARGET_ROT_TWO, label %TARGET_ROT_THREE, label %TARGET_DUP_TOP, label %TARGET_DUP_TOP_TWO, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %TARGET_NOP, label %TARGET_UNARY_POSITIVE, label %TARGET_UNARY_NEGATIVE, label %TARGET_UNARY_NOT, label %_unknown_opcode, label %_unknown_opcode, label %TARGET_UNARY_INVERT, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %TARGET_BINARY_POWER, label %TARGET_BINARY_MULTIPLY, label %_unknown_opcode, label %TARGET_BINARY_MODULO, label %TARGET_BINARY_ADD, label %TARGET_BINARY_SUBTRACT, label %TARGET_BINARY_SUBSCR, label %TARGET_BINARY_FLOOR_DIVIDE, label %TARGET_BINARY_TRUE_DIVIDE, label %TARGET_INPLACE_FLOOR_DIVIDE, label %TARGET_INPLACE_TRUE_DIVIDE, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %TARGET_STORE_MAP, label %TARGET_INPLACE_ADD, label %TARGET_INPLACE_SUBTRACT, label %TARGET_INPLACE_MULTIPLY, label %_unknown_opcode, label %TARGET_INPLACE_MODULO, label %TARGET_STORE_SUBSCR, label %TARGET_DELETE_SUBSCR, label %TARGET_BINARY_LSHIFT, label %TARGET_BINARY_RSHIFT, label %TARGET_BINARY_AND, label %TARGET_BINARY_XOR, label %TARGET_BINARY_OR, label %TARGET_INPLACE_POWER, label %TARGET_GET_ITER, label %_unknown_opcode, label %TARGET_PRINT_EXPR, label %TARGET_LOAD_BUILD_CLASS, label %TARGET_YIELD_FROM, label %_unknown_opcode, label %_unknown_opcode, label %TARGET_INPLACE_LSHIFT, label %TARGET_INPLACE_RSHIFT, label %TARGET_INPLACE_AND, label %TARGET_INPLACE_XOR, label %TARGET_INPLACE_OR, label %TARGET_BREAK_LOOP, label %TARGET_WITH_CLEANUP, label %_unknown_opcode, label %TARGET_RETURN_VALUE, label %TARGET_IMPORT_STAR, label %_unknown_opcode, label %TARGET_YIELD_VALUE, label %TARGET_POP_BLOCK, label %TARGET_END_FINALLY, label %TARGET_POP_EXCEPT, label %TARGET_STORE_NAME, label %TARGET_DELETE_NAME, label %TARGET_UNPACK_SEQUENCE, label %TARGET_FOR_ITER, label %TARGET_UNPACK_EX, label %TARGET_STORE_ATTR, label %TARGET_DELETE_ATTR, label %TARGET_STORE_GLOBAL, label %TARGET_DELETE_GLOBAL, label %_unknown_opcode, label %TARGET_LOAD_CONST, label %TARGET_LOAD_NAME, label %TARGET_BUILD_TUPLE, label %TARGET_BUILD_LIST, label %TARGET_BUILD_SET, label %TARGET_BUILD_MAP, label %TARGET_LOAD_ATTR, label %TARGET_COMPARE_OP, label %TARGET_IMPORT_NAME, label %TARGET_IMPORT_FROM, label %TARGET_JUMP_FORWARD, label %TARGET_JUMP_IF_FALSE_OR_POP, label %TARGET_JUMP_IF_TRUE_OR_POP, label %TARGET_JUMP_ABSOLUTE, label %TARGET_POP_JUMP_IF_FALSE, label %TARGET_POP_JUMP_IF_TRUE, label %TARGET_LOAD_GLOBAL, label %_unknown_opcode, label %_unknown_opcode, label %TARGET_CONTINUE_LOOP, label %TARGET_SETUP_LOOP, label %TARGET_SETUP_EXCEPT, label %TARGET_SETUP_FINALLY, label %_unknown_opcode, label %TARGET_LOAD_FAST, label %TARGET_STORE_FAST, label %TARGET_DELETE_FAST, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %TARGET_RAISE_VARARGS, label %TARGET_CALL_FUNCTION, label %TARGET_MAKE_FUNCTION, label %TARGET_BUILD_SLICE, label %TARGET_MAKE_CLOSURE, label %TARGET_LOAD_CLOSURE, label %TARGET_LOAD_DEREF, label %TARGET_STORE_DEREF, label %TARGET_DELETE_DEREF, label %_unknown_opcode, label %TARGET_CALL_FUNCTION_VAR, label %TARGET_CALL_FUNCTION_KW, label %TARGET_CALL_FUNCTION_VAR_KW, label %TARGET_SETUP_WITH, label %TARGET_EXTENDED_ARG, label %TARGET_LIST_APPEND, label %TARGET_SET_ADD, label %TARGET_MAP_ADD, label %TARGET_LOAD_CLASSDEREF, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode, label %_unknown_opcode]
}

; Function Attrs: nounwind uwtable
define internal i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, %struct._object* %obj, %struct._ts* %tstate, %struct._frame* %frame, i32 %what, %struct._object* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %func.addr = alloca i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %tstate.addr = alloca %struct._ts*, align 8
  %frame.addr = alloca %struct._frame*, align 8
  %what.addr = alloca i32, align 4
  %arg.addr = alloca %struct._object*, align 8
  %type = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %traceback = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp10 = alloca %struct._object*, align 8
  %_py_decref_tmp14 = alloca %struct._object*, align 8
  %_py_xdecref_tmp27 = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._frame* %frame, %struct._frame** %frame.addr, align 8
  store i32 %what, i32* %what.addr, align 4
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  call void @PyErr_Fetch(%struct._object** %type, %struct._object** %value, %struct._object** %traceback)
  %0 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %1 = load %struct._object*, %struct._object** %obj.addr, align 8
  %2 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %3 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %4 = load i32, i32* %what.addr, align 4
  %5 = load %struct._object*, %struct._object** %arg.addr, align 8
  %call = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %0, %struct._object* %1, %struct._ts* %2, %struct._frame* %3, i32 %4, %struct._object* %5)
  store i32 %call, i32* %err, align 4
  %6 = load i32, i32* %err, align 4
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** %type, align 8
  %8 = load %struct._object*, %struct._object** %value, align 8
  %9 = load %struct._object*, %struct._object** %traceback, align 8
  call void @PyErr_Restore(%struct._object* %7, %struct._object* %8, %struct._object* %9)
  store i32 0, i32* %retval
  br label %return

if.else:                                          ; preds = %entry
  br label %do.body

do.body:                                          ; preds = %if.else
  %10 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %10, %struct._object** %_py_xdecref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp1 = icmp ne %struct._object* %11, null
  br i1 %cmp1, label %if.then.2, label %if.end.7

if.then.2:                                        ; preds = %do.body
  br label %do.body.3

do.body.3:                                        ; preds = %if.then.2
  %12 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %12, %struct._object** %_py_decref_tmp, align 8
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %14, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp4 = icmp ne i64 %dec, 0
  br i1 %cmp4, label %if.then.5, label %if.else.6

if.then.5:                                        ; preds = %do.body.3
  br label %if.end

if.else.6:                                        ; preds = %do.body.3
  %15 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 1
  %16 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %16, i32 0, i32 4
  %17 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %17(%struct._object* %18)
  br label %if.end

if.end:                                           ; preds = %if.else.6, %if.then.5
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.7

if.end.7:                                         ; preds = %do.end, %do.body
  br label %do.end.8

do.end.8:                                         ; preds = %if.end.7
  br label %do.body.9

do.body.9:                                        ; preds = %do.end.8
  %19 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %19, %struct._object** %_py_xdecref_tmp10, align 8
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp10, align 8
  %cmp11 = icmp ne %struct._object* %20, null
  br i1 %cmp11, label %if.then.12, label %if.end.24

if.then.12:                                       ; preds = %do.body.9
  br label %do.body.13

do.body.13:                                       ; preds = %if.then.12
  %21 = load %struct._object*, %struct._object** %_py_xdecref_tmp10, align 8
  store %struct._object* %21, %struct._object** %_py_decref_tmp14, align 8
  %22 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt15, align 8
  %dec16 = add i64 %23, -1
  store i64 %dec16, i64* %ob_refcnt15, align 8
  %cmp17 = icmp ne i64 %dec16, 0
  br i1 %cmp17, label %if.then.18, label %if.else.19

if.then.18:                                       ; preds = %do.body.13
  br label %if.end.22

if.else.19:                                       ; preds = %do.body.13
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 1
  %25 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_dealloc21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %25, i32 0, i32 4
  %26 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc21, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp14, align 8
  call void %26(%struct._object* %27)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else.19, %if.then.18
  br label %do.end.23

do.end.23:                                        ; preds = %if.end.22
  br label %if.end.24

if.end.24:                                        ; preds = %do.end.23, %do.body.9
  br label %do.end.25

do.end.25:                                        ; preds = %if.end.24
  br label %do.body.26

do.body.26:                                       ; preds = %do.end.25
  %28 = load %struct._object*, %struct._object** %traceback, align 8
  store %struct._object* %28, %struct._object** %_py_xdecref_tmp27, align 8
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp27, align 8
  %cmp28 = icmp ne %struct._object* %29, null
  br i1 %cmp28, label %if.then.29, label %if.end.41

if.then.29:                                       ; preds = %do.body.26
  br label %do.body.30

do.body.30:                                       ; preds = %if.then.29
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp27, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp31, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %32, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.35, label %if.else.36

if.then.35:                                       ; preds = %do.body.30
  br label %if.end.39

if.else.36:                                       ; preds = %do.body.30
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type37 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type37, align 8
  %tp_dealloc38 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc38, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %35(%struct._object* %36)
  br label %if.end.39

if.end.39:                                        ; preds = %if.else.36, %if.then.35
  br label %do.end.40

do.end.40:                                        ; preds = %if.end.39
  br label %if.end.41

if.end.41:                                        ; preds = %do.end.40, %do.body.26
  br label %do.end.42

do.end.42:                                        ; preds = %if.end.41
  store i32 -1, i32* %retval
  br label %return

return:                                           ; preds = %do.end.42, %if.then
  %37 = load i32, i32* %retval
  ret i32 %37
}

; Function Attrs: nounwind uwtable
define internal void @swap_exc_state(%struct._ts* %tstate, %struct._frame* %f) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  %f.addr = alloca %struct._frame*, align 8
  %tmp = alloca %struct._object*, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._frame* %f, %struct._frame** %f.addr, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_type = getelementptr inbounds %struct._ts, %struct._ts* %0, i32 0, i32 16
  %1 = load %struct._object*, %struct._object** %exc_type, align 8
  store %struct._object* %1, %struct._object** %tmp, align 8
  %2 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type = getelementptr inbounds %struct._frame, %struct._frame* %2, i32 0, i32 9
  %3 = load %struct._object*, %struct._object** %f_exc_type, align 8
  %4 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_type1 = getelementptr inbounds %struct._ts, %struct._ts* %4, i32 0, i32 16
  store %struct._object* %3, %struct._object** %exc_type1, align 8
  %5 = load %struct._object*, %struct._object** %tmp, align 8
  %6 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type2 = getelementptr inbounds %struct._frame, %struct._frame* %6, i32 0, i32 9
  store %struct._object* %5, %struct._object** %f_exc_type2, align 8
  %7 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_value = getelementptr inbounds %struct._ts, %struct._ts* %7, i32 0, i32 17
  %8 = load %struct._object*, %struct._object** %exc_value, align 8
  store %struct._object* %8, %struct._object** %tmp, align 8
  %9 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_value = getelementptr inbounds %struct._frame, %struct._frame* %9, i32 0, i32 10
  %10 = load %struct._object*, %struct._object** %f_exc_value, align 8
  %11 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_value3 = getelementptr inbounds %struct._ts, %struct._ts* %11, i32 0, i32 17
  store %struct._object* %10, %struct._object** %exc_value3, align 8
  %12 = load %struct._object*, %struct._object** %tmp, align 8
  %13 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_value4 = getelementptr inbounds %struct._frame, %struct._frame* %13, i32 0, i32 10
  store %struct._object* %12, %struct._object** %f_exc_value4, align 8
  %14 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_traceback = getelementptr inbounds %struct._ts, %struct._ts* %14, i32 0, i32 18
  %15 = load %struct._object*, %struct._object** %exc_traceback, align 8
  store %struct._object* %15, %struct._object** %tmp, align 8
  %16 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_traceback = getelementptr inbounds %struct._frame, %struct._frame* %16, i32 0, i32 11
  %17 = load %struct._object*, %struct._object** %f_exc_traceback, align 8
  %18 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_traceback5 = getelementptr inbounds %struct._ts, %struct._ts* %18, i32 0, i32 18
  store %struct._object* %17, %struct._object** %exc_traceback5, align 8
  %19 = load %struct._object*, %struct._object** %tmp, align 8
  %20 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_traceback6 = getelementptr inbounds %struct._frame, %struct._frame* %20, i32 0, i32 11
  store %struct._object* %19, %struct._object** %f_exc_traceback6, align 8
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @save_exc_state(%struct._ts* %tstate, %struct._frame* %f) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  %f.addr = alloca %struct._frame*, align 8
  %type = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %traceback = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_xincref_tmp2 = alloca %struct._object*, align 8
  %_py_xincref_tmp10 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp35 = alloca %struct._object*, align 8
  %_py_decref_tmp39 = alloca %struct._object*, align 8
  %_py_xdecref_tmp52 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._frame* %f, %struct._frame** %f.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_type = getelementptr inbounds %struct._ts, %struct._ts* %0, i32 0, i32 16
  %1 = load %struct._object*, %struct._object** %exc_type, align 8
  store %struct._object* %1, %struct._object** %_py_xincref_tmp, align 8
  %2 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp = icmp ne %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %3 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %4, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %do.body.1

do.body.1:                                        ; preds = %do.end
  %5 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_value = getelementptr inbounds %struct._ts, %struct._ts* %5, i32 0, i32 17
  %6 = load %struct._object*, %struct._object** %exc_value, align 8
  store %struct._object* %6, %struct._object** %_py_xincref_tmp2, align 8
  %7 = load %struct._object*, %struct._object** %_py_xincref_tmp2, align 8
  %cmp3 = icmp ne %struct._object* %7, null
  br i1 %cmp3, label %if.then.4, label %if.end.7

if.then.4:                                        ; preds = %do.body.1
  %8 = load %struct._object*, %struct._object** %_py_xincref_tmp2, align 8
  %ob_refcnt5 = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt5, align 8
  %inc6 = add i64 %9, 1
  store i64 %inc6, i64* %ob_refcnt5, align 8
  br label %if.end.7

if.end.7:                                         ; preds = %if.then.4, %do.body.1
  br label %do.end.8

do.end.8:                                         ; preds = %if.end.7
  br label %do.body.9

do.body.9:                                        ; preds = %do.end.8
  %10 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_traceback = getelementptr inbounds %struct._ts, %struct._ts* %10, i32 0, i32 18
  %11 = load %struct._object*, %struct._object** %exc_traceback, align 8
  store %struct._object* %11, %struct._object** %_py_xincref_tmp10, align 8
  %12 = load %struct._object*, %struct._object** %_py_xincref_tmp10, align 8
  %cmp11 = icmp ne %struct._object* %12, null
  br i1 %cmp11, label %if.then.12, label %if.end.15

if.then.12:                                       ; preds = %do.body.9
  %13 = load %struct._object*, %struct._object** %_py_xincref_tmp10, align 8
  %ob_refcnt13 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 0
  %14 = load i64, i64* %ob_refcnt13, align 8
  %inc14 = add i64 %14, 1
  store i64 %inc14, i64* %ob_refcnt13, align 8
  br label %if.end.15

if.end.15:                                        ; preds = %if.then.12, %do.body.9
  br label %do.end.16

do.end.16:                                        ; preds = %if.end.15
  %15 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type = getelementptr inbounds %struct._frame, %struct._frame* %15, i32 0, i32 9
  %16 = load %struct._object*, %struct._object** %f_exc_type, align 8
  store %struct._object* %16, %struct._object** %type, align 8
  %17 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_value = getelementptr inbounds %struct._frame, %struct._frame* %17, i32 0, i32 10
  %18 = load %struct._object*, %struct._object** %f_exc_value, align 8
  store %struct._object* %18, %struct._object** %value, align 8
  %19 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_traceback = getelementptr inbounds %struct._frame, %struct._frame* %19, i32 0, i32 11
  %20 = load %struct._object*, %struct._object** %f_exc_traceback, align 8
  store %struct._object* %20, %struct._object** %traceback, align 8
  %21 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_type17 = getelementptr inbounds %struct._ts, %struct._ts* %21, i32 0, i32 16
  %22 = load %struct._object*, %struct._object** %exc_type17, align 8
  %23 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type18 = getelementptr inbounds %struct._frame, %struct._frame* %23, i32 0, i32 9
  store %struct._object* %22, %struct._object** %f_exc_type18, align 8
  %24 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_value19 = getelementptr inbounds %struct._ts, %struct._ts* %24, i32 0, i32 17
  %25 = load %struct._object*, %struct._object** %exc_value19, align 8
  %26 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_value20 = getelementptr inbounds %struct._frame, %struct._frame* %26, i32 0, i32 10
  store %struct._object* %25, %struct._object** %f_exc_value20, align 8
  %27 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_traceback21 = getelementptr inbounds %struct._ts, %struct._ts* %27, i32 0, i32 18
  %28 = load %struct._object*, %struct._object** %exc_traceback21, align 8
  %29 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_traceback22 = getelementptr inbounds %struct._frame, %struct._frame* %29, i32 0, i32 11
  store %struct._object* %28, %struct._object** %f_exc_traceback22, align 8
  br label %do.body.23

do.body.23:                                       ; preds = %do.end.16
  %30 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %30, %struct._object** %_py_xdecref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp24 = icmp ne %struct._object* %31, null
  br i1 %cmp24, label %if.then.25, label %if.end.32

if.then.25:                                       ; preds = %do.body.23
  br label %do.body.26

do.body.26:                                       ; preds = %if.then.25
  %32 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %32, %struct._object** %_py_decref_tmp, align 8
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt27 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 0
  %34 = load i64, i64* %ob_refcnt27, align 8
  %dec = add i64 %34, -1
  store i64 %dec, i64* %ob_refcnt27, align 8
  %cmp28 = icmp ne i64 %dec, 0
  br i1 %cmp28, label %if.then.29, label %if.else

if.then.29:                                       ; preds = %do.body.26
  br label %if.end.30

if.else:                                          ; preds = %do.body.26
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 4
  %37 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %37(%struct._object* %38)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else, %if.then.29
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  br label %if.end.32

if.end.32:                                        ; preds = %do.end.31, %do.body.23
  br label %do.end.33

do.end.33:                                        ; preds = %if.end.32
  br label %do.body.34

do.body.34:                                       ; preds = %do.end.33
  %39 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %39, %struct._object** %_py_xdecref_tmp35, align 8
  %40 = load %struct._object*, %struct._object** %_py_xdecref_tmp35, align 8
  %cmp36 = icmp ne %struct._object* %40, null
  br i1 %cmp36, label %if.then.37, label %if.end.49

if.then.37:                                       ; preds = %do.body.34
  br label %do.body.38

do.body.38:                                       ; preds = %if.then.37
  %41 = load %struct._object*, %struct._object** %_py_xdecref_tmp35, align 8
  store %struct._object* %41, %struct._object** %_py_decref_tmp39, align 8
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_refcnt40 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 0
  %43 = load i64, i64* %ob_refcnt40, align 8
  %dec41 = add i64 %43, -1
  store i64 %dec41, i64* %ob_refcnt40, align 8
  %cmp42 = icmp ne i64 %dec41, 0
  br i1 %cmp42, label %if.then.43, label %if.else.44

if.then.43:                                       ; preds = %do.body.38
  br label %if.end.47

if.else.44:                                       ; preds = %do.body.38
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  %ob_type45 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type45, align 8
  %tp_dealloc46 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 4
  %46 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc46, align 8
  %47 = load %struct._object*, %struct._object** %_py_decref_tmp39, align 8
  call void %46(%struct._object* %47)
  br label %if.end.47

if.end.47:                                        ; preds = %if.else.44, %if.then.43
  br label %do.end.48

do.end.48:                                        ; preds = %if.end.47
  br label %if.end.49

if.end.49:                                        ; preds = %do.end.48, %do.body.34
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  br label %do.body.51

do.body.51:                                       ; preds = %do.end.50
  %48 = load %struct._object*, %struct._object** %traceback, align 8
  store %struct._object* %48, %struct._object** %_py_xdecref_tmp52, align 8
  %49 = load %struct._object*, %struct._object** %_py_xdecref_tmp52, align 8
  %cmp53 = icmp ne %struct._object* %49, null
  br i1 %cmp53, label %if.then.54, label %if.end.66

if.then.54:                                       ; preds = %do.body.51
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.54
  %50 = load %struct._object*, %struct._object** %_py_xdecref_tmp52, align 8
  store %struct._object* %50, %struct._object** %_py_decref_tmp56, align 8
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 0
  %52 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %52, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.60, label %if.else.61

if.then.60:                                       ; preds = %do.body.55
  br label %if.end.64

if.else.61:                                       ; preds = %do.body.55
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type62 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 1
  %54 = load %struct._typeobject*, %struct._typeobject** %ob_type62, align 8
  %tp_dealloc63 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %54, i32 0, i32 4
  %55 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc63, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %55(%struct._object* %56)
  br label %if.end.64

if.end.64:                                        ; preds = %if.else.61, %if.then.60
  br label %do.end.65

do.end.65:                                        ; preds = %if.end.64
  br label %if.end.66

if.end.66:                                        ; preds = %do.end.65, %do.body.51
  br label %do.end.67

do.end.67:                                        ; preds = %if.end.66
  ret void
}

declare void @PyErr_SetNone(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal i32 @maybe_call_line_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, %struct._object* %obj, %struct._ts* %tstate, %struct._frame* %frame, i32* %instr_lb, i32* %instr_ub, i32* %instr_prev) #0 {
entry:
  %func.addr = alloca i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %tstate.addr = alloca %struct._ts*, align 8
  %frame.addr = alloca %struct._frame*, align 8
  %instr_lb.addr = alloca i32*, align 8
  %instr_ub.addr = alloca i32*, align 8
  %instr_prev.addr = alloca i32*, align 8
  %result = alloca i32, align 4
  %line = alloca i32, align 4
  %bounds = alloca %struct._addr_pair, align 4
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._frame* %frame, %struct._frame** %frame.addr, align 8
  store i32* %instr_lb, i32** %instr_lb.addr, align 8
  store i32* %instr_ub, i32** %instr_ub.addr, align 8
  store i32* %instr_prev, i32** %instr_prev.addr, align 8
  store i32 0, i32* %result, align 4
  %0 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lineno = getelementptr inbounds %struct._frame, %struct._frame* %0, i32 0, i32 14
  %1 = load i32, i32* %f_lineno, align 4
  store i32 %1, i32* %line, align 4
  %2 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lasti = getelementptr inbounds %struct._frame, %struct._frame* %2, i32 0, i32 13
  %3 = load i32, i32* %f_lasti, align 4
  %4 = load i32*, i32** %instr_lb.addr, align 8
  %5 = load i32, i32* %4, align 4
  %cmp = icmp slt i32 %3, %5
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lasti1 = getelementptr inbounds %struct._frame, %struct._frame* %6, i32 0, i32 13
  %7 = load i32, i32* %f_lasti1, align 4
  %8 = load i32*, i32** %instr_ub.addr, align 8
  %9 = load i32, i32* %8, align 4
  %cmp2 = icmp sge i32 %7, %9
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %10 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_code = getelementptr inbounds %struct._frame, %struct._frame* %10, i32 0, i32 2
  %11 = load %struct.PyCodeObject*, %struct.PyCodeObject** %f_code, align 8
  %12 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lasti3 = getelementptr inbounds %struct._frame, %struct._frame* %12, i32 0, i32 13
  %13 = load i32, i32* %f_lasti3, align 4
  %call = call i32 @_PyCode_CheckLineNumber(%struct.PyCodeObject* %11, i32 %13, %struct._addr_pair* %bounds)
  store i32 %call, i32* %line, align 4
  %ap_lower = getelementptr inbounds %struct._addr_pair, %struct._addr_pair* %bounds, i32 0, i32 0
  %14 = load i32, i32* %ap_lower, align 4
  %15 = load i32*, i32** %instr_lb.addr, align 8
  store i32 %14, i32* %15, align 4
  %ap_upper = getelementptr inbounds %struct._addr_pair, %struct._addr_pair* %bounds, i32 0, i32 1
  %16 = load i32, i32* %ap_upper, align 4
  %17 = load i32*, i32** %instr_ub.addr, align 8
  store i32 %16, i32* %17, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %18 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lasti4 = getelementptr inbounds %struct._frame, %struct._frame* %18, i32 0, i32 13
  %19 = load i32, i32* %f_lasti4, align 4
  %20 = load i32*, i32** %instr_lb.addr, align 8
  %21 = load i32, i32* %20, align 4
  %cmp5 = icmp eq i32 %19, %21
  br i1 %cmp5, label %if.then.9, label %lor.lhs.false.6

lor.lhs.false.6:                                  ; preds = %if.end
  %22 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lasti7 = getelementptr inbounds %struct._frame, %struct._frame* %22, i32 0, i32 13
  %23 = load i32, i32* %f_lasti7, align 4
  %24 = load i32*, i32** %instr_prev.addr, align 8
  %25 = load i32, i32* %24, align 4
  %cmp8 = icmp slt i32 %23, %25
  br i1 %cmp8, label %if.then.9, label %if.end.12

if.then.9:                                        ; preds = %lor.lhs.false.6, %if.end
  %26 = load i32, i32* %line, align 4
  %27 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lineno10 = getelementptr inbounds %struct._frame, %struct._frame* %27, i32 0, i32 14
  store i32 %26, i32* %f_lineno10, align 4
  %28 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %29 = load %struct._object*, %struct._object** %obj.addr, align 8
  %30 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %31 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %call11 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %28, %struct._object* %29, %struct._ts* %30, %struct._frame* %31, i32 2, %struct._object* @_Py_NoneStruct)
  store i32 %call11, i32* %result, align 4
  br label %if.end.12

if.end.12:                                        ; preds = %if.then.9, %lor.lhs.false.6
  %32 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %f_lasti13 = getelementptr inbounds %struct._frame, %struct._frame* %32, i32 0, i32 13
  %33 = load i32, i32* %f_lasti13, align 4
  %34 = load i32*, i32** %instr_prev.addr, align 8
  store i32 %33, i32* %34, align 4
  %35 = load i32, i32* %result, align 4
  ret i32 %35
}

; Function Attrs: nounwind uwtable
define internal void @format_exc_check_arg(%struct._object* %exc, i8* %format_str, %struct._object* %obj) #0 {
entry:
  %exc.addr = alloca %struct._object*, align 8
  %format_str.addr = alloca i8*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %obj_str = alloca i8*, align 8
  store %struct._object* %exc, %struct._object** %exc.addr, align 8
  store i8* %format_str, i8** %format_str.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  %0 = load %struct._object*, %struct._object** %obj.addr, align 8
  %tobool = icmp ne %struct._object* %0, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._object*, %struct._object** %obj.addr, align 8
  %call = call i8* @PyUnicode_AsUTF8(%struct._object* %1)
  store i8* %call, i8** %obj_str, align 8
  %2 = load i8*, i8** %obj_str, align 8
  %tobool1 = icmp ne i8* %2, null
  br i1 %tobool1, label %if.end.3, label %if.then.2

if.then.2:                                        ; preds = %if.end
  br label %return

if.end.3:                                         ; preds = %if.end
  %3 = load %struct._object*, %struct._object** %exc.addr, align 8
  %4 = load i8*, i8** %format_str.addr, align 8
  %5 = load i8*, i8** %obj_str, align 8
  %call4 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %3, i8* %4, i8* %5)
  br label %return

return:                                           ; preds = %if.end.3, %if.then.2, %if.then
  ret void
}

declare %struct._object* @PyTuple_GetItem(%struct._object*, i64) #2

declare %struct._object* @PyNumber_Positive(%struct._object*) #2

declare %struct._object* @PyNumber_Negative(%struct._object*) #2

declare i32 @PyObject_IsTrue(%struct._object*) #2

declare %struct._object* @PyNumber_Invert(%struct._object*) #2

declare %struct._object* @PyNumber_Power(%struct._object*, %struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Multiply(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_TrueDivide(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_FloorDivide(%struct._object*, %struct._object*) #2

declare %struct._object* @PyUnicode_Format(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Remainder(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @unicode_concatenate(%struct._object* %v, %struct._object* %w, %struct._frame* %f, i8* %next_instr) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %f.addr = alloca %struct._frame*, align 8
  %next_instr.addr = alloca i8*, align 8
  %res = alloca %struct._object*, align 8
  %oparg = alloca i32, align 4
  %fastlocals = alloca %struct._object**, align 8
  %tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %freevars = alloca %struct._object**, align 8
  %c = alloca %struct._object*, align 8
  %names = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %locals = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %w, %struct._object** %w.addr, align 8
  store %struct._frame* %f, %struct._frame** %f.addr, align 8
  store i8* %next_instr, i8** %next_instr.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 0
  %1 = load i64, i64* %ob_refcnt, align 8
  %cmp = icmp eq i64 %1, 2
  br i1 %cmp, label %if.then, label %if.end.70

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %next_instr.addr, align 8
  %3 = load i8, i8* %2, align 1
  %conv = zext i8 %3 to i32
  switch i32 %conv, label %sw.epilog [
    i32 125, label %sw.bb
    i32 137, label %sw.bb.27
    i32 90, label %sw.bb.44
  ]

sw.bb:                                            ; preds = %if.then
  %4 = load i8*, i8** %next_instr.addr, align 8
  %arrayidx = getelementptr i8, i8* %4, i64 2
  %5 = load i8, i8* %arrayidx, align 1
  %conv1 = zext i8 %5 to i32
  %shl = shl i32 %conv1, 8
  %6 = load i8*, i8** %next_instr.addr, align 8
  %arrayidx2 = getelementptr i8, i8* %6, i64 1
  %7 = load i8, i8* %arrayidx2, align 1
  %conv3 = zext i8 %7 to i32
  %add = add i32 %shl, %conv3
  store i32 %add, i32* %oparg, align 4
  %8 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_localsplus = getelementptr inbounds %struct._frame, %struct._frame* %8, i32 0, i32 18
  %arraydecay = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus, i32 0, i32 0
  store %struct._object** %arraydecay, %struct._object*** %fastlocals, align 8
  %9 = load i32, i32* %oparg, align 4
  %idxprom = sext i32 %9 to i64
  %10 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx4 = getelementptr %struct._object*, %struct._object** %10, i64 %idxprom
  %11 = load %struct._object*, %struct._object** %arrayidx4, align 8
  %12 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp5 = icmp eq %struct._object* %11, %12
  br i1 %cmp5, label %if.then.7, label %if.end.26

if.then.7:                                        ; preds = %sw.bb
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %13 = load i32, i32* %oparg, align 4
  %idxprom8 = sext i32 %13 to i64
  %14 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx9 = getelementptr %struct._object*, %struct._object** %14, i64 %idxprom8
  %15 = load %struct._object*, %struct._object** %arrayidx9, align 8
  store %struct._object* %15, %struct._object** %tmp, align 8
  %16 = load i32, i32* %oparg, align 4
  %idxprom10 = sext i32 %16 to i64
  %17 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx11 = getelementptr %struct._object*, %struct._object** %17, i64 %idxprom10
  store %struct._object* null, %struct._object** %arrayidx11, align 8
  br label %do.body.12

do.body.12:                                       ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %18, %struct._object** %_py_xdecref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp14 = icmp ne %struct._object* %19, null
  br i1 %cmp14, label %if.then.16, label %if.end.23

if.then.16:                                       ; preds = %do.body.12
  br label %do.body.17

do.body.17:                                       ; preds = %if.then.16
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt19, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %ob_refcnt19, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.22, label %if.else

if.then.22:                                       ; preds = %do.body.17
  br label %if.end

if.else:                                          ; preds = %do.body.17
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.22
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.23

if.end.23:                                        ; preds = %do.end, %do.body.12
  br label %do.end.24

do.end.24:                                        ; preds = %if.end.23
  br label %do.end.25

do.end.25:                                        ; preds = %do.end.24
  br label %if.end.26

if.end.26:                                        ; preds = %do.end.25, %sw.bb
  br label %sw.epilog

sw.bb.27:                                         ; preds = %if.then
  %27 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_localsplus29 = getelementptr inbounds %struct._frame, %struct._frame* %27, i32 0, i32 18
  %arraydecay30 = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus29, i32 0, i32 0
  %28 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_code = getelementptr inbounds %struct._frame, %struct._frame* %28, i32 0, i32 2
  %29 = load %struct.PyCodeObject*, %struct.PyCodeObject** %f_code, align 8
  %co_nlocals = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %29, i32 0, i32 3
  %30 = load i32, i32* %co_nlocals, align 4
  %idx.ext = sext i32 %30 to i64
  %add.ptr = getelementptr %struct._object*, %struct._object** %arraydecay30, i64 %idx.ext
  store %struct._object** %add.ptr, %struct._object*** %freevars, align 8
  %31 = load i8*, i8** %next_instr.addr, align 8
  %arrayidx32 = getelementptr i8, i8* %31, i64 2
  %32 = load i8, i8* %arrayidx32, align 1
  %conv33 = zext i8 %32 to i32
  %shl34 = shl i32 %conv33, 8
  %33 = load i8*, i8** %next_instr.addr, align 8
  %arrayidx35 = getelementptr i8, i8* %33, i64 1
  %34 = load i8, i8* %arrayidx35, align 1
  %conv36 = zext i8 %34 to i32
  %add37 = add i32 %shl34, %conv36
  %idxprom38 = sext i32 %add37 to i64
  %35 = load %struct._object**, %struct._object*** %freevars, align 8
  %arrayidx39 = getelementptr %struct._object*, %struct._object** %35, i64 %idxprom38
  %36 = load %struct._object*, %struct._object** %arrayidx39, align 8
  store %struct._object* %36, %struct._object** %c, align 8
  %37 = load %struct._object*, %struct._object** %c, align 8
  %38 = bitcast %struct._object* %37 to %struct.PyCellObject*
  %ob_ref = getelementptr inbounds %struct.PyCellObject, %struct.PyCellObject* %38, i32 0, i32 1
  %39 = load %struct._object*, %struct._object** %ob_ref, align 8
  %40 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp40 = icmp eq %struct._object* %39, %40
  br i1 %cmp40, label %if.then.42, label %if.end.43

if.then.42:                                       ; preds = %sw.bb.27
  %41 = load %struct._object*, %struct._object** %c, align 8
  %call = call i32 @PyCell_Set(%struct._object* %41, %struct._object* null)
  br label %if.end.43

if.end.43:                                        ; preds = %if.then.42, %sw.bb.27
  br label %sw.epilog

sw.bb.44:                                         ; preds = %if.then
  %42 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_code46 = getelementptr inbounds %struct._frame, %struct._frame* %42, i32 0, i32 2
  %43 = load %struct.PyCodeObject*, %struct.PyCodeObject** %f_code46, align 8
  %co_names = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %43, i32 0, i32 8
  %44 = load %struct._object*, %struct._object** %co_names, align 8
  store %struct._object* %44, %struct._object** %names, align 8
  %45 = load i8*, i8** %next_instr.addr, align 8
  %arrayidx48 = getelementptr i8, i8* %45, i64 2
  %46 = load i8, i8* %arrayidx48, align 1
  %conv49 = zext i8 %46 to i32
  %shl50 = shl i32 %conv49, 8
  %47 = load i8*, i8** %next_instr.addr, align 8
  %arrayidx51 = getelementptr i8, i8* %47, i64 1
  %48 = load i8, i8* %arrayidx51, align 1
  %conv52 = zext i8 %48 to i32
  %add53 = add i32 %shl50, %conv52
  %idxprom54 = sext i32 %add53 to i64
  %49 = load %struct._object*, %struct._object** %names, align 8
  %50 = bitcast %struct._object* %49 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %50, i32 0, i32 1
  %arrayidx55 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom54
  %51 = load %struct._object*, %struct._object** %arrayidx55, align 8
  store %struct._object* %51, %struct._object** %name, align 8
  %52 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_locals = getelementptr inbounds %struct._frame, %struct._frame* %52, i32 0, i32 5
  %53 = load %struct._object*, %struct._object** %f_locals, align 8
  store %struct._object* %53, %struct._object** %locals, align 8
  %54 = load %struct._object*, %struct._object** %locals, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %54, i32 0, i32 1
  %55 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %cmp58 = icmp eq %struct._typeobject* %55, @PyDict_Type
  br i1 %cmp58, label %land.lhs.true, label %if.end.69

land.lhs.true:                                    ; preds = %sw.bb.44
  %56 = load %struct._object*, %struct._object** %locals, align 8
  %57 = load %struct._object*, %struct._object** %name, align 8
  %call60 = call %struct._object* @PyDict_GetItem(%struct._object* %56, %struct._object* %57)
  %58 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp61 = icmp eq %struct._object* %call60, %58
  br i1 %cmp61, label %if.then.63, label %if.end.69

if.then.63:                                       ; preds = %land.lhs.true
  %59 = load %struct._object*, %struct._object** %locals, align 8
  %60 = load %struct._object*, %struct._object** %name, align 8
  %call64 = call i32 @PyDict_DelItem(%struct._object* %59, %struct._object* %60)
  %cmp65 = icmp ne i32 %call64, 0
  br i1 %cmp65, label %if.then.67, label %if.end.68

if.then.67:                                       ; preds = %if.then.63
  call void @PyErr_Clear()
  br label %if.end.68

if.end.68:                                        ; preds = %if.then.67, %if.then.63
  br label %if.end.69

if.end.69:                                        ; preds = %if.end.68, %land.lhs.true, %sw.bb.44
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.then, %if.end.69, %if.end.43, %if.end.26
  br label %if.end.70

if.end.70:                                        ; preds = %sw.epilog, %entry
  %61 = load %struct._object*, %struct._object** %v.addr, align 8
  store %struct._object* %61, %struct._object** %res, align 8
  %62 = load %struct._object*, %struct._object** %w.addr, align 8
  call void @PyUnicode_Append(%struct._object** %res, %struct._object* %62)
  %63 = load %struct._object*, %struct._object** %res, align 8
  ret %struct._object* %63
}

declare %struct._object* @PyNumber_Add(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Subtract(%struct._object*, %struct._object*) #2

declare %struct._object* @PyObject_GetItem(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Lshift(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Rshift(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_And(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Xor(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_Or(%struct._object*, %struct._object*) #2

declare i32 @PyList_Append(%struct._object*, %struct._object*) #2

declare i32 @PySet_Add(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlacePower(%struct._object*, %struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceMultiply(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceTrueDivide(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceFloorDivide(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceRemainder(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceAdd(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceSubtract(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceLshift(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceRshift(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceAnd(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceXor(%struct._object*, %struct._object*) #2

declare %struct._object* @PyNumber_InPlaceOr(%struct._object*, %struct._object*) #2

declare i32 @PyObject_SetItem(%struct._object*, %struct._object*, %struct._object*) #2

declare i32 @PyObject_DelItem(%struct._object*, %struct._object*) #2

declare %struct._object* @_PySys_GetObjectId(%struct._Py_Identifier*) #2

declare void @PyErr_SetString(%struct._object*, i8*) #2

declare %struct._object* @PyObject_CallFunctionObjArgs(%struct._object*, ...) #2

; Function Attrs: nounwind uwtable
define internal i32 @do_raise(%struct._object* %exc, %struct._object* %cause) #0 {
entry:
  %retval = alloca i32, align 4
  %exc.addr = alloca %struct._object*, align 8
  %cause.addr = alloca %struct._object*, align 8
  %type = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %tb = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_xincref_tmp13 = alloca %struct._object*, align 8
  %_py_xincref_tmp22 = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %fixed_cause = alloca %struct._object*, align 8
  %_py_decref_tmp83 = alloca %struct._object*, align 8
  %_py_decref_tmp104 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp125 = alloca %struct._object*, align 8
  %_py_xdecref_tmp139 = alloca %struct._object*, align 8
  %_py_decref_tmp144 = alloca %struct._object*, align 8
  %_py_xdecref_tmp158 = alloca %struct._object*, align 8
  %_py_decref_tmp163 = alloca %struct._object*, align 8
  %_py_xdecref_tmp177 = alloca %struct._object*, align 8
  %_py_decref_tmp182 = alloca %struct._object*, align 8
  %_py_xdecref_tmp196 = alloca %struct._object*, align 8
  %_py_decref_tmp201 = alloca %struct._object*, align 8
  store %struct._object* %exc, %struct._object** %exc.addr, align 8
  store %struct._object* %cause, %struct._object** %cause.addr, align 8
  store %struct._object* null, %struct._object** %type, align 8
  store %struct._object* null, %struct._object** %value, align 8
  %0 = load %struct._object*, %struct._object** %exc.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end.29

if.then:                                          ; preds = %entry
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %1, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %2 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %3 = bitcast %struct._Py_atomic_address* %2 to i8*
  %4 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3, i32 %4)
  %5 = load i32, i32* %order, align 4
  switch i32 %5, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then, %if.then, %if.then
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %6 = load i8**, i8*** %volatile_data, align 8
  %7 = load volatile i8*, i8** %6, align 8
  store i8* %7, i8** %result, align 8
  %8 = load i32, i32* %order, align 4
  switch i32 %8, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %9 = load i8*, i8** %result, align 8
  store i8* %9, i8** %tmp
  %10 = load i8*, i8** %tmp
  %11 = bitcast i8* %10 to %struct._ts*
  store %struct._ts* %11, %struct._ts** %tstate, align 8
  %12 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_type = getelementptr inbounds %struct._ts, %struct._ts* %12, i32 0, i32 16
  %13 = load %struct._object*, %struct._object** %exc_type, align 8
  store %struct._object* %13, %struct._object** %type, align 8
  %14 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_value = getelementptr inbounds %struct._ts, %struct._ts* %14, i32 0, i32 17
  %15 = load %struct._object*, %struct._object** %exc_value, align 8
  store %struct._object* %15, %struct._object** %value, align 8
  %16 = load %struct._ts*, %struct._ts** %tstate, align 8
  %exc_traceback = getelementptr inbounds %struct._ts, %struct._ts* %16, i32 0, i32 18
  %17 = load %struct._object*, %struct._object** %exc_traceback, align 8
  store %struct._object* %17, %struct._object** %tb, align 8
  %18 = load %struct._object*, %struct._object** %type, align 8
  %cmp5 = icmp eq %struct._object* %18, @_Py_NoneStruct
  br i1 %cmp5, label %if.then.6, label %if.end

if.then.6:                                        ; preds = %sw.epilog.3
  %19 = load %struct._object*, %struct._object** @PyExc_RuntimeError, align 8
  call void @PyErr_SetString(%struct._object* %19, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.76, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %sw.epilog.3
  br label %do.body

do.body:                                          ; preds = %if.end
  %20 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %20, %struct._object** %_py_xincref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp8 = icmp ne %struct._object* %21, null
  br i1 %cmp8, label %if.then.9, label %if.end.10

if.then.9:                                        ; preds = %do.body
  %22 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 0
  %23 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %23, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.10

if.end.10:                                        ; preds = %if.then.9, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end.10
  br label %do.body.11

do.body.11:                                       ; preds = %do.end
  %24 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %24, %struct._object** %_py_xincref_tmp13, align 8
  %25 = load %struct._object*, %struct._object** %_py_xincref_tmp13, align 8
  %cmp14 = icmp ne %struct._object* %25, null
  br i1 %cmp14, label %if.then.15, label %if.end.18

if.then.15:                                       ; preds = %do.body.11
  %26 = load %struct._object*, %struct._object** %_py_xincref_tmp13, align 8
  %ob_refcnt16 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 0
  %27 = load i64, i64* %ob_refcnt16, align 8
  %inc17 = add i64 %27, 1
  store i64 %inc17, i64* %ob_refcnt16, align 8
  br label %if.end.18

if.end.18:                                        ; preds = %if.then.15, %do.body.11
  br label %do.end.19

do.end.19:                                        ; preds = %if.end.18
  br label %do.body.20

do.body.20:                                       ; preds = %do.end.19
  %28 = load %struct._object*, %struct._object** %tb, align 8
  store %struct._object* %28, %struct._object** %_py_xincref_tmp22, align 8
  %29 = load %struct._object*, %struct._object** %_py_xincref_tmp22, align 8
  %cmp23 = icmp ne %struct._object* %29, null
  br i1 %cmp23, label %if.then.24, label %if.end.27

if.then.24:                                       ; preds = %do.body.20
  %30 = load %struct._object*, %struct._object** %_py_xincref_tmp22, align 8
  %ob_refcnt25 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt25, align 8
  %inc26 = add i64 %31, 1
  store i64 %inc26, i64* %ob_refcnt25, align 8
  br label %if.end.27

if.end.27:                                        ; preds = %if.then.24, %do.body.20
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  %32 = load %struct._object*, %struct._object** %type, align 8
  %33 = load %struct._object*, %struct._object** %value, align 8
  %34 = load %struct._object*, %struct._object** %tb, align 8
  call void @PyErr_Restore(%struct._object* %32, %struct._object* %33, %struct._object* %34)
  store i32 1, i32* %retval
  br label %return

if.end.29:                                        ; preds = %entry
  %35 = load %struct._object*, %struct._object** %exc.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %35, i32 0, i32 1
  %36 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %36, i32 0, i32 19
  %37 = load i64, i64* %tp_flags, align 8
  %and = and i64 %37, 2147483648
  %cmp30 = icmp ne i64 %and, 0
  br i1 %cmp30, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end.29
  %38 = load %struct._object*, %struct._object** %exc.addr, align 8
  %39 = bitcast %struct._object* %38 to %struct._typeobject*
  %tp_flags31 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 19
  %40 = load i64, i64* %tp_flags31, align 8
  %and32 = and i64 %40, 1073741824
  %cmp33 = icmp ne i64 %and32, 0
  br i1 %cmp33, label %if.then.34, label %if.else

if.then.34:                                       ; preds = %land.lhs.true
  %41 = load %struct._object*, %struct._object** %exc.addr, align 8
  store %struct._object* %41, %struct._object** %type, align 8
  %42 = load %struct._object*, %struct._object** %exc.addr, align 8
  %call = call %struct._object* @PyObject_CallObject(%struct._object* %42, %struct._object* null)
  store %struct._object* %call, %struct._object** %value, align 8
  %43 = load %struct._object*, %struct._object** %value, align 8
  %cmp35 = icmp eq %struct._object* %43, null
  br i1 %cmp35, label %if.then.36, label %if.end.37

if.then.36:                                       ; preds = %if.then.34
  br label %raise_error

if.end.37:                                        ; preds = %if.then.34
  %44 = load %struct._object*, %struct._object** %value, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 1
  %45 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_flags39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %45, i32 0, i32 19
  %46 = load i64, i64* %tp_flags39, align 8
  %and40 = and i64 %46, 1073741824
  %cmp41 = icmp ne i64 %and40, 0
  br i1 %cmp41, label %if.end.45, label %if.then.42

if.then.42:                                       ; preds = %if.end.37
  %47 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %48 = load %struct._object*, %struct._object** %type, align 8
  %49 = load %struct._object*, %struct._object** %value, align 8
  %ob_type43 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 1
  %50 = load %struct._typeobject*, %struct._typeobject** %ob_type43, align 8
  %call44 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %47, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.77, i32 0, i32 0), %struct._object* %48, %struct._typeobject* %50)
  br label %raise_error

if.end.45:                                        ; preds = %if.end.37
  br label %if.end.65

if.else:                                          ; preds = %land.lhs.true, %if.end.29
  %51 = load %struct._object*, %struct._object** %exc.addr, align 8
  %ob_type46 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type46, align 8
  %tp_flags47 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 19
  %53 = load i64, i64* %tp_flags47, align 8
  %and48 = and i64 %53, 1073741824
  %cmp49 = icmp ne i64 %and48, 0
  br i1 %cmp49, label %if.then.50, label %if.else.54

if.then.50:                                       ; preds = %if.else
  %54 = load %struct._object*, %struct._object** %exc.addr, align 8
  store %struct._object* %54, %struct._object** %value, align 8
  %55 = load %struct._object*, %struct._object** %exc.addr, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %57 = bitcast %struct._typeobject* %56 to %struct._object*
  store %struct._object* %57, %struct._object** %type, align 8
  %58 = load %struct._object*, %struct._object** %type, align 8
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 0
  %59 = load i64, i64* %ob_refcnt52, align 8
  %inc53 = add i64 %59, 1
  store i64 %inc53, i64* %ob_refcnt52, align 8
  br label %if.end.64

if.else.54:                                       ; preds = %if.else
  br label %do.body.55

do.body.55:                                       ; preds = %if.else.54
  %60 = load %struct._object*, %struct._object** %exc.addr, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt57, align 8
  %dec = add i64 %62, -1
  store i64 %dec, i64* %ob_refcnt57, align 8
  %cmp58 = icmp ne i64 %dec, 0
  br i1 %cmp58, label %if.then.59, label %if.else.60

if.then.59:                                       ; preds = %do.body.55
  br label %if.end.62

if.else.60:                                       ; preds = %do.body.55
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type61 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type61, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %65(%struct._object* %66)
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.60, %if.then.59
  br label %do.end.63

do.end.63:                                        ; preds = %if.end.62
  %67 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %67, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.78, i32 0, i32 0))
  br label %raise_error

if.end.64:                                        ; preds = %if.then.50
  br label %if.end.65

if.end.65:                                        ; preds = %if.end.64, %if.end.45
  %68 = load %struct._object*, %struct._object** %cause.addr, align 8
  %tobool = icmp ne %struct._object* %68, null
  br i1 %tobool, label %if.then.66, label %if.end.118

if.then.66:                                       ; preds = %if.end.65
  %69 = load %struct._object*, %struct._object** %cause.addr, align 8
  %ob_type68 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 1
  %70 = load %struct._typeobject*, %struct._typeobject** %ob_type68, align 8
  %tp_flags69 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %70, i32 0, i32 19
  %71 = load i64, i64* %tp_flags69, align 8
  %and70 = and i64 %71, 2147483648
  %cmp71 = icmp ne i64 %and70, 0
  br i1 %cmp71, label %land.lhs.true.72, label %if.else.93

land.lhs.true.72:                                 ; preds = %if.then.66
  %72 = load %struct._object*, %struct._object** %cause.addr, align 8
  %73 = bitcast %struct._object* %72 to %struct._typeobject*
  %tp_flags73 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 19
  %74 = load i64, i64* %tp_flags73, align 8
  %and74 = and i64 %74, 1073741824
  %cmp75 = icmp ne i64 %and74, 0
  br i1 %cmp75, label %if.then.76, label %if.else.93

if.then.76:                                       ; preds = %land.lhs.true.72
  %75 = load %struct._object*, %struct._object** %cause.addr, align 8
  %call77 = call %struct._object* @PyObject_CallObject(%struct._object* %75, %struct._object* null)
  store %struct._object* %call77, %struct._object** %fixed_cause, align 8
  %76 = load %struct._object*, %struct._object** %fixed_cause, align 8
  %cmp78 = icmp eq %struct._object* %76, null
  br i1 %cmp78, label %if.then.79, label %if.end.80

if.then.79:                                       ; preds = %if.then.76
  br label %raise_error

if.end.80:                                        ; preds = %if.then.76
  br label %do.body.81

do.body.81:                                       ; preds = %if.end.80
  %77 = load %struct._object*, %struct._object** %cause.addr, align 8
  store %struct._object* %77, %struct._object** %_py_decref_tmp83, align 8
  %78 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_refcnt84 = getelementptr inbounds %struct._object, %struct._object* %78, i32 0, i32 0
  %79 = load i64, i64* %ob_refcnt84, align 8
  %dec85 = add i64 %79, -1
  store i64 %dec85, i64* %ob_refcnt84, align 8
  %cmp86 = icmp ne i64 %dec85, 0
  br i1 %cmp86, label %if.then.87, label %if.else.88

if.then.87:                                       ; preds = %do.body.81
  br label %if.end.91

if.else.88:                                       ; preds = %do.body.81
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_type89 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 1
  %81 = load %struct._typeobject*, %struct._typeobject** %ob_type89, align 8
  %tp_dealloc90 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %81, i32 0, i32 4
  %82 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc90, align 8
  %83 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  call void %82(%struct._object* %83)
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.88, %if.then.87
  br label %do.end.92

do.end.92:                                        ; preds = %if.end.91
  br label %if.end.117

if.else.93:                                       ; preds = %land.lhs.true.72, %if.then.66
  %84 = load %struct._object*, %struct._object** %cause.addr, align 8
  %ob_type94 = getelementptr inbounds %struct._object, %struct._object* %84, i32 0, i32 1
  %85 = load %struct._typeobject*, %struct._typeobject** %ob_type94, align 8
  %tp_flags95 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %85, i32 0, i32 19
  %86 = load i64, i64* %tp_flags95, align 8
  %and96 = and i64 %86, 1073741824
  %cmp97 = icmp ne i64 %and96, 0
  br i1 %cmp97, label %if.then.98, label %if.else.99

if.then.98:                                       ; preds = %if.else.93
  %87 = load %struct._object*, %struct._object** %cause.addr, align 8
  store %struct._object* %87, %struct._object** %fixed_cause, align 8
  br label %if.end.116

if.else.99:                                       ; preds = %if.else.93
  %88 = load %struct._object*, %struct._object** %cause.addr, align 8
  %cmp100 = icmp eq %struct._object* %88, @_Py_NoneStruct
  br i1 %cmp100, label %if.then.101, label %if.else.114

if.then.101:                                      ; preds = %if.else.99
  br label %do.body.102

do.body.102:                                      ; preds = %if.then.101
  %89 = load %struct._object*, %struct._object** %cause.addr, align 8
  store %struct._object* %89, %struct._object** %_py_decref_tmp104, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_refcnt105 = getelementptr inbounds %struct._object, %struct._object* %90, i32 0, i32 0
  %91 = load i64, i64* %ob_refcnt105, align 8
  %dec106 = add i64 %91, -1
  store i64 %dec106, i64* %ob_refcnt105, align 8
  %cmp107 = icmp ne i64 %dec106, 0
  br i1 %cmp107, label %if.then.108, label %if.else.109

if.then.108:                                      ; preds = %do.body.102
  br label %if.end.112

if.else.109:                                      ; preds = %do.body.102
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  %ob_type110 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 1
  %93 = load %struct._typeobject*, %struct._typeobject** %ob_type110, align 8
  %tp_dealloc111 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %93, i32 0, i32 4
  %94 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc111, align 8
  %95 = load %struct._object*, %struct._object** %_py_decref_tmp104, align 8
  call void %94(%struct._object* %95)
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.109, %if.then.108
  br label %do.end.113

do.end.113:                                       ; preds = %if.end.112
  store %struct._object* null, %struct._object** %fixed_cause, align 8
  br label %if.end.115

if.else.114:                                      ; preds = %if.else.99
  %96 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %96, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.79, i32 0, i32 0))
  br label %raise_error

if.end.115:                                       ; preds = %do.end.113
  br label %if.end.116

if.end.116:                                       ; preds = %if.end.115, %if.then.98
  br label %if.end.117

if.end.117:                                       ; preds = %if.end.116, %do.end.92
  %97 = load %struct._object*, %struct._object** %value, align 8
  %98 = load %struct._object*, %struct._object** %fixed_cause, align 8
  call void @PyException_SetCause(%struct._object* %97, %struct._object* %98)
  br label %if.end.118

if.end.118:                                       ; preds = %if.end.117, %if.end.65
  %99 = load %struct._object*, %struct._object** %type, align 8
  %100 = load %struct._object*, %struct._object** %value, align 8
  call void @PyErr_SetObject(%struct._object* %99, %struct._object* %100)
  br label %do.body.119

do.body.119:                                      ; preds = %if.end.118
  %101 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %101, %struct._object** %_py_xdecref_tmp, align 8
  %102 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp121 = icmp ne %struct._object* %102, null
  br i1 %cmp121, label %if.then.122, label %if.end.135

if.then.122:                                      ; preds = %do.body.119
  br label %do.body.123

do.body.123:                                      ; preds = %if.then.122
  %103 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %103, %struct._object** %_py_decref_tmp125, align 8
  %104 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_refcnt126 = getelementptr inbounds %struct._object, %struct._object* %104, i32 0, i32 0
  %105 = load i64, i64* %ob_refcnt126, align 8
  %dec127 = add i64 %105, -1
  store i64 %dec127, i64* %ob_refcnt126, align 8
  %cmp128 = icmp ne i64 %dec127, 0
  br i1 %cmp128, label %if.then.129, label %if.else.130

if.then.129:                                      ; preds = %do.body.123
  br label %if.end.133

if.else.130:                                      ; preds = %do.body.123
  %106 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  %ob_type131 = getelementptr inbounds %struct._object, %struct._object* %106, i32 0, i32 1
  %107 = load %struct._typeobject*, %struct._typeobject** %ob_type131, align 8
  %tp_dealloc132 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %107, i32 0, i32 4
  %108 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc132, align 8
  %109 = load %struct._object*, %struct._object** %_py_decref_tmp125, align 8
  call void %108(%struct._object* %109)
  br label %if.end.133

if.end.133:                                       ; preds = %if.else.130, %if.then.129
  br label %do.end.134

do.end.134:                                       ; preds = %if.end.133
  br label %if.end.135

if.end.135:                                       ; preds = %do.end.134, %do.body.119
  br label %do.end.136

do.end.136:                                       ; preds = %if.end.135
  br label %do.body.137

do.body.137:                                      ; preds = %do.end.136
  %110 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %110, %struct._object** %_py_xdecref_tmp139, align 8
  %111 = load %struct._object*, %struct._object** %_py_xdecref_tmp139, align 8
  %cmp140 = icmp ne %struct._object* %111, null
  br i1 %cmp140, label %if.then.141, label %if.end.154

if.then.141:                                      ; preds = %do.body.137
  br label %do.body.142

do.body.142:                                      ; preds = %if.then.141
  %112 = load %struct._object*, %struct._object** %_py_xdecref_tmp139, align 8
  store %struct._object* %112, %struct._object** %_py_decref_tmp144, align 8
  %113 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8
  %ob_refcnt145 = getelementptr inbounds %struct._object, %struct._object* %113, i32 0, i32 0
  %114 = load i64, i64* %ob_refcnt145, align 8
  %dec146 = add i64 %114, -1
  store i64 %dec146, i64* %ob_refcnt145, align 8
  %cmp147 = icmp ne i64 %dec146, 0
  br i1 %cmp147, label %if.then.148, label %if.else.149

if.then.148:                                      ; preds = %do.body.142
  br label %if.end.152

if.else.149:                                      ; preds = %do.body.142
  %115 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8
  %ob_type150 = getelementptr inbounds %struct._object, %struct._object* %115, i32 0, i32 1
  %116 = load %struct._typeobject*, %struct._typeobject** %ob_type150, align 8
  %tp_dealloc151 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %116, i32 0, i32 4
  %117 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc151, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp144, align 8
  call void %117(%struct._object* %118)
  br label %if.end.152

if.end.152:                                       ; preds = %if.else.149, %if.then.148
  br label %do.end.153

do.end.153:                                       ; preds = %if.end.152
  br label %if.end.154

if.end.154:                                       ; preds = %do.end.153, %do.body.137
  br label %do.end.155

do.end.155:                                       ; preds = %if.end.154
  store i32 0, i32* %retval
  br label %return

raise_error:                                      ; preds = %if.else.114, %if.then.79, %do.end.63, %if.then.42, %if.then.36
  br label %do.body.156

do.body.156:                                      ; preds = %raise_error
  %119 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %119, %struct._object** %_py_xdecref_tmp158, align 8
  %120 = load %struct._object*, %struct._object** %_py_xdecref_tmp158, align 8
  %cmp159 = icmp ne %struct._object* %120, null
  br i1 %cmp159, label %if.then.160, label %if.end.173

if.then.160:                                      ; preds = %do.body.156
  br label %do.body.161

do.body.161:                                      ; preds = %if.then.160
  %121 = load %struct._object*, %struct._object** %_py_xdecref_tmp158, align 8
  store %struct._object* %121, %struct._object** %_py_decref_tmp163, align 8
  %122 = load %struct._object*, %struct._object** %_py_decref_tmp163, align 8
  %ob_refcnt164 = getelementptr inbounds %struct._object, %struct._object* %122, i32 0, i32 0
  %123 = load i64, i64* %ob_refcnt164, align 8
  %dec165 = add i64 %123, -1
  store i64 %dec165, i64* %ob_refcnt164, align 8
  %cmp166 = icmp ne i64 %dec165, 0
  br i1 %cmp166, label %if.then.167, label %if.else.168

if.then.167:                                      ; preds = %do.body.161
  br label %if.end.171

if.else.168:                                      ; preds = %do.body.161
  %124 = load %struct._object*, %struct._object** %_py_decref_tmp163, align 8
  %ob_type169 = getelementptr inbounds %struct._object, %struct._object* %124, i32 0, i32 1
  %125 = load %struct._typeobject*, %struct._typeobject** %ob_type169, align 8
  %tp_dealloc170 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %125, i32 0, i32 4
  %126 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc170, align 8
  %127 = load %struct._object*, %struct._object** %_py_decref_tmp163, align 8
  call void %126(%struct._object* %127)
  br label %if.end.171

if.end.171:                                       ; preds = %if.else.168, %if.then.167
  br label %do.end.172

do.end.172:                                       ; preds = %if.end.171
  br label %if.end.173

if.end.173:                                       ; preds = %do.end.172, %do.body.156
  br label %do.end.174

do.end.174:                                       ; preds = %if.end.173
  br label %do.body.175

do.body.175:                                      ; preds = %do.end.174
  %128 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %128, %struct._object** %_py_xdecref_tmp177, align 8
  %129 = load %struct._object*, %struct._object** %_py_xdecref_tmp177, align 8
  %cmp178 = icmp ne %struct._object* %129, null
  br i1 %cmp178, label %if.then.179, label %if.end.192

if.then.179:                                      ; preds = %do.body.175
  br label %do.body.180

do.body.180:                                      ; preds = %if.then.179
  %130 = load %struct._object*, %struct._object** %_py_xdecref_tmp177, align 8
  store %struct._object* %130, %struct._object** %_py_decref_tmp182, align 8
  %131 = load %struct._object*, %struct._object** %_py_decref_tmp182, align 8
  %ob_refcnt183 = getelementptr inbounds %struct._object, %struct._object* %131, i32 0, i32 0
  %132 = load i64, i64* %ob_refcnt183, align 8
  %dec184 = add i64 %132, -1
  store i64 %dec184, i64* %ob_refcnt183, align 8
  %cmp185 = icmp ne i64 %dec184, 0
  br i1 %cmp185, label %if.then.186, label %if.else.187

if.then.186:                                      ; preds = %do.body.180
  br label %if.end.190

if.else.187:                                      ; preds = %do.body.180
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp182, align 8
  %ob_type188 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 1
  %134 = load %struct._typeobject*, %struct._typeobject** %ob_type188, align 8
  %tp_dealloc189 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %134, i32 0, i32 4
  %135 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc189, align 8
  %136 = load %struct._object*, %struct._object** %_py_decref_tmp182, align 8
  call void %135(%struct._object* %136)
  br label %if.end.190

if.end.190:                                       ; preds = %if.else.187, %if.then.186
  br label %do.end.191

do.end.191:                                       ; preds = %if.end.190
  br label %if.end.192

if.end.192:                                       ; preds = %do.end.191, %do.body.175
  br label %do.end.193

do.end.193:                                       ; preds = %if.end.192
  br label %do.body.194

do.body.194:                                      ; preds = %do.end.193
  %137 = load %struct._object*, %struct._object** %cause.addr, align 8
  store %struct._object* %137, %struct._object** %_py_xdecref_tmp196, align 8
  %138 = load %struct._object*, %struct._object** %_py_xdecref_tmp196, align 8
  %cmp197 = icmp ne %struct._object* %138, null
  br i1 %cmp197, label %if.then.198, label %if.end.211

if.then.198:                                      ; preds = %do.body.194
  br label %do.body.199

do.body.199:                                      ; preds = %if.then.198
  %139 = load %struct._object*, %struct._object** %_py_xdecref_tmp196, align 8
  store %struct._object* %139, %struct._object** %_py_decref_tmp201, align 8
  %140 = load %struct._object*, %struct._object** %_py_decref_tmp201, align 8
  %ob_refcnt202 = getelementptr inbounds %struct._object, %struct._object* %140, i32 0, i32 0
  %141 = load i64, i64* %ob_refcnt202, align 8
  %dec203 = add i64 %141, -1
  store i64 %dec203, i64* %ob_refcnt202, align 8
  %cmp204 = icmp ne i64 %dec203, 0
  br i1 %cmp204, label %if.then.205, label %if.else.206

if.then.205:                                      ; preds = %do.body.199
  br label %if.end.209

if.else.206:                                      ; preds = %do.body.199
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp201, align 8
  %ob_type207 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 1
  %143 = load %struct._typeobject*, %struct._typeobject** %ob_type207, align 8
  %tp_dealloc208 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %143, i32 0, i32 4
  %144 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc208, align 8
  %145 = load %struct._object*, %struct._object** %_py_decref_tmp201, align 8
  call void %144(%struct._object* %145)
  br label %if.end.209

if.end.209:                                       ; preds = %if.else.206, %if.then.205
  br label %do.end.210

do.end.210:                                       ; preds = %if.end.209
  br label %if.end.211

if.end.211:                                       ; preds = %do.end.210, %do.body.194
  br label %do.end.212

do.end.212:                                       ; preds = %if.end.211
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.212, %do.end.155, %do.end.28, %if.then.6
  %146 = load i32, i32* %retval
  ret i32 %146
}

declare %struct._object* @_PyGen_Send(%struct.PyGenObject*, %struct._object*) #2

declare %struct._object* @_PyObject_CallMethodIdObjArgs(%struct._object*, %struct._Py_Identifier*, ...) #2

declare i32 @PyErr_ExceptionMatches(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal void @call_exc_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, %struct._object* %self, %struct._ts* %tstate, %struct._frame* %f) #0 {
entry:
  %func.addr = alloca i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, align 8
  %self.addr = alloca %struct._object*, align 8
  %tstate.addr = alloca %struct._ts*, align 8
  %f.addr = alloca %struct._frame*, align 8
  %type = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %traceback = alloca %struct._object*, align 8
  %orig_traceback = alloca %struct._object*, align 8
  %arg = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_xdecref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  %_py_xdecref_tmp47 = alloca %struct._object*, align 8
  %_py_decref_tmp51 = alloca %struct._object*, align 8
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  store %struct._object* %self, %struct._object** %self.addr, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._frame* %f, %struct._frame** %f.addr, align 8
  call void @PyErr_Fetch(%struct._object** %type, %struct._object** %value, %struct._object** %orig_traceback)
  %0 = load %struct._object*, %struct._object** %value, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* @_Py_NoneStruct, %struct._object** %value, align 8
  %1 = load %struct._object*, %struct._object** %value, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 0
  %2 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %2, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  call void @PyErr_NormalizeException(%struct._object** %type, %struct._object** %value, %struct._object** %orig_traceback)
  %3 = load %struct._object*, %struct._object** %orig_traceback, align 8
  %cmp1 = icmp ne %struct._object* %3, null
  br i1 %cmp1, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end
  %4 = load %struct._object*, %struct._object** %orig_traceback, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ %4, %cond.true ], [ @_Py_NoneStruct, %cond.false ]
  store %struct._object* %cond, %struct._object** %traceback, align 8
  %5 = load %struct._object*, %struct._object** %type, align 8
  %6 = load %struct._object*, %struct._object** %value, align 8
  %7 = load %struct._object*, %struct._object** %traceback, align 8
  %call = call %struct._object* (i64, ...) @PyTuple_Pack(i64 3, %struct._object* %5, %struct._object* %6, %struct._object* %7)
  store %struct._object* %call, %struct._object** %arg, align 8
  %8 = load %struct._object*, %struct._object** %arg, align 8
  %cmp2 = icmp eq %struct._object* %8, null
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %cond.end
  %9 = load %struct._object*, %struct._object** %type, align 8
  %10 = load %struct._object*, %struct._object** %value, align 8
  %11 = load %struct._object*, %struct._object** %orig_traceback, align 8
  call void @PyErr_Restore(%struct._object* %9, %struct._object* %10, %struct._object* %11)
  br label %if.end.63

if.end.4:                                         ; preds = %cond.end
  %12 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %13 = load %struct._object*, %struct._object** %self.addr, align 8
  %14 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %15 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %16 = load %struct._object*, %struct._object** %arg, align 8
  %call5 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %12, %struct._object* %13, %struct._ts* %14, %struct._frame* %15, i32 1, %struct._object* %16)
  store i32 %call5, i32* %err, align 4
  br label %do.body

do.body:                                          ; preds = %if.end.4
  %17 = load %struct._object*, %struct._object** %arg, align 8
  store %struct._object* %17, %struct._object** %_py_decref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt6 = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 0
  %19 = load i64, i64* %ob_refcnt6, align 8
  %dec = add i64 %19, -1
  store i64 %dec, i64* %ob_refcnt6, align 8
  %cmp7 = icmp ne i64 %dec, 0
  br i1 %cmp7, label %if.then.8, label %if.else

if.then.8:                                        ; preds = %do.body
  br label %if.end.9

if.else:                                          ; preds = %do.body
  %20 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %20, i32 0, i32 1
  %21 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %21, i32 0, i32 4
  %22 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %22(%struct._object* %23)
  br label %if.end.9

if.end.9:                                         ; preds = %if.else, %if.then.8
  br label %do.end

do.end:                                           ; preds = %if.end.9
  %24 = load i32, i32* %err, align 4
  %cmp10 = icmp eq i32 %24, 0
  br i1 %cmp10, label %if.then.11, label %if.else.12

if.then.11:                                       ; preds = %do.end
  %25 = load %struct._object*, %struct._object** %type, align 8
  %26 = load %struct._object*, %struct._object** %value, align 8
  %27 = load %struct._object*, %struct._object** %orig_traceback, align 8
  call void @PyErr_Restore(%struct._object* %25, %struct._object* %26, %struct._object* %27)
  br label %if.end.63

if.else.12:                                       ; preds = %do.end
  br label %do.body.13

do.body.13:                                       ; preds = %if.else.12
  %28 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %28, %struct._object** %_py_xdecref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp14 = icmp ne %struct._object* %29, null
  br i1 %cmp14, label %if.then.15, label %if.end.27

if.then.15:                                       ; preds = %do.body.13
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  %30 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp17, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %32, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %35(%struct._object* %36)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %if.end.27

if.end.27:                                        ; preds = %do.end.26, %do.body.13
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  br label %do.body.29

do.body.29:                                       ; preds = %do.end.28
  %37 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %37, %struct._object** %_py_xdecref_tmp30, align 8
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp30, align 8
  %cmp31 = icmp ne %struct._object* %38, null
  br i1 %cmp31, label %if.then.32, label %if.end.44

if.then.32:                                       ; preds = %do.body.29
  br label %do.body.33

do.body.33:                                       ; preds = %if.then.32
  %39 = load %struct._object*, %struct._object** %_py_xdecref_tmp30, align 8
  store %struct._object* %39, %struct._object** %_py_decref_tmp34, align 8
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 0
  %41 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %41, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %42 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %42, i32 0, i32 1
  %43 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %43, i32 0, i32 4
  %44 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %44(%struct._object* %45)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  br label %if.end.44

if.end.44:                                        ; preds = %do.end.43, %do.body.29
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  br label %do.body.46

do.body.46:                                       ; preds = %do.end.45
  %46 = load %struct._object*, %struct._object** %orig_traceback, align 8
  store %struct._object* %46, %struct._object** %_py_xdecref_tmp47, align 8
  %47 = load %struct._object*, %struct._object** %_py_xdecref_tmp47, align 8
  %cmp48 = icmp ne %struct._object* %47, null
  br i1 %cmp48, label %if.then.49, label %if.end.61

if.then.49:                                       ; preds = %do.body.46
  br label %do.body.50

do.body.50:                                       ; preds = %if.then.49
  %48 = load %struct._object*, %struct._object** %_py_xdecref_tmp47, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp51, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_refcnt52 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt52, align 8
  %dec53 = add i64 %50, -1
  store i64 %dec53, i64* %ob_refcnt52, align 8
  %cmp54 = icmp ne i64 %dec53, 0
  br i1 %cmp54, label %if.then.55, label %if.else.56

if.then.55:                                       ; preds = %do.body.50
  br label %if.end.59

if.else.56:                                       ; preds = %do.body.50
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  %ob_type57 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type57, align 8
  %tp_dealloc58 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc58, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp51, align 8
  call void %53(%struct._object* %54)
  br label %if.end.59

if.end.59:                                        ; preds = %if.else.56, %if.then.55
  br label %do.end.60

do.end.60:                                        ; preds = %if.end.59
  br label %if.end.61

if.end.61:                                        ; preds = %do.end.60, %do.body.46
  br label %do.end.62

do.end.62:                                        ; preds = %if.end.61
  br label %if.end.63

if.end.63:                                        ; preds = %if.then.3, %do.end.62, %if.then.11
  ret void
}

declare i32 @_PyGen_FetchStopIterationValue(%struct._object**) #2

declare %struct.PyTryBlock* @PyFrame_BlockPop(%struct._frame*) #2

declare i64 @PyLong_AsLong(%struct._object*) #2

declare void @PyErr_Restore(%struct._object*, %struct._object*, %struct._object*) #2

declare %struct._object* @_PyDict_GetItemId(%struct._object*, %struct._Py_Identifier*) #2

declare %struct._object* @_PyUnicode_FromId(%struct._Py_Identifier*) #2

declare i32 @PyDict_SetItem(%struct._object*, %struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal i32 @unpack_iterable(%struct._object* %v, i32 %argcnt, i32 %argcntafter, %struct._object** %sp) #0 {
entry:
  %retval = alloca i32, align 4
  %v.addr = alloca %struct._object*, align 8
  %argcnt.addr = alloca i32, align 4
  %argcntafter.addr = alloca i32, align 4
  %sp.addr = alloca %struct._object**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ll = alloca i64, align 8
  %it = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %l = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp25 = alloca %struct._object*, align 8
  %_py_decref_tmp63 = alloca %struct._object*, align 8
  %_py_decref_tmp79 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp99 = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i32 %argcnt, i32* %argcnt.addr, align 4
  store i32 %argcntafter, i32* %argcntafter.addr, align 4
  store %struct._object** %sp, %struct._object*** %sp.addr, align 8
  store i32 0, i32* %i, align 4
  store i32 0, i32* %j, align 4
  store i64 0, i64* %ll, align 8
  store %struct._object* null, %struct._object** %l, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %call = call %struct._object* @PyObject_GetIter(%struct._object* %0)
  store %struct._object* %call, %struct._object** %it, align 8
  %1 = load %struct._object*, %struct._object** %it, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %Error

if.end:                                           ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load i32, i32* %i, align 4
  %3 = load i32, i32* %argcnt.addr, align 4
  %cmp1 = icmp slt i32 %2, %3
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %4 = load %struct._object*, %struct._object** %it, align 8
  %call2 = call %struct._object* @PyIter_Next(%struct._object* %4)
  store %struct._object* %call2, %struct._object** %w, align 8
  %5 = load %struct._object*, %struct._object** %w, align 8
  %cmp3 = icmp eq %struct._object* %5, null
  br i1 %cmp3, label %if.then.4, label %if.end.10

if.then.4:                                        ; preds = %for.body
  %call5 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call5, null
  br i1 %tobool, label %if.end.9, label %if.then.6

if.then.6:                                        ; preds = %if.then.4
  %6 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %7 = load i32, i32* %i, align 4
  %8 = load i32, i32* %i, align 4
  %cmp7 = icmp eq i32 %8, 1
  %cond = select i1 %cmp7, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i32 0, i32 0)
  %call8 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %6, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.80, i32 0, i32 0), i32 %7, i8* %cond)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then.6, %if.then.4
  br label %Error

if.end.10:                                        ; preds = %for.body
  %9 = load %struct._object*, %struct._object** %w, align 8
  %10 = load %struct._object**, %struct._object*** %sp.addr, align 8
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %10, i32 -1
  store %struct._object** %incdec.ptr, %struct._object*** %sp.addr, align 8
  store %struct._object* %9, %struct._object** %incdec.ptr, align 8
  br label %for.inc

for.inc:                                          ; preds = %if.end.10
  %11 = load i32, i32* %i, align 4
  %inc = add i32 %11, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %argcntafter.addr, align 4
  %cmp11 = icmp eq i32 %12, -1
  br i1 %cmp11, label %if.then.12, label %if.end.36

if.then.12:                                       ; preds = %for.end
  %13 = load %struct._object*, %struct._object** %it, align 8
  %call13 = call %struct._object* @PyIter_Next(%struct._object* %13)
  store %struct._object* %call13, %struct._object** %w, align 8
  %14 = load %struct._object*, %struct._object** %w, align 8
  %cmp14 = icmp eq %struct._object* %14, null
  br i1 %cmp14, label %if.then.15, label %if.end.23

if.then.15:                                       ; preds = %if.then.12
  %call16 = call %struct._object* @PyErr_Occurred()
  %tobool17 = icmp ne %struct._object* %call16, null
  br i1 %tobool17, label %if.then.18, label %if.end.19

if.then.18:                                       ; preds = %if.then.15
  br label %Error

if.end.19:                                        ; preds = %if.then.15
  br label %do.body

do.body:                                          ; preds = %if.end.19
  %15 = load %struct._object*, %struct._object** %it, align 8
  store %struct._object* %15, %struct._object** %_py_decref_tmp, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 0
  %17 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %17, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %do.body
  br label %if.end.22

if.else:                                          ; preds = %do.body
  %18 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %18, i32 0, i32 1
  %19 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %19, i32 0, i32 4
  %20 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %20(%struct._object* %21)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.22
  store i32 1, i32* %retval
  br label %return

if.end.23:                                        ; preds = %if.then.12
  br label %do.body.24

do.body.24:                                       ; preds = %if.end.23
  %22 = load %struct._object*, %struct._object** %w, align 8
  store %struct._object* %22, %struct._object** %_py_decref_tmp25, align 8
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_refcnt26 = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 0
  %24 = load i64, i64* %ob_refcnt26, align 8
  %dec27 = add i64 %24, -1
  store i64 %dec27, i64* %ob_refcnt26, align 8
  %cmp28 = icmp ne i64 %dec27, 0
  br i1 %cmp28, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body.24
  br label %if.end.33

if.else.30:                                       ; preds = %do.body.24
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 1
  %26 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_dealloc32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 4
  %27 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc32, align 8
  %28 = load %struct._object*, %struct._object** %_py_decref_tmp25, align 8
  call void %27(%struct._object* %28)
  br label %if.end.33

if.end.33:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end.34

do.end.34:                                        ; preds = %if.end.33
  %29 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %30 = load i32, i32* %argcnt.addr, align 4
  %call35 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %29, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.81, i32 0, i32 0), i32 %30)
  br label %Error

if.end.36:                                        ; preds = %for.end
  %31 = load %struct._object*, %struct._object** %it, align 8
  %call37 = call %struct._object* @PySequence_List(%struct._object* %31)
  store %struct._object* %call37, %struct._object** %l, align 8
  %32 = load %struct._object*, %struct._object** %l, align 8
  %cmp38 = icmp eq %struct._object* %32, null
  br i1 %cmp38, label %if.then.39, label %if.end.40

if.then.39:                                       ; preds = %if.end.36
  br label %Error

if.end.40:                                        ; preds = %if.end.36
  %33 = load %struct._object*, %struct._object** %l, align 8
  %34 = load %struct._object**, %struct._object*** %sp.addr, align 8
  %incdec.ptr41 = getelementptr %struct._object*, %struct._object** %34, i32 -1
  store %struct._object** %incdec.ptr41, %struct._object*** %sp.addr, align 8
  store %struct._object* %33, %struct._object** %incdec.ptr41, align 8
  %35 = load i32, i32* %i, align 4
  %inc42 = add i32 %35, 1
  store i32 %inc42, i32* %i, align 4
  %36 = load %struct._object*, %struct._object** %l, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %37, i32 0, i32 1
  %38 = load i64, i64* %ob_size, align 8
  store i64 %38, i64* %ll, align 8
  %39 = load i64, i64* %ll, align 8
  %40 = load i32, i32* %argcntafter.addr, align 4
  %conv = sext i32 %40 to i64
  %cmp43 = icmp slt i64 %39, %conv
  br i1 %cmp43, label %if.then.45, label %if.end.48

if.then.45:                                       ; preds = %if.end.40
  %41 = load %struct._object*, %struct._object** @PyExc_ValueError, align 8
  %42 = load i32, i32* %argcnt.addr, align 4
  %conv46 = sext i32 %42 to i64
  %43 = load i64, i64* %ll, align 8
  %add = add i64 %conv46, %43
  %call47 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %41, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.82, i32 0, i32 0), i64 %add)
  br label %Error

if.end.48:                                        ; preds = %if.end.40
  %44 = load i32, i32* %argcntafter.addr, align 4
  store i32 %44, i32* %j, align 4
  br label %for.cond.49

for.cond.49:                                      ; preds = %for.inc.55, %if.end.48
  %45 = load i32, i32* %j, align 4
  %cmp50 = icmp sgt i32 %45, 0
  br i1 %cmp50, label %for.body.52, label %for.end.58

for.body.52:                                      ; preds = %for.cond.49
  %46 = load i64, i64* %ll, align 8
  %47 = load i32, i32* %j, align 4
  %conv53 = sext i32 %47 to i64
  %sub = sub i64 %46, %conv53
  %48 = load %struct._object*, %struct._object** %l, align 8
  %49 = bitcast %struct._object* %48 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %49, i32 0, i32 1
  %50 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %50, i64 %sub
  %51 = load %struct._object*, %struct._object** %arrayidx, align 8
  %52 = load %struct._object**, %struct._object*** %sp.addr, align 8
  %incdec.ptr54 = getelementptr %struct._object*, %struct._object** %52, i32 -1
  store %struct._object** %incdec.ptr54, %struct._object*** %sp.addr, align 8
  store %struct._object* %51, %struct._object** %incdec.ptr54, align 8
  br label %for.inc.55

for.inc.55:                                       ; preds = %for.body.52
  %53 = load i32, i32* %j, align 4
  %dec56 = add i32 %53, -1
  store i32 %dec56, i32* %j, align 4
  %54 = load i32, i32* %i, align 4
  %inc57 = add i32 %54, 1
  store i32 %inc57, i32* %i, align 4
  br label %for.cond.49

for.end.58:                                       ; preds = %for.cond.49
  %55 = load i64, i64* %ll, align 8
  %56 = load i32, i32* %argcntafter.addr, align 4
  %conv59 = sext i32 %56 to i64
  %sub60 = sub i64 %55, %conv59
  %57 = load %struct._object*, %struct._object** %l, align 8
  %58 = bitcast %struct._object* %57 to %struct.PyVarObject*
  %ob_size61 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %58, i32 0, i32 1
  store i64 %sub60, i64* %ob_size61, align 8
  br label %do.body.62

do.body.62:                                       ; preds = %for.end.58
  %59 = load %struct._object*, %struct._object** %it, align 8
  store %struct._object* %59, %struct._object** %_py_decref_tmp63, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_refcnt64 = getelementptr inbounds %struct._object, %struct._object* %60, i32 0, i32 0
  %61 = load i64, i64* %ob_refcnt64, align 8
  %dec65 = add i64 %61, -1
  store i64 %dec65, i64* %ob_refcnt64, align 8
  %cmp66 = icmp ne i64 %dec65, 0
  br i1 %cmp66, label %if.then.68, label %if.else.69

if.then.68:                                       ; preds = %do.body.62
  br label %if.end.72

if.else.69:                                       ; preds = %do.body.62
  %62 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  %ob_type70 = getelementptr inbounds %struct._object, %struct._object* %62, i32 0, i32 1
  %63 = load %struct._typeobject*, %struct._typeobject** %ob_type70, align 8
  %tp_dealloc71 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %63, i32 0, i32 4
  %64 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc71, align 8
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp63, align 8
  call void %64(%struct._object* %65)
  br label %if.end.72

if.end.72:                                        ; preds = %if.else.69, %if.then.68
  br label %do.end.73

do.end.73:                                        ; preds = %if.end.72
  store i32 1, i32* %retval
  br label %return

Error:                                            ; preds = %if.then.45, %if.then.39, %do.end.34, %if.then.18, %if.end.9, %if.then
  br label %for.cond.74

for.cond.74:                                      ; preds = %for.inc.90, %Error
  %66 = load i32, i32* %i, align 4
  %cmp75 = icmp sgt i32 %66, 0
  br i1 %cmp75, label %for.body.77, label %for.end.93

for.body.77:                                      ; preds = %for.cond.74
  br label %do.body.78

do.body.78:                                       ; preds = %for.body.77
  %67 = load %struct._object**, %struct._object*** %sp.addr, align 8
  %68 = load %struct._object*, %struct._object** %67, align 8
  store %struct._object* %68, %struct._object** %_py_decref_tmp79, align 8
  %69 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_refcnt80 = getelementptr inbounds %struct._object, %struct._object* %69, i32 0, i32 0
  %70 = load i64, i64* %ob_refcnt80, align 8
  %dec81 = add i64 %70, -1
  store i64 %dec81, i64* %ob_refcnt80, align 8
  %cmp82 = icmp ne i64 %dec81, 0
  br i1 %cmp82, label %if.then.84, label %if.else.85

if.then.84:                                       ; preds = %do.body.78
  br label %if.end.88

if.else.85:                                       ; preds = %do.body.78
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  %ob_type86 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 1
  %72 = load %struct._typeobject*, %struct._typeobject** %ob_type86, align 8
  %tp_dealloc87 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %72, i32 0, i32 4
  %73 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc87, align 8
  %74 = load %struct._object*, %struct._object** %_py_decref_tmp79, align 8
  call void %73(%struct._object* %74)
  br label %if.end.88

if.end.88:                                        ; preds = %if.else.85, %if.then.84
  br label %do.end.89

do.end.89:                                        ; preds = %if.end.88
  br label %for.inc.90

for.inc.90:                                       ; preds = %do.end.89
  %75 = load i32, i32* %i, align 4
  %dec91 = add i32 %75, -1
  store i32 %dec91, i32* %i, align 4
  %76 = load %struct._object**, %struct._object*** %sp.addr, align 8
  %incdec.ptr92 = getelementptr %struct._object*, %struct._object** %76, i32 1
  store %struct._object** %incdec.ptr92, %struct._object*** %sp.addr, align 8
  br label %for.cond.74

for.end.93:                                       ; preds = %for.cond.74
  br label %do.body.94

do.body.94:                                       ; preds = %for.end.93
  %77 = load %struct._object*, %struct._object** %it, align 8
  store %struct._object* %77, %struct._object** %_py_xdecref_tmp, align 8
  %78 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp95 = icmp ne %struct._object* %78, null
  br i1 %cmp95, label %if.then.97, label %if.end.110

if.then.97:                                       ; preds = %do.body.94
  br label %do.body.98

do.body.98:                                       ; preds = %if.then.97
  %79 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %79, %struct._object** %_py_decref_tmp99, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  %ob_refcnt100 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 0
  %81 = load i64, i64* %ob_refcnt100, align 8
  %dec101 = add i64 %81, -1
  store i64 %dec101, i64* %ob_refcnt100, align 8
  %cmp102 = icmp ne i64 %dec101, 0
  br i1 %cmp102, label %if.then.104, label %if.else.105

if.then.104:                                      ; preds = %do.body.98
  br label %if.end.108

if.else.105:                                      ; preds = %do.body.98
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  %ob_type106 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type106, align 8
  %tp_dealloc107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 4
  %84 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc107, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp99, align 8
  call void %84(%struct._object* %85)
  br label %if.end.108

if.end.108:                                       ; preds = %if.else.105, %if.then.104
  br label %do.end.109

do.end.109:                                       ; preds = %if.end.108
  br label %if.end.110

if.end.110:                                       ; preds = %do.end.109, %do.body.94
  br label %do.end.111

do.end.111:                                       ; preds = %if.end.110
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %do.end.111, %do.end.73, %do.end
  %86 = load i32, i32* %retval
  ret i32 %86
}

declare i32 @PyObject_SetAttr(%struct._object*, %struct._object*, %struct._object*) #2

declare i32 @PyDict_DelItem(%struct._object*, %struct._object*) #2

declare %struct._object* @PyDict_GetItem(%struct._object*, %struct._object*) #2

declare %struct._object* @_PyDict_LoadGlobal(%struct.PyDictObject*, %struct.PyDictObject*, %struct._object*) #2

declare i32 @PyCell_Set(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal void @format_exc_unbound(%struct.PyCodeObject* %co, i32 %oparg) #0 {
entry:
  %co.addr = alloca %struct.PyCodeObject*, align 8
  %oparg.addr = alloca i32, align 4
  %name = alloca %struct._object*, align 8
  store %struct.PyCodeObject* %co, %struct.PyCodeObject** %co.addr, align 8
  store i32 %oparg, i32* %oparg.addr, align 4
  %call = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call, null
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end.9

if.end:                                           ; preds = %entry
  %0 = load i32, i32* %oparg.addr, align 4
  %conv = sext i32 %0 to i64
  %1 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_cellvars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %1, i32 0, i32 11
  %2 = load %struct._object*, %struct._object** %co_cellvars, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %3, i32 0, i32 1
  %4 = load i64, i64* %ob_size, align 8
  %cmp = icmp slt i64 %conv, %4
  br i1 %cmp, label %if.then.2, label %if.else

if.then.2:                                        ; preds = %if.end
  %5 = load i32, i32* %oparg.addr, align 4
  %idxprom = sext i32 %5 to i64
  %6 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_cellvars3 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %6, i32 0, i32 11
  %7 = load %struct._object*, %struct._object** %co_cellvars3, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %8, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom
  %9 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %9, %struct._object** %name, align 8
  %10 = load %struct._object*, %struct._object** @PyExc_UnboundLocalError, align 8
  %11 = load %struct._object*, %struct._object** %name, align 8
  call void @format_exc_check_arg(%struct._object* %10, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.14, i32 0, i32 0), %struct._object* %11)
  br label %if.end.9

if.else:                                          ; preds = %if.end
  %12 = load i32, i32* %oparg.addr, align 4
  %conv4 = sext i32 %12 to i64
  %13 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_cellvars5 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %13, i32 0, i32 11
  %14 = load %struct._object*, %struct._object** %co_cellvars5, align 8
  %15 = bitcast %struct._object* %14 to %struct.PyVarObject*
  %ob_size6 = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %15, i32 0, i32 1
  %16 = load i64, i64* %ob_size6, align 8
  %sub = sub i64 %conv4, %16
  %17 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_freevars = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %17, i32 0, i32 10
  %18 = load %struct._object*, %struct._object** %co_freevars, align 8
  %19 = bitcast %struct._object* %18 to %struct.PyTupleObject*
  %ob_item7 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %19, i32 0, i32 1
  %arrayidx8 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item7, i32 0, i64 %sub
  %20 = load %struct._object*, %struct._object** %arrayidx8, align 8
  store %struct._object* %20, %struct._object** %name, align 8
  %21 = load %struct._object*, %struct._object** @PyExc_NameError, align 8
  %22 = load %struct._object*, %struct._object** %name, align 8
  call void @format_exc_check_arg(%struct._object* %21, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.93, i32 0, i32 0), %struct._object* %22)
  br label %if.end.9

if.end.9:                                         ; preds = %if.then, %if.else, %if.then.2
  ret void
}

declare %struct._object* @PyErr_Occurred() #2

declare %struct._object* @PyTuple_New(i64) #2

declare %struct._object* @PyList_New(i64) #2

declare %struct._object* @PySet_New(%struct._object*) #2

declare %struct._object* @_PyDict_NewPresized(i64) #2

declare %struct._object* @PyObject_GetAttr(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @cmp_outcome(i32 %op, %struct._object* %v, %struct._object* %w) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %op.addr = alloca i32, align 4
  %v.addr = alloca %struct._object*, align 8
  %w.addr = alloca %struct._object*, align 8
  %res = alloca i32, align 4
  %i = alloca i64, align 8
  %length = alloca i64, align 8
  %exc = alloca %struct._object*, align 8
  store i32 %op, i32* %op.addr, align 4
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %w, %struct._object** %w.addr, align 8
  store i32 0, i32* %res, align 4
  %0 = load i32, i32* %op.addr, align 4
  switch i32 %0, label %sw.default [
    i32 8, label %sw.bb
    i32 9, label %sw.bb.1
    i32 6, label %sw.bb.4
    i32 7, label %sw.bb.7
    i32 10, label %sw.bb.13
  ]

sw.bb:                                            ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v.addr, align 8
  %2 = load %struct._object*, %struct._object** %w.addr, align 8
  %cmp = icmp eq %struct._object* %1, %2
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %res, align 4
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %3 = load %struct._object*, %struct._object** %v.addr, align 8
  %4 = load %struct._object*, %struct._object** %w.addr, align 8
  %cmp2 = icmp ne %struct._object* %3, %4
  %conv3 = zext i1 %cmp2 to i32
  store i32 %conv3, i32* %res, align 4
  br label %sw.epilog

sw.bb.4:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** %w.addr, align 8
  %6 = load %struct._object*, %struct._object** %v.addr, align 8
  %call = call i32 @PySequence_Contains(%struct._object* %5, %struct._object* %6)
  store i32 %call, i32* %res, align 4
  %7 = load i32, i32* %res, align 4
  %cmp5 = icmp slt i32 %7, 0
  br i1 %cmp5, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb.4
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %sw.bb.4
  br label %sw.epilog

sw.bb.7:                                          ; preds = %entry
  %8 = load %struct._object*, %struct._object** %w.addr, align 8
  %9 = load %struct._object*, %struct._object** %v.addr, align 8
  %call8 = call i32 @PySequence_Contains(%struct._object* %8, %struct._object* %9)
  store i32 %call8, i32* %res, align 4
  %10 = load i32, i32* %res, align 4
  %cmp9 = icmp slt i32 %10, 0
  br i1 %cmp9, label %if.then.11, label %if.end.12

if.then.11:                                       ; preds = %sw.bb.7
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.12:                                        ; preds = %sw.bb.7
  %11 = load i32, i32* %res, align 4
  %tobool = icmp ne i32 %11, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  store i32 %lnot.ext, i32* %res, align 4
  br label %sw.epilog

sw.bb.13:                                         ; preds = %entry
  %12 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %12, i32 0, i32 1
  %13 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %13, i32 0, i32 19
  %14 = load i64, i64* %tp_flags, align 8
  %and = and i64 %14, 67108864
  %cmp14 = icmp ne i64 %and, 0
  br i1 %cmp14, label %if.then.16, label %if.else

if.then.16:                                       ; preds = %sw.bb.13
  %15 = load %struct._object*, %struct._object** %w.addr, align 8
  %call17 = call i64 @PyTuple_Size(%struct._object* %15)
  store i64 %call17, i64* %length, align 8
  store i64 0, i64* %i, align 8
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.16
  %16 = load i64, i64* %i, align 8
  %17 = load i64, i64* %length, align 8
  %cmp18 = icmp slt i64 %16, %17
  br i1 %cmp18, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %18 = load i64, i64* %i, align 8
  %19 = load %struct._object*, %struct._object** %w.addr, align 8
  %20 = bitcast %struct._object* %19 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %20, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %18
  %21 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %21, %struct._object** %exc, align 8
  %22 = load %struct._object*, %struct._object** %exc, align 8
  %ob_type20 = getelementptr inbounds %struct._object, %struct._object* %22, i32 0, i32 1
  %23 = load %struct._typeobject*, %struct._typeobject** %ob_type20, align 8
  %tp_flags21 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %23, i32 0, i32 19
  %24 = load i64, i64* %tp_flags21, align 8
  %and22 = and i64 %24, 2147483648
  %cmp23 = icmp ne i64 %and22, 0
  br i1 %cmp23, label %land.lhs.true, label %if.then.29

land.lhs.true:                                    ; preds = %for.body
  %25 = load %struct._object*, %struct._object** %exc, align 8
  %26 = bitcast %struct._object* %25 to %struct._typeobject*
  %tp_flags25 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %26, i32 0, i32 19
  %27 = load i64, i64* %tp_flags25, align 8
  %and26 = and i64 %27, 1073741824
  %cmp27 = icmp ne i64 %and26, 0
  br i1 %cmp27, label %if.end.30, label %if.then.29

if.then.29:                                       ; preds = %land.lhs.true, %for.body
  %28 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %28, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.88, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.30:                                        ; preds = %land.lhs.true
  br label %for.inc

for.inc:                                          ; preds = %if.end.30
  %29 = load i64, i64* %i, align 8
  %add = add i64 %29, 1
  store i64 %add, i64* %i, align 8
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.43

if.else:                                          ; preds = %sw.bb.13
  %30 = load %struct._object*, %struct._object** %w.addr, align 8
  %ob_type31 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 1
  %31 = load %struct._typeobject*, %struct._typeobject** %ob_type31, align 8
  %tp_flags32 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %31, i32 0, i32 19
  %32 = load i64, i64* %tp_flags32, align 8
  %and33 = and i64 %32, 2147483648
  %cmp34 = icmp ne i64 %and33, 0
  br i1 %cmp34, label %land.lhs.true.36, label %if.then.41

land.lhs.true.36:                                 ; preds = %if.else
  %33 = load %struct._object*, %struct._object** %w.addr, align 8
  %34 = bitcast %struct._object* %33 to %struct._typeobject*
  %tp_flags37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 19
  %35 = load i64, i64* %tp_flags37, align 8
  %and38 = and i64 %35, 1073741824
  %cmp39 = icmp ne i64 %and38, 0
  br i1 %cmp39, label %if.end.42, label %if.then.41

if.then.41:                                       ; preds = %land.lhs.true.36, %if.else
  %36 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %36, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.88, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.42:                                        ; preds = %land.lhs.true.36
  br label %if.end.43

if.end.43:                                        ; preds = %if.end.42, %for.end
  %37 = load %struct._object*, %struct._object** %v.addr, align 8
  %38 = load %struct._object*, %struct._object** %w.addr, align 8
  %call44 = call i32 @PyErr_GivenExceptionMatches(%struct._object* %37, %struct._object* %38)
  store i32 %call44, i32* %res, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %39 = load %struct._object*, %struct._object** %v.addr, align 8
  %40 = load %struct._object*, %struct._object** %w.addr, align 8
  %41 = load i32, i32* %op.addr, align 4
  %call45 = call %struct._object* @PyObject_RichCompare(%struct._object* %39, %struct._object* %40, i32 %41)
  store %struct._object* %call45, %struct._object** %retval
  br label %return

sw.epilog:                                        ; preds = %if.end.43, %if.end.12, %if.end, %sw.bb.1, %sw.bb
  %42 = load i32, i32* %res, align 4
  %tobool46 = icmp ne i32 %42, 0
  %cond = select i1 %tobool46, %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_TrueStruct, i32 0, i32 0, i32 0), %struct._object* getelementptr inbounds (%struct._longobject, %struct._longobject* @_Py_FalseStruct, i32 0, i32 0, i32 0)
  store %struct._object* %cond, %struct._object** %v.addr, align 8
  %43 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %44, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %45 = load %struct._object*, %struct._object** %v.addr, align 8
  store %struct._object* %45, %struct._object** %retval
  br label %return

return:                                           ; preds = %sw.epilog, %sw.default, %if.then.41, %if.then.29, %if.then.11, %if.then
  %46 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %46
}

declare %struct._object* @PyTuple_Pack(i64, ...) #2

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_CallObjectWithKeywords(%struct._object* %func, %struct._object* %arg, %struct._object* %kw) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %func.addr = alloca %struct._object*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %kw.addr = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp23 = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  store %struct._object* %kw, %struct._object** %kw.addr, align 8
  %0 = load %struct._object*, %struct._object** %arg.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyTuple_New(i64 0)
  store %struct._object* %call, %struct._object** %arg.addr, align 8
  %1 = load %struct._object*, %struct._object** %arg.addr, align 8
  %cmp1 = icmp eq %struct._object* %1, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end.7

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %3, i32 0, i32 19
  %4 = load i64, i64* %tp_flags, align 8
  %and = and i64 %4, 67108864
  %cmp3 = icmp ne i64 %and, 0
  br i1 %cmp3, label %if.else.5, label %if.then.4

if.then.4:                                        ; preds = %if.else
  %5 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %5, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.40, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.else.5:                                        ; preds = %if.else
  %6 = load %struct._object*, %struct._object** %arg.addr, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %6, i32 0, i32 0
  %7 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %7, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end.6

if.end.6:                                         ; preds = %if.else.5
  br label %if.end.7

if.end.7:                                         ; preds = %if.end.6, %if.end
  %8 = load %struct._object*, %struct._object** %kw.addr, align 8
  %cmp8 = icmp ne %struct._object* %8, null
  br i1 %cmp8, label %land.lhs.true, label %if.end.20

land.lhs.true:                                    ; preds = %if.end.7
  %9 = load %struct._object*, %struct._object** %kw.addr, align 8
  %ob_type9 = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type9, align 8
  %tp_flags10 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %10, i32 0, i32 19
  %11 = load i64, i64* %tp_flags10, align 8
  %and11 = and i64 %11, 536870912
  %cmp12 = icmp ne i64 %and11, 0
  br i1 %cmp12, label %if.end.20, label %if.then.13

if.then.13:                                       ; preds = %land.lhs.true
  %12 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %12, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.41, i32 0, i32 0))
  br label %do.body

do.body:                                          ; preds = %if.then.13
  %13 = load %struct._object*, %struct._object** %arg.addr, align 8
  store %struct._object* %13, %struct._object** %_py_decref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt14 = getelementptr inbounds %struct._object, %struct._object* %14, i32 0, i32 0
  %15 = load i64, i64* %ob_refcnt14, align 8
  %dec = add i64 %15, -1
  store i64 %dec, i64* %ob_refcnt14, align 8
  %cmp15 = icmp ne i64 %dec, 0
  br i1 %cmp15, label %if.then.16, label %if.else.17

if.then.16:                                       ; preds = %do.body
  br label %if.end.19

if.else.17:                                       ; preds = %do.body
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type18 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type18, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 4
  %18 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %19 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %18(%struct._object* %19)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else.17, %if.then.16
  br label %do.end

do.end:                                           ; preds = %if.end.19
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.20:                                        ; preds = %land.lhs.true, %if.end.7
  %20 = load %struct._object*, %struct._object** %func.addr, align 8
  %21 = load %struct._object*, %struct._object** %arg.addr, align 8
  %22 = load %struct._object*, %struct._object** %kw.addr, align 8
  %call21 = call %struct._object* @PyObject_Call(%struct._object* %20, %struct._object* %21, %struct._object* %22)
  store %struct._object* %call21, %struct._object** %result, align 8
  br label %do.body.22

do.body.22:                                       ; preds = %if.end.20
  %23 = load %struct._object*, %struct._object** %arg.addr, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp23, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_refcnt24 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt24, align 8
  %dec25 = add i64 %25, -1
  store i64 %dec25, i64* %ob_refcnt24, align 8
  %cmp26 = icmp ne i64 %dec25, 0
  br i1 %cmp26, label %if.then.27, label %if.else.28

if.then.27:                                       ; preds = %do.body.22
  br label %if.end.31

if.else.28:                                       ; preds = %do.body.22
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  %ob_type29 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type29, align 8
  %tp_dealloc30 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc30, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp23, align 8
  call void %28(%struct._object* %29)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.28, %if.then.27
  br label %do.end.32

do.end.32:                                        ; preds = %if.end.31
  %30 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %30, %struct._object** %retval
  br label %return

return:                                           ; preds = %do.end.32, %do.end, %if.then.4, %if.then.2
  %31 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %31
}

declare i32 @PyFrame_FastToLocalsWithError(%struct._frame*) #2

; Function Attrs: nounwind uwtable
define internal i32 @import_all_from(%struct._object* %locals, %struct._object* %v) #0 {
entry:
  %retval = alloca i32, align 4
  %locals.addr = alloca %struct._object*, align 8
  %v.addr = alloca %struct._object*, align 8
  %all = alloca %struct._object*, align 8
  %dict = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %skip_leading_underscores = alloca i32, align 4
  %pos = alloca i32, align 4
  %err = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp130 = alloca %struct._object*, align 8
  %_py_decref_tmp157 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp173 = alloca %struct._object*, align 8
  %_py_decref_tmp191 = alloca %struct._object*, align 8
  store %struct._object* %locals, %struct._object** %locals.addr, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %call = call %struct._object* @_PyObject_GetAttrId(%struct._object* %0, %struct._Py_Identifier* @import_all_from.PyId___all__)
  store %struct._object* %call, %struct._object** %all, align 8
  store i32 0, i32* %skip_leading_underscores, align 4
  %1 = load %struct._object*, %struct._object** %all, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end.18

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call1 = call i32 @PyErr_ExceptionMatches(%struct._object* %2)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.end, label %if.then.2

if.then.2:                                        ; preds = %if.then
  store i32 -1, i32* %retval
  br label %return

if.end:                                           ; preds = %if.then
  call void @PyErr_Clear()
  %3 = load %struct._object*, %struct._object** %v.addr, align 8
  %call3 = call %struct._object* @_PyObject_GetAttrId(%struct._object* %3, %struct._Py_Identifier* @import_all_from.PyId___dict__)
  store %struct._object* %call3, %struct._object** %dict, align 8
  %4 = load %struct._object*, %struct._object** %dict, align 8
  %cmp4 = icmp eq %struct._object* %4, null
  br i1 %cmp4, label %if.then.5, label %if.end.10

if.then.5:                                        ; preds = %if.end
  %5 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call6 = call i32 @PyErr_ExceptionMatches(%struct._object* %5)
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.end.9, label %if.then.8

if.then.8:                                        ; preds = %if.then.5
  store i32 -1, i32* %retval
  br label %return

if.end.9:                                         ; preds = %if.then.5
  %6 = load %struct._object*, %struct._object** @PyExc_ImportError, align 8
  call void @PyErr_SetString(%struct._object* %6, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.92, i32 0, i32 0))
  store i32 -1, i32* %retval
  br label %return

if.end.10:                                        ; preds = %if.end
  %7 = load %struct._object*, %struct._object** %dict, align 8
  %call11 = call %struct._object* @PyMapping_Keys(%struct._object* %7)
  store %struct._object* %call11, %struct._object** %all, align 8
  br label %do.body

do.body:                                          ; preds = %if.end.10
  %8 = load %struct._object*, %struct._object** %dict, align 8
  store %struct._object* %8, %struct._object** %_py_decref_tmp, align 8
  %9 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 0
  %10 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp12 = icmp ne i64 %dec, 0
  br i1 %cmp12, label %if.then.13, label %if.else

if.then.13:                                       ; preds = %do.body
  br label %if.end.14

if.else:                                          ; preds = %do.body
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 1
  %12 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %12, i32 0, i32 4
  %13 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %14 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %13(%struct._object* %14)
  br label %if.end.14

if.end.14:                                        ; preds = %if.else, %if.then.13
  br label %do.end

do.end:                                           ; preds = %if.end.14
  %15 = load %struct._object*, %struct._object** %all, align 8
  %cmp15 = icmp eq %struct._object* %15, null
  br i1 %cmp15, label %if.then.16, label %if.end.17

if.then.16:                                       ; preds = %do.end
  store i32 -1, i32* %retval
  br label %return

if.end.17:                                        ; preds = %do.end
  store i32 1, i32* %skip_leading_underscores, align 4
  br label %if.end.18

if.end.18:                                        ; preds = %if.end.17, %entry
  store i32 0, i32* %pos, align 4
  store i32 0, i32* %err, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.18
  %16 = load %struct._object*, %struct._object** %all, align 8
  %17 = load i32, i32* %pos, align 4
  %conv = sext i32 %17 to i64
  %call19 = call %struct._object* @PySequence_GetItem(%struct._object* %16, i64 %conv)
  store %struct._object* %call19, %struct._object** %name, align 8
  %18 = load %struct._object*, %struct._object** %name, align 8
  %cmp20 = icmp eq %struct._object* %18, null
  br i1 %cmp20, label %if.then.22, label %if.end.28

if.then.22:                                       ; preds = %for.cond
  %19 = load %struct._object*, %struct._object** @PyExc_IndexError, align 8
  %call23 = call i32 @PyErr_ExceptionMatches(%struct._object* %19)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.else.26, label %if.then.25

if.then.25:                                       ; preds = %if.then.22
  store i32 -1, i32* %err, align 4
  br label %if.end.27

if.else.26:                                       ; preds = %if.then.22
  call void @PyErr_Clear()
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.26, %if.then.25
  br label %for.end

if.end.28:                                        ; preds = %for.cond
  %20 = load i32, i32* %skip_leading_underscores, align 4
  %tobool29 = icmp ne i32 %20, 0
  br i1 %tobool29, label %land.lhs.true, label %if.end.141

land.lhs.true:                                    ; preds = %if.end.28
  %21 = load %struct._object*, %struct._object** %name, align 8
  %ob_type30 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type30, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 19
  %23 = load i64, i64* %tp_flags, align 8
  %and = and i64 %23, 268435456
  %cmp31 = icmp ne i64 %and, 0
  br i1 %cmp31, label %land.lhs.true.33, label %if.end.141

land.lhs.true.33:                                 ; preds = %land.lhs.true
  %24 = load %struct._object*, %struct._object** %name, align 8
  %25 = bitcast %struct._object* %24 to %struct.PyASCIIObject*
  %state = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %25, i32 0, i32 3
  %26 = bitcast %struct.anon.1* %state to i32*
  %bf.load = load i32, i32* %26, align 4
  %bf.lshr = lshr i32 %bf.load, 7
  %bf.clear = and i32 %bf.lshr, 1
  %tobool34 = icmp ne i32 %bf.clear, 0
  br i1 %tobool34, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true.33
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true.33
  %27 = load %struct._object*, %struct._object** %name, align 8
  %call35 = call i32 @_PyUnicode_Ready(%struct._object* %27)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %call35, %cond.false ]
  %cmp36 = icmp ne i32 %cond, -1
  br i1 %cmp36, label %land.lhs.true.38, label %if.end.141

land.lhs.true.38:                                 ; preds = %cond.end
  %28 = load %struct._object*, %struct._object** %name, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyASCIIObject*
  %state39 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %29, i32 0, i32 3
  %30 = bitcast %struct.anon.1* %state39 to i32*
  %bf.load40 = load i32, i32* %30, align 4
  %bf.lshr41 = lshr i32 %bf.load40, 2
  %bf.clear42 = and i32 %bf.lshr41, 7
  %cmp43 = icmp eq i32 %bf.clear42, 1
  br i1 %cmp43, label %cond.true.45, label %cond.false.66

cond.true.45:                                     ; preds = %land.lhs.true.38
  %31 = load %struct._object*, %struct._object** %name, align 8
  %32 = bitcast %struct._object* %31 to %struct.PyASCIIObject*
  %state46 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %32, i32 0, i32 3
  %33 = bitcast %struct.anon.1* %state46 to i32*
  %bf.load47 = load i32, i32* %33, align 4
  %bf.lshr48 = lshr i32 %bf.load47, 5
  %bf.clear49 = and i32 %bf.lshr48, 1
  %tobool50 = icmp ne i32 %bf.clear49, 0
  br i1 %tobool50, label %cond.true.51, label %cond.false.62

cond.true.51:                                     ; preds = %cond.true.45
  %34 = load %struct._object*, %struct._object** %name, align 8
  %35 = bitcast %struct._object* %34 to %struct.PyASCIIObject*
  %state52 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %35, i32 0, i32 3
  %36 = bitcast %struct.anon.1* %state52 to i32*
  %bf.load53 = load i32, i32* %36, align 4
  %bf.lshr54 = lshr i32 %bf.load53, 6
  %bf.clear55 = and i32 %bf.lshr54, 1
  %tobool56 = icmp ne i32 %bf.clear55, 0
  br i1 %tobool56, label %cond.true.57, label %cond.false.58

cond.true.57:                                     ; preds = %cond.true.51
  %37 = load %struct._object*, %struct._object** %name, align 8
  %38 = bitcast %struct._object* %37 to %struct.PyASCIIObject*
  %add.ptr = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %38, i64 1
  %39 = bitcast %struct.PyASCIIObject* %add.ptr to i8*
  br label %cond.end.60

cond.false.58:                                    ; preds = %cond.true.51
  %40 = load %struct._object*, %struct._object** %name, align 8
  %41 = bitcast %struct._object* %40 to %struct.PyCompactUnicodeObject*
  %add.ptr59 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %41, i64 1
  %42 = bitcast %struct.PyCompactUnicodeObject* %add.ptr59 to i8*
  br label %cond.end.60

cond.end.60:                                      ; preds = %cond.false.58, %cond.true.57
  %cond61 = phi i8* [ %39, %cond.true.57 ], [ %42, %cond.false.58 ]
  br label %cond.end.63

cond.false.62:                                    ; preds = %cond.true.45
  %43 = load %struct._object*, %struct._object** %name, align 8
  %44 = bitcast %struct._object* %43 to %struct.PyUnicodeObject*
  %data = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %44, i32 0, i32 1
  %any = bitcast %union.anon* %data to i8**
  %45 = load i8*, i8** %any, align 8
  br label %cond.end.63

cond.end.63:                                      ; preds = %cond.false.62, %cond.end.60
  %cond64 = phi i8* [ %cond61, %cond.end.60 ], [ %45, %cond.false.62 ]
  %arrayidx = getelementptr i8, i8* %cond64, i64 0
  %46 = load i8, i8* %arrayidx, align 1
  %conv65 = zext i8 %46 to i32
  br label %cond.end.124

cond.false.66:                                    ; preds = %land.lhs.true.38
  %47 = load %struct._object*, %struct._object** %name, align 8
  %48 = bitcast %struct._object* %47 to %struct.PyASCIIObject*
  %state67 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %48, i32 0, i32 3
  %49 = bitcast %struct.anon.1* %state67 to i32*
  %bf.load68 = load i32, i32* %49, align 4
  %bf.lshr69 = lshr i32 %bf.load68, 2
  %bf.clear70 = and i32 %bf.lshr69, 7
  %cmp71 = icmp eq i32 %bf.clear70, 2
  br i1 %cmp71, label %cond.true.73, label %cond.false.98

cond.true.73:                                     ; preds = %cond.false.66
  %50 = load %struct._object*, %struct._object** %name, align 8
  %51 = bitcast %struct._object* %50 to %struct.PyASCIIObject*
  %state74 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %51, i32 0, i32 3
  %52 = bitcast %struct.anon.1* %state74 to i32*
  %bf.load75 = load i32, i32* %52, align 4
  %bf.lshr76 = lshr i32 %bf.load75, 5
  %bf.clear77 = and i32 %bf.lshr76, 1
  %tobool78 = icmp ne i32 %bf.clear77, 0
  br i1 %tobool78, label %cond.true.79, label %cond.false.91

cond.true.79:                                     ; preds = %cond.true.73
  %53 = load %struct._object*, %struct._object** %name, align 8
  %54 = bitcast %struct._object* %53 to %struct.PyASCIIObject*
  %state80 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %54, i32 0, i32 3
  %55 = bitcast %struct.anon.1* %state80 to i32*
  %bf.load81 = load i32, i32* %55, align 4
  %bf.lshr82 = lshr i32 %bf.load81, 6
  %bf.clear83 = and i32 %bf.lshr82, 1
  %tobool84 = icmp ne i32 %bf.clear83, 0
  br i1 %tobool84, label %cond.true.85, label %cond.false.87

cond.true.85:                                     ; preds = %cond.true.79
  %56 = load %struct._object*, %struct._object** %name, align 8
  %57 = bitcast %struct._object* %56 to %struct.PyASCIIObject*
  %add.ptr86 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %57, i64 1
  %58 = bitcast %struct.PyASCIIObject* %add.ptr86 to i8*
  br label %cond.end.89

cond.false.87:                                    ; preds = %cond.true.79
  %59 = load %struct._object*, %struct._object** %name, align 8
  %60 = bitcast %struct._object* %59 to %struct.PyCompactUnicodeObject*
  %add.ptr88 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %60, i64 1
  %61 = bitcast %struct.PyCompactUnicodeObject* %add.ptr88 to i8*
  br label %cond.end.89

cond.end.89:                                      ; preds = %cond.false.87, %cond.true.85
  %cond90 = phi i8* [ %58, %cond.true.85 ], [ %61, %cond.false.87 ]
  br label %cond.end.94

cond.false.91:                                    ; preds = %cond.true.73
  %62 = load %struct._object*, %struct._object** %name, align 8
  %63 = bitcast %struct._object* %62 to %struct.PyUnicodeObject*
  %data92 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %63, i32 0, i32 1
  %any93 = bitcast %union.anon* %data92 to i8**
  %64 = load i8*, i8** %any93, align 8
  br label %cond.end.94

cond.end.94:                                      ; preds = %cond.false.91, %cond.end.89
  %cond95 = phi i8* [ %cond90, %cond.end.89 ], [ %64, %cond.false.91 ]
  %65 = bitcast i8* %cond95 to i16*
  %arrayidx96 = getelementptr i16, i16* %65, i64 0
  %66 = load i16, i16* %arrayidx96, align 2
  %conv97 = zext i16 %66 to i32
  br label %cond.end.122

cond.false.98:                                    ; preds = %cond.false.66
  %67 = load %struct._object*, %struct._object** %name, align 8
  %68 = bitcast %struct._object* %67 to %struct.PyASCIIObject*
  %state99 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %68, i32 0, i32 3
  %69 = bitcast %struct.anon.1* %state99 to i32*
  %bf.load100 = load i32, i32* %69, align 4
  %bf.lshr101 = lshr i32 %bf.load100, 5
  %bf.clear102 = and i32 %bf.lshr101, 1
  %tobool103 = icmp ne i32 %bf.clear102, 0
  br i1 %tobool103, label %cond.true.104, label %cond.false.116

cond.true.104:                                    ; preds = %cond.false.98
  %70 = load %struct._object*, %struct._object** %name, align 8
  %71 = bitcast %struct._object* %70 to %struct.PyASCIIObject*
  %state105 = getelementptr inbounds %struct.PyASCIIObject, %struct.PyASCIIObject* %71, i32 0, i32 3
  %72 = bitcast %struct.anon.1* %state105 to i32*
  %bf.load106 = load i32, i32* %72, align 4
  %bf.lshr107 = lshr i32 %bf.load106, 6
  %bf.clear108 = and i32 %bf.lshr107, 1
  %tobool109 = icmp ne i32 %bf.clear108, 0
  br i1 %tobool109, label %cond.true.110, label %cond.false.112

cond.true.110:                                    ; preds = %cond.true.104
  %73 = load %struct._object*, %struct._object** %name, align 8
  %74 = bitcast %struct._object* %73 to %struct.PyASCIIObject*
  %add.ptr111 = getelementptr %struct.PyASCIIObject, %struct.PyASCIIObject* %74, i64 1
  %75 = bitcast %struct.PyASCIIObject* %add.ptr111 to i8*
  br label %cond.end.114

cond.false.112:                                   ; preds = %cond.true.104
  %76 = load %struct._object*, %struct._object** %name, align 8
  %77 = bitcast %struct._object* %76 to %struct.PyCompactUnicodeObject*
  %add.ptr113 = getelementptr %struct.PyCompactUnicodeObject, %struct.PyCompactUnicodeObject* %77, i64 1
  %78 = bitcast %struct.PyCompactUnicodeObject* %add.ptr113 to i8*
  br label %cond.end.114

cond.end.114:                                     ; preds = %cond.false.112, %cond.true.110
  %cond115 = phi i8* [ %75, %cond.true.110 ], [ %78, %cond.false.112 ]
  br label %cond.end.119

cond.false.116:                                   ; preds = %cond.false.98
  %79 = load %struct._object*, %struct._object** %name, align 8
  %80 = bitcast %struct._object* %79 to %struct.PyUnicodeObject*
  %data117 = getelementptr inbounds %struct.PyUnicodeObject, %struct.PyUnicodeObject* %80, i32 0, i32 1
  %any118 = bitcast %union.anon* %data117 to i8**
  %81 = load i8*, i8** %any118, align 8
  br label %cond.end.119

cond.end.119:                                     ; preds = %cond.false.116, %cond.end.114
  %cond120 = phi i8* [ %cond115, %cond.end.114 ], [ %81, %cond.false.116 ]
  %82 = bitcast i8* %cond120 to i32*
  %arrayidx121 = getelementptr i32, i32* %82, i64 0
  %83 = load i32, i32* %arrayidx121, align 4
  br label %cond.end.122

cond.end.122:                                     ; preds = %cond.end.119, %cond.end.94
  %cond123 = phi i32 [ %conv97, %cond.end.94 ], [ %83, %cond.end.119 ]
  br label %cond.end.124

cond.end.124:                                     ; preds = %cond.end.122, %cond.end.63
  %cond125 = phi i32 [ %conv65, %cond.end.63 ], [ %cond123, %cond.end.122 ]
  %cmp126 = icmp eq i32 %cond125, 95
  br i1 %cmp126, label %if.then.128, label %if.end.141

if.then.128:                                      ; preds = %cond.end.124
  br label %do.body.129

do.body.129:                                      ; preds = %if.then.128
  %84 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %84, %struct._object** %_py_decref_tmp130, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_refcnt131 = getelementptr inbounds %struct._object, %struct._object* %85, i32 0, i32 0
  %86 = load i64, i64* %ob_refcnt131, align 8
  %dec132 = add i64 %86, -1
  store i64 %dec132, i64* %ob_refcnt131, align 8
  %cmp133 = icmp ne i64 %dec132, 0
  br i1 %cmp133, label %if.then.135, label %if.else.136

if.then.135:                                      ; preds = %do.body.129
  br label %if.end.139

if.else.136:                                      ; preds = %do.body.129
  %87 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  %ob_type137 = getelementptr inbounds %struct._object, %struct._object* %87, i32 0, i32 1
  %88 = load %struct._typeobject*, %struct._typeobject** %ob_type137, align 8
  %tp_dealloc138 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %88, i32 0, i32 4
  %89 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc138, align 8
  %90 = load %struct._object*, %struct._object** %_py_decref_tmp130, align 8
  call void %89(%struct._object* %90)
  br label %if.end.139

if.end.139:                                       ; preds = %if.else.136, %if.then.135
  br label %do.end.140

do.end.140:                                       ; preds = %if.end.139
  br label %for.inc

if.end.141:                                       ; preds = %cond.end.124, %cond.end, %land.lhs.true, %if.end.28
  %91 = load %struct._object*, %struct._object** %v.addr, align 8
  %92 = load %struct._object*, %struct._object** %name, align 8
  %call142 = call %struct._object* @PyObject_GetAttr(%struct._object* %91, %struct._object* %92)
  store %struct._object* %call142, %struct._object** %value, align 8
  %93 = load %struct._object*, %struct._object** %value, align 8
  %cmp143 = icmp eq %struct._object* %93, null
  br i1 %cmp143, label %if.then.145, label %if.else.146

if.then.145:                                      ; preds = %if.end.141
  store i32 -1, i32* %err, align 4
  br label %if.end.155

if.else.146:                                      ; preds = %if.end.141
  %94 = load %struct._object*, %struct._object** %locals.addr, align 8
  %ob_type147 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type147, align 8
  %cmp148 = icmp eq %struct._typeobject* %95, @PyDict_Type
  br i1 %cmp148, label %if.then.150, label %if.else.152

if.then.150:                                      ; preds = %if.else.146
  %96 = load %struct._object*, %struct._object** %locals.addr, align 8
  %97 = load %struct._object*, %struct._object** %name, align 8
  %98 = load %struct._object*, %struct._object** %value, align 8
  %call151 = call i32 @PyDict_SetItem(%struct._object* %96, %struct._object* %97, %struct._object* %98)
  store i32 %call151, i32* %err, align 4
  br label %if.end.154

if.else.152:                                      ; preds = %if.else.146
  %99 = load %struct._object*, %struct._object** %locals.addr, align 8
  %100 = load %struct._object*, %struct._object** %name, align 8
  %101 = load %struct._object*, %struct._object** %value, align 8
  %call153 = call i32 @PyObject_SetItem(%struct._object* %99, %struct._object* %100, %struct._object* %101)
  store i32 %call153, i32* %err, align 4
  br label %if.end.154

if.end.154:                                       ; preds = %if.else.152, %if.then.150
  br label %if.end.155

if.end.155:                                       ; preds = %if.end.154, %if.then.145
  br label %do.body.156

do.body.156:                                      ; preds = %if.end.155
  %102 = load %struct._object*, %struct._object** %name, align 8
  store %struct._object* %102, %struct._object** %_py_decref_tmp157, align 8
  %103 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8
  %ob_refcnt158 = getelementptr inbounds %struct._object, %struct._object* %103, i32 0, i32 0
  %104 = load i64, i64* %ob_refcnt158, align 8
  %dec159 = add i64 %104, -1
  store i64 %dec159, i64* %ob_refcnt158, align 8
  %cmp160 = icmp ne i64 %dec159, 0
  br i1 %cmp160, label %if.then.162, label %if.else.163

if.then.162:                                      ; preds = %do.body.156
  br label %if.end.166

if.else.163:                                      ; preds = %do.body.156
  %105 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8
  %ob_type164 = getelementptr inbounds %struct._object, %struct._object* %105, i32 0, i32 1
  %106 = load %struct._typeobject*, %struct._typeobject** %ob_type164, align 8
  %tp_dealloc165 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %106, i32 0, i32 4
  %107 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc165, align 8
  %108 = load %struct._object*, %struct._object** %_py_decref_tmp157, align 8
  call void %107(%struct._object* %108)
  br label %if.end.166

if.end.166:                                       ; preds = %if.else.163, %if.then.162
  br label %do.end.167

do.end.167:                                       ; preds = %if.end.166
  br label %do.body.168

do.body.168:                                      ; preds = %do.end.167
  %109 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %109, %struct._object** %_py_xdecref_tmp, align 8
  %110 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp169 = icmp ne %struct._object* %110, null
  br i1 %cmp169, label %if.then.171, label %if.end.184

if.then.171:                                      ; preds = %do.body.168
  br label %do.body.172

do.body.172:                                      ; preds = %if.then.171
  %111 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %111, %struct._object** %_py_decref_tmp173, align 8
  %112 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  %ob_refcnt174 = getelementptr inbounds %struct._object, %struct._object* %112, i32 0, i32 0
  %113 = load i64, i64* %ob_refcnt174, align 8
  %dec175 = add i64 %113, -1
  store i64 %dec175, i64* %ob_refcnt174, align 8
  %cmp176 = icmp ne i64 %dec175, 0
  br i1 %cmp176, label %if.then.178, label %if.else.179

if.then.178:                                      ; preds = %do.body.172
  br label %if.end.182

if.else.179:                                      ; preds = %do.body.172
  %114 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  %ob_type180 = getelementptr inbounds %struct._object, %struct._object* %114, i32 0, i32 1
  %115 = load %struct._typeobject*, %struct._typeobject** %ob_type180, align 8
  %tp_dealloc181 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %115, i32 0, i32 4
  %116 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc181, align 8
  %117 = load %struct._object*, %struct._object** %_py_decref_tmp173, align 8
  call void %116(%struct._object* %117)
  br label %if.end.182

if.end.182:                                       ; preds = %if.else.179, %if.then.178
  br label %do.end.183

do.end.183:                                       ; preds = %if.end.182
  br label %if.end.184

if.end.184:                                       ; preds = %do.end.183, %do.body.168
  br label %do.end.185

do.end.185:                                       ; preds = %if.end.184
  %118 = load i32, i32* %err, align 4
  %cmp186 = icmp ne i32 %118, 0
  br i1 %cmp186, label %if.then.188, label %if.end.189

if.then.188:                                      ; preds = %do.end.185
  br label %for.end

if.end.189:                                       ; preds = %do.end.185
  br label %for.inc

for.inc:                                          ; preds = %if.end.189, %do.end.140
  %119 = load i32, i32* %pos, align 4
  %inc = add i32 %119, 1
  store i32 %inc, i32* %pos, align 4
  br label %for.cond

for.end:                                          ; preds = %if.then.188, %if.end.27
  br label %do.body.190

do.body.190:                                      ; preds = %for.end
  %120 = load %struct._object*, %struct._object** %all, align 8
  store %struct._object* %120, %struct._object** %_py_decref_tmp191, align 8
  %121 = load %struct._object*, %struct._object** %_py_decref_tmp191, align 8
  %ob_refcnt192 = getelementptr inbounds %struct._object, %struct._object* %121, i32 0, i32 0
  %122 = load i64, i64* %ob_refcnt192, align 8
  %dec193 = add i64 %122, -1
  store i64 %dec193, i64* %ob_refcnt192, align 8
  %cmp194 = icmp ne i64 %dec193, 0
  br i1 %cmp194, label %if.then.196, label %if.else.197

if.then.196:                                      ; preds = %do.body.190
  br label %if.end.200

if.else.197:                                      ; preds = %do.body.190
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp191, align 8
  %ob_type198 = getelementptr inbounds %struct._object, %struct._object* %123, i32 0, i32 1
  %124 = load %struct._typeobject*, %struct._typeobject** %ob_type198, align 8
  %tp_dealloc199 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %124, i32 0, i32 4
  %125 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc199, align 8
  %126 = load %struct._object*, %struct._object** %_py_decref_tmp191, align 8
  call void %125(%struct._object* %126)
  br label %if.end.200

if.end.200:                                       ; preds = %if.else.197, %if.then.196
  br label %do.end.201

do.end.201:                                       ; preds = %if.end.200
  %127 = load i32, i32* %err, align 4
  store i32 %127, i32* %retval
  br label %return

return:                                           ; preds = %do.end.201, %if.then.16, %if.end.9, %if.then.8, %if.then.2
  %128 = load i32, i32* %retval
  ret i32 %128
}

declare void @PyFrame_LocalsToFast(%struct._frame*, i32) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @import_from(%struct._object* %v, %struct._object* %name) #0 {
entry:
  %v.addr = alloca %struct._object*, align 8
  %name.addr = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store %struct._object* %name, %struct._object** %name.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %1 = load %struct._object*, %struct._object** %name.addr, align 8
  %call = call %struct._object* @PyObject_GetAttr(%struct._object* %0, %struct._object* %1)
  store %struct._object* %call, %struct._object** %x, align 8
  %2 = load %struct._object*, %struct._object** %x, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call1 = call i32 @PyErr_ExceptionMatches(%struct._object* %3)
  %tobool = icmp ne i32 %call1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct._object*, %struct._object** @PyExc_ImportError, align 8
  %5 = load %struct._object*, %struct._object** %name.addr, align 8
  %call2 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %4, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.89, i32 0, i32 0), %struct._object* %5)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %6 = load %struct._object*, %struct._object** %x, align 8
  ret %struct._object* %6
}

declare %struct._object* @PyObject_GetIter(%struct._object*) #2

declare %struct._object* @PyLong_FromLong(i64) #2

declare void @PyFrame_BlockSetup(%struct._frame*, i32, i32, i32) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @special_lookup(%struct._object* %o, %struct._Py_Identifier* %id) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %o.addr = alloca %struct._object*, align 8
  %id.addr = alloca %struct._Py_Identifier*, align 8
  %res = alloca %struct._object*, align 8
  store %struct._object* %o, %struct._object** %o.addr, align 8
  store %struct._Py_Identifier* %id, %struct._Py_Identifier** %id.addr, align 8
  %0 = load %struct._object*, %struct._object** %o.addr, align 8
  %1 = load %struct._Py_Identifier*, %struct._Py_Identifier** %id.addr, align 8
  %call = call %struct._object* @_PyObject_LookupSpecial(%struct._object* %0, %struct._Py_Identifier* %1)
  store %struct._object* %call, %struct._object** %res, align 8
  %2 = load %struct._object*, %struct._object** %res, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call1 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call1, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  %3 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %4 = load %struct._Py_Identifier*, %struct._Py_Identifier** %id.addr, align 8
  %object = getelementptr inbounds %struct._Py_Identifier, %struct._Py_Identifier* %4, i32 0, i32 2
  %5 = load %struct._object*, %struct._object** %object, align 8
  call void @PyErr_SetObject(%struct._object* %3, %struct._object* %5)
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct._object*, %struct._object** %res, align 8
  store %struct._object* %6, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %7
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @call_function(%struct._object*** %pp_stack, i32 %oparg) #0 {
entry:
  %pp_stack.addr = alloca %struct._object***, align 8
  %oparg.addr = alloca i32, align 4
  %na = alloca i32, align 4
  %nk = alloca i32, align 4
  %n = alloca i32, align 4
  %pfunc = alloca %struct._object**, align 8
  %func = alloca %struct._object*, align 8
  %x = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %flags = alloca i32, align 4
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %meth = alloca %struct._object* (%struct._object*, %struct._object*)*, align 8
  %self = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %arg = alloca %struct._object*, align 8
  %_py_decref_tmp96 = alloca %struct._object*, align 8
  %_py_decref_tmp115 = alloca %struct._object*, align 8
  %callargs = alloca %struct._object*, align 8
  %_py_decref_tmp165 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp188 = alloca %struct._object*, align 8
  %self210 = alloca %struct._object*, align 8
  %_py_decref_tmp217 = alloca %struct._object*, align 8
  %_py_decref_tmp242 = alloca %struct._object*, align 8
  %_py_decref_tmp257 = alloca %struct._object*, align 8
  store %struct._object*** %pp_stack, %struct._object**** %pp_stack.addr, align 8
  store i32 %oparg, i32* %oparg.addr, align 4
  %0 = load i32, i32* %oparg.addr, align 4
  %and = and i32 %0, 255
  store i32 %and, i32* %na, align 4
  %1 = load i32, i32* %oparg.addr, align 4
  %shr = ashr i32 %1, 8
  %and1 = and i32 %shr, 255
  store i32 %and1, i32* %nk, align 4
  %2 = load i32, i32* %na, align 4
  %3 = load i32, i32* %nk, align 4
  %mul = mul i32 2, %3
  %add = add i32 %2, %mul
  store i32 %add, i32* %n, align 4
  %4 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %5 = load %struct._object**, %struct._object*** %4, align 8
  %6 = load i32, i32* %n, align 4
  %idx.ext = sext i32 %6 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr %struct._object*, %struct._object** %5, i64 %idx.neg
  %add.ptr2 = getelementptr %struct._object*, %struct._object** %add.ptr, i64 -1
  store %struct._object** %add.ptr2, %struct._object*** %pfunc, align 8
  %7 = load %struct._object**, %struct._object*** %pfunc, align 8
  %8 = load %struct._object*, %struct._object** %7, align 8
  store %struct._object* %8, %struct._object** %func, align 8
  %9 = load %struct._object*, %struct._object** %func, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %9, i32 0, i32 1
  %10 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %10, @PyCFunction_Type
  br i1 %cmp, label %land.lhs.true, label %if.else.203

land.lhs.true:                                    ; preds = %entry
  %11 = load i32, i32* %nk, align 4
  %cmp3 = icmp eq i32 %11, 0
  br i1 %cmp3, label %if.then, label %if.else.203

if.then:                                          ; preds = %land.lhs.true
  %12 = load %struct._object*, %struct._object** %func, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyCFunctionObject*
  %m_ml = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %13, i32 0, i32 1
  %14 = load %struct.PyMethodDef*, %struct.PyMethodDef** %m_ml, align 8
  %ml_flags = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %14, i32 0, i32 2
  %15 = load i32, i32* %ml_flags, align 4
  store i32 %15, i32* %flags, align 4
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %16 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %16, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %17 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %18 = bitcast %struct._Py_atomic_address* %17 to i8*
  %19 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %18, i32 %19)
  %20 = load i32, i32* %order, align 4
  switch i32 %20, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then, %if.then, %if.then
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %21 = load i8**, i8*** %volatile_data, align 8
  %22 = load volatile i8*, i8** %21, align 8
  store i8* %22, i8** %result, align 8
  %23 = load i32, i32* %order, align 4
  switch i32 %23, label %sw.default.5 [
    i32 1, label %sw.bb.4
    i32 3, label %sw.bb.4
    i32 4, label %sw.bb.4
  ]

sw.bb.4:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.6

sw.default.5:                                     ; preds = %sw.epilog
  br label %sw.epilog.6

sw.epilog.6:                                      ; preds = %sw.default.5, %sw.bb.4
  %24 = load i8*, i8** %result, align 8
  store i8* %24, i8** %tmp
  %25 = load i8*, i8** %tmp
  %26 = bitcast i8* %25 to %struct._ts*
  store %struct._ts* %26, %struct._ts** %tstate, align 8
  %27 = load i32, i32* %flags, align 4
  %and7 = and i32 %27, 12
  %tobool = icmp ne i32 %and7, 0
  br i1 %tobool, label %if.then.8, label %if.else.128

if.then.8:                                        ; preds = %sw.epilog.6
  %28 = load %struct._object*, %struct._object** %func, align 8
  %29 = bitcast %struct._object* %28 to %struct.PyCFunctionObject*
  %m_ml10 = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %29, i32 0, i32 1
  %30 = load %struct.PyMethodDef*, %struct.PyMethodDef** %m_ml10, align 8
  %ml_meth = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %30, i32 0, i32 1
  %31 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %ml_meth, align 8
  store %struct._object* (%struct._object*, %struct._object*)* %31, %struct._object* (%struct._object*, %struct._object*)** %meth, align 8
  %32 = load %struct._object*, %struct._object** %func, align 8
  %33 = bitcast %struct._object* %32 to %struct.PyCFunctionObject*
  %m_ml12 = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %33, i32 0, i32 1
  %34 = load %struct.PyMethodDef*, %struct.PyMethodDef** %m_ml12, align 8
  %ml_flags13 = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %34, i32 0, i32 2
  %35 = load i32, i32* %ml_flags13, align 4
  %and14 = and i32 %35, 32
  %tobool15 = icmp ne i32 %and14, 0
  br i1 %tobool15, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then.8
  br label %cond.end

cond.false:                                       ; preds = %if.then.8
  %36 = load %struct._object*, %struct._object** %func, align 8
  %37 = bitcast %struct._object* %36 to %struct.PyCFunctionObject*
  %m_self = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %37, i32 0, i32 2
  %38 = load %struct._object*, %struct._object** %m_self, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._object* [ null, %cond.true ], [ %38, %cond.false ]
  store %struct._object* %cond, %struct._object** %self, align 8
  %39 = load i32, i32* %flags, align 4
  %and16 = and i32 %39, 4
  %tobool17 = icmp ne i32 %and16, 0
  br i1 %tobool17, label %land.lhs.true.18, label %if.else.57

land.lhs.true.18:                                 ; preds = %cond.end
  %40 = load i32, i32* %na, align 4
  %cmp19 = icmp eq i32 %40, 0
  br i1 %cmp19, label %if.then.20, label %if.else.57

if.then.20:                                       ; preds = %land.lhs.true.18
  %41 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %41, i32 0, i32 8
  %42 = load i32, i32* %use_tracing, align 4
  %tobool21 = icmp ne i32 %42, 0
  br i1 %tobool21, label %land.lhs.true.22, label %if.else.54

land.lhs.true.22:                                 ; preds = %if.then.20
  %43 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %43, i32 0, i32 9
  %44 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %tobool23 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %44, null
  br i1 %tobool23, label %if.then.24, label %if.else.54

if.then.24:                                       ; preds = %land.lhs.true.22
  %45 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc25 = getelementptr inbounds %struct._ts, %struct._ts* %45, i32 0, i32 9
  %46 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc25, align 8
  %47 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj = getelementptr inbounds %struct._ts, %struct._ts* %47, i32 0, i32 11
  %48 = load %struct._object*, %struct._object** %c_profileobj, align 8
  %49 = load %struct._ts*, %struct._ts** %tstate, align 8
  %50 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame = getelementptr inbounds %struct._ts, %struct._ts* %50, i32 0, i32 3
  %51 = load %struct._frame*, %struct._frame** %frame, align 8
  %52 = load %struct._object*, %struct._object** %func, align 8
  %call = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %46, %struct._object* %48, %struct._ts* %49, %struct._frame* %51, i32 4, %struct._object* %52)
  %tobool26 = icmp ne i32 %call, 0
  br i1 %tobool26, label %if.then.27, label %if.else

if.then.27:                                       ; preds = %if.then.24
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.53

if.else:                                          ; preds = %if.then.24
  %53 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %meth, align 8
  %54 = load %struct._object*, %struct._object** %self, align 8
  %call28 = call %struct._object* %53(%struct._object* %54, %struct._object* null)
  store %struct._object* %call28, %struct._object** %x, align 8
  %55 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc29 = getelementptr inbounds %struct._ts, %struct._ts* %55, i32 0, i32 9
  %56 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc29, align 8
  %cmp30 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %56, null
  br i1 %cmp30, label %if.then.31, label %if.end.52

if.then.31:                                       ; preds = %if.else
  %57 = load %struct._object*, %struct._object** %x, align 8
  %cmp32 = icmp eq %struct._object* %57, null
  br i1 %cmp32, label %if.then.33, label %if.else.38

if.then.33:                                       ; preds = %if.then.31
  %58 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc34 = getelementptr inbounds %struct._ts, %struct._ts* %58, i32 0, i32 9
  %59 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc34, align 8
  %60 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj35 = getelementptr inbounds %struct._ts, %struct._ts* %60, i32 0, i32 11
  %61 = load %struct._object*, %struct._object** %c_profileobj35, align 8
  %62 = load %struct._ts*, %struct._ts** %tstate, align 8
  %63 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame36 = getelementptr inbounds %struct._ts, %struct._ts* %63, i32 0, i32 3
  %64 = load %struct._frame*, %struct._frame** %frame36, align 8
  %65 = load %struct._object*, %struct._object** %func, align 8
  %call37 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %59, %struct._object* %61, %struct._ts* %62, %struct._frame* %64, i32 5, %struct._object* %65)
  br label %if.end.51

if.else.38:                                       ; preds = %if.then.31
  %66 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc39 = getelementptr inbounds %struct._ts, %struct._ts* %66, i32 0, i32 9
  %67 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc39, align 8
  %68 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj40 = getelementptr inbounds %struct._ts, %struct._ts* %68, i32 0, i32 11
  %69 = load %struct._object*, %struct._object** %c_profileobj40, align 8
  %70 = load %struct._ts*, %struct._ts** %tstate, align 8
  %71 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame41 = getelementptr inbounds %struct._ts, %struct._ts* %71, i32 0, i32 3
  %72 = load %struct._frame*, %struct._frame** %frame41, align 8
  %73 = load %struct._object*, %struct._object** %func, align 8
  %call42 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %67, %struct._object* %69, %struct._ts* %70, %struct._frame* %72, i32 6, %struct._object* %73)
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then.44, label %if.end.50

if.then.44:                                       ; preds = %if.else.38
  br label %do.body

do.body:                                          ; preds = %if.then.44
  %74 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %74, %struct._object** %_py_decref_tmp, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %75, i32 0, i32 0
  %76 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %76, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp46 = icmp ne i64 %dec, 0
  br i1 %cmp46, label %if.then.47, label %if.else.48

if.then.47:                                       ; preds = %do.body
  br label %if.end

if.else.48:                                       ; preds = %do.body
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 1
  %78 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %78, i32 0, i32 4
  %79 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %79(%struct._object* %80)
  br label %if.end

if.end:                                           ; preds = %if.else.48, %if.then.47
  br label %do.end

do.end:                                           ; preds = %if.end
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.50

if.end.50:                                        ; preds = %do.end, %if.else.38
  br label %if.end.51

if.end.51:                                        ; preds = %if.end.50, %if.then.33
  br label %if.end.52

if.end.52:                                        ; preds = %if.end.51, %if.else
  br label %if.end.53

if.end.53:                                        ; preds = %if.end.52, %if.then.27
  br label %if.end.56

if.else.54:                                       ; preds = %land.lhs.true.22, %if.then.20
  %81 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %meth, align 8
  %82 = load %struct._object*, %struct._object** %self, align 8
  %call55 = call %struct._object* %81(%struct._object* %82, %struct._object* null)
  store %struct._object* %call55, %struct._object** %x, align 8
  br label %if.end.56

if.end.56:                                        ; preds = %if.else.54, %if.end.53
  br label %if.end.127

if.else.57:                                       ; preds = %land.lhs.true.18, %cond.end
  %83 = load i32, i32* %flags, align 4
  %and58 = and i32 %83, 8
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %land.lhs.true.60, label %if.else.125

land.lhs.true.60:                                 ; preds = %if.else.57
  %84 = load i32, i32* %na, align 4
  %cmp61 = icmp eq i32 %84, 1
  br i1 %cmp61, label %if.then.62, label %if.else.125

if.then.62:                                       ; preds = %land.lhs.true.60
  %85 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %86 = load %struct._object**, %struct._object*** %85, align 8
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %86, i32 -1
  store %struct._object** %incdec.ptr, %struct._object*** %85, align 8
  %87 = load %struct._object*, %struct._object** %incdec.ptr, align 8
  store %struct._object* %87, %struct._object** %arg, align 8
  %88 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing64 = getelementptr inbounds %struct._ts, %struct._ts* %88, i32 0, i32 8
  %89 = load i32, i32* %use_tracing64, align 4
  %tobool65 = icmp ne i32 %89, 0
  br i1 %tobool65, label %land.lhs.true.66, label %if.else.110

land.lhs.true.66:                                 ; preds = %if.then.62
  %90 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc67 = getelementptr inbounds %struct._ts, %struct._ts* %90, i32 0, i32 9
  %91 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc67, align 8
  %tobool68 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %91, null
  br i1 %tobool68, label %if.then.69, label %if.else.110

if.then.69:                                       ; preds = %land.lhs.true.66
  %92 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc70 = getelementptr inbounds %struct._ts, %struct._ts* %92, i32 0, i32 9
  %93 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc70, align 8
  %94 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj71 = getelementptr inbounds %struct._ts, %struct._ts* %94, i32 0, i32 11
  %95 = load %struct._object*, %struct._object** %c_profileobj71, align 8
  %96 = load %struct._ts*, %struct._ts** %tstate, align 8
  %97 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame72 = getelementptr inbounds %struct._ts, %struct._ts* %97, i32 0, i32 3
  %98 = load %struct._frame*, %struct._frame** %frame72, align 8
  %99 = load %struct._object*, %struct._object** %func, align 8
  %call73 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %93, %struct._object* %95, %struct._ts* %96, %struct._frame* %98, i32 4, %struct._object* %99)
  %tobool74 = icmp ne i32 %call73, 0
  br i1 %tobool74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %if.then.69
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.109

if.else.76:                                       ; preds = %if.then.69
  %100 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %meth, align 8
  %101 = load %struct._object*, %struct._object** %self, align 8
  %102 = load %struct._object*, %struct._object** %arg, align 8
  %call77 = call %struct._object* %100(%struct._object* %101, %struct._object* %102)
  store %struct._object* %call77, %struct._object** %x, align 8
  %103 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc78 = getelementptr inbounds %struct._ts, %struct._ts* %103, i32 0, i32 9
  %104 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc78, align 8
  %cmp79 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %104, null
  br i1 %cmp79, label %if.then.80, label %if.end.108

if.then.80:                                       ; preds = %if.else.76
  %105 = load %struct._object*, %struct._object** %x, align 8
  %cmp81 = icmp eq %struct._object* %105, null
  br i1 %cmp81, label %if.then.82, label %if.else.87

if.then.82:                                       ; preds = %if.then.80
  %106 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc83 = getelementptr inbounds %struct._ts, %struct._ts* %106, i32 0, i32 9
  %107 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc83, align 8
  %108 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj84 = getelementptr inbounds %struct._ts, %struct._ts* %108, i32 0, i32 11
  %109 = load %struct._object*, %struct._object** %c_profileobj84, align 8
  %110 = load %struct._ts*, %struct._ts** %tstate, align 8
  %111 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame85 = getelementptr inbounds %struct._ts, %struct._ts* %111, i32 0, i32 3
  %112 = load %struct._frame*, %struct._frame** %frame85, align 8
  %113 = load %struct._object*, %struct._object** %func, align 8
  %call86 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %107, %struct._object* %109, %struct._ts* %110, %struct._frame* %112, i32 5, %struct._object* %113)
  br label %if.end.107

if.else.87:                                       ; preds = %if.then.80
  %114 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc88 = getelementptr inbounds %struct._ts, %struct._ts* %114, i32 0, i32 9
  %115 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc88, align 8
  %116 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj89 = getelementptr inbounds %struct._ts, %struct._ts* %116, i32 0, i32 11
  %117 = load %struct._object*, %struct._object** %c_profileobj89, align 8
  %118 = load %struct._ts*, %struct._ts** %tstate, align 8
  %119 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame90 = getelementptr inbounds %struct._ts, %struct._ts* %119, i32 0, i32 3
  %120 = load %struct._frame*, %struct._frame** %frame90, align 8
  %121 = load %struct._object*, %struct._object** %func, align 8
  %call91 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %115, %struct._object* %117, %struct._ts* %118, %struct._frame* %120, i32 6, %struct._object* %121)
  %tobool92 = icmp ne i32 %call91, 0
  br i1 %tobool92, label %if.then.93, label %if.end.106

if.then.93:                                       ; preds = %if.else.87
  br label %do.body.94

do.body.94:                                       ; preds = %if.then.93
  %122 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %122, %struct._object** %_py_decref_tmp96, align 8
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_refcnt97 = getelementptr inbounds %struct._object, %struct._object* %123, i32 0, i32 0
  %124 = load i64, i64* %ob_refcnt97, align 8
  %dec98 = add i64 %124, -1
  store i64 %dec98, i64* %ob_refcnt97, align 8
  %cmp99 = icmp ne i64 %dec98, 0
  br i1 %cmp99, label %if.then.100, label %if.else.101

if.then.100:                                      ; preds = %do.body.94
  br label %if.end.104

if.else.101:                                      ; preds = %do.body.94
  %125 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  %ob_type102 = getelementptr inbounds %struct._object, %struct._object* %125, i32 0, i32 1
  %126 = load %struct._typeobject*, %struct._typeobject** %ob_type102, align 8
  %tp_dealloc103 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %126, i32 0, i32 4
  %127 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc103, align 8
  %128 = load %struct._object*, %struct._object** %_py_decref_tmp96, align 8
  call void %127(%struct._object* %128)
  br label %if.end.104

if.end.104:                                       ; preds = %if.else.101, %if.then.100
  br label %do.end.105

do.end.105:                                       ; preds = %if.end.104
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.106

if.end.106:                                       ; preds = %do.end.105, %if.else.87
  br label %if.end.107

if.end.107:                                       ; preds = %if.end.106, %if.then.82
  br label %if.end.108

if.end.108:                                       ; preds = %if.end.107, %if.else.76
  br label %if.end.109

if.end.109:                                       ; preds = %if.end.108, %if.then.75
  br label %if.end.112

if.else.110:                                      ; preds = %land.lhs.true.66, %if.then.62
  %129 = load %struct._object* (%struct._object*, %struct._object*)*, %struct._object* (%struct._object*, %struct._object*)** %meth, align 8
  %130 = load %struct._object*, %struct._object** %self, align 8
  %131 = load %struct._object*, %struct._object** %arg, align 8
  %call111 = call %struct._object* %129(%struct._object* %130, %struct._object* %131)
  store %struct._object* %call111, %struct._object** %x, align 8
  br label %if.end.112

if.end.112:                                       ; preds = %if.else.110, %if.end.109
  br label %do.body.113

do.body.113:                                      ; preds = %if.end.112
  %132 = load %struct._object*, %struct._object** %arg, align 8
  store %struct._object* %132, %struct._object** %_py_decref_tmp115, align 8
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_refcnt116 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 0
  %134 = load i64, i64* %ob_refcnt116, align 8
  %dec117 = add i64 %134, -1
  store i64 %dec117, i64* %ob_refcnt116, align 8
  %cmp118 = icmp ne i64 %dec117, 0
  br i1 %cmp118, label %if.then.119, label %if.else.120

if.then.119:                                      ; preds = %do.body.113
  br label %if.end.123

if.else.120:                                      ; preds = %do.body.113
  %135 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  %ob_type121 = getelementptr inbounds %struct._object, %struct._object* %135, i32 0, i32 1
  %136 = load %struct._typeobject*, %struct._typeobject** %ob_type121, align 8
  %tp_dealloc122 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %136, i32 0, i32 4
  %137 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc122, align 8
  %138 = load %struct._object*, %struct._object** %_py_decref_tmp115, align 8
  call void %137(%struct._object* %138)
  br label %if.end.123

if.end.123:                                       ; preds = %if.else.120, %if.then.119
  br label %do.end.124

do.end.124:                                       ; preds = %if.end.123
  br label %if.end.126

if.else.125:                                      ; preds = %land.lhs.true.60, %if.else.57
  %139 = load %struct._object*, %struct._object** %func, align 8
  %140 = load i32, i32* %flags, align 4
  %141 = load i32, i32* %na, align 4
  call void @err_args(%struct._object* %139, i32 %140, i32 %141)
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.126

if.end.126:                                       ; preds = %if.else.125, %do.end.124
  br label %if.end.127

if.end.127:                                       ; preds = %if.end.126, %if.end.56
  br label %if.end.202

if.else.128:                                      ; preds = %sw.epilog.6
  %142 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %143 = load i32, i32* %na, align 4
  %call130 = call %struct._object* @load_args(%struct._object*** %142, i32 %143)
  store %struct._object* %call130, %struct._object** %callargs, align 8
  %144 = load %struct._object*, %struct._object** %callargs, align 8
  %cmp131 = icmp ne %struct._object* %144, null
  br i1 %cmp131, label %if.then.132, label %if.else.200

if.then.132:                                      ; preds = %if.else.128
  %145 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing133 = getelementptr inbounds %struct._ts, %struct._ts* %145, i32 0, i32 8
  %146 = load i32, i32* %use_tracing133, align 4
  %tobool134 = icmp ne i32 %146, 0
  br i1 %tobool134, label %land.lhs.true.135, label %if.else.179

land.lhs.true.135:                                ; preds = %if.then.132
  %147 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc136 = getelementptr inbounds %struct._ts, %struct._ts* %147, i32 0, i32 9
  %148 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc136, align 8
  %tobool137 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %148, null
  br i1 %tobool137, label %if.then.138, label %if.else.179

if.then.138:                                      ; preds = %land.lhs.true.135
  %149 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc139 = getelementptr inbounds %struct._ts, %struct._ts* %149, i32 0, i32 9
  %150 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc139, align 8
  %151 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj140 = getelementptr inbounds %struct._ts, %struct._ts* %151, i32 0, i32 11
  %152 = load %struct._object*, %struct._object** %c_profileobj140, align 8
  %153 = load %struct._ts*, %struct._ts** %tstate, align 8
  %154 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame141 = getelementptr inbounds %struct._ts, %struct._ts* %154, i32 0, i32 3
  %155 = load %struct._frame*, %struct._frame** %frame141, align 8
  %156 = load %struct._object*, %struct._object** %func, align 8
  %call142 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %150, %struct._object* %152, %struct._ts* %153, %struct._frame* %155, i32 4, %struct._object* %156)
  %tobool143 = icmp ne i32 %call142, 0
  br i1 %tobool143, label %if.then.144, label %if.else.145

if.then.144:                                      ; preds = %if.then.138
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.178

if.else.145:                                      ; preds = %if.then.138
  %157 = load %struct._object*, %struct._object** %func, align 8
  %158 = load %struct._object*, %struct._object** %callargs, align 8
  %call146 = call %struct._object* @PyCFunction_Call(%struct._object* %157, %struct._object* %158, %struct._object* null)
  store %struct._object* %call146, %struct._object** %x, align 8
  %159 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc147 = getelementptr inbounds %struct._ts, %struct._ts* %159, i32 0, i32 9
  %160 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc147, align 8
  %cmp148 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %160, null
  br i1 %cmp148, label %if.then.149, label %if.end.177

if.then.149:                                      ; preds = %if.else.145
  %161 = load %struct._object*, %struct._object** %x, align 8
  %cmp150 = icmp eq %struct._object* %161, null
  br i1 %cmp150, label %if.then.151, label %if.else.156

if.then.151:                                      ; preds = %if.then.149
  %162 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc152 = getelementptr inbounds %struct._ts, %struct._ts* %162, i32 0, i32 9
  %163 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc152, align 8
  %164 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj153 = getelementptr inbounds %struct._ts, %struct._ts* %164, i32 0, i32 11
  %165 = load %struct._object*, %struct._object** %c_profileobj153, align 8
  %166 = load %struct._ts*, %struct._ts** %tstate, align 8
  %167 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame154 = getelementptr inbounds %struct._ts, %struct._ts* %167, i32 0, i32 3
  %168 = load %struct._frame*, %struct._frame** %frame154, align 8
  %169 = load %struct._object*, %struct._object** %func, align 8
  %call155 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %163, %struct._object* %165, %struct._ts* %166, %struct._frame* %168, i32 5, %struct._object* %169)
  br label %if.end.176

if.else.156:                                      ; preds = %if.then.149
  %170 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc157 = getelementptr inbounds %struct._ts, %struct._ts* %170, i32 0, i32 9
  %171 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc157, align 8
  %172 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj158 = getelementptr inbounds %struct._ts, %struct._ts* %172, i32 0, i32 11
  %173 = load %struct._object*, %struct._object** %c_profileobj158, align 8
  %174 = load %struct._ts*, %struct._ts** %tstate, align 8
  %175 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame159 = getelementptr inbounds %struct._ts, %struct._ts* %175, i32 0, i32 3
  %176 = load %struct._frame*, %struct._frame** %frame159, align 8
  %177 = load %struct._object*, %struct._object** %func, align 8
  %call160 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %171, %struct._object* %173, %struct._ts* %174, %struct._frame* %176, i32 6, %struct._object* %177)
  %tobool161 = icmp ne i32 %call160, 0
  br i1 %tobool161, label %if.then.162, label %if.end.175

if.then.162:                                      ; preds = %if.else.156
  br label %do.body.163

do.body.163:                                      ; preds = %if.then.162
  %178 = load %struct._object*, %struct._object** %x, align 8
  store %struct._object* %178, %struct._object** %_py_decref_tmp165, align 8
  %179 = load %struct._object*, %struct._object** %_py_decref_tmp165, align 8
  %ob_refcnt166 = getelementptr inbounds %struct._object, %struct._object* %179, i32 0, i32 0
  %180 = load i64, i64* %ob_refcnt166, align 8
  %dec167 = add i64 %180, -1
  store i64 %dec167, i64* %ob_refcnt166, align 8
  %cmp168 = icmp ne i64 %dec167, 0
  br i1 %cmp168, label %if.then.169, label %if.else.170

if.then.169:                                      ; preds = %do.body.163
  br label %if.end.173

if.else.170:                                      ; preds = %do.body.163
  %181 = load %struct._object*, %struct._object** %_py_decref_tmp165, align 8
  %ob_type171 = getelementptr inbounds %struct._object, %struct._object* %181, i32 0, i32 1
  %182 = load %struct._typeobject*, %struct._typeobject** %ob_type171, align 8
  %tp_dealloc172 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %182, i32 0, i32 4
  %183 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc172, align 8
  %184 = load %struct._object*, %struct._object** %_py_decref_tmp165, align 8
  call void %183(%struct._object* %184)
  br label %if.end.173

if.end.173:                                       ; preds = %if.else.170, %if.then.169
  br label %do.end.174

do.end.174:                                       ; preds = %if.end.173
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.175

if.end.175:                                       ; preds = %do.end.174, %if.else.156
  br label %if.end.176

if.end.176:                                       ; preds = %if.end.175, %if.then.151
  br label %if.end.177

if.end.177:                                       ; preds = %if.end.176, %if.else.145
  br label %if.end.178

if.end.178:                                       ; preds = %if.end.177, %if.then.144
  br label %if.end.181

if.else.179:                                      ; preds = %land.lhs.true.135, %if.then.132
  %185 = load %struct._object*, %struct._object** %func, align 8
  %186 = load %struct._object*, %struct._object** %callargs, align 8
  %call180 = call %struct._object* @PyCFunction_Call(%struct._object* %185, %struct._object* %186, %struct._object* null)
  store %struct._object* %call180, %struct._object** %x, align 8
  br label %if.end.181

if.end.181:                                       ; preds = %if.else.179, %if.end.178
  br label %do.body.182

do.body.182:                                      ; preds = %if.end.181
  %187 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %187, %struct._object** %_py_xdecref_tmp, align 8
  %188 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp184 = icmp ne %struct._object* %188, null
  br i1 %cmp184, label %if.then.185, label %if.end.198

if.then.185:                                      ; preds = %do.body.182
  br label %do.body.186

do.body.186:                                      ; preds = %if.then.185
  %189 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %189, %struct._object** %_py_decref_tmp188, align 8
  %190 = load %struct._object*, %struct._object** %_py_decref_tmp188, align 8
  %ob_refcnt189 = getelementptr inbounds %struct._object, %struct._object* %190, i32 0, i32 0
  %191 = load i64, i64* %ob_refcnt189, align 8
  %dec190 = add i64 %191, -1
  store i64 %dec190, i64* %ob_refcnt189, align 8
  %cmp191 = icmp ne i64 %dec190, 0
  br i1 %cmp191, label %if.then.192, label %if.else.193

if.then.192:                                      ; preds = %do.body.186
  br label %if.end.196

if.else.193:                                      ; preds = %do.body.186
  %192 = load %struct._object*, %struct._object** %_py_decref_tmp188, align 8
  %ob_type194 = getelementptr inbounds %struct._object, %struct._object* %192, i32 0, i32 1
  %193 = load %struct._typeobject*, %struct._typeobject** %ob_type194, align 8
  %tp_dealloc195 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %193, i32 0, i32 4
  %194 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc195, align 8
  %195 = load %struct._object*, %struct._object** %_py_decref_tmp188, align 8
  call void %194(%struct._object* %195)
  br label %if.end.196

if.end.196:                                       ; preds = %if.else.193, %if.then.192
  br label %do.end.197

do.end.197:                                       ; preds = %if.end.196
  br label %if.end.198

if.end.198:                                       ; preds = %do.end.197, %do.body.182
  br label %do.end.199

do.end.199:                                       ; preds = %if.end.198
  br label %if.end.201

if.else.200:                                      ; preds = %if.else.128
  store %struct._object* null, %struct._object** %x, align 8
  br label %if.end.201

if.end.201:                                       ; preds = %if.else.200, %do.end.199
  br label %if.end.202

if.end.202:                                       ; preds = %if.end.201, %if.end.127
  br label %if.end.252

if.else.203:                                      ; preds = %land.lhs.true, %entry
  %196 = load %struct._object*, %struct._object** %func, align 8
  %ob_type204 = getelementptr inbounds %struct._object, %struct._object* %196, i32 0, i32 1
  %197 = load %struct._typeobject*, %struct._typeobject** %ob_type204, align 8
  %cmp205 = icmp eq %struct._typeobject* %197, @PyMethod_Type
  br i1 %cmp205, label %land.lhs.true.206, label %if.else.229

land.lhs.true.206:                                ; preds = %if.else.203
  %198 = load %struct._object*, %struct._object** %func, align 8
  %199 = bitcast %struct._object* %198 to %struct.PyMethodObject*
  %im_self = getelementptr inbounds %struct.PyMethodObject, %struct.PyMethodObject* %199, i32 0, i32 2
  %200 = load %struct._object*, %struct._object** %im_self, align 8
  %cmp207 = icmp ne %struct._object* %200, null
  br i1 %cmp207, label %if.then.208, label %if.else.229

if.then.208:                                      ; preds = %land.lhs.true.206
  %201 = load %struct._object*, %struct._object** %func, align 8
  %202 = bitcast %struct._object* %201 to %struct.PyMethodObject*
  %im_self211 = getelementptr inbounds %struct.PyMethodObject, %struct.PyMethodObject* %202, i32 0, i32 2
  %203 = load %struct._object*, %struct._object** %im_self211, align 8
  store %struct._object* %203, %struct._object** %self210, align 8
  %204 = load %struct._object*, %struct._object** %self210, align 8
  %ob_refcnt212 = getelementptr inbounds %struct._object, %struct._object* %204, i32 0, i32 0
  %205 = load i64, i64* %ob_refcnt212, align 8
  %inc = add i64 %205, 1
  store i64 %inc, i64* %ob_refcnt212, align 8
  %206 = load %struct._object*, %struct._object** %func, align 8
  %207 = bitcast %struct._object* %206 to %struct.PyMethodObject*
  %im_func = getelementptr inbounds %struct.PyMethodObject, %struct.PyMethodObject* %207, i32 0, i32 1
  %208 = load %struct._object*, %struct._object** %im_func, align 8
  store %struct._object* %208, %struct._object** %func, align 8
  %209 = load %struct._object*, %struct._object** %func, align 8
  %ob_refcnt213 = getelementptr inbounds %struct._object, %struct._object* %209, i32 0, i32 0
  %210 = load i64, i64* %ob_refcnt213, align 8
  %inc214 = add i64 %210, 1
  store i64 %inc214, i64* %ob_refcnt213, align 8
  br label %do.body.215

do.body.215:                                      ; preds = %if.then.208
  %211 = load %struct._object**, %struct._object*** %pfunc, align 8
  %212 = load %struct._object*, %struct._object** %211, align 8
  store %struct._object* %212, %struct._object** %_py_decref_tmp217, align 8
  %213 = load %struct._object*, %struct._object** %_py_decref_tmp217, align 8
  %ob_refcnt218 = getelementptr inbounds %struct._object, %struct._object* %213, i32 0, i32 0
  %214 = load i64, i64* %ob_refcnt218, align 8
  %dec219 = add i64 %214, -1
  store i64 %dec219, i64* %ob_refcnt218, align 8
  %cmp220 = icmp ne i64 %dec219, 0
  br i1 %cmp220, label %if.then.221, label %if.else.222

if.then.221:                                      ; preds = %do.body.215
  br label %if.end.225

if.else.222:                                      ; preds = %do.body.215
  %215 = load %struct._object*, %struct._object** %_py_decref_tmp217, align 8
  %ob_type223 = getelementptr inbounds %struct._object, %struct._object* %215, i32 0, i32 1
  %216 = load %struct._typeobject*, %struct._typeobject** %ob_type223, align 8
  %tp_dealloc224 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %216, i32 0, i32 4
  %217 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc224, align 8
  %218 = load %struct._object*, %struct._object** %_py_decref_tmp217, align 8
  call void %217(%struct._object* %218)
  br label %if.end.225

if.end.225:                                       ; preds = %if.else.222, %if.then.221
  br label %do.end.226

do.end.226:                                       ; preds = %if.end.225
  %219 = load %struct._object*, %struct._object** %self210, align 8
  %220 = load %struct._object**, %struct._object*** %pfunc, align 8
  store %struct._object* %219, %struct._object** %220, align 8
  %221 = load i32, i32* %na, align 4
  %inc227 = add i32 %221, 1
  store i32 %inc227, i32* %na, align 4
  %222 = load i32, i32* %n, align 4
  %inc228 = add i32 %222, 1
  store i32 %inc228, i32* %n, align 4
  br label %if.end.232

if.else.229:                                      ; preds = %land.lhs.true.206, %if.else.203
  %223 = load %struct._object*, %struct._object** %func, align 8
  %ob_refcnt230 = getelementptr inbounds %struct._object, %struct._object* %223, i32 0, i32 0
  %224 = load i64, i64* %ob_refcnt230, align 8
  %inc231 = add i64 %224, 1
  store i64 %inc231, i64* %ob_refcnt230, align 8
  br label %if.end.232

if.end.232:                                       ; preds = %if.else.229, %do.end.226
  %225 = load %struct._object*, %struct._object** %func, align 8
  %ob_type233 = getelementptr inbounds %struct._object, %struct._object* %225, i32 0, i32 1
  %226 = load %struct._typeobject*, %struct._typeobject** %ob_type233, align 8
  %cmp234 = icmp eq %struct._typeobject* %226, @PyFunction_Type
  br i1 %cmp234, label %if.then.235, label %if.else.237

if.then.235:                                      ; preds = %if.end.232
  %227 = load %struct._object*, %struct._object** %func, align 8
  %228 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %229 = load i32, i32* %n, align 4
  %230 = load i32, i32* %na, align 4
  %231 = load i32, i32* %nk, align 4
  %call236 = call %struct._object* @fast_function(%struct._object* %227, %struct._object*** %228, i32 %229, i32 %230, i32 %231)
  store %struct._object* %call236, %struct._object** %x, align 8
  br label %if.end.239

if.else.237:                                      ; preds = %if.end.232
  %232 = load %struct._object*, %struct._object** %func, align 8
  %233 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %234 = load i32, i32* %na, align 4
  %235 = load i32, i32* %nk, align 4
  %call238 = call %struct._object* @do_call(%struct._object* %232, %struct._object*** %233, i32 %234, i32 %235)
  store %struct._object* %call238, %struct._object** %x, align 8
  br label %if.end.239

if.end.239:                                       ; preds = %if.else.237, %if.then.235
  br label %do.body.240

do.body.240:                                      ; preds = %if.end.239
  %236 = load %struct._object*, %struct._object** %func, align 8
  store %struct._object* %236, %struct._object** %_py_decref_tmp242, align 8
  %237 = load %struct._object*, %struct._object** %_py_decref_tmp242, align 8
  %ob_refcnt243 = getelementptr inbounds %struct._object, %struct._object* %237, i32 0, i32 0
  %238 = load i64, i64* %ob_refcnt243, align 8
  %dec244 = add i64 %238, -1
  store i64 %dec244, i64* %ob_refcnt243, align 8
  %cmp245 = icmp ne i64 %dec244, 0
  br i1 %cmp245, label %if.then.246, label %if.else.247

if.then.246:                                      ; preds = %do.body.240
  br label %if.end.250

if.else.247:                                      ; preds = %do.body.240
  %239 = load %struct._object*, %struct._object** %_py_decref_tmp242, align 8
  %ob_type248 = getelementptr inbounds %struct._object, %struct._object* %239, i32 0, i32 1
  %240 = load %struct._typeobject*, %struct._typeobject** %ob_type248, align 8
  %tp_dealloc249 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %240, i32 0, i32 4
  %241 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc249, align 8
  %242 = load %struct._object*, %struct._object** %_py_decref_tmp242, align 8
  call void %241(%struct._object* %242)
  br label %if.end.250

if.end.250:                                       ; preds = %if.else.247, %if.then.246
  br label %do.end.251

do.end.251:                                       ; preds = %if.end.250
  br label %if.end.252

if.end.252:                                       ; preds = %do.end.251, %if.end.202
  br label %while.cond

while.cond:                                       ; preds = %do.end.266, %if.end.252
  %243 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %244 = load %struct._object**, %struct._object*** %243, align 8
  %245 = load %struct._object**, %struct._object*** %pfunc, align 8
  %cmp253 = icmp ugt %struct._object** %244, %245
  br i1 %cmp253, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %246 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %247 = load %struct._object**, %struct._object*** %246, align 8
  %incdec.ptr254 = getelementptr %struct._object*, %struct._object** %247, i32 -1
  store %struct._object** %incdec.ptr254, %struct._object*** %246, align 8
  %248 = load %struct._object*, %struct._object** %incdec.ptr254, align 8
  store %struct._object* %248, %struct._object** %w, align 8
  br label %do.body.255

do.body.255:                                      ; preds = %while.body
  %249 = load %struct._object*, %struct._object** %w, align 8
  store %struct._object* %249, %struct._object** %_py_decref_tmp257, align 8
  %250 = load %struct._object*, %struct._object** %_py_decref_tmp257, align 8
  %ob_refcnt258 = getelementptr inbounds %struct._object, %struct._object* %250, i32 0, i32 0
  %251 = load i64, i64* %ob_refcnt258, align 8
  %dec259 = add i64 %251, -1
  store i64 %dec259, i64* %ob_refcnt258, align 8
  %cmp260 = icmp ne i64 %dec259, 0
  br i1 %cmp260, label %if.then.261, label %if.else.262

if.then.261:                                      ; preds = %do.body.255
  br label %if.end.265

if.else.262:                                      ; preds = %do.body.255
  %252 = load %struct._object*, %struct._object** %_py_decref_tmp257, align 8
  %ob_type263 = getelementptr inbounds %struct._object, %struct._object* %252, i32 0, i32 1
  %253 = load %struct._typeobject*, %struct._typeobject** %ob_type263, align 8
  %tp_dealloc264 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %253, i32 0, i32 4
  %254 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc264, align 8
  %255 = load %struct._object*, %struct._object** %_py_decref_tmp257, align 8
  call void %254(%struct._object* %255)
  br label %if.end.265

if.end.265:                                       ; preds = %if.else.262, %if.then.261
  br label %do.end.266

do.end.266:                                       ; preds = %if.end.265
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %256 = load %struct._object*, %struct._object** %x, align 8
  ret %struct._object* %256
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @ext_do_call(%struct._object* %func, %struct._object*** %pp_stack, i32 %flags, i32 %na, i32 %nk) #0 {
entry:
  %func.addr = alloca %struct._object*, align 8
  %pp_stack.addr = alloca %struct._object***, align 8
  %flags.addr = alloca i32, align 4
  %na.addr = alloca i32, align 4
  %nk.addr = alloca i32, align 4
  %nstar = alloca i32, align 4
  %callargs = alloca %struct._object*, align 8
  %stararg = alloca %struct._object*, align 8
  %kwdict = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %d = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp22 = alloca %struct._object*, align 8
  %t = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result87 = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %_py_decref_tmp120 = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp148 = alloca %struct._object*, align 8
  %_py_xdecref_tmp163 = alloca %struct._object*, align 8
  %_py_decref_tmp169 = alloca %struct._object*, align 8
  %_py_xdecref_tmp184 = alloca %struct._object*, align 8
  %_py_decref_tmp190 = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object*** %pp_stack, %struct._object**** %pp_stack.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %na, i32* %na.addr, align 4
  store i32 %nk, i32* %nk.addr, align 4
  store i32 0, i32* %nstar, align 4
  store %struct._object* null, %struct._object** %callargs, align 8
  store %struct._object* null, %struct._object** %stararg, align 8
  store %struct._object* null, %struct._object** %kwdict, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 2
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.end.33

if.then:                                          ; preds = %entry
  %1 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %2 = load %struct._object**, %struct._object*** %1, align 8
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %2, i32 -1
  store %struct._object** %incdec.ptr, %struct._object*** %1, align 8
  %3 = load %struct._object*, %struct._object** %incdec.ptr, align 8
  store %struct._object* %3, %struct._object** %kwdict, align 8
  %4 = load %struct._object*, %struct._object** %kwdict, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_flags = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 19
  %6 = load i64, i64* %tp_flags, align 8
  %and1 = and i64 %6, 536870912
  %cmp = icmp ne i64 %and1, 0
  br i1 %cmp, label %if.end.32, label %if.then.2

if.then.2:                                        ; preds = %if.then
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %d, align 8
  %7 = load %struct._object*, %struct._object** %d, align 8
  %cmp3 = icmp eq %struct._object* %7, null
  br i1 %cmp3, label %if.then.4, label %if.end

if.then.4:                                        ; preds = %if.then.2
  br label %ext_call_fail

if.end:                                           ; preds = %if.then.2
  %8 = load %struct._object*, %struct._object** %d, align 8
  %9 = load %struct._object*, %struct._object** %kwdict, align 8
  %call5 = call i32 @PyDict_Update(%struct._object* %8, %struct._object* %9)
  %cmp6 = icmp ne i32 %call5, 0
  br i1 %cmp6, label %if.then.7, label %if.end.20

if.then.7:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.7
  %10 = load %struct._object*, %struct._object** %d, align 8
  store %struct._object* %10, %struct._object** %_py_decref_tmp, align 8
  %11 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %11, i32 0, i32 0
  %12 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %12, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body
  br label %if.end.11

if.else:                                          ; preds = %do.body
  %13 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %13, i32 0, i32 1
  %14 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %14, i32 0, i32 4
  %15 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %16 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %15(%struct._object* %16)
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end.11
  %17 = load %struct._object*, %struct._object** @PyExc_AttributeError, align 8
  %call12 = call i32 @PyErr_ExceptionMatches(%struct._object* %17)
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then.14, label %if.end.19

if.then.14:                                       ; preds = %do.end
  %18 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %19 = load %struct._object*, %struct._object** %func.addr, align 8
  %call15 = call i8* @PyEval_GetFuncName(%struct._object* %19)
  %20 = load %struct._object*, %struct._object** %func.addr, align 8
  %call16 = call i8* @PyEval_GetFuncDesc(%struct._object* %20)
  %21 = load %struct._object*, %struct._object** %kwdict, align 8
  %ob_type17 = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 1
  %22 = load %struct._typeobject*, %struct._typeobject** %ob_type17, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %22, i32 0, i32 1
  %23 = load i8*, i8** %tp_name, align 8
  %call18 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %18, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.86, i32 0, i32 0), i8* %call15, i8* %call16, i8* %23)
  br label %if.end.19

if.end.19:                                        ; preds = %if.then.14, %do.end
  br label %ext_call_fail

if.end.20:                                        ; preds = %if.end
  br label %do.body.21

do.body.21:                                       ; preds = %if.end.20
  %24 = load %struct._object*, %struct._object** %kwdict, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp22, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_refcnt23 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt23, align 8
  %dec24 = add i64 %26, -1
  store i64 %dec24, i64* %ob_refcnt23, align 8
  %cmp25 = icmp ne i64 %dec24, 0
  br i1 %cmp25, label %if.then.26, label %if.else.27

if.then.26:                                       ; preds = %do.body.21
  br label %if.end.30

if.else.27:                                       ; preds = %do.body.21
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  %ob_type28 = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type28, align 8
  %tp_dealloc29 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc29, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp22, align 8
  call void %29(%struct._object* %30)
  br label %if.end.30

if.end.30:                                        ; preds = %if.else.27, %if.then.26
  br label %do.end.31

do.end.31:                                        ; preds = %if.end.30
  %31 = load %struct._object*, %struct._object** %d, align 8
  store %struct._object* %31, %struct._object** %kwdict, align 8
  br label %if.end.32

if.end.32:                                        ; preds = %do.end.31, %if.then
  br label %if.end.33

if.end.33:                                        ; preds = %if.end.32, %entry
  %32 = load i32, i32* %flags.addr, align 4
  %and34 = and i32 %32, 1
  %tobool35 = icmp ne i32 %and34, 0
  br i1 %tobool35, label %if.then.36, label %if.end.68

if.then.36:                                       ; preds = %if.end.33
  %33 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %34 = load %struct._object**, %struct._object*** %33, align 8
  %incdec.ptr37 = getelementptr %struct._object*, %struct._object** %34, i32 -1
  store %struct._object** %incdec.ptr37, %struct._object*** %33, align 8
  %35 = load %struct._object*, %struct._object** %incdec.ptr37, align 8
  store %struct._object* %35, %struct._object** %stararg, align 8
  %36 = load %struct._object*, %struct._object** %stararg, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 1
  %37 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_flags39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %37, i32 0, i32 19
  %38 = load i64, i64* %tp_flags39, align 8
  %and40 = and i64 %38, 67108864
  %cmp41 = icmp ne i64 %and40, 0
  br i1 %cmp41, label %if.end.67, label %if.then.42

if.then.42:                                       ; preds = %if.then.36
  store %struct._object* null, %struct._object** %t, align 8
  %39 = load %struct._object*, %struct._object** %stararg, align 8
  %call43 = call %struct._object* @PySequence_Tuple(%struct._object* %39)
  store %struct._object* %call43, %struct._object** %t, align 8
  %40 = load %struct._object*, %struct._object** %t, align 8
  %cmp44 = icmp eq %struct._object* %40, null
  br i1 %cmp44, label %if.then.45, label %if.end.55

if.then.45:                                       ; preds = %if.then.42
  %41 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %call46 = call i32 @PyErr_ExceptionMatches(%struct._object* %41)
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.then.48, label %if.end.54

if.then.48:                                       ; preds = %if.then.45
  %42 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %43 = load %struct._object*, %struct._object** %func.addr, align 8
  %call49 = call i8* @PyEval_GetFuncName(%struct._object* %43)
  %44 = load %struct._object*, %struct._object** %func.addr, align 8
  %call50 = call i8* @PyEval_GetFuncDesc(%struct._object* %44)
  %45 = load %struct._object*, %struct._object** %stararg, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_name52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 1
  %47 = load i8*, i8** %tp_name52, align 8
  %call53 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %42, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.87, i32 0, i32 0), i8* %call49, i8* %call50, i8* %47)
  br label %if.end.54

if.end.54:                                        ; preds = %if.then.48, %if.then.45
  br label %ext_call_fail

if.end.55:                                        ; preds = %if.then.42
  br label %do.body.56

do.body.56:                                       ; preds = %if.end.55
  %48 = load %struct._object*, %struct._object** %stararg, align 8
  store %struct._object* %48, %struct._object** %_py_decref_tmp57, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %49, i32 0, i32 0
  %50 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %50, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.56
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.56
  %51 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %51, i32 0, i32 1
  %52 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %52, i32 0, i32 4
  %53 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %54 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %53(%struct._object* %54)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  %55 = load %struct._object*, %struct._object** %t, align 8
  store %struct._object* %55, %struct._object** %stararg, align 8
  br label %if.end.67

if.end.67:                                        ; preds = %do.end.66, %if.then.36
  %56 = load %struct._object*, %struct._object** %stararg, align 8
  %57 = bitcast %struct._object* %56 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %57, i32 0, i32 1
  %58 = load i64, i64* %ob_size, align 8
  %conv = trunc i64 %58 to i32
  store i32 %conv, i32* %nstar, align 4
  br label %if.end.68

if.end.68:                                        ; preds = %if.end.67, %if.end.33
  %59 = load i32, i32* %nk.addr, align 4
  %cmp69 = icmp sgt i32 %59, 0
  br i1 %cmp69, label %if.then.71, label %if.end.77

if.then.71:                                       ; preds = %if.end.68
  %60 = load %struct._object*, %struct._object** %kwdict, align 8
  %61 = load i32, i32* %nk.addr, align 4
  %62 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %63 = load %struct._object*, %struct._object** %func.addr, align 8
  %call72 = call %struct._object* @update_keyword_args(%struct._object* %60, i32 %61, %struct._object*** %62, %struct._object* %63)
  store %struct._object* %call72, %struct._object** %kwdict, align 8
  %64 = load %struct._object*, %struct._object** %kwdict, align 8
  %cmp73 = icmp eq %struct._object* %64, null
  br i1 %cmp73, label %if.then.75, label %if.end.76

if.then.75:                                       ; preds = %if.then.71
  br label %ext_call_fail

if.end.76:                                        ; preds = %if.then.71
  br label %if.end.77

if.end.77:                                        ; preds = %if.end.76, %if.end.68
  %65 = load i32, i32* %na.addr, align 4
  %66 = load i32, i32* %nstar, align 4
  %67 = load %struct._object*, %struct._object** %stararg, align 8
  %68 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %call78 = call %struct._object* @update_star_args(i32 %65, i32 %66, %struct._object* %67, %struct._object*** %68)
  store %struct._object* %call78, %struct._object** %callargs, align 8
  %69 = load %struct._object*, %struct._object** %callargs, align 8
  %cmp79 = icmp eq %struct._object* %69, null
  br i1 %cmp79, label %if.then.81, label %if.end.82

if.then.81:                                       ; preds = %if.end.77
  br label %ext_call_fail

if.end.82:                                        ; preds = %if.end.77
  %70 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 1
  %71 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %cmp84 = icmp eq %struct._typeobject* %71, @PyCFunction_Type
  br i1 %cmp84, label %if.then.86, label %if.else.138

if.then.86:                                       ; preds = %if.end.82
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %72 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %72, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %73 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %74 = bitcast %struct._Py_atomic_address* %73 to i8*
  %75 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %74, i32 %75)
  %76 = load i32, i32* %order, align 4
  switch i32 %76, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.86, %if.then.86, %if.then.86
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.86
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %77 = load i8**, i8*** %volatile_data, align 8
  %78 = load volatile i8*, i8** %77, align 8
  store i8* %78, i8** %result87, align 8
  %79 = load i32, i32* %order, align 4
  switch i32 %79, label %sw.default.89 [
    i32 1, label %sw.bb.88
    i32 3, label %sw.bb.88
    i32 4, label %sw.bb.88
  ]

sw.bb.88:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.90

sw.default.89:                                    ; preds = %sw.epilog
  br label %sw.epilog.90

sw.epilog.90:                                     ; preds = %sw.default.89, %sw.bb.88
  %80 = load i8*, i8** %result87, align 8
  store i8* %80, i8** %tmp
  %81 = load i8*, i8** %tmp
  %82 = bitcast i8* %81 to %struct._ts*
  store %struct._ts* %82, %struct._ts** %tstate, align 8
  %83 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %83, i32 0, i32 8
  %84 = load i32, i32* %use_tracing, align 4
  %tobool91 = icmp ne i32 %84, 0
  br i1 %tobool91, label %land.lhs.true, label %if.else.135

land.lhs.true:                                    ; preds = %sw.epilog.90
  %85 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %85, i32 0, i32 9
  %86 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %tobool92 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %86, null
  br i1 %tobool92, label %if.then.93, label %if.else.135

if.then.93:                                       ; preds = %land.lhs.true
  %87 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc94 = getelementptr inbounds %struct._ts, %struct._ts* %87, i32 0, i32 9
  %88 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc94, align 8
  %89 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj = getelementptr inbounds %struct._ts, %struct._ts* %89, i32 0, i32 11
  %90 = load %struct._object*, %struct._object** %c_profileobj, align 8
  %91 = load %struct._ts*, %struct._ts** %tstate, align 8
  %92 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame = getelementptr inbounds %struct._ts, %struct._ts* %92, i32 0, i32 3
  %93 = load %struct._frame*, %struct._frame** %frame, align 8
  %94 = load %struct._object*, %struct._object** %func.addr, align 8
  %call95 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %88, %struct._object* %90, %struct._ts* %91, %struct._frame* %93, i32 4, %struct._object* %94)
  %tobool96 = icmp ne i32 %call95, 0
  br i1 %tobool96, label %if.then.97, label %if.else.98

if.then.97:                                       ; preds = %if.then.93
  store %struct._object* null, %struct._object** %result, align 8
  br label %if.end.134

if.else.98:                                       ; preds = %if.then.93
  %95 = load %struct._object*, %struct._object** %func.addr, align 8
  %96 = load %struct._object*, %struct._object** %callargs, align 8
  %97 = load %struct._object*, %struct._object** %kwdict, align 8
  %call99 = call %struct._object* @PyCFunction_Call(%struct._object* %95, %struct._object* %96, %struct._object* %97)
  store %struct._object* %call99, %struct._object** %result, align 8
  %98 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc100 = getelementptr inbounds %struct._ts, %struct._ts* %98, i32 0, i32 9
  %99 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc100, align 8
  %cmp101 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %99, null
  br i1 %cmp101, label %if.then.103, label %if.end.133

if.then.103:                                      ; preds = %if.else.98
  %100 = load %struct._object*, %struct._object** %result, align 8
  %cmp104 = icmp eq %struct._object* %100, null
  br i1 %cmp104, label %if.then.106, label %if.else.111

if.then.106:                                      ; preds = %if.then.103
  %101 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc107 = getelementptr inbounds %struct._ts, %struct._ts* %101, i32 0, i32 9
  %102 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc107, align 8
  %103 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj108 = getelementptr inbounds %struct._ts, %struct._ts* %103, i32 0, i32 11
  %104 = load %struct._object*, %struct._object** %c_profileobj108, align 8
  %105 = load %struct._ts*, %struct._ts** %tstate, align 8
  %106 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame109 = getelementptr inbounds %struct._ts, %struct._ts* %106, i32 0, i32 3
  %107 = load %struct._frame*, %struct._frame** %frame109, align 8
  %108 = load %struct._object*, %struct._object** %func.addr, align 8
  %call110 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %102, %struct._object* %104, %struct._ts* %105, %struct._frame* %107, i32 5, %struct._object* %108)
  br label %if.end.132

if.else.111:                                      ; preds = %if.then.103
  %109 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc112 = getelementptr inbounds %struct._ts, %struct._ts* %109, i32 0, i32 9
  %110 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc112, align 8
  %111 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj113 = getelementptr inbounds %struct._ts, %struct._ts* %111, i32 0, i32 11
  %112 = load %struct._object*, %struct._object** %c_profileobj113, align 8
  %113 = load %struct._ts*, %struct._ts** %tstate, align 8
  %114 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame114 = getelementptr inbounds %struct._ts, %struct._ts* %114, i32 0, i32 3
  %115 = load %struct._frame*, %struct._frame** %frame114, align 8
  %116 = load %struct._object*, %struct._object** %func.addr, align 8
  %call115 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %110, %struct._object* %112, %struct._ts* %113, %struct._frame* %115, i32 6, %struct._object* %116)
  %tobool116 = icmp ne i32 %call115, 0
  br i1 %tobool116, label %if.then.117, label %if.end.131

if.then.117:                                      ; preds = %if.else.111
  br label %do.body.118

do.body.118:                                      ; preds = %if.then.117
  %117 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %117, %struct._object** %_py_decref_tmp120, align 8
  %118 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8
  %ob_refcnt121 = getelementptr inbounds %struct._object, %struct._object* %118, i32 0, i32 0
  %119 = load i64, i64* %ob_refcnt121, align 8
  %dec122 = add i64 %119, -1
  store i64 %dec122, i64* %ob_refcnt121, align 8
  %cmp123 = icmp ne i64 %dec122, 0
  br i1 %cmp123, label %if.then.125, label %if.else.126

if.then.125:                                      ; preds = %do.body.118
  br label %if.end.129

if.else.126:                                      ; preds = %do.body.118
  %120 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8
  %ob_type127 = getelementptr inbounds %struct._object, %struct._object* %120, i32 0, i32 1
  %121 = load %struct._typeobject*, %struct._typeobject** %ob_type127, align 8
  %tp_dealloc128 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %121, i32 0, i32 4
  %122 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc128, align 8
  %123 = load %struct._object*, %struct._object** %_py_decref_tmp120, align 8
  call void %122(%struct._object* %123)
  br label %if.end.129

if.end.129:                                       ; preds = %if.else.126, %if.then.125
  br label %do.end.130

do.end.130:                                       ; preds = %if.end.129
  store %struct._object* null, %struct._object** %result, align 8
  br label %if.end.131

if.end.131:                                       ; preds = %do.end.130, %if.else.111
  br label %if.end.132

if.end.132:                                       ; preds = %if.end.131, %if.then.106
  br label %if.end.133

if.end.133:                                       ; preds = %if.end.132, %if.else.98
  br label %if.end.134

if.end.134:                                       ; preds = %if.end.133, %if.then.97
  br label %if.end.137

if.else.135:                                      ; preds = %land.lhs.true, %sw.epilog.90
  %124 = load %struct._object*, %struct._object** %func.addr, align 8
  %125 = load %struct._object*, %struct._object** %callargs, align 8
  %126 = load %struct._object*, %struct._object** %kwdict, align 8
  %call136 = call %struct._object* @PyCFunction_Call(%struct._object* %124, %struct._object* %125, %struct._object* %126)
  store %struct._object* %call136, %struct._object** %result, align 8
  br label %if.end.137

if.end.137:                                       ; preds = %if.else.135, %if.end.134
  br label %if.end.140

if.else.138:                                      ; preds = %if.end.82
  %127 = load %struct._object*, %struct._object** %func.addr, align 8
  %128 = load %struct._object*, %struct._object** %callargs, align 8
  %129 = load %struct._object*, %struct._object** %kwdict, align 8
  %call139 = call %struct._object* @PyObject_Call(%struct._object* %127, %struct._object* %128, %struct._object* %129)
  store %struct._object* %call139, %struct._object** %result, align 8
  br label %if.end.140

if.end.140:                                       ; preds = %if.else.138, %if.end.137
  br label %ext_call_fail

ext_call_fail:                                    ; preds = %if.end.140, %if.then.81, %if.then.75, %if.end.54, %if.end.19, %if.then.4
  br label %do.body.141

do.body.141:                                      ; preds = %ext_call_fail
  %130 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %130, %struct._object** %_py_xdecref_tmp, align 8
  %131 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp143 = icmp ne %struct._object* %131, null
  br i1 %cmp143, label %if.then.145, label %if.end.159

if.then.145:                                      ; preds = %do.body.141
  br label %do.body.146

do.body.146:                                      ; preds = %if.then.145
  %132 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %132, %struct._object** %_py_decref_tmp148, align 8
  %133 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8
  %ob_refcnt149 = getelementptr inbounds %struct._object, %struct._object* %133, i32 0, i32 0
  %134 = load i64, i64* %ob_refcnt149, align 8
  %dec150 = add i64 %134, -1
  store i64 %dec150, i64* %ob_refcnt149, align 8
  %cmp151 = icmp ne i64 %dec150, 0
  br i1 %cmp151, label %if.then.153, label %if.else.154

if.then.153:                                      ; preds = %do.body.146
  br label %if.end.157

if.else.154:                                      ; preds = %do.body.146
  %135 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8
  %ob_type155 = getelementptr inbounds %struct._object, %struct._object* %135, i32 0, i32 1
  %136 = load %struct._typeobject*, %struct._typeobject** %ob_type155, align 8
  %tp_dealloc156 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %136, i32 0, i32 4
  %137 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc156, align 8
  %138 = load %struct._object*, %struct._object** %_py_decref_tmp148, align 8
  call void %137(%struct._object* %138)
  br label %if.end.157

if.end.157:                                       ; preds = %if.else.154, %if.then.153
  br label %do.end.158

do.end.158:                                       ; preds = %if.end.157
  br label %if.end.159

if.end.159:                                       ; preds = %do.end.158, %do.body.141
  br label %do.end.160

do.end.160:                                       ; preds = %if.end.159
  br label %do.body.161

do.body.161:                                      ; preds = %do.end.160
  %139 = load %struct._object*, %struct._object** %kwdict, align 8
  store %struct._object* %139, %struct._object** %_py_xdecref_tmp163, align 8
  %140 = load %struct._object*, %struct._object** %_py_xdecref_tmp163, align 8
  %cmp164 = icmp ne %struct._object* %140, null
  br i1 %cmp164, label %if.then.166, label %if.end.180

if.then.166:                                      ; preds = %do.body.161
  br label %do.body.167

do.body.167:                                      ; preds = %if.then.166
  %141 = load %struct._object*, %struct._object** %_py_xdecref_tmp163, align 8
  store %struct._object* %141, %struct._object** %_py_decref_tmp169, align 8
  %142 = load %struct._object*, %struct._object** %_py_decref_tmp169, align 8
  %ob_refcnt170 = getelementptr inbounds %struct._object, %struct._object* %142, i32 0, i32 0
  %143 = load i64, i64* %ob_refcnt170, align 8
  %dec171 = add i64 %143, -1
  store i64 %dec171, i64* %ob_refcnt170, align 8
  %cmp172 = icmp ne i64 %dec171, 0
  br i1 %cmp172, label %if.then.174, label %if.else.175

if.then.174:                                      ; preds = %do.body.167
  br label %if.end.178

if.else.175:                                      ; preds = %do.body.167
  %144 = load %struct._object*, %struct._object** %_py_decref_tmp169, align 8
  %ob_type176 = getelementptr inbounds %struct._object, %struct._object* %144, i32 0, i32 1
  %145 = load %struct._typeobject*, %struct._typeobject** %ob_type176, align 8
  %tp_dealloc177 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %145, i32 0, i32 4
  %146 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc177, align 8
  %147 = load %struct._object*, %struct._object** %_py_decref_tmp169, align 8
  call void %146(%struct._object* %147)
  br label %if.end.178

if.end.178:                                       ; preds = %if.else.175, %if.then.174
  br label %do.end.179

do.end.179:                                       ; preds = %if.end.178
  br label %if.end.180

if.end.180:                                       ; preds = %do.end.179, %do.body.161
  br label %do.end.181

do.end.181:                                       ; preds = %if.end.180
  br label %do.body.182

do.body.182:                                      ; preds = %do.end.181
  %148 = load %struct._object*, %struct._object** %stararg, align 8
  store %struct._object* %148, %struct._object** %_py_xdecref_tmp184, align 8
  %149 = load %struct._object*, %struct._object** %_py_xdecref_tmp184, align 8
  %cmp185 = icmp ne %struct._object* %149, null
  br i1 %cmp185, label %if.then.187, label %if.end.201

if.then.187:                                      ; preds = %do.body.182
  br label %do.body.188

do.body.188:                                      ; preds = %if.then.187
  %150 = load %struct._object*, %struct._object** %_py_xdecref_tmp184, align 8
  store %struct._object* %150, %struct._object** %_py_decref_tmp190, align 8
  %151 = load %struct._object*, %struct._object** %_py_decref_tmp190, align 8
  %ob_refcnt191 = getelementptr inbounds %struct._object, %struct._object* %151, i32 0, i32 0
  %152 = load i64, i64* %ob_refcnt191, align 8
  %dec192 = add i64 %152, -1
  store i64 %dec192, i64* %ob_refcnt191, align 8
  %cmp193 = icmp ne i64 %dec192, 0
  br i1 %cmp193, label %if.then.195, label %if.else.196

if.then.195:                                      ; preds = %do.body.188
  br label %if.end.199

if.else.196:                                      ; preds = %do.body.188
  %153 = load %struct._object*, %struct._object** %_py_decref_tmp190, align 8
  %ob_type197 = getelementptr inbounds %struct._object, %struct._object* %153, i32 0, i32 1
  %154 = load %struct._typeobject*, %struct._typeobject** %ob_type197, align 8
  %tp_dealloc198 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %154, i32 0, i32 4
  %155 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc198, align 8
  %156 = load %struct._object*, %struct._object** %_py_decref_tmp190, align 8
  call void %155(%struct._object* %156)
  br label %if.end.199

if.end.199:                                       ; preds = %if.else.196, %if.then.195
  br label %do.end.200

do.end.200:                                       ; preds = %if.end.199
  br label %if.end.201

if.end.201:                                       ; preds = %do.end.200, %do.body.182
  br label %do.end.202

do.end.202:                                       ; preds = %if.end.201
  %157 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %157
}

declare %struct._object* @PyFunction_NewWithQualName(%struct._object*, %struct._object*, %struct._object*) #2

declare i32 @PyFunction_SetClosure(%struct._object*, %struct._object*) #2

declare %struct._object* @PyDict_New() #2

declare i64 @PyTuple_Size(%struct._object*) #2

declare i32 @PyFunction_SetAnnotations(%struct._object*, %struct._object*) #2

declare i32 @PyFunction_SetKwDefaults(%struct._object*, %struct._object*) #2

declare i32 @PyFunction_SetDefaults(%struct._object*, %struct._object*) #2

declare %struct._object* @PySlice_New(%struct._object*, %struct._object*, %struct._object*) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

declare i32 @PyFrame_GetLineNumber(%struct._frame*) #2

declare i32 @PyTraceBack_Here(%struct._frame*) #2

declare void @PyErr_Fetch(%struct._object**, %struct._object**, %struct._object**) #2

declare void @PyErr_NormalizeException(%struct._object**, %struct._object**, %struct._object**) #2

declare i32 @PyException_SetTraceback(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal void @restore_and_clear_exc_state(%struct._ts* %tstate, %struct._frame* %f) #0 {
entry:
  %tstate.addr = alloca %struct._ts*, align 8
  %f.addr = alloca %struct._frame*, align 8
  %type = alloca %struct._object*, align 8
  %value = alloca %struct._object*, align 8
  %tb = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp13 = alloca %struct._object*, align 8
  %_py_decref_tmp17 = alloca %struct._object*, align 8
  %_py_xdecref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp34 = alloca %struct._object*, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._frame* %f, %struct._frame** %f.addr, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_type = getelementptr inbounds %struct._ts, %struct._ts* %0, i32 0, i32 16
  %1 = load %struct._object*, %struct._object** %exc_type, align 8
  store %struct._object* %1, %struct._object** %type, align 8
  %2 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_value = getelementptr inbounds %struct._ts, %struct._ts* %2, i32 0, i32 17
  %3 = load %struct._object*, %struct._object** %exc_value, align 8
  store %struct._object* %3, %struct._object** %value, align 8
  %4 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_traceback = getelementptr inbounds %struct._ts, %struct._ts* %4, i32 0, i32 18
  %5 = load %struct._object*, %struct._object** %exc_traceback, align 8
  store %struct._object* %5, %struct._object** %tb, align 8
  %6 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type = getelementptr inbounds %struct._frame, %struct._frame* %6, i32 0, i32 9
  %7 = load %struct._object*, %struct._object** %f_exc_type, align 8
  %8 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_type1 = getelementptr inbounds %struct._ts, %struct._ts* %8, i32 0, i32 16
  store %struct._object* %7, %struct._object** %exc_type1, align 8
  %9 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_value = getelementptr inbounds %struct._frame, %struct._frame* %9, i32 0, i32 10
  %10 = load %struct._object*, %struct._object** %f_exc_value, align 8
  %11 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_value2 = getelementptr inbounds %struct._ts, %struct._ts* %11, i32 0, i32 17
  store %struct._object* %10, %struct._object** %exc_value2, align 8
  %12 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_traceback = getelementptr inbounds %struct._frame, %struct._frame* %12, i32 0, i32 11
  %13 = load %struct._object*, %struct._object** %f_exc_traceback, align 8
  %14 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %exc_traceback3 = getelementptr inbounds %struct._ts, %struct._ts* %14, i32 0, i32 18
  store %struct._object* %13, %struct._object** %exc_traceback3, align 8
  %15 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_type4 = getelementptr inbounds %struct._frame, %struct._frame* %15, i32 0, i32 9
  store %struct._object* null, %struct._object** %f_exc_type4, align 8
  %16 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_value5 = getelementptr inbounds %struct._frame, %struct._frame* %16, i32 0, i32 10
  store %struct._object* null, %struct._object** %f_exc_value5, align 8
  %17 = load %struct._frame*, %struct._frame** %f.addr, align 8
  %f_exc_traceback6 = getelementptr inbounds %struct._frame, %struct._frame* %17, i32 0, i32 11
  store %struct._object* null, %struct._object** %f_exc_traceback6, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %18 = load %struct._object*, %struct._object** %type, align 8
  store %struct._object* %18, %struct._object** %_py_xdecref_tmp, align 8
  %19 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp = icmp ne %struct._object* %19, null
  br i1 %cmp, label %if.then, label %if.end.10

if.then:                                          ; preds = %do.body
  br label %do.body.7

do.body.7:                                        ; preds = %if.then
  %20 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %20, %struct._object** %_py_decref_tmp, align 8
  %21 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %21, i32 0, i32 0
  %22 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %22, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp8 = icmp ne i64 %dec, 0
  br i1 %cmp8, label %if.then.9, label %if.else

if.then.9:                                        ; preds = %do.body.7
  br label %if.end

if.else:                                          ; preds = %do.body.7
  %23 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %23, i32 0, i32 1
  %24 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %24, i32 0, i32 4
  %25 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %25(%struct._object* %26)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then.9
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.10

if.end.10:                                        ; preds = %do.end, %do.body
  br label %do.end.11

do.end.11:                                        ; preds = %if.end.10
  br label %do.body.12

do.body.12:                                       ; preds = %do.end.11
  %27 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %27, %struct._object** %_py_xdecref_tmp13, align 8
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp13, align 8
  %cmp14 = icmp ne %struct._object* %28, null
  br i1 %cmp14, label %if.then.15, label %if.end.27

if.then.15:                                       ; preds = %do.body.12
  br label %do.body.16

do.body.16:                                       ; preds = %if.then.15
  %29 = load %struct._object*, %struct._object** %_py_xdecref_tmp13, align 8
  store %struct._object* %29, %struct._object** %_py_decref_tmp17, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_refcnt18 = getelementptr inbounds %struct._object, %struct._object* %30, i32 0, i32 0
  %31 = load i64, i64* %ob_refcnt18, align 8
  %dec19 = add i64 %31, -1
  store i64 %dec19, i64* %ob_refcnt18, align 8
  %cmp20 = icmp ne i64 %dec19, 0
  br i1 %cmp20, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body.16
  br label %if.end.25

if.else.22:                                       ; preds = %do.body.16
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  %ob_type23 = getelementptr inbounds %struct._object, %struct._object* %32, i32 0, i32 1
  %33 = load %struct._typeobject*, %struct._typeobject** %ob_type23, align 8
  %tp_dealloc24 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %33, i32 0, i32 4
  %34 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc24, align 8
  %35 = load %struct._object*, %struct._object** %_py_decref_tmp17, align 8
  call void %34(%struct._object* %35)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %if.end.27

if.end.27:                                        ; preds = %do.end.26, %do.body.12
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  br label %do.body.29

do.body.29:                                       ; preds = %do.end.28
  %36 = load %struct._object*, %struct._object** %tb, align 8
  store %struct._object* %36, %struct._object** %_py_xdecref_tmp30, align 8
  %37 = load %struct._object*, %struct._object** %_py_xdecref_tmp30, align 8
  %cmp31 = icmp ne %struct._object* %37, null
  br i1 %cmp31, label %if.then.32, label %if.end.44

if.then.32:                                       ; preds = %do.body.29
  br label %do.body.33

do.body.33:                                       ; preds = %if.then.32
  %38 = load %struct._object*, %struct._object** %_py_xdecref_tmp30, align 8
  store %struct._object* %38, %struct._object** %_py_decref_tmp34, align 8
  %39 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_refcnt35 = getelementptr inbounds %struct._object, %struct._object* %39, i32 0, i32 0
  %40 = load i64, i64* %ob_refcnt35, align 8
  %dec36 = add i64 %40, -1
  store i64 %dec36, i64* %ob_refcnt35, align 8
  %cmp37 = icmp ne i64 %dec36, 0
  br i1 %cmp37, label %if.then.38, label %if.else.39

if.then.38:                                       ; preds = %do.body.33
  br label %if.end.42

if.else.39:                                       ; preds = %do.body.33
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  %ob_type40 = getelementptr inbounds %struct._object, %struct._object* %41, i32 0, i32 1
  %42 = load %struct._typeobject*, %struct._typeobject** %ob_type40, align 8
  %tp_dealloc41 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %42, i32 0, i32 4
  %43 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc41, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp34, align 8
  call void %43(%struct._object* %44)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.39, %if.then.38
  br label %do.end.43

do.end.43:                                        ; preds = %if.end.42
  br label %if.end.44

if.end.44:                                        ; preds = %do.end.43, %do.body.29
  br label %do.end.45

do.end.45:                                        ; preds = %if.end.44
  ret void
}

; Function Attrs: nounwind uwtable
define internal i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, %struct._object* %obj, %struct._ts* %tstate, %struct._frame* %frame, i32 %what, %struct._object* %arg) #0 {
entry:
  %retval = alloca i32, align 4
  %func.addr = alloca i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, align 8
  %obj.addr = alloca %struct._object*, align 8
  %tstate.addr = alloca %struct._ts*, align 8
  %frame.addr = alloca %struct._frame*, align 8
  %what.addr = alloca i32, align 4
  %arg.addr = alloca %struct._object*, align 8
  %result = alloca i32, align 4
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  store %struct._object* %obj, %struct._object** %obj.addr, align 8
  store %struct._ts* %tstate, %struct._ts** %tstate.addr, align 8
  store %struct._frame* %frame, %struct._frame** %frame.addr, align 8
  store i32 %what, i32* %what.addr, align 4
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  %0 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %tracing = getelementptr inbounds %struct._ts, %struct._ts* %0, i32 0, i32 7
  %1 = load i32, i32* %tracing, align 4
  %tobool = icmp ne i32 %1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %tracing1 = getelementptr inbounds %struct._ts, %struct._ts* %2, i32 0, i32 7
  %3 = load i32, i32* %tracing1, align 4
  %inc = add i32 %3, 1
  store i32 %inc, i32* %tracing1, align 4
  %4 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %4, i32 0, i32 8
  store i32 0, i32* %use_tracing, align 4
  %5 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %6 = load %struct._object*, %struct._object** %obj.addr, align 8
  %7 = load %struct._frame*, %struct._frame** %frame.addr, align 8
  %8 = load i32, i32* %what.addr, align 4
  %9 = load %struct._object*, %struct._object** %arg.addr, align 8
  %call = call i32 %5(%struct._object* %6, %struct._frame* %7, i32 %8, %struct._object* %9)
  store i32 %call, i32* %result, align 4
  %10 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %c_tracefunc = getelementptr inbounds %struct._ts, %struct._ts* %10, i32 0, i32 10
  %11 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc, align 8
  %cmp = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %11, null
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %if.end
  %12 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %12, i32 0, i32 9
  %13 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %cmp2 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %13, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %if.end
  %14 = phi i1 [ true, %if.end ], [ %cmp2, %lor.rhs ]
  %lor.ext = zext i1 %14 to i32
  %15 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %use_tracing3 = getelementptr inbounds %struct._ts, %struct._ts* %15, i32 0, i32 8
  store i32 %lor.ext, i32* %use_tracing3, align 4
  %16 = load %struct._ts*, %struct._ts** %tstate.addr, align 8
  %tracing4 = getelementptr inbounds %struct._ts, %struct._ts* %16, i32 0, i32 7
  %17 = load i32, i32* %tracing4, align 4
  %dec = add i32 %17, -1
  store i32 %dec, i32* %tracing4, align 4
  %18 = load i32, i32* %result, align 4
  store i32 %18, i32* %retval
  br label %return

return:                                           ; preds = %lor.end, %if.then
  %19 = load i32, i32* %retval
  ret i32 %19
}

declare %struct._frame* @PyFrame_New(%struct._ts*, %struct.PyCodeObject*, %struct._object*, %struct._object*) #2

declare i32 @PyObject_RichCompareBool(%struct._object*, %struct._object*, i32) #2

; Function Attrs: nounwind uwtable
define internal void @too_many_positional(%struct.PyCodeObject* %co, i32 %given, i32 %defcount, %struct._object** %fastlocals) #0 {
entry:
  %co.addr = alloca %struct.PyCodeObject*, align 8
  %given.addr = alloca i32, align 4
  %defcount.addr = alloca i32, align 4
  %fastlocals.addr = alloca %struct._object**, align 8
  %plural = alloca i32, align 4
  %kwonly_given = alloca i32, align 4
  %i = alloca i32, align 4
  %sig = alloca %struct._object*, align 8
  %kwonly_sig = alloca %struct._object*, align 8
  %atleast = alloca i32, align 4
  %format = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp44 = alloca %struct._object*, align 8
  %_py_decref_tmp56 = alloca %struct._object*, align 8
  store %struct.PyCodeObject* %co, %struct.PyCodeObject** %co.addr, align 8
  store i32 %given, i32* %given.addr, align 4
  store i32 %defcount, i32* %defcount.addr, align 4
  store %struct._object** %fastlocals, %struct._object*** %fastlocals.addr, align 8
  store i32 0, i32* %kwonly_given, align 4
  %0 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %0, i32 0, i32 1
  %1 = load i32, i32* %co_argcount, align 4
  store i32 %1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i32, i32* %i, align 4
  %3 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount1 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %3, i32 0, i32 1
  %4 = load i32, i32* %co_argcount1, align 4
  %5 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_kwonlyargcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %5, i32 0, i32 2
  %6 = load i32, i32* %co_kwonlyargcount, align 4
  %add = add i32 %4, %6
  %cmp = icmp slt i32 %2, %add
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct._object**, %struct._object*** %fastlocals.addr, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %8, i64 %idxprom
  %9 = load %struct._object*, %struct._object** %arrayidx, align 8
  %cmp2 = icmp ne %struct._object* %9, null
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %10 = load i32, i32* %kwonly_given, align 4
  %inc = add i32 %10, 1
  store i32 %inc, i32* %kwonly_given, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %11 = load i32, i32* %i, align 4
  %inc3 = add i32 %11, 1
  store i32 %inc3, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %12 = load i32, i32* %defcount.addr, align 4
  %tobool = icmp ne i32 %12, 0
  br i1 %tobool, label %if.then.4, label %if.else

if.then.4:                                        ; preds = %for.end
  %13 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount5 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %13, i32 0, i32 1
  %14 = load i32, i32* %co_argcount5, align 4
  %15 = load i32, i32* %defcount.addr, align 4
  %sub = sub i32 %14, %15
  store i32 %sub, i32* %atleast, align 4
  store i32 1, i32* %plural, align 4
  %16 = load i32, i32* %atleast, align 4
  %17 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount6 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %17, i32 0, i32 1
  %18 = load i32, i32* %co_argcount6, align 4
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.63, i32 0, i32 0), i32 %16, i32 %18)
  store %struct._object* %call, %struct._object** %sig, align 8
  br label %if.end.11

if.else:                                          ; preds = %for.end
  %19 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount7 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %19, i32 0, i32 1
  %20 = load i32, i32* %co_argcount7, align 4
  %cmp8 = icmp ne i32 %20, 1
  %conv = zext i1 %cmp8 to i32
  store i32 %conv, i32* %plural, align 4
  %21 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount9 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %21, i32 0, i32 1
  %22 = load i32, i32* %co_argcount9, align 4
  %call10 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.64, i32 0, i32 0), i32 %22)
  store %struct._object* %call10, %struct._object** %sig, align 8
  br label %if.end.11

if.end.11:                                        ; preds = %if.else, %if.then.4
  %23 = load %struct._object*, %struct._object** %sig, align 8
  %cmp12 = icmp eq %struct._object* %23, null
  br i1 %cmp12, label %if.then.14, label %if.end.15

if.then.14:                                       ; preds = %if.end.11
  br label %do.end.66

if.end.15:                                        ; preds = %if.end.11
  %24 = load i32, i32* %kwonly_given, align 4
  %tobool16 = icmp ne i32 %24, 0
  br i1 %tobool16, label %if.then.17, label %if.else.33

if.then.17:                                       ; preds = %if.end.15
  store i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.65, i32 0, i32 0), i8** %format, align 8
  %25 = load i8*, i8** %format, align 8
  %26 = load i32, i32* %given.addr, align 4
  %cmp18 = icmp ne i32 %26, 1
  %cond = select i1 %cmp18, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0)
  %27 = load i32, i32* %kwonly_given, align 4
  %28 = load i32, i32* %kwonly_given, align 4
  %cmp20 = icmp ne i32 %28, 1
  %cond22 = select i1 %cmp20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0)
  %call23 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* %25, i8* %cond, i32 %27, i8* %cond22)
  store %struct._object* %call23, %struct._object** %kwonly_sig, align 8
  %29 = load %struct._object*, %struct._object** %kwonly_sig, align 8
  %cmp24 = icmp eq %struct._object* %29, null
  br i1 %cmp24, label %if.then.26, label %if.end.32

if.then.26:                                       ; preds = %if.then.17
  br label %do.body

do.body:                                          ; preds = %if.then.26
  %30 = load %struct._object*, %struct._object** %sig, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %32, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp27 = icmp ne i64 %dec, 0
  br i1 %cmp27, label %if.then.29, label %if.else.30

if.then.29:                                       ; preds = %do.body
  br label %if.end.31

if.else.30:                                       ; preds = %do.body
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %35(%struct._object* %36)
  br label %if.end.31

if.end.31:                                        ; preds = %if.else.30, %if.then.29
  br label %do.end

do.end:                                           ; preds = %if.end.31
  br label %do.end.66

if.end.32:                                        ; preds = %if.then.17
  br label %if.end.35

if.else.33:                                       ; preds = %if.end.15
  %call34 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0))
  store %struct._object* %call34, %struct._object** %kwonly_sig, align 8
  br label %if.end.35

if.end.35:                                        ; preds = %if.else.33, %if.end.32
  %37 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %38 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_name = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %38, i32 0, i32 14
  %39 = load %struct._object*, %struct._object** %co_name, align 8
  %40 = load %struct._object*, %struct._object** %sig, align 8
  %41 = load i32, i32* %plural, align 4
  %tobool36 = icmp ne i32 %41, 0
  %cond37 = select i1 %tobool36, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0)
  %42 = load i32, i32* %given.addr, align 4
  %43 = load %struct._object*, %struct._object** %kwonly_sig, align 8
  %44 = load i32, i32* %given.addr, align 4
  %cmp38 = icmp eq i32 %44, 1
  br i1 %cmp38, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %if.end.35
  %45 = load i32, i32* %kwonly_given, align 4
  %tobool40 = icmp ne i32 %45, 0
  %lnot = xor i1 %tobool40, true
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end.35
  %46 = phi i1 [ false, %if.end.35 ], [ %lnot, %land.rhs ]
  %cond41 = select i1 %46, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.69, i32 0, i32 0)
  %call42 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %37, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.67, i32 0, i32 0), %struct._object* %39, %struct._object* %40, i8* %cond37, i32 %42, %struct._object* %43, i8* %cond41)
  br label %do.body.43

do.body.43:                                       ; preds = %land.end
  %47 = load %struct._object*, %struct._object** %sig, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp44, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_refcnt45 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt45, align 8
  %dec46 = add i64 %49, -1
  store i64 %dec46, i64* %ob_refcnt45, align 8
  %cmp47 = icmp ne i64 %dec46, 0
  br i1 %cmp47, label %if.then.49, label %if.else.50

if.then.49:                                       ; preds = %do.body.43
  br label %if.end.53

if.else.50:                                       ; preds = %do.body.43
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  %ob_type51 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type51, align 8
  %tp_dealloc52 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc52, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp44, align 8
  call void %52(%struct._object* %53)
  br label %if.end.53

if.end.53:                                        ; preds = %if.else.50, %if.then.49
  br label %do.end.54

do.end.54:                                        ; preds = %if.end.53
  br label %do.body.55

do.body.55:                                       ; preds = %do.end.54
  %54 = load %struct._object*, %struct._object** %kwonly_sig, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp56, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_refcnt57 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt57, align 8
  %dec58 = add i64 %56, -1
  store i64 %dec58, i64* %ob_refcnt57, align 8
  %cmp59 = icmp ne i64 %dec58, 0
  br i1 %cmp59, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.55
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.55
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp56, align 8
  call void %59(%struct._object* %60)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.then.14, %do.end, %if.end.65
  ret void
}

; Function Attrs: nounwind uwtable
define internal void @missing_arguments(%struct.PyCodeObject* %co, i32 %missing, i32 %defcount, %struct._object** %fastlocals) #0 {
entry:
  %co.addr = alloca %struct.PyCodeObject*, align 8
  %missing.addr = alloca i32, align 4
  %defcount.addr = alloca i32, align 4
  %fastlocals.addr = alloca %struct._object**, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %start = alloca i32, align 4
  %end = alloca i32, align 4
  %positional = alloca i32, align 4
  %kind = alloca i8*, align 8
  %missing_names = alloca %struct._object*, align 8
  %raw = alloca %struct._object*, align 8
  %name = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp31 = alloca %struct._object*, align 8
  store %struct.PyCodeObject* %co, %struct.PyCodeObject** %co.addr, align 8
  store i32 %missing, i32* %missing.addr, align 4
  store i32 %defcount, i32* %defcount.addr, align 4
  store %struct._object** %fastlocals, %struct._object*** %fastlocals.addr, align 8
  store i32 0, i32* %j, align 4
  %0 = load i32, i32* %defcount.addr, align 4
  %cmp = icmp ne i32 %0, -1
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %positional, align 4
  %1 = load i32, i32* %positional, align 4
  %tobool = icmp ne i32 %1, 0
  %cond = select i1 %tobool, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.71, i32 0, i32 0)
  store i8* %cond, i8** %kind, align 8
  %2 = load i32, i32* %missing.addr, align 4
  %conv1 = sext i32 %2 to i64
  %call = call %struct._object* @PyList_New(i64 %conv1)
  store %struct._object* %call, %struct._object** %missing_names, align 8
  %3 = load %struct._object*, %struct._object** %missing_names, align 8
  %cmp2 = icmp eq %struct._object* %3, null
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %do.end.41

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %positional, align 4
  %tobool4 = icmp ne i32 %4, 0
  br i1 %tobool4, label %if.then.5, label %if.else

if.then.5:                                        ; preds = %if.end
  store i32 0, i32* %start, align 4
  %5 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %5, i32 0, i32 1
  %6 = load i32, i32* %co_argcount, align 4
  %7 = load i32, i32* %defcount.addr, align 4
  %sub = sub i32 %6, %7
  store i32 %sub, i32* %end, align 4
  br label %if.end.7

if.else:                                          ; preds = %if.end
  %8 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_argcount6 = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %8, i32 0, i32 1
  %9 = load i32, i32* %co_argcount6, align 4
  store i32 %9, i32* %start, align 4
  %10 = load i32, i32* %start, align 4
  %11 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_kwonlyargcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %11, i32 0, i32 2
  %12 = load i32, i32* %co_kwonlyargcount, align 4
  %add = add i32 %10, %12
  store i32 %add, i32* %end, align 4
  br label %if.end.7

if.end.7:                                         ; preds = %if.else, %if.then.5
  %13 = load i32, i32* %start, align 4
  store i32 %13, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end.7
  %14 = load i32, i32* %i, align 4
  %15 = load i32, i32* %end, align 4
  %cmp8 = icmp slt i32 %14, %15
  br i1 %cmp8, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %16 = load i32, i32* %i, align 4
  %idxprom = sext i32 %16 to i64
  %17 = load %struct._object**, %struct._object*** %fastlocals.addr, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %17, i64 %idxprom
  %18 = load %struct._object*, %struct._object** %arrayidx, align 8
  %cmp10 = icmp eq %struct._object* %18, null
  br i1 %cmp10, label %if.then.12, label %if.end.28

if.then.12:                                       ; preds = %for.body
  %19 = load i32, i32* %i, align 4
  %idxprom13 = sext i32 %19 to i64
  %20 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_varnames = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %20, i32 0, i32 9
  %21 = load %struct._object*, %struct._object** %co_varnames, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %22, i32 0, i32 1
  %arrayidx14 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom13
  %23 = load %struct._object*, %struct._object** %arrayidx14, align 8
  store %struct._object* %23, %struct._object** %raw, align 8
  %24 = load %struct._object*, %struct._object** %raw, align 8
  %call15 = call %struct._object* @PyObject_Repr(%struct._object* %24)
  store %struct._object* %call15, %struct._object** %name, align 8
  %25 = load %struct._object*, %struct._object** %name, align 8
  %cmp16 = icmp eq %struct._object* %25, null
  br i1 %cmp16, label %if.then.18, label %if.end.24

if.then.18:                                       ; preds = %if.then.12
  br label %do.body

do.body:                                          ; preds = %if.then.18
  %26 = load %struct._object*, %struct._object** %missing_names, align 8
  store %struct._object* %26, %struct._object** %_py_decref_tmp, align 8
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 0
  %28 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %28, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp19 = icmp ne i64 %dec, 0
  br i1 %cmp19, label %if.then.21, label %if.else.22

if.then.21:                                       ; preds = %do.body
  br label %if.end.23

if.else.22:                                       ; preds = %do.body
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 1
  %30 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %30, i32 0, i32 4
  %31 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %32 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %31(%struct._object* %32)
  br label %if.end.23

if.end.23:                                        ; preds = %if.else.22, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.23
  br label %do.end.41

if.end.24:                                        ; preds = %if.then.12
  %33 = load %struct._object*, %struct._object** %name, align 8
  %34 = load i32, i32* %j, align 4
  %inc = add i32 %34, 1
  store i32 %inc, i32* %j, align 4
  %idxprom25 = sext i32 %34 to i64
  %35 = load %struct._object*, %struct._object** %missing_names, align 8
  %36 = bitcast %struct._object* %35 to %struct.PyListObject*
  %ob_item26 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %36, i32 0, i32 1
  %37 = load %struct._object**, %struct._object*** %ob_item26, align 8
  %arrayidx27 = getelementptr %struct._object*, %struct._object** %37, i64 %idxprom25
  store %struct._object* %33, %struct._object** %arrayidx27, align 8
  br label %if.end.28

if.end.28:                                        ; preds = %if.end.24, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end.28
  %38 = load i32, i32* %i, align 4
  %inc29 = add i32 %38, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %39 = load i8*, i8** %kind, align 8
  %40 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %41 = load %struct._object*, %struct._object** %missing_names, align 8
  call void @format_missing(i8* %39, %struct.PyCodeObject* %40, %struct._object* %41)
  br label %do.body.30

do.body.30:                                       ; preds = %for.end
  %42 = load %struct._object*, %struct._object** %missing_names, align 8
  store %struct._object* %42, %struct._object** %_py_decref_tmp31, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_refcnt32 = getelementptr inbounds %struct._object, %struct._object* %43, i32 0, i32 0
  %44 = load i64, i64* %ob_refcnt32, align 8
  %dec33 = add i64 %44, -1
  store i64 %dec33, i64* %ob_refcnt32, align 8
  %cmp34 = icmp ne i64 %dec33, 0
  br i1 %cmp34, label %if.then.36, label %if.else.37

if.then.36:                                       ; preds = %do.body.30
  br label %if.end.40

if.else.37:                                       ; preds = %do.body.30
  %45 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  %ob_type38 = getelementptr inbounds %struct._object, %struct._object* %45, i32 0, i32 1
  %46 = load %struct._typeobject*, %struct._typeobject** %ob_type38, align 8
  %tp_dealloc39 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %46, i32 0, i32 4
  %47 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc39, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp31, align 8
  call void %47(%struct._object* %48)
  br label %if.end.40

if.end.40:                                        ; preds = %if.else.37, %if.then.36
  br label %do.end.41

do.end.41:                                        ; preds = %if.then, %do.end, %if.end.40
  ret void
}

declare %struct._object* @PyCell_New(%struct._object*) #2

declare %struct._object* @PyGen_New(%struct._frame*) #2

; Function Attrs: nounwind uwtable
define %struct._object* @_PyEval_CallTracing(%struct._object* %func, %struct._object* %args) #0 {
entry:
  %func.addr = alloca %struct._object*, align 8
  %args.addr = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %save_tracing = alloca i32, align 4
  %save_use_tracing = alloca i32, align 4
  %result7 = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object* %args, %struct._object** %args.addr, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load %struct._ts*, %struct._ts** %tstate, align 8
  %tracing = getelementptr inbounds %struct._ts, %struct._ts* %11, i32 0, i32 7
  %12 = load i32, i32* %tracing, align 4
  store i32 %12, i32* %save_tracing, align 4
  %13 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %13, i32 0, i32 8
  %14 = load i32, i32* %use_tracing, align 4
  store i32 %14, i32* %save_use_tracing, align 4
  %15 = load %struct._ts*, %struct._ts** %tstate, align 8
  %tracing8 = getelementptr inbounds %struct._ts, %struct._ts* %15, i32 0, i32 7
  store i32 0, i32* %tracing8, align 4
  %16 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc = getelementptr inbounds %struct._ts, %struct._ts* %16, i32 0, i32 10
  %17 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc, align 8
  %cmp = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %17, null
  br i1 %cmp, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %sw.epilog.3
  %18 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %18, i32 0, i32 9
  %19 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %cmp9 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %19, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %sw.epilog.3
  %20 = phi i1 [ true, %sw.epilog.3 ], [ %cmp9, %lor.rhs ]
  %lor.ext = zext i1 %20 to i32
  %21 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing10 = getelementptr inbounds %struct._ts, %struct._ts* %21, i32 0, i32 8
  store i32 %lor.ext, i32* %use_tracing10, align 4
  %22 = load %struct._object*, %struct._object** %func.addr, align 8
  %23 = load %struct._object*, %struct._object** %args.addr, align 8
  %call = call %struct._object* @PyObject_Call(%struct._object* %22, %struct._object* %23, %struct._object* null)
  store %struct._object* %call, %struct._object** %result7, align 8
  %24 = load i32, i32* %save_tracing, align 4
  %25 = load %struct._ts*, %struct._ts** %tstate, align 8
  %tracing11 = getelementptr inbounds %struct._ts, %struct._ts* %25, i32 0, i32 7
  store i32 %24, i32* %tracing11, align 4
  %26 = load i32, i32* %save_use_tracing, align 4
  %27 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing12 = getelementptr inbounds %struct._ts, %struct._ts* %27, i32 0, i32 8
  store i32 %26, i32* %use_tracing12, align 4
  %28 = load %struct._object*, %struct._object** %result7, align 8
  ret %struct._object* %28
}

declare %struct._object* @PyObject_Call(%struct._object*, %struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define void @PyEval_SetProfile(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, %struct._object* %arg) #0 {
entry:
  %func.addr = alloca i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj = getelementptr inbounds %struct._ts, %struct._ts* %11, i32 0, i32 11
  %12 = load %struct._object*, %struct._object** %c_profileobj, align 8
  store %struct._object* %12, %struct._object** %temp, align 8
  br label %do.body

do.body:                                          ; preds = %sw.epilog.3
  %13 = load %struct._object*, %struct._object** %arg.addr, align 8
  store %struct._object* %13, %struct._object** %_py_xincref_tmp, align 8
  %14 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp = icmp ne %struct._object* %14, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %15 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %15, i32 0, i32 0
  %16 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %16, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %17 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %17, i32 0, i32 9
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* null, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %18 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj6 = getelementptr inbounds %struct._ts, %struct._ts* %18, i32 0, i32 11
  store %struct._object* null, %struct._object** %c_profileobj6, align 8
  %19 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc = getelementptr inbounds %struct._ts, %struct._ts* %19, i32 0, i32 10
  %20 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc, align 8
  %cmp7 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %20, null
  %conv = zext i1 %cmp7 to i32
  %21 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %21, i32 0, i32 8
  store i32 %conv, i32* %use_tracing, align 4
  br label %do.body.8

do.body.8:                                        ; preds = %do.end
  %22 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %22, %struct._object** %_py_xdecref_tmp, align 8
  %23 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp10 = icmp ne %struct._object* %23, null
  br i1 %cmp10, label %if.then.12, label %if.end.21

if.then.12:                                       ; preds = %do.body.8
  br label %do.body.13

do.body.13:                                       ; preds = %if.then.12
  %24 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %24, %struct._object** %_py_decref_tmp, align 8
  %25 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt15 = getelementptr inbounds %struct._object, %struct._object* %25, i32 0, i32 0
  %26 = load i64, i64* %ob_refcnt15, align 8
  %dec = add i64 %26, -1
  store i64 %dec, i64* %ob_refcnt15, align 8
  %cmp16 = icmp ne i64 %dec, 0
  br i1 %cmp16, label %if.then.18, label %if.else

if.then.18:                                       ; preds = %do.body.13
  br label %if.end.19

if.else:                                          ; preds = %do.body.13
  %27 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %27, i32 0, i32 1
  %28 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %28, i32 0, i32 4
  %29 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %30 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %29(%struct._object* %30)
  br label %if.end.19

if.end.19:                                        ; preds = %if.else, %if.then.18
  br label %do.end.20

do.end.20:                                        ; preds = %if.end.19
  br label %if.end.21

if.end.21:                                        ; preds = %do.end.20, %do.body.8
  br label %do.end.22

do.end.22:                                        ; preds = %if.end.21
  %31 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %32 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc23 = getelementptr inbounds %struct._ts, %struct._ts* %32, i32 0, i32 9
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %31, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc23, align 8
  %33 = load %struct._object*, %struct._object** %arg.addr, align 8
  %34 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj24 = getelementptr inbounds %struct._ts, %struct._ts* %34, i32 0, i32 11
  store %struct._object* %33, %struct._object** %c_profileobj24, align 8
  %35 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %cmp25 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %35, null
  br i1 %cmp25, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.end.22
  %36 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc27 = getelementptr inbounds %struct._ts, %struct._ts* %36, i32 0, i32 10
  %37 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc27, align 8
  %cmp28 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %37, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.end.22
  %38 = phi i1 [ true, %do.end.22 ], [ %cmp28, %lor.rhs ]
  %lor.ext = zext i1 %38 to i32
  %39 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing30 = getelementptr inbounds %struct._ts, %struct._ts* %39, i32 0, i32 8
  store i32 %lor.ext, i32* %use_tracing30, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define void @PyEval_SetTrace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, %struct._object* %arg) #0 {
entry:
  %func.addr = alloca i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, align 8
  %arg.addr = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %temp = alloca %struct._object*, align 8
  %_py_xincref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %func, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  store %struct._object* %arg, %struct._object** %arg.addr, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj = getelementptr inbounds %struct._ts, %struct._ts* %11, i32 0, i32 12
  %12 = load %struct._object*, %struct._object** %c_traceobj, align 8
  store %struct._object* %12, %struct._object** %temp, align 8
  %13 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %cmp = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %13, null
  %conv = zext i1 %cmp to i32
  %14 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc = getelementptr inbounds %struct._ts, %struct._ts* %14, i32 0, i32 10
  %15 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc, align 8
  %cmp5 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %15, null
  %conv6 = zext i1 %cmp5 to i32
  %sub = sub i32 %conv, %conv6
  %16 = load i32, i32* @_Py_TracingPossible, align 4
  %add = add i32 %16, %sub
  store i32 %add, i32* @_Py_TracingPossible, align 4
  br label %do.body

do.body:                                          ; preds = %sw.epilog.3
  %17 = load %struct._object*, %struct._object** %arg.addr, align 8
  store %struct._object* %17, %struct._object** %_py_xincref_tmp, align 8
  %18 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %cmp8 = icmp ne %struct._object* %18, null
  br i1 %cmp8, label %if.then, label %if.end

if.then:                                          ; preds = %do.body
  %19 = load %struct._object*, %struct._object** %_py_xincref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %19, i32 0, i32 0
  %20 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %20, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %do.body
  br label %do.end

do.end:                                           ; preds = %if.end
  %21 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc10 = getelementptr inbounds %struct._ts, %struct._ts* %21, i32 0, i32 10
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* null, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc10, align 8
  %22 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj11 = getelementptr inbounds %struct._ts, %struct._ts* %22, i32 0, i32 12
  store %struct._object* null, %struct._object** %c_traceobj11, align 8
  %23 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %23, i32 0, i32 9
  %24 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %cmp12 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %24, null
  %conv13 = zext i1 %cmp12 to i32
  %25 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %25, i32 0, i32 8
  store i32 %conv13, i32* %use_tracing, align 4
  br label %do.body.14

do.body.14:                                       ; preds = %do.end
  %26 = load %struct._object*, %struct._object** %temp, align 8
  store %struct._object* %26, %struct._object** %_py_xdecref_tmp, align 8
  %27 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp16 = icmp ne %struct._object* %27, null
  br i1 %cmp16, label %if.then.18, label %if.end.27

if.then.18:                                       ; preds = %do.body.14
  br label %do.body.19

do.body.19:                                       ; preds = %if.then.18
  %28 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %28, %struct._object** %_py_decref_tmp, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt21 = getelementptr inbounds %struct._object, %struct._object* %29, i32 0, i32 0
  %30 = load i64, i64* %ob_refcnt21, align 8
  %dec = add i64 %30, -1
  store i64 %dec, i64* %ob_refcnt21, align 8
  %cmp22 = icmp ne i64 %dec, 0
  br i1 %cmp22, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %do.body.19
  br label %if.end.25

if.else:                                          ; preds = %do.body.19
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 1
  %32 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %32, i32 0, i32 4
  %33 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %34 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %33(%struct._object* %34)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.24
  br label %do.end.26

do.end.26:                                        ; preds = %if.end.25
  br label %if.end.27

if.end.27:                                        ; preds = %do.end.26, %do.body.14
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  %35 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %36 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_tracefunc29 = getelementptr inbounds %struct._ts, %struct._ts* %36, i32 0, i32 10
  store i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %35, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_tracefunc29, align 8
  %37 = load %struct._object*, %struct._object** %arg.addr, align 8
  %38 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_traceobj30 = getelementptr inbounds %struct._ts, %struct._ts* %38, i32 0, i32 12
  store %struct._object* %37, %struct._object** %c_traceobj30, align 8
  %39 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %func.addr, align 8
  %cmp31 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %39, null
  br i1 %cmp31, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %do.end.28
  %40 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc33 = getelementptr inbounds %struct._ts, %struct._ts* %40, i32 0, i32 9
  %41 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc33, align 8
  %cmp34 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %41, null
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %do.end.28
  %42 = phi i1 [ true, %do.end.28 ], [ %cmp34, %lor.rhs ]
  %lor.ext = zext i1 %42 to i32
  %43 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing36 = getelementptr inbounds %struct._ts, %struct._ts* %43, i32 0, i32 8
  store i32 %lor.ext, i32* %use_tracing36, align 4
  ret void
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_GetBuiltins() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %current_frame = alloca %struct._frame*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %call = call %struct._frame* @PyEval_GetFrame()
  store %struct._frame* %call, %struct._frame** %current_frame, align 8
  %0 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %cmp = icmp eq %struct._frame* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %1, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %2 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %3 = bitcast %struct._Py_atomic_address* %2 to i8*
  %4 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %3, i32 %4)
  %5 = load i32, i32* %order, align 4
  switch i32 %5, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then, %if.then, %if.then
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %6 = load i8**, i8*** %volatile_data, align 8
  %7 = load volatile i8*, i8** %6, align 8
  store i8* %7, i8** %result, align 8
  %8 = load i32, i32* %order, align 4
  switch i32 %8, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %9 = load i8*, i8** %result, align 8
  store i8* %9, i8** %tmp
  %10 = load i8*, i8** %tmp
  %11 = bitcast i8* %10 to %struct._ts*
  %interp = getelementptr inbounds %struct._ts, %struct._ts* %11, i32 0, i32 2
  %12 = load %struct._is*, %struct._is** %interp, align 8
  %builtins = getelementptr inbounds %struct._is, %struct._is* %12, i32 0, i32 5
  %13 = load %struct._object*, %struct._object** %builtins, align 8
  store %struct._object* %13, %struct._object** %retval
  br label %return

if.else:                                          ; preds = %entry
  %14 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %f_builtins = getelementptr inbounds %struct._frame, %struct._frame* %14, i32 0, i32 3
  %15 = load %struct._object*, %struct._object** %f_builtins, align 8
  store %struct._object* %15, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.else, %sw.epilog.3
  %16 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %16
}

; Function Attrs: nounwind uwtable
define %struct._frame* @PyEval_GetFrame() #0 {
entry:
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %0 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %0, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %1 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %2 = bitcast %struct._Py_atomic_address* %1 to i8*
  %3 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %2, i32 %3)
  %4 = load i32, i32* %order, align 4
  switch i32 %4, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %entry, %entry, %entry
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %5 = load i8**, i8*** %volatile_data, align 8
  %6 = load volatile i8*, i8** %5, align 8
  store i8* %6, i8** %result, align 8
  %7 = load i32, i32* %order, align 4
  switch i32 %7, label %sw.default.2 [
    i32 1, label %sw.bb.1
    i32 3, label %sw.bb.1
    i32 4, label %sw.bb.1
  ]

sw.bb.1:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.3

sw.default.2:                                     ; preds = %sw.epilog
  br label %sw.epilog.3

sw.epilog.3:                                      ; preds = %sw.default.2, %sw.bb.1
  %8 = load i8*, i8** %result, align 8
  store i8* %8, i8** %tmp
  %9 = load i8*, i8** %tmp
  %10 = bitcast i8* %9 to %struct._ts*
  store %struct._ts* %10, %struct._ts** %tstate, align 8
  %11 = load %struct._frame* (%struct._ts*)*, %struct._frame* (%struct._ts*)** @_PyThreadState_GetFrame, align 8
  %12 = load %struct._ts*, %struct._ts** %tstate, align 8
  %call = call %struct._frame* %11(%struct._ts* %12)
  ret %struct._frame* %call
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_GetLocals() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %current_frame = alloca %struct._frame*, align 8
  %call = call %struct._frame* @PyEval_GetFrame()
  store %struct._frame* %call, %struct._frame** %current_frame, align 8
  %0 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %cmp = icmp eq %struct._frame* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_SystemError, align 8
  call void @PyErr_SetString(%struct._object* %1, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i32 0, i32 0))
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %2 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %call1 = call i32 @PyFrame_FastToLocalsWithError(%struct._frame* %2)
  %cmp2 = icmp slt i32 %call1, 0
  br i1 %cmp2, label %if.then.3, label %if.end.4

if.then.3:                                        ; preds = %if.end
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.4:                                         ; preds = %if.end
  %3 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %f_locals = getelementptr inbounds %struct._frame, %struct._frame* %3, i32 0, i32 5
  %4 = load %struct._object*, %struct._object** %f_locals, align 8
  store %struct._object* %4, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.4, %if.then.3, %if.then
  %5 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %5
}

; Function Attrs: nounwind uwtable
define %struct._object* @PyEval_GetGlobals() #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %current_frame = alloca %struct._frame*, align 8
  %call = call %struct._frame* @PyEval_GetFrame()
  store %struct._frame* %call, %struct._frame** %current_frame, align 8
  %0 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %cmp = icmp eq %struct._frame* %0, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %f_globals = getelementptr inbounds %struct._frame, %struct._frame* %1, i32 0, i32 4
  %2 = load %struct._object*, %struct._object** %f_globals, align 8
  store %struct._object* %2, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %3
}

; Function Attrs: nounwind uwtable
define i32 @PyEval_MergeCompilerFlags(%struct.PyCompilerFlags* %cf) #0 {
entry:
  %cf.addr = alloca %struct.PyCompilerFlags*, align 8
  %current_frame = alloca %struct._frame*, align 8
  %result = alloca i32, align 4
  %codeflags = alloca i32, align 4
  %compilerflags = alloca i32, align 4
  store %struct.PyCompilerFlags* %cf, %struct.PyCompilerFlags** %cf.addr, align 8
  %call = call %struct._frame* @PyEval_GetFrame()
  store %struct._frame* %call, %struct._frame** %current_frame, align 8
  %0 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %cf.addr, align 8
  %cf_flags = getelementptr inbounds %struct.PyCompilerFlags, %struct.PyCompilerFlags* %0, i32 0, i32 0
  %1 = load i32, i32* %cf_flags, align 4
  %cmp = icmp ne i32 %1, 0
  %conv = zext i1 %cmp to i32
  store i32 %conv, i32* %result, align 4
  %2 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %cmp1 = icmp ne %struct._frame* %2, null
  br i1 %cmp1, label %if.then, label %if.end.5

if.then:                                          ; preds = %entry
  %3 = load %struct._frame*, %struct._frame** %current_frame, align 8
  %f_code = getelementptr inbounds %struct._frame, %struct._frame* %3, i32 0, i32 2
  %4 = load %struct.PyCodeObject*, %struct.PyCodeObject** %f_code, align 8
  %co_flags = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %4, i32 0, i32 5
  %5 = load i32, i32* %co_flags, align 4
  store i32 %5, i32* %codeflags, align 4
  %6 = load i32, i32* %codeflags, align 4
  %and = and i32 %6, 516096
  store i32 %and, i32* %compilerflags, align 4
  %7 = load i32, i32* %compilerflags, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %if.then.3, label %if.end

if.then.3:                                        ; preds = %if.then
  store i32 1, i32* %result, align 4
  %8 = load i32, i32* %compilerflags, align 4
  %9 = load %struct.PyCompilerFlags*, %struct.PyCompilerFlags** %cf.addr, align 8
  %cf_flags4 = getelementptr inbounds %struct.PyCompilerFlags, %struct.PyCompilerFlags* %9, i32 0, i32 0
  %10 = load i32, i32* %cf_flags4, align 4
  %or = or i32 %10, %8
  store i32 %or, i32* %cf_flags4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then.3, %if.then
  br label %if.end.5

if.end.5:                                         ; preds = %if.end, %entry
  %11 = load i32, i32* %result, align 4
  ret i32 %11
}

; Function Attrs: nounwind uwtable
define i8* @PyEval_GetFuncName(%struct._object* %func) #0 {
entry:
  %retval = alloca i8*, align 8
  %func.addr = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  %0 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyMethod_Type
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %func.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyMethodObject*
  %im_func = getelementptr inbounds %struct.PyMethodObject, %struct.PyMethodObject* %3, i32 0, i32 1
  %4 = load %struct._object*, %struct._object** %im_func, align 8
  %call = call i8* @PyEval_GetFuncName(%struct._object* %4)
  store i8* %call, i8** %retval
  br label %return

if.else:                                          ; preds = %entry
  %5 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp2 = icmp eq %struct._typeobject* %6, @PyFunction_Type
  br i1 %cmp2, label %if.then.3, label %if.else.5

if.then.3:                                        ; preds = %if.else
  %7 = load %struct._object*, %struct._object** %func.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyFunctionObject*
  %func_name = getelementptr inbounds %struct.PyFunctionObject, %struct.PyFunctionObject* %8, i32 0, i32 7
  %9 = load %struct._object*, %struct._object** %func_name, align 8
  %call4 = call i8* @PyUnicode_AsUTF8(%struct._object* %9)
  store i8* %call4, i8** %retval
  br label %return

if.else.5:                                        ; preds = %if.else
  %10 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type6 = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 1
  %11 = load %struct._typeobject*, %struct._typeobject** %ob_type6, align 8
  %cmp7 = icmp eq %struct._typeobject* %11, @PyCFunction_Type
  br i1 %cmp7, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.else.5
  %12 = load %struct._object*, %struct._object** %func.addr, align 8
  %13 = bitcast %struct._object* %12 to %struct.PyCFunctionObject*
  %m_ml = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %13, i32 0, i32 1
  %14 = load %struct.PyMethodDef*, %struct.PyMethodDef** %m_ml, align 8
  %ml_name = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %14, i32 0, i32 0
  %15 = load i8*, i8** %ml_name, align 8
  store i8* %15, i8** %retval
  br label %return

if.else.9:                                        ; preds = %if.else.5
  %16 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type10 = getelementptr inbounds %struct._object, %struct._object* %16, i32 0, i32 1
  %17 = load %struct._typeobject*, %struct._typeobject** %ob_type10, align 8
  %tp_name = getelementptr inbounds %struct._typeobject, %struct._typeobject* %17, i32 0, i32 1
  %18 = load i8*, i8** %tp_name, align 8
  store i8* %18, i8** %retval
  br label %return

return:                                           ; preds = %if.else.9, %if.then.8, %if.then.3, %if.then
  %19 = load i8*, i8** %retval
  ret i8* %19
}

declare i8* @PyUnicode_AsUTF8(%struct._object*) #2

; Function Attrs: nounwind uwtable
define i8* @PyEval_GetFuncDesc(%struct._object* %func) #0 {
entry:
  %retval = alloca i8*, align 8
  %func.addr = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  %0 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %0, i32 0, i32 1
  %1 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp = icmp eq %struct._typeobject* %1, @PyMethod_Type
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i8** %retval
  br label %return

if.else:                                          ; preds = %entry
  %2 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type1 = getelementptr inbounds %struct._object, %struct._object* %2, i32 0, i32 1
  %3 = load %struct._typeobject*, %struct._typeobject** %ob_type1, align 8
  %cmp2 = icmp eq %struct._typeobject* %3, @PyFunction_Type
  br i1 %cmp2, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %if.else
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i8** %retval
  br label %return

if.else.4:                                        ; preds = %if.else
  %4 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type5 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type5, align 8
  %cmp6 = icmp eq %struct._typeobject* %5, @PyCFunction_Type
  br i1 %cmp6, label %if.then.7, label %if.else.8

if.then.7:                                        ; preds = %if.else.4
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i32 0, i32 0), i8** %retval
  br label %return

if.else.8:                                        ; preds = %if.else.4
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), i8** %retval
  br label %return

return:                                           ; preds = %if.else.8, %if.then.7, %if.then.3, %if.then
  %6 = load i8*, i8** %retval
  ret i8* %6
}

; Function Attrs: nounwind uwtable
define i32 @_PyEval_SliceIndex(%struct._object* %v, i64* %pi) #0 {
entry:
  %retval = alloca i32, align 4
  %v.addr = alloca %struct._object*, align 8
  %pi.addr = alloca i64*, align 8
  %x = alloca i64, align 8
  store %struct._object* %v, %struct._object** %v.addr, align 8
  store i64* %pi, i64** %pi.addr, align 8
  %0 = load %struct._object*, %struct._object** %v.addr, align 8
  %cmp = icmp ne %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.end.12

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %1, i32 0, i32 1
  %2 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_as_number = getelementptr inbounds %struct._typeobject, %struct._typeobject* %2, i32 0, i32 10
  %3 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number, align 8
  %cmp1 = icmp ne %struct.PyNumberMethods* %3, null
  br i1 %cmp1, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.then
  %4 = load %struct._object*, %struct._object** %v.addr, align 8
  %ob_type2 = getelementptr inbounds %struct._object, %struct._object* %4, i32 0, i32 1
  %5 = load %struct._typeobject*, %struct._typeobject** %ob_type2, align 8
  %tp_as_number3 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %5, i32 0, i32 10
  %6 = load %struct.PyNumberMethods*, %struct.PyNumberMethods** %tp_as_number3, align 8
  %nb_index = getelementptr inbounds %struct.PyNumberMethods, %struct.PyNumberMethods* %6, i32 0, i32 33
  %nb_index4 = bitcast {}** %nb_index to %struct._object* (%struct._object*)**
  %7 = load %struct._object* (%struct._object*)*, %struct._object* (%struct._object*)** %nb_index4, align 8
  %cmp5 = icmp ne %struct._object* (%struct._object*)* %7, null
  br i1 %cmp5, label %if.then.6, label %if.else

if.then.6:                                        ; preds = %land.lhs.true
  %8 = load %struct._object*, %struct._object** %v.addr, align 8
  %call = call i64 @PyNumber_AsSsize_t(%struct._object* %8, %struct._object* null)
  store i64 %call, i64* %x, align 8
  %9 = load i64, i64* %x, align 8
  %cmp7 = icmp eq i64 %9, -1
  br i1 %cmp7, label %land.lhs.true.8, label %if.end

land.lhs.true.8:                                  ; preds = %if.then.6
  %call9 = call %struct._object* @PyErr_Occurred()
  %tobool = icmp ne %struct._object* %call9, null
  br i1 %tobool, label %if.then.10, label %if.end

if.then.10:                                       ; preds = %land.lhs.true.8
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true.8, %if.then.6
  br label %if.end.11

if.else:                                          ; preds = %land.lhs.true, %if.then
  %10 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  call void @PyErr_SetString(%struct._object* %10, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.44, i32 0, i32 0))
  store i32 0, i32* %retval
  br label %return

if.end.11:                                        ; preds = %if.end
  %11 = load i64, i64* %x, align 8
  %12 = load i64*, i64** %pi.addr, align 8
  store i64 %11, i64* %12, align 8
  br label %if.end.12

if.end.12:                                        ; preds = %if.end.11, %entry
  store i32 1, i32* %retval
  br label %return

return:                                           ; preds = %if.end.12, %if.else, %if.then.10
  %13 = load i32, i32* %retval
  ret i32 %13
}

declare i64 @PyNumber_AsSsize_t(%struct._object*, %struct._object*) #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) #5

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) #5

; Function Attrs: inlinehint nounwind uwtable
define internal i32 @PyCOND_TIMEDWAIT(%union.pthread_cond_t* %cond, %union.pthread_mutex_t* %mut, i64 %us) #1 {
entry:
  %retval = alloca i32, align 4
  %cond.addr = alloca %union.pthread_cond_t*, align 8
  %mut.addr = alloca %union.pthread_mutex_t*, align 8
  %us.addr = alloca i64, align 8
  %r = alloca i32, align 4
  %ts = alloca %struct.timespec, align 8
  %deadline = alloca %struct.timeval, align 8
  store %union.pthread_cond_t* %cond, %union.pthread_cond_t** %cond.addr, align 8
  store %union.pthread_mutex_t* %mut, %union.pthread_mutex_t** %mut.addr, align 8
  store i64 %us, i64* %us.addr, align 8
  %call = call i32 @gettimeofday(%struct.timeval* %deadline, %struct.timezone* null) #6
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load i64, i64* %us.addr, align 8
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1
  %1 = load i64, i64* %tv_usec, align 8
  %add = add i64 %1, %0
  store i64 %add, i64* %tv_usec, align 8
  %tv_usec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1
  %2 = load i64, i64* %tv_usec1, align 8
  %div = sdiv i64 %2, 1000000
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0
  %3 = load i64, i64* %tv_sec, align 8
  %add2 = add i64 %3, %div
  store i64 %add2, i64* %tv_sec, align 8
  %tv_usec3 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1
  %4 = load i64, i64* %tv_usec3, align 8
  %rem = srem i64 %4, 1000000
  store i64 %rem, i64* %tv_usec3, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %tv_sec4 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 0
  %5 = load i64, i64* %tv_sec4, align 8
  %tv_sec5 = getelementptr inbounds %struct.timespec, %struct.timespec* %ts, i32 0, i32 0
  store i64 %5, i64* %tv_sec5, align 8
  %tv_usec6 = getelementptr inbounds %struct.timeval, %struct.timeval* %deadline, i32 0, i32 1
  %6 = load i64, i64* %tv_usec6, align 8
  %mul = mul i64 %6, 1000
  %tv_nsec = getelementptr inbounds %struct.timespec, %struct.timespec* %ts, i32 0, i32 1
  store i64 %mul, i64* %tv_nsec, align 8
  %7 = load %union.pthread_cond_t*, %union.pthread_cond_t** %cond.addr, align 8
  %8 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %mut.addr, align 8
  %call7 = call i32 @pthread_cond_timedwait(%union.pthread_cond_t* %7, %union.pthread_mutex_t* %8, %struct.timespec* %ts)
  store i32 %call7, i32* %r, align 4
  %9 = load i32, i32* %r, align 4
  %cmp = icmp eq i32 %9, 110
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store i32 1, i32* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %10 = load i32, i32* %r, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %if.then.8, label %if.else.9

if.then.8:                                        ; preds = %if.else
  store i32 -1, i32* %retval
  br label %return

if.else.9:                                        ; preds = %if.else
  store i32 0, i32* %retval
  br label %return

return:                                           ; preds = %if.else.9, %if.then.8, %if.then
  %11 = load i32, i32* %retval
  ret i32 %11
}

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) #5

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #5

declare i32 @pthread_cond_timedwait(%union.pthread_cond_t*, %union.pthread_mutex_t*, %struct.timespec*) #2

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) #5

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) #5

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) #2

declare %struct._object* @PyUnicode_FromFormat(i8*, ...) #2

declare %struct._object* @PyUnicode_FromString(i8*) #2

declare %struct._object* @PyObject_Repr(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal void @format_missing(i8* %kind, %struct.PyCodeObject* %co, %struct._object* %names) #0 {
entry:
  %kind.addr = alloca i8*, align 8
  %co.addr = alloca %struct.PyCodeObject*, align 8
  %names.addr = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %len = alloca i64, align 8
  %name_str = alloca %struct._object*, align 8
  %comma = alloca %struct._object*, align 8
  %tail = alloca %struct._object*, align 8
  %tmp = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp29 = alloca %struct._object*, align 8
  %_py_decref_tmp43 = alloca %struct._object*, align 8
  %_py_decref_tmp57 = alloca %struct._object*, align 8
  %_py_decref_tmp71 = alloca %struct._object*, align 8
  %_py_decref_tmp83 = alloca %struct._object*, align 8
  %_py_decref_tmp100 = alloca %struct._object*, align 8
  store i8* %kind, i8** %kind.addr, align 8
  store %struct.PyCodeObject* %co, %struct.PyCodeObject** %co.addr, align 8
  store %struct._object* %names, %struct._object** %names.addr, align 8
  %0 = load %struct._object*, %struct._object** %names.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %1, i32 0, i32 1
  %2 = load i64, i64* %ob_size, align 8
  store i64 %2, i64* %len, align 8
  %3 = load i64, i64* %len, align 8
  switch i64 %3, label %sw.default [
    i64 1, label %sw.bb
    i64 2, label %sw.bb.1
  ]

sw.bb:                                            ; preds = %entry
  %4 = load %struct._object*, %struct._object** %names.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyListObject*
  %ob_item = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %5, i32 0, i32 1
  %6 = load %struct._object**, %struct._object*** %ob_item, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %6, i64 0
  %7 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %7, %struct._object** %name_str, align 8
  %8 = load %struct._object*, %struct._object** %name_str, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 0
  %9 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %9, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  br label %sw.epilog

sw.bb.1:                                          ; preds = %entry
  %10 = load i64, i64* %len, align 8
  %sub = sub i64 %10, 2
  %11 = load %struct._object*, %struct._object** %names.addr, align 8
  %12 = bitcast %struct._object* %11 to %struct.PyListObject*
  %ob_item2 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %12, i32 0, i32 1
  %13 = load %struct._object**, %struct._object*** %ob_item2, align 8
  %arrayidx3 = getelementptr %struct._object*, %struct._object** %13, i64 %sub
  %14 = load %struct._object*, %struct._object** %arrayidx3, align 8
  %15 = load i64, i64* %len, align 8
  %sub4 = sub i64 %15, 1
  %16 = load %struct._object*, %struct._object** %names.addr, align 8
  %17 = bitcast %struct._object* %16 to %struct.PyListObject*
  %ob_item5 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %17, i32 0, i32 1
  %18 = load %struct._object**, %struct._object*** %ob_item5, align 8
  %arrayidx6 = getelementptr %struct._object*, %struct._object** %18, i64 %sub4
  %19 = load %struct._object*, %struct._object** %arrayidx6, align 8
  %call = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), %struct._object* %14, %struct._object* %19)
  store %struct._object* %call, %struct._object** %name_str, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %entry
  %20 = load i64, i64* %len, align 8
  %sub7 = sub i64 %20, 2
  %21 = load %struct._object*, %struct._object** %names.addr, align 8
  %22 = bitcast %struct._object* %21 to %struct.PyListObject*
  %ob_item8 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %22, i32 0, i32 1
  %23 = load %struct._object**, %struct._object*** %ob_item8, align 8
  %arrayidx9 = getelementptr %struct._object*, %struct._object** %23, i64 %sub7
  %24 = load %struct._object*, %struct._object** %arrayidx9, align 8
  %25 = load i64, i64* %len, align 8
  %sub10 = sub i64 %25, 1
  %26 = load %struct._object*, %struct._object** %names.addr, align 8
  %27 = bitcast %struct._object* %26 to %struct.PyListObject*
  %ob_item11 = getelementptr inbounds %struct.PyListObject, %struct.PyListObject* %27, i32 0, i32 1
  %28 = load %struct._object**, %struct._object*** %ob_item11, align 8
  %arrayidx12 = getelementptr %struct._object*, %struct._object** %28, i64 %sub10
  %29 = load %struct._object*, %struct._object** %arrayidx12, align 8
  %call13 = call %struct._object* (i8*, ...) @PyUnicode_FromFormat(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.73, i32 0, i32 0), %struct._object* %24, %struct._object* %29)
  store %struct._object* %call13, %struct._object** %tail, align 8
  %30 = load %struct._object*, %struct._object** %tail, align 8
  %cmp = icmp eq %struct._object* %30, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %sw.default
  br label %do.end.109

if.end:                                           ; preds = %sw.default
  %31 = load %struct._object*, %struct._object** %names.addr, align 8
  %32 = load i64, i64* %len, align 8
  %sub14 = sub i64 %32, 2
  %33 = load i64, i64* %len, align 8
  %call15 = call i32 @PyList_SetSlice(%struct._object* %31, i64 %sub14, i64 %33, %struct._object* null)
  store i32 %call15, i32* %err, align 4
  %34 = load i32, i32* %err, align 4
  %cmp16 = icmp eq i32 %34, -1
  br i1 %cmp16, label %if.then.17, label %if.end.23

if.then.17:                                       ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %if.then.17
  %35 = load %struct._object*, %struct._object** %tail, align 8
  store %struct._object* %35, %struct._object** %_py_decref_tmp, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt19 = getelementptr inbounds %struct._object, %struct._object* %36, i32 0, i32 0
  %37 = load i64, i64* %ob_refcnt19, align 8
  %dec = add i64 %37, -1
  store i64 %dec, i64* %ob_refcnt19, align 8
  %cmp20 = icmp ne i64 %dec, 0
  br i1 %cmp20, label %if.then.21, label %if.else

if.then.21:                                       ; preds = %do.body
  br label %if.end.22

if.else:                                          ; preds = %do.body
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 1
  %39 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %39, i32 0, i32 4
  %40 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %41 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %40(%struct._object* %41)
  br label %if.end.22

if.end.22:                                        ; preds = %if.else, %if.then.21
  br label %do.end

do.end:                                           ; preds = %if.end.22
  br label %do.end.109

if.end.23:                                        ; preds = %if.end
  %call24 = call %struct._object* @PyUnicode_FromString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.74, i32 0, i32 0))
  store %struct._object* %call24, %struct._object** %comma, align 8
  %42 = load %struct._object*, %struct._object** %comma, align 8
  %cmp25 = icmp eq %struct._object* %42, null
  br i1 %cmp25, label %if.then.26, label %if.end.39

if.then.26:                                       ; preds = %if.end.23
  br label %do.body.27

do.body.27:                                       ; preds = %if.then.26
  %43 = load %struct._object*, %struct._object** %tail, align 8
  store %struct._object* %43, %struct._object** %_py_decref_tmp29, align 8
  %44 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_refcnt30 = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt30, align 8
  %dec31 = add i64 %45, -1
  store i64 %dec31, i64* %ob_refcnt30, align 8
  %cmp32 = icmp ne i64 %dec31, 0
  br i1 %cmp32, label %if.then.33, label %if.else.34

if.then.33:                                       ; preds = %do.body.27
  br label %if.end.37

if.else.34:                                       ; preds = %do.body.27
  %46 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  %ob_type35 = getelementptr inbounds %struct._object, %struct._object* %46, i32 0, i32 1
  %47 = load %struct._typeobject*, %struct._typeobject** %ob_type35, align 8
  %tp_dealloc36 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %47, i32 0, i32 4
  %48 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc36, align 8
  %49 = load %struct._object*, %struct._object** %_py_decref_tmp29, align 8
  call void %48(%struct._object* %49)
  br label %if.end.37

if.end.37:                                        ; preds = %if.else.34, %if.then.33
  br label %do.end.38

do.end.38:                                        ; preds = %if.end.37
  br label %do.end.109

if.end.39:                                        ; preds = %if.end.23
  %50 = load %struct._object*, %struct._object** %comma, align 8
  %51 = load %struct._object*, %struct._object** %names.addr, align 8
  %call40 = call %struct._object* @PyUnicode_Join(%struct._object* %50, %struct._object* %51)
  store %struct._object* %call40, %struct._object** %tmp, align 8
  br label %do.body.41

do.body.41:                                       ; preds = %if.end.39
  %52 = load %struct._object*, %struct._object** %comma, align 8
  store %struct._object* %52, %struct._object** %_py_decref_tmp43, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8
  %ob_refcnt44 = getelementptr inbounds %struct._object, %struct._object* %53, i32 0, i32 0
  %54 = load i64, i64* %ob_refcnt44, align 8
  %dec45 = add i64 %54, -1
  store i64 %dec45, i64* %ob_refcnt44, align 8
  %cmp46 = icmp ne i64 %dec45, 0
  br i1 %cmp46, label %if.then.47, label %if.else.48

if.then.47:                                       ; preds = %do.body.41
  br label %if.end.51

if.else.48:                                       ; preds = %do.body.41
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8
  %ob_type49 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 1
  %56 = load %struct._typeobject*, %struct._typeobject** %ob_type49, align 8
  %tp_dealloc50 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %56, i32 0, i32 4
  %57 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc50, align 8
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp43, align 8
  call void %57(%struct._object* %58)
  br label %if.end.51

if.end.51:                                        ; preds = %if.else.48, %if.then.47
  br label %do.end.52

do.end.52:                                        ; preds = %if.end.51
  %59 = load %struct._object*, %struct._object** %tmp, align 8
  %cmp53 = icmp eq %struct._object* %59, null
  br i1 %cmp53, label %if.then.54, label %if.end.67

if.then.54:                                       ; preds = %do.end.52
  br label %do.body.55

do.body.55:                                       ; preds = %if.then.54
  %60 = load %struct._object*, %struct._object** %tail, align 8
  store %struct._object* %60, %struct._object** %_py_decref_tmp57, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_refcnt58 = getelementptr inbounds %struct._object, %struct._object* %61, i32 0, i32 0
  %62 = load i64, i64* %ob_refcnt58, align 8
  %dec59 = add i64 %62, -1
  store i64 %dec59, i64* %ob_refcnt58, align 8
  %cmp60 = icmp ne i64 %dec59, 0
  br i1 %cmp60, label %if.then.61, label %if.else.62

if.then.61:                                       ; preds = %do.body.55
  br label %if.end.65

if.else.62:                                       ; preds = %do.body.55
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  %ob_type63 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 1
  %64 = load %struct._typeobject*, %struct._typeobject** %ob_type63, align 8
  %tp_dealloc64 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %64, i32 0, i32 4
  %65 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc64, align 8
  %66 = load %struct._object*, %struct._object** %_py_decref_tmp57, align 8
  call void %65(%struct._object* %66)
  br label %if.end.65

if.end.65:                                        ; preds = %if.else.62, %if.then.61
  br label %do.end.66

do.end.66:                                        ; preds = %if.end.65
  br label %do.end.109

if.end.67:                                        ; preds = %do.end.52
  %67 = load %struct._object*, %struct._object** %tmp, align 8
  %68 = load %struct._object*, %struct._object** %tail, align 8
  %call68 = call %struct._object* @PyUnicode_Concat(%struct._object* %67, %struct._object* %68)
  store %struct._object* %call68, %struct._object** %name_str, align 8
  br label %do.body.69

do.body.69:                                       ; preds = %if.end.67
  %69 = load %struct._object*, %struct._object** %tmp, align 8
  store %struct._object* %69, %struct._object** %_py_decref_tmp71, align 8
  %70 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_refcnt72 = getelementptr inbounds %struct._object, %struct._object* %70, i32 0, i32 0
  %71 = load i64, i64* %ob_refcnt72, align 8
  %dec73 = add i64 %71, -1
  store i64 %dec73, i64* %ob_refcnt72, align 8
  %cmp74 = icmp ne i64 %dec73, 0
  br i1 %cmp74, label %if.then.75, label %if.else.76

if.then.75:                                       ; preds = %do.body.69
  br label %if.end.79

if.else.76:                                       ; preds = %do.body.69
  %72 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  %ob_type77 = getelementptr inbounds %struct._object, %struct._object* %72, i32 0, i32 1
  %73 = load %struct._typeobject*, %struct._typeobject** %ob_type77, align 8
  %tp_dealloc78 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %73, i32 0, i32 4
  %74 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc78, align 8
  %75 = load %struct._object*, %struct._object** %_py_decref_tmp71, align 8
  call void %74(%struct._object* %75)
  br label %if.end.79

if.end.79:                                        ; preds = %if.else.76, %if.then.75
  br label %do.end.80

do.end.80:                                        ; preds = %if.end.79
  br label %do.body.81

do.body.81:                                       ; preds = %do.end.80
  %76 = load %struct._object*, %struct._object** %tail, align 8
  store %struct._object* %76, %struct._object** %_py_decref_tmp83, align 8
  %77 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_refcnt84 = getelementptr inbounds %struct._object, %struct._object* %77, i32 0, i32 0
  %78 = load i64, i64* %ob_refcnt84, align 8
  %dec85 = add i64 %78, -1
  store i64 %dec85, i64* %ob_refcnt84, align 8
  %cmp86 = icmp ne i64 %dec85, 0
  br i1 %cmp86, label %if.then.87, label %if.else.88

if.then.87:                                       ; preds = %do.body.81
  br label %if.end.91

if.else.88:                                       ; preds = %do.body.81
  %79 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  %ob_type89 = getelementptr inbounds %struct._object, %struct._object* %79, i32 0, i32 1
  %80 = load %struct._typeobject*, %struct._typeobject** %ob_type89, align 8
  %tp_dealloc90 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %80, i32 0, i32 4
  %81 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc90, align 8
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp83, align 8
  call void %81(%struct._object* %82)
  br label %if.end.91

if.end.91:                                        ; preds = %if.else.88, %if.then.87
  br label %do.end.92

do.end.92:                                        ; preds = %if.end.91
  br label %sw.epilog

sw.epilog:                                        ; preds = %do.end.92, %sw.bb.1, %sw.bb
  %83 = load %struct._object*, %struct._object** %name_str, align 8
  %cmp93 = icmp eq %struct._object* %83, null
  br i1 %cmp93, label %if.then.94, label %if.end.95

if.then.94:                                       ; preds = %sw.epilog
  br label %do.end.109

if.end.95:                                        ; preds = %sw.epilog
  %84 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %85 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co.addr, align 8
  %co_name = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %85, i32 0, i32 14
  %86 = load %struct._object*, %struct._object** %co_name, align 8
  %87 = load i64, i64* %len, align 8
  %88 = load i8*, i8** %kind.addr, align 8
  %89 = load i64, i64* %len, align 8
  %cmp96 = icmp eq i64 %89, 1
  %cond = select i1 %cmp96, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.66, i32 0, i32 0)
  %90 = load %struct._object*, %struct._object** %name_str, align 8
  %call97 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %84, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.75, i32 0, i32 0), %struct._object* %86, i64 %87, i8* %88, i8* %cond, %struct._object* %90)
  br label %do.body.98

do.body.98:                                       ; preds = %if.end.95
  %91 = load %struct._object*, %struct._object** %name_str, align 8
  store %struct._object* %91, %struct._object** %_py_decref_tmp100, align 8
  %92 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  %ob_refcnt101 = getelementptr inbounds %struct._object, %struct._object* %92, i32 0, i32 0
  %93 = load i64, i64* %ob_refcnt101, align 8
  %dec102 = add i64 %93, -1
  store i64 %dec102, i64* %ob_refcnt101, align 8
  %cmp103 = icmp ne i64 %dec102, 0
  br i1 %cmp103, label %if.then.104, label %if.else.105

if.then.104:                                      ; preds = %do.body.98
  br label %if.end.108

if.else.105:                                      ; preds = %do.body.98
  %94 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  %ob_type106 = getelementptr inbounds %struct._object, %struct._object* %94, i32 0, i32 1
  %95 = load %struct._typeobject*, %struct._typeobject** %ob_type106, align 8
  %tp_dealloc107 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %95, i32 0, i32 4
  %96 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc107, align 8
  %97 = load %struct._object*, %struct._object** %_py_decref_tmp100, align 8
  call void %96(%struct._object* %97)
  br label %if.end.108

if.end.108:                                       ; preds = %if.else.105, %if.then.104
  br label %do.end.109

do.end.109:                                       ; preds = %if.then, %do.end, %do.end.38, %do.end.66, %if.then.94, %if.end.108
  ret void
}

declare i32 @PyList_SetSlice(%struct._object*, i64, i64, %struct._object*) #2

declare %struct._object* @PyUnicode_Join(%struct._object*, %struct._object*) #2

declare %struct._object* @PyUnicode_Concat(%struct._object*, %struct._object*) #2

declare %struct._object* @_PyObject_LookupSpecial(%struct._object*, %struct._Py_Identifier*) #2

declare void @PyErr_SetObject(%struct._object*, %struct._object*) #2

declare %struct._object* @PyObject_CallObject(%struct._object*, %struct._object*) #2

declare void @PyException_SetCause(%struct._object*, %struct._object*) #2

declare %struct._object* @PyIter_Next(%struct._object*) #2

declare %struct._object* @PySequence_List(%struct._object*) #2

declare i32 @_PyCode_CheckLineNumber(%struct.PyCodeObject*, i32, %struct._addr_pair*) #2

; Function Attrs: nounwind uwtable
define internal void @err_args(%struct._object* %func, i32 %flags, i32 %nargs) #0 {
entry:
  %func.addr = alloca %struct._object*, align 8
  %flags.addr = alloca i32, align 4
  %nargs.addr = alloca i32, align 4
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store i32 %flags, i32* %flags.addr, align 4
  store i32 %nargs, i32* %nargs.addr, align 4
  %0 = load i32, i32* %flags.addr, align 4
  %and = and i32 %0, 4
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %2 = load %struct._object*, %struct._object** %func.addr, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyCFunctionObject*
  %m_ml = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %3, i32 0, i32 1
  %4 = load %struct.PyMethodDef*, %struct.PyMethodDef** %m_ml, align 8
  %ml_name = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %4, i32 0, i32 0
  %5 = load i8*, i8** %ml_name, align 8
  %6 = load i32, i32* %nargs.addr, align 4
  %call = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %1, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.83, i32 0, i32 0), i8* %5, i32 %6)
  br label %if.end

if.else:                                          ; preds = %entry
  %7 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %8 = load %struct._object*, %struct._object** %func.addr, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyCFunctionObject*
  %m_ml1 = getelementptr inbounds %struct.PyCFunctionObject, %struct.PyCFunctionObject* %9, i32 0, i32 1
  %10 = load %struct.PyMethodDef*, %struct.PyMethodDef** %m_ml1, align 8
  %ml_name2 = getelementptr inbounds %struct.PyMethodDef, %struct.PyMethodDef* %10, i32 0, i32 0
  %11 = load i8*, i8** %ml_name2, align 8
  %12 = load i32, i32* %nargs.addr, align 4
  %call3 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %7, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.84, i32 0, i32 0), i8* %11, i32 %12)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @load_args(%struct._object*** %pp_stack, i32 %na) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %pp_stack.addr = alloca %struct._object***, align 8
  %na.addr = alloca i32, align 4
  %args = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  store %struct._object*** %pp_stack, %struct._object**** %pp_stack.addr, align 8
  store i32 %na, i32* %na.addr, align 4
  %0 = load i32, i32* %na.addr, align 4
  %conv = sext i32 %0 to i64
  %call = call %struct._object* @PyTuple_New(i64 %conv)
  store %struct._object* %call, %struct._object** %args, align 8
  %1 = load %struct._object*, %struct._object** %args, align 8
  %cmp = icmp eq %struct._object* %1, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end
  %2 = load i32, i32* %na.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %na.addr, align 4
  %cmp2 = icmp sge i32 %dec, 0
  br i1 %cmp2, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %4 = load %struct._object**, %struct._object*** %3, align 8
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %4, i32 -1
  store %struct._object** %incdec.ptr, %struct._object*** %3, align 8
  %5 = load %struct._object*, %struct._object** %incdec.ptr, align 8
  store %struct._object* %5, %struct._object** %w, align 8
  %6 = load %struct._object*, %struct._object** %w, align 8
  %7 = load i32, i32* %na.addr, align 4
  %idxprom = sext i32 %7 to i64
  %8 = load %struct._object*, %struct._object** %args, align 8
  %9 = bitcast %struct._object* %8 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %9, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom
  store %struct._object* %6, %struct._object** %arrayidx, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %10 = load %struct._object*, %struct._object** %args, align 8
  store %struct._object* %10, %struct._object** %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %11 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %11
}

declare %struct._object* @PyCFunction_Call(%struct._object*, %struct._object*, %struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @fast_function(%struct._object* %func, %struct._object*** %pp_stack, i32 %n, i32 %na, i32 %nk) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %func.addr = alloca %struct._object*, align 8
  %pp_stack.addr = alloca %struct._object***, align 8
  %n.addr = alloca i32, align 4
  %na.addr = alloca i32, align 4
  %nk.addr = alloca i32, align 4
  %co = alloca %struct.PyCodeObject*, align 8
  %globals = alloca %struct._object*, align 8
  %argdefs = alloca %struct._object*, align 8
  %kwdefs = alloca %struct._object*, align 8
  %d = alloca %struct._object**, align 8
  %nd = alloca i32, align 4
  %f = alloca %struct._frame*, align 8
  %retval8 = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %fastlocals = alloca %struct._object**, align 8
  %stack = alloca %struct._object**, align 8
  %i = alloca i32, align 4
  %_py_decref_tmp = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object*** %pp_stack, %struct._object**** %pp_stack.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  store i32 %na, i32* %na.addr, align 4
  store i32 %nk, i32* %nk.addr, align 4
  %0 = load %struct._object*, %struct._object** %func.addr, align 8
  %1 = bitcast %struct._object* %0 to %struct.PyFunctionObject*
  %func_code = getelementptr inbounds %struct.PyFunctionObject, %struct.PyFunctionObject* %1, i32 0, i32 1
  %2 = load %struct._object*, %struct._object** %func_code, align 8
  %3 = bitcast %struct._object* %2 to %struct.PyCodeObject*
  store %struct.PyCodeObject* %3, %struct.PyCodeObject** %co, align 8
  %4 = load %struct._object*, %struct._object** %func.addr, align 8
  %5 = bitcast %struct._object* %4 to %struct.PyFunctionObject*
  %func_globals = getelementptr inbounds %struct.PyFunctionObject, %struct.PyFunctionObject* %5, i32 0, i32 2
  %6 = load %struct._object*, %struct._object** %func_globals, align 8
  store %struct._object* %6, %struct._object** %globals, align 8
  %7 = load %struct._object*, %struct._object** %func.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyFunctionObject*
  %func_defaults = getelementptr inbounds %struct.PyFunctionObject, %struct.PyFunctionObject* %8, i32 0, i32 3
  %9 = load %struct._object*, %struct._object** %func_defaults, align 8
  store %struct._object* %9, %struct._object** %argdefs, align 8
  %10 = load %struct._object*, %struct._object** %func.addr, align 8
  %11 = bitcast %struct._object* %10 to %struct.PyFunctionObject*
  %func_kwdefaults = getelementptr inbounds %struct.PyFunctionObject, %struct.PyFunctionObject* %11, i32 0, i32 4
  %12 = load %struct._object*, %struct._object** %func_kwdefaults, align 8
  store %struct._object* %12, %struct._object** %kwdefs, align 8
  store %struct._object** null, %struct._object*** %d, align 8
  store i32 0, i32* %nd, align 4
  %13 = load %struct._object*, %struct._object** %argdefs, align 8
  %cmp = icmp eq %struct._object* %13, null
  br i1 %cmp, label %land.lhs.true, label %if.end.28

land.lhs.true:                                    ; preds = %entry
  %14 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_argcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %14, i32 0, i32 1
  %15 = load i32, i32* %co_argcount, align 4
  %16 = load i32, i32* %n.addr, align 4
  %cmp1 = icmp eq i32 %15, %16
  br i1 %cmp1, label %land.lhs.true.2, label %if.end.28

land.lhs.true.2:                                  ; preds = %land.lhs.true
  %17 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_kwonlyargcount = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %17, i32 0, i32 2
  %18 = load i32, i32* %co_kwonlyargcount, align 4
  %cmp3 = icmp eq i32 %18, 0
  br i1 %cmp3, label %land.lhs.true.4, label %if.end.28

land.lhs.true.4:                                  ; preds = %land.lhs.true.2
  %19 = load i32, i32* %nk.addr, align 4
  %cmp5 = icmp eq i32 %19, 0
  br i1 %cmp5, label %land.lhs.true.6, label %if.end.28

land.lhs.true.6:                                  ; preds = %land.lhs.true.4
  %20 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %co_flags = getelementptr inbounds %struct.PyCodeObject, %struct.PyCodeObject* %20, i32 0, i32 5
  %21 = load i32, i32* %co_flags, align 4
  %cmp7 = icmp eq i32 %21, 67
  br i1 %cmp7, label %if.then, label %if.end.28

if.then:                                          ; preds = %land.lhs.true.6
  store %struct._object* null, %struct._object** %retval8, align 8
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %22 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %22, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %23 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %24 = bitcast %struct._Py_atomic_address* %23 to i8*
  %25 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %24, i32 %25)
  %26 = load i32, i32* %order, align 4
  switch i32 %26, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then, %if.then, %if.then
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %27 = load i8**, i8*** %volatile_data, align 8
  %28 = load volatile i8*, i8** %27, align 8
  store i8* %28, i8** %result, align 8
  %29 = load i32, i32* %order, align 4
  switch i32 %29, label %sw.default.10 [
    i32 1, label %sw.bb.9
    i32 3, label %sw.bb.9
    i32 4, label %sw.bb.9
  ]

sw.bb.9:                                          ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.11

sw.default.10:                                    ; preds = %sw.epilog
  br label %sw.epilog.11

sw.epilog.11:                                     ; preds = %sw.default.10, %sw.bb.9
  %30 = load i8*, i8** %result, align 8
  store i8* %30, i8** %tmp
  %31 = load i8*, i8** %tmp
  %32 = bitcast i8* %31 to %struct._ts*
  store %struct._ts* %32, %struct._ts** %tstate, align 8
  %33 = load %struct._ts*, %struct._ts** %tstate, align 8
  %34 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %35 = load %struct._object*, %struct._object** %globals, align 8
  %call = call %struct._frame* @PyFrame_New(%struct._ts* %33, %struct.PyCodeObject* %34, %struct._object* %35, %struct._object* null)
  store %struct._frame* %call, %struct._frame** %f, align 8
  %36 = load %struct._frame*, %struct._frame** %f, align 8
  %cmp15 = icmp eq %struct._frame* %36, null
  br i1 %cmp15, label %if.then.16, label %if.end

if.then.16:                                       ; preds = %sw.epilog.11
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %sw.epilog.11
  %37 = load %struct._frame*, %struct._frame** %f, align 8
  %f_localsplus = getelementptr inbounds %struct._frame, %struct._frame* %37, i32 0, i32 18
  %arraydecay = getelementptr inbounds [1 x %struct._object*], [1 x %struct._object*]* %f_localsplus, i32 0, i32 0
  store %struct._object** %arraydecay, %struct._object*** %fastlocals, align 8
  %38 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %39 = load %struct._object**, %struct._object*** %38, align 8
  %40 = load i32, i32* %n.addr, align 4
  %idx.ext = sext i32 %40 to i64
  %idx.neg = sub i64 0, %idx.ext
  %add.ptr = getelementptr %struct._object*, %struct._object** %39, i64 %idx.neg
  store %struct._object** %add.ptr, %struct._object*** %stack, align 8
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %41 = load i32, i32* %i, align 4
  %42 = load i32, i32* %n.addr, align 4
  %cmp17 = icmp slt i32 %41, %42
  br i1 %cmp17, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %43 = load %struct._object**, %struct._object*** %stack, align 8
  %44 = load %struct._object*, %struct._object** %43, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %44, i32 0, i32 0
  %45 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %45, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %46 = load %struct._object**, %struct._object*** %stack, align 8
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %46, i32 1
  store %struct._object** %incdec.ptr, %struct._object*** %stack, align 8
  %47 = load %struct._object*, %struct._object** %46, align 8
  %48 = load i32, i32* %i, align 4
  %idxprom = sext i32 %48 to i64
  %49 = load %struct._object**, %struct._object*** %fastlocals, align 8
  %arrayidx = getelementptr %struct._object*, %struct._object** %49, i64 %idxprom
  store %struct._object* %47, %struct._object** %arrayidx, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %50 = load i32, i32* %i, align 4
  %inc18 = add i32 %50, 1
  store i32 %inc18, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %51 = load %struct._frame*, %struct._frame** %f, align 8
  %call19 = call %struct._object* @PyEval_EvalFrameEx(%struct._frame* %51, i32 0)
  store %struct._object* %call19, %struct._object** %retval8, align 8
  %52 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_depth = getelementptr inbounds %struct._ts, %struct._ts* %52, i32 0, i32 4
  %53 = load i32, i32* %recursion_depth, align 4
  %inc20 = add i32 %53, 1
  store i32 %inc20, i32* %recursion_depth, align 4
  br label %do.body

do.body:                                          ; preds = %for.end
  %54 = load %struct._frame*, %struct._frame** %f, align 8
  %55 = bitcast %struct._frame* %54 to %struct._object*
  store %struct._object* %55, %struct._object** %_py_decref_tmp, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt22 = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt22, align 8
  %dec = add i64 %57, -1
  store i64 %dec, i64* %ob_refcnt22, align 8
  %cmp23 = icmp ne i64 %dec, 0
  br i1 %cmp23, label %if.then.24, label %if.else

if.then.24:                                       ; preds = %do.body
  br label %if.end.25

if.else:                                          ; preds = %do.body
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %60(%struct._object* %61)
  br label %if.end.25

if.end.25:                                        ; preds = %if.else, %if.then.24
  br label %do.end

do.end:                                           ; preds = %if.end.25
  %62 = load %struct._ts*, %struct._ts** %tstate, align 8
  %recursion_depth26 = getelementptr inbounds %struct._ts, %struct._ts* %62, i32 0, i32 4
  %63 = load i32, i32* %recursion_depth26, align 4
  %dec27 = add i32 %63, -1
  store i32 %dec27, i32* %recursion_depth26, align 4
  %64 = load %struct._object*, %struct._object** %retval8, align 8
  store %struct._object* %64, %struct._object** %retval
  br label %return

if.end.28:                                        ; preds = %land.lhs.true.6, %land.lhs.true.4, %land.lhs.true.2, %land.lhs.true, %entry
  %65 = load %struct._object*, %struct._object** %argdefs, align 8
  %cmp29 = icmp ne %struct._object* %65, null
  br i1 %cmp29, label %if.then.30, label %if.end.32

if.then.30:                                       ; preds = %if.end.28
  %66 = load %struct._object*, %struct._object** %argdefs, align 8
  %67 = bitcast %struct._object* %66 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %67, i32 0, i32 1
  %arrayidx31 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 0
  store %struct._object** %arrayidx31, %struct._object*** %d, align 8
  %68 = load %struct._object*, %struct._object** %argdefs, align 8
  %69 = bitcast %struct._object* %68 to %struct.PyVarObject*
  %ob_size = getelementptr inbounds %struct.PyVarObject, %struct.PyVarObject* %69, i32 0, i32 1
  %70 = load i64, i64* %ob_size, align 8
  %conv = trunc i64 %70 to i32
  store i32 %conv, i32* %nd, align 4
  br label %if.end.32

if.end.32:                                        ; preds = %if.then.30, %if.end.28
  %71 = load %struct.PyCodeObject*, %struct.PyCodeObject** %co, align 8
  %72 = bitcast %struct.PyCodeObject* %71 to %struct._object*
  %73 = load %struct._object*, %struct._object** %globals, align 8
  %74 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %75 = load %struct._object**, %struct._object*** %74, align 8
  %76 = load i32, i32* %n.addr, align 4
  %idx.ext33 = sext i32 %76 to i64
  %idx.neg34 = sub i64 0, %idx.ext33
  %add.ptr35 = getelementptr %struct._object*, %struct._object** %75, i64 %idx.neg34
  %77 = load i32, i32* %na.addr, align 4
  %78 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %79 = load %struct._object**, %struct._object*** %78, align 8
  %80 = load i32, i32* %nk.addr, align 4
  %mul = mul i32 2, %80
  %idx.ext36 = sext i32 %mul to i64
  %idx.neg37 = sub i64 0, %idx.ext36
  %add.ptr38 = getelementptr %struct._object*, %struct._object** %79, i64 %idx.neg37
  %81 = load i32, i32* %nk.addr, align 4
  %82 = load %struct._object**, %struct._object*** %d, align 8
  %83 = load i32, i32* %nd, align 4
  %84 = load %struct._object*, %struct._object** %kwdefs, align 8
  %85 = load %struct._object*, %struct._object** %func.addr, align 8
  %86 = bitcast %struct._object* %85 to %struct.PyFunctionObject*
  %func_closure = getelementptr inbounds %struct.PyFunctionObject, %struct.PyFunctionObject* %86, i32 0, i32 5
  %87 = load %struct._object*, %struct._object** %func_closure, align 8
  %call39 = call %struct._object* @PyEval_EvalCodeEx(%struct._object* %72, %struct._object* %73, %struct._object* null, %struct._object** %add.ptr35, i32 %77, %struct._object** %add.ptr38, i32 %81, %struct._object** %82, i32 %83, %struct._object* %84, %struct._object* %87)
  store %struct._object* %call39, %struct._object** %retval
  br label %return

return:                                           ; preds = %if.end.32, %do.end, %if.then.16
  %88 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %88
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @do_call(%struct._object* %func, %struct._object*** %pp_stack, i32 %na, i32 %nk) #0 {
entry:
  %func.addr = alloca %struct._object*, align 8
  %pp_stack.addr = alloca %struct._object***, align 8
  %na.addr = alloca i32, align 4
  %nk.addr = alloca i32, align 4
  %callargs = alloca %struct._object*, align 8
  %kwdict = alloca %struct._object*, align 8
  %result = alloca %struct._object*, align 8
  %tstate = alloca %struct._ts*, align 8
  %atomic_val = alloca %struct._Py_atomic_address*, align 8
  %result10 = alloca i8*, align 8
  %volatile_data = alloca i8**, align 8
  %order = alloca i32, align 4
  %tmp = alloca i8*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %_py_xdecref_tmp = alloca %struct._object*, align 8
  %_py_decref_tmp59 = alloca %struct._object*, align 8
  %_py_xdecref_tmp73 = alloca %struct._object*, align 8
  %_py_decref_tmp78 = alloca %struct._object*, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object*** %pp_stack, %struct._object**** %pp_stack.addr, align 8
  store i32 %na, i32* %na.addr, align 4
  store i32 %nk, i32* %nk.addr, align 4
  store %struct._object* null, %struct._object** %callargs, align 8
  store %struct._object* null, %struct._object** %kwdict, align 8
  store %struct._object* null, %struct._object** %result, align 8
  %0 = load i32, i32* %nk.addr, align 4
  %cmp = icmp sgt i32 %0, 0
  br i1 %cmp, label %if.then, label %if.end.3

if.then:                                          ; preds = %entry
  %1 = load i32, i32* %nk.addr, align 4
  %2 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %3 = load %struct._object*, %struct._object** %func.addr, align 8
  %call = call %struct._object* @update_keyword_args(%struct._object* null, i32 %1, %struct._object*** %2, %struct._object* %3)
  store %struct._object* %call, %struct._object** %kwdict, align 8
  %4 = load %struct._object*, %struct._object** %kwdict, align 8
  %cmp1 = icmp eq %struct._object* %4, null
  br i1 %cmp1, label %if.then.2, label %if.end

if.then.2:                                        ; preds = %if.then
  br label %call_fail

if.end:                                           ; preds = %if.then
  br label %if.end.3

if.end.3:                                         ; preds = %if.end, %entry
  %5 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %6 = load i32, i32* %na.addr, align 4
  %call4 = call %struct._object* @load_args(%struct._object*** %5, i32 %6)
  store %struct._object* %call4, %struct._object** %callargs, align 8
  %7 = load %struct._object*, %struct._object** %callargs, align 8
  %cmp5 = icmp eq %struct._object* %7, null
  br i1 %cmp5, label %if.then.6, label %if.end.7

if.then.6:                                        ; preds = %if.end.3
  br label %call_fail

if.end.7:                                         ; preds = %if.end.3
  %8 = load %struct._object*, %struct._object** %func.addr, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %8, i32 0, i32 1
  %9 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %cmp8 = icmp eq %struct._typeobject* %9, @PyCFunction_Type
  br i1 %cmp8, label %if.then.9, label %if.else.50

if.then.9:                                        ; preds = %if.end.7
  store %struct._Py_atomic_address* @_PyThreadState_Current, %struct._Py_atomic_address** %atomic_val, align 8
  %10 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %_value = getelementptr inbounds %struct._Py_atomic_address, %struct._Py_atomic_address* %10, i32 0, i32 0
  store i8** %_value, i8*** %volatile_data, align 8
  store i32 0, i32* %order, align 4
  %11 = load %struct._Py_atomic_address*, %struct._Py_atomic_address** %atomic_val, align 8
  %12 = bitcast %struct._Py_atomic_address* %11 to i8*
  %13 = load i32, i32* %order, align 4
  call void @_Py_ANNOTATE_MEMORY_ORDER(i8* %12, i32 %13)
  %14 = load i32, i32* %order, align 4
  switch i32 %14, label %sw.default [
    i32 2, label %sw.bb
    i32 3, label %sw.bb
    i32 4, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then.9, %if.then.9, %if.then.9
  call void @_Py_atomic_thread_fence(i32 2)
  br label %sw.epilog

sw.default:                                       ; preds = %if.then.9
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb
  %15 = load i8**, i8*** %volatile_data, align 8
  %16 = load volatile i8*, i8** %15, align 8
  store i8* %16, i8** %result10, align 8
  %17 = load i32, i32* %order, align 4
  switch i32 %17, label %sw.default.12 [
    i32 1, label %sw.bb.11
    i32 3, label %sw.bb.11
    i32 4, label %sw.bb.11
  ]

sw.bb.11:                                         ; preds = %sw.epilog, %sw.epilog, %sw.epilog
  call void @_Py_atomic_signal_fence(i32 1)
  br label %sw.epilog.13

sw.default.12:                                    ; preds = %sw.epilog
  br label %sw.epilog.13

sw.epilog.13:                                     ; preds = %sw.default.12, %sw.bb.11
  %18 = load i8*, i8** %result10, align 8
  store i8* %18, i8** %tmp
  %19 = load i8*, i8** %tmp
  %20 = bitcast i8* %19 to %struct._ts*
  store %struct._ts* %20, %struct._ts** %tstate, align 8
  %21 = load %struct._ts*, %struct._ts** %tstate, align 8
  %use_tracing = getelementptr inbounds %struct._ts, %struct._ts* %21, i32 0, i32 8
  %22 = load i32, i32* %use_tracing, align 4
  %tobool = icmp ne i32 %22, 0
  br i1 %tobool, label %land.lhs.true, label %if.else.47

land.lhs.true:                                    ; preds = %sw.epilog.13
  %23 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc = getelementptr inbounds %struct._ts, %struct._ts* %23, i32 0, i32 9
  %24 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc, align 8
  %tobool14 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %24, null
  br i1 %tobool14, label %if.then.15, label %if.else.47

if.then.15:                                       ; preds = %land.lhs.true
  %25 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc16 = getelementptr inbounds %struct._ts, %struct._ts* %25, i32 0, i32 9
  %26 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc16, align 8
  %27 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj = getelementptr inbounds %struct._ts, %struct._ts* %27, i32 0, i32 11
  %28 = load %struct._object*, %struct._object** %c_profileobj, align 8
  %29 = load %struct._ts*, %struct._ts** %tstate, align 8
  %30 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame = getelementptr inbounds %struct._ts, %struct._ts* %30, i32 0, i32 3
  %31 = load %struct._frame*, %struct._frame** %frame, align 8
  %32 = load %struct._object*, %struct._object** %func.addr, align 8
  %call17 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %26, %struct._object* %28, %struct._ts* %29, %struct._frame* %31, i32 4, %struct._object* %32)
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.then.19, label %if.else

if.then.19:                                       ; preds = %if.then.15
  store %struct._object* null, %struct._object** %result, align 8
  br label %if.end.46

if.else:                                          ; preds = %if.then.15
  %33 = load %struct._object*, %struct._object** %func.addr, align 8
  %34 = load %struct._object*, %struct._object** %callargs, align 8
  %35 = load %struct._object*, %struct._object** %kwdict, align 8
  %call20 = call %struct._object* @PyCFunction_Call(%struct._object* %33, %struct._object* %34, %struct._object* %35)
  store %struct._object* %call20, %struct._object** %result, align 8
  %36 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc21 = getelementptr inbounds %struct._ts, %struct._ts* %36, i32 0, i32 9
  %37 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc21, align 8
  %cmp22 = icmp ne i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %37, null
  br i1 %cmp22, label %if.then.23, label %if.end.45

if.then.23:                                       ; preds = %if.else
  %38 = load %struct._object*, %struct._object** %result, align 8
  %cmp24 = icmp eq %struct._object* %38, null
  br i1 %cmp24, label %if.then.25, label %if.else.30

if.then.25:                                       ; preds = %if.then.23
  %39 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc26 = getelementptr inbounds %struct._ts, %struct._ts* %39, i32 0, i32 9
  %40 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc26, align 8
  %41 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj27 = getelementptr inbounds %struct._ts, %struct._ts* %41, i32 0, i32 11
  %42 = load %struct._object*, %struct._object** %c_profileobj27, align 8
  %43 = load %struct._ts*, %struct._ts** %tstate, align 8
  %44 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame28 = getelementptr inbounds %struct._ts, %struct._ts* %44, i32 0, i32 3
  %45 = load %struct._frame*, %struct._frame** %frame28, align 8
  %46 = load %struct._object*, %struct._object** %func.addr, align 8
  %call29 = call i32 @call_trace_protected(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %40, %struct._object* %42, %struct._ts* %43, %struct._frame* %45, i32 5, %struct._object* %46)
  br label %if.end.44

if.else.30:                                       ; preds = %if.then.23
  %47 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profilefunc31 = getelementptr inbounds %struct._ts, %struct._ts* %47, i32 0, i32 9
  %48 = load i32 (%struct._object*, %struct._frame*, i32, %struct._object*)*, i32 (%struct._object*, %struct._frame*, i32, %struct._object*)** %c_profilefunc31, align 8
  %49 = load %struct._ts*, %struct._ts** %tstate, align 8
  %c_profileobj32 = getelementptr inbounds %struct._ts, %struct._ts* %49, i32 0, i32 11
  %50 = load %struct._object*, %struct._object** %c_profileobj32, align 8
  %51 = load %struct._ts*, %struct._ts** %tstate, align 8
  %52 = load %struct._ts*, %struct._ts** %tstate, align 8
  %frame33 = getelementptr inbounds %struct._ts, %struct._ts* %52, i32 0, i32 3
  %53 = load %struct._frame*, %struct._frame** %frame33, align 8
  %54 = load %struct._object*, %struct._object** %func.addr, align 8
  %call34 = call i32 @call_trace(i32 (%struct._object*, %struct._frame*, i32, %struct._object*)* %48, %struct._object* %50, %struct._ts* %51, %struct._frame* %53, i32 6, %struct._object* %54)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then.36, label %if.end.43

if.then.36:                                       ; preds = %if.else.30
  br label %do.body

do.body:                                          ; preds = %if.then.36
  %55 = load %struct._object*, %struct._object** %result, align 8
  store %struct._object* %55, %struct._object** %_py_decref_tmp, align 8
  %56 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %56, i32 0, i32 0
  %57 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %57, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp38 = icmp ne i64 %dec, 0
  br i1 %cmp38, label %if.then.39, label %if.else.40

if.then.39:                                       ; preds = %do.body
  br label %if.end.42

if.else.40:                                       ; preds = %do.body
  %58 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type41 = getelementptr inbounds %struct._object, %struct._object* %58, i32 0, i32 1
  %59 = load %struct._typeobject*, %struct._typeobject** %ob_type41, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %59, i32 0, i32 4
  %60 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %61 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %60(%struct._object* %61)
  br label %if.end.42

if.end.42:                                        ; preds = %if.else.40, %if.then.39
  br label %do.end

do.end:                                           ; preds = %if.end.42
  store %struct._object* null, %struct._object** %result, align 8
  br label %if.end.43

if.end.43:                                        ; preds = %do.end, %if.else.30
  br label %if.end.44

if.end.44:                                        ; preds = %if.end.43, %if.then.25
  br label %if.end.45

if.end.45:                                        ; preds = %if.end.44, %if.else
  br label %if.end.46

if.end.46:                                        ; preds = %if.end.45, %if.then.19
  br label %if.end.49

if.else.47:                                       ; preds = %land.lhs.true, %sw.epilog.13
  %62 = load %struct._object*, %struct._object** %func.addr, align 8
  %63 = load %struct._object*, %struct._object** %callargs, align 8
  %64 = load %struct._object*, %struct._object** %kwdict, align 8
  %call48 = call %struct._object* @PyCFunction_Call(%struct._object* %62, %struct._object* %63, %struct._object* %64)
  store %struct._object* %call48, %struct._object** %result, align 8
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.47, %if.end.46
  br label %if.end.52

if.else.50:                                       ; preds = %if.end.7
  %65 = load %struct._object*, %struct._object** %func.addr, align 8
  %66 = load %struct._object*, %struct._object** %callargs, align 8
  %67 = load %struct._object*, %struct._object** %kwdict, align 8
  %call51 = call %struct._object* @PyObject_Call(%struct._object* %65, %struct._object* %66, %struct._object* %67)
  store %struct._object* %call51, %struct._object** %result, align 8
  br label %if.end.52

if.end.52:                                        ; preds = %if.else.50, %if.end.49
  br label %call_fail

call_fail:                                        ; preds = %if.end.52, %if.then.6, %if.then.2
  br label %do.body.53

do.body.53:                                       ; preds = %call_fail
  %68 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %68, %struct._object** %_py_xdecref_tmp, align 8
  %69 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  %cmp55 = icmp ne %struct._object* %69, null
  br i1 %cmp55, label %if.then.56, label %if.end.69

if.then.56:                                       ; preds = %do.body.53
  br label %do.body.57

do.body.57:                                       ; preds = %if.then.56
  %70 = load %struct._object*, %struct._object** %_py_xdecref_tmp, align 8
  store %struct._object* %70, %struct._object** %_py_decref_tmp59, align 8
  %71 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_refcnt60 = getelementptr inbounds %struct._object, %struct._object* %71, i32 0, i32 0
  %72 = load i64, i64* %ob_refcnt60, align 8
  %dec61 = add i64 %72, -1
  store i64 %dec61, i64* %ob_refcnt60, align 8
  %cmp62 = icmp ne i64 %dec61, 0
  br i1 %cmp62, label %if.then.63, label %if.else.64

if.then.63:                                       ; preds = %do.body.57
  br label %if.end.67

if.else.64:                                       ; preds = %do.body.57
  %73 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  %ob_type65 = getelementptr inbounds %struct._object, %struct._object* %73, i32 0, i32 1
  %74 = load %struct._typeobject*, %struct._typeobject** %ob_type65, align 8
  %tp_dealloc66 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %74, i32 0, i32 4
  %75 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc66, align 8
  %76 = load %struct._object*, %struct._object** %_py_decref_tmp59, align 8
  call void %75(%struct._object* %76)
  br label %if.end.67

if.end.67:                                        ; preds = %if.else.64, %if.then.63
  br label %do.end.68

do.end.68:                                        ; preds = %if.end.67
  br label %if.end.69

if.end.69:                                        ; preds = %do.end.68, %do.body.53
  br label %do.end.70

do.end.70:                                        ; preds = %if.end.69
  br label %do.body.71

do.body.71:                                       ; preds = %do.end.70
  %77 = load %struct._object*, %struct._object** %kwdict, align 8
  store %struct._object* %77, %struct._object** %_py_xdecref_tmp73, align 8
  %78 = load %struct._object*, %struct._object** %_py_xdecref_tmp73, align 8
  %cmp74 = icmp ne %struct._object* %78, null
  br i1 %cmp74, label %if.then.75, label %if.end.88

if.then.75:                                       ; preds = %do.body.71
  br label %do.body.76

do.body.76:                                       ; preds = %if.then.75
  %79 = load %struct._object*, %struct._object** %_py_xdecref_tmp73, align 8
  store %struct._object* %79, %struct._object** %_py_decref_tmp78, align 8
  %80 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_refcnt79 = getelementptr inbounds %struct._object, %struct._object* %80, i32 0, i32 0
  %81 = load i64, i64* %ob_refcnt79, align 8
  %dec80 = add i64 %81, -1
  store i64 %dec80, i64* %ob_refcnt79, align 8
  %cmp81 = icmp ne i64 %dec80, 0
  br i1 %cmp81, label %if.then.82, label %if.else.83

if.then.82:                                       ; preds = %do.body.76
  br label %if.end.86

if.else.83:                                       ; preds = %do.body.76
  %82 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  %ob_type84 = getelementptr inbounds %struct._object, %struct._object* %82, i32 0, i32 1
  %83 = load %struct._typeobject*, %struct._typeobject** %ob_type84, align 8
  %tp_dealloc85 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %83, i32 0, i32 4
  %84 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc85, align 8
  %85 = load %struct._object*, %struct._object** %_py_decref_tmp78, align 8
  call void %84(%struct._object* %85)
  br label %if.end.86

if.end.86:                                        ; preds = %if.else.83, %if.then.82
  br label %do.end.87

do.end.87:                                        ; preds = %if.end.86
  br label %if.end.88

if.end.88:                                        ; preds = %do.end.87, %do.body.71
  br label %do.end.89

do.end.89:                                        ; preds = %if.end.88
  %86 = load %struct._object*, %struct._object** %result, align 8
  ret %struct._object* %86
}

; Function Attrs: nounwind uwtable
define internal %struct._object* @update_keyword_args(%struct._object* %orig_kwdict, i32 %nk, %struct._object*** %pp_stack, %struct._object* %func) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %orig_kwdict.addr = alloca %struct._object*, align 8
  %nk.addr = alloca i32, align 4
  %pp_stack.addr = alloca %struct._object***, align 8
  %func.addr = alloca %struct._object*, align 8
  %kwdict = alloca %struct._object*, align 8
  %_py_decref_tmp = alloca %struct._object*, align 8
  %err = alloca i32, align 4
  %value = alloca %struct._object*, align 8
  %key = alloca %struct._object*, align 8
  %_py_decref_tmp19 = alloca %struct._object*, align 8
  %_py_decref_tmp30 = alloca %struct._object*, align 8
  %_py_decref_tmp41 = alloca %struct._object*, align 8
  %_py_decref_tmp54 = alloca %struct._object*, align 8
  %_py_decref_tmp65 = alloca %struct._object*, align 8
  %_py_decref_tmp77 = alloca %struct._object*, align 8
  store %struct._object* %orig_kwdict, %struct._object** %orig_kwdict.addr, align 8
  store i32 %nk, i32* %nk.addr, align 4
  store %struct._object*** %pp_stack, %struct._object**** %pp_stack.addr, align 8
  store %struct._object* %func, %struct._object** %func.addr, align 8
  store %struct._object* null, %struct._object** %kwdict, align 8
  %0 = load %struct._object*, %struct._object** %orig_kwdict.addr, align 8
  %cmp = icmp eq %struct._object* %0, null
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call %struct._object* @PyDict_New()
  store %struct._object* %call, %struct._object** %kwdict, align 8
  br label %if.end.5

if.else:                                          ; preds = %entry
  %1 = load %struct._object*, %struct._object** %orig_kwdict.addr, align 8
  %call1 = call %struct._object* @PyDict_Copy(%struct._object* %1)
  store %struct._object* %call1, %struct._object** %kwdict, align 8
  br label %do.body

do.body:                                          ; preds = %if.else
  %2 = load %struct._object*, %struct._object** %orig_kwdict.addr, align 8
  store %struct._object* %2, %struct._object** %_py_decref_tmp, align 8
  %3 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %3, i32 0, i32 0
  %4 = load i64, i64* %ob_refcnt, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %ob_refcnt, align 8
  %cmp2 = icmp ne i64 %dec, 0
  br i1 %cmp2, label %if.then.3, label %if.else.4

if.then.3:                                        ; preds = %do.body
  br label %if.end

if.else.4:                                        ; preds = %do.body
  %5 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  %ob_type = getelementptr inbounds %struct._object, %struct._object* %5, i32 0, i32 1
  %6 = load %struct._typeobject*, %struct._typeobject** %ob_type, align 8
  %tp_dealloc = getelementptr inbounds %struct._typeobject, %struct._typeobject* %6, i32 0, i32 4
  %7 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc, align 8
  %8 = load %struct._object*, %struct._object** %_py_decref_tmp, align 8
  call void %7(%struct._object* %8)
  br label %if.end

if.end:                                           ; preds = %if.else.4, %if.then.3
  br label %do.end

do.end:                                           ; preds = %if.end
  br label %if.end.5

if.end.5:                                         ; preds = %do.end, %if.then
  %9 = load %struct._object*, %struct._object** %kwdict, align 8
  %cmp6 = icmp eq %struct._object* %9, null
  br i1 %cmp6, label %if.then.7, label %if.end.8

if.then.7:                                        ; preds = %if.end.5
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.8:                                         ; preds = %if.end.5
  br label %while.cond

while.cond:                                       ; preds = %if.end.87, %if.end.8
  %10 = load i32, i32* %nk.addr, align 4
  %dec9 = add i32 %10, -1
  store i32 %dec9, i32* %nk.addr, align 4
  %cmp10 = icmp sge i32 %dec9, 0
  br i1 %cmp10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %12 = load %struct._object**, %struct._object*** %11, align 8
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %12, i32 -1
  store %struct._object** %incdec.ptr, %struct._object*** %11, align 8
  %13 = load %struct._object*, %struct._object** %incdec.ptr, align 8
  store %struct._object* %13, %struct._object** %value, align 8
  %14 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %15 = load %struct._object**, %struct._object*** %14, align 8
  %incdec.ptr11 = getelementptr %struct._object*, %struct._object** %15, i32 -1
  store %struct._object** %incdec.ptr11, %struct._object*** %14, align 8
  %16 = load %struct._object*, %struct._object** %incdec.ptr11, align 8
  store %struct._object* %16, %struct._object** %key, align 8
  %17 = load %struct._object*, %struct._object** %kwdict, align 8
  %18 = load %struct._object*, %struct._object** %key, align 8
  %call12 = call %struct._object* @PyDict_GetItem(%struct._object* %17, %struct._object* %18)
  %cmp13 = icmp ne %struct._object* %call12, null
  br i1 %cmp13, label %if.then.14, label %if.end.51

if.then.14:                                       ; preds = %while.body
  %19 = load %struct._object*, %struct._object** @PyExc_TypeError, align 8
  %20 = load %struct._object*, %struct._object** %func.addr, align 8
  %call15 = call i8* @PyEval_GetFuncName(%struct._object* %20)
  %21 = load %struct._object*, %struct._object** %func.addr, align 8
  %call16 = call i8* @PyEval_GetFuncDesc(%struct._object* %21)
  %22 = load %struct._object*, %struct._object** %key, align 8
  %call17 = call %struct._object* (%struct._object*, i8*, ...) @PyErr_Format(%struct._object* %19, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.85, i32 0, i32 0), i8* %call15, i8* %call16, %struct._object* %22)
  br label %do.body.18

do.body.18:                                       ; preds = %if.then.14
  %23 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %23, %struct._object** %_py_decref_tmp19, align 8
  %24 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_refcnt20 = getelementptr inbounds %struct._object, %struct._object* %24, i32 0, i32 0
  %25 = load i64, i64* %ob_refcnt20, align 8
  %dec21 = add i64 %25, -1
  store i64 %dec21, i64* %ob_refcnt20, align 8
  %cmp22 = icmp ne i64 %dec21, 0
  br i1 %cmp22, label %if.then.23, label %if.else.24

if.then.23:                                       ; preds = %do.body.18
  br label %if.end.27

if.else.24:                                       ; preds = %do.body.18
  %26 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  %ob_type25 = getelementptr inbounds %struct._object, %struct._object* %26, i32 0, i32 1
  %27 = load %struct._typeobject*, %struct._typeobject** %ob_type25, align 8
  %tp_dealloc26 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %27, i32 0, i32 4
  %28 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc26, align 8
  %29 = load %struct._object*, %struct._object** %_py_decref_tmp19, align 8
  call void %28(%struct._object* %29)
  br label %if.end.27

if.end.27:                                        ; preds = %if.else.24, %if.then.23
  br label %do.end.28

do.end.28:                                        ; preds = %if.end.27
  br label %do.body.29

do.body.29:                                       ; preds = %do.end.28
  %30 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %30, %struct._object** %_py_decref_tmp30, align 8
  %31 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_refcnt31 = getelementptr inbounds %struct._object, %struct._object* %31, i32 0, i32 0
  %32 = load i64, i64* %ob_refcnt31, align 8
  %dec32 = add i64 %32, -1
  store i64 %dec32, i64* %ob_refcnt31, align 8
  %cmp33 = icmp ne i64 %dec32, 0
  br i1 %cmp33, label %if.then.34, label %if.else.35

if.then.34:                                       ; preds = %do.body.29
  br label %if.end.38

if.else.35:                                       ; preds = %do.body.29
  %33 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  %ob_type36 = getelementptr inbounds %struct._object, %struct._object* %33, i32 0, i32 1
  %34 = load %struct._typeobject*, %struct._typeobject** %ob_type36, align 8
  %tp_dealloc37 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %34, i32 0, i32 4
  %35 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc37, align 8
  %36 = load %struct._object*, %struct._object** %_py_decref_tmp30, align 8
  call void %35(%struct._object* %36)
  br label %if.end.38

if.end.38:                                        ; preds = %if.else.35, %if.then.34
  br label %do.end.39

do.end.39:                                        ; preds = %if.end.38
  br label %do.body.40

do.body.40:                                       ; preds = %do.end.39
  %37 = load %struct._object*, %struct._object** %kwdict, align 8
  store %struct._object* %37, %struct._object** %_py_decref_tmp41, align 8
  %38 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_refcnt42 = getelementptr inbounds %struct._object, %struct._object* %38, i32 0, i32 0
  %39 = load i64, i64* %ob_refcnt42, align 8
  %dec43 = add i64 %39, -1
  store i64 %dec43, i64* %ob_refcnt42, align 8
  %cmp44 = icmp ne i64 %dec43, 0
  br i1 %cmp44, label %if.then.45, label %if.else.46

if.then.45:                                       ; preds = %do.body.40
  br label %if.end.49

if.else.46:                                       ; preds = %do.body.40
  %40 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  %ob_type47 = getelementptr inbounds %struct._object, %struct._object* %40, i32 0, i32 1
  %41 = load %struct._typeobject*, %struct._typeobject** %ob_type47, align 8
  %tp_dealloc48 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %41, i32 0, i32 4
  %42 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc48, align 8
  %43 = load %struct._object*, %struct._object** %_py_decref_tmp41, align 8
  call void %42(%struct._object* %43)
  br label %if.end.49

if.end.49:                                        ; preds = %if.else.46, %if.then.45
  br label %do.end.50

do.end.50:                                        ; preds = %if.end.49
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.51:                                        ; preds = %while.body
  %44 = load %struct._object*, %struct._object** %kwdict, align 8
  %45 = load %struct._object*, %struct._object** %key, align 8
  %46 = load %struct._object*, %struct._object** %value, align 8
  %call52 = call i32 @PyDict_SetItem(%struct._object* %44, %struct._object* %45, %struct._object* %46)
  store i32 %call52, i32* %err, align 4
  br label %do.body.53

do.body.53:                                       ; preds = %if.end.51
  %47 = load %struct._object*, %struct._object** %key, align 8
  store %struct._object* %47, %struct._object** %_py_decref_tmp54, align 8
  %48 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_refcnt55 = getelementptr inbounds %struct._object, %struct._object* %48, i32 0, i32 0
  %49 = load i64, i64* %ob_refcnt55, align 8
  %dec56 = add i64 %49, -1
  store i64 %dec56, i64* %ob_refcnt55, align 8
  %cmp57 = icmp ne i64 %dec56, 0
  br i1 %cmp57, label %if.then.58, label %if.else.59

if.then.58:                                       ; preds = %do.body.53
  br label %if.end.62

if.else.59:                                       ; preds = %do.body.53
  %50 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  %ob_type60 = getelementptr inbounds %struct._object, %struct._object* %50, i32 0, i32 1
  %51 = load %struct._typeobject*, %struct._typeobject** %ob_type60, align 8
  %tp_dealloc61 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %51, i32 0, i32 4
  %52 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc61, align 8
  %53 = load %struct._object*, %struct._object** %_py_decref_tmp54, align 8
  call void %52(%struct._object* %53)
  br label %if.end.62

if.end.62:                                        ; preds = %if.else.59, %if.then.58
  br label %do.end.63

do.end.63:                                        ; preds = %if.end.62
  br label %do.body.64

do.body.64:                                       ; preds = %do.end.63
  %54 = load %struct._object*, %struct._object** %value, align 8
  store %struct._object* %54, %struct._object** %_py_decref_tmp65, align 8
  %55 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  %ob_refcnt66 = getelementptr inbounds %struct._object, %struct._object* %55, i32 0, i32 0
  %56 = load i64, i64* %ob_refcnt66, align 8
  %dec67 = add i64 %56, -1
  store i64 %dec67, i64* %ob_refcnt66, align 8
  %cmp68 = icmp ne i64 %dec67, 0
  br i1 %cmp68, label %if.then.69, label %if.else.70

if.then.69:                                       ; preds = %do.body.64
  br label %if.end.73

if.else.70:                                       ; preds = %do.body.64
  %57 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  %ob_type71 = getelementptr inbounds %struct._object, %struct._object* %57, i32 0, i32 1
  %58 = load %struct._typeobject*, %struct._typeobject** %ob_type71, align 8
  %tp_dealloc72 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %58, i32 0, i32 4
  %59 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc72, align 8
  %60 = load %struct._object*, %struct._object** %_py_decref_tmp65, align 8
  call void %59(%struct._object* %60)
  br label %if.end.73

if.end.73:                                        ; preds = %if.else.70, %if.then.69
  br label %do.end.74

do.end.74:                                        ; preds = %if.end.73
  %61 = load i32, i32* %err, align 4
  %tobool = icmp ne i32 %61, 0
  br i1 %tobool, label %if.then.75, label %if.end.87

if.then.75:                                       ; preds = %do.end.74
  br label %do.body.76

do.body.76:                                       ; preds = %if.then.75
  %62 = load %struct._object*, %struct._object** %kwdict, align 8
  store %struct._object* %62, %struct._object** %_py_decref_tmp77, align 8
  %63 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_refcnt78 = getelementptr inbounds %struct._object, %struct._object* %63, i32 0, i32 0
  %64 = load i64, i64* %ob_refcnt78, align 8
  %dec79 = add i64 %64, -1
  store i64 %dec79, i64* %ob_refcnt78, align 8
  %cmp80 = icmp ne i64 %dec79, 0
  br i1 %cmp80, label %if.then.81, label %if.else.82

if.then.81:                                       ; preds = %do.body.76
  br label %if.end.85

if.else.82:                                       ; preds = %do.body.76
  %65 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  %ob_type83 = getelementptr inbounds %struct._object, %struct._object* %65, i32 0, i32 1
  %66 = load %struct._typeobject*, %struct._typeobject** %ob_type83, align 8
  %tp_dealloc84 = getelementptr inbounds %struct._typeobject, %struct._typeobject* %66, i32 0, i32 4
  %67 = load void (%struct._object*)*, void (%struct._object*)** %tp_dealloc84, align 8
  %68 = load %struct._object*, %struct._object** %_py_decref_tmp77, align 8
  call void %67(%struct._object* %68)
  br label %if.end.85

if.end.85:                                        ; preds = %if.else.82, %if.then.81
  br label %do.end.86

do.end.86:                                        ; preds = %if.end.85
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end.87:                                        ; preds = %do.end.74
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %69 = load %struct._object*, %struct._object** %kwdict, align 8
  store %struct._object* %69, %struct._object** %retval
  br label %return

return:                                           ; preds = %while.end, %do.end.86, %do.end.50, %if.then.7
  %70 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %70
}

declare %struct._object* @PyDict_Copy(%struct._object*) #2

declare i32 @PyDict_Update(%struct._object*, %struct._object*) #2

declare %struct._object* @PySequence_Tuple(%struct._object*) #2

; Function Attrs: nounwind uwtable
define internal %struct._object* @update_star_args(i32 %nstack, i32 %nstar, %struct._object* %stararg, %struct._object*** %pp_stack) #0 {
entry:
  %retval = alloca %struct._object*, align 8
  %nstack.addr = alloca i32, align 4
  %nstar.addr = alloca i32, align 4
  %stararg.addr = alloca %struct._object*, align 8
  %pp_stack.addr = alloca %struct._object***, align 8
  %callargs = alloca %struct._object*, align 8
  %w = alloca %struct._object*, align 8
  %i = alloca i32, align 4
  %a = alloca %struct._object*, align 8
  store i32 %nstack, i32* %nstack.addr, align 4
  store i32 %nstar, i32* %nstar.addr, align 4
  store %struct._object* %stararg, %struct._object** %stararg.addr, align 8
  store %struct._object*** %pp_stack, %struct._object**** %pp_stack.addr, align 8
  %0 = load i32, i32* %nstack.addr, align 4
  %1 = load i32, i32* %nstar.addr, align 4
  %add = add i32 %0, %1
  %conv = sext i32 %add to i64
  %call = call %struct._object* @PyTuple_New(i64 %conv)
  store %struct._object* %call, %struct._object** %callargs, align 8
  %2 = load %struct._object*, %struct._object** %callargs, align 8
  %cmp = icmp eq %struct._object* %2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store %struct._object* null, %struct._object** %retval
  br label %return

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %nstar.addr, align 4
  %tobool = icmp ne i32 %3, 0
  br i1 %tobool, label %if.then.2, label %if.end.10

if.then.2:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then.2
  %4 = load i32, i32* %i, align 4
  %5 = load i32, i32* %nstar.addr, align 4
  %cmp3 = icmp slt i32 %4, %5
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %6 = load i32, i32* %i, align 4
  %idxprom = sext i32 %6 to i64
  %7 = load %struct._object*, %struct._object** %stararg.addr, align 8
  %8 = bitcast %struct._object* %7 to %struct.PyTupleObject*
  %ob_item = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %8, i32 0, i32 1
  %arrayidx = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item, i32 0, i64 %idxprom
  %9 = load %struct._object*, %struct._object** %arrayidx, align 8
  store %struct._object* %9, %struct._object** %a, align 8
  %10 = load %struct._object*, %struct._object** %a, align 8
  %ob_refcnt = getelementptr inbounds %struct._object, %struct._object* %10, i32 0, i32 0
  %11 = load i64, i64* %ob_refcnt, align 8
  %inc = add i64 %11, 1
  store i64 %inc, i64* %ob_refcnt, align 8
  %12 = load %struct._object*, %struct._object** %a, align 8
  %13 = load i32, i32* %nstack.addr, align 4
  %14 = load i32, i32* %i, align 4
  %add5 = add i32 %13, %14
  %idxprom6 = sext i32 %add5 to i64
  %15 = load %struct._object*, %struct._object** %callargs, align 8
  %16 = bitcast %struct._object* %15 to %struct.PyTupleObject*
  %ob_item7 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %16, i32 0, i32 1
  %arrayidx8 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item7, i32 0, i64 %idxprom6
  store %struct._object* %12, %struct._object** %arrayidx8, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4
  %inc9 = add i32 %17, 1
  store i32 %inc9, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end.10

if.end.10:                                        ; preds = %for.end, %if.end
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.end.10
  %18 = load i32, i32* %nstack.addr, align 4
  %dec = add i32 %18, -1
  store i32 %dec, i32* %nstack.addr, align 4
  %cmp11 = icmp sge i32 %dec, 0
  br i1 %cmp11, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %19 = load %struct._object***, %struct._object**** %pp_stack.addr, align 8
  %20 = load %struct._object**, %struct._object*** %19, align 8
  %incdec.ptr = getelementptr %struct._object*, %struct._object** %20, i32 -1
  store %struct._object** %incdec.ptr, %struct._object*** %19, align 8
  %21 = load %struct._object*, %struct._object** %incdec.ptr, align 8
  store %struct._object* %21, %struct._object** %w, align 8
  %22 = load %struct._object*, %struct._object** %w, align 8
  %23 = load i32, i32* %nstack.addr, align 4
  %idxprom13 = sext i32 %23 to i64
  %24 = load %struct._object*, %struct._object** %callargs, align 8
  %25 = bitcast %struct._object* %24 to %struct.PyTupleObject*
  %ob_item14 = getelementptr inbounds %struct.PyTupleObject, %struct.PyTupleObject* %25, i32 0, i32 1
  %arrayidx15 = getelementptr [1 x %struct._object*], [1 x %struct._object*]* %ob_item14, i32 0, i64 %idxprom13
  store %struct._object* %22, %struct._object** %arrayidx15, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %26 = load %struct._object*, %struct._object** %callargs, align 8
  store %struct._object* %26, %struct._object** %retval
  br label %return

return:                                           ; preds = %while.end, %if.then
  %27 = load %struct._object*, %struct._object** %retval
  ret %struct._object* %27
}

declare i32 @PySequence_Contains(%struct._object*, %struct._object*) #2

declare i32 @PyErr_GivenExceptionMatches(%struct._object*, %struct._object*) #2

declare %struct._object* @PyObject_RichCompare(%struct._object*, %struct._object*, i32) #2

declare %struct._object* @_PyObject_GetAttrId(%struct._object*, %struct._Py_Identifier*) #2

declare %struct._object* @PyMapping_Keys(%struct._object*) #2

declare %struct._object* @PySequence_GetItem(%struct._object*, i64) #2

declare i32 @_PyUnicode_Ready(%struct._object*) #2

declare void @PyUnicode_Append(%struct._object**, %struct._object*) #2

attributes #0 = { nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind uwtable "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+sse,+sse2" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn }
attributes #8 = { nounwind readnone }

!llvm.ident = !{!0}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 296119}
!2 = !{i32 296801}
!3 = !{i32 308540}
!4 = !{i32 309177}
!5 = !{i32 309964}
!6 = !{i32 311394}
!7 = !{i32 313014}
!8 = !{i32 315057}
!9 = !{i32 139708}
!10 = !{i32 139548}
!11 = !{i32 297907}
!12 = !{i32 299538}
!13 = !{i32 300348}
!14 = !{i32 302772}
!15 = !{i32 304815}
!16 = !{i32 321593}
!17 = !{i32 323719}
!18 = !{i32 324356}
!19 = !{i32 325916}
!20 = !{i32 326553}
!21 = !{i32 327245}
!22 = !{i32 329288}
!23 = !{i32 347113}
